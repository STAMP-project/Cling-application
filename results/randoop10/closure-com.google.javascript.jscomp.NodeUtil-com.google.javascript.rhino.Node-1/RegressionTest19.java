import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest19 {

    public static boolean debug = false;

    @Test
    public void test09501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09501");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.jstype.JSType jSType7 = null;
        node5.setJSType(jSType7);
        node5.setType(2);
        com.google.javascript.rhino.Node node11 = node5.getLastSibling();
        boolean boolean12 = node5.isRegExp();
        boolean boolean13 = node5.isGetProp();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(41, node18);
        boolean boolean20 = node19.isWith();
        boolean boolean21 = node19.isCase();
        boolean boolean22 = node19.isFalse();
        boolean boolean23 = node19.isSwitch();
        com.google.javascript.rhino.Node node24 = node5.copyInformationFrom(node19);
        boolean boolean25 = node24.isFunction();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test09502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09502");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 100);
        sideEffectFlags1.setThrows();
        int int3 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setReturnsTainted();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
    }

    @Test
    public void test09503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09503");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.hasParameter("hi!");
        com.google.javascript.rhino.Node node4 = jSDocInfo0.getAssociatedNode();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node11.isName();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node14.isName();
        boolean boolean16 = node14.isSwitch();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (byte) 100, node9, node11, node14);
        java.lang.String str18 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(node9);
        java.lang.String str19 = node9.toStringTree();
        jSDocInfo0.setAssociatedNode(node9);
        java.lang.String str21 = jSDocInfo0.getOriginalCommentString();
        int int22 = jSDocInfo0.getParameterCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = jSDocInfo0.getTypedefType();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "STRING Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n\n" + "'", str19, "STRING Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n\n");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNull(jSTypeExpression23);
    }

    @Test
    public void test09504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09504");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        int int5 = node4.getChildCount();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node7.isName();
        boolean boolean9 = node7.isSwitch();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node7.hasChild(node11);
        boolean boolean13 = node7.isVar();
        com.google.javascript.rhino.Node node14 = node7.getParent();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node16.isName();
        boolean boolean18 = node16.isSwitch();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node16.hasChild(node20);
        boolean boolean22 = node16.isVar();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node24.isName();
        boolean boolean26 = node24.isSwitch();
        java.lang.String str27 = node24.toString();
        boolean boolean28 = node24.isWith();
        com.google.javascript.rhino.Node node29 = node16.srcref(node24);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(130, node4, node7, node24, node33, 0, 15);
        com.google.javascript.rhino.Node node37 = node36.getFirstChild();
        java.util.Set<java.lang.String> strSet38 = null;
        node37.setDirectives(strSet38);
        java.lang.String str40 = node37.toString();
        boolean boolean41 = node37.isThrow();
        boolean boolean42 = node37.isVarArgs();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "NUMBER -1.0" + "'", str27, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "NUMBER 100.0 100" + "'", str40, "NUMBER 100.0 100");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test09505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09505");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet5 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet5, strArray4);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node8.isName();
        boolean boolean10 = node8.isSwitch();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node8.hasChild(node12);
        com.google.javascript.rhino.Node node14 = com.google.javascript.jscomp.NodeUtil.newExpr(node8);
        int int15 = node8.getLength();
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node8.setDirectives((java.util.Set<java.lang.String>) strSet19);
        java.util.Spliterator<java.lang.String> strSpliterator22 = strSet19.spliterator();
        boolean boolean23 = strSet5.retainAll((java.util.Collection<java.lang.String>) strSet19);
        java.lang.Object[] objArray24 = strSet5.toArray();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node26.isName();
        boolean boolean28 = node26.isSwitch();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean31 = node26.hasChild(node30);
        com.google.javascript.rhino.Node node32 = com.google.javascript.jscomp.NodeUtil.newExpr(node26);
        int int33 = node26.getLength();
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        node26.setDirectives((java.util.Set<java.lang.String>) strSet37);
        boolean boolean40 = strSet37.isEmpty();
        boolean boolean41 = strSet5.containsAll((java.util.Collection<java.lang.String>) strSet37);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet43 = jSDocInfo42.getParameterNames();
        boolean boolean44 = strSet5.containsAll((java.util.Collection<java.lang.String>) strSet43);
        java.util.Spliterator<java.lang.String> strSpliterator45 = strSet43.spliterator();
        boolean boolean46 = strSet43.isEmpty();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean49 = node48.isName();
        boolean boolean50 = node48.isSwitch();
        java.lang.String str51 = node48.toString();
        boolean boolean52 = node48.isNumber();
        boolean boolean53 = node48.isComma();
        boolean boolean54 = node48.isDebugger();
        boolean boolean55 = node48.isWith();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean58 = node57.isName();
        boolean boolean59 = node57.isSwitch();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean62 = node57.hasChild(node61);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean65 = node64.isName();
        boolean boolean66 = node64.isSwitch();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean69 = node64.hasChild(node68);
        com.google.javascript.rhino.Node node70 = com.google.javascript.jscomp.NodeUtil.newExpr(node64);
        int int71 = node64.getLength();
        java.lang.String[] strArray74 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet75 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet75, strArray74);
        node64.setDirectives((java.util.Set<java.lang.String>) strSet75);
        java.lang.String str78 = node61.checkTreeEquals(node64);
        node61.setSourceEncodedPosition((int) 'a');
        com.google.javascript.rhino.jstype.JSType jSType81 = node61.getJSType();
        com.google.javascript.rhino.Node node82 = node48.copyInformationFrom(node61);
        com.google.javascript.rhino.jstype.JSType jSType83 = null;
        node61.setJSType(jSType83);
        java.lang.Object obj86 = node61.getProp(30);
        boolean boolean87 = strSet43.contains((java.lang.Object) node61);
        boolean boolean88 = node61.hasChildren();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strSpliterator22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[hi!]");
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strSpliterator45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "NUMBER -1.0" + "'", str51, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNull(jSType81);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test09506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09506");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 49);
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node7.isName();
        boolean boolean9 = node7.isSwitch();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node7.hasChild(node11);
        com.google.javascript.rhino.Node node13 = com.google.javascript.jscomp.NodeUtil.newExpr(node7);
        boolean boolean14 = node13.isRegExp();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node16.isName();
        boolean boolean18 = node16.isSwitch();
        java.lang.String str19 = node16.toString();
        com.google.javascript.rhino.Node node20 = node13.useSourceInfoIfMissingFromForTree(node16);
        java.lang.String str21 = node4.checkTreeEquals(node20);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node24.isName();
        boolean boolean26 = node24.isSwitch();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean29 = node24.hasChild(node28);
        boolean boolean30 = node28.isGetElem();
        node4.putProp((int) (short) 100, (java.lang.Object) boolean30);
        boolean boolean32 = node4.isCatch();
        boolean boolean33 = node4.isRegExp();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean36 = node35.isName();
        boolean boolean37 = node35.isSwitch();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean40 = node35.hasChild(node39);
        com.google.javascript.rhino.Node node41 = com.google.javascript.jscomp.NodeUtil.newExpr(node35);
        int int42 = node35.getLength();
        boolean boolean43 = node35.isNew();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean46 = node45.isName();
        boolean boolean47 = node45.isSwitch();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean50 = node45.hasChild(node49);
        com.google.javascript.rhino.Node node51 = com.google.javascript.jscomp.NodeUtil.newExpr(node45);
        int int52 = node45.getLength();
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet56 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet56, strArray55);
        node45.setDirectives((java.util.Set<java.lang.String>) strSet56);
        boolean boolean60 = node45.getBooleanProp(41);
        com.google.javascript.rhino.Node node61 = node35.useSourceInfoFromForTree(node45);
        com.google.javascript.rhino.InputId inputId63 = new com.google.javascript.rhino.InputId("");
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean66 = node65.isName();
        boolean boolean67 = node65.isSwitch();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean70 = node65.hasChild(node69);
        com.google.javascript.rhino.Node node71 = com.google.javascript.jscomp.NodeUtil.newExpr(node65);
        node65.setOptionalArg(true);
        node65.putBooleanProp((int) (short) -1, true);
        boolean boolean77 = inputId63.equals((java.lang.Object) true);
        node45.setInputId(inputId63);
        node4.setInputId(inputId63);
        node2.setInputId(inputId63);
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        node83.setWasEmptyNode(true);
        boolean boolean86 = node83.isOr();
        node83.detachChildren();
        boolean boolean88 = node83.isTrue();
        com.google.javascript.rhino.Node[] nodeArray89 = new com.google.javascript.rhino.Node[] { node83 };
        com.google.javascript.rhino.Node node90 = new com.google.javascript.rhino.Node(47, nodeArray89);
        com.google.javascript.rhino.Node node91 = node90.removeChildren();
        com.google.javascript.rhino.Node node94 = new com.google.javascript.rhino.Node(0, node2, node90, 32, (int) '#');
        boolean boolean95 = node90.isScript();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "NUMBER -1.0" + "'", str19, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n" + "'", str21, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(nodeArray89);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test09507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09507");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        boolean boolean2 = node1.isDelProp();
        com.google.javascript.rhino.InputId inputId3 = node1.getInputId();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node6.isName();
        boolean boolean8 = node6.isSwitch();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node6.hasChild(node10);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean14 = node13.isName();
        boolean boolean15 = node13.isSwitch();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node13.hasChild(node17);
        com.google.javascript.rhino.Node node19 = com.google.javascript.jscomp.NodeUtil.newExpr(node13);
        boolean boolean20 = node19.isRegExp();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean23 = node22.isName();
        boolean boolean24 = node22.isSwitch();
        java.lang.String str25 = node22.toString();
        com.google.javascript.rhino.Node node26 = node19.useSourceInfoIfMissingFromForTree(node22);
        boolean boolean27 = node10.isEquivalentToTyped(node22);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean30 = node29.isName();
        boolean boolean31 = node29.isSwitch();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean34 = node29.hasChild(node33);
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        node33.setJSType(jSType35);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(45, node10, node33, 10, 2);
        java.util.Set<java.lang.String> strSet40 = null;
        node10.setDirectives(strSet40);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(27);
        boolean boolean45 = node44.isFromExterns();
        boolean boolean46 = node44.isGetElem();
        node10.putProp(46, (java.lang.Object) node44);
        boolean boolean48 = node44.hasChildren();
        java.lang.String str49 = node1.checkTreeEquals(node44);
        node44.setLineno(10);
        node44.setCharno(40);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(inputId3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "NUMBER -1.0" + "'", str25, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Node tree inequality:\nTree1:\nSTRING Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n\n\n\nTree2:\nBITNOT\n\n\nSubtree1: STRING Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n\n\n\nSubtree2: BITNOT\n" + "'", str49, "Node tree inequality:\nTree1:\nSTRING Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n\n\n\nTree2:\nBITNOT\n\n\nSubtree1: STRING Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n\n\n\nSubtree2: BITNOT\n");
    }

    @Test
    public void test09508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09508");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isFunction();
        boolean boolean3 = node1.isUnscopedQualifiedName();
        boolean boolean4 = node1.isEmpty();
        boolean boolean5 = node1.isEmpty();
        boolean boolean6 = node1.isAssign();
        boolean boolean7 = node1.isScript();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean10 = node9.isFunction();
        boolean boolean11 = node9.isUnscopedQualifiedName();
        boolean boolean12 = node9.isEmpty();
        boolean boolean13 = node9.isEmpty();
        boolean boolean14 = node9.isAssign();
        boolean boolean15 = node9.isQualifiedName();
        com.google.javascript.rhino.Node node16 = node1.useSourceInfoFromForTree(node9);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
    }

    @Test
    public void test09509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09509");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        int int8 = node1.getLength();
        boolean boolean9 = node1.isNew();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node11.isName();
        boolean boolean13 = node11.isSwitch();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean16 = node11.hasChild(node15);
        com.google.javascript.rhino.Node node17 = com.google.javascript.jscomp.NodeUtil.newExpr(node11);
        int int18 = node11.getLength();
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        node11.setDirectives((java.util.Set<java.lang.String>) strSet22);
        boolean boolean26 = node11.getBooleanProp(41);
        com.google.javascript.rhino.Node node27 = node1.useSourceInfoFromForTree(node11);
        com.google.javascript.rhino.jstype.JSType jSType28 = node27.getJSType();
        com.google.javascript.rhino.InputId inputId29 = node27.getInputId();
        boolean boolean30 = node27.isCall();
        boolean boolean31 = node27.isNE();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(jSType28);
        org.junit.Assert.assertNull(inputId29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test09510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09510");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (byte) 10, 100, 12);
        boolean boolean5 = node4.isDec();
        node4.setLineno(100);
        boolean boolean8 = node4.isGetProp();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isFunction();
        boolean boolean12 = node10.isUnscopedQualifiedName();
        boolean boolean13 = node10.isEmpty();
        boolean boolean14 = node10.isEmpty();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node16.isName();
        boolean boolean18 = node16.isSwitch();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node16.hasChild(node20);
        boolean boolean22 = node16.isVar();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node24.isName();
        boolean boolean26 = node24.isSwitch();
        java.lang.String str27 = node24.toString();
        boolean boolean28 = node24.isWith();
        com.google.javascript.rhino.Node node29 = node16.srcref(node24);
        node16.detachChildren();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        com.google.javascript.jscomp.CodingConvention.Bind bind33 = new com.google.javascript.jscomp.CodingConvention.Bind(node10, node16, node32);
        com.google.javascript.rhino.Node node34 = node4.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.Node node35 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(4095, node34, node35, 0, (-2147483648));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "NUMBER -1.0" + "'", str27, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node34);
    }

    @Test
    public void test09511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09511");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        boolean boolean7 = jSDocInfo0.hasDescriptionForParameter("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        boolean boolean9 = jSDocInfo0.hasParameter("hi!");
        boolean boolean10 = jSDocInfo0.isConsistentIdGenerator();
        jSDocInfo0.setDeprecated(true);
        boolean boolean13 = jSDocInfo0.hasBaseType();
        boolean boolean15 = jSDocInfo0.hasParameter("java.io.IOException: BITXOR 0\n");
        java.lang.String str16 = jSDocInfo0.getBlockDescription();
        boolean boolean17 = jSDocInfo0.shouldPreserveTry();
        boolean boolean18 = jSDocInfo0.isNoSideEffects();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test09512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09512");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        java.lang.String str4 = node1.toString();
        boolean boolean5 = node1.isWith();
        int int7 = node1.getIntProp((int) ' ');
        boolean boolean8 = node1.isNE();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node10.hasChild(node14);
        com.google.javascript.rhino.jstype.JSType jSType16 = null;
        node14.setJSType(jSType16);
        node14.setType(2);
        com.google.javascript.rhino.Node node20 = node14.getLastSibling();
        com.google.javascript.rhino.Node node21 = node1.srcref(node20);
        node20.putBooleanProp(0, false);
        boolean boolean25 = node20.isRegExp();
        boolean boolean26 = node20.isWith();
        boolean boolean27 = node20.isParamList();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER -1.0" + "'", str4, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test09513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09513");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        boolean boolean7 = node1.isVar();
        node1.setOptionalArg(true);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType10 = com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN;
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        com.google.javascript.rhino.jstype.JSType jSType13 = node12.getJSType();
        boolean boolean14 = node12.isScript();
        boolean boolean15 = node12.isTry();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node17.isName();
        boolean boolean19 = node17.isSwitch();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node17.hasChild(node21);
        com.google.javascript.rhino.Node node23 = com.google.javascript.jscomp.NodeUtil.newExpr(node17);
        node17.setOptionalArg(true);
        node17.putBooleanProp((int) (short) -1, true);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean31 = node30.isName();
        boolean boolean32 = node30.isSwitch();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean35 = node30.hasChild(node34);
        com.google.javascript.rhino.Node node36 = com.google.javascript.jscomp.NodeUtil.newExpr(node30);
        boolean boolean37 = node36.isRegExp();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean40 = node39.isName();
        boolean boolean41 = node39.isSwitch();
        java.lang.String str42 = node39.toString();
        com.google.javascript.rhino.Node node43 = node36.useSourceInfoIfMissingFromForTree(node39);
        com.google.javascript.rhino.Node node44 = node17.useSourceInfoFromForTree(node36);
        boolean boolean45 = node17.hasOneChild();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean48 = node47.isName();
        boolean boolean49 = node47.isSwitch();
        java.lang.String str50 = node47.toString();
        boolean boolean51 = node47.isVar();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean54 = node53.isName();
        boolean boolean55 = node53.isSwitch();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean58 = node53.hasChild(node57);
        com.google.javascript.rhino.Node node59 = com.google.javascript.jscomp.NodeUtil.newExpr(node53);
        boolean boolean60 = node59.isRegExp();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean63 = node62.isName();
        boolean boolean64 = node62.isSwitch();
        java.lang.String str65 = node62.toString();
        com.google.javascript.rhino.Node node66 = node59.useSourceInfoIfMissingFromForTree(node62);
        com.google.javascript.jscomp.CodingConvention.Bind bind67 = new com.google.javascript.jscomp.CodingConvention.Bind(node17, node47, node59);
        boolean boolean68 = node47.isInstanceOf();
        com.google.javascript.rhino.Node node69 = node12.useSourceInfoIfMissingFrom(node47);
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean72 = node71.isName();
        boolean boolean73 = node71.isSwitch();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean76 = node71.hasChild(node75);
        boolean boolean77 = node71.isVar();
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean80 = node79.isName();
        boolean boolean81 = node79.isSwitch();
        java.lang.String str82 = node79.toString();
        boolean boolean83 = node79.isWith();
        com.google.javascript.rhino.Node node84 = node71.srcref(node79);
        java.lang.String str85 = node84.toString();
        int int86 = node84.getCharno();
        com.google.javascript.rhino.InputId inputId87 = com.google.javascript.jscomp.NodeUtil.getInputId(node84);
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship88 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType10, node47, node84);
        com.google.javascript.rhino.Node node89 = node84.getParent();
        com.google.javascript.rhino.InputId inputId90 = com.google.javascript.jscomp.NodeUtil.getInputId(node84);
        int int91 = node84.getSourceOffset();
        com.google.javascript.rhino.Node node92 = node1.useSourceInfoFrom(node84);
        node1.setSourceFileForTesting("InputId: java.io.IOException: NUMBER -1.0");
        node1.setOptionalArg(false);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + subclassType10 + "' != '" + com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN + "'", subclassType10.equals(com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(jSType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "NUMBER -1.0" + "'", str42, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "NUMBER -1.0" + "'", str50, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "NUMBER -1.0" + "'", str65, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "NUMBER -1.0" + "'", str82, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "NUMBER -1.0" + "'", str85, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertNull(inputId87);
        org.junit.Assert.assertNull(node89);
        org.junit.Assert.assertNull(inputId90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertNotNull(node92);
    }

    @Test
    public void test09514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09514");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        boolean boolean6 = node4.isSwitch();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node4.hasChild(node8);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node11.isName();
        boolean boolean13 = node11.isSwitch();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean16 = node11.hasChild(node15);
        com.google.javascript.rhino.Node node17 = com.google.javascript.jscomp.NodeUtil.newExpr(node11);
        boolean boolean18 = node17.isRegExp();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node20.isName();
        boolean boolean22 = node20.isSwitch();
        java.lang.String str23 = node20.toString();
        com.google.javascript.rhino.Node node24 = node17.useSourceInfoIfMissingFromForTree(node20);
        boolean boolean25 = node8.isEquivalentToTyped(node20);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile26 = null;
        node8.setStaticSourceFile(staticSourceFile26);
        int int28 = node8.getType();
        boolean boolean29 = node8.isThrow();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 1, node2, node8, 41, (int) (byte) 100);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile33 = null;
        node8.setStaticSourceFile(staticSourceFile33);
        int int35 = node8.getSourcePosition();
        boolean boolean36 = node8.isLabelName();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "NUMBER -1.0" + "'", str23, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 39 + "'", int28 == 39);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test09515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09515");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        int int8 = node1.getLength();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        node1.setDirectives((java.util.Set<java.lang.String>) strSet12);
        java.lang.Object[] objArray15 = strSet12.toArray();
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        int int20 = strList18.size();
        boolean boolean21 = strSet12.containsAll((java.util.Collection<java.lang.String>) strList18);
        java.util.Spliterator<java.lang.String> strSpliterator22 = strSet12.spliterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList24 = jSDocInfo23.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection25 = jSDocInfo23.getReferences();
        com.google.common.collect.ImmutableList<java.lang.String> strList26 = jSDocInfo23.getTemplateTypeNames();
        java.lang.String str27 = jSDocInfo23.toString();
        com.google.common.collect.ImmutableList<java.lang.String> strList28 = jSDocInfo23.getTemplateTypeNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression29 = jSDocInfo23.getEnumParameterType();
        java.util.Set<java.lang.String> strSet30 = jSDocInfo23.getSuppressions();
        java.util.Spliterator<java.lang.String> strSpliterator31 = strSet30.spliterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList33 = jSDocInfo32.getExtendedInterfaces();
        java.lang.String str34 = jSDocInfo32.getReturnDescription();
        boolean boolean35 = jSDocInfo32.hasFileOverview();
        boolean boolean36 = jSDocInfo32.isNoAlias();
        jSDocInfo32.setDeprecated(true);
        jSDocInfo32.setLicense("java.io.IOException: java.io.IOException");
        java.util.Set<java.lang.String> strSet41 = jSDocInfo32.getSuppressions();
        boolean boolean42 = strSet30.containsAll((java.util.Collection<java.lang.String>) strSet41);
        boolean boolean43 = strSet12.containsAll((java.util.Collection<java.lang.String>) strSet30);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean45 = strSet30.add("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[hi!]");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strSpliterator22);
        org.junit.Assert.assertNotNull(jSTypeExpressionList24);
        org.junit.Assert.assertNull(strCollection25);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "JSDocInfo" + "'", str27, "JSDocInfo");
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertNull(jSTypeExpression29);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(strSpliterator31);
        org.junit.Assert.assertNotNull(jSTypeExpressionList33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test09516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09516");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("BITXOR 0\n", 41, (int) ' ');
        boolean boolean5 = com.google.javascript.jscomp.NodeUtil.isSymmetricOperation(node4);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n", (int) (short) 100, 42);
        node9.setOptionalArg(true);
        boolean boolean12 = node9.isAssign();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(43, node4, node9);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder14 = node13.new FileLevelJsDocBuilder();
        fileLevelJsDocBuilder14.append("NUMBER 10.0 0");
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test09517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09517");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (byte) -1, "");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test09518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09518");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("BITXOR 0\n", 41, (int) ' ');
        boolean boolean4 = node3.isFunction();
        node3.setWasEmptyNode(false);
        boolean boolean7 = node3.isOnlyModifiesThisCall();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test09519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09519");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node2.hasChild(node6);
        boolean boolean8 = node2.isVar();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        java.lang.String str13 = node10.toString();
        boolean boolean14 = node10.isWith();
        com.google.javascript.rhino.Node node15 = node2.srcref(node10);
        boolean boolean16 = node10.isFor();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean19 = node18.isName();
        boolean boolean20 = node18.isSwitch();
        boolean boolean21 = node18.isNull();
        boolean boolean22 = node18.isFunction();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node24.isName();
        boolean boolean26 = node24.isSwitch();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean29 = node24.hasChild(node28);
        boolean boolean30 = node24.isVar();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean33 = node32.isName();
        boolean boolean34 = node32.isSwitch();
        java.lang.String str35 = node32.toString();
        boolean boolean36 = node32.isWith();
        com.google.javascript.rhino.Node node37 = node24.srcref(node32);
        java.lang.String str38 = node37.toString();
        boolean boolean39 = node37.isDec();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean42 = node41.isName();
        boolean boolean43 = node41.isSwitch();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean46 = node41.hasChild(node45);
        com.google.javascript.rhino.Node node47 = com.google.javascript.jscomp.NodeUtil.newExpr(node41);
        boolean boolean48 = node47.isRegExp();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean51 = node50.isName();
        boolean boolean52 = node50.isSwitch();
        java.lang.String str53 = node50.toString();
        com.google.javascript.rhino.Node node54 = node47.useSourceInfoIfMissingFromForTree(node50);
        com.google.javascript.rhino.jstype.JSType jSType55 = null;
        node50.setJSType(jSType55);
        boolean boolean57 = node50.isOptionalArg();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) -1, node10, node18, node37, node50, (int) (short) -1, 0);
        boolean boolean61 = node60.isLocalResultCall();
        boolean boolean62 = node60.isNumber();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "NUMBER -1.0" + "'", str13, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "NUMBER -1.0" + "'", str35, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "NUMBER -1.0" + "'", str38, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "NUMBER -1.0" + "'", str53, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test09520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09520");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        node1.setOptionalArg(true);
        node1.putBooleanProp((int) (short) -1, true);
        int int13 = node1.getLineno();
        boolean boolean14 = node1.isDebugger();
        boolean boolean15 = com.google.javascript.jscomp.NodeUtil.isSymmetricOperation(node1);
        int int16 = node1.getChildCount();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean20 = node19.isName();
        boolean boolean21 = node19.isSwitch();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean24 = node19.hasChild(node23);
        boolean boolean25 = node19.isVar();
        com.google.javascript.rhino.InputId inputId26 = null;
        node19.setInputId(inputId26);
        java.lang.Object obj29 = node19.getProp(52);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        node31.setWasEmptyNode(true);
        boolean boolean34 = node31.isOr();
        boolean boolean35 = node31.isInstanceOf();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(4095, node19, node31, 130, 10);
        boolean boolean39 = node19.isFor();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        int int45 = node44.getChildCount();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean48 = node47.isName();
        boolean boolean49 = node47.isSwitch();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean52 = node47.hasChild(node51);
        boolean boolean53 = node47.isVar();
        com.google.javascript.rhino.Node node54 = node47.getParent();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean57 = node56.isName();
        boolean boolean58 = node56.isSwitch();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean61 = node56.hasChild(node60);
        boolean boolean62 = node56.isVar();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean65 = node64.isName();
        boolean boolean66 = node64.isSwitch();
        java.lang.String str67 = node64.toString();
        boolean boolean68 = node64.isWith();
        com.google.javascript.rhino.Node node69 = node56.srcref(node64);
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node(130, node44, node47, node64, node73, 0, 15);
        com.google.javascript.rhino.Node node77 = node76.getFirstChild();
        java.util.Set<java.lang.String> strSet78 = null;
        node77.setDirectives(strSet78);
        java.lang.String str80 = node77.toString();
        boolean boolean81 = node77.isFromExterns();
        boolean boolean82 = com.google.javascript.jscomp.NodeUtil.isSymmetricOperation(node77);
        com.google.javascript.jscomp.CodingConvention.Bind bind83 = new com.google.javascript.jscomp.CodingConvention.Bind(node1, node19, node77);
        com.google.javascript.rhino.Node node84 = node1.cloneTree();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "NUMBER -1.0" + "'", str67, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "NUMBER 100.0 100" + "'", str80, "NUMBER 100.0 100");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node84);
    }

    @Test
    public void test09521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09521");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        boolean boolean5 = jSDocInfo0.isIdGenerator();
        java.lang.String str6 = jSDocInfo0.getReturnDescription();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getSuppressions();
        boolean boolean8 = jSDocInfo0.isNoAlias();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test09522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09522");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.hasParameter("hi!");
        boolean boolean4 = jSDocInfo0.hasThisType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getModifies();
        boolean boolean6 = jSDocInfo0.hasTypedefType();
        boolean boolean7 = jSDocInfo0.isExpose();
        jSDocInfo0.setDeprecated(false);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getReturnType();
        com.google.javascript.rhino.Node node11 = jSDocInfo0.getAssociatedNode();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertNull(node11);
    }

    @Test
    public void test09523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09523");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        boolean boolean2 = node1.isVoid();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        boolean boolean6 = node4.isSwitch();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node4.hasChild(node8);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node11.isName();
        boolean boolean13 = node11.isSwitch();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean16 = node11.hasChild(node15);
        com.google.javascript.rhino.Node node17 = com.google.javascript.jscomp.NodeUtil.newExpr(node11);
        boolean boolean18 = node17.isRegExp();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node20.isName();
        boolean boolean22 = node20.isSwitch();
        java.lang.String str23 = node20.toString();
        com.google.javascript.rhino.Node node24 = node17.useSourceInfoIfMissingFromForTree(node20);
        boolean boolean25 = node8.isEquivalentToTyped(node20);
        com.google.javascript.rhino.InputId inputId26 = null;
        node20.setInputId(inputId26);
        boolean boolean28 = node20.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean31 = node30.isName();
        boolean boolean32 = node30.isSwitch();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean35 = node30.hasChild(node34);
        int int36 = node34.getLineno();
        java.util.Set<java.lang.String> strSet37 = node34.getDirectives();
        java.lang.String str38 = com.google.javascript.jscomp.NodeUtil.getSourceName(node34);
        boolean boolean39 = node34.isDelProp();
        node34.setType(15);
        boolean boolean42 = node34.isDelProp();
        node20.addChildrenToBack(node34);
        com.google.javascript.rhino.Node node44 = node1.srcrefTree(node20);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "NUMBER -1.0" + "'", str23, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNull(strSet37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node44);
    }

    @Test
    public void test09524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09524");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node8.isName();
        boolean boolean10 = node8.isSwitch();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node8.hasChild(node12);
        com.google.javascript.rhino.Node node14 = com.google.javascript.jscomp.NodeUtil.newExpr(node8);
        boolean boolean15 = node14.isRegExp();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node17.isName();
        boolean boolean19 = node17.isSwitch();
        java.lang.String str20 = node17.toString();
        com.google.javascript.rhino.Node node21 = node14.useSourceInfoIfMissingFromForTree(node17);
        boolean boolean22 = node5.isEquivalentToTyped(node17);
        com.google.javascript.rhino.InputId inputId23 = null;
        node17.setInputId(inputId23);
        com.google.javascript.rhino.Node node25 = com.google.javascript.jscomp.NodeUtil.newExpr(node17);
        int int26 = node25.getSourcePosition();
        java.lang.String str27 = node25.toStringTree();
        boolean boolean28 = node25.isCase();
        node25.putIntProp((int) (byte) 100, 38);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "NUMBER -1.0" + "'", str20, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "EXPR_RESULT\n    NUMBER -1.0\n" + "'", str27, "EXPR_RESULT\n    NUMBER -1.0\n");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test09525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09525");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.hasParameter("hi!");
        boolean boolean4 = jSDocInfo0.hasThisType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getThrownTypes();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str7 = jSDocInfo0.getLicense();
        jSDocInfo0.addSuppression("");
        boolean boolean10 = jSDocInfo0.isNoAlias();
        boolean boolean11 = jSDocInfo0.hasReturnType();
        boolean boolean12 = jSDocInfo0.isIdGenerator();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList13 = jSDocInfo0.getThrownTypes();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList13);
    }

    @Test
    public void test09526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09526");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        java.lang.String str4 = node1.toString();
        boolean boolean5 = node1.isWith();
        int int7 = node1.getIntProp((int) ' ');
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder8 = node1.new FileLevelJsDocBuilder();
        boolean boolean9 = node1.isNumber();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile10 = node1.getStaticSourceFile();
        boolean boolean11 = node1.isArrayLit();
        com.google.javascript.rhino.Node node12 = null;
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean16 = node15.isName();
        boolean boolean17 = node15.isSwitch();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean20 = node15.hasChild(node19);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean23 = node22.isName();
        boolean boolean24 = node22.isSwitch();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node22.hasChild(node26);
        com.google.javascript.rhino.Node node28 = com.google.javascript.jscomp.NodeUtil.newExpr(node22);
        boolean boolean29 = node28.isRegExp();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean32 = node31.isName();
        boolean boolean33 = node31.isSwitch();
        java.lang.String str34 = node31.toString();
        com.google.javascript.rhino.Node node35 = node28.useSourceInfoIfMissingFromForTree(node31);
        boolean boolean36 = node19.isEquivalentToTyped(node31);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean39 = node38.isName();
        boolean boolean40 = node38.isSwitch();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean43 = node38.hasChild(node42);
        com.google.javascript.rhino.jstype.JSType jSType44 = null;
        node42.setJSType(jSType44);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(45, node19, node42, 10, 2);
        java.util.Set<java.lang.String> strSet49 = null;
        node19.setDirectives(strSet49);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean53 = node52.isName();
        boolean boolean54 = node52.isSwitch();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean57 = node52.hasChild(node56);
        boolean boolean58 = node52.isComma();
        com.google.javascript.jscomp.CodingConvention.Bind bind59 = new com.google.javascript.jscomp.CodingConvention.Bind(node12, node19, node52);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean63 = node62.isName();
        boolean boolean64 = node62.isSwitch();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean67 = node62.hasChild(node66);
        com.google.javascript.rhino.Node node68 = com.google.javascript.jscomp.NodeUtil.newExpr(node62);
        boolean boolean69 = node68.isRegExp();
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean72 = node71.isName();
        boolean boolean73 = node71.isSwitch();
        java.lang.String str74 = node71.toString();
        com.google.javascript.rhino.Node node75 = node68.useSourceInfoIfMissingFromForTree(node71);
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node(50, node75);
        com.google.javascript.rhino.Node node77 = node19.srcref(node76);
        node19.setVarArgs(false);
        com.google.javascript.rhino.Node node80 = node1.useSourceInfoIfMissingFromForTree(node19);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER -1.0" + "'", str4, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(staticSourceFile10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "NUMBER -1.0" + "'", str34, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "NUMBER -1.0" + "'", str74, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node80);
    }

    @Test
    public void test09527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09527");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection4 = jSDocInfo0.getMarkers();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getType();
        boolean boolean6 = jSDocInfo0.isExport();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(markerCollection4);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test09528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09528");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node2.hasChild(node6);
        com.google.javascript.rhino.Node node8 = com.google.javascript.jscomp.NodeUtil.newExpr(node2);
        boolean boolean9 = node8.isRegExp();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node11.isName();
        boolean boolean13 = node11.isSwitch();
        java.lang.String str14 = node11.toString();
        com.google.javascript.rhino.Node node15 = node8.useSourceInfoIfMissingFromForTree(node11);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(50, node15);
        boolean boolean17 = node15.isGetterDef();
        boolean boolean18 = node15.isVar();
        boolean boolean19 = node15.isSwitch();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n", (int) (short) 100, 42);
        node23.setOptionalArg(true);
        boolean boolean26 = node23.isAssign();
        java.lang.Object obj28 = node23.getProp((int) ' ');
        com.google.javascript.rhino.jstype.JSType jSType29 = null;
        node23.setJSType(jSType29);
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet32 = jSDocInfo31.getParameterNames();
        boolean boolean34 = jSDocInfo31.hasParameter("hi!");
        boolean boolean35 = jSDocInfo31.hasThisType();
        boolean boolean36 = jSDocInfo31.isIdGenerator();
        jSDocInfo31.setLicense("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        boolean boolean39 = jSDocInfo31.isOverride();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean42 = node41.isName();
        boolean boolean43 = node41.isSwitch();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean46 = node41.hasChild(node45);
        com.google.javascript.rhino.Node node47 = com.google.javascript.jscomp.NodeUtil.newExpr(node41);
        boolean boolean48 = node47.isRegExp();
        jSDocInfo31.setAssociatedNode(node47);
        boolean boolean50 = node47.isCatch();
        boolean boolean51 = node47.hasChildren();
        boolean boolean52 = node23.isEquivalentTo(node47);
        java.lang.String str53 = node23.toStringTree();
        boolean boolean54 = node23.isStringKey();
        com.google.javascript.rhino.Node node55 = node15.srcrefTree(node23);
        boolean boolean56 = node55.isCase();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.JSDocInfo jSDocInfo57 = com.google.javascript.jscomp.NodeUtil.getFunctionJSDocInfo(node55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "NUMBER -1.0" + "'", str14, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "STRING Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n 100 [opt_arg: 1]\n" + "'", str53, "STRING Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n 100 [opt_arg: 1]\n");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test09529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09529");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        int int8 = node1.getLength();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        node1.setDirectives((java.util.Set<java.lang.String>) strSet12);
        java.lang.Object[] objArray15 = strSet12.toArray();
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        int int20 = strList18.size();
        boolean boolean21 = strSet12.containsAll((java.util.Collection<java.lang.String>) strList18);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean24 = node23.isName();
        boolean boolean25 = node23.isSwitch();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean28 = node23.hasChild(node27);
        com.google.javascript.rhino.Node node29 = com.google.javascript.jscomp.NodeUtil.newExpr(node23);
        int int30 = node23.getLength();
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        node23.setDirectives((java.util.Set<java.lang.String>) strSet34);
        java.lang.Object[] objArray37 = strSet34.toArray();
        boolean boolean38 = strSet12.removeAll((java.util.Collection<java.lang.String>) strSet34);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition39 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int40 = namePosition39.getPositionOnStartLine();
        int int41 = namePosition39.getPositionOnStartLine();
        int int42 = namePosition39.getStartLine();
        boolean boolean43 = strSet12.equals((java.lang.Object) namePosition39);
        strSet12.clear();
        java.lang.Throwable throwable46 = null;
        java.io.IOException iOException47 = new java.io.IOException(throwable46);
        java.io.IOException iOException48 = new java.io.IOException((java.lang.Throwable) iOException47);
        java.io.IOException iOException49 = new java.io.IOException("NUMBER -1.0\n", (java.lang.Throwable) iOException47);
        java.lang.Throwable[] throwableArray50 = iOException49.getSuppressed();
        java.io.Serializable[] serializableArray51 = strSet12.toArray((java.io.Serializable[]) throwableArray50);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean54 = node53.isName();
        boolean boolean55 = node53.isSwitch();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean58 = node53.hasChild(node57);
        com.google.javascript.rhino.Node node59 = com.google.javascript.jscomp.NodeUtil.newExpr(node53);
        int int60 = node53.getLength();
        java.lang.String[] strArray63 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet64 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet64, strArray63);
        node53.setDirectives((java.util.Set<java.lang.String>) strSet64);
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        int int71 = strList69.size();
        java.lang.String[] strArray73 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList74 = new java.util.ArrayList<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList74, strArray73);
        int int76 = strList74.size();
        boolean boolean77 = strList69.removeAll((java.util.Collection<java.lang.String>) strList74);
        boolean boolean78 = strSet64.retainAll((java.util.Collection<java.lang.String>) strList74);
        strSet64.clear();
        java.util.Spliterator<java.lang.String> strSpliterator80 = strSet64.spliterator();
        boolean boolean81 = strSet64.isEmpty();
        java.lang.Object[] objArray82 = strSet64.toArray();
        boolean boolean83 = strSet12.removeAll((java.util.Collection<java.lang.String>) strSet64);
        boolean boolean85 = strSet64.add("Node tree inequality:\nTree1:\nEXPR_RESULT 42\n    NUMBER -1.0\n\n\nTree2:\nSTRING Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n\n\n\nSubtree1: EXPR_RESULT 42\n    NUMBER -1.0\n\n\nSubtree2: STRING Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n\n");
        java.util.stream.Stream<java.lang.String> strStream86 = strSet64.parallelStream();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[hi!]");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(serializableArray51);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(strSpliterator80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(strStream86);
    }

    @Test
    public void test09530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09530");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("BITXOR 0\n", 41, (int) ' ');
        boolean boolean5 = com.google.javascript.jscomp.NodeUtil.isSymmetricOperation(node4);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n", (int) (short) 100, 42);
        node9.setOptionalArg(true);
        boolean boolean12 = node9.isAssign();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(43, node4, node9);
        boolean boolean14 = node4.isTry();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = node4.getJSDocInfo();
        boolean boolean16 = node4.isBreak();
        boolean boolean17 = node4.isDefaultCase();
        // The following exception was thrown during execution in test generation
        try {
            double double18 = node4.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: STRING BITXOR 0? 41 is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSDocInfo15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test09531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09531");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node2.hasChild(node6);
        boolean boolean8 = node2.isVar();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        java.lang.String str13 = node10.toString();
        boolean boolean14 = node10.isWith();
        com.google.javascript.rhino.Node node15 = node2.srcref(node10);
        boolean boolean16 = node10.isFor();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean19 = node18.isName();
        boolean boolean20 = node18.isSwitch();
        boolean boolean21 = node18.isNull();
        boolean boolean22 = node18.isFunction();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node24.isName();
        boolean boolean26 = node24.isSwitch();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean29 = node24.hasChild(node28);
        boolean boolean30 = node24.isVar();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean33 = node32.isName();
        boolean boolean34 = node32.isSwitch();
        java.lang.String str35 = node32.toString();
        boolean boolean36 = node32.isWith();
        com.google.javascript.rhino.Node node37 = node24.srcref(node32);
        java.lang.String str38 = node37.toString();
        boolean boolean39 = node37.isDec();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean42 = node41.isName();
        boolean boolean43 = node41.isSwitch();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean46 = node41.hasChild(node45);
        com.google.javascript.rhino.Node node47 = com.google.javascript.jscomp.NodeUtil.newExpr(node41);
        boolean boolean48 = node47.isRegExp();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean51 = node50.isName();
        boolean boolean52 = node50.isSwitch();
        java.lang.String str53 = node50.toString();
        com.google.javascript.rhino.Node node54 = node47.useSourceInfoIfMissingFromForTree(node50);
        com.google.javascript.rhino.jstype.JSType jSType55 = null;
        node50.setJSType(jSType55);
        boolean boolean57 = node50.isOptionalArg();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) -1, node10, node18, node37, node50, (int) (short) -1, 0);
        node10.setCharno((int) '#');
        com.google.javascript.rhino.Node node63 = node10.getLastChild();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "NUMBER -1.0" + "'", str13, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "NUMBER -1.0" + "'", str35, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "NUMBER -1.0" + "'", str38, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "NUMBER -1.0" + "'", str53, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(node63);
    }

    @Test
    public void test09532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09532");
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative1 = null;
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec2 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("", jSTypeNative1);
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        boolean boolean6 = node4.isSwitch();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node4.hasChild(node8);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node11.isName();
        boolean boolean13 = node11.isSwitch();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean16 = node11.hasChild(node15);
        com.google.javascript.rhino.Node node17 = com.google.javascript.jscomp.NodeUtil.newExpr(node11);
        boolean boolean18 = node17.isRegExp();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node20.isName();
        boolean boolean22 = node20.isSwitch();
        java.lang.String str23 = node20.toString();
        com.google.javascript.rhino.Node node24 = node17.useSourceInfoIfMissingFromForTree(node20);
        boolean boolean25 = node8.isEquivalentToTyped(node20);
        com.google.javascript.rhino.Node node26 = assertionFunctionSpec2.getAssertedParam(node8);
        boolean boolean27 = node26.isGetterDef();
        boolean boolean28 = node26.isComma();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        com.google.javascript.rhino.jstype.JSType jSType31 = node30.getJSType();
        com.google.javascript.rhino.jstype.JSType jSType32 = null;
        node30.setJSType(jSType32);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean36 = node35.isName();
        boolean boolean37 = node35.isSwitch();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean40 = node35.hasChild(node39);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean43 = node42.isName();
        boolean boolean44 = node42.isSwitch();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean47 = node42.hasChild(node46);
        com.google.javascript.rhino.Node node48 = com.google.javascript.jscomp.NodeUtil.newExpr(node42);
        boolean boolean49 = node48.isRegExp();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean52 = node51.isName();
        boolean boolean53 = node51.isSwitch();
        java.lang.String str54 = node51.toString();
        com.google.javascript.rhino.Node node55 = node48.useSourceInfoIfMissingFromForTree(node51);
        boolean boolean56 = node39.isEquivalentToTyped(node51);
        boolean boolean57 = node51.isReturn();
        com.google.javascript.jscomp.CodingConvention.Bind bind58 = new com.google.javascript.jscomp.CodingConvention.Bind(node26, node30, node51);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable59 = node51.siblings();
        boolean boolean60 = node51.isAssignAdd();
        boolean boolean61 = node51.isWith();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "NUMBER -1.0" + "'", str23, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(jSType31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "NUMBER -1.0" + "'", str54, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(nodeIterable59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test09533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09533");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.hasParameter("hi!");
        boolean boolean4 = jSDocInfo0.hasThisType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.JSDocInfo jSDocInfo6 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo6.getParameterNames();
        boolean boolean8 = strSet5.addAll((java.util.Collection<java.lang.String>) strSet7);
        java.util.stream.Stream<java.lang.String> strStream9 = strSet7.parallelStream();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node11.isName();
        boolean boolean13 = node11.isSwitch();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean16 = node11.hasChild(node15);
        com.google.javascript.rhino.Node node17 = com.google.javascript.jscomp.NodeUtil.newExpr(node11);
        int int18 = node11.getLength();
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        node11.setDirectives((java.util.Set<java.lang.String>) strSet22);
        java.lang.Object[] objArray25 = strSet22.toArray();
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        int int30 = strList28.size();
        boolean boolean31 = strSet22.containsAll((java.util.Collection<java.lang.String>) strList28);
        java.util.Spliterator<java.lang.String> strSpliterator32 = strSet22.spliterator();
        int int33 = strSet22.size();
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList35 = jSDocInfo34.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection36 = jSDocInfo34.getReferences();
        com.google.common.collect.ImmutableList<java.lang.String> strList37 = jSDocInfo34.getTemplateTypeNames();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection38 = jSDocInfo34.getTypeNodes();
        java.util.Set<java.lang.String> strSet39 = jSDocInfo34.getParameterNames();
        boolean boolean40 = strSet22.addAll((java.util.Collection<java.lang.String>) strSet39);
        java.lang.CharSequence[] charSequenceArray45 = new java.lang.CharSequence[] { "Not declared as a type name", "InputId: ", "Not declared as a constructor", "Not declared as a type name" };
        java.lang.CharSequence[] charSequenceArray46 = strSet39.toArray(charSequenceArray45);
        java.util.Spliterator<java.lang.String> strSpliterator47 = strSet39.spliterator();
        boolean boolean48 = strSet7.containsAll((java.util.Collection<java.lang.String>) strSet39);
        java.lang.Object[] objArray49 = strSet39.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator50 = strSet39.spliterator();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strStream9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[hi!]");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strSpliterator32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(jSTypeExpressionList35);
        org.junit.Assert.assertNull(strCollection36);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(nodeCollection38);
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(charSequenceArray45);
        org.junit.Assert.assertNotNull(charSequenceArray46);
        org.junit.Assert.assertNotNull(strSpliterator47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertNotNull(strSpliterator50);
    }

    @Test
    public void test09534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09534");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.hasParameter("hi!");
        boolean boolean4 = jSDocInfo0.hasThisType();
        boolean boolean5 = jSDocInfo0.isIdGenerator();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        boolean boolean8 = jSDocInfo0.isImplicitCast();
        boolean boolean9 = jSDocInfo0.hasBaseType();
        boolean boolean10 = jSDocInfo0.isHidden();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList11 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean12 = jSDocInfo0.hasBaseType();
        java.lang.String str13 = jSDocInfo0.getSourceName();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList14 = jSDocInfo0.getImplementedInterfaces();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(jSTypeExpressionList14);
    }

    @Test
    public void test09535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09535");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        boolean boolean5 = jSDocInfo0.isIdGenerator();
        java.lang.String str6 = jSDocInfo0.getReturnDescription();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getSuppressions();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean9 = strSet7.add("java.io.IOException: NUMBER -1.0 [source_file: NUMBER -1.0\n]\n");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strSet7);
    }

    @Test
    public void test09536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09536");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.hasParameter("hi!");
        boolean boolean4 = jSDocInfo0.hasThisType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getModifies();
        java.util.Iterator<java.lang.String> strItor6 = strSet5.iterator();
        java.util.Spliterator<java.lang.String> strSpliterator7 = strSet5.spliterator();
        boolean boolean8 = strSet5.isEmpty();
        java.util.Spliterator<java.lang.String> strSpliterator9 = strSet5.spliterator();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertNotNull(strSpliterator7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strSpliterator9);
    }

    @Test
    public void test09537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09537");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        java.lang.String str4 = jSDocInfo0.getLendsName();
        java.lang.String str5 = jSDocInfo0.getOriginalCommentString();
        boolean boolean6 = jSDocInfo0.isExport();
        java.lang.String str7 = jSDocInfo0.getFileOverview();
        boolean boolean8 = jSDocInfo0.isNoShadow();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility9 = jSDocInfo0.getVisibility();
        boolean boolean10 = jSDocInfo0.isImplicitCast();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(visibility9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test09538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09538");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node2.hasChild(node6);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean10 = node9.isName();
        boolean boolean11 = node9.isSwitch();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean14 = node9.hasChild(node13);
        com.google.javascript.rhino.Node node15 = com.google.javascript.jscomp.NodeUtil.newExpr(node9);
        boolean boolean16 = node15.isRegExp();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean19 = node18.isName();
        boolean boolean20 = node18.isSwitch();
        java.lang.String str21 = node18.toString();
        com.google.javascript.rhino.Node node22 = node15.useSourceInfoIfMissingFromForTree(node18);
        boolean boolean23 = node6.isEquivalentToTyped(node18);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean26 = node25.isName();
        boolean boolean27 = node25.isSwitch();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean30 = node25.hasChild(node29);
        com.google.javascript.rhino.jstype.JSType jSType31 = null;
        node29.setJSType(jSType31);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(45, node6, node29, 10, 2);
        boolean boolean36 = node29.isVarArgs();
        boolean boolean37 = com.google.javascript.jscomp.NodeUtil.isSymmetricOperation(node29);
        java.lang.Object obj39 = node29.getProp((int) (short) 0);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "NUMBER -1.0" + "'", str21, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(obj39);
    }

    @Test
    public void test09539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09539");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (byte) 0);
        java.lang.String str3 = node2.getSourceFileName();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) 'a', node2, (int) '4', (int) (short) 100);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node8.isName();
        boolean boolean10 = node8.isSwitch();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node8.hasChild(node12);
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        node12.setJSType(jSType14);
        com.google.javascript.rhino.InputId inputId16 = com.google.javascript.jscomp.NodeUtil.getInputId(node12);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean19 = node18.isName();
        boolean boolean20 = node18.isSwitch();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean23 = node18.hasChild(node22);
        com.google.javascript.rhino.Node node24 = com.google.javascript.jscomp.NodeUtil.newExpr(node18);
        int int25 = node18.getLength();
        boolean boolean26 = node18.isNew();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean29 = node28.isName();
        boolean boolean30 = node28.isSwitch();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean33 = node28.hasChild(node32);
        com.google.javascript.rhino.Node node34 = com.google.javascript.jscomp.NodeUtil.newExpr(node28);
        int int35 = node28.getLength();
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        node28.setDirectives((java.util.Set<java.lang.String>) strSet39);
        boolean boolean43 = node28.getBooleanProp(41);
        com.google.javascript.rhino.Node node44 = node18.useSourceInfoFromForTree(node28);
        boolean boolean45 = node28.isGetElem();
        com.google.javascript.rhino.Node node46 = node12.useSourceInfoFrom(node28);
        com.google.javascript.rhino.jstype.JSType jSType47 = node28.getJSType();
        boolean boolean48 = node28.isParamList();
        node28.removeProp((int) ' ');
        com.google.javascript.rhino.Node node51 = node2.clonePropsFrom(node28);
        boolean boolean52 = node28.isOptionalArg();
        boolean boolean53 = node28.isIf();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(inputId16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(jSType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test09540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09540");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isNoAlias();
        boolean boolean5 = jSDocInfo0.isDeprecated();
        java.lang.String str6 = jSDocInfo0.getDescription();
        boolean boolean7 = jSDocInfo0.isNoShadow();
        boolean boolean8 = jSDocInfo0.hasEnumParameterType();
        boolean boolean9 = jSDocInfo0.isHidden();
        boolean boolean10 = jSDocInfo0.shouldPreserveTry();
        java.lang.String str11 = jSDocInfo0.getLicense();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test09541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09541");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        int int8 = node1.getLength();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        node1.setDirectives((java.util.Set<java.lang.String>) strSet12);
        java.lang.Object[] objArray15 = strSet12.toArray();
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        int int20 = strList18.size();
        boolean boolean21 = strSet12.containsAll((java.util.Collection<java.lang.String>) strList18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet23 = jSDocInfo22.getParameterNames();
        boolean boolean25 = jSDocInfo22.hasParameter("hi!");
        boolean boolean26 = jSDocInfo22.hasThisType();
        java.util.Set<java.lang.String> strSet27 = jSDocInfo22.getModifies();
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet29 = jSDocInfo28.getParameterNames();
        boolean boolean30 = strSet27.addAll((java.util.Collection<java.lang.String>) strSet29);
        strSet27.clear();
        boolean boolean32 = strList18.addAll((java.util.Collection<java.lang.String>) strSet27);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean35 = node34.isName();
        boolean boolean36 = node34.isSwitch();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean39 = node34.hasChild(node38);
        com.google.javascript.rhino.Node node40 = com.google.javascript.jscomp.NodeUtil.newExpr(node34);
        int int41 = node34.getLength();
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        node34.setDirectives((java.util.Set<java.lang.String>) strSet45);
        java.lang.Object[] objArray48 = strSet45.toArray();
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        int int53 = strList51.size();
        boolean boolean54 = strSet45.containsAll((java.util.Collection<java.lang.String>) strList51);
        com.google.javascript.rhino.JSDocInfo jSDocInfo55 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet56 = jSDocInfo55.getParameterNames();
        boolean boolean58 = jSDocInfo55.hasParameter("hi!");
        boolean boolean59 = jSDocInfo55.hasThisType();
        java.util.Set<java.lang.String> strSet60 = jSDocInfo55.getModifies();
        com.google.javascript.rhino.JSDocInfo jSDocInfo61 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet62 = jSDocInfo61.getParameterNames();
        boolean boolean63 = strSet60.addAll((java.util.Collection<java.lang.String>) strSet62);
        strSet60.clear();
        boolean boolean65 = strList51.addAll((java.util.Collection<java.lang.String>) strSet60);
        boolean boolean66 = strSet27.addAll((java.util.Collection<java.lang.String>) strSet60);
        boolean boolean68 = strSet60.remove((java.lang.Object) 2);
        strSet60.clear();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean71 = strSet60.add("GT");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[hi!]");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[hi!]");
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test09542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09542");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        int int8 = node1.getLength();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        node1.setDirectives((java.util.Set<java.lang.String>) strSet12);
        boolean boolean16 = strSet12.add("");
        java.lang.Object[] objArray17 = strSet12.toArray();
        java.util.Iterator<java.lang.String> strItor18 = strSet12.iterator();
        int int19 = strSet12.size();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(10, "java.io.IOException: BITXOR 0\n");
        boolean boolean23 = strSet12.remove((java.lang.Object) "java.io.IOException: BITXOR 0\n");
        strSet12.clear();
        java.util.List[][] listArray26 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String>[][] strListArray27 = (java.util.List<java.lang.String>[][]) listArray26;
        java.util.List<java.lang.String>[][] strListArray28 = strSet12.toArray(strListArray27);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[hi!, ]");
        org.junit.Assert.assertNotNull(strItor18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(listArray26);
        org.junit.Assert.assertNotNull(strListArray27);
        org.junit.Assert.assertNotNull(strListArray28);
    }

    @Test
    public void test09543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09543");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("hi!");
        boolean boolean2 = node1.isDelProp();
        boolean boolean3 = node1.isCatch();
        boolean boolean4 = node1.isEmpty();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test09544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09544");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isFunction();
        node1.putIntProp((int) (byte) 100, (int) (short) 1);
        boolean boolean6 = node1.isAdd();
        node1.addSuppression("EXPR_RESULT\n    NUMBER -1.0\n");
        boolean boolean9 = node1.isFor();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet11 = jSDocInfo10.getParameterNames();
        boolean boolean13 = jSDocInfo10.hasParameter("hi!");
        boolean boolean14 = jSDocInfo10.hasThisType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList15 = jSDocInfo10.getThrownTypes();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList16 = jSDocInfo10.getImplementedInterfaces();
        java.lang.String str17 = jSDocInfo10.getLicense();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList18 = jSDocInfo10.getImplementedInterfaces();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList19 = jSDocInfo10.getImplementedInterfaces();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node21.isName();
        boolean boolean23 = node21.isSwitch();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean26 = node21.hasChild(node25);
        com.google.javascript.rhino.Node node27 = com.google.javascript.jscomp.NodeUtil.newExpr(node21);
        int int28 = node27.getType();
        jSDocInfo10.setAssociatedNode(node27);
        node27.setVarArgs(true);
        boolean boolean32 = node27.isQuotedString();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n", (int) (short) 100, 42);
        node36.setOptionalArg(true);
        boolean boolean39 = node36.isAssign();
        java.lang.Object obj41 = node36.getProp((int) ' ');
        com.google.javascript.rhino.jstype.JSType jSType42 = null;
        node36.setJSType(jSType42);
        boolean boolean44 = node36.isThrow();
        boolean boolean45 = node36.isGetterDef();
        com.google.javascript.rhino.Node node46 = node36.removeChildren();
        // The following exception was thrown during execution in test generation
        try {
            node1.addChildrenAfter(node27, node36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList15);
        org.junit.Assert.assertNotNull(jSTypeExpressionList16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(jSTypeExpressionList18);
        org.junit.Assert.assertNotNull(jSTypeExpressionList19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 130 + "'", int28 == 130);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(node46);
    }

    @Test
    public void test09545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09545");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(8, 15, 204831);
    }

    @Test
    public void test09546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09546");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        node1.detachChildren();
        boolean boolean5 = node1.isDebugger();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node7.isName();
        boolean boolean9 = node7.isSwitch();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node7.hasChild(node11);
        boolean boolean13 = node11.isGetElem();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection14 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node11);
        node11.setWasEmptyNode(false);
        boolean boolean17 = node1.isEquivalentTo(node11);
        com.google.javascript.rhino.JSDocInfo jSDocInfo18 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList19 = jSDocInfo18.getExtendedInterfaces();
        boolean boolean21 = jSDocInfo18.hasParameter("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node24.isFunction();
        boolean boolean26 = node24.isUnscopedQualifiedName();
        boolean boolean27 = node24.isEmpty();
        boolean boolean28 = node24.isEmpty();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean31 = node30.isName();
        boolean boolean32 = node30.isSwitch();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean35 = node30.hasChild(node34);
        boolean boolean36 = node30.isVar();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean39 = node38.isName();
        boolean boolean40 = node38.isSwitch();
        java.lang.String str41 = node38.toString();
        boolean boolean42 = node38.isWith();
        com.google.javascript.rhino.Node node43 = node30.srcref(node38);
        node30.detachChildren();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        com.google.javascript.jscomp.CodingConvention.Bind bind47 = new com.google.javascript.jscomp.CodingConvention.Bind(node24, node30, node46);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (byte) 10, 100, 12);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean54 = node53.isName();
        boolean boolean55 = node53.isSwitch();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean58 = node53.hasChild(node57);
        boolean boolean59 = node53.isComma();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean62 = node61.isName();
        boolean boolean63 = node61.isSwitch();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean66 = node61.hasChild(node65);
        com.google.javascript.rhino.Node node67 = com.google.javascript.jscomp.NodeUtil.newExpr(node61);
        boolean boolean68 = node67.isRegExp();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean71 = node70.isName();
        boolean boolean72 = node70.isSwitch();
        java.lang.String str73 = node70.toString();
        com.google.javascript.rhino.Node node74 = node67.useSourceInfoIfMissingFromForTree(node70);
        com.google.javascript.rhino.jstype.JSType jSType75 = null;
        node70.setJSType(jSType75);
        boolean boolean77 = node70.isBlock();
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node((int) (byte) -1, node24, node51, node53, node70, 10, (int) (short) 10);
        boolean boolean81 = node24.hasChildren();
        jSDocInfo18.setAssociatedNode(node24);
        com.google.javascript.rhino.Node node83 = node1.useSourceInfoFrom(node24);
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean86 = node85.isName();
        boolean boolean87 = node85.isSwitch();
        java.lang.String str88 = node85.toString();
        boolean boolean89 = node85.isNumber();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection90 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node85);
        boolean boolean91 = node85.isArrayLit();
        boolean boolean92 = node83.isEquivalentTo(node85);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable93 = node85.siblings();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator94 = nodeIterable93.spliterator();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator95 = nodeIterable93.spliterator();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator96 = nodeIterable93.spliterator();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(nodeCollection14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(jSTypeExpressionList19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "NUMBER -1.0" + "'", str41, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "NUMBER -1.0" + "'", str73, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "NUMBER -1.0" + "'", str88, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(nodeCollection90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(nodeIterable93);
        org.junit.Assert.assertNotNull(nodeSpliterator94);
        org.junit.Assert.assertNotNull(nodeSpliterator95);
        org.junit.Assert.assertNotNull(nodeSpliterator96);
    }

    @Test
    public void test09547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09547");
        com.google.javascript.rhino.JSDocInfo jSDocInfo1 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList2 = jSDocInfo1.getExtendedInterfaces();
        java.lang.String str3 = jSDocInfo1.getVersion();
        boolean boolean4 = jSDocInfo1.isInterface();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection5 = jSDocInfo1.getMarkers();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node7.isName();
        boolean boolean9 = node7.isSwitch();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node7.hasChild(node11);
        com.google.javascript.rhino.Node node13 = com.google.javascript.jscomp.NodeUtil.newExpr(node7);
        int int14 = node13.getType();
        boolean boolean15 = node13.isDefaultCase();
        jSDocInfo1.setAssociatedNode(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean19 = node18.isName();
        boolean boolean20 = node18.isSwitch();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean23 = node18.hasChild(node22);
        com.google.javascript.rhino.jstype.JSType jSType24 = null;
        node22.setJSType(jSType24);
        node22.setType(2);
        boolean boolean28 = node22.isIn();
        node13.addChildrenToFront(node22);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("BITXOR 0\n", 41, (int) ' ');
        boolean boolean35 = com.google.javascript.jscomp.NodeUtil.isSymmetricOperation(node34);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n", (int) (short) 100, 42);
        node39.setOptionalArg(true);
        boolean boolean42 = node39.isAssign();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(43, node34, node39);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean46 = node45.isName();
        boolean boolean47 = node45.isSwitch();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean50 = node45.hasChild(node49);
        com.google.javascript.rhino.jstype.JSType jSType51 = null;
        node49.setJSType(jSType51);
        node49.setType(2);
        com.google.javascript.rhino.Node node55 = node49.getLastSibling();
        com.google.javascript.rhino.Node node56 = node39.useSourceInfoFromForTree(node49);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean59 = node58.isName();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean62 = node61.isName();
        boolean boolean63 = node61.isSwitch();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean66 = node61.hasChild(node65);
        com.google.javascript.rhino.Node node67 = com.google.javascript.jscomp.NodeUtil.newExpr(node61);
        boolean boolean68 = node67.isRegExp();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean71 = node70.isName();
        boolean boolean72 = node70.isSwitch();
        java.lang.String str73 = node70.toString();
        com.google.javascript.rhino.Node node74 = node67.useSourceInfoIfMissingFromForTree(node70);
        java.lang.String str75 = node58.checkTreeEquals(node74);
        int int77 = node74.getIntProp(100);
        boolean boolean78 = node74.isCall();
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean81 = node80.isName();
        boolean boolean82 = node80.isSwitch();
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean85 = node80.hasChild(node84);
        int int86 = node84.getLineno();
        java.util.Set<java.lang.String> strSet87 = node84.getDirectives();
        java.lang.String str88 = com.google.javascript.jscomp.NodeUtil.getSourceName(node84);
        com.google.javascript.rhino.Node node89 = node74.clonePropsFrom(node84);
        boolean boolean90 = node74.isLabel();
        com.google.javascript.rhino.Node node91 = new com.google.javascript.rhino.Node(41, node13, node49, node74);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.JSDocInfo jSDocInfo92 = com.google.javascript.jscomp.NodeUtil.getFunctionJSDocInfo(node13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSTypeExpressionList2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(markerCollection5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 130 + "'", int14 == 130);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "NUMBER -1.0" + "'", str73, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n" + "'", str75, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertNull(strSet87);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test09548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09548");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getImplementedInterfaces();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getThisType();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertNull(jSTypeExpression8);
    }

    @Test
    public void test09549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09549");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node8.isName();
        boolean boolean10 = node8.isSwitch();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node8.hasChild(node12);
        com.google.javascript.rhino.Node node14 = com.google.javascript.jscomp.NodeUtil.newExpr(node8);
        boolean boolean15 = node14.isRegExp();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node17.isName();
        boolean boolean19 = node17.isSwitch();
        java.lang.String str20 = node17.toString();
        com.google.javascript.rhino.Node node21 = node14.useSourceInfoIfMissingFromForTree(node17);
        boolean boolean22 = node5.isEquivalentToTyped(node17);
        com.google.javascript.rhino.InputId inputId23 = null;
        node17.setInputId(inputId23);
        com.google.javascript.rhino.Node node25 = com.google.javascript.jscomp.NodeUtil.newExpr(node17);
        int int26 = node25.getSourcePosition();
        com.google.javascript.rhino.InputId inputId28 = new com.google.javascript.rhino.InputId("");
        java.lang.String str29 = inputId28.getIdName();
        java.lang.String str30 = inputId28.toString();
        node25.setInputId(inputId28);
        com.google.javascript.rhino.InputId inputId32 = node25.getInputId();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean36 = node35.isName();
        boolean boolean37 = node35.isSwitch();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean40 = node35.hasChild(node39);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean43 = node42.isName();
        boolean boolean44 = node42.isSwitch();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean47 = node42.hasChild(node46);
        com.google.javascript.rhino.Node node48 = com.google.javascript.jscomp.NodeUtil.newExpr(node42);
        boolean boolean49 = node48.isRegExp();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean52 = node51.isName();
        boolean boolean53 = node51.isSwitch();
        java.lang.String str54 = node51.toString();
        com.google.javascript.rhino.Node node55 = node48.useSourceInfoIfMissingFromForTree(node51);
        boolean boolean56 = node39.isEquivalentToTyped(node51);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean59 = node58.isName();
        boolean boolean60 = node58.isSwitch();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean63 = node58.hasChild(node62);
        com.google.javascript.rhino.jstype.JSType jSType64 = null;
        node62.setJSType(jSType64);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(45, node39, node62, 10, 2);
        boolean boolean69 = node62.isVarArgs();
        boolean boolean70 = com.google.javascript.jscomp.NodeUtil.isSymmetricOperation(node62);
        com.google.javascript.rhino.Node node71 = node62.removeChildren();
        boolean boolean72 = node62.isThis();
        node62.detachChildren();
        boolean boolean74 = inputId32.equals((java.lang.Object) node62);
        boolean boolean75 = node62.isWith();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "NUMBER -1.0" + "'", str20, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "InputId: " + "'", str30, "InputId: ");
        org.junit.Assert.assertNotNull(inputId32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "NUMBER -1.0" + "'", str54, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test09550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09550");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(41, "Node tree inequality:\nTree1:\nBITXOR 0\n\n\nTree2:\nNUMBER -1.0\n\n\nSubtree1: BITXOR 0\n\n\nSubtree2: NUMBER -1.0\n");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test09551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09551");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType1 = com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN;
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node5.isName();
        boolean boolean7 = node5.isSwitch();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean10 = node5.hasChild(node9);
        com.google.javascript.rhino.jstype.JSType jSType11 = null;
        node9.setJSType(jSType11);
        com.google.javascript.rhino.InputId inputId13 = com.google.javascript.jscomp.NodeUtil.getInputId(node9);
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship14 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType1, node3, node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node16.isName();
        boolean boolean18 = node16.isSwitch();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node16.hasChild(node20);
        com.google.javascript.rhino.Node node22 = com.google.javascript.jscomp.NodeUtil.newExpr(node16);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node24.isName();
        boolean boolean26 = node24.isSwitch();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean29 = node24.hasChild(node28);
        com.google.javascript.rhino.Node node30 = com.google.javascript.jscomp.NodeUtil.newExpr(node24);
        node24.setOptionalArg(true);
        node24.putBooleanProp((int) (short) -1, true);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean38 = node37.isName();
        boolean boolean39 = node37.isSwitch();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean42 = node37.hasChild(node41);
        com.google.javascript.rhino.Node node43 = com.google.javascript.jscomp.NodeUtil.newExpr(node37);
        boolean boolean44 = node43.isRegExp();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean47 = node46.isName();
        boolean boolean48 = node46.isSwitch();
        java.lang.String str49 = node46.toString();
        com.google.javascript.rhino.Node node50 = node43.useSourceInfoIfMissingFromForTree(node46);
        com.google.javascript.rhino.Node node51 = node24.useSourceInfoFromForTree(node43);
        boolean boolean52 = node22.hasChild(node24);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean55 = node54.isName();
        boolean boolean56 = node54.isSwitch();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean59 = node54.hasChild(node58);
        boolean boolean60 = node58.isGetElem();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection61 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node58);
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship62 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType1, node24, node58);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(44, node58, 42, 12);
        boolean boolean66 = node65.isInc();
        boolean boolean67 = node65.isTry();
        node65.putBooleanProp(100, false);
        org.junit.Assert.assertTrue("'" + subclassType1 + "' != '" + com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN + "'", subclassType1.equals(com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN));
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(inputId13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "NUMBER -1.0" + "'", str49, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(nodeCollection61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test09552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09552");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getReturnDescription();
        java.lang.String str3 = jSDocInfo0.getLendsName();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility4 = jSDocInfo0.getVisibility();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getExtendedInterfaces();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(visibility4);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
    }

    @Test
    public void test09553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09553");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        int int8 = node1.getLength();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        node1.setDirectives((java.util.Set<java.lang.String>) strSet12);
        java.lang.Object[] objArray15 = strSet12.toArray();
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        int int20 = strList18.size();
        boolean boolean21 = strSet12.containsAll((java.util.Collection<java.lang.String>) strList18);
        java.util.Spliterator<java.lang.String> strSpliterator22 = strSet12.spliterator();
        boolean boolean23 = strSet12.isEmpty();
        java.util.Iterator<java.lang.String> strItor24 = strSet12.iterator();
        strSet12.clear();
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList27 = jSDocInfo26.getExtendedInterfaces();
        java.lang.String str28 = jSDocInfo26.getVersion();
        boolean boolean29 = jSDocInfo26.isInterface();
        boolean boolean30 = jSDocInfo26.isJavaDispatch();
        java.lang.String str31 = jSDocInfo26.getSourceName();
        java.lang.String str32 = jSDocInfo26.toString();
        boolean boolean33 = jSDocInfo26.hasFileOverview();
        java.util.Set<java.lang.String> strSet34 = jSDocInfo26.getParameterNames();
        java.lang.String str35 = jSDocInfo26.getVersion();
        com.google.javascript.rhino.Node node36 = jSDocInfo26.getAssociatedNode();
        boolean boolean37 = strSet12.contains((java.lang.Object) node36);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean40 = node39.isName();
        boolean boolean41 = node39.isSwitch();
        java.lang.String str42 = node39.toString();
        boolean boolean43 = node39.isWith();
        boolean boolean44 = node39.isBreak();
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList46 = jSDocInfo45.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection47 = jSDocInfo45.getReferences();
        java.util.Collection<java.lang.String> strCollection48 = jSDocInfo45.getReferences();
        com.google.javascript.rhino.Node node49 = jSDocInfo45.getAssociatedNode();
        node39.setJSDocInfo(jSDocInfo45);
        com.google.common.collect.ImmutableList<java.lang.String> strList51 = jSDocInfo45.getTemplateTypeNames();
        boolean boolean52 = strSet12.addAll((java.util.Collection<java.lang.String>) strList51);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[hi!]");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strSpliterator22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strItor24);
        org.junit.Assert.assertNotNull(jSTypeExpressionList27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "JSDocInfo" + "'", str32, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "NUMBER -1.0" + "'", str42, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList46);
        org.junit.Assert.assertNull(strCollection47);
        org.junit.Assert.assertNull(strCollection48);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test09554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09554");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        node1.setOptionalArg(true);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder10 = node1.getJsDocBuilderForNode();
        boolean boolean11 = node1.isThis();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = node1.getJSDocInfo();
        int int13 = node1.getLineno();
        node1.setWasEmptyNode(false);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSDocInfo12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test09555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09555");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        node1.setOptionalArg(true);
        node1.putBooleanProp((int) (short) -1, true);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node14.isName();
        boolean boolean16 = node14.isSwitch();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean19 = node14.hasChild(node18);
        com.google.javascript.rhino.Node node20 = com.google.javascript.jscomp.NodeUtil.newExpr(node14);
        boolean boolean21 = node20.isRegExp();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean24 = node23.isName();
        boolean boolean25 = node23.isSwitch();
        java.lang.String str26 = node23.toString();
        com.google.javascript.rhino.Node node27 = node20.useSourceInfoIfMissingFromForTree(node23);
        com.google.javascript.rhino.Node node28 = node1.useSourceInfoFromForTree(node20);
        com.google.javascript.rhino.InputId inputId29 = com.google.javascript.jscomp.NodeUtil.getInputId(node28);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean32 = node31.isName();
        boolean boolean33 = node31.isSwitch();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean36 = node31.hasChild(node35);
        com.google.javascript.rhino.Node node37 = com.google.javascript.jscomp.NodeUtil.newExpr(node31);
        int int38 = node31.getLength();
        boolean boolean39 = node31.isNew();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean42 = node41.isName();
        boolean boolean43 = node41.isSwitch();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean46 = node41.hasChild(node45);
        com.google.javascript.rhino.Node node47 = com.google.javascript.jscomp.NodeUtil.newExpr(node41);
        int int48 = node41.getLength();
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        node41.setDirectives((java.util.Set<java.lang.String>) strSet52);
        boolean boolean56 = node41.getBooleanProp(41);
        com.google.javascript.rhino.Node node57 = node31.useSourceInfoFromForTree(node41);
        com.google.javascript.rhino.Node node58 = node28.useSourceInfoIfMissingFrom(node57);
        boolean boolean59 = node57.isInstanceOf();
        boolean boolean60 = node57.isParamList();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.JSDocInfo jSDocInfo61 = com.google.javascript.jscomp.NodeUtil.getFunctionJSDocInfo(node57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "NUMBER -1.0" + "'", str26, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(inputId29);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test09556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09556");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        boolean boolean5 = node2.isNull();
        boolean boolean6 = node2.isFunction();
        node2.putBooleanProp(12, false);
        node2.setVarArgs(false);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 100, node2, (int) (byte) 10, 27);
        java.util.Set<java.lang.String> strSet15 = node14.getDirectives();
        java.lang.String str19 = node14.toString(false, true, true);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        boolean boolean22 = node21.isDelProp();
        boolean boolean23 = node21.wasEmptyNode();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean29 = node28.isName();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean32 = node31.isName();
        boolean boolean33 = node31.isSwitch();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (byte) 100, node26, node28, node31);
        boolean boolean35 = node26.isTypeOf();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean38 = node37.isName();
        boolean boolean39 = node37.isSwitch();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean42 = node37.hasChild(node41);
        int int43 = node41.getLineno();
        java.util.Set<java.lang.String> strSet44 = node41.getDirectives();
        com.google.javascript.rhino.Node node45 = node26.useSourceInfoFrom(node41);
        node21.addChildToFront(node41);
        int int47 = node21.getChildCount();
        com.google.javascript.rhino.Node node48 = node14.srcrefTree(node21);
        node21.setLength(38);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "OR" + "'", str19, "OR");
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNull(strSet44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(node48);
    }

    @Test
    public void test09557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09557");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        com.google.javascript.rhino.jstype.JSType jSType2 = node1.getJSType();
        boolean boolean3 = node1.isScript();
        boolean boolean4 = node1.isTry();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node6.isName();
        boolean boolean8 = node6.isSwitch();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node6.hasChild(node10);
        com.google.javascript.rhino.Node node12 = com.google.javascript.jscomp.NodeUtil.newExpr(node6);
        node6.setOptionalArg(true);
        node6.putBooleanProp((int) (short) -1, true);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean20 = node19.isName();
        boolean boolean21 = node19.isSwitch();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean24 = node19.hasChild(node23);
        com.google.javascript.rhino.Node node25 = com.google.javascript.jscomp.NodeUtil.newExpr(node19);
        boolean boolean26 = node25.isRegExp();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean29 = node28.isName();
        boolean boolean30 = node28.isSwitch();
        java.lang.String str31 = node28.toString();
        com.google.javascript.rhino.Node node32 = node25.useSourceInfoIfMissingFromForTree(node28);
        com.google.javascript.rhino.Node node33 = node6.useSourceInfoFromForTree(node25);
        boolean boolean34 = node6.hasOneChild();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean37 = node36.isName();
        boolean boolean38 = node36.isSwitch();
        java.lang.String str39 = node36.toString();
        boolean boolean40 = node36.isVar();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean43 = node42.isName();
        boolean boolean44 = node42.isSwitch();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean47 = node42.hasChild(node46);
        com.google.javascript.rhino.Node node48 = com.google.javascript.jscomp.NodeUtil.newExpr(node42);
        boolean boolean49 = node48.isRegExp();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean52 = node51.isName();
        boolean boolean53 = node51.isSwitch();
        java.lang.String str54 = node51.toString();
        com.google.javascript.rhino.Node node55 = node48.useSourceInfoIfMissingFromForTree(node51);
        com.google.javascript.jscomp.CodingConvention.Bind bind56 = new com.google.javascript.jscomp.CodingConvention.Bind(node6, node36, node48);
        boolean boolean57 = node36.isInstanceOf();
        com.google.javascript.rhino.Node node58 = node1.useSourceInfoIfMissingFrom(node36);
        node1.removeProp(35);
        boolean boolean61 = node1.isAssign();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(jSType2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "NUMBER -1.0" + "'", str31, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "NUMBER -1.0" + "'", str39, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "NUMBER -1.0" + "'", str54, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test09558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09558");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        int int8 = node1.getLength();
        node1.addSuppression("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList12 = jSDocInfo11.getExtendedInterfaces();
        java.lang.String str13 = jSDocInfo11.getVersion();
        boolean boolean14 = jSDocInfo11.isInterface();
        boolean boolean15 = jSDocInfo11.isNoAlias();
        boolean boolean16 = jSDocInfo11.isHidden();
        boolean boolean17 = jSDocInfo11.isDeprecated();
        node1.setJSDocInfo(jSDocInfo11);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList20 = jSDocInfo19.getExtendedInterfaces();
        java.lang.String str21 = jSDocInfo19.getReturnDescription();
        boolean boolean22 = jSDocInfo19.hasFileOverview();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList23 = jSDocInfo19.getExtendedInterfaces();
        java.lang.String str24 = jSDocInfo19.getLicense();
        java.lang.String str25 = jSDocInfo19.getBlockDescription();
        java.lang.String str26 = jSDocInfo19.getReturnDescription();
        java.util.Set<java.lang.String> strSet27 = jSDocInfo19.getSuppressions();
        int int28 = strSet27.size();
        node1.setDirectives(strSet27);
        boolean boolean30 = node1.isThis();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test09559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09559");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        int int8 = node1.getLength();
        boolean boolean9 = node1.isCase();
        java.lang.String str13 = node1.toString(true, true, false);
        boolean boolean14 = node1.isLocalResultCall();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "NUMBER -1.0" + "'", str13, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test09560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09560");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        java.lang.String str6 = jSDocInfo0.getFileOverview();
        boolean boolean7 = jSDocInfo0.isExport();
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = jSDocInfo0.getTemplateTypeNames();
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList10 = jSDocInfo9.getExtendedInterfaces();
        java.lang.String str11 = jSDocInfo9.getVersion();
        boolean boolean12 = jSDocInfo9.isInterface();
        boolean boolean13 = jSDocInfo9.isJavaDispatch();
        boolean boolean14 = jSDocInfo9.isIdGenerator();
        com.google.javascript.rhino.Node node15 = jSDocInfo9.getAssociatedNode();
        boolean boolean16 = strList8.contains((java.lang.Object) jSDocInfo9);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean19 = node18.isName();
        boolean boolean20 = node18.isSwitch();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean23 = node18.hasChild(node22);
        boolean boolean24 = node22.isGetElem();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection25 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node22);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        int int31 = node30.getChildCount();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean34 = node33.isName();
        boolean boolean35 = node33.isSwitch();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean38 = node33.hasChild(node37);
        boolean boolean39 = node33.isVar();
        com.google.javascript.rhino.Node node40 = node33.getParent();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean43 = node42.isName();
        boolean boolean44 = node42.isSwitch();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean47 = node42.hasChild(node46);
        boolean boolean48 = node42.isVar();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean51 = node50.isName();
        boolean boolean52 = node50.isSwitch();
        java.lang.String str53 = node50.toString();
        boolean boolean54 = node50.isWith();
        com.google.javascript.rhino.Node node55 = node42.srcref(node50);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(130, node30, node33, node50, node59, 0, 15);
        java.lang.String str63 = node22.checkTreeEquals(node30);
        jSDocInfo9.setAssociatedNode(node30);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression65 = jSDocInfo9.getTypedefType();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(jSTypeExpressionList10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(nodeCollection25);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "NUMBER -1.0" + "'", str53, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n" + "'", str63, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        org.junit.Assert.assertNull(jSTypeExpression65);
    }

    @Test
    public void test09561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09561");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        boolean boolean8 = node7.isRegExp();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        java.lang.String str13 = node10.toString();
        com.google.javascript.rhino.Node node14 = node7.useSourceInfoIfMissingFromForTree(node10);
        node7.setLineno(42);
        com.google.javascript.rhino.Node node17 = node7.cloneTree();
        java.lang.String str18 = node17.getSourceFileName();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "NUMBER -1.0" + "'", str13, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test09562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09562");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        boolean boolean8 = node7.isRegExp();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        java.lang.String str13 = node10.toString();
        com.google.javascript.rhino.Node node14 = node7.useSourceInfoIfMissingFromForTree(node10);
        com.google.javascript.rhino.jstype.JSType jSType15 = null;
        node10.setJSType(jSType15);
        boolean boolean17 = node10.isOptionalArg();
        com.google.javascript.rhino.Node node18 = node10.cloneTree();
        com.google.javascript.rhino.Node node19 = node10.getFirstChild();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "NUMBER -1.0" + "'", str13, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node19);
    }

    @Test
    public void test09563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09563");
        com.google.javascript.rhino.jstype.JSType jSType0 = null;
        com.google.javascript.rhino.jstype.JSType jSType1 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair2 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType0, jSType1);
        com.google.javascript.rhino.jstype.JSType jSType3 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType4 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType5 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType6 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType7 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType8 = typePair2.typeB;
        org.junit.Assert.assertNull(jSType3);
        org.junit.Assert.assertNull(jSType4);
        org.junit.Assert.assertNull(jSType5);
        org.junit.Assert.assertNull(jSType6);
        org.junit.Assert.assertNull(jSType7);
        org.junit.Assert.assertNull(jSType8);
    }

    @Test
    public void test09564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09564");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        java.lang.String str4 = node1.toString();
        boolean boolean5 = node1.isWith();
        int int7 = node1.getIntProp((int) ' ');
        boolean boolean8 = node1.isNE();
        boolean boolean9 = node1.hasOneChild();
        boolean boolean10 = node1.isTypeOf();
        boolean boolean11 = node1.isString();
        com.google.javascript.rhino.Node node12 = node1.cloneNode();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet14 = jSDocInfo13.getParameterNames();
        boolean boolean16 = jSDocInfo13.hasParameter("hi!");
        boolean boolean17 = jSDocInfo13.containsDeclaration();
        java.lang.String str18 = jSDocInfo13.getOriginalCommentString();
        boolean boolean19 = jSDocInfo13.isConstant();
        boolean boolean21 = jSDocInfo13.hasParameterType("Not declared as a type name");
        node1.setJSDocInfo(jSDocInfo13);
        boolean boolean23 = jSDocInfo13.hasFileOverview();
        int int24 = jSDocInfo13.getParameterCount();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER -1.0" + "'", str4, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test09565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09565");
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(35, nodeArray7, 54, (int) (byte) 100);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(0, nodeArray7, 4, 27);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(0, nodeArray7);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(53, nodeArray7);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(0, nodeArray7);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(15, nodeArray7);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(49, nodeArray7);
        boolean boolean19 = node18.wasEmptyNode();
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec21 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("");
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean24 = node23.isName();
        boolean boolean25 = node23.isSwitch();
        java.lang.String str26 = node23.toString();
        boolean boolean27 = node23.isNumber();
        boolean boolean28 = node23.isComma();
        boolean boolean29 = node23.isDebugger();
        boolean boolean30 = node23.isWith();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean33 = node32.isName();
        boolean boolean34 = node32.isSwitch();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean37 = node32.hasChild(node36);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean40 = node39.isName();
        boolean boolean41 = node39.isSwitch();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean44 = node39.hasChild(node43);
        com.google.javascript.rhino.Node node45 = com.google.javascript.jscomp.NodeUtil.newExpr(node39);
        int int46 = node39.getLength();
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet50 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49);
        node39.setDirectives((java.util.Set<java.lang.String>) strSet50);
        java.lang.String str53 = node36.checkTreeEquals(node39);
        node36.setSourceEncodedPosition((int) 'a');
        com.google.javascript.rhino.jstype.JSType jSType56 = node36.getJSType();
        com.google.javascript.rhino.Node node57 = node23.copyInformationFrom(node36);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean60 = node59.isName();
        boolean boolean61 = node59.isSwitch();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean64 = node59.hasChild(node63);
        com.google.javascript.rhino.Node node65 = com.google.javascript.jscomp.NodeUtil.newExpr(node59);
        node59.setOptionalArg(true);
        node59.putBooleanProp((int) (short) -1, true);
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean73 = node72.isName();
        boolean boolean74 = node72.isSwitch();
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean77 = node72.hasChild(node76);
        com.google.javascript.rhino.Node node78 = com.google.javascript.jscomp.NodeUtil.newExpr(node72);
        boolean boolean79 = node78.isRegExp();
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean82 = node81.isName();
        boolean boolean83 = node81.isSwitch();
        java.lang.String str84 = node81.toString();
        com.google.javascript.rhino.Node node85 = node78.useSourceInfoIfMissingFromForTree(node81);
        com.google.javascript.rhino.Node node86 = node59.useSourceInfoFromForTree(node78);
        boolean boolean87 = node59.hasOneChild();
        java.lang.String str88 = node23.checkTreeEquals(node59);
        node23.removeProp((int) '#');
        boolean boolean91 = node23.isCase();
        boolean boolean92 = node23.isSyntheticBlock();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry93 = null;
        com.google.javascript.rhino.jstype.JSType jSType94 = assertionFunctionSpec21.getAssertedType(node23, jSTypeRegistry93);
        java.lang.String str98 = node23.toString(true, false, false);
        node18.addChildToBack(node23);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "NUMBER -1.0" + "'", str26, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(jSType56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "NUMBER -1.0" + "'", str84, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNull(jSType94);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "NUMBER -1.0 0" + "'", str98, "NUMBER -1.0 0");
    }

    @Test
    public void test09566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09566");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getReturnDescription();
        boolean boolean3 = jSDocInfo0.hasFileOverview();
        java.lang.String str4 = jSDocInfo0.getDeprecationReason();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        int int10 = node9.getChildCount();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node12.isName();
        boolean boolean14 = node12.isSwitch();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node12.hasChild(node16);
        boolean boolean18 = node12.isVar();
        com.google.javascript.rhino.Node node19 = node12.getParent();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node21.isName();
        boolean boolean23 = node21.isSwitch();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean26 = node21.hasChild(node25);
        boolean boolean27 = node21.isVar();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean30 = node29.isName();
        boolean boolean31 = node29.isSwitch();
        java.lang.String str32 = node29.toString();
        boolean boolean33 = node29.isWith();
        com.google.javascript.rhino.Node node34 = node21.srcref(node29);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(130, node9, node12, node29, node38, 0, 15);
        boolean boolean42 = node29.isTypeOf();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean45 = node44.isName();
        double double46 = node44.getDouble();
        node29.addChildToFront(node44);
        jSDocInfo0.setAssociatedNode(node29);
        int int49 = jSDocInfo0.getImplementedInterfaceCount();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "NUMBER -1.0" + "'", str32, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-1.0d) + "'", double46 == (-1.0d));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test09567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09567");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node2.hasChild(node6);
        boolean boolean8 = node2.isVar();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        java.lang.String str13 = node10.toString();
        boolean boolean14 = node10.isWith();
        com.google.javascript.rhino.Node node15 = node2.srcref(node10);
        boolean boolean16 = node2.isNoSideEffectsCall();
        boolean boolean17 = node2.isName();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(0, node2, (int) (byte) 0, 48);
        int int21 = node2.getSideEffectFlags();
        boolean boolean22 = node2.isVoid();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "NUMBER -1.0" + "'", str13, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test09568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09568");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        boolean boolean4 = node1.isNull();
        boolean boolean5 = node1.isComma();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node7.isName();
        boolean boolean9 = node7.isSwitch();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node7.hasChild(node11);
        com.google.javascript.rhino.Node node13 = com.google.javascript.jscomp.NodeUtil.newExpr(node7);
        int int14 = node7.getLength();
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node7.setDirectives((java.util.Set<java.lang.String>) strSet18);
        boolean boolean22 = node7.getBooleanProp(41);
        com.google.javascript.rhino.jstype.JSType jSType23 = null;
        node7.setJSType(jSType23);
        boolean boolean25 = node7.isVar();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((-1.0d), 43, 35);
        com.google.javascript.rhino.Node node30 = node7.useSourceInfoIfMissingFromForTree(node29);
        node7.setVarArgs(false);
        com.google.javascript.rhino.Node node33 = node1.srcref(node7);
        double double34 = node33.getDouble();
        boolean boolean35 = node33.isIf();
        com.google.javascript.rhino.jstype.JSType jSType36 = null;
        node33.setJSType(jSType36);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable38 = node33.getAncestors();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator39 = ancestorIterable38.spliterator();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-1.0d) + "'", double34 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(ancestorIterable38);
        org.junit.Assert.assertNotNull(nodeSpliterator39);
    }

    @Test
    public void test09569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09569");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        java.util.stream.Stream<java.lang.String> strStream2 = strSet1.stream();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet8 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet8, strArray7);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node11.isName();
        boolean boolean13 = node11.isSwitch();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean16 = node11.hasChild(node15);
        com.google.javascript.rhino.Node node17 = com.google.javascript.jscomp.NodeUtil.newExpr(node11);
        int int18 = node11.getLength();
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        node11.setDirectives((java.util.Set<java.lang.String>) strSet22);
        java.util.Spliterator<java.lang.String> strSpliterator25 = strSet22.spliterator();
        boolean boolean26 = strSet8.retainAll((java.util.Collection<java.lang.String>) strSet22);
        java.lang.Object[] objArray27 = strSet8.toArray();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean30 = node29.isName();
        boolean boolean31 = node29.isSwitch();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean34 = node29.hasChild(node33);
        com.google.javascript.rhino.Node node35 = com.google.javascript.jscomp.NodeUtil.newExpr(node29);
        int int36 = node29.getLength();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet40 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39);
        node29.setDirectives((java.util.Set<java.lang.String>) strSet40);
        boolean boolean43 = strSet40.isEmpty();
        boolean boolean44 = strSet8.containsAll((java.util.Collection<java.lang.String>) strSet40);
        boolean boolean45 = strSet1.containsAll((java.util.Collection<java.lang.String>) strSet8);
        int int46 = strSet8.size();
        com.google.javascript.rhino.JSDocInfo jSDocInfo47 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet48 = jSDocInfo47.getParameterNames();
        boolean boolean50 = jSDocInfo47.hasParameter("hi!");
        boolean boolean51 = jSDocInfo47.hasThisType();
        boolean boolean52 = jSDocInfo47.isIdGenerator();
        boolean boolean53 = jSDocInfo47.isDeprecated();
        boolean boolean54 = strSet8.remove((java.lang.Object) boolean53);
        java.util.Spliterator<java.lang.String> strSpliterator55 = strSet8.spliterator();
        java.util.stream.Stream<java.lang.String> strStream56 = strSet8.stream();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(strStream2);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strSpliterator25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[hi!]");
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strSpliterator55);
        org.junit.Assert.assertNotNull(strStream56);
    }

    @Test
    public void test09570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09570");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int1 = namePosition0.getPositionOnStartLine();
        int int2 = namePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        boolean boolean6 = node4.isSwitch();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node4.hasChild(node8);
        com.google.javascript.rhino.Node node10 = com.google.javascript.jscomp.NodeUtil.newExpr(node4);
        int int11 = node4.getLength();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder12 = node4.new FileLevelJsDocBuilder();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection13 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node4);
        namePosition0.setItem(node4);
        com.google.javascript.rhino.Node node15 = namePosition0.getItem();
        int int16 = namePosition0.getEndLine();
        int int17 = namePosition0.getPositionOnStartLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(nodeCollection13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test09571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09571");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        boolean boolean7 = node1.isVar();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean10 = node9.isName();
        boolean boolean11 = node9.isSwitch();
        java.lang.String str12 = node9.toString();
        boolean boolean13 = node9.isWith();
        com.google.javascript.rhino.Node node14 = node1.srcref(node9);
        node1.detachChildren();
        int int16 = node1.getCharno();
        int int17 = node1.getSourcePosition();
        boolean boolean18 = node1.isNE();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "NUMBER -1.0" + "'", str12, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test09572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09572");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        boolean boolean5 = jSDocInfo0.isIdGenerator();
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = jSDocInfo0.getTemplateTypeNames();
        jSDocInfo0.setDeprecated(true);
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strList6);
    }

    @Test
    public void test09573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09573");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        java.lang.String str4 = node1.toString();
        boolean boolean5 = node1.isWith();
        boolean boolean6 = node1.isBreak();
        com.google.javascript.rhino.JSDocInfo jSDocInfo7 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo7.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection9 = jSDocInfo7.getReferences();
        java.util.Collection<java.lang.String> strCollection10 = jSDocInfo7.getReferences();
        com.google.javascript.rhino.Node node11 = jSDocInfo7.getAssociatedNode();
        node1.setJSDocInfo(jSDocInfo7);
        jSDocInfo7.setLicense("NUMBER -1.0");
        int int15 = jSDocInfo7.getImplementedInterfaceCount();
        boolean boolean17 = jSDocInfo7.hasDescriptionForParameter("");
        boolean boolean18 = jSDocInfo7.isOverride();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection19 = jSDocInfo7.getTypeNodes();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER -1.0" + "'", str4, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertNull(strCollection9);
        org.junit.Assert.assertNull(strCollection10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(nodeCollection19);
    }

    @Test
    public void test09574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09574");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        boolean boolean7 = node1.isVar();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean10 = node9.isName();
        boolean boolean11 = node9.isSwitch();
        java.lang.String str12 = node9.toString();
        boolean boolean13 = node9.isWith();
        com.google.javascript.rhino.Node node14 = node1.srcref(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node16.isName();
        boolean boolean18 = node16.isSwitch();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node16.hasChild(node20);
        com.google.javascript.rhino.jstype.JSType jSType22 = null;
        node20.setJSType(jSType22);
        node20.setType(2);
        int int26 = node14.getIndexOfChild(node20);
        com.google.javascript.rhino.Node node27 = node20.removeFirstChild();
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList29 = jSDocInfo28.getExtendedInterfaces();
        java.lang.String str30 = jSDocInfo28.getVersion();
        boolean boolean31 = jSDocInfo28.isInterface();
        java.lang.String str32 = jSDocInfo28.getLendsName();
        java.lang.String str33 = jSDocInfo28.getOriginalCommentString();
        node20.setJSDocInfo(jSDocInfo28);
        boolean boolean35 = jSDocInfo28.isHidden();
        boolean boolean36 = jSDocInfo28.isNoShadow();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList37 = jSDocInfo28.getImplementedInterfaces();
        boolean boolean38 = jSDocInfo28.isInterface();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "NUMBER -1.0" + "'", str12, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNotNull(jSTypeExpressionList29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test09575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09575");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        node1.detachChildren();
        boolean boolean5 = node1.isDebugger();
        boolean boolean6 = node1.isIf();
        boolean boolean7 = node1.isDefaultCase();
        boolean boolean8 = node1.isGetElem();
        com.google.javascript.rhino.Node node9 = null;
        com.google.javascript.rhino.Node node10 = node1.getChildBefore(node9);
        com.google.javascript.rhino.Node node11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = node1.checkTreeEquals(node11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(node10);
    }

    @Test
    public void test09576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09576");
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(35, nodeArray7, 54, (int) (byte) 100);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(0, nodeArray7, 4, 27);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(0, nodeArray7);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(53, nodeArray7);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(0, nodeArray7);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(54, nodeArray7, (int) (byte) 10, 50);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(44, nodeArray7, 54, 100);
        org.junit.Assert.assertNotNull(nodeArray7);
    }

    @Test
    public void test09577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09577");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        int int8 = node1.getLength();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable9 = node1.getAncestors();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor10 = ancestorIterable9.iterator();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor11 = ancestorIterable9.iterator();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator12 = ancestorIterable9.spliterator();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor13 = ancestorIterable9.iterator();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor14 = ancestorIterable9.iterator();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator15 = ancestorIterable9.spliterator();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator16 = ancestorIterable9.spliterator();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(ancestorIterable9);
        org.junit.Assert.assertNotNull(nodeItor10);
        org.junit.Assert.assertNotNull(nodeItor11);
        org.junit.Assert.assertNotNull(nodeSpliterator12);
        org.junit.Assert.assertNotNull(nodeItor13);
        org.junit.Assert.assertNotNull(nodeItor14);
        org.junit.Assert.assertNotNull(nodeSpliterator15);
        org.junit.Assert.assertNotNull(nodeSpliterator16);
    }

    @Test
    public void test09578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09578");
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec1 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("GT");
    }

    @Test
    public void test09579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09579");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        java.lang.String str6 = jSDocInfo0.getFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getThisType();
        boolean boolean8 = jSDocInfo0.hasModifies();
        java.lang.String str9 = jSDocInfo0.getLendsName();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo0.getParameterNames();
        boolean boolean11 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression13 = jSDocInfo0.getParameterType("java.io.IOException: java.io.IOException: NUMBER -1.0");
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSTypeExpression13);
    }

    @Test
    public void test09580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09580");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isNoAlias();
        boolean boolean5 = jSDocInfo0.isHidden();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean7 = jSDocInfo0.hasModifies();
        boolean boolean8 = jSDocInfo0.hasReturnType();
        boolean boolean9 = jSDocInfo0.isExpose();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test09581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09581");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        int int6 = node5.getChildCount();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node8.isName();
        boolean boolean10 = node8.isSwitch();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node8.hasChild(node12);
        boolean boolean14 = node8.isVar();
        com.google.javascript.rhino.Node node15 = node8.getParent();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node17.isName();
        boolean boolean19 = node17.isSwitch();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node17.hasChild(node21);
        boolean boolean23 = node17.isVar();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean26 = node25.isName();
        boolean boolean27 = node25.isSwitch();
        java.lang.String str28 = node25.toString();
        boolean boolean29 = node25.isWith();
        com.google.javascript.rhino.Node node30 = node17.srcref(node25);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(130, node5, node8, node25, node34, 0, 15);
        com.google.javascript.rhino.Node node38 = node37.getFirstChild();
        boolean boolean39 = node37.isScript();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean42 = node41.isName();
        boolean boolean43 = node41.isSwitch();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean46 = node41.hasChild(node45);
        com.google.javascript.rhino.Node node47 = com.google.javascript.jscomp.NodeUtil.newExpr(node41);
        boolean boolean48 = node47.isRegExp();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n", (int) (short) 100, 42);
        node52.setOptionalArg(true);
        boolean boolean55 = node52.isAssign();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean58 = node57.isName();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean61 = node60.isName();
        boolean boolean62 = node60.isSwitch();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean65 = node60.hasChild(node64);
        com.google.javascript.rhino.Node node66 = com.google.javascript.jscomp.NodeUtil.newExpr(node60);
        boolean boolean67 = node66.isRegExp();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean70 = node69.isName();
        boolean boolean71 = node69.isSwitch();
        java.lang.String str72 = node69.toString();
        com.google.javascript.rhino.Node node73 = node66.useSourceInfoIfMissingFromForTree(node69);
        java.lang.String str74 = node57.checkTreeEquals(node73);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean78 = node77.isName();
        boolean boolean79 = node77.isSwitch();
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean82 = node77.hasChild(node81);
        boolean boolean83 = node81.isGetElem();
        node57.putProp((int) (short) 100, (java.lang.Object) boolean83);
        boolean boolean85 = node57.isGetProp();
        boolean boolean86 = node57.isContinue();
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node((int) (byte) 1, node37, node47, node52, node57);
        boolean boolean88 = node37.isTrue();
        boolean boolean89 = node37.hasChildren();
        boolean boolean90 = node37.isSwitch();
        boolean boolean91 = node37.isCase();
        boolean boolean92 = node37.isAnd();
        boolean boolean93 = node37.isObjectLit();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile94 = node37.getStaticSourceFile();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "NUMBER -1.0" + "'", str28, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "NUMBER -1.0" + "'", str72, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n" + "'", str74, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(staticSourceFile94);
    }

    @Test
    public void test09582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09582");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        int int8 = node1.getLength();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        node1.setDirectives((java.util.Set<java.lang.String>) strSet12);
        boolean boolean16 = strSet12.add("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList18 = jSDocInfo17.getExtendedInterfaces();
        java.lang.String str19 = jSDocInfo17.getVersion();
        boolean boolean20 = jSDocInfo17.isInterface();
        boolean boolean21 = jSDocInfo17.isJavaDispatch();
        java.lang.String str22 = jSDocInfo17.getSourceName();
        boolean boolean24 = jSDocInfo17.hasDescriptionForParameter("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        boolean boolean25 = jSDocInfo17.isNoCompile();
        boolean boolean26 = jSDocInfo17.isExpose();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean29 = node28.isName();
        boolean boolean30 = node28.isSwitch();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean33 = node28.hasChild(node32);
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        com.google.javascript.rhino.InputId inputId36 = com.google.javascript.jscomp.NodeUtil.getInputId(node32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean39 = node38.isName();
        boolean boolean40 = node38.isSwitch();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean43 = node38.hasChild(node42);
        com.google.javascript.rhino.Node node44 = com.google.javascript.jscomp.NodeUtil.newExpr(node38);
        int int45 = node44.getType();
        com.google.javascript.rhino.Node node46 = node32.copyInformationFromForTree(node44);
        jSDocInfo17.setAssociatedNode(node32);
        boolean boolean48 = strSet12.contains((java.lang.Object) node32);
        java.util.Iterator<java.lang.String> strItor49 = strSet12.iterator();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(jSTypeExpressionList18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(inputId36);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 130 + "'", int45 == 130);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strItor49);
    }

    @Test
    public void test09583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09583");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nEXPR_RESULT\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: EXPR_RESULT\n\n\nSubtree2: NUMBER 100.0 100\n");
        boolean boolean2 = node1.isDo();
        node1.setOptionalArg(true);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test09584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09584");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getReferences();
        boolean boolean3 = jSDocInfo0.isJavaDispatch();
        boolean boolean4 = jSDocInfo0.hasTypedefType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getBaseType();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        int int10 = strList8.size();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility11 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        boolean boolean12 = strList8.remove((java.lang.Object) visibility11);
        jSDocInfo0.setVisibility(visibility11);
        boolean boolean14 = jSDocInfo0.hasBaseType();
        com.google.common.collect.ImmutableList<java.lang.String> strList15 = jSDocInfo0.getTemplateTypeNames();
        java.util.Iterator[] iteratorArray17 = new java.util.Iterator[0];
        @SuppressWarnings("unchecked")
        java.util.Iterator<java.lang.String>[] strItorArray18 = (java.util.Iterator<java.lang.String>[]) iteratorArray17;
        java.util.Iterator<java.lang.String>[] strItorArray19 = strList15.toArray(strItorArray18);
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + visibility11 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility11.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(iteratorArray17);
        org.junit.Assert.assertNotNull(strItorArray18);
        org.junit.Assert.assertNotNull(strItorArray19);
    }

    @Test
    public void test09585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09585");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.jstype.JSType jSType7 = null;
        node5.setJSType(jSType7);
        com.google.javascript.rhino.InputId inputId9 = com.google.javascript.jscomp.NodeUtil.getInputId(node5);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node11.isName();
        boolean boolean13 = node11.isSwitch();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean16 = node11.hasChild(node15);
        com.google.javascript.rhino.Node node17 = com.google.javascript.jscomp.NodeUtil.newExpr(node11);
        int int18 = node17.getType();
        com.google.javascript.rhino.Node node19 = node5.copyInformationFromForTree(node17);
        int int20 = node5.getType();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean30 = node29.isName();
        boolean boolean31 = node29.isSwitch();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean34 = node29.hasChild(node33);
        com.google.javascript.rhino.Node node35 = com.google.javascript.jscomp.NodeUtil.newExpr(node29);
        int int36 = node29.getLength();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet40 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39);
        node29.setDirectives((java.util.Set<java.lang.String>) strSet40);
        java.util.Spliterator<java.lang.String> strSpliterator43 = strSet40.spliterator();
        boolean boolean44 = strSet26.retainAll((java.util.Collection<java.lang.String>) strSet40);
        java.lang.Object[] objArray45 = strSet26.toArray();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean48 = node47.isName();
        boolean boolean49 = node47.isSwitch();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean52 = node47.hasChild(node51);
        com.google.javascript.rhino.Node node53 = com.google.javascript.jscomp.NodeUtil.newExpr(node47);
        int int54 = node47.getLength();
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet58 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet58, strArray57);
        node47.setDirectives((java.util.Set<java.lang.String>) strSet58);
        boolean boolean61 = strSet58.isEmpty();
        boolean boolean62 = strSet26.containsAll((java.util.Collection<java.lang.String>) strSet58);
        com.google.javascript.rhino.JSDocInfo jSDocInfo63 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet64 = jSDocInfo63.getParameterNames();
        boolean boolean65 = strSet26.containsAll((java.util.Collection<java.lang.String>) strSet64);
        java.lang.Object[] objArray66 = strSet26.toArray();
        node5.setDirectives((java.util.Set<java.lang.String>) strSet26);
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString("BITXOR 0\n", 41, (int) ' ');
        boolean boolean72 = node71.isVar();
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean75 = node74.isName();
        boolean boolean76 = node74.isSwitch();
        java.lang.String str77 = node74.toString();
        boolean boolean78 = node74.isVar();
        boolean boolean79 = com.google.javascript.jscomp.NodeUtil.isSymmetricOperation(node74);
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean82 = node81.isName();
        boolean boolean83 = node81.isSwitch();
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean86 = node81.hasChild(node85);
        boolean boolean87 = node81.isVar();
        node81.setWasEmptyNode(false);
        com.google.javascript.jscomp.CodingConvention.Bind bind90 = new com.google.javascript.jscomp.CodingConvention.Bind(node71, node74, node81);
        com.google.javascript.rhino.Node node91 = node5.useSourceInfoFrom(node71);
        node91.setOptionalArg(true);
        node91.putBooleanProp(0, true);
        node91.setSourceEncodedPosition(27);
        boolean boolean99 = node91.isCatch();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(inputId9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 130 + "'", int18 == 130);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 39 + "'", int20 == 39);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strSpliterator43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[hi!]");
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[hi!]");
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "NUMBER -1.0" + "'", str77, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test09586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09586");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        java.lang.String str6 = jSDocInfo0.getFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getParameterType("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        java.lang.String str10 = jSDocInfo0.getOriginalCommentString();
        boolean boolean11 = jSDocInfo0.hasBaseType();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test09587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09587");
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative1 = null;
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec2 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("", jSTypeNative1);
        java.lang.String str3 = assertionFunctionSpec2.getFunctionName();
        java.lang.String str4 = assertionFunctionSpec2.getFunctionName();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node6.isName();
        boolean boolean8 = node6.isSwitch();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node6.hasChild(node10);
        com.google.javascript.rhino.Node node12 = com.google.javascript.jscomp.NodeUtil.newExpr(node6);
        node6.setOptionalArg(true);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder15 = node6.getJsDocBuilderForNode();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry16 = null;
        com.google.javascript.rhino.jstype.JSType jSType17 = assertionFunctionSpec2.getAssertedType(node6, jSTypeRegistry16);
        int int18 = node6.getLineno();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder15);
        org.junit.Assert.assertNull(jSType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test09588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09588");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n", (int) (short) 100, 42);
        node3.setOptionalArg(true);
        boolean boolean6 = node3.isParamList();
        node3.putIntProp(52, 11);
        boolean boolean10 = node3.isStringKey();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test09589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09589");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node2.hasChild(node6);
        com.google.javascript.rhino.Node node8 = com.google.javascript.jscomp.NodeUtil.newExpr(node2);
        boolean boolean9 = node8.isGetElem();
        boolean boolean10 = node8.isTypeOf();
        boolean boolean11 = node8.isAnd();
        boolean boolean12 = node8.isThrow();
        boolean boolean13 = node8.isDelProp();
        boolean boolean14 = node8.isGetterDef();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(49, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n", (int) (short) 100, (int) (short) 100);
        boolean boolean20 = node19.isTry();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = null;
        node19.setStaticSourceFile(staticSourceFile21);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node24.isName();
        boolean boolean26 = node24.isSwitch();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean29 = node24.hasChild(node28);
        com.google.javascript.rhino.Node node30 = com.google.javascript.jscomp.NodeUtil.newExpr(node24);
        boolean boolean31 = node30.isRegExp();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean34 = node33.isName();
        boolean boolean35 = node33.isSwitch();
        java.lang.String str36 = node33.toString();
        com.google.javascript.rhino.Node node37 = node30.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.jstype.JSType jSType38 = null;
        node33.setJSType(jSType38);
        boolean boolean40 = node33.isGetterDef();
        boolean boolean41 = node33.isNoSideEffectsCall();
        node33.removeProp((int) (short) 100);
        boolean boolean44 = node33.isFunction();
        boolean boolean45 = node33.isStringKey();
        boolean boolean46 = node33.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) 0, node8, node19, node33);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node49 = node19.getChildAtIndex(49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "NUMBER -1.0" + "'", str36, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test09590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09590");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node2.hasChild(node6);
        boolean boolean8 = node2.isVar();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        java.lang.String str13 = node10.toString();
        boolean boolean14 = node10.isWith();
        com.google.javascript.rhino.Node node15 = node2.srcref(node10);
        boolean boolean16 = node10.isFor();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean19 = node18.isName();
        boolean boolean20 = node18.isSwitch();
        boolean boolean21 = node18.isNull();
        boolean boolean22 = node18.isFunction();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node24.isName();
        boolean boolean26 = node24.isSwitch();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean29 = node24.hasChild(node28);
        boolean boolean30 = node24.isVar();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean33 = node32.isName();
        boolean boolean34 = node32.isSwitch();
        java.lang.String str35 = node32.toString();
        boolean boolean36 = node32.isWith();
        com.google.javascript.rhino.Node node37 = node24.srcref(node32);
        java.lang.String str38 = node37.toString();
        boolean boolean39 = node37.isDec();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean42 = node41.isName();
        boolean boolean43 = node41.isSwitch();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean46 = node41.hasChild(node45);
        com.google.javascript.rhino.Node node47 = com.google.javascript.jscomp.NodeUtil.newExpr(node41);
        boolean boolean48 = node47.isRegExp();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean51 = node50.isName();
        boolean boolean52 = node50.isSwitch();
        java.lang.String str53 = node50.toString();
        com.google.javascript.rhino.Node node54 = node47.useSourceInfoIfMissingFromForTree(node50);
        com.google.javascript.rhino.jstype.JSType jSType55 = null;
        node50.setJSType(jSType55);
        boolean boolean57 = node50.isOptionalArg();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) -1, node10, node18, node37, node50, (int) (short) -1, 0);
        boolean boolean61 = node60.isLocalResultCall();
        boolean boolean62 = node60.isFalse();
        com.google.javascript.rhino.Node node63 = node60.getLastSibling();
        node63.setVarArgs(true);
        boolean boolean66 = node63.hasMoreThanOneChild();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition67 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int68 = namePosition67.getPositionOnStartLine();
        int int69 = namePosition67.getStartLine();
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean72 = node71.isName();
        boolean boolean73 = node71.isSwitch();
        java.lang.String str74 = node71.toString();
        boolean boolean75 = node71.isNumber();
        boolean boolean76 = node71.isComma();
        boolean boolean77 = node71.isDebugger();
        boolean boolean78 = node71.isWith();
        namePosition67.setItem(node71);
        com.google.javascript.rhino.Node node80 = com.google.javascript.jscomp.NodeUtil.newExpr(node71);
        boolean boolean81 = node80.isSyntheticBlock();
        com.google.javascript.rhino.Node node82 = node63.useSourceInfoIfMissingFrom(node80);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "NUMBER -1.0" + "'", str13, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "NUMBER -1.0" + "'", str35, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "NUMBER -1.0" + "'", str38, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "NUMBER -1.0" + "'", str53, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "NUMBER -1.0" + "'", str74, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
    }

    @Test
    public void test09591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09591");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        boolean boolean7 = node1.isVar();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean10 = node9.isName();
        boolean boolean11 = node9.isSwitch();
        java.lang.String str12 = node9.toString();
        boolean boolean13 = node9.isWith();
        com.google.javascript.rhino.Node node14 = node1.srcref(node9);
        boolean boolean15 = com.google.javascript.jscomp.NodeUtil.isSymmetricOperation(node9);
        com.google.javascript.rhino.Node node16 = node9.removeChildren();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean19 = node18.isName();
        boolean boolean20 = node18.isSwitch();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean23 = node18.hasChild(node22);
        com.google.javascript.rhino.Node node24 = com.google.javascript.jscomp.NodeUtil.newExpr(node18);
        boolean boolean25 = node24.isRegExp();
        boolean boolean26 = node24.isThis();
        boolean boolean27 = node24.isComma();
        java.lang.String str28 = node9.checkTreeEquals(node24);
        boolean boolean29 = node9.isLabel();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "NUMBER -1.0" + "'", str12, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n" + "'", str28, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test09592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09592");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        boolean boolean6 = jSDocInfo0.isConstant();
        boolean boolean7 = jSDocInfo0.isNoCompile();
        boolean boolean8 = jSDocInfo0.containsDeclaration();
        java.lang.String str9 = jSDocInfo0.getOriginalCommentString();
        boolean boolean10 = jSDocInfo0.isNoAlias();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test09593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09593");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node5.isName();
        boolean boolean7 = node5.isSwitch();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean10 = node5.hasChild(node9);
        boolean boolean11 = node5.isVar();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean14 = node13.isName();
        boolean boolean15 = node13.isSwitch();
        java.lang.String str16 = node13.toString();
        boolean boolean17 = node13.isWith();
        com.google.javascript.rhino.Node node18 = node5.srcref(node13);
        boolean boolean19 = node13.isFor();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node21.isName();
        boolean boolean23 = node21.isSwitch();
        boolean boolean24 = node21.isNull();
        boolean boolean25 = node21.isFunction();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean28 = node27.isName();
        boolean boolean29 = node27.isSwitch();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean32 = node27.hasChild(node31);
        boolean boolean33 = node27.isVar();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean36 = node35.isName();
        boolean boolean37 = node35.isSwitch();
        java.lang.String str38 = node35.toString();
        boolean boolean39 = node35.isWith();
        com.google.javascript.rhino.Node node40 = node27.srcref(node35);
        java.lang.String str41 = node40.toString();
        boolean boolean42 = node40.isDec();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean45 = node44.isName();
        boolean boolean46 = node44.isSwitch();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean49 = node44.hasChild(node48);
        com.google.javascript.rhino.Node node50 = com.google.javascript.jscomp.NodeUtil.newExpr(node44);
        boolean boolean51 = node50.isRegExp();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean54 = node53.isName();
        boolean boolean55 = node53.isSwitch();
        java.lang.String str56 = node53.toString();
        com.google.javascript.rhino.Node node57 = node50.useSourceInfoIfMissingFromForTree(node53);
        com.google.javascript.rhino.jstype.JSType jSType58 = null;
        node53.setJSType(jSType58);
        boolean boolean60 = node53.isOptionalArg();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (byte) -1, node13, node21, node40, node53, (int) (short) -1, 0);
        boolean boolean64 = node13.isDec();
        com.google.javascript.rhino.Node node65 = node1.useSourceInfoIfMissingFromForTree(node13);
        java.lang.String str66 = com.google.javascript.jscomp.NodeUtil.getSourceName(node1);
        boolean boolean67 = node1.isName();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean70 = node69.isName();
        boolean boolean71 = node69.isSwitch();
        java.lang.String str72 = node69.toString();
        boolean boolean73 = node69.isNumber();
        boolean boolean74 = node69.isStringKey();
        node69.setType(54);
        boolean boolean77 = node1.isEquivalentTo(node69);
        boolean boolean78 = node69.isVarArgs();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder79 = node69.getJsDocBuilderForNode();
        com.google.javascript.rhino.InputId inputId81 = new com.google.javascript.rhino.InputId("java.io.IOException: Unknown class name");
        java.lang.String str82 = inputId81.getIdName();
        node69.setInputId(inputId81);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "NUMBER -1.0" + "'", str16, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "NUMBER -1.0" + "'", str38, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "NUMBER -1.0" + "'", str41, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "NUMBER -1.0" + "'", str56, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "NUMBER -1.0" + "'", str72, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder79);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "java.io.IOException: Unknown class name" + "'", str82, "java.io.IOException: Unknown class name");
    }

    @Test
    public void test09594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09594");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        java.lang.String str4 = node1.toString();
        boolean boolean5 = node1.isNumber();
        boolean boolean6 = node1.isComma();
        boolean boolean7 = node1.isDebugger();
        boolean boolean8 = node1.isWith();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node10.hasChild(node14);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node17.isName();
        boolean boolean19 = node17.isSwitch();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node17.hasChild(node21);
        com.google.javascript.rhino.Node node23 = com.google.javascript.jscomp.NodeUtil.newExpr(node17);
        int int24 = node17.getLength();
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node17.setDirectives((java.util.Set<java.lang.String>) strSet28);
        java.lang.String str31 = node14.checkTreeEquals(node17);
        node14.setSourceEncodedPosition((int) 'a');
        com.google.javascript.rhino.jstype.JSType jSType34 = node14.getJSType();
        com.google.javascript.rhino.Node node35 = node1.copyInformationFrom(node14);
        int int36 = node35.getSourceOffset();
        com.google.javascript.rhino.InputId inputId37 = com.google.javascript.jscomp.NodeUtil.getInputId(node35);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER -1.0" + "'", str4, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(jSType34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNull(inputId37);
    }

    @Test
    public void test09595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09595");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(4095);
        boolean boolean2 = node1.isVarArgs();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test09596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09596");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(52, 32, 100);
        node3.setSourceEncodedPositionForTree(16);
        boolean boolean6 = com.google.javascript.jscomp.NodeUtil.isSymmetricOperation(node3);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node8.isName();
        boolean boolean10 = node8.isSwitch();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node8.hasChild(node12);
        com.google.javascript.rhino.Node node14 = com.google.javascript.jscomp.NodeUtil.newExpr(node8);
        int int15 = node14.getType();
        com.google.javascript.rhino.Node node16 = node14.getFirstChild();
        boolean boolean17 = node3.isEquivalentTo(node14);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(100.0d, 135167, 42);
        node14.addChildrenToBack(node21);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 130 + "'", int15 == 130);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
    }

    @Test
    public void test09597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09597");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        java.lang.String str7 = node1.getSourceFileName();
        boolean boolean8 = node1.isIn();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node10.hasChild(node14);
        com.google.javascript.rhino.jstype.JSType jSType16 = null;
        node14.setJSType(jSType16);
        node14.setType(2);
        com.google.javascript.rhino.Node node20 = node14.getLastSibling();
        boolean boolean21 = node14.isRegExp();
        boolean boolean22 = node14.isGetProp();
        boolean boolean23 = node14.isOptionalArg();
        int int25 = node14.getIntProp((int) (byte) 1);
        com.google.javascript.rhino.Node node26 = node14.getLastSibling();
        com.google.javascript.rhino.Node node27 = node1.useSourceInfoIfMissingFromForTree(node14);
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection28 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node1);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean31 = node30.isName();
        boolean boolean32 = node30.isSwitch();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean35 = node30.hasChild(node34);
        com.google.javascript.rhino.Node node36 = com.google.javascript.jscomp.NodeUtil.newExpr(node30);
        int int37 = node30.getLength();
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        node30.setDirectives((java.util.Set<java.lang.String>) strSet41);
        java.util.Spliterator<java.lang.String> strSpliterator44 = strSet41.spliterator();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean47 = node46.isName();
        boolean boolean48 = node46.isSwitch();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean51 = node46.hasChild(node50);
        java.lang.String str52 = com.google.javascript.jscomp.NodeUtil.getSourceName(node46);
        com.google.javascript.rhino.Node node53 = com.google.javascript.jscomp.NodeUtil.newExpr(node46);
        boolean boolean54 = strSet41.equals((java.lang.Object) node53);
        java.util.Spliterator<java.lang.String> strSpliterator55 = strSet41.spliterator();
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        int int60 = strList58.size();
        java.lang.String[] strArray62 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList63 = new java.util.ArrayList<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList63, strArray62);
        int int65 = strList63.size();
        boolean boolean66 = strList58.removeAll((java.util.Collection<java.lang.String>) strList63);
        java.io.IOException iOException68 = new java.io.IOException("Not declared as a type name");
        java.io.IOException iOException70 = new java.io.IOException("Not declared as a type name");
        java.lang.Throwable throwable71 = null;
        java.io.IOException iOException72 = new java.io.IOException(throwable71);
        java.lang.Exception[] exceptionArray73 = new java.lang.Exception[] { iOException68, iOException70, iOException72 };
        java.lang.Exception[] exceptionArray74 = strList58.toArray(exceptionArray73);
        boolean boolean75 = strSet41.containsAll((java.util.Collection<java.lang.String>) strList58);
        node1.setDirectives((java.util.Set<java.lang.String>) strSet41);
        com.google.javascript.rhino.JSDocInfo jSDocInfo77 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList78 = jSDocInfo77.getExtendedInterfaces();
        java.lang.String str79 = jSDocInfo77.getVersion();
        boolean boolean80 = jSDocInfo77.isInterface();
        boolean boolean81 = jSDocInfo77.isJavaDispatch();
        java.lang.String str82 = jSDocInfo77.getSourceName();
        java.lang.String str83 = jSDocInfo77.toString();
        boolean boolean84 = jSDocInfo77.hasFileOverview();
        java.util.Set<java.lang.String> strSet85 = jSDocInfo77.getParameterNames();
        java.lang.String str86 = jSDocInfo77.getLendsName();
        java.util.Set<java.lang.String> strSet87 = jSDocInfo77.getParameterNames();
        boolean boolean88 = strSet41.containsAll((java.util.Collection<java.lang.String>) strSet87);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(nodeCollection28);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strSpliterator44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strSpliterator55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(exceptionArray73);
        org.junit.Assert.assertNotNull(exceptionArray74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(jSTypeExpressionList78);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "JSDocInfo" + "'", str83, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNotNull(strSet87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test09598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09598");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node5.isFunction();
        boolean boolean7 = node5.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node8 = node1.useSourceInfoIfMissingFrom(node5);
        boolean boolean9 = node8.isQuotedString();
        node8.setSourceFileForTesting("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node8);
        com.google.javascript.rhino.Node node13 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node14 = node8.useSourceInfoFromForTree(node13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(staticSourceFile12);
    }

    @Test
    public void test09599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09599");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.hasParameter("hi!");
        boolean boolean4 = jSDocInfo0.hasThisType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getModifies();
        java.util.Iterator<java.lang.String> strItor6 = strSet5.iterator();
        strSet5.clear();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags9 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '#');
        sideEffectFlags9.setMutatesArguments();
        boolean boolean11 = strSet5.contains((java.lang.Object) sideEffectFlags9);
        java.lang.Object[] objArray12 = strSet5.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet14 = jSDocInfo13.getParameterNames();
        boolean boolean16 = jSDocInfo13.hasParameter("hi!");
        boolean boolean17 = jSDocInfo13.containsDeclaration();
        java.lang.String str18 = jSDocInfo13.getOriginalCommentString();
        boolean boolean20 = jSDocInfo13.hasDescriptionForParameter("Not declared as a type name");
        int int21 = jSDocInfo13.getExtendedInterfacesCount();
        boolean boolean22 = jSDocInfo13.hasModifies();
        java.util.Set<java.lang.String> strSet23 = jSDocInfo13.getSuppressions();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean26 = node25.isName();
        boolean boolean27 = node25.isSwitch();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean30 = node25.hasChild(node29);
        com.google.javascript.rhino.jstype.JSType jSType31 = null;
        node29.setJSType(jSType31);
        com.google.javascript.rhino.InputId inputId33 = com.google.javascript.jscomp.NodeUtil.getInputId(node29);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean36 = node35.isName();
        boolean boolean37 = node35.isSwitch();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean40 = node35.hasChild(node39);
        com.google.javascript.rhino.Node node41 = com.google.javascript.jscomp.NodeUtil.newExpr(node35);
        int int42 = node35.getLength();
        boolean boolean43 = node35.isNew();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean46 = node45.isName();
        boolean boolean47 = node45.isSwitch();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean50 = node45.hasChild(node49);
        com.google.javascript.rhino.Node node51 = com.google.javascript.jscomp.NodeUtil.newExpr(node45);
        int int52 = node45.getLength();
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet56 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet56, strArray55);
        node45.setDirectives((java.util.Set<java.lang.String>) strSet56);
        boolean boolean60 = node45.getBooleanProp(41);
        com.google.javascript.rhino.Node node61 = node35.useSourceInfoFromForTree(node45);
        boolean boolean62 = node45.isGetElem();
        com.google.javascript.rhino.Node node63 = node29.useSourceInfoFrom(node45);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean66 = node65.isName();
        boolean boolean67 = node65.isSwitch();
        java.lang.String str68 = node65.toString();
        boolean boolean69 = node65.isNumber();
        boolean boolean70 = node65.isComma();
        boolean boolean71 = node65.isDebugger();
        boolean boolean72 = node65.isWith();
        node29.addChildrenToBack(node65);
        node65.setCharno(39);
        boolean boolean76 = node65.isWith();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder77 = node65.getJsDocBuilderForNode();
        boolean boolean78 = strSet23.contains((java.lang.Object) node65);
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        node80.setWasEmptyNode(true);
        boolean boolean83 = node80.isOr();
        boolean boolean84 = node80.isNumber();
        node80.putIntProp((int) (short) 0, 51);
        boolean boolean88 = node80.isOr();
        boolean boolean89 = node80.isFalse();
        boolean boolean90 = node80.hasMoreThanOneChild();
        boolean boolean91 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node80);
        boolean boolean92 = strSet23.remove((java.lang.Object) node80);
        boolean boolean93 = strSet5.containsAll((java.util.Collection<java.lang.String>) strSet23);
        strSet23.clear();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(inputId33);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "NUMBER -1.0" + "'", str68, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
    }

    @Test
    public void test09600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09600");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isFunction();
        boolean boolean3 = node1.isNot();
        boolean boolean4 = node1.isIf();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node6.isName();
        boolean boolean8 = node6.isSwitch();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node6.hasChild(node10);
        com.google.javascript.rhino.jstype.JSType jSType12 = null;
        node10.setJSType(jSType12);
        node10.addSuppression("");
        com.google.javascript.rhino.Node node16 = node1.srcrefTree(node10);
        com.google.javascript.rhino.Node node17 = node1.getLastChild();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = node17.isSyntheticBlock();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
    }

    @Test
    public void test09601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09601");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet5 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet5, strArray4);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node8.isName();
        boolean boolean10 = node8.isSwitch();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node8.hasChild(node12);
        com.google.javascript.rhino.Node node14 = com.google.javascript.jscomp.NodeUtil.newExpr(node8);
        int int15 = node8.getLength();
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node8.setDirectives((java.util.Set<java.lang.String>) strSet19);
        java.util.Spliterator<java.lang.String> strSpliterator22 = strSet19.spliterator();
        boolean boolean23 = strSet5.retainAll((java.util.Collection<java.lang.String>) strSet19);
        java.lang.Object[] objArray24 = strSet5.toArray();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node26.isName();
        boolean boolean28 = node26.isSwitch();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean31 = node26.hasChild(node30);
        com.google.javascript.rhino.Node node32 = com.google.javascript.jscomp.NodeUtil.newExpr(node26);
        int int33 = node26.getLength();
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        node26.setDirectives((java.util.Set<java.lang.String>) strSet37);
        boolean boolean40 = strSet37.isEmpty();
        boolean boolean41 = strSet5.containsAll((java.util.Collection<java.lang.String>) strSet37);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet43 = jSDocInfo42.getParameterNames();
        boolean boolean44 = strSet5.containsAll((java.util.Collection<java.lang.String>) strSet43);
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList46 = jSDocInfo45.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection47 = jSDocInfo45.getReferences();
        com.google.common.collect.ImmutableList<java.lang.String> strList48 = jSDocInfo45.getTemplateTypeNames();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection49 = jSDocInfo45.getTypeNodes();
        java.util.Set<java.lang.String> strSet50 = jSDocInfo45.getParameterNames();
        boolean boolean51 = strSet43.containsAll((java.util.Collection<java.lang.String>) strSet50);
        int int52 = strSet43.size();
        com.google.javascript.rhino.JSDocInfo jSDocInfo53 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet54 = jSDocInfo53.getParameterNames();
        java.util.stream.Stream<java.lang.String> strStream55 = strSet54.stream();
        boolean boolean56 = strSet43.containsAll((java.util.Collection<java.lang.String>) strSet54);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean59 = node58.isName();
        boolean boolean60 = node58.isSwitch();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean63 = node62.isFunction();
        boolean boolean64 = node62.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node65 = node58.useSourceInfoIfMissingFrom(node62);
        boolean boolean66 = node58.isNE();
        boolean boolean67 = strSet43.contains((java.lang.Object) boolean66);
        java.lang.Object[] objArray68 = strSet43.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator69 = strSet43.spliterator();
        java.util.Iterator<java.lang.String> strItor70 = strSet43.iterator();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strSpliterator22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[hi!]");
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(jSTypeExpressionList46);
        org.junit.Assert.assertNull(strCollection47);
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertNotNull(nodeCollection49);
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertNotNull(strStream55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[]");
        org.junit.Assert.assertNotNull(strSpliterator69);
        org.junit.Assert.assertNotNull(strItor70);
    }

    @Test
    public void test09602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09602");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.hasParameter("hi!");
        boolean boolean4 = jSDocInfo0.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getThrownTypes();
        boolean boolean6 = jSDocInfo0.isNoShadow();
        boolean boolean7 = jSDocInfo0.containsDeclaration();
        java.lang.String str8 = jSDocInfo0.getFileOverview();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test09603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09603");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.jstype.JSType jSType7 = null;
        node5.setJSType(jSType7);
        node5.setSourceFileForTesting("Named type with empty name component");
        java.lang.String str11 = node5.getSourceFileName();
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative13 = null;
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec14 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("NUMBER -1.0", jSTypeNative13);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node16.isName();
        boolean boolean18 = node16.isSwitch();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node16.hasChild(node20);
        com.google.javascript.rhino.Node node22 = com.google.javascript.jscomp.NodeUtil.newExpr(node16);
        node16.setOptionalArg(true);
        node16.putBooleanProp((int) (short) -1, true);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean30 = node29.isName();
        boolean boolean31 = node29.isSwitch();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean34 = node29.hasChild(node33);
        com.google.javascript.rhino.Node node35 = com.google.javascript.jscomp.NodeUtil.newExpr(node29);
        boolean boolean36 = node35.isRegExp();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean39 = node38.isName();
        boolean boolean40 = node38.isSwitch();
        java.lang.String str41 = node38.toString();
        com.google.javascript.rhino.Node node42 = node35.useSourceInfoIfMissingFromForTree(node38);
        com.google.javascript.rhino.Node node43 = node16.useSourceInfoFromForTree(node35);
        com.google.javascript.rhino.Node node44 = assertionFunctionSpec14.getAssertedParam(node16);
        boolean boolean45 = node44.isQualifiedName();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder46 = node44.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node47 = node5.copyInformationFromForTree(node44);
        java.lang.Object obj49 = node47.getProp((int) (short) 1);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        boolean boolean52 = node51.isDelProp();
        node51.setCharno(2);
        boolean boolean55 = node51.isComma();
        boolean boolean56 = node51.isExprResult();
        node47.addChildrenToBack(node51);
        boolean boolean58 = node51.isParamList();
        boolean boolean59 = node51.isNull();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Named type with empty name component" + "'", str11, "Named type with empty name component");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "NUMBER -1.0" + "'", str41, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test09604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09604");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.hasParameter("hi!");
        boolean boolean4 = jSDocInfo0.containsDeclaration();
        java.lang.String str5 = jSDocInfo0.getOriginalCommentString();
        boolean boolean7 = jSDocInfo0.hasDescriptionForParameter("Not declared as a type name");
        int int8 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean9 = jSDocInfo0.hasModifies();
        java.lang.String str10 = jSDocInfo0.getOriginalCommentString();
        boolean boolean11 = jSDocInfo0.hasThisType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility12 = jSDocInfo0.getVisibility();
        boolean boolean13 = jSDocInfo0.isDefine();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(visibility12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test09605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09605");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.jstype.JSType jSType7 = null;
        node5.setJSType(jSType7);
        node5.setType(2);
        com.google.javascript.rhino.Node node11 = node5.getLastSibling();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean14 = node13.isName();
        boolean boolean15 = node13.isSwitch();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node13.hasChild(node17);
        com.google.javascript.rhino.jstype.JSType jSType19 = null;
        node17.setJSType(jSType19);
        node17.setType(2);
        com.google.javascript.rhino.Node node23 = node17.getLastSibling();
        boolean boolean24 = node17.isRegExp();
        boolean boolean25 = node17.isGetProp();
        int int26 = node11.getIndexOfChild(node17);
        boolean boolean27 = node17.isDec();
        int int28 = node17.getLength();
        boolean boolean29 = node17.isInstanceOf();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test09606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09606");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.jstype.JSType jSType7 = null;
        node5.setJSType(jSType7);
        node5.addSuppression("");
        boolean boolean11 = node5.isVarArgs();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test09607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09607");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isFunction();
        boolean boolean3 = node1.isUnscopedQualifiedName();
        boolean boolean4 = node1.isEmpty();
        boolean boolean5 = node1.isEmpty();
        boolean boolean6 = node1.isAssign();
        boolean boolean7 = node1.isScript();
        node1.setDouble((double) 15);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test09608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09608");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 10, 41, (int) (byte) 0);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node3.siblings();
        org.junit.Assert.assertNotNull(nodeIterable4);
    }

    @Test
    public void test09609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09609");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker0.getDescription();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition3 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition4 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition5 = marker0.getDescription();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition6 = marker0.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition7 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition8 = marker0.getDescription();
        org.junit.Assert.assertNull(typePosition1);
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(nodeSourcePosition3);
        org.junit.Assert.assertNull(stringPosition4);
        org.junit.Assert.assertNull(stringPosition5);
        org.junit.Assert.assertNull(nodeSourcePosition6);
        org.junit.Assert.assertNull(nodeSourcePosition7);
        org.junit.Assert.assertNull(stringPosition8);
    }

    @Test
    public void test09610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09610");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node8.isName();
        boolean boolean10 = node8.isSwitch();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node8.hasChild(node12);
        com.google.javascript.rhino.Node node14 = com.google.javascript.jscomp.NodeUtil.newExpr(node8);
        boolean boolean15 = node14.isRegExp();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node17.isName();
        boolean boolean19 = node17.isSwitch();
        java.lang.String str20 = node17.toString();
        com.google.javascript.rhino.Node node21 = node14.useSourceInfoIfMissingFromForTree(node17);
        boolean boolean22 = node5.isEquivalentToTyped(node17);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = null;
        node5.setStaticSourceFile(staticSourceFile23);
        int int25 = node5.getType();
        boolean boolean26 = node5.isThrow();
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet28 = jSDocInfo27.getParameterNames();
        boolean boolean30 = jSDocInfo27.hasParameter("hi!");
        boolean boolean31 = jSDocInfo27.hasThisType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList32 = jSDocInfo27.getThrownTypes();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList33 = jSDocInfo27.getImplementedInterfaces();
        java.lang.String str34 = jSDocInfo27.getLicense();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList35 = jSDocInfo27.getImplementedInterfaces();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList36 = jSDocInfo27.getImplementedInterfaces();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean39 = node38.isName();
        boolean boolean40 = node38.isSwitch();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean43 = node38.hasChild(node42);
        com.google.javascript.rhino.Node node44 = com.google.javascript.jscomp.NodeUtil.newExpr(node38);
        int int45 = node44.getType();
        jSDocInfo27.setAssociatedNode(node44);
        node44.setVarArgs(true);
        com.google.javascript.rhino.Node node49 = node5.useSourceInfoIfMissingFromForTree(node44);
        boolean boolean50 = node49.isSyntheticBlock();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "NUMBER -1.0" + "'", str20, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 39 + "'", int25 == 39);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList32);
        org.junit.Assert.assertNotNull(jSTypeExpressionList33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(jSTypeExpressionList35);
        org.junit.Assert.assertNotNull(jSTypeExpressionList36);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 130 + "'", int45 == 130);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test09611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09611");
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative1 = null;
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec2 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("NUMBER -1.0", jSTypeNative1);
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        boolean boolean6 = node4.isSwitch();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node4.hasChild(node8);
        com.google.javascript.rhino.Node node10 = com.google.javascript.jscomp.NodeUtil.newExpr(node4);
        node4.setOptionalArg(true);
        node4.putBooleanProp((int) (short) -1, true);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node17.isName();
        boolean boolean19 = node17.isSwitch();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node17.hasChild(node21);
        com.google.javascript.rhino.Node node23 = com.google.javascript.jscomp.NodeUtil.newExpr(node17);
        boolean boolean24 = node23.isRegExp();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node26.isName();
        boolean boolean28 = node26.isSwitch();
        java.lang.String str29 = node26.toString();
        com.google.javascript.rhino.Node node30 = node23.useSourceInfoIfMissingFromForTree(node26);
        com.google.javascript.rhino.Node node31 = node4.useSourceInfoFromForTree(node23);
        com.google.javascript.rhino.Node node32 = assertionFunctionSpec2.getAssertedParam(node4);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType33 = com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN;
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString(49, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n", (int) (short) 100, (int) (short) 100);
        boolean boolean39 = node38.isTry();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean42 = node41.isName();
        boolean boolean43 = node41.isSwitch();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean46 = node41.hasChild(node45);
        com.google.javascript.rhino.Node node47 = com.google.javascript.jscomp.NodeUtil.newExpr(node41);
        node41.setOptionalArg(true);
        node41.putBooleanProp((int) (short) -1, true);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean55 = node54.isName();
        boolean boolean56 = node54.isSwitch();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean59 = node54.hasChild(node58);
        com.google.javascript.rhino.Node node60 = com.google.javascript.jscomp.NodeUtil.newExpr(node54);
        boolean boolean61 = node60.isRegExp();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean64 = node63.isName();
        boolean boolean65 = node63.isSwitch();
        java.lang.String str66 = node63.toString();
        com.google.javascript.rhino.Node node67 = node60.useSourceInfoIfMissingFromForTree(node63);
        com.google.javascript.rhino.Node node68 = node41.useSourceInfoFromForTree(node60);
        boolean boolean69 = node60.isFor();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship70 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType33, node38, node60);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition71 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int72 = namePosition71.getPositionOnStartLine();
        int int73 = namePosition71.getStartLine();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean76 = node75.isName();
        boolean boolean77 = node75.isSwitch();
        java.lang.String str78 = node75.toString();
        boolean boolean79 = node75.isNumber();
        boolean boolean80 = node75.isComma();
        boolean boolean81 = node75.isDebugger();
        boolean boolean82 = node75.isWith();
        namePosition71.setItem(node75);
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean86 = node85.isName();
        boolean boolean87 = node85.isSwitch();
        com.google.javascript.rhino.Node node89 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean90 = node85.hasChild(node89);
        com.google.javascript.rhino.Node node91 = com.google.javascript.jscomp.NodeUtil.newExpr(node85);
        int int92 = node85.getLength();
        node85.addSuppression("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        java.lang.String str95 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(node85);
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship96 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType33, node75, node85);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry97 = null;
        com.google.javascript.rhino.jstype.JSType jSType98 = assertionFunctionSpec2.getAssertedType(node85, jSTypeRegistry97);
        int int99 = node85.getLength();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "NUMBER -1.0" + "'", str29, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + subclassType33 + "' != '" + com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN + "'", subclassType33.equals(com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN));
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "NUMBER -1.0" + "'", str66, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "NUMBER -1.0" + "'", str78, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNull(str95);
        org.junit.Assert.assertNull(jSType98);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test09612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09612");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getReferences();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection3 = jSDocInfo0.getMarkers();
        boolean boolean4 = jSDocInfo0.isConsistentIdGenerator();
        boolean boolean5 = jSDocInfo0.hasType();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection6 = jSDocInfo0.getTypeNodes();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertNotNull(markerCollection3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeCollection6);
    }

    @Test
    public void test09613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09613");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node2.hasChild(node6);
        boolean boolean8 = node2.isVar();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        java.lang.String str13 = node10.toString();
        boolean boolean14 = node10.isWith();
        com.google.javascript.rhino.Node node15 = node2.srcref(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node17.isName();
        boolean boolean19 = node17.isSwitch();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node17.hasChild(node21);
        com.google.javascript.rhino.Node node23 = com.google.javascript.jscomp.NodeUtil.newExpr(node17);
        boolean boolean24 = node23.isRegExp();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node26.isName();
        boolean boolean28 = node26.isSwitch();
        java.lang.String str29 = node26.toString();
        com.google.javascript.rhino.Node node30 = node23.useSourceInfoIfMissingFromForTree(node26);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean33 = node32.isName();
        boolean boolean34 = node32.isSwitch();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean37 = node32.hasChild(node36);
        com.google.javascript.rhino.jstype.JSType jSType38 = null;
        node36.setJSType(jSType38);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (byte) 0, node10, node26, node36, (int) (byte) 0, (int) '#');
        com.google.javascript.rhino.Node node43 = node42.getFirstChild();
        boolean boolean44 = node42.isTypeOf();
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList46 = jSDocInfo45.getExtendedInterfaces();
        java.lang.String str47 = jSDocInfo45.getVersion();
        boolean boolean48 = jSDocInfo45.isInterface();
        boolean boolean49 = jSDocInfo45.isJavaDispatch();
        java.lang.String str50 = jSDocInfo45.getSourceName();
        java.lang.String str51 = jSDocInfo45.getFileOverview();
        boolean boolean52 = jSDocInfo45.isExport();
        com.google.common.collect.ImmutableList<java.lang.String> strList53 = jSDocInfo45.getTemplateTypeNames();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList55 = jSDocInfo54.getExtendedInterfaces();
        java.lang.String str56 = jSDocInfo54.getVersion();
        boolean boolean57 = jSDocInfo54.isInterface();
        boolean boolean58 = jSDocInfo54.isJavaDispatch();
        boolean boolean59 = jSDocInfo54.isIdGenerator();
        com.google.javascript.rhino.Node node60 = jSDocInfo54.getAssociatedNode();
        boolean boolean61 = strList53.contains((java.lang.Object) jSDocInfo54);
        node42.setJSDocInfo(jSDocInfo54);
        boolean boolean63 = jSDocInfo54.isIdGenerator();
        boolean boolean64 = jSDocInfo54.isExpose();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "NUMBER -1.0" + "'", str13, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "NUMBER -1.0" + "'", str29, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertNotNull(jSTypeExpressionList55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test09614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09614");
        java.lang.Throwable throwable1 = null;
        java.io.IOException iOException2 = new java.io.IOException(throwable1);
        java.lang.Throwable throwable3 = null;
        java.io.IOException iOException4 = new java.io.IOException(throwable3);
        iOException2.addSuppressed((java.lang.Throwable) iOException4);
        java.io.IOException iOException6 = new java.io.IOException("hi!", (java.lang.Throwable) iOException2);
        java.io.IOException iOException7 = new java.io.IOException((java.lang.Throwable) iOException2);
        java.io.IOException iOException8 = new java.io.IOException((java.lang.Throwable) iOException7);
        java.lang.Throwable throwable9 = null;
        java.io.IOException iOException10 = new java.io.IOException(throwable9);
        java.io.IOException iOException11 = new java.io.IOException((java.lang.Throwable) iOException10);
        java.lang.Throwable[] throwableArray12 = iOException10.getSuppressed();
        java.lang.Throwable[] throwableArray13 = iOException10.getSuppressed();
        java.lang.Throwable throwable15 = null;
        java.io.IOException iOException16 = new java.io.IOException(throwable15);
        java.lang.Throwable throwable17 = null;
        java.io.IOException iOException18 = new java.io.IOException(throwable17);
        iOException16.addSuppressed((java.lang.Throwable) iOException18);
        java.io.IOException iOException20 = new java.io.IOException("hi!", (java.lang.Throwable) iOException16);
        java.io.IOException iOException21 = new java.io.IOException((java.lang.Throwable) iOException16);
        java.io.IOException iOException22 = new java.io.IOException((java.lang.Throwable) iOException21);
        java.io.IOException iOException24 = new java.io.IOException("java.io.IOException: hi!");
        java.io.IOException iOException25 = new java.io.IOException((java.lang.Throwable) iOException24);
        iOException21.addSuppressed((java.lang.Throwable) iOException24);
        iOException10.addSuppressed((java.lang.Throwable) iOException24);
        iOException7.addSuppressed((java.lang.Throwable) iOException10);
        java.io.IOException iOException29 = new java.io.IOException((java.lang.Throwable) iOException10);
        java.io.IOException iOException32 = new java.io.IOException("BITXOR 0\n");
        java.lang.Throwable[] throwableArray33 = iOException32.getSuppressed();
        java.lang.Throwable[] throwableArray34 = iOException32.getSuppressed();
        java.io.IOException iOException35 = new java.io.IOException("InputId: java.io.IOException", (java.lang.Throwable) iOException32);
        iOException10.addSuppressed((java.lang.Throwable) iOException35);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
    }

    @Test
    public void test09615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09615");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node2.hasChild(node6);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean10 = node9.isName();
        boolean boolean11 = node9.isSwitch();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean14 = node9.hasChild(node13);
        com.google.javascript.rhino.Node node15 = com.google.javascript.jscomp.NodeUtil.newExpr(node9);
        boolean boolean16 = node15.isRegExp();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean19 = node18.isName();
        boolean boolean20 = node18.isSwitch();
        java.lang.String str21 = node18.toString();
        com.google.javascript.rhino.Node node22 = node15.useSourceInfoIfMissingFromForTree(node18);
        boolean boolean23 = node6.isEquivalentToTyped(node18);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean26 = node25.isName();
        boolean boolean27 = node25.isSwitch();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean30 = node25.hasChild(node29);
        com.google.javascript.rhino.jstype.JSType jSType31 = null;
        node29.setJSType(jSType31);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(45, node6, node29, 10, 2);
        boolean boolean36 = node6.isLocalResultCall();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean40 = node39.isName();
        boolean boolean41 = node39.isSwitch();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean44 = node43.isFunction();
        boolean boolean45 = node43.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node46 = node39.useSourceInfoIfMissingFrom(node43);
        java.lang.Class<?> wildcardClass47 = node46.getClass();
        node6.putProp(53, (java.lang.Object) wildcardClass47);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder49 = node6.getJsDocBuilderForNode();
        node6.setWasEmptyNode(false);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "NUMBER -1.0" + "'", str21, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder49);
    }

    @Test
    public void test09616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09616");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        node1.setWasEmptyNode(true);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags5 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '#');
        sideEffectFlags5.setAllFlags();
        int int7 = sideEffectFlags5.valueOf();
        sideEffectFlags5.setThrows();
        int int9 = sideEffectFlags5.valueOf();
        int int10 = sideEffectFlags5.valueOf();
        sideEffectFlags5.clearSideEffectFlags();
        // The following exception was thrown during execution in test generation
        try {
            node1.setSideEffectFlags(sideEffectFlags5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test09617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09617");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        int int8 = node1.getLength();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        node1.setDirectives((java.util.Set<java.lang.String>) strSet12);
        java.lang.Object[] objArray15 = strSet12.toArray();
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        int int20 = strList18.size();
        boolean boolean21 = strSet12.containsAll((java.util.Collection<java.lang.String>) strList18);
        java.util.Spliterator<java.lang.String> strSpliterator22 = strSet12.spliterator();
        int int23 = strSet12.size();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean26 = node25.isName();
        boolean boolean27 = node25.isSwitch();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean30 = node25.hasChild(node29);
        boolean boolean31 = node25.isVar();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean34 = node33.isName();
        boolean boolean35 = node33.isSwitch();
        java.lang.String str36 = node33.toString();
        boolean boolean37 = node33.isWith();
        com.google.javascript.rhino.Node node38 = node25.srcref(node33);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean41 = node40.isName();
        boolean boolean42 = node40.isSwitch();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean45 = node40.hasChild(node44);
        com.google.javascript.rhino.jstype.JSType jSType46 = null;
        node44.setJSType(jSType46);
        node44.setType(2);
        int int50 = node38.getIndexOfChild(node44);
        boolean boolean51 = strSet12.remove((java.lang.Object) node44);
        int int52 = strSet12.size();
        java.util.Spliterator<java.lang.String> strSpliterator53 = strSet12.spliterator();
        strSet12.clear();
        com.google.javascript.rhino.JSDocInfo jSDocInfo55 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList56 = jSDocInfo55.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection57 = jSDocInfo55.getReferences();
        boolean boolean58 = jSDocInfo55.isJavaDispatch();
        boolean boolean59 = jSDocInfo55.containsDeclaration();
        boolean boolean60 = jSDocInfo55.hasEnumParameterType();
        com.google.common.collect.ImmutableList<java.lang.String> strList61 = jSDocInfo55.getTemplateTypeNames();
        java.util.Spliterator<java.lang.String> strSpliterator62 = strList61.spliterator();
        boolean boolean63 = strSet12.containsAll((java.util.Collection<java.lang.String>) strList61);
        java.io.IOException iOException65 = new java.io.IOException("java.io.IOException");
        java.lang.Throwable throwable67 = null;
        java.io.IOException iOException68 = new java.io.IOException(throwable67);
        java.io.IOException iOException69 = new java.io.IOException((java.lang.Throwable) iOException68);
        java.lang.Throwable[] throwableArray70 = iOException68.getSuppressed();
        java.io.IOException iOException71 = new java.io.IOException("NUMBER -1.0\n", (java.lang.Throwable) iOException68);
        iOException65.addSuppressed((java.lang.Throwable) iOException68);
        java.lang.Throwable[] throwableArray73 = iOException68.getSuppressed();
        java.lang.Throwable[] throwableArray74 = strSet12.toArray(throwableArray73);
        java.util.stream.Stream<java.lang.String> strStream75 = strSet12.parallelStream();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[hi!]");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strSpliterator22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "NUMBER -1.0" + "'", str36, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(strSpliterator53);
        org.junit.Assert.assertNotNull(jSTypeExpressionList56);
        org.junit.Assert.assertNull(strCollection57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertNotNull(strSpliterator62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(strStream75);
    }

    @Test
    public void test09618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09618");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (byte) 0);
        java.lang.String str2 = node1.getSourceFileName();
        node1.setIsSyntheticBlock(true);
        int int6 = node1.getIntProp(0);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test09619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09619");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isNoAlias();
        boolean boolean5 = jSDocInfo0.isDeprecated();
        java.lang.String str6 = jSDocInfo0.getDescription();
        boolean boolean7 = jSDocInfo0.isNoShadow();
        boolean boolean8 = jSDocInfo0.hasEnumParameterType();
        boolean boolean9 = jSDocInfo0.isHidden();
        boolean boolean10 = jSDocInfo0.shouldPreserveTry();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getThisType();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSTypeExpression11);
    }

    @Test
    public void test09620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09620");
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative1 = null;
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec2 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("", jSTypeNative1);
        java.lang.String str3 = assertionFunctionSpec2.getFunctionName();
        java.lang.String str4 = assertionFunctionSpec2.getFunctionName();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node6.isName();
        boolean boolean8 = node6.isSwitch();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node6.hasChild(node10);
        com.google.javascript.rhino.Node node12 = com.google.javascript.jscomp.NodeUtil.newExpr(node6);
        int int13 = node6.getLength();
        boolean boolean14 = node6.isNew();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node16.isName();
        boolean boolean18 = node16.isSwitch();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node16.hasChild(node20);
        com.google.javascript.rhino.Node node22 = com.google.javascript.jscomp.NodeUtil.newExpr(node16);
        int int23 = node16.getLength();
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        node16.setDirectives((java.util.Set<java.lang.String>) strSet27);
        boolean boolean31 = node16.getBooleanProp(41);
        com.google.javascript.rhino.Node node32 = node6.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = null;
        com.google.javascript.rhino.jstype.JSType jSType34 = assertionFunctionSpec2.getAssertedType(node6, jSTypeRegistry33);
        boolean boolean35 = node6.isFalse();
        java.lang.String str39 = node6.toString(false, true, true);
        boolean boolean40 = node6.isIn();
        com.google.javascript.rhino.Node node41 = node6.getLastSibling();
        boolean boolean42 = node41.isGetElem();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(jSType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "NUMBER -1.0" + "'", str39, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test09621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09621");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getReferences();
        boolean boolean3 = jSDocInfo0.isJavaDispatch();
        boolean boolean4 = jSDocInfo0.hasTypedefType();
        boolean boolean5 = jSDocInfo0.isNoTypeCheck();
        java.lang.String str6 = jSDocInfo0.getVersion();
        boolean boolean8 = jSDocInfo0.hasParameter("java.io.IOException: hi!");
        boolean boolean9 = jSDocInfo0.hasTypedefType();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo0.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet12 = jSDocInfo11.getParameterNames();
        boolean boolean14 = jSDocInfo11.hasParameter("hi!");
        boolean boolean15 = jSDocInfo11.hasThisType();
        java.util.Set<java.lang.String> strSet16 = jSDocInfo11.getModifies();
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList18 = jSDocInfo17.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection19 = jSDocInfo17.getReferences();
        boolean boolean20 = jSDocInfo17.isJavaDispatch();
        boolean boolean21 = jSDocInfo17.containsDeclaration();
        boolean boolean22 = jSDocInfo17.hasEnumParameterType();
        com.google.common.collect.ImmutableList<java.lang.String> strList23 = jSDocInfo17.getTemplateTypeNames();
        java.util.stream.Stream<java.lang.String> strStream24 = strList23.stream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList26 = jSDocInfo25.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection27 = jSDocInfo25.getReferences();
        boolean boolean28 = jSDocInfo25.isJavaDispatch();
        boolean boolean29 = jSDocInfo25.containsDeclaration();
        boolean boolean30 = jSDocInfo25.hasEnumParameterType();
        com.google.common.collect.ImmutableList<java.lang.String> strList31 = jSDocInfo25.getTemplateTypeNames();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean34 = node33.isName();
        boolean boolean35 = node33.isSwitch();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean38 = node33.hasChild(node37);
        com.google.javascript.rhino.Node node39 = com.google.javascript.jscomp.NodeUtil.newExpr(node33);
        boolean boolean40 = node39.isRegExp();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean43 = node42.isName();
        boolean boolean44 = node42.isSwitch();
        java.lang.String str45 = node42.toString();
        com.google.javascript.rhino.Node node46 = node39.useSourceInfoIfMissingFromForTree(node42);
        com.google.javascript.rhino.jstype.JSType jSType47 = null;
        node42.setJSType(jSType47);
        boolean boolean49 = node42.isBlock();
        boolean boolean50 = strList31.equals((java.lang.Object) boolean49);
        java.util.RandomAccess[] randomAccessArray51 = new java.util.RandomAccess[] { strList23, strList31 };
        java.util.RandomAccess[] randomAccessArray52 = strSet16.toArray(randomAccessArray51);
        boolean boolean53 = strSet16.isEmpty();
        boolean boolean54 = strSet10.addAll((java.util.Collection<java.lang.String>) strSet16);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean57 = node56.isName();
        boolean boolean58 = node56.isSwitch();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean61 = node56.hasChild(node60);
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        node60.setJSType(jSType62);
        node60.setType(2);
        com.google.javascript.rhino.Node node66 = node60.getLastSibling();
        boolean boolean67 = node66.isQuotedString();
        java.lang.String str68 = node66.getSourceFileName();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean71 = node70.isName();
        boolean boolean72 = node70.isSwitch();
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean75 = node70.hasChild(node74);
        com.google.javascript.rhino.Node node76 = com.google.javascript.jscomp.NodeUtil.newExpr(node70);
        boolean boolean77 = node76.isInstanceOf();
        com.google.javascript.rhino.InputId inputId78 = com.google.javascript.jscomp.NodeUtil.getInputId(node76);
        node66.addChildToBack(node76);
        boolean boolean80 = node76.isDelProp();
        boolean boolean81 = strSet16.equals((java.lang.Object) boolean80);
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(jSTypeExpressionList18);
        org.junit.Assert.assertNull(strCollection19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(strStream24);
        org.junit.Assert.assertNotNull(jSTypeExpressionList26);
        org.junit.Assert.assertNull(strCollection27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "NUMBER -1.0" + "'", str45, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(randomAccessArray51);
        org.junit.Assert.assertNotNull(randomAccessArray52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(inputId78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test09622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09622");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("Unknown class name");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean4 = node3.isName();
        boolean boolean5 = node3.isSwitch();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node3.hasChild(node7);
        com.google.javascript.rhino.jstype.JSType jSType9 = null;
        node7.setJSType(jSType9);
        node7.setType(2);
        com.google.javascript.rhino.Node node13 = node7.getLastSibling();
        com.google.javascript.rhino.InputId inputId14 = com.google.javascript.jscomp.NodeUtil.getInputId(node7);
        boolean boolean15 = node1.isEquivalentTo(node7);
        java.util.Set<java.lang.String> strSet16 = node7.getDirectives();
        int int17 = node7.getSourcePosition();
        boolean boolean18 = node7.hasOneChild();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(inputId14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test09623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09623");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition1 = marker0.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition2 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = marker0.getDescription();
        org.junit.Assert.assertNull(nodeSourcePosition1);
        org.junit.Assert.assertNull(nodeSourcePosition2);
        org.junit.Assert.assertNull(stringPosition3);
    }

    @Test
    public void test09624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09624");
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec1 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("java.io.IOException: BITXOR 0\n");
        java.lang.String str2 = assertionFunctionSpec1.getFunctionName();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.io.IOException: BITXOR 0\n" + "'", str2, "java.io.IOException: BITXOR 0\n");
    }

    @Test
    public void test09625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09625");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(29, 0, 4095);
        boolean boolean4 = node3.wasEmptyNode();
        node3.removeProp(15);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node8.isName();
        boolean boolean10 = node8.isSwitch();
        java.lang.String str11 = node8.toString();
        boolean boolean12 = node8.isWith();
        boolean boolean13 = node8.isBreak();
        node8.setLength(130);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node17.isName();
        boolean boolean19 = node17.isSwitch();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node17.hasChild(node21);
        com.google.javascript.rhino.Node node23 = com.google.javascript.jscomp.NodeUtil.newExpr(node17);
        int int24 = node17.getLength();
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node17.setDirectives((java.util.Set<java.lang.String>) strSet28);
        boolean boolean32 = strSet28.add("");
        java.util.Spliterator<java.lang.String> strSpliterator33 = strSet28.spliterator();
        node8.setDirectives((java.util.Set<java.lang.String>) strSet28);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("BITXOR 0\n", 4095, (int) (byte) 100);
        boolean boolean39 = node38.isSwitch();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean42 = node41.isFunction();
        com.google.javascript.rhino.Node node43 = node41.cloneTree();
        boolean boolean44 = node41.isAnd();
        java.lang.String str45 = node38.checkTreeEquals(node41);
        node38.setSourceFileForTesting("java.io.IOException: Unknown class name");
        node8.addChildToFront(node38);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        int int53 = strList51.size();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility54 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        boolean boolean55 = strList51.remove((java.lang.Object) visibility54);
        java.util.Spliterator<java.lang.String> strSpliterator56 = strList51.spliterator();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean59 = node58.isName();
        boolean boolean60 = node58.isSwitch();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean63 = node58.hasChild(node62);
        com.google.javascript.rhino.Node node64 = com.google.javascript.jscomp.NodeUtil.newExpr(node58);
        int int65 = node58.getLength();
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet69 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet69, strArray68);
        node58.setDirectives((java.util.Set<java.lang.String>) strSet69);
        java.lang.Object[] objArray72 = strSet69.toArray();
        java.lang.String[] strArray74 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList75 = new java.util.ArrayList<java.lang.String>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList75, strArray74);
        int int77 = strList75.size();
        boolean boolean78 = strSet69.containsAll((java.util.Collection<java.lang.String>) strList75);
        java.util.Spliterator<java.lang.String> strSpliterator79 = strSet69.spliterator();
        boolean boolean80 = strList51.containsAll((java.util.Collection<java.lang.String>) strSet69);
        int int81 = strSet69.size();
        com.google.javascript.rhino.Node node86 = com.google.javascript.rhino.Node.newString(0, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n", 4, 4095);
        com.google.javascript.rhino.Node node88 = new com.google.javascript.rhino.Node(46);
        node86.addChildrenToFront(node88);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable90 = node86.children();
        boolean boolean91 = strSet69.remove((java.lang.Object) node86);
        boolean boolean92 = node86.isArrayLit();
        com.google.javascript.rhino.Node node93 = node8.useSourceInfoFromForTree(node86);
        boolean boolean94 = node8.isDec();
        com.google.javascript.rhino.Node node95 = node3.copyInformationFromForTree(node8);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "NUMBER -1.0" + "'", str11, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strSpliterator33);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Node tree inequality:\nTree1:\nSTRING BITXOR 0\n 4095\n\n\nTree2:\nNUMBER -1.0\n\n\nSubtree1: STRING BITXOR 0\n 4095\n\n\nSubtree2: NUMBER -1.0\n" + "'", str45, "Node tree inequality:\nTree1:\nSTRING BITXOR 0\n 4095\n\n\nTree2:\nNUMBER -1.0\n\n\nSubtree1: STRING BITXOR 0\n 4095\n\n\nSubtree2: NUMBER -1.0\n");
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + visibility54 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility54.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strSpliterator56);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[hi!]");
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(strSpliterator79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNotNull(nodeIterable90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(node95);
    }

    @Test
    public void test09626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09626");
        com.google.javascript.rhino.InputId inputId1 = new com.google.javascript.rhino.InputId("");
        java.lang.String str2 = inputId1.getIdName();
        java.lang.String str3 = inputId1.getIdName();
        java.lang.String str4 = inputId1.toString();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node6.isName();
        boolean boolean8 = node6.isSwitch();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node6.hasChild(node10);
        java.lang.String str12 = com.google.javascript.jscomp.NodeUtil.getSourceName(node6);
        node6.setSourceFileForTesting("hi!");
        boolean boolean15 = inputId1.equals((java.lang.Object) node6);
        java.lang.String str16 = com.google.javascript.jscomp.NodeUtil.getSourceName(node6);
        boolean boolean17 = node6.isGetElem();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "InputId: " + "'", str4, "InputId: ");
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test09627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09627");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        node1.setSourceEncodedPosition(130);
        boolean boolean10 = node1.isAdd();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.JSDocInfo jSDocInfo11 = com.google.javascript.jscomp.NodeUtil.getFunctionJSDocInfo(node1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test09628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09628");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(27);
        boolean boolean2 = node1.isFromExterns();
        boolean boolean3 = node1.isLabel();
        node1.setCharno(38);
        boolean boolean6 = node1.isExprResult();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test09629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09629");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getReferences();
        com.google.common.collect.ImmutableList<java.lang.String> strList3 = jSDocInfo0.getTemplateTypeNames();
        java.util.Set<java.lang.String> strSet4 = jSDocInfo0.getSuppressions();
        boolean boolean5 = jSDocInfo0.hasModifies();
        int int6 = jSDocInfo0.getImplementedInterfaceCount();
        java.lang.String str7 = jSDocInfo0.getDescription();
        java.util.Collection<java.lang.String> strCollection8 = jSDocInfo0.getReferences();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(strCollection8);
    }

    @Test
    public void test09630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09630");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        boolean boolean6 = jSDocInfo0.isConstant();
        boolean boolean7 = jSDocInfo0.hasBaseType();
        boolean boolean8 = jSDocInfo0.hasReturnType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getEnumParameterType();
        java.lang.String str10 = jSDocInfo0.getDeprecationReason();
        boolean boolean11 = jSDocInfo0.isConstant();
        java.util.Set<java.lang.String> strSet12 = jSDocInfo0.getParameterNames();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strSet12);
    }

    @Test
    public void test09631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09631");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        boolean boolean6 = node4.isSwitch();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node4.hasChild(node8);
        com.google.javascript.rhino.Node node10 = com.google.javascript.jscomp.NodeUtil.newExpr(node4);
        boolean boolean11 = node10.isRegExp();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean14 = node13.isName();
        boolean boolean15 = node13.isSwitch();
        java.lang.String str16 = node13.toString();
        com.google.javascript.rhino.Node node17 = node10.useSourceInfoIfMissingFromForTree(node13);
        java.lang.String str18 = node1.checkTreeEquals(node17);
        boolean boolean19 = node1.isScript();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection20 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node1);
        boolean boolean21 = node1.isTrue();
        boolean boolean22 = node1.isWhile();
        boolean boolean23 = node1.isWith();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean26 = node25.isName();
        boolean boolean27 = node25.isSwitch();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean30 = node25.hasChild(node29);
        com.google.javascript.rhino.jstype.JSType jSType31 = null;
        node29.setJSType(jSType31);
        com.google.javascript.rhino.InputId inputId33 = com.google.javascript.jscomp.NodeUtil.getInputId(node29);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean36 = node35.isName();
        boolean boolean37 = node35.isSwitch();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean40 = node35.hasChild(node39);
        com.google.javascript.rhino.Node node41 = com.google.javascript.jscomp.NodeUtil.newExpr(node35);
        int int42 = node35.getLength();
        boolean boolean43 = node35.isNew();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean46 = node45.isName();
        boolean boolean47 = node45.isSwitch();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean50 = node45.hasChild(node49);
        com.google.javascript.rhino.Node node51 = com.google.javascript.jscomp.NodeUtil.newExpr(node45);
        int int52 = node45.getLength();
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet56 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet56, strArray55);
        node45.setDirectives((java.util.Set<java.lang.String>) strSet56);
        boolean boolean60 = node45.getBooleanProp(41);
        com.google.javascript.rhino.Node node61 = node35.useSourceInfoFromForTree(node45);
        boolean boolean62 = node45.isGetElem();
        com.google.javascript.rhino.Node node63 = node29.useSourceInfoFrom(node45);
        boolean boolean64 = node29.isGetterDef();
        int int65 = node29.getSideEffectFlags();
        com.google.javascript.rhino.Node node66 = com.google.javascript.jscomp.NodeUtil.newExpr(node29);
        boolean boolean67 = node29.hasChildren();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean70 = node69.isFunction();
        node69.putIntProp((int) (byte) 100, (int) (short) 1);
        int int74 = node29.getIndexOfChild(node69);
        com.google.javascript.rhino.jstype.JSType jSType75 = node29.getJSType();
        node29.setOptionalArg(false);
        java.util.Set<java.lang.String> strSet78 = node29.getDirectives();
        com.google.javascript.rhino.Node node79 = node1.clonePropsFrom(node29);
        boolean boolean80 = node79.isOnlyModifiesThisCall();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "NUMBER -1.0" + "'", str16, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n" + "'", str18, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeCollection20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(inputId33);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNull(jSType75);
        org.junit.Assert.assertNull(strSet78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test09632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09632");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        java.lang.String str4 = jSDocInfo0.getLendsName();
        java.lang.String str5 = jSDocInfo0.getOriginalCommentString();
        boolean boolean6 = jSDocInfo0.isExport();
        java.lang.String str7 = jSDocInfo0.getFileOverview();
        boolean boolean8 = jSDocInfo0.isNoShadow();
        boolean boolean9 = jSDocInfo0.isHidden();
        boolean boolean10 = jSDocInfo0.isExport();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility11 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        jSDocInfo0.setVisibility(visibility11);
        java.lang.String str13 = jSDocInfo0.getDeprecationReason();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + visibility11 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility11.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test09633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09633");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(16, 97, 0);
        com.google.javascript.rhino.Node node4 = node3.getParent();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node6.isName();
        boolean boolean8 = node6.isSwitch();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node6.hasChild(node10);
        boolean boolean12 = node6.isVar();
        node6.setWasEmptyNode(false);
        boolean boolean15 = node6.isFalse();
        boolean boolean16 = node6.isArrayLit();
        java.lang.String str17 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(node6);
        java.lang.String str18 = com.google.javascript.jscomp.NodeUtil.getSourceName(node6);
        // The following exception was thrown during execution in test generation
        try {
            node4.removeChild(node6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test09634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09634");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        node1.setWasEmptyNode(true);
        boolean boolean4 = node1.isOr();
        boolean boolean5 = node1.isRegExp();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node7.isName();
        boolean boolean9 = node7.isSwitch();
        java.lang.String str10 = node7.toString();
        boolean boolean11 = node7.isNumber();
        boolean boolean12 = node7.isComma();
        boolean boolean13 = node7.isDebugger();
        boolean boolean14 = node7.isOptionalArg();
        com.google.javascript.rhino.jstype.JSType jSType15 = node7.getJSType();
        boolean boolean16 = node7.isEmpty();
        com.google.javascript.rhino.Node node17 = node1.useSourceInfoIfMissingFrom(node7);
        java.lang.String str18 = com.google.javascript.jscomp.NodeUtil.getSourceName(node1);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node20.isName();
        boolean boolean22 = node20.isSwitch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node20.hasChild(node24);
        com.google.javascript.rhino.Node node26 = com.google.javascript.jscomp.NodeUtil.newExpr(node20);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean29 = node28.isName();
        boolean boolean30 = node28.isSwitch();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean33 = node28.hasChild(node32);
        com.google.javascript.rhino.Node node34 = com.google.javascript.jscomp.NodeUtil.newExpr(node28);
        node28.setOptionalArg(true);
        node28.putBooleanProp((int) (short) -1, true);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean42 = node41.isName();
        boolean boolean43 = node41.isSwitch();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean46 = node41.hasChild(node45);
        com.google.javascript.rhino.Node node47 = com.google.javascript.jscomp.NodeUtil.newExpr(node41);
        boolean boolean48 = node47.isRegExp();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean51 = node50.isName();
        boolean boolean52 = node50.isSwitch();
        java.lang.String str53 = node50.toString();
        com.google.javascript.rhino.Node node54 = node47.useSourceInfoIfMissingFromForTree(node50);
        com.google.javascript.rhino.Node node55 = node28.useSourceInfoFromForTree(node47);
        boolean boolean56 = node26.hasChild(node28);
        node26.setIsSyntheticBlock(true);
        com.google.javascript.rhino.JSDocInfo jSDocInfo60 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet61 = jSDocInfo60.getParameterNames();
        node26.putProp(45, (java.lang.Object) jSDocInfo60);
        boolean boolean63 = node26.isHook();
        boolean boolean64 = node26.isNoSideEffectsCall();
        boolean boolean65 = node1.hasChild(node26);
        boolean boolean66 = node26.isWith();
        boolean boolean67 = node26.isVarArgs();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER -1.0" + "'", str10, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "NUMBER -1.0" + "'", str53, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test09635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09635");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getReferences();
        com.google.common.collect.ImmutableList<java.lang.String> strList3 = jSDocInfo0.getTemplateTypeNames();
        java.lang.String str4 = jSDocInfo0.toString();
        com.google.common.collect.ImmutableList<java.lang.String> strList5 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean6 = jSDocInfo0.shouldPreserveTry();
        boolean boolean7 = jSDocInfo0.hasBaseType();
        java.lang.String str8 = jSDocInfo0.getDeprecationReason();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JSDocInfo" + "'", str4, "JSDocInfo");
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test09636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09636");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        java.lang.String str4 = node1.toString();
        boolean boolean5 = node1.isNumber();
        boolean boolean6 = node1.isComma();
        boolean boolean7 = node1.isDebugger();
        boolean boolean8 = node1.isWith();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node10.hasChild(node14);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node17.isName();
        boolean boolean19 = node17.isSwitch();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node17.hasChild(node21);
        com.google.javascript.rhino.Node node23 = com.google.javascript.jscomp.NodeUtil.newExpr(node17);
        int int24 = node17.getLength();
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node17.setDirectives((java.util.Set<java.lang.String>) strSet28);
        java.lang.String str31 = node14.checkTreeEquals(node17);
        node14.setSourceEncodedPosition((int) 'a');
        com.google.javascript.rhino.jstype.JSType jSType34 = node14.getJSType();
        com.google.javascript.rhino.Node node35 = node1.copyInformationFrom(node14);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean39 = node38.isFunction();
        boolean boolean40 = node38.isUnscopedQualifiedName();
        boolean boolean41 = node38.isEmpty();
        boolean boolean42 = node38.isEmpty();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean45 = node44.isName();
        boolean boolean46 = node44.isSwitch();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean49 = node44.hasChild(node48);
        boolean boolean50 = node44.isVar();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean53 = node52.isName();
        boolean boolean54 = node52.isSwitch();
        java.lang.String str55 = node52.toString();
        boolean boolean56 = node52.isWith();
        com.google.javascript.rhino.Node node57 = node44.srcref(node52);
        node44.detachChildren();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        com.google.javascript.jscomp.CodingConvention.Bind bind61 = new com.google.javascript.jscomp.CodingConvention.Bind(node38, node44, node60);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node((int) (byte) 10, 100, 12);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean68 = node67.isName();
        boolean boolean69 = node67.isSwitch();
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean72 = node67.hasChild(node71);
        boolean boolean73 = node67.isComma();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean76 = node75.isName();
        boolean boolean77 = node75.isSwitch();
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean80 = node75.hasChild(node79);
        com.google.javascript.rhino.Node node81 = com.google.javascript.jscomp.NodeUtil.newExpr(node75);
        boolean boolean82 = node81.isRegExp();
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean85 = node84.isName();
        boolean boolean86 = node84.isSwitch();
        java.lang.String str87 = node84.toString();
        com.google.javascript.rhino.Node node88 = node81.useSourceInfoIfMissingFromForTree(node84);
        com.google.javascript.rhino.jstype.JSType jSType89 = null;
        node84.setJSType(jSType89);
        boolean boolean91 = node84.isBlock();
        com.google.javascript.rhino.Node node94 = new com.google.javascript.rhino.Node((int) (byte) -1, node38, node65, node67, node84, 10, (int) (short) 10);
        boolean boolean95 = node38.hasChildren();
        com.google.javascript.rhino.Node node96 = node14.useSourceInfoFrom(node38);
        boolean boolean97 = node14.isEmpty();
        boolean boolean98 = node14.isNumber();
        java.util.Set<java.lang.String> strSet99 = node14.getDirectives();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER -1.0" + "'", str4, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(jSType34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "NUMBER -1.0" + "'", str55, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "NUMBER -1.0" + "'", str87, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(node96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertNull(strSet99);
    }

    @Test
    public void test09637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09637");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN;
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(49, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n", (int) (short) 100, (int) (short) 100);
        boolean boolean6 = node5.isTry();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node8.isName();
        boolean boolean10 = node8.isSwitch();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node8.hasChild(node12);
        com.google.javascript.rhino.Node node14 = com.google.javascript.jscomp.NodeUtil.newExpr(node8);
        node8.setOptionalArg(true);
        node8.putBooleanProp((int) (short) -1, true);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node21.isName();
        boolean boolean23 = node21.isSwitch();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean26 = node21.hasChild(node25);
        com.google.javascript.rhino.Node node27 = com.google.javascript.jscomp.NodeUtil.newExpr(node21);
        boolean boolean28 = node27.isRegExp();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean31 = node30.isName();
        boolean boolean32 = node30.isSwitch();
        java.lang.String str33 = node30.toString();
        com.google.javascript.rhino.Node node34 = node27.useSourceInfoIfMissingFromForTree(node30);
        com.google.javascript.rhino.Node node35 = node8.useSourceInfoFromForTree(node27);
        boolean boolean36 = node27.isFor();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node5, node27);
        boolean boolean38 = node5.isScript();
        java.lang.String str39 = node5.getString();
        node5.putBooleanProp(37, true);
        org.junit.Assert.assertTrue("'" + subclassType0 + "' != '" + com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN + "'", subclassType0.equals(com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "NUMBER -1.0" + "'", str33, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n" + "'", str39, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
    }

    @Test
    public void test09638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09638");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        java.lang.String str4 = node1.toString();
        boolean boolean5 = node1.isVar();
        java.lang.String str6 = node1.getQualifiedName();
        com.google.javascript.rhino.InputId inputId7 = com.google.javascript.jscomp.NodeUtil.getInputId(node1);
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList10 = jSDocInfo9.getExtendedInterfaces();
        java.lang.String str11 = jSDocInfo9.getVersion();
        boolean boolean12 = jSDocInfo9.isInterface();
        boolean boolean13 = jSDocInfo9.isJavaDispatch();
        java.lang.String str14 = jSDocInfo9.getSourceName();
        java.lang.String str15 = jSDocInfo9.getFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = jSDocInfo9.getThisType();
        boolean boolean17 = jSDocInfo9.hasModifies();
        java.lang.String str18 = jSDocInfo9.getLendsName();
        boolean boolean19 = jSDocInfo9.shouldPreserveTry();
        boolean boolean20 = jSDocInfo9.isNoCompile();
        com.google.common.collect.ImmutableList<java.lang.String> strList21 = jSDocInfo9.getTemplateTypeNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo9.getReturnType();
        node1.putProp(54, (java.lang.Object) jSDocInfo9);
        com.google.javascript.rhino.jstype.JSType jSType24 = null;
        node1.setJSType(jSType24);
        boolean boolean26 = node1.isStringKey();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER -1.0" + "'", str4, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(inputId7);
        org.junit.Assert.assertNotNull(jSTypeExpressionList10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(jSTypeExpression16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test09639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09639");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        java.lang.String str4 = node1.toString();
        boolean boolean5 = node1.isNumber();
        boolean boolean6 = node1.isComma();
        boolean boolean7 = node1.isDebugger();
        boolean boolean8 = node1.isWith();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node10.hasChild(node14);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node17.isName();
        boolean boolean19 = node17.isSwitch();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node17.hasChild(node21);
        com.google.javascript.rhino.Node node23 = com.google.javascript.jscomp.NodeUtil.newExpr(node17);
        int int24 = node17.getLength();
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node17.setDirectives((java.util.Set<java.lang.String>) strSet28);
        java.lang.String str31 = node14.checkTreeEquals(node17);
        node14.setSourceEncodedPosition((int) 'a');
        com.google.javascript.rhino.jstype.JSType jSType34 = node14.getJSType();
        com.google.javascript.rhino.Node node35 = node1.copyInformationFrom(node14);
        boolean boolean36 = node1.isIn();
        com.google.javascript.rhino.Node node37 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        int int38 = node1.getType();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER -1.0" + "'", str4, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(jSType34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 39 + "'", int38 == 39);
    }

    @Test
    public void test09640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09640");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getEndLine();
        int int2 = stringPosition0.getStartLine();
        int int3 = stringPosition0.getEndLine();
        stringPosition0.setPositionInformation((int) (byte) 0, 37, 48, 37);
        java.lang.String str9 = stringPosition0.getItem();
        int int10 = stringPosition0.getPositionOnStartLine();
        stringPosition0.setPositionInformation(0, 43, 16, (int) (short) 0);
        int int16 = stringPosition0.getPositionOnEndLine();
        int int17 = stringPosition0.getStartLine();
        java.lang.String str18 = stringPosition0.getItem();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 37 + "'", int10 == 37);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test09641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09641");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(0, "java.io.IOException: java.io.IOException: NUMBER -1.0", 100, 49);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable5 = node4.getAncestors();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(ancestorIterable5);
    }

    @Test
    public void test09642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09642");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        boolean boolean8 = node7.isRegExp();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        java.lang.String str13 = node10.toString();
        com.google.javascript.rhino.Node node14 = node7.useSourceInfoIfMissingFromForTree(node10);
        com.google.javascript.rhino.jstype.JSType jSType15 = null;
        node10.setJSType(jSType15);
        boolean boolean17 = node10.isGetterDef();
        boolean boolean18 = node10.isNoSideEffectsCall();
        node10.removeProp((int) (short) 100);
        boolean boolean21 = node10.isFunction();
        boolean boolean22 = node10.isStringKey();
        node10.setOptionalArg(true);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "NUMBER -1.0" + "'", str13, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test09643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09643");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        java.lang.String str6 = jSDocInfo0.getFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getThisType();
        boolean boolean8 = jSDocInfo0.hasModifies();
        java.lang.String str9 = jSDocInfo0.getLendsName();
        boolean boolean10 = jSDocInfo0.isExport();
        boolean boolean12 = jSDocInfo0.hasDescriptionForParameter("JSDocInfo");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression13 = jSDocInfo0.getType();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(jSTypeExpression13);
    }

    @Test
    public void test09644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09644");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.jstype.JSType jSType7 = null;
        node5.setJSType(jSType7);
        com.google.javascript.rhino.InputId inputId9 = com.google.javascript.jscomp.NodeUtil.getInputId(node5);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node11.isName();
        boolean boolean13 = node11.isSwitch();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean16 = node11.hasChild(node15);
        com.google.javascript.rhino.Node node17 = com.google.javascript.jscomp.NodeUtil.newExpr(node11);
        int int18 = node11.getLength();
        boolean boolean19 = node11.isNew();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node21.isName();
        boolean boolean23 = node21.isSwitch();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean26 = node21.hasChild(node25);
        com.google.javascript.rhino.Node node27 = com.google.javascript.jscomp.NodeUtil.newExpr(node21);
        int int28 = node21.getLength();
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet32 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet32, strArray31);
        node21.setDirectives((java.util.Set<java.lang.String>) strSet32);
        boolean boolean36 = node21.getBooleanProp(41);
        com.google.javascript.rhino.Node node37 = node11.useSourceInfoFromForTree(node21);
        boolean boolean38 = node21.isGetElem();
        com.google.javascript.rhino.Node node39 = node5.useSourceInfoFrom(node21);
        com.google.javascript.rhino.jstype.JSType jSType40 = node21.getJSType();
        boolean boolean41 = node21.isParamList();
        boolean boolean42 = node21.isDebugger();
        com.google.javascript.rhino.Node node43 = null;
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean46 = node45.isName();
        boolean boolean47 = node45.isSwitch();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean50 = node45.hasChild(node49);
        boolean boolean51 = node49.isGetElem();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection52 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node49);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        int int58 = node57.getChildCount();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean61 = node60.isName();
        boolean boolean62 = node60.isSwitch();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean65 = node60.hasChild(node64);
        boolean boolean66 = node60.isVar();
        com.google.javascript.rhino.Node node67 = node60.getParent();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean70 = node69.isName();
        boolean boolean71 = node69.isSwitch();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean74 = node69.hasChild(node73);
        boolean boolean75 = node69.isVar();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean78 = node77.isName();
        boolean boolean79 = node77.isSwitch();
        java.lang.String str80 = node77.toString();
        boolean boolean81 = node77.isWith();
        com.google.javascript.rhino.Node node82 = node69.srcref(node77);
        com.google.javascript.rhino.Node node86 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        com.google.javascript.rhino.Node node89 = new com.google.javascript.rhino.Node(130, node57, node60, node77, node86, 0, 15);
        java.lang.String str90 = node49.checkTreeEquals(node57);
        com.google.javascript.rhino.Node node91 = node57.getLastSibling();
        boolean boolean92 = node57.isContinue();
        boolean boolean93 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node57);
        java.lang.String str94 = node57.toStringTree();
        // The following exception was thrown during execution in test generation
        try {
            node21.addChildrenAfter(node43, node57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(inputId9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(jSType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(nodeCollection52);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "NUMBER -1.0" + "'", str80, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n" + "'", str90, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "NUMBER 100.0 100\n" + "'", str94, "NUMBER 100.0 100\n");
    }

    @Test
    public void test09645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09645");
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative1 = null;
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec2 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("", jSTypeNative1);
        com.google.javascript.rhino.Node node3 = null;
        com.google.javascript.rhino.Node node4 = assertionFunctionSpec2.getAssertedParam(node3);
        java.lang.String str5 = assertionFunctionSpec2.getFunctionName();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node7.isName();
        boolean boolean9 = node7.isSwitch();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node7.hasChild(node11);
        com.google.javascript.rhino.jstype.JSType jSType13 = null;
        node11.setJSType(jSType13);
        node11.setType(2);
        com.google.javascript.rhino.Node node17 = node11.getLastSibling();
        com.google.javascript.rhino.Node node18 = assertionFunctionSpec2.getAssertedParam(node17);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node20.isName();
        boolean boolean22 = node20.isSwitch();
        java.lang.String str23 = node20.toString();
        boolean boolean24 = node20.isWith();
        int int26 = node20.getIntProp((int) ' ');
        boolean boolean27 = node20.isNE();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean30 = node29.isName();
        boolean boolean31 = node29.isSwitch();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean34 = node29.hasChild(node33);
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        node33.setJSType(jSType35);
        node33.setType(2);
        com.google.javascript.rhino.Node node39 = node33.getLastSibling();
        com.google.javascript.rhino.Node node40 = node20.srcref(node39);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = null;
        com.google.javascript.rhino.jstype.JSType jSType42 = assertionFunctionSpec2.getAssertedType(node40, jSTypeRegistry41);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean48 = node47.isName();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean51 = node50.isName();
        boolean boolean52 = node50.isSwitch();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (byte) 100, node45, node47, node50);
        java.lang.String str54 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(node45);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        boolean boolean57 = node56.isDelProp();
        boolean boolean58 = node56.wasEmptyNode();
        com.google.javascript.rhino.jstype.JSType jSType59 = node56.getJSType();
        node45.addChildToFront(node56);
        com.google.javascript.rhino.Node node61 = assertionFunctionSpec2.getAssertedParam(node45);
        node45.setSourceEncodedPositionForTree(49);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "NUMBER -1.0" + "'", str23, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(jSType42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(jSType59);
        org.junit.Assert.assertNotNull(node61);
    }

    @Test
    public void test09646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09646");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int1 = namePosition0.getPositionOnStartLine();
        int int2 = namePosition0.getPositionOnStartLine();
        int int3 = namePosition0.getPositionOnEndLine();
        int int4 = namePosition0.getPositionOnStartLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test09647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09647");
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative1 = null;
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec2 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("", jSTypeNative1);
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        double double6 = node4.getDouble();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = null;
        com.google.javascript.rhino.jstype.JSType jSType8 = assertionFunctionSpec2.getAssertedType(node4, jSTypeRegistry7);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node10.hasChild(node14);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node17.isName();
        boolean boolean19 = node17.isSwitch();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node17.hasChild(node21);
        com.google.javascript.rhino.Node node23 = com.google.javascript.jscomp.NodeUtil.newExpr(node17);
        boolean boolean24 = node23.isRegExp();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node26.isName();
        boolean boolean28 = node26.isSwitch();
        java.lang.String str29 = node26.toString();
        com.google.javascript.rhino.Node node30 = node23.useSourceInfoIfMissingFromForTree(node26);
        boolean boolean31 = node14.isEquivalentToTyped(node26);
        com.google.javascript.rhino.InputId inputId32 = null;
        node26.setInputId(inputId32);
        com.google.javascript.rhino.Node node34 = assertionFunctionSpec2.getAssertedParam(node26);
        boolean boolean35 = node34.isDelProp();
        boolean boolean36 = node34.isBreak();
        com.google.javascript.rhino.JSDocInfo jSDocInfo37 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet38 = jSDocInfo37.getParameterNames();
        boolean boolean40 = jSDocInfo37.hasParameter("hi!");
        boolean boolean41 = jSDocInfo37.hasThisType();
        boolean boolean42 = jSDocInfo37.isIdGenerator();
        jSDocInfo37.setLicense("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        boolean boolean45 = jSDocInfo37.isOverride();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean48 = node47.isName();
        boolean boolean49 = node47.isSwitch();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean52 = node47.hasChild(node51);
        com.google.javascript.rhino.Node node53 = com.google.javascript.jscomp.NodeUtil.newExpr(node47);
        boolean boolean54 = node53.isRegExp();
        jSDocInfo37.setAssociatedNode(node53);
        boolean boolean57 = jSDocInfo37.hasParameter("Not declared as a type name");
        java.lang.String str58 = jSDocInfo37.getDeprecationReason();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection59 = jSDocInfo37.getTypeNodes();
        java.lang.String str60 = jSDocInfo37.getVersion();
        node34.setJSDocInfo(jSDocInfo37);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1.0d) + "'", double6 == (-1.0d));
        org.junit.Assert.assertNull(jSType8);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "NUMBER -1.0" + "'", str29, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(nodeCollection59);
        org.junit.Assert.assertNull(str60);
    }

    @Test
    public void test09648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09648");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.hasType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        java.util.Collection<java.lang.String> strCollection5 = jSDocInfo0.getReferences();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getThisType();
        java.lang.String str7 = jSDocInfo0.getDeprecationReason();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(strCollection5);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test09649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09649");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        boolean boolean8 = node7.isInstanceOf();
        com.google.javascript.rhino.InputId inputId9 = com.google.javascript.jscomp.NodeUtil.getInputId(node7);
        boolean boolean10 = node7.isSwitch();
        boolean boolean11 = node7.isSyntheticBlock();
        java.lang.String str12 = node7.toString();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(inputId9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "EXPR_RESULT" + "'", str12, "EXPR_RESULT");
    }

    @Test
    public void test09650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09650");
        com.google.javascript.rhino.InputId inputId1 = new com.google.javascript.rhino.InputId("java.io.IOException: NUMBER -1.0");
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node10.hasChild(node14);
        com.google.javascript.rhino.Node node16 = com.google.javascript.jscomp.NodeUtil.newExpr(node10);
        int int17 = node10.getLength();
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        node10.setDirectives((java.util.Set<java.lang.String>) strSet21);
        java.util.Spliterator<java.lang.String> strSpliterator24 = strSet21.spliterator();
        boolean boolean25 = strSet7.retainAll((java.util.Collection<java.lang.String>) strSet21);
        java.lang.Object[] objArray26 = strSet7.toArray();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean29 = node28.isName();
        boolean boolean30 = node28.isSwitch();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean33 = node28.hasChild(node32);
        com.google.javascript.rhino.Node node34 = com.google.javascript.jscomp.NodeUtil.newExpr(node28);
        int int35 = node28.getLength();
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        node28.setDirectives((java.util.Set<java.lang.String>) strSet39);
        boolean boolean42 = strSet39.isEmpty();
        boolean boolean43 = strSet7.containsAll((java.util.Collection<java.lang.String>) strSet39);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean46 = node45.isName();
        boolean boolean47 = node45.isSwitch();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean50 = node45.hasChild(node49);
        com.google.javascript.rhino.jstype.JSType jSType51 = null;
        node49.setJSType(jSType51);
        node49.setType(2);
        com.google.javascript.rhino.Node node55 = node49.getLastSibling();
        boolean boolean56 = strSet7.equals((java.lang.Object) node49);
        com.google.javascript.rhino.JSDocInfo jSDocInfo57 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList58 = jSDocInfo57.getExtendedInterfaces();
        java.lang.String str59 = jSDocInfo57.getVersion();
        boolean boolean60 = jSDocInfo57.isInterface();
        boolean boolean61 = jSDocInfo57.isJavaDispatch();
        java.lang.String str62 = jSDocInfo57.getSourceName();
        boolean boolean64 = jSDocInfo57.hasDescriptionForParameter("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        boolean boolean66 = jSDocInfo57.hasParameter("hi!");
        boolean boolean67 = strSet7.remove((java.lang.Object) jSDocInfo57);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression69 = jSDocInfo57.getParameterType("Node tree inequality:\nTree1:\nEXPR_RESULT\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: EXPR_RESULT\n\n\nSubtree2: NUMBER 100.0 100\n");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility70 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo57.setVisibility(visibility70);
        boolean boolean72 = inputId1.equals((java.lang.Object) jSDocInfo57);
        boolean boolean73 = jSDocInfo57.isConsistentIdGenerator();
        boolean boolean74 = jSDocInfo57.isJavaDispatch();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strSpliterator24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[hi!]");
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(jSTypeExpression69);
        org.junit.Assert.assertTrue("'" + visibility70 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility70.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test09651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09651");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getReturnDescription();
        java.lang.String str3 = jSDocInfo0.getVersion();
        jSDocInfo0.setDeprecated(true);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getReturnType();
        boolean boolean7 = jSDocInfo0.isHidden();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node10.hasChild(node14);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node17.isName();
        boolean boolean19 = node17.isSwitch();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node17.hasChild(node21);
        com.google.javascript.rhino.Node node23 = com.google.javascript.jscomp.NodeUtil.newExpr(node17);
        boolean boolean24 = node23.isRegExp();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node26.isName();
        boolean boolean28 = node26.isSwitch();
        java.lang.String str29 = node26.toString();
        com.google.javascript.rhino.Node node30 = node23.useSourceInfoIfMissingFromForTree(node26);
        boolean boolean31 = node14.isEquivalentToTyped(node26);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean34 = node33.isName();
        boolean boolean35 = node33.isSwitch();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean38 = node33.hasChild(node37);
        com.google.javascript.rhino.jstype.JSType jSType39 = null;
        node37.setJSType(jSType39);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(45, node14, node37, 10, 2);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean46 = node45.isName();
        boolean boolean47 = node45.isSwitch();
        boolean boolean48 = node45.isVarArgs();
        boolean boolean49 = node14.hasChild(node45);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean52 = node51.isName();
        boolean boolean53 = node51.isSwitch();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean56 = node51.hasChild(node55);
        boolean boolean57 = node51.isVar();
        node51.setWasEmptyNode(false);
        boolean boolean60 = node45.hasChild(node51);
        jSDocInfo0.setAssociatedNode(node51);
        boolean boolean62 = jSDocInfo0.hasEnumParameterType();
        com.google.common.collect.ImmutableList<java.lang.String> strList63 = jSDocInfo0.getTemplateTypeNames();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "NUMBER -1.0" + "'", str29, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strList63);
    }

    @Test
    public void test09652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09652");
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec1 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("NUMBER -1.0 [jsdoc_info: JSDocInfo] [empty_block: 1]\n");
    }

    @Test
    public void test09653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09653");
        int int1 = com.google.javascript.jscomp.NodeUtil.getInverseOperator((-1));
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
    }

    @Test
    public void test09654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09654");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        int int8 = node1.getLength();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        node1.setDirectives((java.util.Set<java.lang.String>) strSet12);
        java.lang.Object[] objArray15 = strSet12.toArray();
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        int int20 = strList18.size();
        boolean boolean21 = strSet12.containsAll((java.util.Collection<java.lang.String>) strList18);
        java.util.Spliterator<java.lang.String> strSpliterator22 = strSet12.spliterator();
        boolean boolean23 = strSet12.isEmpty();
        boolean boolean25 = strSet12.add("NUMBER -1.0\n");
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList27 = jSDocInfo26.getExtendedInterfaces();
        java.lang.String str28 = jSDocInfo26.getReturnDescription();
        java.lang.String str29 = jSDocInfo26.getVersion();
        boolean boolean30 = jSDocInfo26.isNoAlias();
        java.lang.String str31 = jSDocInfo26.getFileOverview();
        boolean boolean32 = strSet12.contains((java.lang.Object) jSDocInfo26);
        jSDocInfo26.setDeprecated(false);
        int int35 = jSDocInfo26.getParameterCount();
        java.lang.String str36 = jSDocInfo26.getDeprecationReason();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[hi!]");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strSpliterator22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(jSTypeExpressionList27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNull(str36);
    }

    @Test
    public void test09655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09655");
        com.google.javascript.rhino.Node node1 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        boolean boolean6 = node4.isSwitch();
        node4.detachChildren();
        boolean boolean8 = node4.isDebugger();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node10.hasChild(node14);
        boolean boolean16 = node14.isGetElem();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection17 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node14);
        node14.setWasEmptyNode(false);
        boolean boolean20 = node4.isEquivalentTo(node14);
        boolean boolean21 = node14.isNew();
        boolean boolean22 = node14.isWhile();
        boolean boolean23 = node14.isDefaultCase();
        boolean boolean24 = node14.isBreak();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 1, node14, 409642, 25);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(46, node1, node27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(nodeCollection17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test09656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09656");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(39, 0, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("BITXOR 0\n", 41, (int) ' ');
        boolean boolean9 = com.google.javascript.jscomp.NodeUtil.isSymmetricOperation(node8);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n", (int) (short) 100, 42);
        node13.setOptionalArg(true);
        boolean boolean16 = node13.isAssign();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(43, node8, node13);
        com.google.javascript.rhino.Node node18 = node8.getLastChild();
        // The following exception was thrown during execution in test generation
        try {
            node3.addChildrenToFront(node18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(node18);
    }

    @Test
    public void test09657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09657");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        int int8 = node1.getLength();
        node1.addSuppression("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        java.lang.String str11 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(node1);
        boolean boolean12 = node1.isWhile();
        com.google.javascript.rhino.Node node13 = node1.getLastChild();
        boolean boolean14 = node1.isGetProp();
        node1.setSourceEncodedPositionForTree((int) (byte) -1);
        boolean boolean17 = node1.isEmpty();
        node1.addSuppression("NUMBER -1.0 [synthetic: 1]");
        java.lang.Appendable appendable20 = null;
        // The following exception was thrown during execution in test generation
        try {
            node1.appendStringTree(appendable20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test09658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09658");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        int int8 = node1.getLength();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        node1.setDirectives((java.util.Set<java.lang.String>) strSet12);
        java.lang.Object[] objArray15 = strSet12.toArray();
        java.util.stream.Stream<java.lang.String> strStream16 = strSet12.parallelStream();
        int int17 = strSet12.size();
        java.lang.Object obj18 = null;
        boolean boolean19 = strSet12.contains(obj18);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean29 = node28.isName();
        boolean boolean30 = node28.isSwitch();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean33 = node28.hasChild(node32);
        com.google.javascript.rhino.Node node34 = com.google.javascript.jscomp.NodeUtil.newExpr(node28);
        int int35 = node28.getLength();
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        node28.setDirectives((java.util.Set<java.lang.String>) strSet39);
        java.util.Spliterator<java.lang.String> strSpliterator42 = strSet39.spliterator();
        boolean boolean43 = strSet25.retainAll((java.util.Collection<java.lang.String>) strSet39);
        boolean boolean44 = strSet25.isEmpty();
        java.util.Spliterator<java.lang.String> strSpliterator45 = strSet25.spliterator();
        boolean boolean46 = strSet12.contains((java.lang.Object) strSpliterator45);
        strSet12.clear();
        com.google.javascript.rhino.JSDocInfo jSDocInfo48 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet49 = jSDocInfo48.getParameterNames();
        jSDocInfo48.addSuppression("Named type with empty name component");
        boolean boolean52 = jSDocInfo48.hasType();
        jSDocInfo48.addSuppression("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        boolean boolean55 = jSDocInfo48.hasThisType();
        boolean boolean56 = jSDocInfo48.isDefine();
        boolean boolean57 = jSDocInfo48.isHidden();
        boolean boolean58 = jSDocInfo48.isHidden();
        boolean boolean59 = jSDocInfo48.isConstructor();
        com.google.common.collect.ImmutableList<java.lang.String> strList60 = jSDocInfo48.getTemplateTypeNames();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean63 = node62.isName();
        boolean boolean64 = node62.isSwitch();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean67 = node62.hasChild(node66);
        com.google.javascript.rhino.Node node68 = com.google.javascript.jscomp.NodeUtil.newExpr(node62);
        int int69 = node68.getType();
        com.google.javascript.rhino.Node node70 = node68.getFirstChild();
        boolean boolean71 = node70.isScript();
        com.google.javascript.rhino.JSDocInfo jSDocInfo72 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList73 = jSDocInfo72.getExtendedInterfaces();
        java.lang.String str74 = jSDocInfo72.getReturnDescription();
        boolean boolean75 = jSDocInfo72.hasFileOverview();
        node70.setJSDocInfo(jSDocInfo72);
        boolean boolean77 = jSDocInfo72.isJavaDispatch();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList78 = jSDocInfo72.getExtendedInterfaces();
        com.google.common.collect.ImmutableList<java.lang.String> strList79 = jSDocInfo72.getTemplateTypeNames();
        com.google.common.collect.ImmutableCollection[] immutableCollectionArray81 = new com.google.common.collect.ImmutableCollection[2];
        @SuppressWarnings("unchecked")
        com.google.common.collect.ImmutableCollection<java.lang.String>[] strCollectionArray82 = (com.google.common.collect.ImmutableCollection<java.lang.String>[]) immutableCollectionArray81;
        strCollectionArray82[0] = strList60;
        strCollectionArray82[1] = strList79;
        com.google.common.collect.ImmutableCollection<java.lang.String>[] strCollectionArray87 = strSet12.toArray(strCollectionArray82);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[hi!]");
        org.junit.Assert.assertNotNull(strStream16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strSpliterator42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strSpliterator45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(strList60);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 130 + "'", int69 == 130);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList73);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList78);
        org.junit.Assert.assertNotNull(strList79);
        org.junit.Assert.assertNotNull(immutableCollectionArray81);
        org.junit.Assert.assertNotNull(strCollectionArray82);
        org.junit.Assert.assertNotNull(strCollectionArray87);
    }

    @Test
    public void test09659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09659");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("Named type with empty name component");
        java.lang.String str4 = jSDocInfo0.toString();
        jSDocInfo0.setDeprecated(true);
        boolean boolean7 = jSDocInfo0.hasFileOverview();
        boolean boolean8 = jSDocInfo0.isExterns();
        boolean boolean9 = jSDocInfo0.hasType();
        java.lang.String str10 = jSDocInfo0.getLendsName();
        boolean boolean11 = jSDocInfo0.isConstructor();
        boolean boolean12 = jSDocInfo0.isConstant();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList14 = jSDocInfo13.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection15 = jSDocInfo13.getReferences();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection16 = jSDocInfo13.getMarkers();
        boolean boolean17 = jSDocInfo13.isConsistentIdGenerator();
        boolean boolean18 = jSDocInfo13.isConstant();
        int int19 = jSDocInfo13.getParameterCount();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet21 = jSDocInfo20.getParameterNames();
        boolean boolean23 = jSDocInfo20.hasParameter("hi!");
        boolean boolean24 = jSDocInfo20.hasThisType();
        boolean boolean25 = jSDocInfo20.isIdGenerator();
        jSDocInfo20.setLicense("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        boolean boolean28 = jSDocInfo20.isOverride();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean31 = node30.isName();
        boolean boolean32 = node30.isSwitch();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean35 = node30.hasChild(node34);
        com.google.javascript.rhino.Node node36 = com.google.javascript.jscomp.NodeUtil.newExpr(node30);
        boolean boolean37 = node36.isRegExp();
        jSDocInfo20.setAssociatedNode(node36);
        boolean boolean40 = jSDocInfo20.hasParameter("Not declared as a type name");
        java.lang.String str41 = jSDocInfo20.getDeprecationReason();
        boolean boolean42 = jSDocInfo20.isExpose();
        boolean boolean43 = jSDocInfo20.hasFileOverview();
        java.lang.String str44 = jSDocInfo20.getLendsName();
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        int int49 = strList47.size();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility50 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        boolean boolean51 = strList47.remove((java.lang.Object) visibility50);
        jSDocInfo20.setVisibility(visibility50);
        jSDocInfo13.setVisibility(visibility50);
        jSDocInfo0.setVisibility(visibility50);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JSDocInfo" + "'", str4, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList14);
        org.junit.Assert.assertNull(strCollection15);
        org.junit.Assert.assertNotNull(markerCollection16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + visibility50 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility50.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test09660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09660");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.hasParameter("hi!");
        boolean boolean4 = jSDocInfo0.isNoShadow();
        boolean boolean5 = jSDocInfo0.isJavaDispatch();
        java.lang.String str6 = jSDocInfo0.getLendsName();
        boolean boolean7 = jSDocInfo0.isDeprecated();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test09661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09661");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.jstype.JSType jSType7 = null;
        node5.setJSType(jSType7);
        com.google.javascript.rhino.InputId inputId9 = com.google.javascript.jscomp.NodeUtil.getInputId(node5);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node11.isName();
        boolean boolean13 = node11.isSwitch();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean16 = node11.hasChild(node15);
        com.google.javascript.rhino.Node node17 = com.google.javascript.jscomp.NodeUtil.newExpr(node11);
        int int18 = node17.getType();
        com.google.javascript.rhino.Node node19 = node5.copyInformationFromForTree(node17);
        int int20 = node5.getCharno();
        boolean boolean21 = node5.isName();
        node5.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean26 = node25.isName();
        boolean boolean27 = node25.isSwitch();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean30 = node25.hasChild(node29);
        com.google.javascript.rhino.Node node31 = com.google.javascript.jscomp.NodeUtil.newExpr(node25);
        boolean boolean32 = node31.isRegExp();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean35 = node34.isName();
        boolean boolean36 = node34.isSwitch();
        java.lang.String str37 = node34.toString();
        com.google.javascript.rhino.Node node38 = node31.useSourceInfoIfMissingFromForTree(node34);
        com.google.javascript.rhino.jstype.JSType jSType39 = null;
        node34.setJSType(jSType39);
        boolean boolean41 = node34.isOptionalArg();
        boolean boolean42 = node34.hasChildren();
        com.google.javascript.rhino.Node node43 = null;
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean47 = node46.isName();
        boolean boolean48 = node46.isSwitch();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean51 = node46.hasChild(node50);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean54 = node53.isName();
        boolean boolean55 = node53.isSwitch();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean58 = node53.hasChild(node57);
        com.google.javascript.rhino.Node node59 = com.google.javascript.jscomp.NodeUtil.newExpr(node53);
        boolean boolean60 = node59.isRegExp();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean63 = node62.isName();
        boolean boolean64 = node62.isSwitch();
        java.lang.String str65 = node62.toString();
        com.google.javascript.rhino.Node node66 = node59.useSourceInfoIfMissingFromForTree(node62);
        boolean boolean67 = node50.isEquivalentToTyped(node62);
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean70 = node69.isName();
        boolean boolean71 = node69.isSwitch();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean74 = node69.hasChild(node73);
        com.google.javascript.rhino.jstype.JSType jSType75 = null;
        node73.setJSType(jSType75);
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node(45, node50, node73, 10, 2);
        java.util.Set<java.lang.String> strSet80 = null;
        node50.setDirectives(strSet80);
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean84 = node83.isName();
        boolean boolean85 = node83.isSwitch();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean88 = node83.hasChild(node87);
        boolean boolean89 = node83.isComma();
        com.google.javascript.jscomp.CodingConvention.Bind bind90 = new com.google.javascript.jscomp.CodingConvention.Bind(node43, node50, node83);
        com.google.javascript.rhino.Node node91 = node34.useSourceInfoFrom(node50);
        boolean boolean92 = node5.hasChild(node50);
        boolean boolean93 = node50.isLocalResultCall();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(inputId9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 130 + "'", int18 == 130);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "NUMBER -1.0" + "'", str37, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "NUMBER -1.0" + "'", str65, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test09662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09662");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        boolean boolean7 = node1.isVar();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean10 = node9.isName();
        boolean boolean11 = node9.isSwitch();
        java.lang.String str12 = node9.toString();
        boolean boolean13 = node9.isWith();
        com.google.javascript.rhino.Node node14 = node1.srcref(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node16.isName();
        boolean boolean18 = node16.isSwitch();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node16.hasChild(node20);
        com.google.javascript.rhino.jstype.JSType jSType22 = null;
        node20.setJSType(jSType22);
        node20.setType(2);
        int int26 = node14.getIndexOfChild(node20);
        boolean boolean27 = node14.isString();
        boolean boolean28 = node14.isInc();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable29 = node14.siblings();
        boolean boolean30 = node14.isOnlyModifiesThisCall();
        boolean boolean31 = node14.isExprResult();
        boolean boolean32 = node14.isCall();
        com.google.javascript.rhino.Node node33 = node14.removeFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node34 = node33.removeFirstChild();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "NUMBER -1.0" + "'", str12, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(nodeIterable29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(node33);
    }

    @Test
    public void test09663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09663");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node8.isName();
        boolean boolean10 = node8.isSwitch();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node8.hasChild(node12);
        com.google.javascript.rhino.Node node14 = com.google.javascript.jscomp.NodeUtil.newExpr(node8);
        boolean boolean15 = node14.isRegExp();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node17.isName();
        boolean boolean19 = node17.isSwitch();
        java.lang.String str20 = node17.toString();
        com.google.javascript.rhino.Node node21 = node14.useSourceInfoIfMissingFromForTree(node17);
        boolean boolean22 = node5.isEquivalentToTyped(node17);
        com.google.javascript.rhino.Node node23 = node17.getLastChild();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        boolean boolean26 = node25.isDelProp();
        node17.addChildrenToFront(node25);
        boolean boolean28 = node17.isSyntheticBlock();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean31 = node30.isName();
        boolean boolean32 = node30.isSwitch();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean35 = node34.isFunction();
        boolean boolean36 = node34.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node37 = node30.useSourceInfoIfMissingFrom(node34);
        boolean boolean38 = node37.isQuotedString();
        boolean boolean39 = node37.isWhile();
        boolean boolean40 = node37.isAssign();
        boolean boolean41 = node37.isNew();
        node37.setLineno(38);
        // The following exception was thrown during execution in test generation
        try {
            node17.removeChild(node37);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "NUMBER -1.0" + "'", str20, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test09664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09664");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(49, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n", (int) (short) 100, (int) (short) 100);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean14 = node13.isName();
        boolean boolean15 = node13.isSwitch();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) 100, node8, node10, node13);
        boolean boolean17 = node10.isBreak();
        com.google.javascript.rhino.Node node18 = node10.removeChildren();
        boolean boolean19 = node10.wasEmptyNode();
        boolean boolean20 = node10.isFor();
        com.google.javascript.rhino.Node node21 = node5.srcrefTree(node10);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(47, node21, 44, (int) ' ');
        boolean boolean25 = node21.isVar();
        node21.setLineno((int) (byte) 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test09665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09665");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        java.lang.String str6 = jSDocInfo0.getFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getThisType();
        boolean boolean8 = jSDocInfo0.isDeprecated();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection9 = jSDocInfo0.getMarkers();
        boolean boolean10 = jSDocInfo0.hasType();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(markerCollection9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test09666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09666");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getReferences();
        com.google.common.collect.ImmutableList<java.lang.String> strList3 = jSDocInfo0.getTemplateTypeNames();
        java.lang.String str4 = jSDocInfo0.toString();
        com.google.common.collect.ImmutableList<java.lang.String> strList5 = jSDocInfo0.getTemplateTypeNames();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility6 = jSDocInfo0.getVisibility();
        java.lang.String str7 = jSDocInfo0.getDescription();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JSDocInfo" + "'", str4, "JSDocInfo");
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNull(visibility6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test09667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09667");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node8.isName();
        boolean boolean10 = node8.isSwitch();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node8.hasChild(node12);
        com.google.javascript.rhino.Node node14 = com.google.javascript.jscomp.NodeUtil.newExpr(node8);
        boolean boolean15 = node14.isRegExp();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node17.isName();
        boolean boolean19 = node17.isSwitch();
        java.lang.String str20 = node17.toString();
        com.google.javascript.rhino.Node node21 = node14.useSourceInfoIfMissingFromForTree(node17);
        boolean boolean22 = node5.isEquivalentToTyped(node17);
        com.google.javascript.rhino.InputId inputId23 = null;
        node17.setInputId(inputId23);
        boolean boolean25 = node17.isName();
        boolean boolean26 = node17.isVoid();
        node17.setLineno((int) (short) -1);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "NUMBER -1.0" + "'", str20, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test09668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09668");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node2.hasChild(node6);
        boolean boolean8 = node2.isVar();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        java.lang.String str13 = node10.toString();
        boolean boolean14 = node10.isWith();
        com.google.javascript.rhino.Node node15 = node2.srcref(node10);
        int int16 = node2.getChildCount();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(4, node2);
        java.lang.String str18 = com.google.javascript.jscomp.NodeUtil.getSourceName(node2);
        int int19 = node2.getType();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "NUMBER -1.0" + "'", str13, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 39 + "'", int19 == 39);
    }

    @Test
    public void test09669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09669");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        java.lang.String str6 = jSDocInfo0.getFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getThisType();
        boolean boolean8 = jSDocInfo0.isHidden();
        boolean boolean9 = jSDocInfo0.hasBaseType();
        java.lang.String str10 = jSDocInfo0.getSourceName();
        boolean boolean12 = jSDocInfo0.hasParameterType("OR");
        boolean boolean13 = jSDocInfo0.isNoShadow();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test09670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09670");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 31, 52, 29);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test09671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09671");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        java.lang.String str6 = jSDocInfo0.getFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getThisType();
        boolean boolean8 = jSDocInfo0.isDeprecated();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection9 = jSDocInfo0.getMarkers();
        java.lang.String str10 = jSDocInfo0.getSourceName();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(markerCollection9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test09672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09672");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        int int8 = node1.getLength();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        node1.setDirectives((java.util.Set<java.lang.String>) strSet12);
        java.util.Spliterator<java.lang.String> strSpliterator15 = strSet12.spliterator();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node17.isName();
        boolean boolean19 = node17.isSwitch();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node17.hasChild(node21);
        com.google.javascript.rhino.Node node23 = com.google.javascript.jscomp.NodeUtil.newExpr(node17);
        int int24 = node17.getLength();
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node17.setDirectives((java.util.Set<java.lang.String>) strSet28);
        boolean boolean32 = strSet28.add("");
        java.lang.Object[] objArray33 = strSet28.toArray();
        boolean boolean34 = strSet12.addAll((java.util.Collection<java.lang.String>) strSet28);
        boolean boolean35 = strSet12.isEmpty();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean41 = node40.isName();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean44 = node43.isName();
        boolean boolean45 = node43.isSwitch();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (byte) 100, node38, node40, node43);
        boolean boolean47 = node40.isLabelName();
        boolean boolean48 = strSet12.remove((java.lang.Object) node40);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean51 = node50.isName();
        boolean boolean52 = node50.isSwitch();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean55 = node50.hasChild(node54);
        com.google.javascript.rhino.Node node56 = com.google.javascript.jscomp.NodeUtil.newExpr(node50);
        int int57 = node50.getLength();
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet61 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet61, strArray60);
        node50.setDirectives((java.util.Set<java.lang.String>) strSet61);
        java.util.Spliterator<java.lang.String> strSpliterator64 = strSet61.spliterator();
        int int65 = strSet61.size();
        boolean boolean66 = strSet61.isEmpty();
        boolean boolean67 = strSet12.containsAll((java.util.Collection<java.lang.String>) strSet61);
        boolean boolean68 = strSet61.isEmpty();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strSpliterator15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[hi!, ]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(strSpliterator64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test09673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09673");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str1 = stringPosition0.getItem();
        int int2 = stringPosition0.getStartLine();
        int int3 = stringPosition0.getEndLine();
        int int4 = stringPosition0.getPositionOnEndLine();
        int int5 = stringPosition0.getStartLine();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test09674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09674");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) -1, "STRING Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection3 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node2);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(nodeCollection3);
    }

    @Test
    public void test09675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09675");
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative1 = null;
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec2 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("NUMBER -1.0", jSTypeNative1);
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        boolean boolean6 = node4.isSwitch();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node4.hasChild(node8);
        com.google.javascript.rhino.Node node10 = com.google.javascript.jscomp.NodeUtil.newExpr(node4);
        node4.setOptionalArg(true);
        node4.putBooleanProp((int) (short) -1, true);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node17.isName();
        boolean boolean19 = node17.isSwitch();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node17.hasChild(node21);
        com.google.javascript.rhino.Node node23 = com.google.javascript.jscomp.NodeUtil.newExpr(node17);
        boolean boolean24 = node23.isRegExp();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node26.isName();
        boolean boolean28 = node26.isSwitch();
        java.lang.String str29 = node26.toString();
        com.google.javascript.rhino.Node node30 = node23.useSourceInfoIfMissingFromForTree(node26);
        com.google.javascript.rhino.Node node31 = node4.useSourceInfoFromForTree(node23);
        com.google.javascript.rhino.Node node32 = assertionFunctionSpec2.getAssertedParam(node4);
        boolean boolean33 = node32.isQualifiedName();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder34 = node32.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node35 = node32.getParent();
        boolean boolean36 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node32);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "NUMBER -1.0" + "'", str29, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test09676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09676");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.hasModifies();
        java.lang.String str5 = jSDocInfo0.getDescriptionForParameter("STRING Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n 100\n");
        boolean boolean6 = jSDocInfo0.containsDeclaration();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getEnumParameterType();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
    }

    @Test
    public void test09677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09677");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.hasParameter("hi!");
        boolean boolean4 = jSDocInfo0.containsDeclaration();
        java.lang.String str5 = jSDocInfo0.getOriginalCommentString();
        boolean boolean7 = jSDocInfo0.hasDescriptionForParameter("Not declared as a type name");
        int int8 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean9 = jSDocInfo0.hasModifies();
        java.lang.String str10 = jSDocInfo0.getOriginalCommentString();
        boolean boolean11 = jSDocInfo0.isOverride();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test09678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09678");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        java.lang.String str4 = node1.toString();
        boolean boolean5 = node1.isNumber();
        boolean boolean6 = node1.isComma();
        boolean boolean7 = node1.isDebugger();
        boolean boolean8 = node1.isWith();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node10.hasChild(node14);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node17.isName();
        boolean boolean19 = node17.isSwitch();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node17.hasChild(node21);
        com.google.javascript.rhino.Node node23 = com.google.javascript.jscomp.NodeUtil.newExpr(node17);
        int int24 = node17.getLength();
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node17.setDirectives((java.util.Set<java.lang.String>) strSet28);
        java.lang.String str31 = node14.checkTreeEquals(node17);
        node14.setSourceEncodedPosition((int) 'a');
        com.google.javascript.rhino.jstype.JSType jSType34 = node14.getJSType();
        com.google.javascript.rhino.Node node35 = node1.copyInformationFrom(node14);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean38 = node37.isName();
        boolean boolean39 = node37.isSwitch();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean42 = node37.hasChild(node41);
        com.google.javascript.rhino.Node node43 = com.google.javascript.jscomp.NodeUtil.newExpr(node37);
        node37.setOptionalArg(true);
        node37.putBooleanProp((int) (short) -1, true);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean51 = node50.isName();
        boolean boolean52 = node50.isSwitch();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean55 = node50.hasChild(node54);
        com.google.javascript.rhino.Node node56 = com.google.javascript.jscomp.NodeUtil.newExpr(node50);
        boolean boolean57 = node56.isRegExp();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean60 = node59.isName();
        boolean boolean61 = node59.isSwitch();
        java.lang.String str62 = node59.toString();
        com.google.javascript.rhino.Node node63 = node56.useSourceInfoIfMissingFromForTree(node59);
        com.google.javascript.rhino.Node node64 = node37.useSourceInfoFromForTree(node56);
        boolean boolean65 = node37.hasOneChild();
        java.lang.String str66 = node1.checkTreeEquals(node37);
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean69 = node68.isName();
        boolean boolean70 = node68.isSwitch();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean73 = node68.hasChild(node72);
        com.google.javascript.rhino.jstype.JSType jSType74 = null;
        node72.setJSType(jSType74);
        com.google.javascript.rhino.InputId inputId76 = com.google.javascript.jscomp.NodeUtil.getInputId(node72);
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean79 = node78.isName();
        boolean boolean80 = node78.isSwitch();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean83 = node78.hasChild(node82);
        com.google.javascript.rhino.Node node84 = com.google.javascript.jscomp.NodeUtil.newExpr(node78);
        int int85 = node84.getType();
        com.google.javascript.rhino.Node node86 = node72.copyInformationFromForTree(node84);
        int int87 = node72.getCharno();
        boolean boolean88 = node72.isName();
        node72.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node91 = node1.srcref(node72);
        boolean boolean92 = node72.wasEmptyNode();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER -1.0" + "'", str4, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(jSType34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "NUMBER -1.0" + "'", str62, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(inputId76);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 130 + "'", int85 == 130);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test09679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09679");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        int int5 = node4.getChildCount();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node7.isName();
        boolean boolean9 = node7.isSwitch();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node7.hasChild(node11);
        boolean boolean13 = node7.isVar();
        com.google.javascript.rhino.Node node14 = node7.getParent();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node16.isName();
        boolean boolean18 = node16.isSwitch();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node16.hasChild(node20);
        boolean boolean22 = node16.isVar();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node24.isName();
        boolean boolean26 = node24.isSwitch();
        java.lang.String str27 = node24.toString();
        boolean boolean28 = node24.isWith();
        com.google.javascript.rhino.Node node29 = node16.srcref(node24);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(130, node4, node7, node24, node33, 0, 15);
        com.google.javascript.rhino.Node node37 = node36.getFirstChild();
        boolean boolean38 = node36.isLocalResultCall();
        boolean boolean39 = node36.isDelProp();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "NUMBER -1.0" + "'", str27, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test09680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09680");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        node1.setOptionalArg(true);
        node1.putBooleanProp((int) (short) -1, true);
        boolean boolean13 = node1.isDo();
        boolean boolean14 = node1.isParamList();
        boolean boolean15 = node1.isInstanceOf();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) (-1.0f), 15, 49);
        int int20 = node1.getIndexOfChild(node19);
        boolean boolean21 = node19.hasOneChild();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean24 = node23.isName();
        boolean boolean25 = node23.isSwitch();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean28 = node23.hasChild(node27);
        com.google.javascript.rhino.Node node29 = com.google.javascript.jscomp.NodeUtil.newExpr(node23);
        int int30 = node23.getLength();
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        node23.setDirectives((java.util.Set<java.lang.String>) strSet34);
        boolean boolean38 = node23.getBooleanProp(41);
        com.google.javascript.rhino.jstype.JSType jSType39 = null;
        node23.setJSType(jSType39);
        boolean boolean41 = node23.isVar();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((-1.0d), 43, 35);
        com.google.javascript.rhino.Node node46 = node23.useSourceInfoIfMissingFromForTree(node45);
        com.google.javascript.rhino.Node node47 = null;
        node19.addChildrenAfter(node45, node47);
        boolean boolean49 = node19.isGetProp();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test09681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09681");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        java.lang.String str4 = node1.toString();
        boolean boolean5 = node1.isWith();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node1.setJSType(jSType6);
        boolean boolean8 = node1.isWith();
        int int9 = node1.getType();
        boolean boolean10 = node1.isDo();
        boolean boolean11 = node1.isNoSideEffectsCall();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER -1.0" + "'", str4, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 39 + "'", int9 == 39);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test09682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09682");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node7.isName();
        boolean boolean9 = node7.isSwitch();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (byte) 100, node2, node4, node7);
        boolean boolean11 = node4.wasEmptyNode();
        java.lang.String str12 = node4.getQualifiedName();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(37);
        com.google.javascript.rhino.Node node15 = node4.copyInformationFrom(node14);
        boolean boolean16 = node4.isNull();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test09683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09683");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        boolean boolean7 = node5.isGetElem();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection8 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node5);
        com.google.javascript.rhino.Node node9 = com.google.javascript.jscomp.NodeUtil.newExpr(node5);
        int int10 = node9.getLineno();
        com.google.javascript.rhino.Node node11 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node12 = node9.clonePropsFrom(node11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(nodeCollection8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test09684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09684");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        boolean boolean5 = jSDocInfo0.isIdGenerator();
        com.google.javascript.rhino.Node node6 = jSDocInfo0.getAssociatedNode();
        boolean boolean7 = jSDocInfo0.isConstructor();
        boolean boolean8 = jSDocInfo0.isNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getEnumParameterType();
        java.util.Collection<java.lang.String> strCollection10 = jSDocInfo0.getReferences();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertNull(strCollection10);
    }

    @Test
    public void test09685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09685");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        boolean boolean8 = node7.isRegExp();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        java.lang.String str13 = node10.toString();
        com.google.javascript.rhino.Node node14 = node7.useSourceInfoIfMissingFromForTree(node10);
        com.google.javascript.rhino.jstype.JSType jSType15 = null;
        node10.setJSType(jSType15);
        boolean boolean17 = node10.isGetterDef();
        boolean boolean18 = node10.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node20.isName();
        boolean boolean22 = node20.isSwitch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node20.hasChild(node24);
        com.google.javascript.rhino.Node node26 = com.google.javascript.jscomp.NodeUtil.newExpr(node20);
        boolean boolean27 = node26.isRegExp();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean30 = node29.isName();
        boolean boolean31 = node29.isSwitch();
        java.lang.String str32 = node29.toString();
        com.google.javascript.rhino.Node node33 = node26.useSourceInfoIfMissingFromForTree(node29);
        boolean boolean34 = node26.isDo();
        boolean boolean35 = node26.isWhile();
        com.google.javascript.rhino.Node node36 = node10.srcref(node26);
        boolean boolean37 = node36.isDelProp();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "NUMBER -1.0" + "'", str13, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "NUMBER -1.0" + "'", str32, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test09686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09686");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node2.hasChild(node6);
        boolean boolean8 = node2.isVar();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        java.lang.String str13 = node10.toString();
        boolean boolean14 = node10.isWith();
        com.google.javascript.rhino.Node node15 = node2.srcref(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node17.isName();
        boolean boolean19 = node17.isSwitch();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node17.hasChild(node21);
        com.google.javascript.rhino.Node node23 = com.google.javascript.jscomp.NodeUtil.newExpr(node17);
        boolean boolean24 = node23.isRegExp();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node26.isName();
        boolean boolean28 = node26.isSwitch();
        java.lang.String str29 = node26.toString();
        com.google.javascript.rhino.Node node30 = node23.useSourceInfoIfMissingFromForTree(node26);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean33 = node32.isName();
        boolean boolean34 = node32.isSwitch();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean37 = node32.hasChild(node36);
        com.google.javascript.rhino.jstype.JSType jSType38 = null;
        node36.setJSType(jSType38);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (byte) 0, node10, node26, node36, (int) (byte) 0, (int) '#');
        java.lang.String str43 = com.google.javascript.jscomp.NodeUtil.getSourceName(node10);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        node45.setWasEmptyNode(true);
        boolean boolean48 = node45.isOr();
        boolean boolean49 = node45.isNumber();
        boolean boolean50 = node45.isInc();
        com.google.javascript.rhino.InputId inputId53 = new com.google.javascript.rhino.InputId("SHEQ 10\n    NUMBER -1.0\n    NUMBER -1.0\n");
        node45.putProp(38, (java.lang.Object) "SHEQ 10\n    NUMBER -1.0\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node55 = node10.srcrefTree(node45);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString(10, "java.io.IOException: BITXOR 0\n");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile59 = node58.getStaticSourceFile();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean62 = node61.isFunction();
        boolean boolean63 = node61.isUnscopedQualifiedName();
        boolean boolean64 = node61.isEmpty();
        boolean boolean65 = node61.isEmpty();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean68 = node67.isName();
        boolean boolean69 = node67.isSwitch();
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean72 = node67.hasChild(node71);
        boolean boolean73 = node67.isVar();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean76 = node75.isName();
        boolean boolean77 = node75.isSwitch();
        java.lang.String str78 = node75.toString();
        boolean boolean79 = node75.isWith();
        com.google.javascript.rhino.Node node80 = node67.srcref(node75);
        node67.detachChildren();
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        com.google.javascript.jscomp.CodingConvention.Bind bind84 = new com.google.javascript.jscomp.CodingConvention.Bind(node61, node67, node83);
        node83.removeProp(53);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable87 = node83.getAncestors();
        boolean boolean88 = node58.isEquivalentTo(node83);
        com.google.javascript.rhino.Node node92 = new com.google.javascript.rhino.Node(52, 32, 100);
        boolean boolean93 = node83.hasChild(node92);
        boolean boolean94 = node92.wasEmptyNode();
        com.google.javascript.rhino.Node node95 = node10.copyInformationFromForTree(node92);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "NUMBER -1.0" + "'", str13, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "NUMBER -1.0" + "'", str29, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(staticSourceFile59);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "NUMBER -1.0" + "'", str78, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNotNull(ancestorIterable87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(node95);
    }

    @Test
    public void test09687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09687");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        boolean boolean8 = node7.isRegExp();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        java.lang.String str13 = node10.toString();
        com.google.javascript.rhino.Node node14 = node7.useSourceInfoIfMissingFromForTree(node10);
        com.google.javascript.rhino.jstype.JSType jSType15 = null;
        node10.setJSType(jSType15);
        boolean boolean17 = node10.isGetterDef();
        boolean boolean18 = node10.isNoSideEffectsCall();
        node10.removeProp((int) (short) 100);
        com.google.javascript.rhino.Node node21 = node10.cloneNode();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "NUMBER -1.0" + "'", str13, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node21);
    }

    @Test
    public void test09688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09688");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        int int8 = node1.getLength();
        boolean boolean9 = node1.isNew();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node11.isName();
        boolean boolean13 = node11.isSwitch();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean16 = node11.hasChild(node15);
        com.google.javascript.rhino.Node node17 = com.google.javascript.jscomp.NodeUtil.newExpr(node11);
        int int18 = node11.getLength();
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        node11.setDirectives((java.util.Set<java.lang.String>) strSet22);
        boolean boolean26 = node11.getBooleanProp(41);
        com.google.javascript.rhino.Node node27 = node1.useSourceInfoFromForTree(node11);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node11);
        boolean boolean29 = node11.isFalse();
        com.google.javascript.rhino.InputId inputId30 = com.google.javascript.jscomp.NodeUtil.getInputId(node11);
        node11.setSourceFileForTesting("hi!");
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(inputId30);
    }

    @Test
    public void test09689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09689");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getReferences();
        com.google.common.collect.ImmutableList<java.lang.String> strList3 = jSDocInfo0.getTemplateTypeNames();
        java.util.Set<java.lang.String> strSet4 = jSDocInfo0.getParameterNames();
        boolean boolean5 = jSDocInfo0.isHidden();
        int int6 = jSDocInfo0.getParameterCount();
        boolean boolean7 = jSDocInfo0.containsDeclaration();
        java.lang.String str8 = jSDocInfo0.getDescription();
        boolean boolean9 = jSDocInfo0.isNoSideEffects();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test09690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09690");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        java.lang.String str6 = jSDocInfo0.getFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getThisType();
        boolean boolean8 = jSDocInfo0.hasModifies();
        java.lang.String str9 = jSDocInfo0.getLendsName();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo0.getParameterNames();
        int int11 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean12 = jSDocInfo0.hasType();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test09691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09691");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean10 = node9.isName();
        boolean boolean11 = node9.isSwitch();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean14 = node9.hasChild(node13);
        com.google.javascript.rhino.Node node15 = com.google.javascript.jscomp.NodeUtil.newExpr(node9);
        node9.setOptionalArg(true);
        node9.putBooleanProp((int) (short) -1, true);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean23 = node22.isName();
        boolean boolean24 = node22.isSwitch();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node22.hasChild(node26);
        com.google.javascript.rhino.Node node28 = com.google.javascript.jscomp.NodeUtil.newExpr(node22);
        boolean boolean29 = node28.isRegExp();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean32 = node31.isName();
        boolean boolean33 = node31.isSwitch();
        java.lang.String str34 = node31.toString();
        com.google.javascript.rhino.Node node35 = node28.useSourceInfoIfMissingFromForTree(node31);
        com.google.javascript.rhino.Node node36 = node9.useSourceInfoFromForTree(node28);
        boolean boolean37 = node7.hasChild(node9);
        node7.setIsSyntheticBlock(true);
        boolean boolean40 = node7.isTypeOf();
        boolean boolean41 = node7.isAssign();
        boolean boolean42 = node7.isNumber();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder43 = node7.new FileLevelJsDocBuilder();
        int int44 = node7.getLineno();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "NUMBER -1.0" + "'", str34, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
    }

    @Test
    public void test09692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09692");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        boolean boolean4 = node1.isNull();
        boolean boolean5 = node1.isFunction();
        node1.putBooleanProp(12, false);
        node1.setVarArgs(false);
        boolean boolean11 = node1.isAnd();
        boolean boolean12 = node1.isIn();
        node1.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node16.isName();
        boolean boolean18 = node16.isSwitch();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node16.hasChild(node20);
        boolean boolean22 = node16.isVar();
        node16.putBooleanProp(42, true);
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative27 = null;
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec28 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("Unknown class name", jSTypeNative27);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType29 = com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN;
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean34 = node33.isName();
        boolean boolean35 = node33.isSwitch();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean38 = node33.hasChild(node37);
        com.google.javascript.rhino.jstype.JSType jSType39 = null;
        node37.setJSType(jSType39);
        com.google.javascript.rhino.InputId inputId41 = com.google.javascript.jscomp.NodeUtil.getInputId(node37);
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship42 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType29, node31, node37);
        boolean boolean43 = node37.isQualifiedName();
        boolean boolean44 = node37.isQualifiedName();
        com.google.javascript.rhino.Node node45 = assertionFunctionSpec28.getAssertedParam(node37);
        com.google.javascript.jscomp.CodingConvention.Bind bind46 = new com.google.javascript.jscomp.CodingConvention.Bind(node1, node16, node45);
        boolean boolean47 = node16.isNumber();
        int int48 = node16.getLineno();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + subclassType29 + "' != '" + com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN + "'", subclassType29.equals(com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN));
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(inputId41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
    }

    @Test
    public void test09693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09693");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str1 = stringPosition0.getItem();
        int int2 = stringPosition0.getStartLine();
        stringPosition0.setItem("");
        stringPosition0.setPositionInformation(12, 15, 41, 43);
        int int10 = stringPosition0.getStartLine();
        int int11 = stringPosition0.getPositionOnEndLine();
        int int12 = stringPosition0.getEndLine();
        java.lang.String str13 = stringPosition0.getItem();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 12 + "'", int10 == 12);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 43 + "'", int11 == 43);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 41 + "'", int12 == 41);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test09694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09694");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node2.hasChild(node6);
        com.google.javascript.rhino.Node node8 = com.google.javascript.jscomp.NodeUtil.newExpr(node2);
        boolean boolean9 = node8.isInstanceOf();
        com.google.javascript.rhino.InputId inputId10 = com.google.javascript.jscomp.NodeUtil.getInputId(node8);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(10, node8);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node11);
        boolean boolean13 = node11.isFromExterns();
        com.google.javascript.rhino.Node node14 = node11.getLastChild();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node16.isFunction();
        com.google.javascript.rhino.Node node18 = node16.cloneTree();
        int int19 = node16.getCharno();
        com.google.javascript.rhino.Node node20 = node11.clonePropsFrom(node16);
        int int21 = node20.getSourcePosition();
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet23 = jSDocInfo22.getParameterNames();
        boolean boolean25 = jSDocInfo22.hasParameter("hi!");
        boolean boolean26 = jSDocInfo22.hasThisType();
        java.util.Set<java.lang.String> strSet27 = jSDocInfo22.getModifies();
        boolean boolean28 = jSDocInfo22.hasTypedefType();
        boolean boolean29 = jSDocInfo22.isExpose();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList31 = jSDocInfo30.getExtendedInterfaces();
        java.lang.String str32 = jSDocInfo30.getVersion();
        boolean boolean33 = jSDocInfo30.isInterface();
        boolean boolean34 = jSDocInfo30.isJavaDispatch();
        boolean boolean35 = jSDocInfo30.isIdGenerator();
        java.lang.String str36 = jSDocInfo30.getReturnDescription();
        java.lang.String str37 = jSDocInfo30.getDeprecationReason();
        boolean boolean38 = jSDocInfo30.isOverride();
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList40 = jSDocInfo39.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection41 = jSDocInfo39.getReferences();
        boolean boolean42 = jSDocInfo39.isJavaDispatch();
        boolean boolean43 = jSDocInfo39.hasTypedefType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression44 = jSDocInfo39.getBaseType();
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        int int49 = strList47.size();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility50 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        boolean boolean51 = strList47.remove((java.lang.Object) visibility50);
        jSDocInfo39.setVisibility(visibility50);
        jSDocInfo30.setVisibility(visibility50);
        jSDocInfo22.setVisibility(visibility50);
        node20.setJSDocInfo(jSDocInfo22);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(inputId10);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList40);
        org.junit.Assert.assertNull(strCollection41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(jSTypeExpression44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + visibility50 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility50.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test09695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09695");
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative1 = null;
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec2 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("", jSTypeNative1);
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        boolean boolean6 = node4.isSwitch();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node4.hasChild(node8);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node11.isName();
        boolean boolean13 = node11.isSwitch();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean16 = node11.hasChild(node15);
        com.google.javascript.rhino.Node node17 = com.google.javascript.jscomp.NodeUtil.newExpr(node11);
        boolean boolean18 = node17.isRegExp();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node20.isName();
        boolean boolean22 = node20.isSwitch();
        java.lang.String str23 = node20.toString();
        com.google.javascript.rhino.Node node24 = node17.useSourceInfoIfMissingFromForTree(node20);
        boolean boolean25 = node8.isEquivalentToTyped(node20);
        com.google.javascript.rhino.Node node26 = assertionFunctionSpec2.getAssertedParam(node8);
        boolean boolean27 = node26.isGetterDef();
        boolean boolean28 = node26.isAssign();
        boolean boolean29 = node26.isRegExp();
        java.lang.String str33 = node26.toString(false, true, true);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "NUMBER -1.0" + "'", str23, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "NUMBER -1.0" + "'", str33, "NUMBER -1.0");
    }

    @Test
    public void test09696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09696");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node5.isFunction();
        boolean boolean7 = node5.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node8 = node1.useSourceInfoIfMissingFrom(node5);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable9 = node1.getAncestors();
        com.google.javascript.rhino.InputId inputId10 = com.google.javascript.jscomp.NodeUtil.getInputId(node1);
        int int11 = node1.getCharno();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList13 = jSDocInfo12.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection14 = jSDocInfo12.getReferences();
        boolean boolean15 = jSDocInfo12.isJavaDispatch();
        boolean boolean16 = jSDocInfo12.hasTypedefType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression17 = jSDocInfo12.getBaseType();
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        int int22 = strList20.size();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility23 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        boolean boolean24 = strList20.remove((java.lang.Object) visibility23);
        jSDocInfo12.setVisibility(visibility23);
        boolean boolean26 = jSDocInfo12.hasBaseType();
        java.lang.String str27 = jSDocInfo12.getMeaning();
        java.util.Set<java.lang.String> strSet28 = jSDocInfo12.getSuppressions();
        node1.setDirectives(strSet28);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        com.google.javascript.rhino.jstype.JSType jSType32 = node31.getJSType();
        com.google.javascript.rhino.jstype.JSType jSType33 = null;
        node31.setJSType(jSType33);
        java.lang.Object obj36 = node31.getProp(44);
        node31.setOptionalArg(true);
        java.lang.String str39 = node31.getSourceFileName();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean42 = node41.isName();
        boolean boolean43 = node41.isSwitch();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean46 = node41.hasChild(node45);
        com.google.javascript.rhino.Node node47 = com.google.javascript.jscomp.NodeUtil.newExpr(node41);
        int int48 = node41.getLength();
        boolean boolean49 = node41.isNew();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean52 = node51.isName();
        boolean boolean53 = node51.isSwitch();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean56 = node51.hasChild(node55);
        com.google.javascript.rhino.Node node57 = com.google.javascript.jscomp.NodeUtil.newExpr(node51);
        int int58 = node51.getLength();
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet62 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet62, strArray61);
        node51.setDirectives((java.util.Set<java.lang.String>) strSet62);
        boolean boolean66 = node51.getBooleanProp(41);
        com.google.javascript.rhino.Node node67 = node41.useSourceInfoFromForTree(node51);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile68 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node51);
        boolean boolean69 = node51.isTrue();
        boolean boolean70 = node31.isEquivalentToTyped(node51);
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean73 = node72.isName();
        boolean boolean74 = node72.isSwitch();
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean77 = node76.isFunction();
        boolean boolean78 = node76.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node79 = node72.useSourceInfoIfMissingFrom(node76);
        boolean boolean80 = node79.isQuotedString();
        node79.setSourceFileForTesting("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile83 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node79);
        boolean boolean84 = staticSourceFile83.isExtern();
        int int86 = staticSourceFile83.getColumnOfOffset(39);
        node31.setStaticSourceFile(staticSourceFile83);
        int int89 = staticSourceFile83.getLineOfOffset(40);
        node1.setStaticSourceFile(staticSourceFile83);
        int int92 = staticSourceFile83.getLineOfOffset(0);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(ancestorIterable9);
        org.junit.Assert.assertNull(inputId10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(jSTypeExpressionList13);
        org.junit.Assert.assertNull(strCollection14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(jSTypeExpression17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + visibility23 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility23.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(jSType32);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNull(staticSourceFile68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(staticSourceFile83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
    }

    @Test
    public void test09697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09697");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        boolean boolean6 = node4.isSwitch();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node4.hasChild(node8);
        com.google.javascript.rhino.Node node10 = com.google.javascript.jscomp.NodeUtil.newExpr(node4);
        boolean boolean11 = node10.isRegExp();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean14 = node13.isName();
        boolean boolean15 = node13.isSwitch();
        java.lang.String str16 = node13.toString();
        com.google.javascript.rhino.Node node17 = node10.useSourceInfoIfMissingFromForTree(node13);
        java.lang.String str18 = node1.checkTreeEquals(node17);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node21.isName();
        boolean boolean23 = node21.isSwitch();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean26 = node21.hasChild(node25);
        boolean boolean27 = node25.isGetElem();
        node1.putProp((int) (short) 100, (java.lang.Object) boolean27);
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet30 = jSDocInfo29.getParameterNames();
        java.util.stream.Stream<java.lang.String> strStream31 = strSet30.stream();
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean41 = node40.isName();
        boolean boolean42 = node40.isSwitch();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean45 = node40.hasChild(node44);
        com.google.javascript.rhino.Node node46 = com.google.javascript.jscomp.NodeUtil.newExpr(node40);
        int int47 = node40.getLength();
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50);
        node40.setDirectives((java.util.Set<java.lang.String>) strSet51);
        java.util.Spliterator<java.lang.String> strSpliterator54 = strSet51.spliterator();
        boolean boolean55 = strSet37.retainAll((java.util.Collection<java.lang.String>) strSet51);
        java.lang.Object[] objArray56 = strSet37.toArray();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean59 = node58.isName();
        boolean boolean60 = node58.isSwitch();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean63 = node58.hasChild(node62);
        com.google.javascript.rhino.Node node64 = com.google.javascript.jscomp.NodeUtil.newExpr(node58);
        int int65 = node58.getLength();
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet69 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet69, strArray68);
        node58.setDirectives((java.util.Set<java.lang.String>) strSet69);
        boolean boolean72 = strSet69.isEmpty();
        boolean boolean73 = strSet37.containsAll((java.util.Collection<java.lang.String>) strSet69);
        boolean boolean74 = strSet30.containsAll((java.util.Collection<java.lang.String>) strSet37);
        node1.setDirectives((java.util.Set<java.lang.String>) strSet37);
        com.google.javascript.rhino.JSDocInfo jSDocInfo76 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList77 = jSDocInfo76.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection78 = jSDocInfo76.getReferences();
        com.google.common.collect.ImmutableList<java.lang.String> strList79 = jSDocInfo76.getTemplateTypeNames();
        boolean boolean80 = strSet37.retainAll((java.util.Collection<java.lang.String>) strList79);
        java.util.stream.Stream<java.lang.String> strStream81 = strSet37.stream();
        strSet37.clear();
        boolean boolean84 = strSet37.add("java.io.IOException: java.io.IOException: hi!");
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "NUMBER -1.0" + "'", str16, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n" + "'", str18, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(strStream31);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strSpliterator54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[hi!]");
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList77);
        org.junit.Assert.assertNull(strCollection78);
        org.junit.Assert.assertNotNull(strList79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(strStream81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test09698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09698");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node2.hasChild(node6);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean10 = node9.isName();
        boolean boolean11 = node9.isSwitch();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean14 = node9.hasChild(node13);
        com.google.javascript.rhino.Node node15 = com.google.javascript.jscomp.NodeUtil.newExpr(node9);
        boolean boolean16 = node15.isRegExp();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean19 = node18.isName();
        boolean boolean20 = node18.isSwitch();
        java.lang.String str21 = node18.toString();
        com.google.javascript.rhino.Node node22 = node15.useSourceInfoIfMissingFromForTree(node18);
        boolean boolean23 = node6.isEquivalentToTyped(node18);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean26 = node25.isName();
        boolean boolean27 = node25.isSwitch();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean30 = node25.hasChild(node29);
        com.google.javascript.rhino.jstype.JSType jSType31 = null;
        node29.setJSType(jSType31);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(45, node6, node29, 10, 2);
        boolean boolean36 = node6.isLocalResultCall();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean40 = node39.isName();
        boolean boolean41 = node39.isSwitch();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean44 = node43.isFunction();
        boolean boolean45 = node43.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node46 = node39.useSourceInfoIfMissingFrom(node43);
        java.lang.Class<?> wildcardClass47 = node46.getClass();
        node6.putProp(53, (java.lang.Object) wildcardClass47);
        com.google.javascript.rhino.JSDocInfo jSDocInfo49 = node6.getJSDocInfo();
        node6.setLineno(27);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node6);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "NUMBER -1.0" + "'", str21, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNull(jSDocInfo49);
        org.junit.Assert.assertNull(staticSourceFile52);
    }

    @Test
    public void test09699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09699");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(29, 0, 4095);
        com.google.javascript.rhino.Node node4 = node3.getLastChild();
        boolean boolean5 = com.google.javascript.jscomp.NodeUtil.isSymmetricOperation(node3);
        com.google.javascript.rhino.Node node6 = node3.cloneTree();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node8.isFunction();
        boolean boolean10 = node8.isUnscopedQualifiedName();
        boolean boolean11 = node8.isEmpty();
        boolean boolean12 = node8.isEmpty();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node14.isName();
        boolean boolean16 = node14.isSwitch();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean19 = node14.hasChild(node18);
        boolean boolean20 = node14.isVar();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean23 = node22.isName();
        boolean boolean24 = node22.isSwitch();
        java.lang.String str25 = node22.toString();
        boolean boolean26 = node22.isWith();
        com.google.javascript.rhino.Node node27 = node14.srcref(node22);
        node14.detachChildren();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        com.google.javascript.jscomp.CodingConvention.Bind bind31 = new com.google.javascript.jscomp.CodingConvention.Bind(node8, node14, node30);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean34 = node33.isName();
        boolean boolean35 = node33.isSwitch();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean38 = node33.hasChild(node37);
        boolean boolean39 = node33.isVar();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean42 = node41.isName();
        boolean boolean43 = node41.isSwitch();
        java.lang.String str44 = node41.toString();
        boolean boolean45 = node41.isWith();
        com.google.javascript.rhino.Node node46 = node33.srcref(node41);
        node33.detachChildren();
        int int48 = node33.getLineno();
        com.google.javascript.rhino.Node node49 = node30.copyInformationFrom(node33);
        int int50 = node6.getIndexOfChild(node49);
        boolean boolean51 = node49.hasChildren();
        boolean boolean52 = node49.isFunction();
        node49.putBooleanProp(0, true);
        java.lang.String str56 = node49.getQualifiedName();
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "NUMBER -1.0" + "'", str25, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "NUMBER -1.0" + "'", str44, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(str56);
    }

    @Test
    public void test09700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09700");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        int int8 = node1.getLength();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        node1.setDirectives((java.util.Set<java.lang.String>) strSet12);
        java.lang.Object[] objArray15 = strSet12.toArray();
        java.util.stream.Stream<java.lang.String> strStream16 = strSet12.parallelStream();
        int int17 = strSet12.size();
        java.lang.Object obj18 = null;
        boolean boolean19 = strSet12.contains(obj18);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node21.isName();
        boolean boolean23 = node21.isSwitch();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean26 = node21.hasChild(node25);
        com.google.javascript.rhino.Node node27 = com.google.javascript.jscomp.NodeUtil.newExpr(node21);
        int int28 = node21.getLength();
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet32 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet32, strArray31);
        node21.setDirectives((java.util.Set<java.lang.String>) strSet32);
        java.util.Spliterator<java.lang.String> strSpliterator35 = strSet32.spliterator();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean38 = node37.isName();
        boolean boolean39 = node37.isSwitch();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean42 = node37.hasChild(node41);
        com.google.javascript.rhino.Node node43 = com.google.javascript.jscomp.NodeUtil.newExpr(node37);
        int int44 = node37.getLength();
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        node37.setDirectives((java.util.Set<java.lang.String>) strSet48);
        boolean boolean52 = strSet48.add("");
        java.lang.Object[] objArray53 = strSet48.toArray();
        boolean boolean54 = strSet32.addAll((java.util.Collection<java.lang.String>) strSet48);
        boolean boolean55 = strSet32.isEmpty();
        boolean boolean56 = strSet12.addAll((java.util.Collection<java.lang.String>) strSet32);
        java.lang.Throwable throwable58 = null;
        java.io.IOException iOException59 = new java.io.IOException(throwable58);
        java.lang.Throwable throwable60 = null;
        java.io.IOException iOException61 = new java.io.IOException(throwable60);
        iOException59.addSuppressed((java.lang.Throwable) iOException61);
        java.io.IOException iOException63 = new java.io.IOException("hi!", (java.lang.Throwable) iOException59);
        java.lang.Throwable[] throwableArray64 = iOException63.getSuppressed();
        java.lang.Throwable throwable66 = null;
        java.io.IOException iOException67 = new java.io.IOException(throwable66);
        java.io.IOException iOException68 = new java.io.IOException((java.lang.Throwable) iOException67);
        java.io.IOException iOException69 = new java.io.IOException("NUMBER -1.0\n", (java.lang.Throwable) iOException67);
        iOException63.addSuppressed((java.lang.Throwable) iOException69);
        java.io.IOException iOException73 = new java.io.IOException("NUMBER -1.0");
        java.io.IOException iOException74 = new java.io.IOException("NUMBER -1.0\n", (java.lang.Throwable) iOException73);
        iOException63.addSuppressed((java.lang.Throwable) iOException74);
        boolean boolean76 = strSet12.remove((java.lang.Object) iOException74);
        java.io.IOException iOException77 = new java.io.IOException((java.lang.Throwable) iOException74);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[hi!]");
        org.junit.Assert.assertNotNull(strStream16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strSpliterator35);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[hi!, ]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test09701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09701");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(2, "java.io.IOException: Node tree inequality:\nTree1:\nEXPR_RESULT\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: EXPR_RESULT\n\n\nSubtree2: NUMBER 100.0 100\n", 100, 100);
        boolean boolean5 = node4.isTypeOf();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test09702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09702");
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative1 = null;
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec2 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("", jSTypeNative1);
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        double double6 = node4.getDouble();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = null;
        com.google.javascript.rhino.jstype.JSType jSType8 = assertionFunctionSpec2.getAssertedType(node4, jSTypeRegistry7);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node10.hasChild(node14);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node17.isName();
        boolean boolean19 = node17.isSwitch();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node17.hasChild(node21);
        com.google.javascript.rhino.Node node23 = com.google.javascript.jscomp.NodeUtil.newExpr(node17);
        boolean boolean24 = node23.isRegExp();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node26.isName();
        boolean boolean28 = node26.isSwitch();
        java.lang.String str29 = node26.toString();
        com.google.javascript.rhino.Node node30 = node23.useSourceInfoIfMissingFromForTree(node26);
        boolean boolean31 = node14.isEquivalentToTyped(node26);
        com.google.javascript.rhino.InputId inputId32 = null;
        node26.setInputId(inputId32);
        com.google.javascript.rhino.Node node34 = assertionFunctionSpec2.getAssertedParam(node26);
        boolean boolean35 = node34.isDebugger();
        boolean boolean36 = node34.isVoid();
        com.google.javascript.rhino.Node node37 = node34.cloneTree();
        boolean boolean38 = node34.isAnd();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node34.getStaticSourceFile();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1.0d) + "'", double6 == (-1.0d));
        org.junit.Assert.assertNull(jSType8);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "NUMBER -1.0" + "'", str29, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(staticSourceFile39);
    }

    @Test
    public void test09703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09703");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        java.lang.String str4 = node1.toString();
        boolean boolean5 = node1.isWith();
        int int7 = node1.getIntProp((int) ' ');
        boolean boolean8 = node1.isNE();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node10.hasChild(node14);
        com.google.javascript.rhino.jstype.JSType jSType16 = null;
        node14.setJSType(jSType16);
        node14.setType(2);
        com.google.javascript.rhino.Node node20 = node14.getLastSibling();
        com.google.javascript.rhino.Node node21 = node1.srcref(node20);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean24 = node23.isName();
        boolean boolean25 = node23.isSwitch();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean28 = node23.hasChild(node27);
        com.google.javascript.rhino.jstype.JSType jSType29 = null;
        node27.setJSType(jSType29);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean34 = node33.isName();
        boolean boolean35 = node33.isSwitch();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean38 = node33.hasChild(node37);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean41 = node40.isName();
        boolean boolean42 = node40.isSwitch();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean45 = node40.hasChild(node44);
        com.google.javascript.rhino.Node node46 = com.google.javascript.jscomp.NodeUtil.newExpr(node40);
        boolean boolean47 = node46.isRegExp();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean50 = node49.isName();
        boolean boolean51 = node49.isSwitch();
        java.lang.String str52 = node49.toString();
        com.google.javascript.rhino.Node node53 = node46.useSourceInfoIfMissingFromForTree(node49);
        boolean boolean54 = node37.isEquivalentToTyped(node49);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean57 = node56.isName();
        boolean boolean58 = node56.isSwitch();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean61 = node56.hasChild(node60);
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        node60.setJSType(jSType62);
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(45, node37, node60, 10, 2);
        boolean boolean67 = node60.isFunction();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean70 = node69.isName();
        boolean boolean71 = node69.isSwitch();
        java.lang.String str72 = node69.toString();
        boolean boolean73 = node69.isWith();
        boolean boolean74 = node69.isBreak();
        com.google.javascript.jscomp.CodingConvention.Bind bind75 = new com.google.javascript.jscomp.CodingConvention.Bind(node27, node60, node69);
        com.google.javascript.rhino.Node node76 = node1.useSourceInfoFrom(node69);
        boolean boolean77 = node76.isGetProp();
        boolean boolean78 = node76.isThrow();
        boolean boolean79 = node76.isRegExp();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER -1.0" + "'", str4, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "NUMBER -1.0" + "'", str52, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "NUMBER -1.0" + "'", str72, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test09704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09704");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.hasParameter("hi!");
        boolean boolean4 = jSDocInfo0.hasThisType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getModifies();
        java.util.Collection<java.lang.String> strCollection6 = jSDocInfo0.getAuthors();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getTypedefType();
        jSDocInfo0.setLicense("Not declared as a type name");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList10 = jSDocInfo0.getThrownTypes();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getTypedefType();
        boolean boolean12 = jSDocInfo0.isExpose();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection13 = jSDocInfo0.getMarkers();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = jSDocInfo0.getReturnType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList16 = jSDocInfo15.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection17 = jSDocInfo15.getReferences();
        boolean boolean18 = jSDocInfo15.isJavaDispatch();
        boolean boolean19 = jSDocInfo15.hasTypedefType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression20 = jSDocInfo15.getBaseType();
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        int int25 = strList23.size();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility26 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        boolean boolean27 = strList23.remove((java.lang.Object) visibility26);
        jSDocInfo15.setVisibility(visibility26);
        jSDocInfo0.setVisibility(visibility26);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression31 = jSDocInfo0.getParameterType("NUMBER 100.0 4095\n");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNull(strCollection6);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNotNull(jSTypeExpressionList10);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(markerCollection13);
        org.junit.Assert.assertNull(jSTypeExpression14);
        org.junit.Assert.assertNotNull(jSTypeExpressionList16);
        org.junit.Assert.assertNull(strCollection17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(jSTypeExpression20);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + visibility26 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility26.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSTypeExpression31);
    }

    @Test
    public void test09705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09705");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) ' ');
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.setMutatesArguments();
        boolean boolean4 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setMutatesArguments();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test09706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09706");
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(35, nodeArray8, 54, (int) (byte) 100);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(0, nodeArray8, 4, 27);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(0, nodeArray8);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(53, nodeArray8);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(0, nodeArray8);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(54, nodeArray8, (int) (byte) 10, 50);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((-1), nodeArray8, 42, 12);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(17, nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray8);
    }

    @Test
    public void test09707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09707");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node2.hasChild(node6);
        boolean boolean8 = node2.isVar();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        java.lang.String str13 = node10.toString();
        boolean boolean14 = node10.isWith();
        com.google.javascript.rhino.Node node15 = node2.srcref(node10);
        boolean boolean16 = node10.isFor();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean19 = node18.isName();
        boolean boolean20 = node18.isSwitch();
        boolean boolean21 = node18.isNull();
        boolean boolean22 = node18.isFunction();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node24.isName();
        boolean boolean26 = node24.isSwitch();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean29 = node24.hasChild(node28);
        boolean boolean30 = node24.isVar();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean33 = node32.isName();
        boolean boolean34 = node32.isSwitch();
        java.lang.String str35 = node32.toString();
        boolean boolean36 = node32.isWith();
        com.google.javascript.rhino.Node node37 = node24.srcref(node32);
        java.lang.String str38 = node37.toString();
        boolean boolean39 = node37.isDec();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean42 = node41.isName();
        boolean boolean43 = node41.isSwitch();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean46 = node41.hasChild(node45);
        com.google.javascript.rhino.Node node47 = com.google.javascript.jscomp.NodeUtil.newExpr(node41);
        boolean boolean48 = node47.isRegExp();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean51 = node50.isName();
        boolean boolean52 = node50.isSwitch();
        java.lang.String str53 = node50.toString();
        com.google.javascript.rhino.Node node54 = node47.useSourceInfoIfMissingFromForTree(node50);
        com.google.javascript.rhino.jstype.JSType jSType55 = null;
        node50.setJSType(jSType55);
        boolean boolean57 = node50.isOptionalArg();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) -1, node10, node18, node37, node50, (int) (short) -1, 0);
        boolean boolean61 = node37.isFromExterns();
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        node37.setJSType(jSType62);
        com.google.javascript.rhino.InputId inputId64 = com.google.javascript.jscomp.NodeUtil.getInputId(node37);
        boolean boolean65 = node37.isArrayLit();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "NUMBER -1.0" + "'", str13, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "NUMBER -1.0" + "'", str35, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "NUMBER -1.0" + "'", str38, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "NUMBER -1.0" + "'", str53, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(inputId64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test09708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09708");
        com.google.javascript.jscomp.CodingConvention codingConvention0 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node2 = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNode(codingConvention0, "java.io.IOException: hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09709");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (short) 0, (int) (short) 100, (int) (byte) 1);
        boolean boolean5 = node4.isVoid();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(39, node4, 40, (-1));
        boolean boolean9 = node8.isWith();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test09710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09710");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        int int8 = node1.getLength();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        node1.setDirectives((java.util.Set<java.lang.String>) strSet12);
        java.lang.Object[] objArray15 = strSet12.toArray();
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        int int20 = strList18.size();
        boolean boolean21 = strSet12.containsAll((java.util.Collection<java.lang.String>) strList18);
        java.util.Spliterator<java.lang.String> strSpliterator22 = strSet12.spliterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList24 = jSDocInfo23.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection25 = jSDocInfo23.getReferences();
        boolean boolean26 = jSDocInfo23.isJavaDispatch();
        boolean boolean27 = jSDocInfo23.hasTypedefType();
        boolean boolean28 = jSDocInfo23.hasTypedefType();
        boolean boolean29 = strSet12.contains((java.lang.Object) boolean28);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean32 = node31.isName();
        boolean boolean33 = node31.isSwitch();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean36 = node31.hasChild(node35);
        com.google.javascript.rhino.Node node37 = com.google.javascript.jscomp.NodeUtil.newExpr(node31);
        int int38 = node31.getLength();
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        node31.setDirectives((java.util.Set<java.lang.String>) strSet42);
        java.lang.Object[] objArray45 = strSet42.toArray();
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        int int50 = strList48.size();
        boolean boolean51 = strSet42.containsAll((java.util.Collection<java.lang.String>) strList48);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean54 = node53.isName();
        boolean boolean55 = node53.isSwitch();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean58 = node53.hasChild(node57);
        com.google.javascript.rhino.Node node59 = com.google.javascript.jscomp.NodeUtil.newExpr(node53);
        int int60 = node53.getLength();
        java.lang.String[] strArray63 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet64 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet64, strArray63);
        node53.setDirectives((java.util.Set<java.lang.String>) strSet64);
        java.lang.Object[] objArray67 = strSet64.toArray();
        boolean boolean68 = strSet42.removeAll((java.util.Collection<java.lang.String>) strSet64);
        java.lang.String[] strArray70 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList71 = new java.util.ArrayList<java.lang.String>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList71, strArray70);
        int int73 = strList71.size();
        java.util.stream.Stream<java.lang.String> strStream74 = strList71.stream();
        boolean boolean75 = strSet42.addAll((java.util.Collection<java.lang.String>) strList71);
        boolean boolean76 = strSet12.addAll((java.util.Collection<java.lang.String>) strList71);
        int int77 = strSet12.size();
        java.lang.Object[] objArray78 = strSet12.toArray();
        java.util.stream.Stream<java.lang.String> strStream79 = strSet12.stream();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[hi!]");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strSpliterator22);
        org.junit.Assert.assertNotNull(jSTypeExpressionList24);
        org.junit.Assert.assertNull(strCollection25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[hi!]");
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(strStream74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[hi!]");
        org.junit.Assert.assertNotNull(strStream79);
    }

    @Test
    public void test09711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09711");
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec1 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("STRING Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n 100 [opt_arg: 1]\n");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Unknown class name");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node5.isName();
        boolean boolean7 = node5.isSwitch();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean10 = node5.hasChild(node9);
        com.google.javascript.rhino.jstype.JSType jSType11 = null;
        node9.setJSType(jSType11);
        node9.setType(2);
        com.google.javascript.rhino.Node node15 = node9.getLastSibling();
        com.google.javascript.rhino.InputId inputId16 = com.google.javascript.jscomp.NodeUtil.getInputId(node9);
        boolean boolean17 = node3.isEquivalentTo(node9);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = null;
        com.google.javascript.rhino.jstype.JSType jSType19 = assertionFunctionSpec1.getAssertedType(node9, jSTypeRegistry18);
        java.lang.String str20 = assertionFunctionSpec1.getFunctionName();
        java.lang.String str21 = assertionFunctionSpec1.getFunctionName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(inputId16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(jSType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "STRING Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n 100 [opt_arg: 1]\n" + "'", str20, "STRING Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n 100 [opt_arg: 1]\n");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "STRING Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n 100 [opt_arg: 1]\n" + "'", str21, "STRING Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n 100 [opt_arg: 1]\n");
    }

    @Test
    public void test09712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09712");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        node1.detachChildren();
        boolean boolean5 = node1.isDebugger();
        java.lang.Object obj7 = node1.getProp((int) (short) 1);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test09713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09713");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.hasModifies();
        java.lang.String str4 = jSDocInfo0.getSourceName();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection5 = jSDocInfo0.getTypeNodes();
        java.lang.String str6 = jSDocInfo0.getLicense();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getTypedefType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getType();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(nodeCollection5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNull(jSTypeExpression8);
    }

    @Test
    public void test09714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09714");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        node5.setWasEmptyNode(true);
        boolean boolean8 = node5.isOr();
        node5.detachChildren();
        node1.putProp(50, (java.lang.Object) node5);
        boolean boolean11 = node5.isWith();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node14.isName();
        boolean boolean16 = node14.isSwitch();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean19 = node14.hasChild(node18);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node21.isName();
        boolean boolean23 = node21.isSwitch();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean26 = node21.hasChild(node25);
        com.google.javascript.rhino.Node node27 = com.google.javascript.jscomp.NodeUtil.newExpr(node21);
        boolean boolean28 = node27.isRegExp();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean31 = node30.isName();
        boolean boolean32 = node30.isSwitch();
        java.lang.String str33 = node30.toString();
        com.google.javascript.rhino.Node node34 = node27.useSourceInfoIfMissingFromForTree(node30);
        boolean boolean35 = node18.isEquivalentToTyped(node30);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean38 = node37.isName();
        boolean boolean39 = node37.isSwitch();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean42 = node37.hasChild(node41);
        com.google.javascript.rhino.jstype.JSType jSType43 = null;
        node41.setJSType(jSType43);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(45, node18, node41, 10, 2);
        boolean boolean48 = node18.isLocalResultCall();
        boolean boolean49 = node18.isAssignAdd();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean52 = node51.isName();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean55 = node54.isName();
        boolean boolean56 = node54.isSwitch();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean59 = node54.hasChild(node58);
        com.google.javascript.rhino.Node node60 = com.google.javascript.jscomp.NodeUtil.newExpr(node54);
        boolean boolean61 = node60.isRegExp();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean64 = node63.isName();
        boolean boolean65 = node63.isSwitch();
        java.lang.String str66 = node63.toString();
        com.google.javascript.rhino.Node node67 = node60.useSourceInfoIfMissingFromForTree(node63);
        java.lang.String str68 = node51.checkTreeEquals(node67);
        int int70 = node67.getIntProp(100);
        com.google.javascript.rhino.Node node71 = node18.srcrefTree(node67);
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean74 = node73.isName();
        boolean boolean75 = node73.isSwitch();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean78 = node73.hasChild(node77);
        com.google.javascript.rhino.Node node79 = com.google.javascript.jscomp.NodeUtil.newExpr(node73);
        boolean boolean80 = node79.isRegExp();
        com.google.javascript.rhino.Node node81 = node18.copyInformationFromForTree(node79);
        com.google.javascript.rhino.InputId inputId83 = new com.google.javascript.rhino.InputId("java.io.IOException: NUMBER -1.0");
        java.lang.String str84 = inputId83.toString();
        node81.setInputId(inputId83);
        java.lang.String str86 = inputId83.getIdName();
        node5.setInputId(inputId83);
        node5.setLength(1);
        boolean boolean90 = node5.isAssignAdd();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "NUMBER -1.0" + "'", str33, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "NUMBER -1.0" + "'", str66, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n" + "'", str68, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "InputId: java.io.IOException: NUMBER -1.0" + "'", str84, "InputId: java.io.IOException: NUMBER -1.0");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "java.io.IOException: NUMBER -1.0" + "'", str86, "java.io.IOException: NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test09715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09715");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        node1.setWasEmptyNode(true);
        boolean boolean4 = node1.isOr();
        boolean boolean5 = node1.isNumber();
        node1.putIntProp((int) (short) 0, 51);
        node1.setType(43);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("BITXOR 0\n", 4095, (int) (byte) 100);
        node14.setType((int) (byte) 0);
        boolean boolean17 = node14.isLabel();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile18 = node14.getStaticSourceFile();
        boolean boolean19 = node14.wasEmptyNode();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node20 = node1.removeChildAfter(node14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(staticSourceFile18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test09716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09716");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean1 = typePosition0.hasBrackets();
        int int2 = typePosition0.getEndLine();
        boolean boolean3 = typePosition0.hasBrackets();
        com.google.javascript.rhino.Node node4 = typePosition0.getItem();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(node4);
    }

    @Test
    public void test09717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09717");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        java.lang.String str4 = node1.toString();
        boolean boolean5 = node1.isVar();
        java.lang.String str6 = node1.getQualifiedName();
        boolean boolean7 = node1.isNull();
        com.google.javascript.rhino.Node node8 = node1.getParent();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node14.isFunction();
        boolean boolean16 = node14.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node17 = node10.useSourceInfoIfMissingFrom(node14);
        boolean boolean18 = node17.isQuotedString();
        com.google.javascript.rhino.Node node19 = node1.srcref(node17);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node21.isName();
        boolean boolean23 = node21.isSwitch();
        java.lang.String str24 = node21.toString();
        boolean boolean25 = node21.isWith();
        int int27 = node21.getIntProp((int) ' ');
        boolean boolean28 = node21.isNE();
        boolean boolean29 = node21.isNE();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder30 = node21.getJsDocBuilderForNode();
        boolean boolean31 = node21.isDelProp();
        node19.addChildToFront(node21);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER -1.0" + "'", str4, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "NUMBER -1.0" + "'", str24, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test09718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09718");
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec1 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("STRING Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        java.lang.String str2 = assertionFunctionSpec1.getFunctionName();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node7.isName();
        boolean boolean9 = node7.isSwitch();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node7.hasChild(node11);
        com.google.javascript.rhino.Node node13 = com.google.javascript.jscomp.NodeUtil.newExpr(node7);
        boolean boolean14 = node13.isRegExp();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node16.isName();
        boolean boolean18 = node16.isSwitch();
        java.lang.String str19 = node16.toString();
        com.google.javascript.rhino.Node node20 = node13.useSourceInfoIfMissingFromForTree(node16);
        java.lang.String str21 = node4.checkTreeEquals(node20);
        boolean boolean22 = node4.isScript();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection23 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node4);
        boolean boolean24 = node4.isCatch();
        boolean boolean26 = node4.getBooleanProp(47);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable27 = node4.getAncestors();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = null;
        com.google.javascript.rhino.jstype.JSType jSType29 = assertionFunctionSpec1.getAssertedType(node4, jSTypeRegistry28);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags31 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 100);
        sideEffectFlags31.setThrows();
        sideEffectFlags31.setThrows();
        boolean boolean34 = sideEffectFlags31.areAllFlagsSet();
        int int35 = sideEffectFlags31.valueOf();
        // The following exception was thrown during execution in test generation
        try {
            node4.setSideEffectFlags(sideEffectFlags31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "STRING Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n" + "'", str2, "STRING Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "NUMBER -1.0" + "'", str19, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n" + "'", str21, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(nodeCollection23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(ancestorIterable27);
        org.junit.Assert.assertNull(jSType29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 100 + "'", int35 == 100);
    }

    @Test
    public void test09719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09719");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.hasParameter("hi!");
        com.google.javascript.rhino.Node node4 = jSDocInfo0.getAssociatedNode();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node11.isName();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node14.isName();
        boolean boolean16 = node14.isSwitch();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (byte) 100, node9, node11, node14);
        java.lang.String str18 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(node9);
        java.lang.String str19 = node9.toStringTree();
        jSDocInfo0.setAssociatedNode(node9);
        boolean boolean22 = jSDocInfo0.hasParameterType("Node tree inequality:\nTree1:\nNUMBER 100.0 100\n\n\nTree2:\nNUMBER -1.0\n\n\nSubtree1: NUMBER 100.0 100\n\n\nSubtree2: NUMBER -1.0\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = jSDocInfo0.getEnumParameterType();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "STRING Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n\n" + "'", str19, "STRING Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n\n");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(jSTypeExpression23);
    }

    @Test
    public void test09720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09720");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node2.hasChild(node6);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean10 = node9.isName();
        boolean boolean11 = node9.isSwitch();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean14 = node9.hasChild(node13);
        com.google.javascript.rhino.Node node15 = com.google.javascript.jscomp.NodeUtil.newExpr(node9);
        boolean boolean16 = node15.isRegExp();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean19 = node18.isName();
        boolean boolean20 = node18.isSwitch();
        java.lang.String str21 = node18.toString();
        com.google.javascript.rhino.Node node22 = node15.useSourceInfoIfMissingFromForTree(node18);
        boolean boolean23 = node6.isEquivalentToTyped(node18);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean26 = node25.isName();
        boolean boolean27 = node25.isSwitch();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean30 = node25.hasChild(node29);
        com.google.javascript.rhino.jstype.JSType jSType31 = null;
        node29.setJSType(jSType31);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(45, node6, node29, 10, 2);
        boolean boolean36 = node29.isVarArgs();
        boolean boolean37 = node29.isGetElem();
        boolean boolean38 = node29.isThis();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "NUMBER -1.0" + "'", str21, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test09721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09721");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        boolean boolean8 = node7.isRegExp();
        boolean boolean9 = node7.isThis();
        boolean boolean10 = node7.isQuotedString();
        boolean boolean11 = node7.isExprResult();
        com.google.javascript.rhino.Node node12 = node7.removeChildren();
        // The following exception was thrown during execution in test generation
        try {
            node7.setDouble((double) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: EXPR_RESULT is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(node12);
    }

    @Test
    public void test09722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09722");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(52, 32, 100);
        node4.setSourceEncodedPositionForTree(16);
        boolean boolean7 = com.google.javascript.jscomp.NodeUtil.isSymmetricOperation(node4);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean10 = node9.isName();
        boolean boolean11 = node9.isSwitch();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean14 = node9.hasChild(node13);
        com.google.javascript.rhino.Node node15 = com.google.javascript.jscomp.NodeUtil.newExpr(node9);
        int int16 = node15.getType();
        com.google.javascript.rhino.Node node17 = node15.getFirstChild();
        boolean boolean18 = node4.isEquivalentTo(node15);
        node15.setSourceEncodedPosition(54);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean24 = node23.isName();
        boolean boolean25 = node23.isSwitch();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean28 = node23.hasChild(node27);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean31 = node30.isName();
        boolean boolean32 = node30.isSwitch();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean35 = node30.hasChild(node34);
        com.google.javascript.rhino.Node node36 = com.google.javascript.jscomp.NodeUtil.newExpr(node30);
        boolean boolean37 = node36.isRegExp();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean40 = node39.isName();
        boolean boolean41 = node39.isSwitch();
        java.lang.String str42 = node39.toString();
        com.google.javascript.rhino.Node node43 = node36.useSourceInfoIfMissingFromForTree(node39);
        boolean boolean44 = node27.isEquivalentToTyped(node39);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean47 = node46.isName();
        boolean boolean48 = node46.isSwitch();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean51 = node46.hasChild(node50);
        com.google.javascript.rhino.jstype.JSType jSType52 = null;
        node50.setJSType(jSType52);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(45, node27, node50, 10, 2);
        java.util.Set<java.lang.String> strSet57 = null;
        node27.setDirectives(strSet57);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean61 = node60.isName();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean64 = node63.isName();
        boolean boolean65 = node63.isSwitch();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean68 = node63.hasChild(node67);
        com.google.javascript.rhino.Node node69 = com.google.javascript.jscomp.NodeUtil.newExpr(node63);
        boolean boolean70 = node69.isRegExp();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean73 = node72.isName();
        boolean boolean74 = node72.isSwitch();
        java.lang.String str75 = node72.toString();
        com.google.javascript.rhino.Node node76 = node69.useSourceInfoIfMissingFromForTree(node72);
        java.lang.String str77 = node60.checkTreeEquals(node76);
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean81 = node80.isName();
        boolean boolean82 = node80.isSwitch();
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean85 = node80.hasChild(node84);
        boolean boolean86 = node84.isGetElem();
        node60.putProp((int) (short) 100, (java.lang.Object) boolean86);
        boolean boolean88 = node60.isGetProp();
        int int90 = node60.getIntProp((int) (byte) -1);
        node60.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node93 = node27.useSourceInfoFrom(node60);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node96 = new com.google.javascript.rhino.Node(204831, node15, node93, 4095, 32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: second new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 130 + "'", int16 == 130);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "NUMBER -1.0" + "'", str42, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "NUMBER -1.0" + "'", str75, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n" + "'", str77, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(node93);
    }

    @Test
    public void test09723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09723");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '#');
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.setThrows();
        boolean boolean4 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.setReturnsTainted();
        int int7 = sideEffectFlags1.valueOf();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.clearSideEffectFlags();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 47 + "'", int7 == 47);
    }

    @Test
    public void test09724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09724");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        boolean boolean2 = node1.isDelProp();
        boolean boolean3 = node1.isSwitch();
        node1.setQuotedString();
        node1.setLineno(12);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node8.isName();
        boolean boolean10 = node8.isSwitch();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node8.hasChild(node12);
        com.google.javascript.rhino.Node node14 = com.google.javascript.jscomp.NodeUtil.newExpr(node8);
        int int15 = node8.getLength();
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node8.setDirectives((java.util.Set<java.lang.String>) strSet19);
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        int int26 = strList24.size();
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        int int31 = strList29.size();
        boolean boolean32 = strList24.removeAll((java.util.Collection<java.lang.String>) strList29);
        boolean boolean33 = strSet19.retainAll((java.util.Collection<java.lang.String>) strList29);
        strSet19.clear();
        java.util.Spliterator<java.lang.String> strSpliterator35 = strSet19.spliterator();
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean45 = node44.isName();
        boolean boolean46 = node44.isSwitch();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean49 = node44.hasChild(node48);
        com.google.javascript.rhino.Node node50 = com.google.javascript.jscomp.NodeUtil.newExpr(node44);
        int int51 = node44.getLength();
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet55 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54);
        node44.setDirectives((java.util.Set<java.lang.String>) strSet55);
        java.util.Spliterator<java.lang.String> strSpliterator58 = strSet55.spliterator();
        boolean boolean59 = strSet41.retainAll((java.util.Collection<java.lang.String>) strSet55);
        boolean boolean60 = strSet41.isEmpty();
        int int61 = strSet41.size();
        boolean boolean62 = strSet19.containsAll((java.util.Collection<java.lang.String>) strSet41);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean65 = node64.isName();
        boolean boolean66 = node64.isSwitch();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean69 = node64.hasChild(node68);
        com.google.javascript.rhino.jstype.JSType jSType70 = null;
        node68.setJSType(jSType70);
        node68.setSourceFileForTesting("Named type with empty name component");
        boolean boolean74 = node68.isLabelName();
        boolean boolean75 = strSet41.contains((java.lang.Object) node68);
        boolean boolean76 = node68.isAnd();
        com.google.javascript.rhino.Node node77 = node1.useSourceInfoFrom(node68);
        boolean boolean78 = node77.isSetterDef();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strSpliterator35);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(strSpliterator58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test09725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09725");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getPositionOnStartLine();
        java.lang.String str2 = stringPosition0.getItem();
        int int3 = stringPosition0.getPositionOnEndLine();
        stringPosition0.setItem("InputId: ");
        int int6 = stringPosition0.getPositionOnEndLine();
        java.lang.String str7 = stringPosition0.getItem();
        stringPosition0.setPositionInformation((int) (short) 0, 40962, 16773220, 40962);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "InputId: " + "'", str7, "InputId: ");
    }

    @Test
    public void test09726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09726");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.jstype.JSType jSType7 = null;
        node5.setJSType(jSType7);
        com.google.javascript.rhino.InputId inputId9 = com.google.javascript.jscomp.NodeUtil.getInputId(node5);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node11.isName();
        boolean boolean13 = node11.isSwitch();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean16 = node11.hasChild(node15);
        com.google.javascript.rhino.Node node17 = com.google.javascript.jscomp.NodeUtil.newExpr(node11);
        int int18 = node11.getLength();
        boolean boolean19 = node11.isNew();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node21.isName();
        boolean boolean23 = node21.isSwitch();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean26 = node21.hasChild(node25);
        com.google.javascript.rhino.Node node27 = com.google.javascript.jscomp.NodeUtil.newExpr(node21);
        int int28 = node21.getLength();
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet32 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet32, strArray31);
        node21.setDirectives((java.util.Set<java.lang.String>) strSet32);
        boolean boolean36 = node21.getBooleanProp(41);
        com.google.javascript.rhino.Node node37 = node11.useSourceInfoFromForTree(node21);
        boolean boolean38 = node21.isGetElem();
        com.google.javascript.rhino.Node node39 = node5.useSourceInfoFrom(node21);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean42 = node41.isName();
        boolean boolean43 = node41.isSwitch();
        java.lang.String str44 = node41.toString();
        boolean boolean45 = node41.isNumber();
        boolean boolean46 = node41.isComma();
        boolean boolean47 = node41.isDebugger();
        boolean boolean48 = node41.isWith();
        node5.addChildrenToBack(node41);
        node41.setCharno(39);
        boolean boolean52 = node41.isWith();
        node41.addSuppression("");
        boolean boolean55 = node41.isNot();
        boolean boolean56 = node41.isLabel();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(inputId9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "NUMBER -1.0" + "'", str44, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test09727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09727");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean1 = typePosition0.hasBrackets();
        int int2 = typePosition0.getPositionOnStartLine();
        com.google.javascript.rhino.Node node3 = typePosition0.getItem();
        int int4 = typePosition0.getPositionOnStartLine();
        boolean boolean5 = typePosition0.hasBrackets();
        com.google.javascript.rhino.Node node6 = typePosition0.getItem();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(node6);
    }

    @Test
    public void test09728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09728");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean4 = node3.isName();
        boolean boolean5 = node3.isSwitch();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node3.hasChild(node7);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node10.hasChild(node14);
        com.google.javascript.rhino.Node node16 = com.google.javascript.jscomp.NodeUtil.newExpr(node10);
        boolean boolean17 = node16.isRegExp();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean20 = node19.isName();
        boolean boolean21 = node19.isSwitch();
        java.lang.String str22 = node19.toString();
        com.google.javascript.rhino.Node node23 = node16.useSourceInfoIfMissingFromForTree(node19);
        boolean boolean24 = node7.isEquivalentToTyped(node19);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node26.isName();
        boolean boolean28 = node26.isSwitch();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean31 = node26.hasChild(node30);
        com.google.javascript.rhino.jstype.JSType jSType32 = null;
        node30.setJSType(jSType32);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(45, node7, node30, 10, 2);
        boolean boolean37 = node30.isFunction();
        boolean boolean38 = node30.isFor();
        java.lang.String str39 = node30.getQualifiedName();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection40 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node30);
        com.google.javascript.rhino.Node node41 = node30.cloneTree();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean44 = node43.isName();
        boolean boolean45 = node43.isSwitch();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean48 = node43.hasChild(node47);
        com.google.javascript.rhino.jstype.JSType jSType49 = null;
        node47.setJSType(jSType49);
        com.google.javascript.rhino.InputId inputId51 = com.google.javascript.jscomp.NodeUtil.getInputId(node47);
        node47.setType((int) (short) 1);
        boolean boolean54 = node47.isEmpty();
        boolean boolean55 = node47.isSwitch();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean58 = node57.isName();
        boolean boolean59 = node57.isSwitch();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean62 = node57.hasChild(node61);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean65 = node64.isName();
        boolean boolean66 = node64.isSwitch();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean69 = node64.hasChild(node68);
        com.google.javascript.rhino.Node node70 = com.google.javascript.jscomp.NodeUtil.newExpr(node64);
        boolean boolean71 = node70.isRegExp();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean74 = node73.isName();
        boolean boolean75 = node73.isSwitch();
        java.lang.String str76 = node73.toString();
        com.google.javascript.rhino.Node node77 = node70.useSourceInfoIfMissingFromForTree(node73);
        boolean boolean78 = node61.isEquivalentToTyped(node73);
        com.google.javascript.rhino.Node node79 = node73.getLastChild();
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        boolean boolean82 = node81.isDelProp();
        node73.addChildrenToFront(node81);
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node(15, node41, node47, node73);
        boolean boolean85 = node73.isTry();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "NUMBER -1.0" + "'", str22, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(nodeCollection40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(inputId51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "NUMBER -1.0" + "'", str76, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNull(node79);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test09729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09729");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.hasParameter("hi!");
        boolean boolean4 = jSDocInfo0.hasThisType();
        boolean boolean5 = jSDocInfo0.isIdGenerator();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        boolean boolean8 = jSDocInfo0.isOverride();
        boolean boolean9 = jSDocInfo0.isNoShadow();
        boolean boolean10 = jSDocInfo0.isNoAlias();
        int int11 = jSDocInfo0.getImplementedInterfaceCount();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test09730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09730");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int1 = namePosition0.getPositionOnStartLine();
        int int2 = namePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        boolean boolean6 = node4.isSwitch();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node4.hasChild(node8);
        com.google.javascript.rhino.Node node10 = com.google.javascript.jscomp.NodeUtil.newExpr(node4);
        int int11 = node4.getLength();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder12 = node4.new FileLevelJsDocBuilder();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection13 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node4);
        namePosition0.setItem(node4);
        com.google.javascript.rhino.Node node15 = namePosition0.getItem();
        boolean boolean16 = node15.isGetElem();
        int int17 = node15.getLength();
        int int18 = node15.getType();
        int int19 = node15.getSourcePosition();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable20 = node15.children();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(nodeCollection13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 39 + "'", int18 == 39);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(nodeIterable20);
    }

    @Test
    public void test09731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09731");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getReturnDescription();
        int int3 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean4 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = jSDocInfo0.getVisibility();
        java.lang.String str6 = jSDocInfo0.getDescription();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getEnumParameterType();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(visibility5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(jSTypeExpression7);
    }

    @Test
    public void test09732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09732");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition0.setPositionInformation((int) (byte) 1, 2, (int) '#', (int) '4');
        int int6 = typePosition0.getStartLine();
        boolean boolean7 = typePosition0.hasBrackets();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node12.isName();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean16 = node15.isName();
        boolean boolean17 = node15.isSwitch();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (byte) 100, node10, node12, node15);
        boolean boolean19 = node12.wasEmptyNode();
        java.lang.String str20 = node12.getQualifiedName();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(37);
        com.google.javascript.rhino.Node node23 = node12.copyInformationFrom(node22);
        boolean boolean24 = node12.isEmpty();
        boolean boolean25 = node12.isContinue();
        typePosition0.setItem(node12);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test09733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09733");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN;
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        boolean boolean6 = node4.isSwitch();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node4.hasChild(node8);
        com.google.javascript.rhino.jstype.JSType jSType10 = null;
        node8.setJSType(jSType10);
        com.google.javascript.rhino.InputId inputId12 = com.google.javascript.jscomp.NodeUtil.getInputId(node8);
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship13 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node2, node8);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean19 = node18.isName();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node21.isName();
        boolean boolean23 = node21.isSwitch();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) 100, node16, node18, node21);
        boolean boolean25 = node18.wasEmptyNode();
        java.lang.String str26 = node18.getQualifiedName();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(37);
        com.google.javascript.rhino.Node node29 = node18.copyInformationFrom(node28);
        java.lang.Object obj31 = node28.getProp(4);
        boolean boolean32 = node2.isEquivalentToTyped(node28);
        boolean boolean33 = node28.isFor();
        org.junit.Assert.assertTrue("'" + subclassType0 + "' != '" + com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN + "'", subclassType0.equals(com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN));
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(inputId12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test09734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09734");
        com.google.javascript.rhino.jstype.JSType jSType0 = null;
        com.google.javascript.rhino.jstype.JSType jSType1 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair2 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType0, jSType1);
        com.google.javascript.rhino.jstype.JSType jSType3 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType4 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType5 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType6 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType7 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType8 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType9 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType10 = typePair2.typeA;
        org.junit.Assert.assertNull(jSType3);
        org.junit.Assert.assertNull(jSType4);
        org.junit.Assert.assertNull(jSType5);
        org.junit.Assert.assertNull(jSType6);
        org.junit.Assert.assertNull(jSType7);
        org.junit.Assert.assertNull(jSType8);
        org.junit.Assert.assertNull(jSType9);
        org.junit.Assert.assertNull(jSType10);
    }

    @Test
    public void test09735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09735");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(41, node4);
        boolean boolean6 = node5.isLocalResultCall();
        boolean boolean7 = node5.isStringKey();
        boolean boolean8 = node5.isNew();
        boolean boolean9 = node5.isLabel();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test09736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09736");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        int int5 = node4.getChildCount();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node7.isName();
        boolean boolean9 = node7.isSwitch();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node7.hasChild(node11);
        boolean boolean13 = node7.isVar();
        com.google.javascript.rhino.Node node14 = node7.getParent();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node16.isName();
        boolean boolean18 = node16.isSwitch();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node16.hasChild(node20);
        boolean boolean22 = node16.isVar();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node24.isName();
        boolean boolean26 = node24.isSwitch();
        java.lang.String str27 = node24.toString();
        boolean boolean28 = node24.isWith();
        com.google.javascript.rhino.Node node29 = node16.srcref(node24);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(130, node4, node7, node24, node33, 0, 15);
        boolean boolean37 = node24.isTypeOf();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean40 = node39.isName();
        double double41 = node39.getDouble();
        node24.addChildToFront(node39);
        boolean boolean43 = node24.isIn();
        boolean boolean44 = node24.isWhile();
        com.google.javascript.rhino.InputId inputId45 = node24.getInputId();
        boolean boolean46 = node24.isContinue();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "NUMBER -1.0" + "'", str27, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + (-1.0d) + "'", double41 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(inputId45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test09737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09737");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("hi!");
        boolean boolean2 = node1.isInstanceOf();
        boolean boolean3 = node1.isQuotedString();
        node1.setWasEmptyNode(false);
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative7 = null;
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec8 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("STRING Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n\n", jSTypeNative7);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node10.hasChild(node14);
        com.google.javascript.rhino.Node node16 = com.google.javascript.jscomp.NodeUtil.newExpr(node10);
        node10.setOptionalArg(true);
        node10.putBooleanProp((int) (short) -1, true);
        boolean boolean22 = node10.hasChildren();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node24.isName();
        boolean boolean26 = node24.isSwitch();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean29 = node24.hasChild(node28);
        com.google.javascript.rhino.Node node30 = com.google.javascript.jscomp.NodeUtil.newExpr(node24);
        boolean boolean31 = node30.isRegExp();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean34 = node33.isName();
        boolean boolean35 = node33.isSwitch();
        java.lang.String str36 = node33.toString();
        com.google.javascript.rhino.Node node37 = node30.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.jstype.JSType jSType38 = null;
        node33.setJSType(jSType38);
        boolean boolean40 = node33.isGetterDef();
        boolean boolean41 = node33.isNoSideEffectsCall();
        node10.addChildrenToBack(node33);
        com.google.javascript.rhino.Node node43 = assertionFunctionSpec8.getAssertedParam(node33);
        boolean boolean44 = node1.hasChild(node33);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean47 = node46.isName();
        boolean boolean48 = node46.isSwitch();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean51 = node46.hasChild(node50);
        java.lang.String str52 = com.google.javascript.jscomp.NodeUtil.getSourceName(node46);
        com.google.javascript.rhino.Node node53 = com.google.javascript.jscomp.NodeUtil.newExpr(node46);
        java.lang.String str54 = node46.getSourceFileName();
        boolean boolean55 = node46.isFalse();
        boolean boolean56 = node46.isFor();
        boolean boolean57 = node46.isReturn();
        com.google.javascript.rhino.Node node58 = node33.srcrefTree(node46);
        boolean boolean59 = node58.isReturn();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "NUMBER -1.0" + "'", str36, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test09738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09738");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition4 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition7 = marker0.getName();
        org.junit.Assert.assertNull(typePosition1);
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(stringPosition3);
        org.junit.Assert.assertNull(stringPosition4);
        org.junit.Assert.assertNull(typePosition5);
        org.junit.Assert.assertNull(stringPosition6);
        org.junit.Assert.assertNull(stringPosition7);
    }

    @Test
    public void test09739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09739");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getReferences();
        boolean boolean3 = jSDocInfo0.isJavaDispatch();
        boolean boolean4 = jSDocInfo0.hasTypedefType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getBaseType();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        int int10 = strList8.size();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility11 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        boolean boolean12 = strList8.remove((java.lang.Object) visibility11);
        jSDocInfo0.setVisibility(visibility11);
        boolean boolean14 = jSDocInfo0.hasBaseType();
        java.lang.String str15 = jSDocInfo0.getBlockDescription();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + visibility11 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility11.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test09740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09740");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        boolean boolean2 = node1.isDelProp();
        node1.setLineno(41);
        boolean boolean5 = node1.isReturn();
        boolean boolean6 = node1.isIf();
        node1.setType(31);
        boolean boolean9 = node1.isUnscopedQualifiedName();
        boolean boolean10 = node1.isInstanceOf();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test09741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09741");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node2.hasChild(node6);
        com.google.javascript.rhino.Node node8 = com.google.javascript.jscomp.NodeUtil.newExpr(node2);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node10.hasChild(node14);
        com.google.javascript.rhino.Node node16 = com.google.javascript.jscomp.NodeUtil.newExpr(node10);
        node10.setOptionalArg(true);
        node10.putBooleanProp((int) (short) -1, true);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean24 = node23.isName();
        boolean boolean25 = node23.isSwitch();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean28 = node23.hasChild(node27);
        com.google.javascript.rhino.Node node29 = com.google.javascript.jscomp.NodeUtil.newExpr(node23);
        boolean boolean30 = node29.isRegExp();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean33 = node32.isName();
        boolean boolean34 = node32.isSwitch();
        java.lang.String str35 = node32.toString();
        com.google.javascript.rhino.Node node36 = node29.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node37 = node10.useSourceInfoFromForTree(node29);
        boolean boolean38 = node8.hasChild(node10);
        node8.setIsSyntheticBlock(true);
        boolean boolean41 = node8.isVar();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean44 = node43.isName();
        boolean boolean45 = node43.isSwitch();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean48 = node43.hasChild(node47);
        java.lang.String str49 = com.google.javascript.jscomp.NodeUtil.getSourceName(node43);
        java.lang.String str50 = node43.getSourceFileName();
        int int51 = node43.getLength();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean54 = node53.isName();
        boolean boolean55 = node53.isSwitch();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean58 = node53.hasChild(node57);
        boolean boolean59 = node53.isVar();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean62 = node61.isName();
        boolean boolean63 = node61.isSwitch();
        java.lang.String str64 = node61.toString();
        boolean boolean65 = node61.isWith();
        com.google.javascript.rhino.Node node66 = node53.srcref(node61);
        boolean boolean67 = node61.isFor();
        boolean boolean68 = node61.isGetterDef();
        com.google.javascript.rhino.Node node70 = node61.getAncestor(0);
        boolean boolean71 = node70.isDec();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((-1), node8, node43, node70, 30, 100);
        node43.setIsSyntheticBlock(false);
        boolean boolean77 = node43.isComma();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "NUMBER -1.0" + "'", str35, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "NUMBER -1.0" + "'", str64, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test09742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09742");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) (short) 100);
        boolean boolean2 = node1.isOptionalArg();
        com.google.javascript.rhino.Node node3 = node1.getFirstChild();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(node3);
    }

    @Test
    public void test09743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09743");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        boolean boolean7 = node1.isVar();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean10 = node9.isName();
        boolean boolean11 = node9.isSwitch();
        java.lang.String str12 = node9.toString();
        boolean boolean13 = node9.isWith();
        com.google.javascript.rhino.Node node14 = node1.srcref(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node16.isName();
        boolean boolean18 = node16.isSwitch();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node16.hasChild(node20);
        com.google.javascript.rhino.jstype.JSType jSType22 = null;
        node20.setJSType(jSType22);
        node20.setType(2);
        int int26 = node14.getIndexOfChild(node20);
        com.google.javascript.rhino.Node node27 = node20.removeFirstChild();
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList29 = jSDocInfo28.getExtendedInterfaces();
        java.lang.String str30 = jSDocInfo28.getVersion();
        boolean boolean31 = jSDocInfo28.isInterface();
        java.lang.String str32 = jSDocInfo28.getLendsName();
        java.lang.String str33 = jSDocInfo28.getOriginalCommentString();
        node20.setJSDocInfo(jSDocInfo28);
        com.google.javascript.rhino.Node node36 = node20.getAncestor(1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean37 = node36.isOr();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "NUMBER -1.0" + "'", str12, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNotNull(jSTypeExpressionList29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(node36);
    }

    @Test
    public void test09744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09744");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        int int8 = node1.getLength();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        node1.setDirectives((java.util.Set<java.lang.String>) strSet12);
        java.lang.Object[] objArray15 = strSet12.toArray();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node17.isName();
        boolean boolean19 = node17.isSwitch();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node17.hasChild(node21);
        com.google.javascript.rhino.Node node23 = com.google.javascript.jscomp.NodeUtil.newExpr(node17);
        int int24 = node17.getLength();
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node17.setDirectives((java.util.Set<java.lang.String>) strSet28);
        java.lang.Object[] objArray31 = strSet28.toArray();
        int int32 = strSet28.size();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean35 = node34.isFunction();
        boolean boolean36 = node34.isNot();
        boolean boolean37 = strSet28.contains((java.lang.Object) boolean36);
        strSet28.clear();
        int int39 = strSet28.size();
        java.util.stream.Stream<java.lang.String> strStream40 = strSet28.parallelStream();
        boolean boolean41 = strSet12.retainAll((java.util.Collection<java.lang.String>) strSet28);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet43 = jSDocInfo42.getParameterNames();
        boolean boolean45 = jSDocInfo42.hasParameter("hi!");
        boolean boolean46 = jSDocInfo42.hasThisType();
        java.util.Set<java.lang.String> strSet47 = jSDocInfo42.getModifies();
        com.google.javascript.rhino.JSDocInfo jSDocInfo48 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet49 = jSDocInfo48.getParameterNames();
        boolean boolean50 = strSet47.addAll((java.util.Collection<java.lang.String>) strSet49);
        java.util.stream.Stream<java.lang.String> strStream51 = strSet49.parallelStream();
        boolean boolean52 = strSet12.retainAll((java.util.Collection<java.lang.String>) strSet49);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[hi!]");
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[hi!]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(strStream40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strStream51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test09745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09745");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        boolean boolean7 = node1.isVar();
        boolean boolean8 = node1.isBreak();
        java.lang.String str9 = node1.toString();
        int int10 = node1.getSourceOffset();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nSTRING Unknown class name\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: STRING Unknown class name\n", 32, 8);
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet16 = jSDocInfo15.getParameterNames();
        boolean boolean18 = jSDocInfo15.hasParameter("hi!");
        boolean boolean19 = jSDocInfo15.hasThisType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList20 = jSDocInfo15.getThrownTypes();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList21 = jSDocInfo15.getImplementedInterfaces();
        java.lang.String str22 = jSDocInfo15.getLicense();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList23 = jSDocInfo15.getImplementedInterfaces();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList24 = jSDocInfo15.getImplementedInterfaces();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node26.isName();
        boolean boolean28 = node26.isSwitch();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean31 = node26.hasChild(node30);
        com.google.javascript.rhino.Node node32 = com.google.javascript.jscomp.NodeUtil.newExpr(node26);
        int int33 = node32.getType();
        jSDocInfo15.setAssociatedNode(node32);
        boolean boolean35 = node32.isLabel();
        com.google.javascript.rhino.Node node36 = node14.clonePropsFrom(node32);
        node1.addChildToBack(node32);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER -1.0" + "'", str9, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList20);
        org.junit.Assert.assertNotNull(jSTypeExpressionList21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(jSTypeExpressionList23);
        org.junit.Assert.assertNotNull(jSTypeExpressionList24);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 130 + "'", int33 == 130);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
    }

    @Test
    public void test09746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09746");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        boolean boolean2 = node1.isDelProp();
        node1.setCharno(2);
        boolean boolean5 = node1.isTry();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node8.isName();
        boolean boolean10 = node8.isSwitch();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node8.hasChild(node12);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean16 = node15.isName();
        boolean boolean17 = node15.isSwitch();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean20 = node15.hasChild(node19);
        com.google.javascript.rhino.Node node21 = com.google.javascript.jscomp.NodeUtil.newExpr(node15);
        boolean boolean22 = node21.isRegExp();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node24.isName();
        boolean boolean26 = node24.isSwitch();
        java.lang.String str27 = node24.toString();
        com.google.javascript.rhino.Node node28 = node21.useSourceInfoIfMissingFromForTree(node24);
        boolean boolean29 = node12.isEquivalentToTyped(node24);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean32 = node31.isName();
        boolean boolean33 = node31.isSwitch();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean36 = node31.hasChild(node35);
        com.google.javascript.rhino.jstype.JSType jSType37 = null;
        node35.setJSType(jSType37);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(45, node12, node35, 10, 2);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean44 = node43.isName();
        boolean boolean45 = node43.isSwitch();
        boolean boolean46 = node43.isVarArgs();
        boolean boolean47 = node12.hasChild(node43);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean50 = node49.isName();
        boolean boolean51 = node49.isSwitch();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean54 = node49.hasChild(node53);
        boolean boolean55 = node49.isVar();
        node49.setWasEmptyNode(false);
        boolean boolean58 = node43.hasChild(node49);
        com.google.javascript.rhino.Node node59 = node1.copyInformationFrom(node49);
        boolean boolean60 = node49.isLocalResultCall();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean64 = node63.isName();
        boolean boolean65 = node63.isSwitch();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean68 = node63.hasChild(node67);
        com.google.javascript.rhino.Node node69 = com.google.javascript.jscomp.NodeUtil.newExpr(node63);
        boolean boolean70 = node69.isRegExp();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean73 = node72.isName();
        boolean boolean74 = node72.isSwitch();
        java.lang.String str75 = node72.toString();
        com.google.javascript.rhino.Node node76 = node69.useSourceInfoIfMissingFromForTree(node72);
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node(50, node76);
        boolean boolean78 = node76.isGetterDef();
        boolean boolean79 = node76.isTry();
        int int80 = node76.getType();
        com.google.javascript.rhino.Node node81 = node49.srcref(node76);
        boolean boolean82 = node81.isFor();
        boolean boolean83 = node81.isDebugger();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "NUMBER -1.0" + "'", str27, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "NUMBER -1.0" + "'", str75, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 130 + "'", int80 == 130);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test09747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09747");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isLabel();
        boolean boolean3 = node1.isLabel();
        node1.setVarArgs(false);
        com.google.javascript.rhino.InputId inputId6 = node1.getInputId();
        boolean boolean7 = node1.isFromExterns();
        com.google.javascript.rhino.Node node9 = node1.getAncestor(4095);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(node9);
    }

    @Test
    public void test09748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09748");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        node1.setOptionalArg(true);
        java.lang.String str4 = com.google.javascript.jscomp.NodeUtil.getSourceName(node1);
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative6 = null;
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec7 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("", jSTypeNative6);
        com.google.javascript.rhino.Node node8 = null;
        com.google.javascript.rhino.Node node9 = assertionFunctionSpec7.getAssertedParam(node8);
        java.lang.String str10 = assertionFunctionSpec7.getFunctionName();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node12.isName();
        boolean boolean14 = node12.isSwitch();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node12.hasChild(node16);
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        node16.setJSType(jSType18);
        node16.setType(2);
        com.google.javascript.rhino.Node node22 = node16.getLastSibling();
        com.google.javascript.rhino.Node node23 = assertionFunctionSpec7.getAssertedParam(node22);
        com.google.javascript.rhino.Node node24 = node1.copyInformationFromForTree(node22);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node26.isName();
        boolean boolean28 = node26.isSwitch();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean31 = node26.hasChild(node30);
        com.google.javascript.rhino.Node node32 = com.google.javascript.jscomp.NodeUtil.newExpr(node26);
        boolean boolean33 = node32.isRegExp();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean36 = node35.isName();
        boolean boolean37 = node35.isSwitch();
        java.lang.String str38 = node35.toString();
        com.google.javascript.rhino.Node node39 = node32.useSourceInfoIfMissingFromForTree(node35);
        com.google.javascript.rhino.Node node40 = node39.removeChildren();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(41, node45);
        java.lang.String str47 = node39.checkTreeEquals(node45);
        boolean boolean49 = node45.getBooleanProp(1);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean53 = node52.isName();
        boolean boolean54 = node52.isSwitch();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean57 = node56.isFunction();
        boolean boolean58 = node56.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node59 = node52.useSourceInfoIfMissingFrom(node56);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) 1, node59);
        com.google.javascript.rhino.Node node61 = node45.useSourceInfoFromForTree(node60);
        boolean boolean62 = node45.isFunction();
        com.google.javascript.rhino.Node node63 = node22.useSourceInfoIfMissingFrom(node45);
        java.lang.String str64 = node45.getQualifiedName();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "NUMBER -1.0" + "'", str38, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Node tree inequality:\nTree1:\nEXPR_RESULT\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: EXPR_RESULT\n\n\nSubtree2: NUMBER 100.0 100\n" + "'", str47, "Node tree inequality:\nTree1:\nEXPR_RESULT\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: EXPR_RESULT\n\n\nSubtree2: NUMBER 100.0 100\n");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(str64);
    }

    @Test
    public void test09749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09749");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN;
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        boolean boolean6 = node4.isSwitch();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node4.hasChild(node8);
        com.google.javascript.rhino.jstype.JSType jSType10 = null;
        node8.setJSType(jSType10);
        com.google.javascript.rhino.InputId inputId12 = com.google.javascript.jscomp.NodeUtil.getInputId(node8);
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship13 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node2, node8);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean19 = node18.isName();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node21.isName();
        boolean boolean23 = node21.isSwitch();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) 100, node16, node18, node21);
        boolean boolean25 = node18.wasEmptyNode();
        java.lang.String str26 = node18.getQualifiedName();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(37);
        com.google.javascript.rhino.Node node29 = node18.copyInformationFrom(node28);
        java.lang.Object obj31 = node28.getProp(4);
        boolean boolean32 = node2.isEquivalentToTyped(node28);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean35 = node34.isName();
        boolean boolean36 = node34.isSwitch();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean39 = node38.isFunction();
        boolean boolean40 = node38.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node41 = node34.useSourceInfoIfMissingFrom(node38);
        boolean boolean42 = node34.isNE();
        boolean boolean43 = node34.isObjectLit();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean46 = node45.isName();
        boolean boolean47 = node45.isSwitch();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean50 = node45.hasChild(node49);
        boolean boolean51 = node45.isVar();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean54 = node53.isName();
        boolean boolean55 = node53.isSwitch();
        java.lang.String str56 = node53.toString();
        boolean boolean57 = node53.isWith();
        com.google.javascript.rhino.Node node58 = node45.srcref(node53);
        boolean boolean59 = com.google.javascript.jscomp.NodeUtil.isSymmetricOperation(node53);
        com.google.javascript.rhino.Node node60 = node53.removeChildren();
        com.google.javascript.rhino.Node node61 = node34.useSourceInfoIfMissingFrom(node53);
        int int62 = node28.getIndexOfChild(node34);
        boolean boolean63 = node28.isBlock();
        org.junit.Assert.assertTrue("'" + subclassType0 + "' != '" + com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN + "'", subclassType0.equals(com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN));
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(inputId12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "NUMBER -1.0" + "'", str56, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test09750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09750");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        int int4 = node3.getChildCount();
        boolean boolean5 = node3.isFor();
        boolean boolean6 = node3.isNew();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable7 = node3.children();
        boolean boolean8 = node3.isRegExp();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeIterable7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test09751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09751");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(0, "NUMBER -1.0", (int) '#', 44);
        boolean boolean6 = node5.isUnscopedQualifiedName();
        int int7 = node5.getSourceOffset();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean10 = node9.isName();
        boolean boolean11 = node9.isSwitch();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean14 = node9.hasChild(node13);
        com.google.javascript.rhino.Node node15 = com.google.javascript.jscomp.NodeUtil.newExpr(node9);
        boolean boolean16 = node15.isRegExp();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean19 = node18.isName();
        boolean boolean20 = node18.isSwitch();
        java.lang.String str21 = node18.toString();
        com.google.javascript.rhino.Node node22 = node15.useSourceInfoIfMissingFromForTree(node18);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(27, node5, node23, (-1), 0);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean29 = node28.isName();
        boolean boolean30 = node28.isSwitch();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean33 = node28.hasChild(node32);
        com.google.javascript.rhino.Node node34 = com.google.javascript.jscomp.NodeUtil.newExpr(node28);
        node28.setOptionalArg(true);
        node28.putBooleanProp((int) (short) -1, true);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean42 = node41.isName();
        boolean boolean43 = node41.isSwitch();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean46 = node41.hasChild(node45);
        com.google.javascript.rhino.Node node47 = com.google.javascript.jscomp.NodeUtil.newExpr(node41);
        boolean boolean48 = node47.isRegExp();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean51 = node50.isName();
        boolean boolean52 = node50.isSwitch();
        java.lang.String str53 = node50.toString();
        com.google.javascript.rhino.Node node54 = node47.useSourceInfoIfMissingFromForTree(node50);
        com.google.javascript.rhino.Node node55 = node28.useSourceInfoFromForTree(node47);
        boolean boolean56 = node47.isFor();
        boolean boolean57 = node47.isFor();
        com.google.javascript.rhino.Node node58 = node5.useSourceInfoFrom(node47);
        node47.setLineno(46);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        com.google.javascript.rhino.jstype.JSType jSType63 = node62.getJSType();
        boolean boolean64 = node62.isScript();
        boolean boolean65 = node62.isTry();
        node47.addChildrenToFront(node62);
        boolean boolean67 = node62.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node68 = node62.detachFromParent();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable69 = node62.children();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "NUMBER -1.0" + "'", str21, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "NUMBER -1.0" + "'", str53, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNull(jSType63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(nodeIterable69);
    }

    @Test
    public void test09752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09752");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int1 = namePosition0.getPositionOnStartLine();
        int int2 = namePosition0.getPositionOnStartLine();
        int int3 = namePosition0.getPositionOnStartLine();
        int int4 = namePosition0.getPositionOnStartLine();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node6.isName();
        boolean boolean8 = node6.isSwitch();
        java.lang.String str9 = node6.toString();
        boolean boolean10 = node6.isWith();
        boolean boolean11 = node6.hasOneChild();
        boolean boolean12 = node6.isLocalResultCall();
        namePosition0.setItem(node6);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean16 = node15.isName();
        boolean boolean17 = node15.isSwitch();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean20 = node15.hasChild(node19);
        com.google.javascript.rhino.Node node21 = com.google.javascript.jscomp.NodeUtil.newExpr(node15);
        boolean boolean22 = node6.isEquivalentTo(node15);
        java.lang.String str23 = node15.toString();
        com.google.javascript.rhino.Node node24 = node15.removeChildren();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER -1.0" + "'", str9, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "NUMBER -1.0" + "'", str23, "NUMBER -1.0");
        org.junit.Assert.assertNull(node24);
    }

    @Test
    public void test09753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09753");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node2.hasChild(node6);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean10 = node9.isName();
        boolean boolean11 = node9.isSwitch();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean14 = node9.hasChild(node13);
        com.google.javascript.rhino.Node node15 = com.google.javascript.jscomp.NodeUtil.newExpr(node9);
        boolean boolean16 = node15.isRegExp();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean19 = node18.isName();
        boolean boolean20 = node18.isSwitch();
        java.lang.String str21 = node18.toString();
        com.google.javascript.rhino.Node node22 = node15.useSourceInfoIfMissingFromForTree(node18);
        boolean boolean23 = node6.isEquivalentToTyped(node18);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean26 = node25.isName();
        boolean boolean27 = node25.isSwitch();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean30 = node25.hasChild(node29);
        com.google.javascript.rhino.jstype.JSType jSType31 = null;
        node29.setJSType(jSType31);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(45, node6, node29, 10, 2);
        boolean boolean36 = node6.isLocalResultCall();
        boolean boolean37 = node6.isAssignAdd();
        boolean boolean38 = node6.isIn();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "NUMBER -1.0" + "'", str21, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test09754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09754");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n", (int) (short) 100, 42);
        node3.setOptionalArg(true);
        boolean boolean6 = node3.isAssign();
        java.lang.Object obj8 = node3.getProp((int) ' ');
        com.google.javascript.rhino.jstype.JSType jSType9 = null;
        node3.setJSType(jSType9);
        boolean boolean11 = node3.isLocalResultCall();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection12 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node3);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder13 = node3.new FileLevelJsDocBuilder();
        fileLevelJsDocBuilder13.append("NULL\n    NUMBER 100.0 100\n");
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeCollection12);
    }

    @Test
    public void test09755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09755");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("Named type with empty name component");
        java.util.Collection<java.lang.String> strCollection4 = jSDocInfo0.getReferences();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getParameterType("Node tree inequality:\nTree1:\nSHEQ 10\n    NUMBER -1.0\n    NUMBER -1.0\n\n\nTree2:\nNUMBER -1.0\n\n\nSubtree1: SHEQ 10\n    NUMBER -1.0\n    NUMBER -1.0\n\n\nSubtree2: NUMBER -1.0\n");
        boolean boolean7 = jSDocInfo0.isDefine();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(strCollection4);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test09756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09756");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        int int8 = node1.getLength();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        node1.setDirectives((java.util.Set<java.lang.String>) strSet12);
        java.lang.Object[] objArray15 = strSet12.toArray();
        int int16 = strSet12.size();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean19 = node18.isFunction();
        boolean boolean20 = node18.isNot();
        boolean boolean21 = strSet12.contains((java.lang.Object) boolean20);
        strSet12.clear();
        int int23 = strSet12.size();
        boolean boolean24 = strSet12.isEmpty();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node26.isName();
        boolean boolean28 = node26.isSwitch();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean31 = node26.hasChild(node30);
        com.google.javascript.rhino.Node node32 = com.google.javascript.jscomp.NodeUtil.newExpr(node26);
        int int33 = node26.getLength();
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        node26.setDirectives((java.util.Set<java.lang.String>) strSet37);
        java.lang.Object[] objArray40 = strSet37.toArray();
        java.lang.String[] strArray42 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        int int45 = strList43.size();
        boolean boolean46 = strSet37.containsAll((java.util.Collection<java.lang.String>) strList43);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean49 = node48.isName();
        boolean boolean50 = node48.isSwitch();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean53 = node48.hasChild(node52);
        com.google.javascript.rhino.Node node54 = com.google.javascript.jscomp.NodeUtil.newExpr(node48);
        int int55 = node48.getLength();
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet59 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet59, strArray58);
        node48.setDirectives((java.util.Set<java.lang.String>) strSet59);
        java.lang.Object[] objArray62 = strSet59.toArray();
        boolean boolean63 = strSet37.removeAll((java.util.Collection<java.lang.String>) strSet59);
        boolean boolean64 = strSet59.isEmpty();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean67 = node66.isName();
        boolean boolean68 = node66.isSwitch();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean71 = node66.hasChild(node70);
        com.google.javascript.rhino.Node node72 = com.google.javascript.jscomp.NodeUtil.newExpr(node66);
        int int73 = node66.getLength();
        java.lang.String[] strArray76 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet77 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet77, strArray76);
        node66.setDirectives((java.util.Set<java.lang.String>) strSet77);
        java.lang.String[] strArray81 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList82 = new java.util.ArrayList<java.lang.String>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList82, strArray81);
        int int84 = strList82.size();
        java.lang.String[] strArray86 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList87 = new java.util.ArrayList<java.lang.String>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList87, strArray86);
        int int89 = strList87.size();
        boolean boolean90 = strList82.removeAll((java.util.Collection<java.lang.String>) strList87);
        boolean boolean91 = strSet77.retainAll((java.util.Collection<java.lang.String>) strList87);
        strSet77.clear();
        java.util.Spliterator<java.lang.String> strSpliterator93 = strSet77.spliterator();
        boolean boolean94 = strSet59.removeAll((java.util.Collection<java.lang.String>) strSet77);
        boolean boolean95 = strSet59.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream96 = strSet59.parallelStream();
        boolean boolean97 = strSet12.retainAll((java.util.Collection<java.lang.String>) strSet59);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[hi!]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[hi!]");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(strSpliterator93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(strStream96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test09757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09757");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getReferences();
        boolean boolean3 = jSDocInfo0.isJavaDispatch();
        java.lang.String str4 = jSDocInfo0.toString();
        boolean boolean5 = jSDocInfo0.shouldPreserveTry();
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = jSDocInfo0.getTemplateTypeNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getThisType();
        boolean boolean8 = jSDocInfo0.isNoShadow();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getSuppressions();
        boolean boolean10 = strSet9.isEmpty();
        int int11 = strSet9.size();
        strSet9.clear();
        java.util.Iterator<java.lang.String> strItor13 = strSet9.iterator();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean15 = strSet9.add("NUMBER -1.0 [directives: [hi!]]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JSDocInfo" + "'", str4, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(strItor13);
    }

    @Test
    public void test09758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09758");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getReferences();
        com.google.common.collect.ImmutableList<java.lang.String> strList3 = jSDocInfo0.getTemplateTypeNames();
        java.util.Set<java.lang.String> strSet4 = jSDocInfo0.getParameterNames();
        boolean boolean5 = jSDocInfo0.isHidden();
        int int6 = jSDocInfo0.getParameterCount();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getThrownTypes();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getModifies();
        java.lang.CharSequence[] charSequenceArray10 = new java.lang.CharSequence[] { "Not declared as a constructor" };
        java.lang.CharSequence[] charSequenceArray12 = new java.lang.CharSequence[] { "Not declared as a constructor" };
        java.lang.CharSequence[] charSequenceArray14 = new java.lang.CharSequence[] { "Not declared as a constructor" };
        java.lang.CharSequence[] charSequenceArray16 = new java.lang.CharSequence[] { "Not declared as a constructor" };
        java.lang.CharSequence[] charSequenceArray18 = new java.lang.CharSequence[] { "Not declared as a constructor" };
        java.lang.CharSequence[][] charSequenceArray19 = new java.lang.CharSequence[][] { charSequenceArray10, charSequenceArray12, charSequenceArray14, charSequenceArray16, charSequenceArray18 };
        java.lang.CharSequence[][] charSequenceArray20 = strSet8.toArray(charSequenceArray19);
        boolean boolean21 = strSet8.isEmpty();
        strSet8.clear();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet24 = jSDocInfo23.getParameterNames();
        boolean boolean26 = jSDocInfo23.hasParameter("hi!");
        boolean boolean27 = jSDocInfo23.hasThisType();
        java.util.Set<java.lang.String> strSet28 = jSDocInfo23.getModifies();
        java.util.Iterator<java.lang.String> strItor29 = strSet28.iterator();
        java.util.Spliterator<java.lang.String> strSpliterator30 = strSet28.spliterator();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType31 = com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN;
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean36 = node35.isName();
        boolean boolean37 = node35.isSwitch();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean40 = node35.hasChild(node39);
        com.google.javascript.rhino.jstype.JSType jSType41 = null;
        node39.setJSType(jSType41);
        com.google.javascript.rhino.InputId inputId43 = com.google.javascript.jscomp.NodeUtil.getInputId(node39);
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship44 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType31, node33, node39);
        boolean boolean45 = node39.isQualifiedName();
        boolean boolean46 = node39.isQualifiedName();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean49 = node48.isFunction();
        boolean boolean50 = node48.isNot();
        java.lang.String str51 = node48.getSourceFileName();
        com.google.javascript.rhino.Node node52 = node39.srcrefTree(node48);
        com.google.javascript.rhino.JSDocInfo jSDocInfo53 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet54 = jSDocInfo53.getParameterNames();
        boolean boolean56 = jSDocInfo53.hasParameter("hi!");
        boolean boolean57 = jSDocInfo53.containsDeclaration();
        java.lang.String str58 = jSDocInfo53.getOriginalCommentString();
        boolean boolean59 = jSDocInfo53.isNoAlias();
        java.util.Set<java.lang.String> strSet60 = jSDocInfo53.getSuppressions();
        node39.setDirectives(strSet60);
        boolean boolean62 = strSet28.addAll((java.util.Collection<java.lang.String>) strSet60);
        java.util.Spliterator<java.lang.String> strSpliterator63 = strSet60.spliterator();
        boolean boolean64 = strSet8.addAll((java.util.Collection<java.lang.String>) strSet60);
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(charSequenceArray10);
        org.junit.Assert.assertNotNull(charSequenceArray12);
        org.junit.Assert.assertNotNull(charSequenceArray14);
        org.junit.Assert.assertNotNull(charSequenceArray16);
        org.junit.Assert.assertNotNull(charSequenceArray18);
        org.junit.Assert.assertNotNull(charSequenceArray19);
        org.junit.Assert.assertNotNull(charSequenceArray20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(strItor29);
        org.junit.Assert.assertNotNull(strSpliterator30);
        org.junit.Assert.assertTrue("'" + subclassType31 + "' != '" + com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN + "'", subclassType31.equals(com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN));
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(inputId43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strSpliterator63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test09759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09759");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN;
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        boolean boolean6 = node4.isSwitch();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node4.hasChild(node8);
        com.google.javascript.rhino.jstype.JSType jSType10 = null;
        node8.setJSType(jSType10);
        com.google.javascript.rhino.InputId inputId12 = com.google.javascript.jscomp.NodeUtil.getInputId(node8);
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship13 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node2, node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        com.google.javascript.rhino.jstype.JSType jSType16 = node15.getJSType();
        boolean boolean17 = node15.isScript();
        boolean boolean18 = node15.isTry();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node20.isName();
        boolean boolean22 = node20.isSwitch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node20.hasChild(node24);
        com.google.javascript.rhino.Node node26 = com.google.javascript.jscomp.NodeUtil.newExpr(node20);
        node20.setOptionalArg(true);
        node20.putBooleanProp((int) (short) -1, true);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean34 = node33.isName();
        boolean boolean35 = node33.isSwitch();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean38 = node33.hasChild(node37);
        com.google.javascript.rhino.Node node39 = com.google.javascript.jscomp.NodeUtil.newExpr(node33);
        boolean boolean40 = node39.isRegExp();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean43 = node42.isName();
        boolean boolean44 = node42.isSwitch();
        java.lang.String str45 = node42.toString();
        com.google.javascript.rhino.Node node46 = node39.useSourceInfoIfMissingFromForTree(node42);
        com.google.javascript.rhino.Node node47 = node20.useSourceInfoFromForTree(node39);
        boolean boolean48 = node20.hasOneChild();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean51 = node50.isName();
        boolean boolean52 = node50.isSwitch();
        java.lang.String str53 = node50.toString();
        boolean boolean54 = node50.isVar();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean57 = node56.isName();
        boolean boolean58 = node56.isSwitch();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean61 = node56.hasChild(node60);
        com.google.javascript.rhino.Node node62 = com.google.javascript.jscomp.NodeUtil.newExpr(node56);
        boolean boolean63 = node62.isRegExp();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean66 = node65.isName();
        boolean boolean67 = node65.isSwitch();
        java.lang.String str68 = node65.toString();
        com.google.javascript.rhino.Node node69 = node62.useSourceInfoIfMissingFromForTree(node65);
        com.google.javascript.jscomp.CodingConvention.Bind bind70 = new com.google.javascript.jscomp.CodingConvention.Bind(node20, node50, node62);
        boolean boolean71 = node50.isInstanceOf();
        com.google.javascript.rhino.Node node72 = node15.useSourceInfoIfMissingFrom(node50);
        boolean boolean73 = node72.isLocalResultCall();
        com.google.javascript.rhino.Node node74 = node72.getFirstChild();
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative76 = null;
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec77 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("", jSTypeNative76);
        com.google.javascript.rhino.Node node78 = null;
        com.google.javascript.rhino.Node node79 = assertionFunctionSpec77.getAssertedParam(node78);
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean82 = node81.isName();
        boolean boolean83 = node81.isSwitch();
        java.lang.String str84 = node81.toString();
        boolean boolean85 = node81.isWith();
        boolean boolean86 = node81.isSyntheticBlock();
        boolean boolean87 = node81.isAnd();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry88 = null;
        com.google.javascript.rhino.jstype.JSType jSType89 = assertionFunctionSpec77.getAssertedType(node81, jSTypeRegistry88);
        com.google.javascript.rhino.Node node91 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean92 = node91.isFunction();
        boolean boolean93 = node91.isNot();
        com.google.javascript.rhino.Node node94 = assertionFunctionSpec77.getAssertedParam(node91);
        boolean boolean95 = node94.isAssign();
        boolean boolean96 = node94.isSyntheticBlock();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship97 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node72, node94);
        com.google.javascript.rhino.JSDocInfo jSDocInfo98 = node72.getJSDocInfo();
        boolean boolean99 = com.google.javascript.jscomp.NodeUtil.isSymmetricOperation(node72);
        org.junit.Assert.assertTrue("'" + subclassType0 + "' != '" + com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN + "'", subclassType0.equals(com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN));
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(inputId12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "NUMBER -1.0" + "'", str45, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "NUMBER -1.0" + "'", str53, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "NUMBER -1.0" + "'", str68, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(node74);
        org.junit.Assert.assertNull(node79);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "NUMBER -1.0" + "'", str84, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(jSType89);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNull(jSDocInfo98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test09760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09760");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean4 = node3.isName();
        boolean boolean5 = node3.isSwitch();
        java.lang.String str6 = node3.toString();
        boolean boolean7 = node3.isVar();
        jSDocInfo0.setAssociatedNode(node3);
        boolean boolean9 = jSDocInfo0.isNoSideEffects();
        boolean boolean10 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility11 = jSDocInfo0.getVisibility();
        boolean boolean12 = jSDocInfo0.isConsistentIdGenerator();
        java.util.Set<java.lang.String> strSet13 = jSDocInfo0.getModifies();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "NUMBER -1.0" + "'", str6, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(visibility11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strSet13);
    }

    @Test
    public void test09761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09761");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(4095);
        sideEffectFlags1.clearAllFlags();
        int int3 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setThrows();
        boolean boolean5 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.setReturnsTainted();
        sideEffectFlags1.setMutatesArguments();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 31 + "'", int3 == 31);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test09762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09762");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        node1.setWasEmptyNode(true);
        boolean boolean4 = node1.isOr();
        boolean boolean5 = node1.isInstanceOf();
        boolean boolean6 = node1.isBlock();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node8.isName();
        boolean boolean10 = node8.isSwitch();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node8.hasChild(node12);
        java.lang.String str14 = node8.getSourceFileName();
        boolean boolean15 = node8.isWith();
        java.lang.Object obj17 = node8.getProp(0);
        boolean boolean18 = node8.isWhile();
        node1.addChildrenToFront(node8);
        boolean boolean20 = node1.isUnscopedQualifiedName();
        com.google.javascript.rhino.jstype.JSType jSType21 = node1.getJSType();
        boolean boolean22 = node1.isNumber();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(jSType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test09763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09763");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node2.hasChild(node6);
        com.google.javascript.rhino.Node node8 = com.google.javascript.jscomp.NodeUtil.newExpr(node2);
        node2.setOptionalArg(true);
        node2.putBooleanProp((int) (short) -1, true);
        int int14 = node2.getLineno();
        boolean boolean15 = node2.isDebugger();
        boolean boolean16 = node2.isCall();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean19 = node18.isName();
        boolean boolean20 = node18.isSwitch();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean23 = node18.hasChild(node22);
        boolean boolean24 = node22.isGetElem();
        int int25 = node22.getSourcePosition();
        boolean boolean26 = node22.isStringKey();
        boolean boolean27 = node22.isFunction();
        boolean boolean28 = node22.isName();
        boolean boolean29 = node22.isIf();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean32 = node31.isName();
        boolean boolean33 = node31.isSwitch();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean36 = node31.hasChild(node35);
        com.google.javascript.rhino.Node node37 = com.google.javascript.jscomp.NodeUtil.newExpr(node31);
        int int38 = node31.getLength();
        boolean boolean39 = node31.isNew();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean42 = node41.isName();
        boolean boolean43 = node41.isSwitch();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean46 = node41.hasChild(node45);
        com.google.javascript.rhino.Node node47 = com.google.javascript.jscomp.NodeUtil.newExpr(node41);
        int int48 = node41.getLength();
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        node41.setDirectives((java.util.Set<java.lang.String>) strSet52);
        boolean boolean56 = node41.getBooleanProp(41);
        com.google.javascript.rhino.Node node57 = node31.useSourceInfoFromForTree(node41);
        java.lang.String str58 = node31.toStringTree();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(0, node2, node22, node31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "NUMBER -1.0\n" + "'", str58, "NUMBER -1.0\n");
    }

    @Test
    public void test09764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09764");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getReferences();
        java.util.Collection<java.lang.String> strCollection3 = jSDocInfo0.getReferences();
        boolean boolean4 = jSDocInfo0.isDefine();
        int int5 = jSDocInfo0.getParameterCount();
        com.google.javascript.rhino.Node node6 = jSDocInfo0.getAssociatedNode();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertNull(strCollection3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(node6);
    }

    @Test
    public void test09765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09765");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getReferences();
        java.util.Collection<java.lang.String> strCollection3 = jSDocInfo0.getReferences();
        boolean boolean4 = jSDocInfo0.shouldPreserveTry();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getThisType();
        boolean boolean6 = jSDocInfo0.isConstructor();
        java.util.Collection<java.lang.String> strCollection7 = jSDocInfo0.getReferences();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertNull(strCollection3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(strCollection7);
    }

    @Test
    public void test09766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09766");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(1, "Node tree inequality:\nTree1:\nEXPR_RESULT 42\n    NUMBER -1.0\n\n\nTree2:\nSTRING Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n\n\n\nSubtree1: EXPR_RESULT 42\n    NUMBER -1.0\n\n\nSubtree2: STRING Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n\n", 47, 39);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("STRING Not declared as a constructor", (int) (byte) 1, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node9 = node4.removeChildAfter(node8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
    }

    @Test
    public void test09767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09767");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        boolean boolean5 = jSDocInfo0.isIdGenerator();
        com.google.javascript.rhino.Node node6 = jSDocInfo0.getAssociatedNode();
        java.lang.String str7 = jSDocInfo0.toString();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo0.getThrownTypes();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JSDocInfo" + "'", str7, "JSDocInfo");
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
    }

    @Test
    public void test09768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09768");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        int int5 = node4.getChildCount();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node7.isName();
        boolean boolean9 = node7.isSwitch();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node7.hasChild(node11);
        boolean boolean13 = node7.isVar();
        com.google.javascript.rhino.Node node14 = node7.getParent();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node16.isName();
        boolean boolean18 = node16.isSwitch();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node16.hasChild(node20);
        boolean boolean22 = node16.isVar();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node24.isName();
        boolean boolean26 = node24.isSwitch();
        java.lang.String str27 = node24.toString();
        boolean boolean28 = node24.isWith();
        com.google.javascript.rhino.Node node29 = node16.srcref(node24);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(130, node4, node7, node24, node33, 0, 15);
        boolean boolean37 = node24.isAnd();
        boolean boolean38 = node24.hasOneChild();
        boolean boolean39 = node24.isWhile();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "NUMBER -1.0" + "'", str27, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test09769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09769");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        int int8 = node1.getLength();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder9 = node1.new FileLevelJsDocBuilder();
        boolean boolean10 = node1.isAssignAdd();
        boolean boolean11 = node1.isBreak();
        node1.setSourceEncodedPositionForTree(42);
        boolean boolean14 = node1.isGetterDef();
        com.google.javascript.rhino.Node node15 = node1.getLastSibling();
        boolean boolean16 = node15.isTypeOf();
        boolean boolean17 = node15.isReturn();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test09770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09770");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        java.lang.String str6 = jSDocInfo0.getFileOverview();
        boolean boolean7 = jSDocInfo0.isExport();
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = jSDocInfo0.getTemplateTypeNames();
        java.lang.String str9 = jSDocInfo0.getMeaning();
        boolean boolean10 = jSDocInfo0.isNoSideEffects();
        boolean boolean11 = jSDocInfo0.isExpose();
        java.util.Set<java.lang.String> strSet12 = jSDocInfo0.getModifies();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strSet12);
    }

    @Test
    public void test09771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09771");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        java.lang.String str5 = node2.toString();
        boolean boolean6 = node2.isWith();
        int int8 = node2.getIntProp((int) ' ');
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder9 = node2.new FileLevelJsDocBuilder();
        int int10 = node2.getLength();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(143361, node2, (int) (byte) 1, 38);
        // The following exception was thrown during execution in test generation
        try {
            node13.setQuotedString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: not a StringNode");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "NUMBER -1.0" + "'", str5, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test09772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09772");
        boolean boolean1 = com.google.javascript.jscomp.NodeUtil.isValidQualifiedName("Node tree inequality:\nTree1:\nEXPR_RESULT\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: EXPR_RESULT\n\n\nSubtree2: NUMBER 100.0 100\n");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test09773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09773");
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative1 = null;
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec2 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("", jSTypeNative1);
        com.google.javascript.rhino.Node node3 = null;
        com.google.javascript.rhino.Node node4 = assertionFunctionSpec2.getAssertedParam(node3);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node6.isName();
        boolean boolean8 = node6.isSwitch();
        java.lang.String str9 = node6.toString();
        boolean boolean10 = node6.isWith();
        boolean boolean11 = node6.isSyntheticBlock();
        boolean boolean12 = node6.isAnd();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = null;
        com.google.javascript.rhino.jstype.JSType jSType14 = assertionFunctionSpec2.getAssertedType(node6, jSTypeRegistry13);
        double double15 = node6.getDouble();
        java.lang.String str16 = node6.getQualifiedName();
        com.google.javascript.rhino.Node[] nodeArray20 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(35, nodeArray20, 54, (int) (byte) 100);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(0, nodeArray20, 4, 27);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(0, nodeArray20);
        java.lang.Object obj29 = node27.getProp(51);
        boolean boolean30 = node27.isOr();
        int int31 = node6.getIndexOfChild(node27);
        boolean boolean32 = node6.isCase();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.JSDocInfo jSDocInfo33 = com.google.javascript.jscomp.NodeUtil.getFunctionJSDocInfo(node6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER -1.0" + "'", str9, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(jSType14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(nodeArray20);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test09774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09774");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.hasModifies();
        boolean boolean5 = jSDocInfo0.hasDescriptionForParameter("");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getParameterType("Not declared as a type name");
        boolean boolean8 = jSDocInfo0.isIdGenerator();
        java.lang.String str9 = jSDocInfo0.getLendsName();
        boolean boolean10 = jSDocInfo0.isDefine();
        boolean boolean11 = jSDocInfo0.isInterface();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo0.getType();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSTypeExpression12);
    }

    @Test
    public void test09775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09775");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '#');
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.clearAllFlags();
        boolean boolean4 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setThrows();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setMutatesGlobalState();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test09776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09776");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str1 = stringPosition0.getItem();
        int int2 = stringPosition0.getStartLine();
        int int3 = stringPosition0.getPositionOnStartLine();
        int int4 = stringPosition0.getEndLine();
        int int5 = stringPosition0.getStartLine();
        int int6 = stringPosition0.getStartLine();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test09777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09777");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 25, 42, 40962);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test09778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09778");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        boolean boolean7 = node5.isGetElem();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection8 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node5);
        boolean boolean9 = node5.isOptionalArg();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable10 = node5.getAncestors();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList12 = jSDocInfo11.getExtendedInterfaces();
        java.lang.String str13 = jSDocInfo11.getVersion();
        boolean boolean14 = jSDocInfo11.isInterface();
        boolean boolean15 = jSDocInfo11.isJavaDispatch();
        java.lang.String str16 = jSDocInfo11.getSourceName();
        boolean boolean18 = jSDocInfo11.hasDescriptionForParameter("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        boolean boolean19 = jSDocInfo11.hasBaseType();
        boolean boolean20 = jSDocInfo11.isExterns();
        node5.setJSDocInfo(jSDocInfo11);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean31 = node30.isName();
        boolean boolean32 = node30.isSwitch();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean35 = node30.hasChild(node34);
        com.google.javascript.rhino.Node node36 = com.google.javascript.jscomp.NodeUtil.newExpr(node30);
        int int37 = node30.getLength();
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        node30.setDirectives((java.util.Set<java.lang.String>) strSet41);
        java.util.Spliterator<java.lang.String> strSpliterator44 = strSet41.spliterator();
        boolean boolean45 = strSet27.retainAll((java.util.Collection<java.lang.String>) strSet41);
        java.lang.Object[] objArray46 = strSet27.toArray();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean49 = node48.isName();
        boolean boolean50 = node48.isSwitch();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean53 = node48.hasChild(node52);
        com.google.javascript.rhino.Node node54 = com.google.javascript.jscomp.NodeUtil.newExpr(node48);
        int int55 = node48.getLength();
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet59 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet59, strArray58);
        node48.setDirectives((java.util.Set<java.lang.String>) strSet59);
        boolean boolean62 = strSet59.isEmpty();
        boolean boolean63 = strSet27.containsAll((java.util.Collection<java.lang.String>) strSet59);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean66 = node65.isName();
        boolean boolean67 = node65.isSwitch();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean70 = node65.hasChild(node69);
        com.google.javascript.rhino.jstype.JSType jSType71 = null;
        node69.setJSType(jSType71);
        node69.setType(2);
        com.google.javascript.rhino.Node node75 = node69.getLastSibling();
        boolean boolean76 = strSet27.equals((java.lang.Object) node69);
        com.google.javascript.rhino.JSDocInfo jSDocInfo77 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList78 = jSDocInfo77.getExtendedInterfaces();
        java.lang.String str79 = jSDocInfo77.getVersion();
        boolean boolean80 = jSDocInfo77.isInterface();
        boolean boolean81 = jSDocInfo77.isJavaDispatch();
        java.lang.String str82 = jSDocInfo77.getSourceName();
        boolean boolean84 = jSDocInfo77.hasDescriptionForParameter("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        boolean boolean86 = jSDocInfo77.hasParameter("hi!");
        boolean boolean87 = strSet27.remove((java.lang.Object) jSDocInfo77);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression89 = jSDocInfo77.getParameterType("Node tree inequality:\nTree1:\nEXPR_RESULT\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: EXPR_RESULT\n\n\nSubtree2: NUMBER 100.0 100\n");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility90 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo77.setVisibility(visibility90);
        boolean boolean92 = jSDocInfo77.isHidden();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility93 = jSDocInfo77.getVisibility();
        jSDocInfo11.setVisibility(visibility93);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression96 = jSDocInfo11.getParameterType("java.io.IOException: Node tree inequality:\nTree1:\nEXPR_RESULT\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: EXPR_RESULT\n\n\nSubtree2: NUMBER 100.0 100\n");
        int int97 = jSDocInfo11.getParameterCount();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(nodeCollection8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(ancestorIterable10);
        org.junit.Assert.assertNotNull(jSTypeExpressionList12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strSpliterator44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[hi!]");
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList78);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(jSTypeExpression89);
        org.junit.Assert.assertTrue("'" + visibility90 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility90.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + visibility93 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility93.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNull(jSTypeExpression96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
    }

    @Test
    public void test09779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09779");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.hasParameter("hi!");
        boolean boolean4 = jSDocInfo0.hasThisType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getModifies();
        java.util.Iterator<java.lang.String> strItor6 = strSet5.iterator();
        java.util.Spliterator<java.lang.String> strSpliterator7 = strSet5.spliterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList9 = jSDocInfo8.getExtendedInterfaces();
        java.lang.String str10 = jSDocInfo8.getVersion();
        boolean boolean11 = jSDocInfo8.isInterface();
        boolean boolean12 = jSDocInfo8.isJavaDispatch();
        java.util.Set<java.lang.String> strSet13 = jSDocInfo8.getModifies();
        int int14 = strSet13.size();
        int int15 = strSet13.size();
        com.google.javascript.rhino.JSDocInfo jSDocInfo16 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList17 = jSDocInfo16.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection18 = jSDocInfo16.getReferences();
        boolean boolean19 = jSDocInfo16.isJavaDispatch();
        boolean boolean20 = jSDocInfo16.hasTypedefType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression21 = jSDocInfo16.getBaseType();
        boolean boolean22 = jSDocInfo16.isNoSideEffects();
        boolean boolean23 = strSet13.contains((java.lang.Object) boolean22);
        boolean boolean24 = strSet5.containsAll((java.util.Collection<java.lang.String>) strSet13);
        strSet13.clear();
        java.lang.Object[] objArray26 = strSet13.toArray();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertNotNull(strSpliterator7);
        org.junit.Assert.assertNotNull(jSTypeExpressionList9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList17);
        org.junit.Assert.assertNull(strCollection18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(jSTypeExpression21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
    }

    @Test
    public void test09780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09780");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        boolean boolean6 = node4.isSwitch();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node4.hasChild(node8);
        com.google.javascript.rhino.Node node10 = com.google.javascript.jscomp.NodeUtil.newExpr(node4);
        boolean boolean11 = node10.isRegExp();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean14 = node13.isName();
        boolean boolean15 = node13.isSwitch();
        java.lang.String str16 = node13.toString();
        com.google.javascript.rhino.Node node17 = node10.useSourceInfoIfMissingFromForTree(node13);
        java.lang.String str18 = node1.checkTreeEquals(node17);
        int int20 = node17.getIntProp(100);
        boolean boolean21 = node17.isCall();
        boolean boolean22 = node17.isNew();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "NUMBER -1.0" + "'", str16, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n" + "'", str18, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test09781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09781");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN;
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(49, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n", (int) (short) 100, (int) (short) 100);
        boolean boolean6 = node5.isTry();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node8.isName();
        boolean boolean10 = node8.isSwitch();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node8.hasChild(node12);
        com.google.javascript.rhino.Node node14 = com.google.javascript.jscomp.NodeUtil.newExpr(node8);
        node8.setOptionalArg(true);
        node8.putBooleanProp((int) (short) -1, true);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node21.isName();
        boolean boolean23 = node21.isSwitch();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean26 = node21.hasChild(node25);
        com.google.javascript.rhino.Node node27 = com.google.javascript.jscomp.NodeUtil.newExpr(node21);
        boolean boolean28 = node27.isRegExp();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean31 = node30.isName();
        boolean boolean32 = node30.isSwitch();
        java.lang.String str33 = node30.toString();
        com.google.javascript.rhino.Node node34 = node27.useSourceInfoIfMissingFromForTree(node30);
        com.google.javascript.rhino.Node node35 = node8.useSourceInfoFromForTree(node27);
        boolean boolean36 = node27.isFor();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node5, node27);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition38 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int39 = namePosition38.getPositionOnStartLine();
        int int40 = namePosition38.getStartLine();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean43 = node42.isName();
        boolean boolean44 = node42.isSwitch();
        java.lang.String str45 = node42.toString();
        boolean boolean46 = node42.isNumber();
        boolean boolean47 = node42.isComma();
        boolean boolean48 = node42.isDebugger();
        boolean boolean49 = node42.isWith();
        namePosition38.setItem(node42);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean53 = node52.isName();
        boolean boolean54 = node52.isSwitch();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean57 = node52.hasChild(node56);
        com.google.javascript.rhino.Node node58 = com.google.javascript.jscomp.NodeUtil.newExpr(node52);
        int int59 = node52.getLength();
        node52.addSuppression("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        java.lang.String str62 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(node52);
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship63 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node42, node52);
        boolean boolean64 = node52.isContinue();
        org.junit.Assert.assertTrue("'" + subclassType0 + "' != '" + com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN + "'", subclassType0.equals(com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "NUMBER -1.0" + "'", str33, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "NUMBER -1.0" + "'", str45, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test09782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09782");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getReturnDescription();
        boolean boolean3 = jSDocInfo0.hasFileOverview();
        java.lang.String str4 = jSDocInfo0.getDeprecationReason();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        int int10 = node9.getChildCount();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node12.isName();
        boolean boolean14 = node12.isSwitch();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node12.hasChild(node16);
        boolean boolean18 = node12.isVar();
        com.google.javascript.rhino.Node node19 = node12.getParent();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node21.isName();
        boolean boolean23 = node21.isSwitch();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean26 = node21.hasChild(node25);
        boolean boolean27 = node21.isVar();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean30 = node29.isName();
        boolean boolean31 = node29.isSwitch();
        java.lang.String str32 = node29.toString();
        boolean boolean33 = node29.isWith();
        com.google.javascript.rhino.Node node34 = node21.srcref(node29);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(130, node9, node12, node29, node38, 0, 15);
        boolean boolean42 = node29.isTypeOf();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean45 = node44.isName();
        double double46 = node44.getDouble();
        node29.addChildToFront(node44);
        jSDocInfo0.setAssociatedNode(node29);
        java.lang.String str49 = jSDocInfo0.getVersion();
        boolean boolean50 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression51 = jSDocInfo0.getBaseType();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "NUMBER -1.0" + "'", str32, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-1.0d) + "'", double46 == (-1.0d));
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(jSTypeExpression51);
    }

    @Test
    public void test09783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09783");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        java.lang.String str4 = node1.toString();
        boolean boolean5 = node1.isWith();
        int int7 = node1.getIntProp((int) ' ');
        boolean boolean8 = node1.isNE();
        boolean boolean9 = node1.isNE();
        boolean boolean10 = node1.isNE();
        com.google.javascript.rhino.Node node11 = node1.cloneNode();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER -1.0" + "'", str4, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
    }

    @Test
    public void test09784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09784");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.hasParameter("hi!");
        boolean boolean4 = jSDocInfo0.hasThisType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getModifies();
        java.util.Collection<java.lang.String> strCollection6 = jSDocInfo0.getAuthors();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getTypedefType();
        jSDocInfo0.setLicense("Not declared as a type name");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList10 = jSDocInfo0.getThrownTypes();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getTypedefType();
        boolean boolean13 = jSDocInfo0.hasDescriptionForParameter("");
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        int int18 = strList16.size();
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        int int23 = strList21.size();
        boolean boolean24 = strList16.removeAll((java.util.Collection<java.lang.String>) strList21);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node26.isName();
        boolean boolean28 = node26.isSwitch();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean31 = node26.hasChild(node30);
        com.google.javascript.rhino.Node node32 = com.google.javascript.jscomp.NodeUtil.newExpr(node26);
        int int33 = node32.getType();
        com.google.javascript.rhino.Node node34 = node32.getFirstChild();
        boolean boolean35 = strList21.contains((java.lang.Object) node34);
        boolean boolean36 = node34.hasChildren();
        jSDocInfo0.setAssociatedNode(node34);
        java.util.Set<java.lang.String> strSet38 = jSDocInfo0.getSuppressions();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNull(strCollection6);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNotNull(jSTypeExpressionList10);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 130 + "'", int33 == 130);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strSet38);
    }

    @Test
    public void test09785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09785");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        java.lang.String str7 = node1.getSourceFileName();
        boolean boolean8 = node1.isVar();
        java.lang.String str9 = com.google.javascript.jscomp.NodeUtil.getSourceName(node1);
        com.google.javascript.rhino.Node node10 = node1.getLastChild();
        int int11 = node1.getSourceOffset();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags13 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '#');
        sideEffectFlags13.setMutatesArguments();
        sideEffectFlags13.setThrows();
        boolean boolean16 = sideEffectFlags13.areAllFlagsSet();
        sideEffectFlags13.clearSideEffectFlags();
        sideEffectFlags13.setMutatesArguments();
        sideEffectFlags13.setAllFlags();
        // The following exception was thrown during execution in test generation
        try {
            node1.setSideEffectFlags(sideEffectFlags13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test09786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09786");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        boolean boolean7 = node1.isVar();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean10 = node9.isName();
        boolean boolean11 = node9.isSwitch();
        java.lang.String str12 = node9.toString();
        boolean boolean13 = node9.isWith();
        com.google.javascript.rhino.Node node14 = node1.srcref(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node16.isName();
        boolean boolean18 = node16.isSwitch();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node16.hasChild(node20);
        com.google.javascript.rhino.jstype.JSType jSType22 = null;
        node20.setJSType(jSType22);
        node20.setType(2);
        int int26 = node14.getIndexOfChild(node20);
        boolean boolean27 = node20.isCase();
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = node20.getJSDocInfo();
        boolean boolean29 = node20.isExprResult();
        node20.putBooleanProp(130, true);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "NUMBER -1.0" + "'", str12, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSDocInfo28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test09787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09787");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.hasParameter("hi!");
        boolean boolean4 = jSDocInfo0.hasThisType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.JSDocInfo jSDocInfo6 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo6.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection8 = jSDocInfo6.getReferences();
        boolean boolean9 = jSDocInfo6.isJavaDispatch();
        boolean boolean10 = jSDocInfo6.containsDeclaration();
        boolean boolean11 = jSDocInfo6.hasEnumParameterType();
        com.google.common.collect.ImmutableList<java.lang.String> strList12 = jSDocInfo6.getTemplateTypeNames();
        java.util.stream.Stream<java.lang.String> strStream13 = strList12.stream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList15 = jSDocInfo14.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection16 = jSDocInfo14.getReferences();
        boolean boolean17 = jSDocInfo14.isJavaDispatch();
        boolean boolean18 = jSDocInfo14.containsDeclaration();
        boolean boolean19 = jSDocInfo14.hasEnumParameterType();
        com.google.common.collect.ImmutableList<java.lang.String> strList20 = jSDocInfo14.getTemplateTypeNames();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean23 = node22.isName();
        boolean boolean24 = node22.isSwitch();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node22.hasChild(node26);
        com.google.javascript.rhino.Node node28 = com.google.javascript.jscomp.NodeUtil.newExpr(node22);
        boolean boolean29 = node28.isRegExp();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean32 = node31.isName();
        boolean boolean33 = node31.isSwitch();
        java.lang.String str34 = node31.toString();
        com.google.javascript.rhino.Node node35 = node28.useSourceInfoIfMissingFromForTree(node31);
        com.google.javascript.rhino.jstype.JSType jSType36 = null;
        node31.setJSType(jSType36);
        boolean boolean38 = node31.isBlock();
        boolean boolean39 = strList20.equals((java.lang.Object) boolean38);
        java.util.RandomAccess[] randomAccessArray40 = new java.util.RandomAccess[] { strList12, strList20 };
        java.util.RandomAccess[] randomAccessArray41 = strSet5.toArray(randomAccessArray40);
        boolean boolean42 = strSet5.isEmpty();
        int int43 = strSet5.size();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags45 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '#');
        sideEffectFlags45.setMutatesArguments();
        sideEffectFlags45.setThrows();
        sideEffectFlags45.clearAllFlags();
        sideEffectFlags45.setMutatesThis();
        java.lang.Class<?> wildcardClass50 = sideEffectFlags45.getClass();
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet52 = jSDocInfo51.getParameterNames();
        boolean boolean54 = jSDocInfo51.hasParameter("hi!");
        boolean boolean55 = jSDocInfo51.hasThisType();
        boolean boolean56 = jSDocInfo51.isIdGenerator();
        jSDocInfo51.setLicense("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        boolean boolean59 = jSDocInfo51.isOverride();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean62 = node61.isName();
        boolean boolean63 = node61.isSwitch();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean66 = node61.hasChild(node65);
        com.google.javascript.rhino.Node node67 = com.google.javascript.jscomp.NodeUtil.newExpr(node61);
        boolean boolean68 = node67.isRegExp();
        jSDocInfo51.setAssociatedNode(node67);
        boolean boolean71 = jSDocInfo51.hasParameter("Not declared as a type name");
        boolean boolean72 = jSDocInfo51.isInterface();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression73 = jSDocInfo51.getBaseType();
        java.lang.Class<?> wildcardClass74 = jSDocInfo51.getClass();
        java.lang.reflect.Type[] typeArray75 = new java.lang.reflect.Type[] { wildcardClass50, wildcardClass74 };
        java.lang.reflect.Type[] typeArray76 = strSet5.toArray(typeArray75);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertNull(strCollection8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(strStream13);
        org.junit.Assert.assertNotNull(jSTypeExpressionList15);
        org.junit.Assert.assertNull(strCollection16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "NUMBER -1.0" + "'", str34, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(randomAccessArray40);
        org.junit.Assert.assertNotNull(randomAccessArray41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(jSTypeExpression73);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(typeArray75);
        org.junit.Assert.assertNotNull(typeArray76);
    }

    @Test
    public void test09788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09788");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node2.hasChild(node6);
        com.google.javascript.rhino.Node node8 = com.google.javascript.jscomp.NodeUtil.newExpr(node2);
        boolean boolean9 = node8.isRegExp();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node11.isName();
        boolean boolean13 = node11.isSwitch();
        java.lang.String str14 = node11.toString();
        com.google.javascript.rhino.Node node15 = node8.useSourceInfoIfMissingFromForTree(node11);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(50, node15);
        com.google.javascript.rhino.Node node17 = node16.cloneNode();
        com.google.javascript.rhino.Node node18 = node16.cloneNode();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node20.isName();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean24 = node23.isName();
        boolean boolean25 = node23.isSwitch();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean28 = node23.hasChild(node27);
        com.google.javascript.rhino.Node node29 = com.google.javascript.jscomp.NodeUtil.newExpr(node23);
        boolean boolean30 = node29.isRegExp();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean33 = node32.isName();
        boolean boolean34 = node32.isSwitch();
        java.lang.String str35 = node32.toString();
        com.google.javascript.rhino.Node node36 = node29.useSourceInfoIfMissingFromForTree(node32);
        java.lang.String str37 = node20.checkTreeEquals(node36);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean41 = node40.isName();
        boolean boolean42 = node40.isSwitch();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean45 = node40.hasChild(node44);
        boolean boolean46 = node44.isGetElem();
        node20.putProp((int) (short) 100, (java.lang.Object) boolean46);
        boolean boolean48 = node20.isCatch();
        boolean boolean49 = node20.isRegExp();
        boolean boolean50 = node20.isSyntheticBlock();
        boolean boolean51 = node20.isWith();
        boolean boolean52 = node16.isEquivalentToTyped(node20);
        boolean boolean53 = node16.isVoid();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "NUMBER -1.0" + "'", str14, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "NUMBER -1.0" + "'", str35, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n" + "'", str37, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test09789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09789");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        java.lang.String str7 = node1.getSourceFileName();
        boolean boolean8 = node1.isWith();
        com.google.javascript.rhino.Node node9 = node1.getLastChild();
        boolean boolean10 = node1.isNumber();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node12.isName();
        boolean boolean14 = node12.isSwitch();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node12.hasChild(node16);
        com.google.javascript.rhino.Node node18 = com.google.javascript.jscomp.NodeUtil.newExpr(node12);
        node12.setOptionalArg(true);
        node12.putBooleanProp((int) (short) -1, true);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean26 = node25.isName();
        boolean boolean27 = node25.isSwitch();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean30 = node25.hasChild(node29);
        com.google.javascript.rhino.Node node31 = com.google.javascript.jscomp.NodeUtil.newExpr(node25);
        boolean boolean32 = node31.isRegExp();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean35 = node34.isName();
        boolean boolean36 = node34.isSwitch();
        java.lang.String str37 = node34.toString();
        com.google.javascript.rhino.Node node38 = node31.useSourceInfoIfMissingFromForTree(node34);
        com.google.javascript.rhino.Node node39 = node12.useSourceInfoFromForTree(node31);
        com.google.javascript.rhino.Node node40 = node1.clonePropsFrom(node39);
        com.google.javascript.rhino.Node node41 = node39.getFirstChild();
        boolean boolean42 = node39.isIf();
        com.google.javascript.rhino.Node node43 = node39.getLastSibling();
        boolean boolean44 = node39.isGetProp();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "NUMBER -1.0" + "'", str37, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test09790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09790");
        com.google.javascript.rhino.Node node0 = null;
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean4 = node3.isName();
        boolean boolean5 = node3.isSwitch();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node3.hasChild(node7);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node10.hasChild(node14);
        com.google.javascript.rhino.Node node16 = com.google.javascript.jscomp.NodeUtil.newExpr(node10);
        boolean boolean17 = node16.isRegExp();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean20 = node19.isName();
        boolean boolean21 = node19.isSwitch();
        java.lang.String str22 = node19.toString();
        com.google.javascript.rhino.Node node23 = node16.useSourceInfoIfMissingFromForTree(node19);
        boolean boolean24 = node7.isEquivalentToTyped(node19);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node26.isName();
        boolean boolean28 = node26.isSwitch();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean31 = node26.hasChild(node30);
        com.google.javascript.rhino.jstype.JSType jSType32 = null;
        node30.setJSType(jSType32);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(45, node7, node30, 10, 2);
        java.util.Set<java.lang.String> strSet37 = null;
        node7.setDirectives(strSet37);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean41 = node40.isName();
        boolean boolean42 = node40.isSwitch();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean45 = node40.hasChild(node44);
        boolean boolean46 = node40.isComma();
        com.google.javascript.jscomp.CodingConvention.Bind bind47 = new com.google.javascript.jscomp.CodingConvention.Bind(node0, node7, node40);
        boolean boolean48 = node7.isHook();
        int int49 = node7.getLength();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean52 = node51.isName();
        boolean boolean53 = node51.isSwitch();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean56 = node51.hasChild(node55);
        com.google.javascript.rhino.Node node57 = com.google.javascript.jscomp.NodeUtil.newExpr(node51);
        node51.setOptionalArg(true);
        node51.putBooleanProp((int) (short) -1, true);
        boolean boolean63 = node51.hasChildren();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean66 = node65.isName();
        boolean boolean67 = node65.isSwitch();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean70 = node65.hasChild(node69);
        com.google.javascript.rhino.Node node71 = com.google.javascript.jscomp.NodeUtil.newExpr(node65);
        boolean boolean72 = node71.isRegExp();
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean75 = node74.isName();
        boolean boolean76 = node74.isSwitch();
        java.lang.String str77 = node74.toString();
        com.google.javascript.rhino.Node node78 = node71.useSourceInfoIfMissingFromForTree(node74);
        com.google.javascript.rhino.jstype.JSType jSType79 = null;
        node74.setJSType(jSType79);
        boolean boolean81 = node74.isGetterDef();
        boolean boolean82 = node74.isNoSideEffectsCall();
        node51.addChildrenToBack(node74);
        node51.putIntProp(39, (int) (short) 1);
        com.google.javascript.rhino.Node node87 = node7.useSourceInfoIfMissingFromForTree(node51);
        com.google.javascript.rhino.Node node89 = com.google.javascript.rhino.Node.newString("Not declared as a constructor");
        boolean boolean90 = node89.isDebugger();
        com.google.javascript.rhino.Node node91 = node7.useSourceInfoIfMissingFromForTree(node89);
        int int92 = node89.getType();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "NUMBER -1.0" + "'", str22, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "NUMBER -1.0" + "'", str77, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 40 + "'", int92 == 40);
    }

    @Test
    public void test09791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09791");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        int int8 = node1.getLength();
        node1.addSuppression("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList12 = jSDocInfo11.getExtendedInterfaces();
        java.lang.String str13 = jSDocInfo11.getVersion();
        boolean boolean14 = jSDocInfo11.isInterface();
        boolean boolean15 = jSDocInfo11.isNoAlias();
        boolean boolean16 = jSDocInfo11.isHidden();
        boolean boolean17 = jSDocInfo11.isDeprecated();
        node1.setJSDocInfo(jSDocInfo11);
        java.lang.String str19 = jSDocInfo11.getBlockDescription();
        boolean boolean20 = jSDocInfo11.isExport();
        boolean boolean21 = jSDocInfo11.isConstructor();
        java.lang.String str22 = jSDocInfo11.getDeprecationReason();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test09792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09792");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        boolean boolean8 = node7.isRegExp();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        java.lang.String str13 = node10.toString();
        com.google.javascript.rhino.Node node14 = node7.useSourceInfoIfMissingFromForTree(node10);
        node7.setLineno(42);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) (byte) 0);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node21.isFunction();
        boolean boolean23 = node21.isUnscopedQualifiedName();
        boolean boolean24 = node21.isEmpty();
        boolean boolean25 = node21.isEmpty();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean28 = node27.isName();
        boolean boolean29 = node27.isSwitch();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean32 = node27.hasChild(node31);
        boolean boolean33 = node27.isVar();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean36 = node35.isName();
        boolean boolean37 = node35.isSwitch();
        java.lang.String str38 = node35.toString();
        boolean boolean39 = node35.isWith();
        com.google.javascript.rhino.Node node40 = node27.srcref(node35);
        node27.detachChildren();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        com.google.javascript.jscomp.CodingConvention.Bind bind44 = new com.google.javascript.jscomp.CodingConvention.Bind(node21, node27, node43);
        boolean boolean45 = node21.isNew();
        java.lang.String str49 = node21.toString(false, true, true);
        com.google.javascript.rhino.Node node50 = node21.cloneNode();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(24, node19, node21, 46, 32);
        node7.addChildrenToBack(node53);
        boolean boolean55 = node7.isCatch();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "NUMBER -1.0" + "'", str13, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "NUMBER -1.0" + "'", str38, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "NUMBER -1.0" + "'", str49, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test09793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09793");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN;
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        boolean boolean6 = node4.isSwitch();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node4.hasChild(node8);
        com.google.javascript.rhino.jstype.JSType jSType10 = null;
        node8.setJSType(jSType10);
        com.google.javascript.rhino.InputId inputId12 = com.google.javascript.jscomp.NodeUtil.getInputId(node8);
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship13 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node2, node8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean16 = node15.isName();
        boolean boolean17 = node15.isSwitch();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean20 = node15.hasChild(node19);
        com.google.javascript.rhino.Node node21 = com.google.javascript.jscomp.NodeUtil.newExpr(node15);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean24 = node23.isName();
        boolean boolean25 = node23.isSwitch();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean28 = node23.hasChild(node27);
        com.google.javascript.rhino.Node node29 = com.google.javascript.jscomp.NodeUtil.newExpr(node23);
        node23.setOptionalArg(true);
        node23.putBooleanProp((int) (short) -1, true);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean37 = node36.isName();
        boolean boolean38 = node36.isSwitch();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean41 = node36.hasChild(node40);
        com.google.javascript.rhino.Node node42 = com.google.javascript.jscomp.NodeUtil.newExpr(node36);
        boolean boolean43 = node42.isRegExp();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean46 = node45.isName();
        boolean boolean47 = node45.isSwitch();
        java.lang.String str48 = node45.toString();
        com.google.javascript.rhino.Node node49 = node42.useSourceInfoIfMissingFromForTree(node45);
        com.google.javascript.rhino.Node node50 = node23.useSourceInfoFromForTree(node42);
        boolean boolean51 = node21.hasChild(node23);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean54 = node53.isName();
        boolean boolean55 = node53.isSwitch();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean58 = node53.hasChild(node57);
        boolean boolean59 = node57.isGetElem();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection60 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node57);
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship61 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node23, node57);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable62 = node23.children();
        org.junit.Assert.assertTrue("'" + subclassType0 + "' != '" + com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN + "'", subclassType0.equals(com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN));
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(inputId12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "NUMBER -1.0" + "'", str48, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(nodeCollection60);
        org.junit.Assert.assertNotNull(nodeIterable62);
    }

    @Test
    public void test09794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09794");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getReferences();
        com.google.common.collect.ImmutableList<java.lang.String> strList3 = jSDocInfo0.getTemplateTypeNames();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection4 = jSDocInfo0.getTypeNodes();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        boolean boolean7 = jSDocInfo0.isNoCompile();
        java.lang.String str8 = jSDocInfo0.getDeprecationReason();
        java.lang.String str10 = jSDocInfo0.getDescriptionForParameter("NUMBER -1.0 [is_var_args_param: 100]");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getTypedefType();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(nodeCollection4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(jSTypeExpression11);
    }

    @Test
    public void test09795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09795");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node8.isName();
        boolean boolean10 = node8.isSwitch();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node8.hasChild(node12);
        com.google.javascript.rhino.Node node14 = com.google.javascript.jscomp.NodeUtil.newExpr(node8);
        boolean boolean15 = node14.isRegExp();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node17.isName();
        boolean boolean19 = node17.isSwitch();
        java.lang.String str20 = node17.toString();
        com.google.javascript.rhino.Node node21 = node14.useSourceInfoIfMissingFromForTree(node17);
        boolean boolean22 = node5.isEquivalentToTyped(node17);
        com.google.javascript.rhino.InputId inputId23 = null;
        node17.setInputId(inputId23);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node26.isName();
        boolean boolean28 = node26.isSwitch();
        boolean boolean29 = node26.isNull();
        boolean boolean30 = node26.isFunction();
        boolean boolean31 = node17.hasChild(node26);
        boolean boolean32 = node26.isNot();
        boolean boolean33 = node26.isQualifiedName();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "NUMBER -1.0" + "'", str20, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test09796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09796");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node7.isName();
        boolean boolean9 = node7.isSwitch();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (byte) 100, node2, node4, node7);
        boolean boolean11 = node4.isBreak();
        com.google.javascript.rhino.Node node12 = node4.cloneNode();
        boolean boolean13 = node4.isScript();
        boolean boolean14 = node4.isTypeOf();
        boolean boolean15 = node4.isDebugger();
        boolean boolean16 = node4.isEmpty();
        java.lang.Class<?> wildcardClass17 = node4.getClass();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test09797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09797");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition5 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition7 = marker0.getDescription();
        org.junit.Assert.assertNull(typePosition1);
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(stringPosition3);
        org.junit.Assert.assertNull(typePosition4);
        org.junit.Assert.assertNull(stringPosition5);
        org.junit.Assert.assertNull(stringPosition6);
        org.junit.Assert.assertNull(stringPosition7);
    }

    @Test
    public void test09798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09798");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(0, "NUMBER -1.0", (int) '#', 44);
        boolean boolean5 = node4.isUnscopedQualifiedName();
        boolean boolean6 = node4.isAdd();
        java.lang.String str7 = node4.getQualifiedName();
        com.google.javascript.rhino.jstype.JSType jSType8 = node4.getJSType();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(jSType8);
    }

    @Test
    public void test09799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09799");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        java.lang.String str4 = node1.toString();
        boolean boolean5 = node1.isWith();
        int int7 = node1.getIntProp((int) ' ');
        boolean boolean8 = node1.isNE();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node10.hasChild(node14);
        com.google.javascript.rhino.jstype.JSType jSType16 = null;
        node14.setJSType(jSType16);
        node14.setType(2);
        com.google.javascript.rhino.Node node20 = node14.getLastSibling();
        com.google.javascript.rhino.Node node21 = node1.srcref(node20);
        node21.setLength(27);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER -1.0" + "'", str4, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
    }

    @Test
    public void test09800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09800");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(41, 44, 104);
        boolean boolean4 = node3.isAssign();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test09801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09801");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node7.isName();
        boolean boolean9 = node7.isSwitch();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (byte) 100, node2, node4, node7);
        java.lang.String str11 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(node2);
        node2.detachChildren();
        boolean boolean13 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node2);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(0, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n", 4, 4095);
        boolean boolean19 = node18.isQualifiedName();
        boolean boolean20 = node18.isFunction();
        node18.putBooleanProp((int) '#', false);
        boolean boolean24 = node2.isEquivalentToTyped(node18);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node25 = com.google.javascript.jscomp.NodeUtil.getFunctionParameters(node18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test09802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09802");
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative1 = null;
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec2 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("", jSTypeNative1);
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        double double6 = node4.getDouble();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = null;
        com.google.javascript.rhino.jstype.JSType jSType8 = assertionFunctionSpec2.getAssertedType(node4, jSTypeRegistry7);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node10.hasChild(node14);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node17.isName();
        boolean boolean19 = node17.isSwitch();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node17.hasChild(node21);
        com.google.javascript.rhino.Node node23 = com.google.javascript.jscomp.NodeUtil.newExpr(node17);
        boolean boolean24 = node23.isRegExp();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node26.isName();
        boolean boolean28 = node26.isSwitch();
        java.lang.String str29 = node26.toString();
        com.google.javascript.rhino.Node node30 = node23.useSourceInfoIfMissingFromForTree(node26);
        boolean boolean31 = node14.isEquivalentToTyped(node26);
        com.google.javascript.rhino.InputId inputId32 = null;
        node26.setInputId(inputId32);
        com.google.javascript.rhino.Node node34 = assertionFunctionSpec2.getAssertedParam(node26);
        boolean boolean35 = node26.isThis();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean39 = node38.isName();
        boolean boolean40 = node38.isSwitch();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean43 = node38.hasChild(node42);
        com.google.javascript.rhino.jstype.JSType jSType44 = null;
        node42.setJSType(jSType44);
        node42.setType(2);
        boolean boolean48 = node42.isIn();
        boolean boolean49 = node42.wasEmptyNode();
        node42.putBooleanProp(130, true);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("BITXOR 0\n", 4095, (int) (byte) 100);
        node56.setType((int) (byte) 0);
        boolean boolean59 = node56.isLabel();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile60 = node56.getStaticSourceFile();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean63 = node62.isName();
        boolean boolean64 = node62.isSwitch();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean67 = node62.hasChild(node66);
        boolean boolean68 = node62.isReturn();
        java.lang.Object obj70 = node62.getProp(0);
        node62.setIsSyntheticBlock(true);
        boolean boolean73 = node62.isBreak();
        boolean boolean74 = node62.isComma();
        com.google.javascript.rhino.Node node75 = node56.copyInformationFrom(node62);
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node(30, node42, node62);
        boolean boolean77 = node42.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node78 = node26.srcref(node42);
        node26.setSourceEncodedPositionForTree(0);
        int int81 = node26.getCharno();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1.0d) + "'", double6 == (-1.0d));
        org.junit.Assert.assertNull(jSType8);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "NUMBER -1.0" + "'", str29, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(staticSourceFile60);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test09803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09803");
        com.google.javascript.rhino.Node node0 = null;
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean4 = node3.isName();
        boolean boolean5 = node3.isSwitch();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node3.hasChild(node7);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node10.hasChild(node14);
        com.google.javascript.rhino.Node node16 = com.google.javascript.jscomp.NodeUtil.newExpr(node10);
        boolean boolean17 = node16.isRegExp();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean20 = node19.isName();
        boolean boolean21 = node19.isSwitch();
        java.lang.String str22 = node19.toString();
        com.google.javascript.rhino.Node node23 = node16.useSourceInfoIfMissingFromForTree(node19);
        boolean boolean24 = node7.isEquivalentToTyped(node19);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node26.isName();
        boolean boolean28 = node26.isSwitch();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean31 = node26.hasChild(node30);
        com.google.javascript.rhino.jstype.JSType jSType32 = null;
        node30.setJSType(jSType32);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(45, node7, node30, 10, 2);
        java.util.Set<java.lang.String> strSet37 = null;
        node7.setDirectives(strSet37);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean41 = node40.isName();
        boolean boolean42 = node40.isSwitch();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean45 = node40.hasChild(node44);
        boolean boolean46 = node40.isComma();
        com.google.javascript.jscomp.CodingConvention.Bind bind47 = new com.google.javascript.jscomp.CodingConvention.Bind(node0, node7, node40);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean51 = node50.isName();
        boolean boolean52 = node50.isSwitch();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean55 = node50.hasChild(node54);
        com.google.javascript.rhino.Node node56 = com.google.javascript.jscomp.NodeUtil.newExpr(node50);
        boolean boolean57 = node56.isRegExp();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean60 = node59.isName();
        boolean boolean61 = node59.isSwitch();
        java.lang.String str62 = node59.toString();
        com.google.javascript.rhino.Node node63 = node56.useSourceInfoIfMissingFromForTree(node59);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(50, node63);
        com.google.javascript.rhino.Node node65 = node7.srcref(node64);
        node65.removeProp(0);
        boolean boolean68 = node65.isLabelName();
        node65.setLineno(54);
        boolean boolean71 = node65.isContinue();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean74 = node73.isName();
        boolean boolean75 = node73.isSwitch();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean78 = node73.hasChild(node77);
        java.lang.String str79 = com.google.javascript.jscomp.NodeUtil.getSourceName(node73);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable80 = node73.getAncestors();
        boolean boolean81 = node73.isVarArgs();
        node65.addChildrenToBack(node73);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "NUMBER -1.0" + "'", str22, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "NUMBER -1.0" + "'", str62, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(ancestorIterable80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test09804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09804");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node5.isFunction();
        boolean boolean7 = node5.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node8 = node1.useSourceInfoIfMissingFrom(node5);
        boolean boolean9 = node8.isQuotedString();
        node8.setSourceFileForTesting("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node8);
        java.lang.String str13 = staticSourceFile12.getName();
        java.lang.String str14 = staticSourceFile12.getName();
        int int16 = staticSourceFile12.getLineOfOffset(47);
        int int18 = staticSourceFile12.getColumnOfOffset(17);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(staticSourceFile12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n" + "'", str13, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n" + "'", str14, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test09805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09805");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.jstype.JSType jSType7 = null;
        node5.setJSType(jSType7);
        com.google.javascript.rhino.InputId inputId9 = com.google.javascript.jscomp.NodeUtil.getInputId(node5);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node11.isName();
        boolean boolean13 = node11.isSwitch();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean16 = node11.hasChild(node15);
        com.google.javascript.rhino.Node node17 = com.google.javascript.jscomp.NodeUtil.newExpr(node11);
        int int18 = node11.getLength();
        boolean boolean19 = node11.isNew();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node21.isName();
        boolean boolean23 = node21.isSwitch();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean26 = node21.hasChild(node25);
        com.google.javascript.rhino.Node node27 = com.google.javascript.jscomp.NodeUtil.newExpr(node21);
        int int28 = node21.getLength();
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet32 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet32, strArray31);
        node21.setDirectives((java.util.Set<java.lang.String>) strSet32);
        boolean boolean36 = node21.getBooleanProp(41);
        com.google.javascript.rhino.Node node37 = node11.useSourceInfoFromForTree(node21);
        boolean boolean38 = node21.isGetElem();
        com.google.javascript.rhino.Node node39 = node5.useSourceInfoFrom(node21);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean42 = node41.isName();
        boolean boolean43 = node41.isSwitch();
        java.lang.String str44 = node41.toString();
        boolean boolean45 = node41.isNumber();
        boolean boolean46 = node41.isComma();
        boolean boolean47 = node41.isDebugger();
        boolean boolean48 = node41.isWith();
        node5.addChildrenToBack(node41);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile50 = null;
        node5.setStaticSourceFile(staticSourceFile50);
        java.lang.Object obj53 = node5.getProp(46);
        boolean boolean54 = node5.isName();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(inputId9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "NUMBER -1.0" + "'", str44, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test09806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09806");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.jstype.JSType jSType7 = null;
        node5.setJSType(jSType7);
        node5.addSuppression("");
        int int11 = node5.getLineno();
        boolean boolean12 = node5.isOr();
        boolean boolean13 = node5.isReturn();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node16.isName();
        boolean boolean18 = node16.isSwitch();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node16.hasChild(node20);
        com.google.javascript.rhino.Node node22 = com.google.javascript.jscomp.NodeUtil.newExpr(node16);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node24.isName();
        boolean boolean26 = node24.isSwitch();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean29 = node24.hasChild(node28);
        com.google.javascript.rhino.Node node30 = com.google.javascript.jscomp.NodeUtil.newExpr(node24);
        node24.setOptionalArg(true);
        node24.putBooleanProp((int) (short) -1, true);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean38 = node37.isName();
        boolean boolean39 = node37.isSwitch();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean42 = node37.hasChild(node41);
        com.google.javascript.rhino.Node node43 = com.google.javascript.jscomp.NodeUtil.newExpr(node37);
        boolean boolean44 = node43.isRegExp();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean47 = node46.isName();
        boolean boolean48 = node46.isSwitch();
        java.lang.String str49 = node46.toString();
        com.google.javascript.rhino.Node node50 = node43.useSourceInfoIfMissingFromForTree(node46);
        com.google.javascript.rhino.Node node51 = node24.useSourceInfoFromForTree(node43);
        boolean boolean52 = node22.hasChild(node24);
        node22.setIsSyntheticBlock(true);
        boolean boolean55 = node22.isVar();
        node5.putProp((int) (byte) 1, (java.lang.Object) node22);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean60 = node59.isName();
        boolean boolean61 = node59.isSwitch();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean64 = node59.hasChild(node63);
        com.google.javascript.rhino.Node node65 = com.google.javascript.jscomp.NodeUtil.newExpr(node59);
        boolean boolean66 = node65.isInstanceOf();
        com.google.javascript.rhino.InputId inputId67 = com.google.javascript.jscomp.NodeUtil.getInputId(node65);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(10, node65);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile69 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node68);
        boolean boolean70 = node68.isThrow();
        node5.addChildrenToBack(node68);
        boolean boolean72 = node5.isScript();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "NUMBER -1.0" + "'", str49, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(inputId67);
        org.junit.Assert.assertNull(staticSourceFile69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test09807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09807");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node((int) ' ');
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        com.google.javascript.rhino.jstype.JSType jSType5 = node4.getJSType();
        boolean boolean6 = node4.isScript();
        boolean boolean7 = node4.isTry();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean10 = node9.isName();
        boolean boolean11 = node9.isSwitch();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean14 = node9.hasChild(node13);
        com.google.javascript.rhino.Node node15 = com.google.javascript.jscomp.NodeUtil.newExpr(node9);
        node9.setOptionalArg(true);
        node9.putBooleanProp((int) (short) -1, true);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean23 = node22.isName();
        boolean boolean24 = node22.isSwitch();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node22.hasChild(node26);
        com.google.javascript.rhino.Node node28 = com.google.javascript.jscomp.NodeUtil.newExpr(node22);
        boolean boolean29 = node28.isRegExp();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean32 = node31.isName();
        boolean boolean33 = node31.isSwitch();
        java.lang.String str34 = node31.toString();
        com.google.javascript.rhino.Node node35 = node28.useSourceInfoIfMissingFromForTree(node31);
        com.google.javascript.rhino.Node node36 = node9.useSourceInfoFromForTree(node28);
        boolean boolean37 = node9.hasOneChild();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean40 = node39.isName();
        boolean boolean41 = node39.isSwitch();
        java.lang.String str42 = node39.toString();
        boolean boolean43 = node39.isVar();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean46 = node45.isName();
        boolean boolean47 = node45.isSwitch();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean50 = node45.hasChild(node49);
        com.google.javascript.rhino.Node node51 = com.google.javascript.jscomp.NodeUtil.newExpr(node45);
        boolean boolean52 = node51.isRegExp();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean55 = node54.isName();
        boolean boolean56 = node54.isSwitch();
        java.lang.String str57 = node54.toString();
        com.google.javascript.rhino.Node node58 = node51.useSourceInfoIfMissingFromForTree(node54);
        com.google.javascript.jscomp.CodingConvention.Bind bind59 = new com.google.javascript.jscomp.CodingConvention.Bind(node9, node39, node51);
        boolean boolean60 = node39.isInstanceOf();
        com.google.javascript.rhino.Node node61 = node4.useSourceInfoIfMissingFrom(node39);
        boolean boolean62 = node61.isLocalResultCall();
        boolean boolean63 = node2.isEquivalentTo(node61);
        boolean boolean64 = node61.isDebugger();
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node((int) (byte) 10, node61);
        boolean boolean66 = node61.isGetElem();
        boolean boolean67 = node61.isVar();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(jSType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "NUMBER -1.0" + "'", str34, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "NUMBER -1.0" + "'", str42, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "NUMBER -1.0" + "'", str57, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test09808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09808");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        java.lang.String str4 = node1.toString();
        boolean boolean5 = node1.isWith();
        int int7 = node1.getIntProp((int) ' ');
        boolean boolean8 = node1.isNE();
        com.google.javascript.rhino.jstype.JSType jSType9 = node1.getJSType();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition10 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int11 = namePosition10.getPositionOnStartLine();
        int int12 = namePosition10.getStartLine();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node14.isName();
        boolean boolean16 = node14.isSwitch();
        java.lang.String str17 = node14.toString();
        boolean boolean18 = node14.isNumber();
        boolean boolean19 = node14.isComma();
        boolean boolean20 = node14.isDebugger();
        boolean boolean21 = node14.isWith();
        namePosition10.setItem(node14);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node24.isName();
        boolean boolean26 = node24.isSwitch();
        java.lang.String str27 = node24.toString();
        boolean boolean28 = node24.isWith();
        int int30 = node24.getIntProp((int) ' ');
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder31 = node24.new FileLevelJsDocBuilder();
        int int32 = node14.getIndexOfChild(node24);
        node1.addChildToFront(node24);
        com.google.javascript.rhino.Node node34 = null;
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean38 = node37.isName();
        boolean boolean39 = node37.isSwitch();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean42 = node37.hasChild(node41);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean45 = node44.isName();
        boolean boolean46 = node44.isSwitch();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean49 = node44.hasChild(node48);
        com.google.javascript.rhino.Node node50 = com.google.javascript.jscomp.NodeUtil.newExpr(node44);
        boolean boolean51 = node50.isRegExp();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean54 = node53.isName();
        boolean boolean55 = node53.isSwitch();
        java.lang.String str56 = node53.toString();
        com.google.javascript.rhino.Node node57 = node50.useSourceInfoIfMissingFromForTree(node53);
        boolean boolean58 = node41.isEquivalentToTyped(node53);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean61 = node60.isName();
        boolean boolean62 = node60.isSwitch();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean65 = node60.hasChild(node64);
        com.google.javascript.rhino.jstype.JSType jSType66 = null;
        node64.setJSType(jSType66);
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node(45, node41, node64, 10, 2);
        java.util.Set<java.lang.String> strSet71 = null;
        node41.setDirectives(strSet71);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean75 = node74.isName();
        boolean boolean76 = node74.isSwitch();
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean79 = node74.hasChild(node78);
        boolean boolean80 = node74.isComma();
        com.google.javascript.jscomp.CodingConvention.Bind bind81 = new com.google.javascript.jscomp.CodingConvention.Bind(node34, node41, node74);
        com.google.javascript.rhino.Node node82 = node1.useSourceInfoIfMissingFromForTree(node74);
        boolean boolean83 = node74.isInstanceOf();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER -1.0" + "'", str4, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSType9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "NUMBER -1.0" + "'", str17, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "NUMBER -1.0" + "'", str27, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "NUMBER -1.0" + "'", str56, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test09809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09809");
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(35, nodeArray7, 54, (int) (byte) 100);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(0, nodeArray7, 4, 27);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(0, nodeArray7);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(53, nodeArray7);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(0, nodeArray7);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(54, nodeArray7, (int) (byte) 10, 50);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(50, nodeArray7);
        boolean boolean21 = node20.isWhile();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean24 = node23.isName();
        boolean boolean25 = node23.isSwitch();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean28 = node23.hasChild(node27);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean31 = node30.isName();
        boolean boolean32 = node30.isSwitch();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean35 = node30.hasChild(node34);
        com.google.javascript.rhino.Node node36 = com.google.javascript.jscomp.NodeUtil.newExpr(node30);
        int int37 = node30.getLength();
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        node30.setDirectives((java.util.Set<java.lang.String>) strSet41);
        java.lang.String str44 = node27.checkTreeEquals(node30);
        node27.setSourceEncodedPosition((int) 'a');
        com.google.javascript.rhino.jstype.JSType jSType47 = node27.getJSType();
        com.google.javascript.rhino.Node node48 = com.google.javascript.jscomp.NodeUtil.newExpr(node27);
        com.google.javascript.rhino.Node node49 = node20.useSourceInfoFromForTree(node48);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(0.0d);
        int int52 = node51.getLength();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection53 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node51);
        boolean boolean54 = node20.hasChild(node51);
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(jSType47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(nodeCollection53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test09810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09810");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        java.lang.String str6 = jSDocInfo0.toString();
        boolean boolean7 = jSDocInfo0.hasFileOverview();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node10.hasChild(node14);
        com.google.javascript.rhino.jstype.JSType jSType16 = null;
        node14.setJSType(jSType16);
        com.google.javascript.rhino.InputId inputId18 = com.google.javascript.jscomp.NodeUtil.getInputId(node14);
        boolean boolean19 = node14.isName();
        jSDocInfo0.setAssociatedNode(node14);
        boolean boolean21 = node14.isBreak();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JSDocInfo" + "'", str6, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(inputId18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test09811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09811");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node2.hasChild(node6);
        com.google.javascript.rhino.Node node8 = com.google.javascript.jscomp.NodeUtil.newExpr(node2);
        boolean boolean9 = node8.isRegExp();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node11.isName();
        boolean boolean13 = node11.isSwitch();
        java.lang.String str14 = node11.toString();
        com.google.javascript.rhino.Node node15 = node8.useSourceInfoIfMissingFromForTree(node11);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(50, node15);
        java.lang.String str17 = node15.getSourceFileName();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean23 = node22.isName();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean26 = node25.isName();
        boolean boolean27 = node25.isSwitch();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (byte) 100, node20, node22, node25);
        boolean boolean29 = node22.isBreak();
        com.google.javascript.rhino.Node node30 = node22.cloneNode();
        boolean boolean31 = node15.isEquivalentTo(node30);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean35 = node34.isName();
        boolean boolean36 = node34.isSwitch();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean39 = node34.hasChild(node38);
        com.google.javascript.rhino.Node node40 = com.google.javascript.jscomp.NodeUtil.newExpr(node34);
        boolean boolean41 = node40.isRegExp();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean44 = node43.isName();
        boolean boolean45 = node43.isSwitch();
        java.lang.String str46 = node43.toString();
        com.google.javascript.rhino.Node node47 = node40.useSourceInfoIfMissingFromForTree(node43);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(50, node47);
        boolean boolean49 = node47.isGetterDef();
        boolean boolean50 = node47.isEmpty();
        boolean boolean51 = node47.isDo();
        boolean boolean52 = node47.isExprResult();
        int int53 = node15.getIndexOfChild(node47);
        boolean boolean54 = node15.isEmpty();
        java.util.Set<java.lang.String> strSet55 = null;
        node15.setDirectives(strSet55);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean59 = node58.isName();
        boolean boolean60 = node58.isSwitch();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean63 = node58.hasChild(node62);
        com.google.javascript.rhino.Node node64 = com.google.javascript.jscomp.NodeUtil.newExpr(node58);
        int int65 = node58.getLength();
        boolean boolean66 = node58.isNew();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean69 = node68.isName();
        boolean boolean70 = node68.isSwitch();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean73 = node68.hasChild(node72);
        com.google.javascript.rhino.Node node74 = com.google.javascript.jscomp.NodeUtil.newExpr(node68);
        int int75 = node68.getLength();
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet79 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet79, strArray78);
        node68.setDirectives((java.util.Set<java.lang.String>) strSet79);
        boolean boolean83 = node68.getBooleanProp(41);
        com.google.javascript.rhino.Node node84 = node58.useSourceInfoFromForTree(node68);
        com.google.javascript.rhino.Node node86 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean87 = node86.isName();
        boolean boolean88 = node86.isSwitch();
        boolean boolean89 = node84.hasChild(node86);
        boolean boolean90 = node15.hasChild(node84);
        node84.addSuppression("");
        java.util.Set<java.lang.String> strSet93 = node84.getDirectives();
        boolean boolean94 = node84.isObjectLit();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "NUMBER -1.0" + "'", str14, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "NUMBER -1.0" + "'", str46, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(strSet93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test09812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09812");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean4 = node3.isName();
        boolean boolean5 = node3.isSwitch();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node3.hasChild(node7);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node10.hasChild(node14);
        com.google.javascript.rhino.Node node16 = com.google.javascript.jscomp.NodeUtil.newExpr(node10);
        boolean boolean17 = node16.isRegExp();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean20 = node19.isName();
        boolean boolean21 = node19.isSwitch();
        java.lang.String str22 = node19.toString();
        com.google.javascript.rhino.Node node23 = node16.useSourceInfoIfMissingFromForTree(node19);
        boolean boolean24 = node7.isEquivalentToTyped(node19);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node26.isName();
        boolean boolean28 = node26.isSwitch();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean31 = node26.hasChild(node30);
        com.google.javascript.rhino.jstype.JSType jSType32 = null;
        node30.setJSType(jSType32);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(45, node7, node30, 10, 2);
        boolean boolean37 = node30.isVarArgs();
        java.lang.String str38 = com.google.javascript.jscomp.NodeUtil.getSourceName(node30);
        boolean boolean39 = node30.hasChildren();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean42 = node41.isName();
        boolean boolean43 = node41.isSwitch();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean46 = node41.hasChild(node45);
        boolean boolean47 = node41.isVar();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean50 = node49.isName();
        boolean boolean51 = node49.isSwitch();
        java.lang.String str52 = node49.toString();
        boolean boolean53 = node49.isWith();
        com.google.javascript.rhino.Node node54 = node41.srcref(node49);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean57 = node56.isName();
        boolean boolean58 = node56.isSwitch();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean61 = node56.hasChild(node60);
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        node60.setJSType(jSType62);
        node60.setType(2);
        int int66 = node54.getIndexOfChild(node60);
        boolean boolean67 = node54.isString();
        boolean boolean68 = node54.isInc();
        node54.setSourceFileForTesting("JSDocInfo");
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) (short) 10, (int) (byte) 0, 41);
        java.lang.String str75 = node74.toStringTree();
        boolean boolean76 = node74.isSwitch();
        node74.setOptionalArg(false);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node(17, node30, node54, node74);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "NUMBER -1.0" + "'", str22, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "NUMBER -1.0" + "'", str52, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "BITXOR 0\n" + "'", str75, "BITXOR 0\n");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test09813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09813");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet5 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet5, strArray4);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node8.isName();
        boolean boolean10 = node8.isSwitch();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node8.hasChild(node12);
        com.google.javascript.rhino.Node node14 = com.google.javascript.jscomp.NodeUtil.newExpr(node8);
        int int15 = node8.getLength();
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node8.setDirectives((java.util.Set<java.lang.String>) strSet19);
        java.util.Spliterator<java.lang.String> strSpliterator22 = strSet19.spliterator();
        boolean boolean23 = strSet5.retainAll((java.util.Collection<java.lang.String>) strSet19);
        java.lang.Object[] objArray24 = strSet5.toArray();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node26.isName();
        boolean boolean28 = node26.isSwitch();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean31 = node26.hasChild(node30);
        com.google.javascript.rhino.Node node32 = com.google.javascript.jscomp.NodeUtil.newExpr(node26);
        int int33 = node26.getLength();
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        node26.setDirectives((java.util.Set<java.lang.String>) strSet37);
        boolean boolean40 = strSet37.isEmpty();
        boolean boolean41 = strSet5.containsAll((java.util.Collection<java.lang.String>) strSet37);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean44 = node43.isName();
        boolean boolean45 = node43.isSwitch();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean48 = node43.hasChild(node47);
        com.google.javascript.rhino.jstype.JSType jSType49 = null;
        node47.setJSType(jSType49);
        node47.setType(2);
        com.google.javascript.rhino.Node node53 = node47.getLastSibling();
        boolean boolean54 = strSet5.equals((java.lang.Object) node47);
        com.google.javascript.rhino.JSDocInfo jSDocInfo55 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList56 = jSDocInfo55.getExtendedInterfaces();
        java.lang.String str57 = jSDocInfo55.getVersion();
        boolean boolean58 = jSDocInfo55.isInterface();
        boolean boolean59 = jSDocInfo55.isJavaDispatch();
        java.lang.String str60 = jSDocInfo55.getSourceName();
        boolean boolean62 = jSDocInfo55.hasDescriptionForParameter("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        boolean boolean64 = jSDocInfo55.hasParameter("hi!");
        boolean boolean65 = strSet5.remove((java.lang.Object) jSDocInfo55);
        boolean boolean66 = jSDocInfo55.hasModifies();
        java.lang.String str67 = jSDocInfo55.getFileOverview();
        java.util.Collection<java.lang.String> strCollection68 = jSDocInfo55.getReferences();
        boolean boolean69 = jSDocInfo55.hasEnumParameterType();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strSpliterator22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[hi!]");
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNull(strCollection68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test09814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09814");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.hasParameter("hi!");
        boolean boolean4 = jSDocInfo0.hasThisType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getThrownTypes();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str7 = jSDocInfo0.getLicense();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean9 = jSDocInfo0.isConsistentIdGenerator();
        boolean boolean10 = jSDocInfo0.isNoShadow();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test09815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09815");
        java.lang.Throwable throwable3 = null;
        java.io.IOException iOException4 = new java.io.IOException(throwable3);
        java.lang.Throwable throwable5 = null;
        java.io.IOException iOException6 = new java.io.IOException(throwable5);
        iOException4.addSuppressed((java.lang.Throwable) iOException6);
        java.io.IOException iOException8 = new java.io.IOException("hi!", (java.lang.Throwable) iOException4);
        java.lang.Throwable throwable10 = null;
        java.io.IOException iOException11 = new java.io.IOException(throwable10);
        java.lang.Throwable throwable12 = null;
        java.io.IOException iOException13 = new java.io.IOException(throwable12);
        iOException11.addSuppressed((java.lang.Throwable) iOException13);
        java.io.IOException iOException15 = new java.io.IOException("hi!", (java.lang.Throwable) iOException11);
        java.lang.Throwable[] throwableArray16 = iOException15.getSuppressed();
        java.lang.Throwable throwable18 = null;
        java.io.IOException iOException19 = new java.io.IOException(throwable18);
        java.io.IOException iOException20 = new java.io.IOException((java.lang.Throwable) iOException19);
        java.io.IOException iOException21 = new java.io.IOException("NUMBER -1.0\n", (java.lang.Throwable) iOException19);
        iOException15.addSuppressed((java.lang.Throwable) iOException21);
        iOException8.addSuppressed((java.lang.Throwable) iOException15);
        java.io.IOException iOException24 = new java.io.IOException("Node tree inequality:\nTree1:\nSTRING 0\n\n\nTree2:\nSTRING \n\n\nSubtree1: STRING 0\n\n\nSubtree2: STRING \n", (java.lang.Throwable) iOException8);
        java.io.IOException iOException25 = new java.io.IOException("STRING BITXOR 0\n 41", (java.lang.Throwable) iOException8);
        org.junit.Assert.assertNotNull(throwableArray16);
    }

    @Test
    public void test09816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09816");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node2.hasChild(node6);
        com.google.javascript.rhino.jstype.JSType jSType8 = null;
        node6.setJSType(jSType8);
        node6.setType(2);
        boolean boolean12 = node6.isIn();
        boolean boolean13 = node6.isGetElem();
        node6.setLength(35);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node17.isName();
        boolean boolean19 = node17.isSwitch();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node17.hasChild(node21);
        com.google.javascript.rhino.jstype.JSType jSType23 = null;
        node21.setJSType(jSType23);
        node21.addSuppression("");
        int int27 = node21.getLineno();
        boolean boolean28 = node21.isOr();
        boolean boolean29 = node21.isReturn();
        boolean boolean30 = node21.isNE();
        boolean boolean31 = node21.isScript();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        boolean boolean36 = node35.isBreak();
        node21.addChildrenToBack(node35);
        boolean boolean38 = node6.isEquivalentTo(node35);
        boolean boolean39 = node35.isNull();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(41, node35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test09817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09817");
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative1 = null;
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec2 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("Unknown class name", jSTypeNative1);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType3 = com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN;
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node7.isName();
        boolean boolean9 = node7.isSwitch();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node7.hasChild(node11);
        com.google.javascript.rhino.jstype.JSType jSType13 = null;
        node11.setJSType(jSType13);
        com.google.javascript.rhino.InputId inputId15 = com.google.javascript.jscomp.NodeUtil.getInputId(node11);
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship16 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType3, node5, node11);
        boolean boolean17 = node11.isQualifiedName();
        boolean boolean18 = node11.isQualifiedName();
        com.google.javascript.rhino.Node node19 = assertionFunctionSpec2.getAssertedParam(node11);
        java.lang.String str20 = assertionFunctionSpec2.getFunctionName();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean23 = node22.isName();
        boolean boolean24 = node22.isSwitch();
        java.lang.String str25 = node22.toString();
        boolean boolean26 = node22.isNumber();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection27 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node22);
        boolean boolean28 = node22.isReturn();
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative30 = null;
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec31 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("NUMBER -1.0", jSTypeNative30);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean34 = node33.isName();
        boolean boolean35 = node33.isSwitch();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean38 = node33.hasChild(node37);
        com.google.javascript.rhino.Node node39 = com.google.javascript.jscomp.NodeUtil.newExpr(node33);
        node33.setOptionalArg(true);
        node33.putBooleanProp((int) (short) -1, true);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean47 = node46.isName();
        boolean boolean48 = node46.isSwitch();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean51 = node46.hasChild(node50);
        com.google.javascript.rhino.Node node52 = com.google.javascript.jscomp.NodeUtil.newExpr(node46);
        boolean boolean53 = node52.isRegExp();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean56 = node55.isName();
        boolean boolean57 = node55.isSwitch();
        java.lang.String str58 = node55.toString();
        com.google.javascript.rhino.Node node59 = node52.useSourceInfoIfMissingFromForTree(node55);
        com.google.javascript.rhino.Node node60 = node33.useSourceInfoFromForTree(node52);
        com.google.javascript.rhino.Node node61 = assertionFunctionSpec31.getAssertedParam(node33);
        boolean boolean62 = node33.isScript();
        java.lang.String str63 = node22.checkTreeEquals(node33);
        boolean boolean64 = node22.isNot();
        com.google.javascript.rhino.Node node65 = com.google.javascript.jscomp.NodeUtil.newExpr(node22);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry66 = null;
        com.google.javascript.rhino.jstype.JSType jSType67 = assertionFunctionSpec2.getAssertedType(node22, jSTypeRegistry66);
        org.junit.Assert.assertTrue("'" + subclassType3 + "' != '" + com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN + "'", subclassType3.equals(com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(inputId15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Unknown class name" + "'", str20, "Unknown class name");
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "NUMBER -1.0" + "'", str25, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(nodeCollection27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "NUMBER -1.0" + "'", str58, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNull(jSType67);
    }

    @Test
    public void test09818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09818");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        int int5 = node4.getChildCount();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node7.isName();
        boolean boolean9 = node7.isSwitch();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node7.hasChild(node11);
        boolean boolean13 = node7.isVar();
        com.google.javascript.rhino.Node node14 = node7.getParent();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node16.isName();
        boolean boolean18 = node16.isSwitch();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node16.hasChild(node20);
        boolean boolean22 = node16.isVar();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node24.isName();
        boolean boolean26 = node24.isSwitch();
        java.lang.String str27 = node24.toString();
        boolean boolean28 = node24.isWith();
        com.google.javascript.rhino.Node node29 = node16.srcref(node24);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(130, node4, node7, node24, node33, 0, 15);
        com.google.javascript.rhino.Node node37 = node36.getFirstChild();
        java.util.Set<java.lang.String> strSet38 = null;
        node37.setDirectives(strSet38);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean42 = node41.isName();
        boolean boolean43 = node41.isSwitch();
        java.lang.String str44 = node41.toString();
        boolean boolean45 = node41.isNumber();
        boolean boolean46 = node41.isComma();
        boolean boolean47 = node41.isDebugger();
        boolean boolean48 = node41.isOptionalArg();
        node37.addChildToFront(node41);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean52 = node51.isName();
        boolean boolean53 = node51.isSwitch();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean56 = node51.hasChild(node55);
        boolean boolean57 = node51.isVar();
        boolean boolean58 = node51.isBreak();
        boolean boolean59 = node41.isEquivalentToTyped(node51);
        boolean boolean60 = node41.isInc();
        boolean boolean61 = node41.isFalse();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "NUMBER -1.0" + "'", str27, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "NUMBER -1.0" + "'", str44, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test09819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09819");
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative1 = null;
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec2 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("", jSTypeNative1);
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        boolean boolean6 = node4.isSwitch();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node4.hasChild(node8);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node11.isName();
        boolean boolean13 = node11.isSwitch();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean16 = node11.hasChild(node15);
        com.google.javascript.rhino.Node node17 = com.google.javascript.jscomp.NodeUtil.newExpr(node11);
        boolean boolean18 = node17.isRegExp();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node20.isName();
        boolean boolean22 = node20.isSwitch();
        java.lang.String str23 = node20.toString();
        com.google.javascript.rhino.Node node24 = node17.useSourceInfoIfMissingFromForTree(node20);
        boolean boolean25 = node8.isEquivalentToTyped(node20);
        com.google.javascript.rhino.Node node26 = assertionFunctionSpec2.getAssertedParam(node8);
        boolean boolean27 = node26.isGetterDef();
        boolean boolean28 = node26.isComma();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        com.google.javascript.rhino.jstype.JSType jSType31 = node30.getJSType();
        com.google.javascript.rhino.jstype.JSType jSType32 = null;
        node30.setJSType(jSType32);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean36 = node35.isName();
        boolean boolean37 = node35.isSwitch();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean40 = node35.hasChild(node39);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean43 = node42.isName();
        boolean boolean44 = node42.isSwitch();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean47 = node42.hasChild(node46);
        com.google.javascript.rhino.Node node48 = com.google.javascript.jscomp.NodeUtil.newExpr(node42);
        boolean boolean49 = node48.isRegExp();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean52 = node51.isName();
        boolean boolean53 = node51.isSwitch();
        java.lang.String str54 = node51.toString();
        com.google.javascript.rhino.Node node55 = node48.useSourceInfoIfMissingFromForTree(node51);
        boolean boolean56 = node39.isEquivalentToTyped(node51);
        boolean boolean57 = node51.isReturn();
        com.google.javascript.jscomp.CodingConvention.Bind bind58 = new com.google.javascript.jscomp.CodingConvention.Bind(node26, node30, node51);
        boolean boolean59 = node51.isUnscopedQualifiedName();
        boolean boolean60 = node51.hasMoreThanOneChild();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "NUMBER -1.0" + "'", str23, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(jSType31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "NUMBER -1.0" + "'", str54, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test09820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09820");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN;
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        boolean boolean6 = node4.isSwitch();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node4.hasChild(node8);
        com.google.javascript.rhino.jstype.JSType jSType10 = null;
        node8.setJSType(jSType10);
        com.google.javascript.rhino.InputId inputId12 = com.google.javascript.jscomp.NodeUtil.getInputId(node8);
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship13 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node2, node8);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType15 = com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN;
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean20 = node19.isName();
        boolean boolean21 = node19.isSwitch();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean24 = node19.hasChild(node23);
        com.google.javascript.rhino.jstype.JSType jSType25 = null;
        node23.setJSType(jSType25);
        com.google.javascript.rhino.InputId inputId27 = com.google.javascript.jscomp.NodeUtil.getInputId(node23);
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship28 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType15, node17, node23);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean31 = node30.isName();
        boolean boolean32 = node30.isSwitch();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean35 = node30.hasChild(node34);
        com.google.javascript.rhino.Node node36 = com.google.javascript.jscomp.NodeUtil.newExpr(node30);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean39 = node38.isName();
        boolean boolean40 = node38.isSwitch();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean43 = node38.hasChild(node42);
        com.google.javascript.rhino.Node node44 = com.google.javascript.jscomp.NodeUtil.newExpr(node38);
        node38.setOptionalArg(true);
        node38.putBooleanProp((int) (short) -1, true);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean52 = node51.isName();
        boolean boolean53 = node51.isSwitch();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean56 = node51.hasChild(node55);
        com.google.javascript.rhino.Node node57 = com.google.javascript.jscomp.NodeUtil.newExpr(node51);
        boolean boolean58 = node57.isRegExp();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean61 = node60.isName();
        boolean boolean62 = node60.isSwitch();
        java.lang.String str63 = node60.toString();
        com.google.javascript.rhino.Node node64 = node57.useSourceInfoIfMissingFromForTree(node60);
        com.google.javascript.rhino.Node node65 = node38.useSourceInfoFromForTree(node57);
        boolean boolean66 = node36.hasChild(node38);
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean69 = node68.isName();
        boolean boolean70 = node68.isSwitch();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean73 = node68.hasChild(node72);
        boolean boolean74 = node72.isGetElem();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection75 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node72);
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship76 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType15, node38, node72);
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node(44, node72, 42, 12);
        com.google.javascript.rhino.Node node80 = node8.srcrefTree(node72);
        java.lang.String str81 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(node72);
        int int83 = node72.getIntProp((int) (short) -1);
        com.google.javascript.rhino.Node node84 = node72.cloneTree();
        java.lang.String str85 = node84.getQualifiedName();
        org.junit.Assert.assertTrue("'" + subclassType0 + "' != '" + com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN + "'", subclassType0.equals(com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN));
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(inputId12);
        org.junit.Assert.assertTrue("'" + subclassType15 + "' != '" + com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN + "'", subclassType15.equals(com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(inputId27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "NUMBER -1.0" + "'", str63, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(nodeCollection75);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNull(str85);
    }

    @Test
    public void test09821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09821");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 44, 409612, 32);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test09822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09822");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        boolean boolean6 = node4.isSwitch();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node4.hasChild(node8);
        com.google.javascript.rhino.Node node10 = com.google.javascript.jscomp.NodeUtil.newExpr(node4);
        boolean boolean11 = node10.isRegExp();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean14 = node13.isName();
        boolean boolean15 = node13.isSwitch();
        java.lang.String str16 = node13.toString();
        com.google.javascript.rhino.Node node17 = node10.useSourceInfoIfMissingFromForTree(node13);
        java.lang.String str18 = node1.checkTreeEquals(node17);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node21.isName();
        boolean boolean23 = node21.isSwitch();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean26 = node21.hasChild(node25);
        boolean boolean27 = node25.isGetElem();
        node1.putProp((int) (short) 100, (java.lang.Object) boolean27);
        boolean boolean29 = node1.isGetProp();
        boolean boolean30 = node1.isCall();
        boolean boolean31 = node1.isGetElem();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean34 = node33.isName();
        boolean boolean35 = node33.isSwitch();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean38 = node33.hasChild(node37);
        java.lang.String str39 = com.google.javascript.jscomp.NodeUtil.getSourceName(node33);
        node33.setSourceFileForTesting("hi!");
        boolean boolean42 = node33.isString();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean45 = node44.isName();
        boolean boolean46 = node44.isSwitch();
        java.lang.String str47 = node44.toString();
        boolean boolean48 = node44.isWith();
        boolean boolean49 = node44.isBreak();
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList51 = jSDocInfo50.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection52 = jSDocInfo50.getReferences();
        java.util.Collection<java.lang.String> strCollection53 = jSDocInfo50.getReferences();
        com.google.javascript.rhino.Node node54 = jSDocInfo50.getAssociatedNode();
        node44.setJSDocInfo(jSDocInfo50);
        com.google.javascript.rhino.Node node56 = node33.useSourceInfoIfMissingFromForTree(node44);
        boolean boolean57 = node44.isGetterDef();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean60 = node59.isName();
        boolean boolean61 = node59.isSwitch();
        java.lang.String str62 = node59.toString();
        boolean boolean63 = node59.isWith();
        int int65 = node59.getIntProp((int) ' ');
        boolean boolean66 = node59.isNE();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean69 = node68.isName();
        boolean boolean70 = node68.isSwitch();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean73 = node68.hasChild(node72);
        com.google.javascript.rhino.jstype.JSType jSType74 = null;
        node72.setJSType(jSType74);
        node72.setType(2);
        com.google.javascript.rhino.Node node78 = node72.getLastSibling();
        com.google.javascript.rhino.Node node79 = node59.srcref(node78);
        com.google.javascript.rhino.Node node80 = node44.copyInformationFrom(node59);
        boolean boolean81 = node44.hasMoreThanOneChild();
        boolean boolean82 = node44.isFalse();
        boolean boolean83 = node44.isFor();
        node1.addChildrenToBack(node44);
        com.google.javascript.rhino.InputId inputId85 = com.google.javascript.jscomp.NodeUtil.getInputId(node44);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "NUMBER -1.0" + "'", str16, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n" + "'", str18, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "NUMBER -1.0" + "'", str47, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList51);
        org.junit.Assert.assertNull(strCollection52);
        org.junit.Assert.assertNull(strCollection53);
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "NUMBER -1.0" + "'", str62, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(inputId85);
    }

    @Test
    public void test09823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09823");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        java.lang.String str6 = jSDocInfo0.getFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getTypedefType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList9 = jSDocInfo0.getExtendedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getBaseType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getType();
        boolean boolean12 = jSDocInfo0.isExterns();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNotNull(jSTypeExpressionList9);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test09824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09824");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        int int8 = node1.getLength();
        node1.addSuppression("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList12 = jSDocInfo11.getExtendedInterfaces();
        java.lang.String str13 = jSDocInfo11.getVersion();
        boolean boolean14 = jSDocInfo11.isInterface();
        boolean boolean15 = jSDocInfo11.isNoAlias();
        boolean boolean16 = jSDocInfo11.isHidden();
        boolean boolean17 = jSDocInfo11.isDeprecated();
        node1.setJSDocInfo(jSDocInfo11);
        java.lang.String str19 = jSDocInfo11.getBlockDescription();
        boolean boolean20 = jSDocInfo11.isExport();
        com.google.common.collect.ImmutableList<java.lang.String> strList21 = jSDocInfo11.getTemplateTypeNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo11.getType();
        int int23 = jSDocInfo11.getImplementedInterfaceCount();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test09825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09825");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        java.lang.String str4 = node1.toString();
        boolean boolean5 = node1.isWith();
        int int7 = node1.getIntProp((int) ' ');
        boolean boolean8 = node1.isNE();
        com.google.javascript.rhino.jstype.JSType jSType9 = node1.getJSType();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition10 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int11 = namePosition10.getPositionOnStartLine();
        int int12 = namePosition10.getStartLine();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node14.isName();
        boolean boolean16 = node14.isSwitch();
        java.lang.String str17 = node14.toString();
        boolean boolean18 = node14.isNumber();
        boolean boolean19 = node14.isComma();
        boolean boolean20 = node14.isDebugger();
        boolean boolean21 = node14.isWith();
        namePosition10.setItem(node14);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node24.isName();
        boolean boolean26 = node24.isSwitch();
        java.lang.String str27 = node24.toString();
        boolean boolean28 = node24.isWith();
        int int30 = node24.getIntProp((int) ' ');
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder31 = node24.new FileLevelJsDocBuilder();
        int int32 = node14.getIndexOfChild(node24);
        node1.addChildToFront(node24);
        com.google.javascript.rhino.InputId inputId35 = new com.google.javascript.rhino.InputId("");
        java.lang.String str36 = inputId35.getIdName();
        node24.setInputId(inputId35);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean43 = node42.isName();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean46 = node45.isName();
        boolean boolean47 = node45.isSwitch();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (byte) 100, node40, node42, node45);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean52 = node51.isName();
        boolean boolean53 = node51.isSwitch();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean56 = node51.hasChild(node55);
        boolean boolean57 = node51.isVar();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean60 = node59.isName();
        boolean boolean61 = node59.isSwitch();
        java.lang.String str62 = node59.toString();
        boolean boolean63 = node59.isWith();
        com.google.javascript.rhino.Node node64 = node51.srcref(node59);
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean67 = node66.isName();
        boolean boolean68 = node66.isSwitch();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean71 = node66.hasChild(node70);
        com.google.javascript.rhino.Node node72 = com.google.javascript.jscomp.NodeUtil.newExpr(node66);
        boolean boolean73 = node72.isRegExp();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean76 = node75.isName();
        boolean boolean77 = node75.isSwitch();
        java.lang.String str78 = node75.toString();
        com.google.javascript.rhino.Node node79 = node72.useSourceInfoIfMissingFromForTree(node75);
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean82 = node81.isName();
        boolean boolean83 = node81.isSwitch();
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean86 = node81.hasChild(node85);
        com.google.javascript.rhino.jstype.JSType jSType87 = null;
        node85.setJSType(jSType87);
        com.google.javascript.rhino.Node node91 = new com.google.javascript.rhino.Node((int) (byte) 0, node59, node75, node85, (int) (byte) 0, (int) '#');
        boolean boolean92 = node45.isEquivalentTo(node85);
        boolean boolean93 = node45.isInc();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection94 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node45);
        com.google.javascript.rhino.Node node95 = node24.copyInformationFrom(node45);
        boolean boolean96 = node95.isOptionalArg();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER -1.0" + "'", str4, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSType9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "NUMBER -1.0" + "'", str17, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "NUMBER -1.0" + "'", str27, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "NUMBER -1.0" + "'", str62, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "NUMBER -1.0" + "'", str78, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(nodeCollection94);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test09826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09826");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.hasParameter("hi!");
        boolean boolean4 = jSDocInfo0.hasThisType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getModifies();
        boolean boolean6 = jSDocInfo0.hasModifies();
        java.lang.String str7 = jSDocInfo0.getDeprecationReason();
        boolean boolean8 = jSDocInfo0.isNoCompile();
        boolean boolean9 = jSDocInfo0.hasBaseType();
        boolean boolean10 = jSDocInfo0.isInterface();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test09827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09827");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        node2.setWasEmptyNode(true);
        boolean boolean5 = node2.isOr();
        node2.detachChildren();
        boolean boolean7 = node2.isTrue();
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] { node2 };
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(47, nodeArray8);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node11.isName();
        boolean boolean13 = node11.isSwitch();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean16 = node11.hasChild(node15);
        java.lang.String str17 = node11.getSourceFileName();
        boolean boolean18 = node11.isVar();
        java.lang.String str19 = com.google.javascript.jscomp.NodeUtil.getSourceName(node11);
        com.google.javascript.rhino.Node node20 = node9.useSourceInfoIfMissingFromForTree(node11);
        boolean boolean21 = node11.isString();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test09828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09828");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node2.hasChild(node6);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean10 = node9.isName();
        boolean boolean11 = node9.isSwitch();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean14 = node9.hasChild(node13);
        com.google.javascript.rhino.Node node15 = com.google.javascript.jscomp.NodeUtil.newExpr(node9);
        boolean boolean16 = node15.isRegExp();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean19 = node18.isName();
        boolean boolean20 = node18.isSwitch();
        java.lang.String str21 = node18.toString();
        com.google.javascript.rhino.Node node22 = node15.useSourceInfoIfMissingFromForTree(node18);
        boolean boolean23 = node6.isEquivalentToTyped(node18);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean26 = node25.isName();
        boolean boolean27 = node25.isSwitch();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean30 = node25.hasChild(node29);
        com.google.javascript.rhino.jstype.JSType jSType31 = null;
        node29.setJSType(jSType31);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(45, node6, node29, 10, 2);
        boolean boolean36 = node6.isLocalResultCall();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean42 = node41.isName();
        boolean boolean43 = node41.isSwitch();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean46 = node41.hasChild(node45);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean49 = node48.isName();
        boolean boolean50 = node48.isSwitch();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean53 = node48.hasChild(node52);
        com.google.javascript.rhino.Node node54 = com.google.javascript.jscomp.NodeUtil.newExpr(node48);
        boolean boolean55 = node54.isRegExp();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean58 = node57.isName();
        boolean boolean59 = node57.isSwitch();
        java.lang.String str60 = node57.toString();
        com.google.javascript.rhino.Node node61 = node54.useSourceInfoIfMissingFromForTree(node57);
        boolean boolean62 = node45.isEquivalentToTyped(node57);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile63 = null;
        node45.setStaticSourceFile(staticSourceFile63);
        int int65 = node45.getType();
        boolean boolean66 = node45.isThrow();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (short) 1, node39, node45, 41, (int) (byte) 100);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile70 = null;
        node45.setStaticSourceFile(staticSourceFile70);
        com.google.javascript.rhino.Node node72 = node6.srcref(node45);
        boolean boolean73 = node45.isAdd();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "NUMBER -1.0" + "'", str21, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "NUMBER -1.0" + "'", str60, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 39 + "'", int65 == 39);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test09829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09829");
        java.lang.Throwable throwable1 = null;
        java.io.IOException iOException2 = new java.io.IOException(throwable1);
        java.lang.Throwable throwable3 = null;
        java.io.IOException iOException4 = new java.io.IOException(throwable3);
        iOException2.addSuppressed((java.lang.Throwable) iOException4);
        java.io.IOException iOException6 = new java.io.IOException("hi!", (java.lang.Throwable) iOException2);
        java.lang.Throwable[] throwableArray7 = iOException6.getSuppressed();
        java.lang.Throwable throwable9 = null;
        java.io.IOException iOException10 = new java.io.IOException(throwable9);
        java.io.IOException iOException11 = new java.io.IOException((java.lang.Throwable) iOException10);
        java.io.IOException iOException12 = new java.io.IOException("NUMBER -1.0\n", (java.lang.Throwable) iOException10);
        iOException6.addSuppressed((java.lang.Throwable) iOException12);
        java.io.IOException iOException14 = new java.io.IOException((java.lang.Throwable) iOException12);
        java.io.IOException iOException15 = new java.io.IOException((java.lang.Throwable) iOException12);
        java.lang.Throwable throwable17 = null;
        java.io.IOException iOException18 = new java.io.IOException(throwable17);
        java.io.IOException iOException19 = new java.io.IOException((java.lang.Throwable) iOException18);
        java.lang.Throwable[] throwableArray20 = iOException18.getSuppressed();
        java.lang.Throwable throwable22 = null;
        java.io.IOException iOException23 = new java.io.IOException(throwable22);
        java.lang.Throwable throwable24 = null;
        java.io.IOException iOException25 = new java.io.IOException(throwable24);
        iOException23.addSuppressed((java.lang.Throwable) iOException25);
        java.io.IOException iOException27 = new java.io.IOException("hi!", (java.lang.Throwable) iOException23);
        java.io.IOException iOException28 = new java.io.IOException((java.lang.Throwable) iOException23);
        iOException18.addSuppressed((java.lang.Throwable) iOException28);
        java.io.IOException iOException30 = new java.io.IOException("Node tree inequality:\nTree1:\nEXPR_RESULT [synthetic: 1] [is_var_args_param: JSDocInfo]\n    NUMBER -1.0\n\n\nTree2:\nNUMBER -1.0\n\n\nSubtree1: EXPR_RESULT [synthetic: 1] [is_var_args_param: JSDocInfo]\n    NUMBER -1.0\n\n\nSubtree2: NUMBER -1.0\n", (java.lang.Throwable) iOException28);
        java.lang.Throwable throwable31 = null;
        java.io.IOException iOException32 = new java.io.IOException(throwable31);
        java.io.IOException iOException33 = new java.io.IOException((java.lang.Throwable) iOException32);
        java.lang.Throwable[] throwableArray34 = iOException32.getSuppressed();
        java.lang.Throwable throwable36 = null;
        java.io.IOException iOException37 = new java.io.IOException(throwable36);
        java.lang.Throwable throwable38 = null;
        java.io.IOException iOException39 = new java.io.IOException(throwable38);
        iOException37.addSuppressed((java.lang.Throwable) iOException39);
        java.io.IOException iOException41 = new java.io.IOException("hi!", (java.lang.Throwable) iOException37);
        java.io.IOException iOException42 = new java.io.IOException((java.lang.Throwable) iOException37);
        iOException32.addSuppressed((java.lang.Throwable) iOException42);
        java.io.IOException iOException44 = new java.io.IOException((java.lang.Throwable) iOException32);
        iOException28.addSuppressed((java.lang.Throwable) iOException32);
        iOException12.addSuppressed((java.lang.Throwable) iOException28);
        java.lang.String str47 = iOException12.toString();
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "java.io.IOException: NUMBER -1.0\n" + "'", str47, "java.io.IOException: NUMBER -1.0\n");
    }

    @Test
    public void test09830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09830");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.jstype.JSType jSType7 = null;
        node5.setJSType(jSType7);
        node5.addSuppression("");
        boolean boolean11 = node5.isScript();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean14 = node13.isName();
        boolean boolean15 = node13.isSwitch();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node13.hasChild(node17);
        com.google.javascript.rhino.jstype.JSType jSType19 = null;
        node17.setJSType(jSType19);
        com.google.javascript.rhino.InputId inputId21 = com.google.javascript.jscomp.NodeUtil.getInputId(node17);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean24 = node23.isName();
        boolean boolean25 = node23.isSwitch();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean28 = node23.hasChild(node27);
        com.google.javascript.rhino.Node node29 = com.google.javascript.jscomp.NodeUtil.newExpr(node23);
        int int30 = node29.getType();
        com.google.javascript.rhino.Node node31 = node17.copyInformationFromForTree(node29);
        int int32 = node17.getCharno();
        boolean boolean33 = node5.isEquivalentToTyped(node17);
        node17.setOptionalArg(true);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean38 = node37.isName();
        boolean boolean39 = node37.isSwitch();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean42 = node37.hasChild(node41);
        boolean boolean43 = node37.isVar();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean46 = node45.isName();
        boolean boolean47 = node45.isSwitch();
        java.lang.String str48 = node45.toString();
        boolean boolean49 = node45.isWith();
        com.google.javascript.rhino.Node node50 = node37.srcref(node45);
        java.lang.String str51 = node50.toString();
        int int52 = node50.getCharno();
        com.google.javascript.rhino.InputId inputId53 = com.google.javascript.jscomp.NodeUtil.getInputId(node50);
        node17.addChildrenToBack(node50);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(inputId21);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 130 + "'", int30 == 130);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "NUMBER -1.0" + "'", str48, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "NUMBER -1.0" + "'", str51, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNull(inputId53);
    }

    @Test
    public void test09831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09831");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        node1.setOptionalArg(true);
        node1.putBooleanProp((int) (short) -1, true);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node14.isName();
        boolean boolean16 = node14.isSwitch();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean19 = node14.hasChild(node18);
        com.google.javascript.rhino.Node node20 = com.google.javascript.jscomp.NodeUtil.newExpr(node14);
        boolean boolean21 = node20.isRegExp();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean24 = node23.isName();
        boolean boolean25 = node23.isSwitch();
        java.lang.String str26 = node23.toString();
        com.google.javascript.rhino.Node node27 = node20.useSourceInfoIfMissingFromForTree(node23);
        com.google.javascript.rhino.Node node28 = node1.useSourceInfoFromForTree(node20);
        com.google.javascript.rhino.InputId inputId29 = com.google.javascript.jscomp.NodeUtil.getInputId(node28);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean32 = node31.isName();
        boolean boolean33 = node31.isSwitch();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean36 = node31.hasChild(node35);
        com.google.javascript.rhino.Node node37 = com.google.javascript.jscomp.NodeUtil.newExpr(node31);
        int int38 = node31.getLength();
        boolean boolean39 = node31.isNew();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean42 = node41.isName();
        boolean boolean43 = node41.isSwitch();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean46 = node41.hasChild(node45);
        com.google.javascript.rhino.Node node47 = com.google.javascript.jscomp.NodeUtil.newExpr(node41);
        int int48 = node41.getLength();
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        node41.setDirectives((java.util.Set<java.lang.String>) strSet52);
        boolean boolean56 = node41.getBooleanProp(41);
        com.google.javascript.rhino.Node node57 = node31.useSourceInfoFromForTree(node41);
        com.google.javascript.rhino.Node node58 = node28.useSourceInfoIfMissingFrom(node57);
        boolean boolean59 = node57.isInstanceOf();
        boolean boolean60 = node57.isParamList();
        boolean boolean62 = node57.getBooleanProp((int) ' ');
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "NUMBER -1.0" + "'", str26, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(inputId29);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test09832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09832");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 10, 0, 46);
        boolean boolean4 = node3.isDo();
        boolean boolean5 = node3.isOnlyModifiesThisCall();
        boolean boolean6 = node3.isGetProp();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test09833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09833");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(143361, "java.io.IOException: java.io.IOException: NUMBER -1.0\n");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test09834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09834");
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative1 = null;
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec2 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("", jSTypeNative1);
        java.lang.String str3 = assertionFunctionSpec2.getFunctionName();
        java.lang.String str4 = assertionFunctionSpec2.getFunctionName();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node6.isName();
        boolean boolean8 = node6.isSwitch();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node6.hasChild(node10);
        com.google.javascript.rhino.Node node12 = com.google.javascript.jscomp.NodeUtil.newExpr(node6);
        int int13 = node6.getLength();
        boolean boolean14 = node6.isNew();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node16.isName();
        boolean boolean18 = node16.isSwitch();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node16.hasChild(node20);
        com.google.javascript.rhino.Node node22 = com.google.javascript.jscomp.NodeUtil.newExpr(node16);
        int int23 = node16.getLength();
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        node16.setDirectives((java.util.Set<java.lang.String>) strSet27);
        boolean boolean31 = node16.getBooleanProp(41);
        com.google.javascript.rhino.Node node32 = node6.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = null;
        com.google.javascript.rhino.jstype.JSType jSType34 = assertionFunctionSpec2.getAssertedType(node6, jSTypeRegistry33);
        boolean boolean35 = node6.isFalse();
        java.lang.String str39 = node6.toString(false, true, true);
        boolean boolean40 = node6.isIn();
        com.google.javascript.rhino.Node node41 = node6.getLastSibling();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile42 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node41);
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList44 = jSDocInfo43.getExtendedInterfaces();
        java.lang.String str45 = jSDocInfo43.getVersion();
        boolean boolean46 = jSDocInfo43.isInterface();
        boolean boolean47 = jSDocInfo43.isJavaDispatch();
        boolean boolean48 = jSDocInfo43.isIdGenerator();
        java.lang.String str49 = jSDocInfo43.getReturnDescription();
        java.util.Set<java.lang.String> strSet50 = jSDocInfo43.getSuppressions();
        java.lang.Object[] objArray51 = strSet50.toArray();
        node41.setDirectives(strSet50);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(jSType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "NUMBER -1.0" + "'", str39, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(staticSourceFile42);
        org.junit.Assert.assertNotNull(jSTypeExpressionList44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
    }

    @Test
    public void test09835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09835");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        com.google.javascript.rhino.jstype.JSType jSType3 = node2.getJSType();
        boolean boolean4 = node2.isScript();
        boolean boolean5 = node2.isTry();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node7.isName();
        boolean boolean9 = node7.isSwitch();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node7.hasChild(node11);
        com.google.javascript.rhino.Node node13 = com.google.javascript.jscomp.NodeUtil.newExpr(node7);
        node7.setOptionalArg(true);
        node7.putBooleanProp((int) (short) -1, true);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node20.isName();
        boolean boolean22 = node20.isSwitch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node20.hasChild(node24);
        com.google.javascript.rhino.Node node26 = com.google.javascript.jscomp.NodeUtil.newExpr(node20);
        boolean boolean27 = node26.isRegExp();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean30 = node29.isName();
        boolean boolean31 = node29.isSwitch();
        java.lang.String str32 = node29.toString();
        com.google.javascript.rhino.Node node33 = node26.useSourceInfoIfMissingFromForTree(node29);
        com.google.javascript.rhino.Node node34 = node7.useSourceInfoFromForTree(node26);
        boolean boolean35 = node7.hasOneChild();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean38 = node37.isName();
        boolean boolean39 = node37.isSwitch();
        java.lang.String str40 = node37.toString();
        boolean boolean41 = node37.isVar();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean44 = node43.isName();
        boolean boolean45 = node43.isSwitch();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean48 = node43.hasChild(node47);
        com.google.javascript.rhino.Node node49 = com.google.javascript.jscomp.NodeUtil.newExpr(node43);
        boolean boolean50 = node49.isRegExp();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean53 = node52.isName();
        boolean boolean54 = node52.isSwitch();
        java.lang.String str55 = node52.toString();
        com.google.javascript.rhino.Node node56 = node49.useSourceInfoIfMissingFromForTree(node52);
        com.google.javascript.jscomp.CodingConvention.Bind bind57 = new com.google.javascript.jscomp.CodingConvention.Bind(node7, node37, node49);
        boolean boolean58 = node37.isInstanceOf();
        com.google.javascript.rhino.Node node59 = node2.useSourceInfoIfMissingFrom(node37);
        node2.removeProp(35);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean64 = node63.isName();
        boolean boolean65 = node63.isSwitch();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean68 = node63.hasChild(node67);
        com.google.javascript.rhino.Node node69 = com.google.javascript.jscomp.NodeUtil.newExpr(node63);
        node63.setOptionalArg(true);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder72 = node63.getJsDocBuilderForNode();
        boolean boolean73 = node63.isThis();
        boolean boolean74 = node63.isStringKey();
        boolean boolean75 = node63.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node76 = node2.useSourceInfoFrom(node63);
        com.google.javascript.rhino.Node node77 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) (short) -1, node2, node77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(jSType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "NUMBER -1.0" + "'", str32, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "NUMBER -1.0" + "'", str40, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "NUMBER -1.0" + "'", str55, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
    }

    @Test
    public void test09836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09836");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(35, nodeArray1, 54, (int) (byte) 100);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node6.isName();
        boolean boolean8 = node6.isSwitch();
        java.lang.String str9 = node6.toString();
        boolean boolean10 = node6.isWith();
        boolean boolean11 = node6.hasOneChild();
        boolean boolean12 = node6.isDebugger();
        com.google.javascript.rhino.Node node13 = node6.cloneNode();
        boolean boolean14 = node6.isSyntheticBlock();
        boolean boolean15 = node6.isTypeOf();
        node4.addChildrenToFront(node6);
        boolean boolean17 = node4.isGetterDef();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER -1.0" + "'", str9, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test09837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09837");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node5.isName();
        boolean boolean7 = node5.isSwitch();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean10 = node5.hasChild(node9);
        com.google.javascript.rhino.Node node11 = com.google.javascript.jscomp.NodeUtil.newExpr(node5);
        boolean boolean12 = node11.isRegExp();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node14.isName();
        boolean boolean16 = node14.isSwitch();
        java.lang.String str17 = node14.toString();
        com.google.javascript.rhino.Node node18 = node11.useSourceInfoIfMissingFromForTree(node14);
        java.lang.String str19 = node2.checkTreeEquals(node18);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean23 = node22.isName();
        boolean boolean24 = node22.isSwitch();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node22.hasChild(node26);
        boolean boolean28 = node26.isGetElem();
        node2.putProp((int) (short) 100, (java.lang.Object) boolean28);
        boolean boolean30 = node2.isCatch();
        boolean boolean31 = node2.isRegExp();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean34 = node33.isName();
        boolean boolean35 = node33.isSwitch();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean38 = node33.hasChild(node37);
        com.google.javascript.rhino.Node node39 = com.google.javascript.jscomp.NodeUtil.newExpr(node33);
        boolean boolean40 = node39.isRegExp();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean43 = node42.isName();
        boolean boolean44 = node42.isSwitch();
        java.lang.String str45 = node42.toString();
        com.google.javascript.rhino.Node node46 = node39.useSourceInfoIfMissingFromForTree(node42);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean50 = node49.isName();
        boolean boolean51 = node49.isSwitch();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean54 = node49.hasChild(node53);
        boolean boolean55 = node49.isVar();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean58 = node57.isName();
        boolean boolean59 = node57.isSwitch();
        java.lang.String str60 = node57.toString();
        boolean boolean61 = node57.isWith();
        com.google.javascript.rhino.Node node62 = node49.srcref(node57);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean65 = node64.isName();
        boolean boolean66 = node64.isSwitch();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean69 = node64.hasChild(node68);
        com.google.javascript.rhino.Node node70 = com.google.javascript.jscomp.NodeUtil.newExpr(node64);
        boolean boolean71 = node70.isRegExp();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean74 = node73.isName();
        boolean boolean75 = node73.isSwitch();
        java.lang.String str76 = node73.toString();
        com.google.javascript.rhino.Node node77 = node70.useSourceInfoIfMissingFromForTree(node73);
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean80 = node79.isName();
        boolean boolean81 = node79.isSwitch();
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean84 = node79.hasChild(node83);
        com.google.javascript.rhino.jstype.JSType jSType85 = null;
        node83.setJSType(jSType85);
        com.google.javascript.rhino.Node node89 = new com.google.javascript.rhino.Node((int) (byte) 0, node57, node73, node83, (int) (byte) 0, (int) '#');
        com.google.javascript.rhino.Node node90 = node42.srcref(node89);
        com.google.javascript.rhino.Node node91 = node2.useSourceInfoFrom(node90);
        boolean boolean92 = node91.isContinue();
        com.google.javascript.rhino.Node node95 = new com.google.javascript.rhino.Node((int) ' ', node91, 54, 0);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable96 = node95.getAncestors();
        com.google.javascript.rhino.Node node97 = node95.cloneNode();
        boolean boolean98 = node95.isNot();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "NUMBER -1.0" + "'", str17, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n" + "'", str19, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "NUMBER -1.0" + "'", str45, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "NUMBER -1.0" + "'", str60, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "NUMBER -1.0" + "'", str76, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(ancestorIterable96);
        org.junit.Assert.assertNotNull(node97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test09838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09838");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        int int8 = node1.getLength();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        node1.setDirectives((java.util.Set<java.lang.String>) strSet12);
        java.lang.Object[] objArray15 = strSet12.toArray();
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        int int20 = strList18.size();
        boolean boolean21 = strSet12.containsAll((java.util.Collection<java.lang.String>) strList18);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean24 = node23.isName();
        boolean boolean25 = node23.isSwitch();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean28 = node23.hasChild(node27);
        com.google.javascript.rhino.Node node29 = com.google.javascript.jscomp.NodeUtil.newExpr(node23);
        int int30 = node23.getLength();
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        node23.setDirectives((java.util.Set<java.lang.String>) strSet34);
        java.lang.Object[] objArray37 = strSet34.toArray();
        boolean boolean38 = strSet12.removeAll((java.util.Collection<java.lang.String>) strSet34);
        boolean boolean40 = strSet12.add("JSDocInfo");
        java.util.stream.Stream<java.lang.String> strStream41 = strSet12.stream();
        strSet12.clear();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[hi!]");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strStream41);
    }

    @Test
    public void test09839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09839");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setItem("Not declared as a type name");
        int int3 = stringPosition0.getEndLine();
        int int4 = stringPosition0.getPositionOnEndLine();
        stringPosition0.setItem("EXPR_RESULT 0 [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test09840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09840");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("NUMBER -1.0\n");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean4 = node3.isName();
        boolean boolean5 = node3.isSwitch();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node3.hasChild(node7);
        com.google.javascript.rhino.Node node9 = com.google.javascript.jscomp.NodeUtil.newExpr(node3);
        boolean boolean10 = node9.isRegExp();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node12.isName();
        boolean boolean14 = node12.isSwitch();
        java.lang.String str15 = node12.toString();
        com.google.javascript.rhino.Node node16 = node9.useSourceInfoIfMissingFromForTree(node12);
        com.google.javascript.rhino.jstype.JSType jSType17 = null;
        node12.setJSType(jSType17);
        boolean boolean19 = node12.isOr();
        int int20 = node12.getChildCount();
        boolean boolean21 = node12.isCase();
        com.google.javascript.rhino.Node node22 = node1.useSourceInfoIfMissingFrom(node12);
        boolean boolean23 = node1.isDo();
        node1.putIntProp(39, 54);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean29 = node28.isName();
        boolean boolean30 = node28.isSwitch();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean33 = node28.hasChild(node32);
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        node32.addSuppression("");
        int int38 = node32.getLineno();
        boolean boolean39 = node32.isOr();
        boolean boolean40 = node32.isBlock();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean43 = node42.isName();
        boolean boolean44 = node42.isSwitch();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean47 = node42.hasChild(node46);
        com.google.javascript.rhino.Node node48 = com.google.javascript.jscomp.NodeUtil.newExpr(node42);
        int int49 = node48.getType();
        com.google.javascript.rhino.Node node50 = node48.getFirstChild();
        boolean boolean51 = node48.isDelProp();
        node48.setCharno((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            node1.replaceChildAfter(node32, node48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "NUMBER -1.0" + "'", str15, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 130 + "'", int49 == 130);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test09841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09841");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        java.lang.String str4 = node1.toString();
        boolean boolean5 = node1.isWith();
        int int7 = node1.getIntProp((int) ' ');
        boolean boolean8 = node1.isNE();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node10.hasChild(node14);
        com.google.javascript.rhino.jstype.JSType jSType16 = null;
        node14.setJSType(jSType16);
        node14.setType(2);
        com.google.javascript.rhino.Node node20 = node14.getLastSibling();
        com.google.javascript.rhino.Node node21 = node1.srcref(node20);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder22 = node21.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node24.isFunction();
        com.google.javascript.rhino.Node node26 = node24.cloneTree();
        node21.addChildrenToBack(node26);
        node21.setSourceEncodedPositionForTree(104);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER -1.0" + "'", str4, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
    }

    @Test
    public void test09842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09842");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isFunction();
        boolean boolean3 = node1.isNot();
        boolean boolean4 = node1.isIf();
        boolean boolean5 = node1.isTrue();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node8.isName();
        boolean boolean10 = node8.isSwitch();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node8.hasChild(node12);
        boolean boolean14 = node8.isVar();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node16.isName();
        boolean boolean18 = node16.isSwitch();
        java.lang.String str19 = node16.toString();
        boolean boolean20 = node16.isWith();
        com.google.javascript.rhino.Node node21 = node8.srcref(node16);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean24 = node23.isName();
        boolean boolean25 = node23.isSwitch();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean28 = node23.hasChild(node27);
        com.google.javascript.rhino.Node node29 = com.google.javascript.jscomp.NodeUtil.newExpr(node23);
        boolean boolean30 = node29.isRegExp();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean33 = node32.isName();
        boolean boolean34 = node32.isSwitch();
        java.lang.String str35 = node32.toString();
        com.google.javascript.rhino.Node node36 = node29.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean39 = node38.isName();
        boolean boolean40 = node38.isSwitch();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean43 = node38.hasChild(node42);
        com.google.javascript.rhino.jstype.JSType jSType44 = null;
        node42.setJSType(jSType44);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (byte) 0, node16, node32, node42, (int) (byte) 0, (int) '#');
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean51 = node50.isName();
        boolean boolean52 = node50.isSwitch();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean55 = node50.hasChild(node54);
        com.google.javascript.rhino.Node node56 = com.google.javascript.jscomp.NodeUtil.newExpr(node50);
        int int57 = node50.getLength();
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet61 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet61, strArray60);
        node50.setDirectives((java.util.Set<java.lang.String>) strSet61);
        java.lang.Object[] objArray64 = strSet61.toArray();
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        int int69 = strList67.size();
        boolean boolean70 = strSet61.containsAll((java.util.Collection<java.lang.String>) strList67);
        com.google.javascript.rhino.JSDocInfo jSDocInfo71 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet72 = jSDocInfo71.getParameterNames();
        boolean boolean74 = jSDocInfo71.hasParameter("hi!");
        boolean boolean75 = jSDocInfo71.hasThisType();
        java.util.Set<java.lang.String> strSet76 = jSDocInfo71.getModifies();
        com.google.javascript.rhino.JSDocInfo jSDocInfo77 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet78 = jSDocInfo77.getParameterNames();
        boolean boolean79 = strSet76.addAll((java.util.Collection<java.lang.String>) strSet78);
        strSet76.clear();
        boolean boolean81 = strList67.addAll((java.util.Collection<java.lang.String>) strSet76);
        node32.setDirectives(strSet76);
        java.lang.Object[] objArray83 = strSet76.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo84 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet85 = jSDocInfo84.getParameterNames();
        java.util.stream.Stream<java.lang.String> strStream86 = strSet85.stream();
        int int87 = strSet85.size();
        boolean boolean88 = strSet76.retainAll((java.util.Collection<java.lang.String>) strSet85);
        node1.setDirectives(strSet85);
        com.google.javascript.rhino.Node node90 = node1.cloneNode();
        boolean boolean91 = node90.isName();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "NUMBER -1.0" + "'", str19, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "NUMBER -1.0" + "'", str35, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[hi!]");
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(strSet76);
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[]");
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertNotNull(strStream86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test09843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09843");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(4, "NUMBER 100.0 100\n");
        boolean boolean3 = node2.isNew();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test09844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09844");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node2.hasChild(node6);
        com.google.javascript.rhino.Node node8 = com.google.javascript.jscomp.NodeUtil.newExpr(node2);
        boolean boolean9 = node8.isGetElem();
        boolean boolean10 = node8.isTypeOf();
        boolean boolean11 = node8.isAnd();
        boolean boolean12 = node8.isThrow();
        boolean boolean13 = node8.isDelProp();
        boolean boolean14 = node8.isGetterDef();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(49, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n", (int) (short) 100, (int) (short) 100);
        boolean boolean20 = node19.isTry();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = null;
        node19.setStaticSourceFile(staticSourceFile21);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node24.isName();
        boolean boolean26 = node24.isSwitch();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean29 = node24.hasChild(node28);
        com.google.javascript.rhino.Node node30 = com.google.javascript.jscomp.NodeUtil.newExpr(node24);
        boolean boolean31 = node30.isRegExp();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean34 = node33.isName();
        boolean boolean35 = node33.isSwitch();
        java.lang.String str36 = node33.toString();
        com.google.javascript.rhino.Node node37 = node30.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.jstype.JSType jSType38 = null;
        node33.setJSType(jSType38);
        boolean boolean40 = node33.isGetterDef();
        boolean boolean41 = node33.isNoSideEffectsCall();
        node33.removeProp((int) (short) 100);
        boolean boolean44 = node33.isFunction();
        boolean boolean45 = node33.isStringKey();
        boolean boolean46 = node33.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) 0, node8, node19, node33);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        com.google.javascript.rhino.Node node50 = node8.useSourceInfoFromForTree(node49);
        java.lang.String str51 = node50.getQualifiedName();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "NUMBER -1.0" + "'", str36, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(str51);
    }

    @Test
    public void test09845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09845");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isFunction();
        boolean boolean3 = node1.isNot();
        boolean boolean4 = node1.isIf();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node6.isName();
        boolean boolean8 = node6.isSwitch();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node6.hasChild(node10);
        com.google.javascript.rhino.jstype.JSType jSType12 = null;
        node10.setJSType(jSType12);
        node10.addSuppression("");
        com.google.javascript.rhino.Node node16 = node1.srcrefTree(node10);
        boolean boolean17 = node16.isDebugger();
        java.lang.String str18 = node16.getSourceFileName();
        boolean boolean20 = node16.getBooleanProp(12);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test09846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09846");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        int int8 = node1.getLength();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        node1.setDirectives((java.util.Set<java.lang.String>) strSet12);
        java.lang.Object[] objArray15 = strSet12.toArray();
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        int int20 = strList18.size();
        boolean boolean21 = strSet12.containsAll((java.util.Collection<java.lang.String>) strList18);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean24 = node23.isName();
        boolean boolean25 = node23.isSwitch();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean28 = node23.hasChild(node27);
        com.google.javascript.rhino.Node node29 = com.google.javascript.jscomp.NodeUtil.newExpr(node23);
        int int30 = node23.getLength();
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        node23.setDirectives((java.util.Set<java.lang.String>) strSet34);
        java.lang.Object[] objArray37 = strSet34.toArray();
        boolean boolean38 = strSet12.removeAll((java.util.Collection<java.lang.String>) strSet34);
        java.util.stream.Stream<java.lang.String> strStream39 = strSet34.parallelStream();
        boolean boolean41 = strSet34.contains((java.lang.Object) "STRING BITXOR 0\n 41");
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean44 = node43.isName();
        boolean boolean45 = node43.isSwitch();
        node43.detachChildren();
        boolean boolean47 = node43.isDebugger();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean50 = node49.isName();
        boolean boolean51 = node49.isSwitch();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean54 = node49.hasChild(node53);
        boolean boolean55 = node53.isGetElem();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection56 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node53);
        node53.setWasEmptyNode(false);
        boolean boolean59 = node43.isEquivalentTo(node53);
        com.google.javascript.rhino.Node node60 = com.google.javascript.jscomp.NodeUtil.newExpr(node43);
        boolean boolean61 = strSet34.equals((java.lang.Object) node60);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[hi!]");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strStream39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(nodeCollection56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test09847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09847");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int1 = namePosition0.getPositionOnStartLine();
        int int2 = namePosition0.getStartLine();
        int int3 = namePosition0.getPositionOnStartLine();
        int int4 = namePosition0.getPositionOnStartLine();
        int int5 = namePosition0.getPositionOnStartLine();
        int int6 = namePosition0.getEndLine();
        namePosition0.setPositionInformation((int) (byte) 10, 41, 409642, 50);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node14.isName();
        boolean boolean16 = node14.isSwitch();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean19 = node14.hasChild(node18);
        boolean boolean20 = node14.isVar();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean23 = node22.isName();
        boolean boolean24 = node22.isSwitch();
        java.lang.String str25 = node22.toString();
        boolean boolean26 = node22.isWith();
        com.google.javascript.rhino.Node node27 = node14.srcref(node22);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean30 = node29.isName();
        boolean boolean31 = node29.isSwitch();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean34 = node29.hasChild(node33);
        com.google.javascript.rhino.Node node35 = com.google.javascript.jscomp.NodeUtil.newExpr(node29);
        boolean boolean36 = node35.isRegExp();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean39 = node38.isName();
        boolean boolean40 = node38.isSwitch();
        java.lang.String str41 = node38.toString();
        com.google.javascript.rhino.Node node42 = node35.useSourceInfoIfMissingFromForTree(node38);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean45 = node44.isName();
        boolean boolean46 = node44.isSwitch();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean49 = node44.hasChild(node48);
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        node48.setJSType(jSType50);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (byte) 0, node22, node38, node48, (int) (byte) 0, (int) '#');
        com.google.javascript.rhino.Node node55 = node54.getFirstChild();
        boolean boolean56 = node55.isComma();
        namePosition0.setItem(node55);
        com.google.javascript.rhino.Node node58 = namePosition0.getItem();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "NUMBER -1.0" + "'", str25, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "NUMBER -1.0" + "'", str41, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node58);
    }

    @Test
    public void test09848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09848");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        int int6 = node5.getChildCount();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node8.isName();
        boolean boolean10 = node8.isSwitch();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node8.hasChild(node12);
        boolean boolean14 = node8.isVar();
        com.google.javascript.rhino.Node node15 = node8.getParent();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node17.isName();
        boolean boolean19 = node17.isSwitch();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node17.hasChild(node21);
        boolean boolean23 = node17.isVar();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean26 = node25.isName();
        boolean boolean27 = node25.isSwitch();
        java.lang.String str28 = node25.toString();
        boolean boolean29 = node25.isWith();
        com.google.javascript.rhino.Node node30 = node17.srcref(node25);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(130, node5, node8, node25, node34, 0, 15);
        com.google.javascript.rhino.Node node38 = node37.getFirstChild();
        boolean boolean39 = node37.isScript();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean42 = node41.isName();
        boolean boolean43 = node41.isSwitch();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean46 = node41.hasChild(node45);
        com.google.javascript.rhino.Node node47 = com.google.javascript.jscomp.NodeUtil.newExpr(node41);
        boolean boolean48 = node47.isRegExp();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n", (int) (short) 100, 42);
        node52.setOptionalArg(true);
        boolean boolean55 = node52.isAssign();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean58 = node57.isName();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean61 = node60.isName();
        boolean boolean62 = node60.isSwitch();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean65 = node60.hasChild(node64);
        com.google.javascript.rhino.Node node66 = com.google.javascript.jscomp.NodeUtil.newExpr(node60);
        boolean boolean67 = node66.isRegExp();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean70 = node69.isName();
        boolean boolean71 = node69.isSwitch();
        java.lang.String str72 = node69.toString();
        com.google.javascript.rhino.Node node73 = node66.useSourceInfoIfMissingFromForTree(node69);
        java.lang.String str74 = node57.checkTreeEquals(node73);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean78 = node77.isName();
        boolean boolean79 = node77.isSwitch();
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean82 = node77.hasChild(node81);
        boolean boolean83 = node81.isGetElem();
        node57.putProp((int) (short) 100, (java.lang.Object) boolean83);
        boolean boolean85 = node57.isGetProp();
        boolean boolean86 = node57.isContinue();
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node((int) (byte) 1, node37, node47, node52, node57);
        boolean boolean88 = node37.isTrue();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder89 = node37.getJsDocBuilderForNode();
        boolean boolean90 = node37.isNot();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "NUMBER -1.0" + "'", str28, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "NUMBER -1.0" + "'", str72, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n" + "'", str74, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test09849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09849");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nSTRING Unknown class name\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: STRING Unknown class name\n", (int) (byte) 0, (int) (byte) 100);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test09850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09850");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nSTRING Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n\n\n\nTree2:\nBITNOT\n\n\nSubtree1: STRING Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n\n\n\nSubtree2: BITNOT\n", 31, 4);
        com.google.javascript.rhino.jstype.JSType jSType4 = node3.getJSType();
        boolean boolean5 = node3.isInstanceOf();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(jSType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test09851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09851");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getReferences();
        boolean boolean3 = jSDocInfo0.isJavaDispatch();
        java.lang.String str4 = jSDocInfo0.toString();
        boolean boolean5 = jSDocInfo0.isImplicitCast();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getBaseType();
        boolean boolean7 = jSDocInfo0.hasFileOverview();
        boolean boolean8 = jSDocInfo0.isExport();
        boolean boolean9 = jSDocInfo0.hasBaseType();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JSDocInfo" + "'", str4, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test09852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09852");
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative1 = null;
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec2 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("InputId: java.io.IOException", jSTypeNative1);
        java.lang.String str3 = assertionFunctionSpec2.getFunctionName();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        node5.setWasEmptyNode(true);
        boolean boolean8 = node5.isOr();
        boolean boolean9 = node5.isNumber();
        node5.putIntProp((int) (short) 0, 51);
        boolean boolean13 = node5.isOr();
        boolean boolean14 = node5.isArrayLit();
        boolean boolean15 = node5.isSetterDef();
        boolean boolean16 = node5.isOnlyModifiesThisCall();
        boolean boolean17 = node5.isHook();
        com.google.javascript.rhino.Node node18 = assertionFunctionSpec2.getAssertedParam(node5);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.JSDocInfo jSDocInfo19 = com.google.javascript.jscomp.NodeUtil.getFunctionJSDocInfo(node5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "InputId: java.io.IOException" + "'", str3, "InputId: java.io.IOException");
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
    }

    @Test
    public void test09853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09853");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        com.google.javascript.rhino.jstype.JSType jSType2 = node1.getJSType();
        com.google.javascript.rhino.jstype.JSType jSType3 = null;
        node1.setJSType(jSType3);
        java.lang.Object obj6 = node1.getProp(44);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node8.isName();
        boolean boolean10 = node8.isSwitch();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node8.hasChild(node12);
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        node12.setJSType(jSType14);
        com.google.javascript.rhino.InputId inputId16 = com.google.javascript.jscomp.NodeUtil.getInputId(node12);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean19 = node18.isName();
        boolean boolean20 = node18.isSwitch();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean23 = node18.hasChild(node22);
        com.google.javascript.rhino.Node node24 = com.google.javascript.jscomp.NodeUtil.newExpr(node18);
        int int25 = node18.getLength();
        boolean boolean26 = node18.isNew();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean29 = node28.isName();
        boolean boolean30 = node28.isSwitch();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean33 = node28.hasChild(node32);
        com.google.javascript.rhino.Node node34 = com.google.javascript.jscomp.NodeUtil.newExpr(node28);
        int int35 = node28.getLength();
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        node28.setDirectives((java.util.Set<java.lang.String>) strSet39);
        boolean boolean43 = node28.getBooleanProp(41);
        com.google.javascript.rhino.Node node44 = node18.useSourceInfoFromForTree(node28);
        boolean boolean45 = node28.isGetElem();
        com.google.javascript.rhino.Node node46 = node12.useSourceInfoFrom(node28);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean49 = node48.isName();
        boolean boolean50 = node48.isSwitch();
        java.lang.String str51 = node48.toString();
        boolean boolean52 = node48.isNumber();
        boolean boolean53 = node48.isComma();
        boolean boolean54 = node48.isDebugger();
        boolean boolean55 = node48.isWith();
        node12.addChildrenToBack(node48);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile57 = null;
        node12.setStaticSourceFile(staticSourceFile57);
        boolean boolean59 = node12.isContinue();
        com.google.javascript.rhino.Node node60 = node1.srcref(node12);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean63 = node62.isName();
        boolean boolean64 = node62.isSwitch();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean67 = node62.hasChild(node66);
        com.google.javascript.rhino.Node node68 = com.google.javascript.jscomp.NodeUtil.newExpr(node62);
        int int69 = node62.getLength();
        boolean boolean70 = node62.isNew();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean73 = node72.isName();
        boolean boolean74 = node72.isSwitch();
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean77 = node72.hasChild(node76);
        com.google.javascript.rhino.Node node78 = com.google.javascript.jscomp.NodeUtil.newExpr(node72);
        int int79 = node72.getLength();
        java.lang.String[] strArray82 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet83 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet83, strArray82);
        node72.setDirectives((java.util.Set<java.lang.String>) strSet83);
        boolean boolean87 = node72.getBooleanProp(41);
        com.google.javascript.rhino.Node node88 = node62.useSourceInfoFromForTree(node72);
        com.google.javascript.rhino.Node node90 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean91 = node90.isName();
        boolean boolean92 = node90.isSwitch();
        boolean boolean93 = node88.hasChild(node90);
        com.google.javascript.rhino.Node node94 = node12.srcref(node88);
        boolean boolean95 = node12.isDefaultCase();
        java.util.Set<java.lang.String> strSet96 = node12.getDirectives();
        node12.setDouble((double) 25);
        boolean boolean99 = node12.isObjectLit();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(jSType2);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(inputId16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "NUMBER -1.0" + "'", str51, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNull(strSet96);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test09854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09854");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 44, 52, 37);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node3.siblings();
        boolean boolean5 = node3.isGetterDef();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(nodeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test09855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09855");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.hasParameterType("SHEQ 10\n    NUMBER -1.0\n    NUMBER -1.0\n");
        boolean boolean4 = jSDocInfo0.hasEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getParameterType("Node tree inequality:\nTree1:\nSTRING BITXOR 0\n 4095\n\n\nTree2:\nNUMBER -1.0\n\n\nSubtree1: STRING BITXOR 0\n 4095\n\n\nSubtree2: NUMBER -1.0\n");
        boolean boolean7 = jSDocInfo0.isNoSideEffects();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test09856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09856");
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative1 = null;
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec2 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("", jSTypeNative1);
        com.google.javascript.rhino.Node node3 = null;
        com.google.javascript.rhino.Node node4 = assertionFunctionSpec2.getAssertedParam(node3);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node6.isName();
        boolean boolean8 = node6.isSwitch();
        java.lang.String str9 = node6.toString();
        boolean boolean10 = node6.isWith();
        boolean boolean11 = node6.isSyntheticBlock();
        boolean boolean12 = node6.isAnd();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = null;
        com.google.javascript.rhino.jstype.JSType jSType14 = assertionFunctionSpec2.getAssertedType(node6, jSTypeRegistry13);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node16.isFunction();
        boolean boolean18 = node16.isNot();
        com.google.javascript.rhino.Node node19 = assertionFunctionSpec2.getAssertedParam(node16);
        boolean boolean20 = node19.isAssign();
        boolean boolean21 = node19.isSyntheticBlock();
        boolean boolean22 = node19.isEmpty();
        boolean boolean23 = node19.wasEmptyNode();
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER -1.0" + "'", str9, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(jSType14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test09857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09857");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nSTRING Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n\n\n\nTree2:\nBITNOT\n\n\nSubtree1: STRING Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n\n\n\nSubtree2: BITNOT\n", 54, (int) (byte) 0);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test09858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09858");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node2.hasChild(node6);
        boolean boolean8 = node2.isVar();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        java.lang.String str13 = node10.toString();
        boolean boolean14 = node10.isWith();
        com.google.javascript.rhino.Node node15 = node2.srcref(node10);
        boolean boolean16 = node10.isFor();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean19 = node18.isName();
        boolean boolean20 = node18.isSwitch();
        boolean boolean21 = node18.isNull();
        boolean boolean22 = node18.isFunction();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node24.isName();
        boolean boolean26 = node24.isSwitch();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean29 = node24.hasChild(node28);
        boolean boolean30 = node24.isVar();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean33 = node32.isName();
        boolean boolean34 = node32.isSwitch();
        java.lang.String str35 = node32.toString();
        boolean boolean36 = node32.isWith();
        com.google.javascript.rhino.Node node37 = node24.srcref(node32);
        java.lang.String str38 = node37.toString();
        boolean boolean39 = node37.isDec();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean42 = node41.isName();
        boolean boolean43 = node41.isSwitch();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean46 = node41.hasChild(node45);
        com.google.javascript.rhino.Node node47 = com.google.javascript.jscomp.NodeUtil.newExpr(node41);
        boolean boolean48 = node47.isRegExp();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean51 = node50.isName();
        boolean boolean52 = node50.isSwitch();
        java.lang.String str53 = node50.toString();
        com.google.javascript.rhino.Node node54 = node47.useSourceInfoIfMissingFromForTree(node50);
        com.google.javascript.rhino.jstype.JSType jSType55 = null;
        node50.setJSType(jSType55);
        boolean boolean57 = node50.isOptionalArg();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) -1, node10, node18, node37, node50, (int) (short) -1, 0);
        node37.setSourceFileForTesting("NUMBER 100.0 100");
        boolean boolean63 = node37.isFalse();
        boolean boolean64 = node37.isRegExp();
        boolean boolean65 = node37.isNot();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "NUMBER -1.0" + "'", str13, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "NUMBER -1.0" + "'", str35, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "NUMBER -1.0" + "'", str38, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "NUMBER -1.0" + "'", str53, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test09859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09859");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        node1.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node5 = node1.getAncestor(8);
        boolean boolean6 = node1.isNumber();
        boolean boolean7 = node1.isDefaultCase();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test09860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09860");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int1 = namePosition0.getPositionOnStartLine();
        int int2 = namePosition0.getPositionOnEndLine();
        int int3 = namePosition0.getEndLine();
        namePosition0.setPositionInformation(50, (int) (byte) -1, 4095, 50);
        namePosition0.setPositionInformation(0, 15, (int) '#', 16);
        int int14 = namePosition0.getStartLine();
        int int15 = namePosition0.getStartLine();
        int int16 = namePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.InputId inputId18 = new com.google.javascript.rhino.InputId("");
        java.lang.String str19 = inputId18.getIdName();
        java.lang.String str20 = inputId18.getIdName();
        java.lang.String str21 = inputId18.toString();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean24 = node23.isName();
        boolean boolean25 = node23.isSwitch();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean28 = node23.hasChild(node27);
        java.lang.String str29 = com.google.javascript.jscomp.NodeUtil.getSourceName(node23);
        node23.setSourceFileForTesting("hi!");
        boolean boolean32 = inputId18.equals((java.lang.Object) node23);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        int int37 = node36.getChildCount();
        boolean boolean38 = node36.isLocalResultCall();
        com.google.javascript.rhino.Node node39 = node23.useSourceInfoFromForTree(node36);
        com.google.javascript.rhino.Node node40 = node39.removeChildren();
        com.google.javascript.rhino.Node node42 = node39.getAncestor(0);
        namePosition0.setItem(node42);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 16 + "'", int16 == 16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "InputId: " + "'", str21, "InputId: ");
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNotNull(node42);
    }

    @Test
    public void test09861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09861");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        boolean boolean7 = jSDocInfo0.hasDescriptionForParameter("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        boolean boolean8 = jSDocInfo0.hasBaseType();
        boolean boolean9 = jSDocInfo0.isDeprecated();
        boolean boolean10 = jSDocInfo0.isNoAlias();
        boolean boolean11 = jSDocInfo0.isOverride();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test09862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09862");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.Node node5 = jSDocInfo0.getAssociatedNode();
        boolean boolean6 = jSDocInfo0.isDeprecated();
        java.lang.String str7 = jSDocInfo0.getLicense();
        boolean boolean8 = jSDocInfo0.isExterns();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test09863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09863");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        java.lang.String str4 = node1.toString();
        boolean boolean5 = node1.isVar();
        java.lang.String str6 = node1.getQualifiedName();
        com.google.javascript.rhino.InputId inputId7 = com.google.javascript.jscomp.NodeUtil.getInputId(node1);
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList10 = jSDocInfo9.getExtendedInterfaces();
        java.lang.String str11 = jSDocInfo9.getVersion();
        boolean boolean12 = jSDocInfo9.isInterface();
        boolean boolean13 = jSDocInfo9.isJavaDispatch();
        java.lang.String str14 = jSDocInfo9.getSourceName();
        java.lang.String str15 = jSDocInfo9.getFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = jSDocInfo9.getThisType();
        boolean boolean17 = jSDocInfo9.hasModifies();
        java.lang.String str18 = jSDocInfo9.getLendsName();
        boolean boolean19 = jSDocInfo9.shouldPreserveTry();
        boolean boolean20 = jSDocInfo9.isNoCompile();
        com.google.common.collect.ImmutableList<java.lang.String> strList21 = jSDocInfo9.getTemplateTypeNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo9.getReturnType();
        node1.putProp(54, (java.lang.Object) jSDocInfo9);
        com.google.javascript.rhino.Node node24 = jSDocInfo9.getAssociatedNode();
        boolean boolean25 = jSDocInfo9.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = jSDocInfo9.getParameterType("Node tree inequality:\nTree1:\nBITNOT\n\n\nTree2:\nNUMBER -1.0\n\n\nSubtree1: BITNOT\n\n\nSubtree2: NUMBER -1.0\n");
        boolean boolean28 = jSDocInfo9.isOverride();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER -1.0" + "'", str4, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(inputId7);
        org.junit.Assert.assertNotNull(jSTypeExpressionList10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(jSTypeExpression16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSTypeExpression27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test09864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09864");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node2.hasChild(node6);
        boolean boolean8 = node2.isVar();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        java.lang.String str13 = node10.toString();
        boolean boolean14 = node10.isWith();
        com.google.javascript.rhino.Node node15 = node2.srcref(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node17.isName();
        boolean boolean19 = node17.isSwitch();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node17.hasChild(node21);
        com.google.javascript.rhino.jstype.JSType jSType23 = null;
        node21.setJSType(jSType23);
        node21.setType(2);
        int int27 = node15.getIndexOfChild(node21);
        boolean boolean28 = node21.isCase();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        node30.setWasEmptyNode(true);
        boolean boolean33 = node30.isOr();
        boolean boolean34 = node30.isNumber();
        node30.putIntProp((int) (short) 0, 51);
        node30.setType(43);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        com.google.javascript.rhino.jstype.JSType jSType42 = node41.getJSType();
        com.google.javascript.rhino.jstype.JSType jSType43 = null;
        node41.setJSType(jSType43);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean47 = node46.isName();
        boolean boolean48 = node46.isSwitch();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean51 = node46.hasChild(node50);
        boolean boolean52 = node46.isVar();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean55 = node54.isName();
        boolean boolean56 = node54.isSwitch();
        java.lang.String str57 = node54.toString();
        boolean boolean58 = node54.isWith();
        com.google.javascript.rhino.Node node59 = node46.srcref(node54);
        boolean boolean60 = node54.isFor();
        boolean boolean61 = node54.isAssign();
        boolean boolean62 = node54.isLocalResultCall();
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(0, node21, node30, node41, node54, (int) (short) 10, 31);
        boolean boolean66 = node54.isArrayLit();
        boolean boolean67 = node54.isTry();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "NUMBER -1.0" + "'", str13, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(jSType42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "NUMBER -1.0" + "'", str57, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test09865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09865");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet5 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet5, strArray4);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node8.isName();
        boolean boolean10 = node8.isSwitch();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node8.hasChild(node12);
        com.google.javascript.rhino.Node node14 = com.google.javascript.jscomp.NodeUtil.newExpr(node8);
        int int15 = node8.getLength();
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node8.setDirectives((java.util.Set<java.lang.String>) strSet19);
        java.util.Spliterator<java.lang.String> strSpliterator22 = strSet19.spliterator();
        boolean boolean23 = strSet5.retainAll((java.util.Collection<java.lang.String>) strSet19);
        java.lang.Object[] objArray24 = strSet5.toArray();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node26.isName();
        boolean boolean28 = node26.isSwitch();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean31 = node26.hasChild(node30);
        com.google.javascript.rhino.Node node32 = com.google.javascript.jscomp.NodeUtil.newExpr(node26);
        int int33 = node26.getLength();
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        node26.setDirectives((java.util.Set<java.lang.String>) strSet37);
        boolean boolean40 = strSet37.isEmpty();
        boolean boolean41 = strSet5.containsAll((java.util.Collection<java.lang.String>) strSet37);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean44 = node43.isName();
        boolean boolean45 = node43.isSwitch();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean48 = node43.hasChild(node47);
        com.google.javascript.rhino.jstype.JSType jSType49 = null;
        node47.setJSType(jSType49);
        node47.setType(2);
        com.google.javascript.rhino.Node node53 = node47.getLastSibling();
        boolean boolean54 = strSet5.equals((java.lang.Object) node47);
        com.google.javascript.rhino.JSDocInfo jSDocInfo55 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList56 = jSDocInfo55.getExtendedInterfaces();
        java.lang.String str57 = jSDocInfo55.getVersion();
        boolean boolean58 = jSDocInfo55.isInterface();
        boolean boolean59 = jSDocInfo55.isJavaDispatch();
        java.lang.String str60 = jSDocInfo55.getSourceName();
        boolean boolean62 = jSDocInfo55.hasDescriptionForParameter("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        boolean boolean64 = jSDocInfo55.hasParameter("hi!");
        boolean boolean65 = strSet5.remove((java.lang.Object) jSDocInfo55);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression67 = jSDocInfo55.getParameterType("Node tree inequality:\nTree1:\nEXPR_RESULT\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: EXPR_RESULT\n\n\nSubtree2: NUMBER 100.0 100\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression68 = jSDocInfo55.getThisType();
        java.lang.String str69 = jSDocInfo55.toString();
        boolean boolean71 = jSDocInfo55.hasParameterType("EXPR_RESULT 0 [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strSpliterator22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[hi!]");
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSTypeExpression67);
        org.junit.Assert.assertNull(jSTypeExpression68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "JSDocInfo" + "'", str69, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test09866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09866");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        boolean boolean7 = node1.isVar();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean10 = node9.isName();
        boolean boolean11 = node9.isSwitch();
        java.lang.String str12 = node9.toString();
        boolean boolean13 = node9.isWith();
        com.google.javascript.rhino.Node node14 = node1.srcref(node9);
        boolean boolean15 = node1.isNoSideEffectsCall();
        boolean boolean16 = node1.isName();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        com.google.javascript.rhino.jstype.JSType jSType19 = node18.getJSType();
        boolean boolean20 = node18.isScript();
        boolean boolean21 = node18.isTry();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean24 = node23.isName();
        boolean boolean25 = node23.isSwitch();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean28 = node23.hasChild(node27);
        com.google.javascript.rhino.Node node29 = com.google.javascript.jscomp.NodeUtil.newExpr(node23);
        node23.setOptionalArg(true);
        node23.putBooleanProp((int) (short) -1, true);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean37 = node36.isName();
        boolean boolean38 = node36.isSwitch();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean41 = node36.hasChild(node40);
        com.google.javascript.rhino.Node node42 = com.google.javascript.jscomp.NodeUtil.newExpr(node36);
        boolean boolean43 = node42.isRegExp();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean46 = node45.isName();
        boolean boolean47 = node45.isSwitch();
        java.lang.String str48 = node45.toString();
        com.google.javascript.rhino.Node node49 = node42.useSourceInfoIfMissingFromForTree(node45);
        com.google.javascript.rhino.Node node50 = node23.useSourceInfoFromForTree(node42);
        boolean boolean51 = node23.hasOneChild();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean54 = node53.isName();
        boolean boolean55 = node53.isSwitch();
        java.lang.String str56 = node53.toString();
        boolean boolean57 = node53.isVar();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean60 = node59.isName();
        boolean boolean61 = node59.isSwitch();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean64 = node59.hasChild(node63);
        com.google.javascript.rhino.Node node65 = com.google.javascript.jscomp.NodeUtil.newExpr(node59);
        boolean boolean66 = node65.isRegExp();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean69 = node68.isName();
        boolean boolean70 = node68.isSwitch();
        java.lang.String str71 = node68.toString();
        com.google.javascript.rhino.Node node72 = node65.useSourceInfoIfMissingFromForTree(node68);
        com.google.javascript.jscomp.CodingConvention.Bind bind73 = new com.google.javascript.jscomp.CodingConvention.Bind(node23, node53, node65);
        boolean boolean74 = node53.isInstanceOf();
        com.google.javascript.rhino.Node node75 = node18.useSourceInfoIfMissingFrom(node53);
        node18.putBooleanProp(30, false);
        boolean boolean79 = node18.isNE();
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newString("java.io.IOException: java.io.IOException: NUMBER -1.0\n", 16, 51);
        // The following exception was thrown during execution in test generation
        try {
            node1.addChildrenAfter(node18, node83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "NUMBER -1.0" + "'", str12, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(jSType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "NUMBER -1.0" + "'", str48, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "NUMBER -1.0" + "'", str56, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "NUMBER -1.0" + "'", str71, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node83);
    }

    @Test
    public void test09867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09867");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("InputId: InputId: java.io.IOException", (int) (byte) 10, (int) (byte) 100);
        node3.setLineno(97);
        boolean boolean6 = node3.isDebugger();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test09868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09868");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int1 = namePosition0.getPositionOnStartLine();
        int int2 = namePosition0.getPositionOnStartLine();
        int int3 = namePosition0.getEndLine();
        namePosition0.setPositionInformation((int) ' ', 32, 41, 44);
        int int9 = namePosition0.getStartLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 32 + "'", int9 == 32);
    }

    @Test
    public void test09869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09869");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getReturnDescription();
        boolean boolean3 = jSDocInfo0.hasFileOverview();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str5 = jSDocInfo0.getBlockDescription();
        boolean boolean7 = jSDocInfo0.hasParameter("NUMBER -1.0 [empty_block: 1]\n");
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test09870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09870");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        boolean boolean2 = node1.isDelProp();
        node1.setCharno(2);
        boolean boolean5 = node1.isTry();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        int int11 = node10.getChildCount();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean14 = node13.isName();
        boolean boolean15 = node13.isSwitch();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node13.hasChild(node17);
        boolean boolean19 = node13.isVar();
        com.google.javascript.rhino.Node node20 = node13.getParent();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean23 = node22.isName();
        boolean boolean24 = node22.isSwitch();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node22.hasChild(node26);
        boolean boolean28 = node22.isVar();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean31 = node30.isName();
        boolean boolean32 = node30.isSwitch();
        java.lang.String str33 = node30.toString();
        boolean boolean34 = node30.isWith();
        com.google.javascript.rhino.Node node35 = node22.srcref(node30);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(130, node10, node13, node30, node39, 0, 15);
        boolean boolean43 = node30.isTypeOf();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean46 = node45.isName();
        double double47 = node45.getDouble();
        node30.addChildToFront(node45);
        com.google.javascript.rhino.Node node49 = node30.getLastChild();
        boolean boolean50 = node1.isEquivalentTo(node30);
        com.google.javascript.rhino.InputId inputId51 = node30.getInputId();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "NUMBER -1.0" + "'", str33, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + (-1.0d) + "'", double47 == (-1.0d));
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(inputId51);
    }

    @Test
    public void test09871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09871");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        boolean boolean7 = jSDocInfo0.hasDescriptionForParameter("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        boolean boolean8 = jSDocInfo0.hasBaseType();
        int int9 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node12.isName();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean16 = node15.isName();
        boolean boolean17 = node15.isSwitch();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean20 = node15.hasChild(node19);
        com.google.javascript.rhino.Node node21 = com.google.javascript.jscomp.NodeUtil.newExpr(node15);
        boolean boolean22 = node21.isRegExp();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node24.isName();
        boolean boolean26 = node24.isSwitch();
        java.lang.String str27 = node24.toString();
        com.google.javascript.rhino.Node node28 = node21.useSourceInfoIfMissingFromForTree(node24);
        java.lang.String str29 = node12.checkTreeEquals(node28);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean33 = node32.isName();
        boolean boolean34 = node32.isSwitch();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean37 = node32.hasChild(node36);
        boolean boolean38 = node36.isGetElem();
        node12.putProp((int) (short) 100, (java.lang.Object) boolean38);
        boolean boolean40 = node12.isGetProp();
        int int42 = node12.getIntProp((int) (byte) -1);
        boolean boolean43 = strSet10.remove((java.lang.Object) int42);
        java.util.stream.Stream<java.lang.String> strStream44 = strSet10.stream();
        java.util.Iterator<java.lang.String> strItor45 = strSet10.iterator();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "NUMBER -1.0" + "'", str27, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n" + "'", str29, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strStream44);
        org.junit.Assert.assertNotNull(strItor45);
    }

    @Test
    public void test09872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09872");
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(35, nodeArray7, 54, (int) (byte) 100);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(0, nodeArray7, 4, 27);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(0, nodeArray7);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(53, nodeArray7);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(0, nodeArray7);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(15, nodeArray7);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(49, nodeArray7);
        boolean boolean19 = node18.wasEmptyNode();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable20 = node18.children();
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeIterable20);
    }

    @Test
    public void test09873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09873");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(135167);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = node1.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 135167");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09874");
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative1 = null;
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec2 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("", jSTypeNative1);
        java.lang.String str3 = assertionFunctionSpec2.getFunctionName();
        java.lang.String str4 = assertionFunctionSpec2.getFunctionName();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node6.isName();
        boolean boolean8 = node6.isSwitch();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node6.hasChild(node10);
        com.google.javascript.rhino.Node node12 = com.google.javascript.jscomp.NodeUtil.newExpr(node6);
        int int13 = node6.getLength();
        boolean boolean14 = node6.isNew();
        com.google.javascript.rhino.Node node15 = assertionFunctionSpec2.getAssertedParam(node6);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder16 = node15.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node17 = node15.getFirstChild();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder16);
        org.junit.Assert.assertNull(node17);
    }

    @Test
    public void test09875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09875");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node8.isName();
        boolean boolean10 = node8.isSwitch();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node8.hasChild(node12);
        com.google.javascript.rhino.Node node14 = com.google.javascript.jscomp.NodeUtil.newExpr(node8);
        boolean boolean15 = node14.isRegExp();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node17.isName();
        boolean boolean19 = node17.isSwitch();
        java.lang.String str20 = node17.toString();
        com.google.javascript.rhino.Node node21 = node14.useSourceInfoIfMissingFromForTree(node17);
        boolean boolean22 = node5.isEquivalentToTyped(node17);
        boolean boolean23 = node5.isTypeOf();
        boolean boolean24 = node5.isWhile();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "NUMBER -1.0" + "'", str20, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test09876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09876");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((-1.0d));
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test09877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09877");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("BITXOR 0\n", 4095, (int) (byte) 100);
        boolean boolean4 = node3.isCall();
        boolean boolean5 = node3.isTrue();
        com.google.javascript.rhino.Node node6 = null;
        // The following exception was thrown during execution in test generation
        try {
            node3.addChildToBack(node6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test09878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09878");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        java.lang.String str6 = jSDocInfo0.getFileOverview();
        boolean boolean7 = jSDocInfo0.isExport();
        boolean boolean8 = jSDocInfo0.hasReturnType();
        boolean boolean9 = jSDocInfo0.hasTypedefType();
        boolean boolean10 = jSDocInfo0.isExport();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getBaseType();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSTypeExpression11);
    }

    @Test
    public void test09879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09879");
        java.lang.Throwable throwable3 = null;
        java.io.IOException iOException4 = new java.io.IOException(throwable3);
        java.lang.Throwable throwable5 = null;
        java.io.IOException iOException6 = new java.io.IOException(throwable5);
        iOException4.addSuppressed((java.lang.Throwable) iOException6);
        java.io.IOException iOException8 = new java.io.IOException("hi!", (java.lang.Throwable) iOException4);
        java.io.IOException iOException9 = new java.io.IOException((java.lang.Throwable) iOException4);
        java.io.IOException iOException12 = new java.io.IOException("java.io.IOException");
        java.io.IOException iOException13 = new java.io.IOException("Unknown class name", (java.lang.Throwable) iOException12);
        iOException9.addSuppressed((java.lang.Throwable) iOException13);
        java.io.IOException iOException15 = new java.io.IOException((java.lang.Throwable) iOException9);
        java.io.IOException iOException16 = new java.io.IOException("NUMBER -1.0 [source_file: NUMBER -1.0\n]\n", (java.lang.Throwable) iOException9);
        java.io.IOException iOException17 = new java.io.IOException("java.io.IOException: java.io.IOException: NUMBER -1.0", (java.lang.Throwable) iOException9);
        java.lang.String str18 = iOException9.toString();
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.io.IOException: java.io.IOException" + "'", str18, "java.io.IOException: java.io.IOException");
    }

    @Test
    public void test09880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09880");
        com.google.javascript.rhino.jstype.JSType jSType0 = null;
        com.google.javascript.rhino.jstype.JSType jSType1 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair2 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType0, jSType1);
        com.google.javascript.rhino.jstype.JSType jSType3 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType4 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType5 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType6 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType7 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType8 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType9 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType10 = typePair2.typeB;
        org.junit.Assert.assertNull(jSType3);
        org.junit.Assert.assertNull(jSType4);
        org.junit.Assert.assertNull(jSType5);
        org.junit.Assert.assertNull(jSType6);
        org.junit.Assert.assertNull(jSType7);
        org.junit.Assert.assertNull(jSType8);
        org.junit.Assert.assertNull(jSType9);
        org.junit.Assert.assertNull(jSType10);
    }

    @Test
    public void test09881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09881");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        boolean boolean7 = node1.isVar();
        com.google.javascript.rhino.InputId inputId8 = null;
        node1.setInputId(inputId8);
        java.lang.Object obj11 = node1.getProp(52);
        boolean boolean12 = node1.isGetProp();
        boolean boolean13 = node1.isDefaultCase();
        node1.setSourceFileForTesting("STRING Not declared as a constructor");
        boolean boolean16 = node1.isDo();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test09882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09882");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        java.lang.String str6 = jSDocInfo0.getFileOverview();
        boolean boolean7 = jSDocInfo0.isExport();
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = jSDocInfo0.getTemplateTypeNames();
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList10 = jSDocInfo9.getExtendedInterfaces();
        java.lang.String str11 = jSDocInfo9.getVersion();
        boolean boolean12 = jSDocInfo9.isInterface();
        boolean boolean13 = jSDocInfo9.isJavaDispatch();
        boolean boolean14 = jSDocInfo9.isIdGenerator();
        com.google.javascript.rhino.Node node15 = jSDocInfo9.getAssociatedNode();
        boolean boolean16 = strList8.contains((java.lang.Object) jSDocInfo9);
        java.lang.String str17 = jSDocInfo9.getLicense();
        boolean boolean18 = jSDocInfo9.hasTypedefType();
        jSDocInfo9.setLicense("Node tree inequality:\nTree1:\nSTRING BITXOR 0\n 4095\n\n\nTree2:\nNUMBER -1.0\n\n\nSubtree1: STRING BITXOR 0\n 4095\n\n\nSubtree2: NUMBER -1.0\n");
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(jSTypeExpressionList10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test09883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09883");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition1 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int2 = namePosition1.getPositionOnStartLine();
        int int3 = namePosition1.getStartLine();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node5.isName();
        boolean boolean7 = node5.isSwitch();
        java.lang.String str8 = node5.toString();
        boolean boolean9 = node5.isNumber();
        boolean boolean10 = node5.isComma();
        boolean boolean11 = node5.isDebugger();
        boolean boolean12 = node5.isWith();
        namePosition1.setItem(node5);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean16 = node15.isName();
        boolean boolean17 = node15.isSwitch();
        java.lang.String str18 = node15.toString();
        boolean boolean19 = node15.isWith();
        int int21 = node15.getIntProp((int) ' ');
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder22 = node15.new FileLevelJsDocBuilder();
        int int23 = node5.getIndexOfChild(node15);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(49, node5, 35, 10);
        boolean boolean27 = node26.hasOneChild();
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList29 = jSDocInfo28.getExtendedInterfaces();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean32 = node31.isName();
        boolean boolean33 = node31.isSwitch();
        java.lang.String str34 = node31.toString();
        boolean boolean35 = node31.isVar();
        jSDocInfo28.setAssociatedNode(node31);
        boolean boolean37 = jSDocInfo28.isNoSideEffects();
        boolean boolean38 = jSDocInfo28.isExterns();
        java.lang.String str39 = jSDocInfo28.getBlockDescription();
        com.google.javascript.rhino.Node node40 = jSDocInfo28.getAssociatedNode();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean43 = node42.isName();
        boolean boolean44 = node42.isSwitch();
        java.lang.String str45 = node42.toString();
        boolean boolean46 = node42.isNumber();
        boolean boolean47 = node42.isStringKey();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean50 = node49.isName();
        boolean boolean51 = node49.isSwitch();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean54 = node49.hasChild(node53);
        java.lang.String str55 = com.google.javascript.jscomp.NodeUtil.getSourceName(node49);
        node49.setSourceFileForTesting("hi!");
        boolean boolean58 = node49.isString();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean61 = node60.isName();
        boolean boolean62 = node60.isSwitch();
        java.lang.String str63 = node60.toString();
        boolean boolean64 = node60.isWith();
        boolean boolean65 = node60.isBreak();
        com.google.javascript.rhino.JSDocInfo jSDocInfo66 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList67 = jSDocInfo66.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection68 = jSDocInfo66.getReferences();
        java.util.Collection<java.lang.String> strCollection69 = jSDocInfo66.getReferences();
        com.google.javascript.rhino.Node node70 = jSDocInfo66.getAssociatedNode();
        node60.setJSDocInfo(jSDocInfo66);
        com.google.javascript.rhino.Node node72 = node49.useSourceInfoIfMissingFromForTree(node60);
        boolean boolean73 = node60.isTry();
        boolean boolean74 = node42.isEquivalentTo(node60);
        com.google.javascript.jscomp.CodingConvention.Bind bind75 = new com.google.javascript.jscomp.CodingConvention.Bind(node26, node40, node60);
        boolean boolean76 = node60.isEmpty();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "NUMBER -1.0" + "'", str8, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "NUMBER -1.0" + "'", str18, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(jSTypeExpressionList29);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "NUMBER -1.0" + "'", str34, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "NUMBER -1.0" + "'", str45, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "NUMBER -1.0" + "'", str63, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList67);
        org.junit.Assert.assertNull(strCollection68);
        org.junit.Assert.assertNull(strCollection69);
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test09884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09884");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(35, nodeArray2, 54, (int) (byte) 100);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node7.isName();
        boolean boolean9 = node7.isSwitch();
        java.lang.String str10 = node7.toString();
        boolean boolean11 = node7.isWith();
        boolean boolean12 = node7.hasOneChild();
        boolean boolean13 = node7.isDebugger();
        com.google.javascript.rhino.Node node14 = node7.cloneNode();
        boolean boolean15 = node7.isSyntheticBlock();
        boolean boolean16 = node7.isTypeOf();
        node5.addChildrenToFront(node7);
        boolean boolean18 = node5.isOptionalArg();
        java.lang.String str19 = node5.getQualifiedName();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) ' ');
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        com.google.javascript.rhino.jstype.JSType jSType25 = node24.getJSType();
        boolean boolean26 = node24.isScript();
        boolean boolean27 = node24.isTry();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean30 = node29.isName();
        boolean boolean31 = node29.isSwitch();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean34 = node29.hasChild(node33);
        com.google.javascript.rhino.Node node35 = com.google.javascript.jscomp.NodeUtil.newExpr(node29);
        node29.setOptionalArg(true);
        node29.putBooleanProp((int) (short) -1, true);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean43 = node42.isName();
        boolean boolean44 = node42.isSwitch();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean47 = node42.hasChild(node46);
        com.google.javascript.rhino.Node node48 = com.google.javascript.jscomp.NodeUtil.newExpr(node42);
        boolean boolean49 = node48.isRegExp();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean52 = node51.isName();
        boolean boolean53 = node51.isSwitch();
        java.lang.String str54 = node51.toString();
        com.google.javascript.rhino.Node node55 = node48.useSourceInfoIfMissingFromForTree(node51);
        com.google.javascript.rhino.Node node56 = node29.useSourceInfoFromForTree(node48);
        boolean boolean57 = node29.hasOneChild();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean60 = node59.isName();
        boolean boolean61 = node59.isSwitch();
        java.lang.String str62 = node59.toString();
        boolean boolean63 = node59.isVar();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean66 = node65.isName();
        boolean boolean67 = node65.isSwitch();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean70 = node65.hasChild(node69);
        com.google.javascript.rhino.Node node71 = com.google.javascript.jscomp.NodeUtil.newExpr(node65);
        boolean boolean72 = node71.isRegExp();
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean75 = node74.isName();
        boolean boolean76 = node74.isSwitch();
        java.lang.String str77 = node74.toString();
        com.google.javascript.rhino.Node node78 = node71.useSourceInfoIfMissingFromForTree(node74);
        com.google.javascript.jscomp.CodingConvention.Bind bind79 = new com.google.javascript.jscomp.CodingConvention.Bind(node29, node59, node71);
        boolean boolean80 = node59.isInstanceOf();
        com.google.javascript.rhino.Node node81 = node24.useSourceInfoIfMissingFrom(node59);
        boolean boolean82 = node81.isLocalResultCall();
        boolean boolean83 = node22.isEquivalentTo(node81);
        boolean boolean84 = node81.isDebugger();
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node((int) (byte) 10, node81);
        boolean boolean86 = node81.isAnd();
        boolean boolean87 = node81.isArrayLit();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node90 = new com.google.javascript.rhino.Node((int) (byte) 1, node5, node81, 24, 31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: second new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER -1.0" + "'", str10, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(jSType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "NUMBER -1.0" + "'", str54, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "NUMBER -1.0" + "'", str62, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "NUMBER -1.0" + "'", str77, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test09885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09885");
        com.google.javascript.rhino.Node[] nodeArray5 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(35, nodeArray5, 54, (int) (byte) 100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(40, nodeArray5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(409642, nodeArray5);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (byte) 0, nodeArray5);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(43, nodeArray5);
        boolean boolean13 = node12.isLocalResultCall();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable14 = node12.children();
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(nodeIterable14);
    }

    @Test
    public void test09886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09886");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        int int5 = node4.getChildCount();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node7.isName();
        boolean boolean9 = node7.isSwitch();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node7.hasChild(node11);
        boolean boolean13 = node7.isVar();
        com.google.javascript.rhino.Node node14 = node7.getParent();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node16.isName();
        boolean boolean18 = node16.isSwitch();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node16.hasChild(node20);
        boolean boolean22 = node16.isVar();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node24.isName();
        boolean boolean26 = node24.isSwitch();
        java.lang.String str27 = node24.toString();
        boolean boolean28 = node24.isWith();
        com.google.javascript.rhino.Node node29 = node16.srcref(node24);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(130, node4, node7, node24, node33, 0, 15);
        boolean boolean37 = node24.isTypeOf();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean40 = node39.isName();
        double double41 = node39.getDouble();
        node24.addChildToFront(node39);
        node24.detachChildren();
        node24.setSourceFileForTesting("Named type with empty name component");
        boolean boolean46 = node24.isIf();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node24);
        int int49 = staticSourceFile47.getLineOfOffset(100);
        int int51 = staticSourceFile47.getLineOfOffset(13);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "NUMBER -1.0" + "'", str27, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + (-1.0d) + "'", double41 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(staticSourceFile47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
    }

    @Test
    public void test09887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09887");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 10, (int) (byte) 0, 41);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder4 = node3.new FileLevelJsDocBuilder();
        node3.putBooleanProp(16, false);
        node3.setIsSyntheticBlock(false);
    }

    @Test
    public void test09888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09888");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.hasParameter("hi!");
        boolean boolean4 = jSDocInfo0.hasThisType();
        boolean boolean5 = jSDocInfo0.isIdGenerator();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        boolean boolean8 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node10.hasChild(node14);
        com.google.javascript.rhino.Node node16 = com.google.javascript.jscomp.NodeUtil.newExpr(node10);
        boolean boolean17 = node16.isRegExp();
        jSDocInfo0.setAssociatedNode(node16);
        jSDocInfo0.addSuppression("Not declared as a constructor");
        boolean boolean21 = jSDocInfo0.isDefine();
        java.lang.String str22 = jSDocInfo0.getVersion();
        boolean boolean23 = jSDocInfo0.isIdGenerator();
        com.google.javascript.rhino.Node node24 = jSDocInfo0.getAssociatedNode();
        boolean boolean25 = node24.isLabelName();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test09889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09889");
        java.io.IOException iOException1 = new java.io.IOException("NUMBER 100.0 100");
        java.io.IOException iOException3 = new java.io.IOException("Node tree inequality:\nTree1:\nNUMBER 100.0 100\n\n\nTree2:\nNUMBER -1.0\n\n\nSubtree1: NUMBER 100.0 100\n\n\nSubtree2: NUMBER -1.0\n");
        java.lang.Throwable throwable5 = null;
        java.io.IOException iOException6 = new java.io.IOException(throwable5);
        java.io.IOException iOException7 = new java.io.IOException((java.lang.Throwable) iOException6);
        java.io.IOException iOException8 = new java.io.IOException("NUMBER -1.0\n", (java.lang.Throwable) iOException6);
        iOException3.addSuppressed((java.lang.Throwable) iOException8);
        iOException1.addSuppressed((java.lang.Throwable) iOException3);
    }

    @Test
    public void test09890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09890");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("Named type with empty name component");
        boolean boolean4 = jSDocInfo0.hasType();
        jSDocInfo0.addSuppression("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        boolean boolean7 = jSDocInfo0.hasThisType();
        boolean boolean8 = jSDocInfo0.isConsistentIdGenerator();
        java.lang.String str9 = jSDocInfo0.getFileOverview();
        java.lang.String str10 = jSDocInfo0.getDeprecationReason();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test09891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09891");
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(35, nodeArray6, 54, (int) (byte) 100);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(40, nodeArray6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(409642, nodeArray6);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 0, nodeArray6);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(40, nodeArray6);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(36, nodeArray6, 15, (-1));
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList18 = jSDocInfo17.getExtendedInterfaces();
        java.lang.String str19 = jSDocInfo17.getVersion();
        boolean boolean20 = jSDocInfo17.isInterface();
        boolean boolean21 = jSDocInfo17.isJavaDispatch();
        java.util.Set<java.lang.String> strSet22 = jSDocInfo17.getModifies();
        java.util.Spliterator<java.lang.String> strSpliterator23 = strSet22.spliterator();
        java.lang.Throwable throwable25 = null;
        java.io.IOException iOException26 = new java.io.IOException(throwable25);
        java.lang.Throwable throwable27 = null;
        java.io.IOException iOException28 = new java.io.IOException(throwable27);
        iOException26.addSuppressed((java.lang.Throwable) iOException28);
        java.io.IOException iOException30 = new java.io.IOException("hi!", (java.lang.Throwable) iOException26);
        java.lang.Throwable[] throwableArray31 = iOException30.getSuppressed();
        java.lang.Object[] objArray32 = strSet22.toArray((java.lang.Object[]) throwableArray31);
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList34 = jSDocInfo33.getExtendedInterfaces();
        java.lang.String str35 = jSDocInfo33.getVersion();
        boolean boolean36 = jSDocInfo33.isInterface();
        boolean boolean37 = jSDocInfo33.isJavaDispatch();
        java.lang.String str38 = jSDocInfo33.getSourceName();
        java.lang.String str39 = jSDocInfo33.getFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression40 = jSDocInfo33.getThisType();
        boolean boolean41 = jSDocInfo33.isHidden();
        boolean boolean42 = jSDocInfo33.hasBaseType();
        java.lang.String str43 = jSDocInfo33.getSourceName();
        boolean boolean44 = strSet22.equals((java.lang.Object) jSDocInfo33);
        strSet22.clear();
        node16.setDirectives(strSet22);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(jSTypeExpressionList18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNotNull(strSpliterator23);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(jSTypeExpressionList34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(jSTypeExpression40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test09892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09892");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 10L, 48, 50);
        com.google.javascript.rhino.Node node4 = node3.getFirstChild();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        node6.setWasEmptyNode(true);
        boolean boolean9 = node6.isOr();
        boolean boolean10 = node6.isInstanceOf();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable11 = node6.children();
        node6.setDouble((double) 1L);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean16 = node15.isName();
        node15.removeProp((int) (byte) 1);
        boolean boolean19 = node15.isFromExterns();
        java.lang.String str20 = node6.checkTreeEquals(node15);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder21 = node15.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node22 = node3.copyInformationFromForTree(node15);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node24.isName();
        boolean boolean26 = node24.isSwitch();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean29 = node24.hasChild(node28);
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection30 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node28);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean33 = node32.isName();
        boolean boolean34 = node32.isSwitch();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean37 = node32.hasChild(node36);
        com.google.javascript.rhino.Node node38 = com.google.javascript.jscomp.NodeUtil.newExpr(node32);
        node32.setOptionalArg(true);
        node32.putBooleanProp((int) (short) -1, true);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean46 = node45.isName();
        boolean boolean47 = node45.isSwitch();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean50 = node45.hasChild(node49);
        com.google.javascript.rhino.Node node51 = com.google.javascript.jscomp.NodeUtil.newExpr(node45);
        boolean boolean52 = node51.isRegExp();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean55 = node54.isName();
        boolean boolean56 = node54.isSwitch();
        java.lang.String str57 = node54.toString();
        com.google.javascript.rhino.Node node58 = node51.useSourceInfoIfMissingFromForTree(node54);
        com.google.javascript.rhino.Node node59 = node32.useSourceInfoFromForTree(node51);
        boolean boolean60 = node32.hasOneChild();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean63 = node62.isName();
        boolean boolean64 = node62.isSwitch();
        java.lang.String str65 = node62.toString();
        boolean boolean66 = node62.isVar();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean69 = node68.isName();
        boolean boolean70 = node68.isSwitch();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean73 = node68.hasChild(node72);
        com.google.javascript.rhino.Node node74 = com.google.javascript.jscomp.NodeUtil.newExpr(node68);
        boolean boolean75 = node74.isRegExp();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean78 = node77.isName();
        boolean boolean79 = node77.isSwitch();
        java.lang.String str80 = node77.toString();
        com.google.javascript.rhino.Node node81 = node74.useSourceInfoIfMissingFromForTree(node77);
        com.google.javascript.jscomp.CodingConvention.Bind bind82 = new com.google.javascript.jscomp.CodingConvention.Bind(node32, node62, node74);
        com.google.javascript.rhino.InputId inputId84 = new com.google.javascript.rhino.InputId("");
        java.lang.String str85 = inputId84.getIdName();
        java.lang.String str86 = inputId84.getIdName();
        node62.setInputId(inputId84);
        node28.setInputId(inputId84);
        java.lang.String str89 = node15.checkTreeEquals(node28);
        int int90 = node15.getType();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(nodeIterable11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 1.0 [empty_block: 1]\n\n\nTree2:\nNUMBER -1.0\n\n\nSubtree1: NUMBER 1.0 [empty_block: 1]\n\n\nSubtree2: NUMBER -1.0\n" + "'", str20, "Node tree inequality:\nTree1:\nNUMBER 1.0 [empty_block: 1]\n\n\nTree2:\nNUMBER -1.0\n\n\nSubtree1: NUMBER 1.0 [empty_block: 1]\n\n\nSubtree2: NUMBER -1.0\n");
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(nodeCollection30);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "NUMBER -1.0" + "'", str57, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "NUMBER -1.0" + "'", str65, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "NUMBER -1.0" + "'", str80, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 39 + "'", int90 == 39);
    }

    @Test
    public void test09893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09893");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean3 = jSDocInfo0.hasParameter("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node6.isFunction();
        boolean boolean8 = node6.isUnscopedQualifiedName();
        boolean boolean9 = node6.isEmpty();
        boolean boolean10 = node6.isEmpty();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node12.isName();
        boolean boolean14 = node12.isSwitch();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node12.hasChild(node16);
        boolean boolean18 = node12.isVar();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node20.isName();
        boolean boolean22 = node20.isSwitch();
        java.lang.String str23 = node20.toString();
        boolean boolean24 = node20.isWith();
        com.google.javascript.rhino.Node node25 = node12.srcref(node20);
        node12.detachChildren();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        com.google.javascript.jscomp.CodingConvention.Bind bind29 = new com.google.javascript.jscomp.CodingConvention.Bind(node6, node12, node28);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) 10, 100, 12);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean36 = node35.isName();
        boolean boolean37 = node35.isSwitch();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean40 = node35.hasChild(node39);
        boolean boolean41 = node35.isComma();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean44 = node43.isName();
        boolean boolean45 = node43.isSwitch();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean48 = node43.hasChild(node47);
        com.google.javascript.rhino.Node node49 = com.google.javascript.jscomp.NodeUtil.newExpr(node43);
        boolean boolean50 = node49.isRegExp();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean53 = node52.isName();
        boolean boolean54 = node52.isSwitch();
        java.lang.String str55 = node52.toString();
        com.google.javascript.rhino.Node node56 = node49.useSourceInfoIfMissingFromForTree(node52);
        com.google.javascript.rhino.jstype.JSType jSType57 = null;
        node52.setJSType(jSType57);
        boolean boolean59 = node52.isBlock();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (byte) -1, node6, node33, node35, node52, 10, (int) (short) 10);
        boolean boolean63 = node6.hasChildren();
        jSDocInfo0.setAssociatedNode(node6);
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber((double) 0.0f, (int) (byte) 1, 4095);
        boolean boolean69 = node68.isQuotedString();
        com.google.javascript.rhino.Node node70 = node6.srcref(node68);
        boolean boolean71 = node6.hasOneChild();
        boolean boolean72 = node6.isBlock();
        boolean boolean73 = node6.isDefaultCase();
        boolean boolean74 = node6.isTry();
        java.lang.String str75 = node6.getQualifiedName();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "NUMBER -1.0" + "'", str23, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "NUMBER -1.0" + "'", str55, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(str75);
    }

    @Test
    public void test09894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09894");
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative1 = null;
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec2 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n", jSTypeNative1);
        com.google.javascript.rhino.Node node3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry4 = null;
        com.google.javascript.rhino.jstype.JSType jSType5 = assertionFunctionSpec2.getAssertedType(node3, jSTypeRegistry4);
        org.junit.Assert.assertNull(jSType5);
    }

    @Test
    public void test09895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09895");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        int int8 = node1.getLength();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        node1.setDirectives((java.util.Set<java.lang.String>) strSet12);
        java.lang.Object[] objArray15 = strSet12.toArray();
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        int int20 = strList18.size();
        boolean boolean21 = strSet12.containsAll((java.util.Collection<java.lang.String>) strList18);
        java.util.Spliterator<java.lang.String> strSpliterator22 = strSet12.spliterator();
        int int23 = strSet12.size();
        strSet12.clear();
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList26 = jSDocInfo25.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection27 = jSDocInfo25.getReferences();
        java.util.Collection<java.lang.String> strCollection28 = jSDocInfo25.getReferences();
        com.google.javascript.rhino.Node node29 = jSDocInfo25.getAssociatedNode();
        boolean boolean30 = jSDocInfo25.isNoSideEffects();
        boolean boolean31 = jSDocInfo25.isConstant();
        boolean boolean32 = strSet12.equals((java.lang.Object) boolean31);
        java.lang.Object[] objArray33 = strSet12.toArray();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean36 = node35.isName();
        boolean boolean37 = node35.isSwitch();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean40 = node35.hasChild(node39);
        com.google.javascript.rhino.Node node41 = com.google.javascript.jscomp.NodeUtil.newExpr(node35);
        int int42 = node35.getLength();
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        node35.setDirectives((java.util.Set<java.lang.String>) strSet46);
        java.lang.Object[] objArray49 = strSet46.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet51 = jSDocInfo50.getParameterNames();
        java.util.stream.Stream<java.lang.String> strStream52 = strSet51.stream();
        boolean boolean53 = strSet46.containsAll((java.util.Collection<java.lang.String>) strSet51);
        java.util.stream.Stream<java.lang.String> strStream54 = strSet51.parallelStream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo55 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList56 = jSDocInfo55.getExtendedInterfaces();
        java.lang.String str57 = jSDocInfo55.getVersion();
        boolean boolean58 = jSDocInfo55.isInterface();
        java.lang.String str59 = jSDocInfo55.getLendsName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression60 = jSDocInfo55.getBaseType();
        boolean boolean61 = jSDocInfo55.isJavaDispatch();
        com.google.common.collect.ImmutableList<java.lang.String> strList62 = jSDocInfo55.getTemplateTypeNames();
        boolean boolean63 = strSet51.containsAll((java.util.Collection<java.lang.String>) strList62);
        int int64 = strSet51.size();
        boolean boolean65 = strSet12.removeAll((java.util.Collection<java.lang.String>) strSet51);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[hi!]");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strSpliterator22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(jSTypeExpressionList26);
        org.junit.Assert.assertNull(strCollection27);
        org.junit.Assert.assertNull(strCollection28);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[hi!]");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertNotNull(strStream52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strStream54);
        org.junit.Assert.assertNotNull(jSTypeExpressionList56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNull(jSTypeExpression60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test09896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09896");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getReferences();
        boolean boolean3 = jSDocInfo0.isJavaDispatch();
        java.lang.String str4 = jSDocInfo0.toString();
        boolean boolean5 = jSDocInfo0.isImplicitCast();
        int int6 = jSDocInfo0.getImplementedInterfaceCount();
        java.lang.String str7 = jSDocInfo0.getReturnDescription();
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = jSDocInfo0.getTemplateTypeNames();
        java.lang.String str9 = jSDocInfo0.getDescription();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList10 = jSDocInfo0.getExtendedInterfaces();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JSDocInfo" + "'", str4, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(jSTypeExpressionList10);
    }

    @Test
    public void test09897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09897");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN;
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        java.lang.String str5 = node2.toString();
        boolean boolean6 = node2.isWith();
        int int8 = node2.getIntProp((int) ' ');
        boolean boolean9 = node2.isNE();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node11.isName();
        boolean boolean13 = node11.isSwitch();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean16 = node11.hasChild(node15);
        com.google.javascript.rhino.jstype.JSType jSType17 = null;
        node15.setJSType(jSType17);
        node15.setType(2);
        com.google.javascript.rhino.Node node21 = node15.getLastSibling();
        com.google.javascript.rhino.Node node22 = node2.srcref(node21);
        node2.setOptionalArg(true);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean28 = node27.isName();
        boolean boolean29 = node27.isSwitch();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean32 = node27.hasChild(node31);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean35 = node34.isName();
        boolean boolean36 = node34.isSwitch();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean39 = node34.hasChild(node38);
        com.google.javascript.rhino.Node node40 = com.google.javascript.jscomp.NodeUtil.newExpr(node34);
        boolean boolean41 = node40.isRegExp();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean44 = node43.isName();
        boolean boolean45 = node43.isSwitch();
        java.lang.String str46 = node43.toString();
        com.google.javascript.rhino.Node node47 = node40.useSourceInfoIfMissingFromForTree(node43);
        boolean boolean48 = node31.isEquivalentToTyped(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean51 = node50.isName();
        boolean boolean52 = node50.isSwitch();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean55 = node50.hasChild(node54);
        com.google.javascript.rhino.jstype.JSType jSType56 = null;
        node54.setJSType(jSType56);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(45, node31, node54, 10, 2);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean63 = node62.isName();
        boolean boolean64 = node62.isSwitch();
        boolean boolean65 = node62.isVarArgs();
        boolean boolean66 = node31.hasChild(node62);
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean69 = node68.isName();
        boolean boolean70 = node68.isSwitch();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean73 = node68.hasChild(node72);
        boolean boolean74 = node68.isVar();
        node68.setWasEmptyNode(false);
        boolean boolean77 = node62.hasChild(node68);
        boolean boolean78 = node62.isInstanceOf();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship79 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node2, node62);
        boolean boolean80 = node2.isWith();
        int int82 = node2.getIntProp((int) (byte) 1);
        boolean boolean83 = node2.isIn();
        org.junit.Assert.assertTrue("'" + subclassType0 + "' != '" + com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN + "'", subclassType0.equals(com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN));
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "NUMBER -1.0" + "'", str5, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "NUMBER -1.0" + "'", str46, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test09898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09898");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        int int8 = node1.getLength();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        node1.setDirectives((java.util.Set<java.lang.String>) strSet12);
        java.lang.Object[] objArray15 = strSet12.toArray();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node17.isName();
        boolean boolean19 = node17.isSwitch();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node17.hasChild(node21);
        com.google.javascript.rhino.Node node23 = com.google.javascript.jscomp.NodeUtil.newExpr(node17);
        int int24 = node17.getLength();
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node17.setDirectives((java.util.Set<java.lang.String>) strSet28);
        java.lang.Object[] objArray31 = strSet28.toArray();
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        int int36 = strList34.size();
        boolean boolean37 = strSet28.containsAll((java.util.Collection<java.lang.String>) strList34);
        java.util.Spliterator<java.lang.String> strSpliterator38 = strSet28.spliterator();
        boolean boolean39 = strSet28.isEmpty();
        boolean boolean41 = strSet28.add("NUMBER -1.0\n");
        java.lang.Object[] objArray42 = strSet28.toArray();
        boolean boolean43 = strSet12.retainAll((java.util.Collection<java.lang.String>) strSet28);
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet45 = jSDocInfo44.getParameterNames();
        boolean boolean47 = jSDocInfo44.hasParameter("hi!");
        boolean boolean48 = jSDocInfo44.hasThisType();
        java.util.Set<java.lang.String> strSet49 = jSDocInfo44.getModifies();
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet51 = jSDocInfo50.getParameterNames();
        boolean boolean52 = strSet49.addAll((java.util.Collection<java.lang.String>) strSet51);
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet58 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet58, strArray57);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean62 = node61.isName();
        boolean boolean63 = node61.isSwitch();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean66 = node61.hasChild(node65);
        com.google.javascript.rhino.Node node67 = com.google.javascript.jscomp.NodeUtil.newExpr(node61);
        int int68 = node61.getLength();
        java.lang.String[] strArray71 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet72 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet72, strArray71);
        node61.setDirectives((java.util.Set<java.lang.String>) strSet72);
        java.util.Spliterator<java.lang.String> strSpliterator75 = strSet72.spliterator();
        boolean boolean76 = strSet58.retainAll((java.util.Collection<java.lang.String>) strSet72);
        java.lang.Object[] objArray77 = strSet58.toArray();
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean80 = node79.isName();
        boolean boolean81 = node79.isSwitch();
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean84 = node79.hasChild(node83);
        com.google.javascript.rhino.Node node85 = com.google.javascript.jscomp.NodeUtil.newExpr(node79);
        int int86 = node79.getLength();
        java.lang.String[] strArray89 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet90 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean91 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet90, strArray89);
        node79.setDirectives((java.util.Set<java.lang.String>) strSet90);
        boolean boolean93 = strSet90.isEmpty();
        boolean boolean94 = strSet58.containsAll((java.util.Collection<java.lang.String>) strSet90);
        com.google.javascript.rhino.JSDocInfo jSDocInfo95 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet96 = jSDocInfo95.getParameterNames();
        boolean boolean97 = strSet58.containsAll((java.util.Collection<java.lang.String>) strSet96);
        boolean boolean98 = strSet49.retainAll((java.util.Collection<java.lang.String>) strSet96);
        boolean boolean99 = strSet28.containsAll((java.util.Collection<java.lang.String>) strSet49);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[hi!]");
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[hi!]");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(strSpliterator38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[hi!, NUMBER -1.0\n]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[hi!, NUMBER -1.0\n]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(strSpliterator75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[hi!]");
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(strSet96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test09899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09899");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        com.google.common.collect.ImmutableList<java.lang.String> strList2 = jSDocInfo0.getTemplateTypeNames();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection3 = jSDocInfo0.getMarkers();
        java.lang.String str4 = jSDocInfo0.getOriginalCommentString();
        boolean boolean5 = jSDocInfo0.isNoAlias();
        jSDocInfo0.setDeprecated(true);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertNotNull(markerCollection3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test09900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09900");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node2.hasChild(node6);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean10 = node9.isName();
        boolean boolean11 = node9.isSwitch();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean14 = node9.hasChild(node13);
        com.google.javascript.rhino.Node node15 = com.google.javascript.jscomp.NodeUtil.newExpr(node9);
        boolean boolean16 = node15.isRegExp();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean19 = node18.isName();
        boolean boolean20 = node18.isSwitch();
        java.lang.String str21 = node18.toString();
        com.google.javascript.rhino.Node node22 = node15.useSourceInfoIfMissingFromForTree(node18);
        boolean boolean23 = node6.isEquivalentToTyped(node18);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean26 = node25.isName();
        boolean boolean27 = node25.isSwitch();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean30 = node25.hasChild(node29);
        com.google.javascript.rhino.jstype.JSType jSType31 = null;
        node29.setJSType(jSType31);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(45, node6, node29, 10, 2);
        java.util.Set<java.lang.String> strSet36 = null;
        node6.setDirectives(strSet36);
        boolean boolean38 = node6.isIf();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.JSDocInfo jSDocInfo39 = com.google.javascript.jscomp.NodeUtil.getFunctionJSDocInfo(node6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "NUMBER -1.0" + "'", str21, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test09901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09901");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.hasParameter("hi!");
        boolean boolean4 = jSDocInfo0.hasThisType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getModifies();
        boolean boolean6 = jSDocInfo0.hasModifies();
        boolean boolean7 = jSDocInfo0.isIdGenerator();
        int int8 = jSDocInfo0.getExtendedInterfacesCount();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test09902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09902");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node2.hasChild(node6);
        boolean boolean8 = node2.isVar();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        java.lang.String str13 = node10.toString();
        boolean boolean14 = node10.isWith();
        com.google.javascript.rhino.Node node15 = node2.srcref(node10);
        boolean boolean16 = node10.isFor();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean19 = node18.isName();
        boolean boolean20 = node18.isSwitch();
        boolean boolean21 = node18.isNull();
        boolean boolean22 = node18.isFunction();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node24.isName();
        boolean boolean26 = node24.isSwitch();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean29 = node24.hasChild(node28);
        boolean boolean30 = node24.isVar();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean33 = node32.isName();
        boolean boolean34 = node32.isSwitch();
        java.lang.String str35 = node32.toString();
        boolean boolean36 = node32.isWith();
        com.google.javascript.rhino.Node node37 = node24.srcref(node32);
        java.lang.String str38 = node37.toString();
        boolean boolean39 = node37.isDec();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean42 = node41.isName();
        boolean boolean43 = node41.isSwitch();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean46 = node41.hasChild(node45);
        com.google.javascript.rhino.Node node47 = com.google.javascript.jscomp.NodeUtil.newExpr(node41);
        boolean boolean48 = node47.isRegExp();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean51 = node50.isName();
        boolean boolean52 = node50.isSwitch();
        java.lang.String str53 = node50.toString();
        com.google.javascript.rhino.Node node54 = node47.useSourceInfoIfMissingFromForTree(node50);
        com.google.javascript.rhino.jstype.JSType jSType55 = null;
        node50.setJSType(jSType55);
        boolean boolean57 = node50.isOptionalArg();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) -1, node10, node18, node37, node50, (int) (short) -1, 0);
        boolean boolean61 = node37.isFromExterns();
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        node37.setJSType(jSType62);
        com.google.javascript.rhino.InputId inputId64 = com.google.javascript.jscomp.NodeUtil.getInputId(node37);
        boolean boolean65 = node37.isQualifiedName();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "NUMBER -1.0" + "'", str13, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "NUMBER -1.0" + "'", str35, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "NUMBER -1.0" + "'", str38, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "NUMBER -1.0" + "'", str53, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(inputId64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test09903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09903");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        java.lang.String str4 = node1.toString();
        boolean boolean5 = node1.isNumber();
        boolean boolean6 = node1.isComma();
        boolean boolean7 = node1.isDebugger();
        boolean boolean8 = node1.isOptionalArg();
        com.google.javascript.rhino.jstype.JSType jSType9 = node1.getJSType();
        boolean boolean10 = node1.isEmpty();
        boolean boolean11 = node1.isNE();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        boolean boolean16 = node15.isBreak();
        com.google.javascript.rhino.Node node17 = node1.clonePropsFrom(node15);
        boolean boolean18 = node17.isLabelName();
        node17.putBooleanProp(41, false);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER -1.0" + "'", str4, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test09904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09904");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int1 = namePosition0.getPositionOnStartLine();
        int int2 = namePosition0.getPositionOnStartLine();
        int int3 = namePosition0.getPositionOnStartLine();
        int int4 = namePosition0.getPositionOnStartLine();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node6.isName();
        boolean boolean8 = node6.isSwitch();
        java.lang.String str9 = node6.toString();
        boolean boolean10 = node6.isWith();
        boolean boolean11 = node6.hasOneChild();
        boolean boolean12 = node6.isLocalResultCall();
        namePosition0.setItem(node6);
        com.google.javascript.rhino.Node node14 = com.google.javascript.jscomp.NodeUtil.newExpr(node6);
        java.lang.String str15 = node14.toStringTree();
        int int16 = node14.getType();
        node14.putBooleanProp(50, false);
        int int20 = node14.getSideEffectFlags();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER -1.0" + "'", str9, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "EXPR_RESULT\n    NUMBER -1.0\n" + "'", str15, "EXPR_RESULT\n    NUMBER -1.0\n");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 130 + "'", int16 == 130);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test09905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09905");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.jstype.JSType jSType7 = null;
        node5.setJSType(jSType7);
        node5.setType(2);
        boolean boolean11 = node5.isIn();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder12 = node5.getJsDocBuilderForNode();
        boolean boolean13 = node5.isOptionalArg();
        node5.setVarArgs(false);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable16 = node5.getAncestors();
        node5.setSourceEncodedPositionForTree(204831);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(ancestorIterable16);
    }

    @Test
    public void test09906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09906");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean1 = typePosition0.hasBrackets();
        int int2 = typePosition0.getEndLine();
        int int3 = typePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative5 = null;
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec6 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("", jSTypeNative5);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node8.isName();
        boolean boolean10 = node8.isSwitch();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node8.hasChild(node12);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean16 = node15.isName();
        boolean boolean17 = node15.isSwitch();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean20 = node15.hasChild(node19);
        com.google.javascript.rhino.Node node21 = com.google.javascript.jscomp.NodeUtil.newExpr(node15);
        boolean boolean22 = node21.isRegExp();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node24.isName();
        boolean boolean26 = node24.isSwitch();
        java.lang.String str27 = node24.toString();
        com.google.javascript.rhino.Node node28 = node21.useSourceInfoIfMissingFromForTree(node24);
        boolean boolean29 = node12.isEquivalentToTyped(node24);
        com.google.javascript.rhino.Node node30 = assertionFunctionSpec6.getAssertedParam(node12);
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative32 = null;
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec33 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("", jSTypeNative32);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean36 = node35.isName();
        boolean boolean37 = node35.isSwitch();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean40 = node35.hasChild(node39);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean43 = node42.isName();
        boolean boolean44 = node42.isSwitch();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean47 = node42.hasChild(node46);
        com.google.javascript.rhino.Node node48 = com.google.javascript.jscomp.NodeUtil.newExpr(node42);
        boolean boolean49 = node48.isRegExp();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean52 = node51.isName();
        boolean boolean53 = node51.isSwitch();
        java.lang.String str54 = node51.toString();
        com.google.javascript.rhino.Node node55 = node48.useSourceInfoIfMissingFromForTree(node51);
        boolean boolean56 = node39.isEquivalentToTyped(node51);
        com.google.javascript.rhino.Node node57 = assertionFunctionSpec33.getAssertedParam(node39);
        boolean boolean58 = node57.isGetterDef();
        java.util.Set<java.lang.String> strSet59 = node57.getDirectives();
        com.google.javascript.rhino.Node node60 = node30.srcref(node57);
        boolean boolean61 = node30.hasOneChild();
        typePosition0.setItem(node30);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "NUMBER -1.0" + "'", str27, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "NUMBER -1.0" + "'", str54, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(strSet59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test09907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09907");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '#');
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.setThrows();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setReturnsTainted();
    }

    @Test
    public void test09908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09908");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        boolean boolean7 = node1.isComma();
        boolean boolean8 = node1.isObjectLit();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test09909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09909");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        int int7 = node5.getLineno();
        boolean boolean8 = node5.isAdd();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node10.hasChild(node14);
        com.google.javascript.rhino.jstype.JSType jSType16 = null;
        node14.setJSType(jSType16);
        node14.addSuppression("");
        boolean boolean20 = node14.isDebugger();
        com.google.javascript.rhino.Node node21 = node5.useSourceInfoIfMissingFrom(node14);
        boolean boolean22 = node21.isGetterDef();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test09910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09910");
        com.google.javascript.rhino.Node node0 = null;
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean4 = node3.isName();
        boolean boolean5 = node3.isSwitch();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node3.hasChild(node7);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node10.hasChild(node14);
        com.google.javascript.rhino.Node node16 = com.google.javascript.jscomp.NodeUtil.newExpr(node10);
        boolean boolean17 = node16.isRegExp();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean20 = node19.isName();
        boolean boolean21 = node19.isSwitch();
        java.lang.String str22 = node19.toString();
        com.google.javascript.rhino.Node node23 = node16.useSourceInfoIfMissingFromForTree(node19);
        boolean boolean24 = node7.isEquivalentToTyped(node19);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node26.isName();
        boolean boolean28 = node26.isSwitch();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean31 = node26.hasChild(node30);
        com.google.javascript.rhino.jstype.JSType jSType32 = null;
        node30.setJSType(jSType32);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(45, node7, node30, 10, 2);
        java.util.Set<java.lang.String> strSet37 = null;
        node7.setDirectives(strSet37);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean41 = node40.isName();
        boolean boolean42 = node40.isSwitch();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean45 = node40.hasChild(node44);
        boolean boolean46 = node40.isComma();
        com.google.javascript.jscomp.CodingConvention.Bind bind47 = new com.google.javascript.jscomp.CodingConvention.Bind(node0, node7, node40);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean51 = node50.isName();
        boolean boolean52 = node50.isSwitch();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean55 = node50.hasChild(node54);
        com.google.javascript.rhino.Node node56 = com.google.javascript.jscomp.NodeUtil.newExpr(node50);
        boolean boolean57 = node56.isRegExp();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean60 = node59.isName();
        boolean boolean61 = node59.isSwitch();
        java.lang.String str62 = node59.toString();
        com.google.javascript.rhino.Node node63 = node56.useSourceInfoIfMissingFromForTree(node59);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(50, node63);
        com.google.javascript.rhino.Node node65 = node7.srcref(node64);
        int int66 = node7.getType();
        com.google.javascript.rhino.Node node67 = node7.getParent();
        com.google.javascript.rhino.jstype.JSType jSType68 = null;
        node67.setJSType(jSType68);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "NUMBER -1.0" + "'", str22, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "NUMBER -1.0" + "'", str62, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 39 + "'", int66 == 39);
        org.junit.Assert.assertNotNull(node67);
    }

    @Test
    public void test09911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09911");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        java.lang.String str4 = jSDocInfo0.getLendsName();
        java.lang.String str5 = jSDocInfo0.getOriginalCommentString();
        boolean boolean6 = jSDocInfo0.hasTypedefType();
        boolean boolean8 = jSDocInfo0.hasDescriptionForParameter("InputId: ");
        boolean boolean9 = jSDocInfo0.hasThisType();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node14.isName();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node17.isName();
        boolean boolean19 = node17.isSwitch();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (byte) 100, node12, node14, node17);
        java.lang.String str21 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(node12);
        node12.detachChildren();
        node12.addSuppression("InputId: java.io.IOException: NUMBER -1.0");
        boolean boolean25 = node12.isDo();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable26 = node12.getAncestors();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean29 = node28.isName();
        boolean boolean30 = node28.isSwitch();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean33 = node28.hasChild(node32);
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        node32.setType(2);
        boolean boolean38 = node32.isIn();
        com.google.javascript.rhino.jstype.JSType jSType39 = null;
        node32.setJSType(jSType39);
        int int41 = node32.getLineno();
        boolean boolean42 = node32.isGetProp();
        node12.addChildrenToFront(node32);
        jSDocInfo0.setAssociatedNode(node12);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node45 = com.google.javascript.jscomp.NodeUtil.getFunctionParameters(node12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(ancestorIterable26);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test09912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09912");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        java.lang.String str4 = node1.toString();
        boolean boolean5 = node1.isWith();
        int int7 = node1.getIntProp((int) ' ');
        boolean boolean8 = node1.isNE();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node10.hasChild(node14);
        com.google.javascript.rhino.jstype.JSType jSType16 = null;
        node14.setJSType(jSType16);
        node14.setType(2);
        com.google.javascript.rhino.Node node20 = node14.getLastSibling();
        com.google.javascript.rhino.Node node21 = node1.srcref(node20);
        boolean boolean22 = node20.isBreak();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(46);
        boolean boolean25 = node24.isName();
        boolean boolean26 = node20.hasChild(node24);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = node24.getStaticSourceFile();
        boolean boolean28 = node24.isVoid();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER -1.0" + "'", str4, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(staticSourceFile27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test09913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09913");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        boolean boolean7 = node1.isVar();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean10 = node9.isName();
        boolean boolean11 = node9.isSwitch();
        java.lang.String str12 = node9.toString();
        boolean boolean13 = node9.isWith();
        com.google.javascript.rhino.Node node14 = node1.srcref(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node16.isName();
        boolean boolean18 = node16.isSwitch();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node16.hasChild(node20);
        com.google.javascript.rhino.jstype.JSType jSType22 = null;
        node20.setJSType(jSType22);
        node20.setType(2);
        int int26 = node14.getIndexOfChild(node20);
        boolean boolean27 = node14.isString();
        boolean boolean28 = node14.isInc();
        node14.setSourceFileForTesting("JSDocInfo");
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList32 = jSDocInfo31.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection33 = jSDocInfo31.getReferences();
        com.google.common.collect.ImmutableList<java.lang.String> strList34 = jSDocInfo31.getTemplateTypeNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList35 = jSDocInfo31.getThrownTypes();
        boolean boolean37 = jSDocInfo31.hasDescriptionForParameter("NUMBER -1.0\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = jSDocInfo31.getEnumParameterType();
        boolean boolean39 = jSDocInfo31.containsDeclaration();
        boolean boolean40 = jSDocInfo31.shouldPreserveTry();
        node14.setJSDocInfo(jSDocInfo31);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "NUMBER -1.0" + "'", str12, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList32);
        org.junit.Assert.assertNull(strCollection33);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertNotNull(jSTypeExpressionList35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(jSTypeExpression38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test09914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09914");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        boolean boolean6 = node4.isSwitch();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node4.hasChild(node8);
        com.google.javascript.rhino.Node node10 = com.google.javascript.jscomp.NodeUtil.newExpr(node4);
        boolean boolean11 = node10.isRegExp();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean14 = node13.isName();
        boolean boolean15 = node13.isSwitch();
        java.lang.String str16 = node13.toString();
        com.google.javascript.rhino.Node node17 = node10.useSourceInfoIfMissingFromForTree(node13);
        java.lang.String str18 = node1.checkTreeEquals(node17);
        boolean boolean19 = node1.isScript();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection20 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node1);
        boolean boolean21 = node1.isCatch();
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(35, nodeArray24, 54, (int) (byte) 100);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(0, nodeArray24, 4, 27);
        node30.setType(36);
        com.google.javascript.rhino.Node node33 = node1.clonePropsFrom(node30);
        int int34 = node1.getType();
        boolean boolean35 = node1.isNew();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "NUMBER -1.0" + "'", str16, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n" + "'", str18, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeCollection20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 39 + "'", int34 == 39);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test09915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09915");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.Node node2 = node1.removeFirstChild();
        boolean boolean3 = node1.isQualifiedName();
        boolean boolean4 = node1.hasMoreThanOneChild();
        boolean boolean5 = node1.isSetterDef();
        boolean boolean6 = node1.isNot();
        boolean boolean7 = node1.isGetProp();
        boolean boolean8 = node1.isDebugger();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test09916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09916");
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative1 = null;
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec2 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("", jSTypeNative1);
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        boolean boolean6 = node4.isSwitch();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node4.hasChild(node8);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node11.isName();
        boolean boolean13 = node11.isSwitch();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean16 = node11.hasChild(node15);
        com.google.javascript.rhino.Node node17 = com.google.javascript.jscomp.NodeUtil.newExpr(node11);
        boolean boolean18 = node17.isRegExp();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node20.isName();
        boolean boolean22 = node20.isSwitch();
        java.lang.String str23 = node20.toString();
        com.google.javascript.rhino.Node node24 = node17.useSourceInfoIfMissingFromForTree(node20);
        boolean boolean25 = node8.isEquivalentToTyped(node20);
        com.google.javascript.rhino.Node node26 = assertionFunctionSpec2.getAssertedParam(node8);
        com.google.javascript.rhino.Node node27 = com.google.javascript.jscomp.NodeUtil.newExpr(node8);
        node27.setSourceEncodedPositionForTree(3);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "NUMBER -1.0" + "'", str23, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
    }

    @Test
    public void test09917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09917");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("BITXOR 0\n", 41, (int) ' ');
        boolean boolean4 = node3.isVar();
        int int5 = node3.getChildCount();
        boolean boolean6 = node3.isNumber();
        com.google.javascript.rhino.Node node7 = node3.getLastChild();
        // The following exception was thrown during execution in test generation
        try {
            node7.setOptionalArg(false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(node7);
    }

    @Test
    public void test09918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09918");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        int int8 = node1.getLength();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        node1.setDirectives((java.util.Set<java.lang.String>) strSet12);
        java.lang.Object[] objArray15 = strSet12.toArray();
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        int int20 = strList18.size();
        boolean boolean21 = strSet12.containsAll((java.util.Collection<java.lang.String>) strList18);
        java.util.Spliterator<java.lang.String> strSpliterator22 = strSet12.spliterator();
        int int23 = strSet12.size();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean26 = node25.isName();
        boolean boolean27 = node25.isSwitch();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean30 = node25.hasChild(node29);
        boolean boolean31 = node25.isVar();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean34 = node33.isName();
        boolean boolean35 = node33.isSwitch();
        java.lang.String str36 = node33.toString();
        boolean boolean37 = node33.isWith();
        com.google.javascript.rhino.Node node38 = node25.srcref(node33);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean41 = node40.isName();
        boolean boolean42 = node40.isSwitch();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean45 = node40.hasChild(node44);
        com.google.javascript.rhino.jstype.JSType jSType46 = null;
        node44.setJSType(jSType46);
        node44.setType(2);
        int int50 = node38.getIndexOfChild(node44);
        boolean boolean51 = strSet12.remove((java.lang.Object) node44);
        java.util.Iterator<java.lang.String> strItor52 = strSet12.iterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo53 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList54 = jSDocInfo53.getExtendedInterfaces();
        java.lang.String str55 = jSDocInfo53.getVersion();
        boolean boolean56 = jSDocInfo53.hasModifies();
        java.lang.String str57 = jSDocInfo53.getFileOverview();
        java.util.Set<java.lang.String> strSet58 = jSDocInfo53.getParameterNames();
        boolean boolean59 = strSet12.removeAll((java.util.Collection<java.lang.String>) strSet58);
        com.google.javascript.rhino.JSDocInfo jSDocInfo60 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet61 = jSDocInfo60.getParameterNames();
        boolean boolean63 = jSDocInfo60.hasParameter("hi!");
        boolean boolean64 = jSDocInfo60.hasThisType();
        boolean boolean65 = jSDocInfo60.isIdGenerator();
        jSDocInfo60.setLicense("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        boolean boolean68 = jSDocInfo60.isOverride();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean71 = node70.isName();
        boolean boolean72 = node70.isSwitch();
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean75 = node70.hasChild(node74);
        com.google.javascript.rhino.Node node76 = com.google.javascript.jscomp.NodeUtil.newExpr(node70);
        boolean boolean77 = node76.isRegExp();
        jSDocInfo60.setAssociatedNode(node76);
        jSDocInfo60.addSuppression("Not declared as a constructor");
        boolean boolean81 = jSDocInfo60.isNoTypeCheck();
        boolean boolean82 = jSDocInfo60.hasModifies();
        java.lang.String str83 = jSDocInfo60.getDeprecationReason();
        java.util.Set<java.lang.String> strSet84 = jSDocInfo60.getParameterNames();
        boolean boolean85 = strSet12.retainAll((java.util.Collection<java.lang.String>) strSet84);
        int int86 = strSet84.size();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[hi!]");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strSpliterator22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "NUMBER -1.0" + "'", str36, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strItor52);
        org.junit.Assert.assertNotNull(jSTypeExpressionList54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(strSet84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test09919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09919");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN;
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        com.google.javascript.rhino.jstype.JSType jSType3 = node2.getJSType();
        boolean boolean4 = node2.isScript();
        boolean boolean5 = node2.isTry();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node7.isName();
        boolean boolean9 = node7.isSwitch();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node7.hasChild(node11);
        com.google.javascript.rhino.Node node13 = com.google.javascript.jscomp.NodeUtil.newExpr(node7);
        node7.setOptionalArg(true);
        node7.putBooleanProp((int) (short) -1, true);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node20.isName();
        boolean boolean22 = node20.isSwitch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node20.hasChild(node24);
        com.google.javascript.rhino.Node node26 = com.google.javascript.jscomp.NodeUtil.newExpr(node20);
        boolean boolean27 = node26.isRegExp();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean30 = node29.isName();
        boolean boolean31 = node29.isSwitch();
        java.lang.String str32 = node29.toString();
        com.google.javascript.rhino.Node node33 = node26.useSourceInfoIfMissingFromForTree(node29);
        com.google.javascript.rhino.Node node34 = node7.useSourceInfoFromForTree(node26);
        boolean boolean35 = node7.hasOneChild();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean38 = node37.isName();
        boolean boolean39 = node37.isSwitch();
        java.lang.String str40 = node37.toString();
        boolean boolean41 = node37.isVar();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean44 = node43.isName();
        boolean boolean45 = node43.isSwitch();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean48 = node43.hasChild(node47);
        com.google.javascript.rhino.Node node49 = com.google.javascript.jscomp.NodeUtil.newExpr(node43);
        boolean boolean50 = node49.isRegExp();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean53 = node52.isName();
        boolean boolean54 = node52.isSwitch();
        java.lang.String str55 = node52.toString();
        com.google.javascript.rhino.Node node56 = node49.useSourceInfoIfMissingFromForTree(node52);
        com.google.javascript.jscomp.CodingConvention.Bind bind57 = new com.google.javascript.jscomp.CodingConvention.Bind(node7, node37, node49);
        boolean boolean58 = node37.isInstanceOf();
        com.google.javascript.rhino.Node node59 = node2.useSourceInfoIfMissingFrom(node37);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean62 = node61.isName();
        boolean boolean63 = node61.isSwitch();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean66 = node61.hasChild(node65);
        boolean boolean67 = node61.isVar();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean70 = node69.isName();
        boolean boolean71 = node69.isSwitch();
        java.lang.String str72 = node69.toString();
        boolean boolean73 = node69.isWith();
        com.google.javascript.rhino.Node node74 = node61.srcref(node69);
        java.lang.String str75 = node74.toString();
        int int76 = node74.getCharno();
        com.google.javascript.rhino.InputId inputId77 = com.google.javascript.jscomp.NodeUtil.getInputId(node74);
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship78 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node37, node74);
        com.google.javascript.rhino.Node node79 = node74.getParent();
        com.google.javascript.rhino.InputId inputId80 = com.google.javascript.jscomp.NodeUtil.getInputId(node74);
        boolean boolean81 = node74.isStringKey();
        org.junit.Assert.assertTrue("'" + subclassType0 + "' != '" + com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN + "'", subclassType0.equals(com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN));
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(jSType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "NUMBER -1.0" + "'", str32, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "NUMBER -1.0" + "'", str40, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "NUMBER -1.0" + "'", str55, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "NUMBER -1.0" + "'", str72, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "NUMBER -1.0" + "'", str75, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNull(inputId77);
        org.junit.Assert.assertNull(node79);
        org.junit.Assert.assertNull(inputId80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test09920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09920");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        java.lang.String str4 = node1.toString();
        boolean boolean5 = node1.isNumber();
        boolean boolean6 = node1.isComma();
        boolean boolean7 = node1.isDebugger();
        boolean boolean8 = node1.isWith();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node10.hasChild(node14);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node17.isName();
        boolean boolean19 = node17.isSwitch();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node17.hasChild(node21);
        com.google.javascript.rhino.Node node23 = com.google.javascript.jscomp.NodeUtil.newExpr(node17);
        int int24 = node17.getLength();
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node17.setDirectives((java.util.Set<java.lang.String>) strSet28);
        java.lang.String str31 = node14.checkTreeEquals(node17);
        node14.setSourceEncodedPosition((int) 'a');
        com.google.javascript.rhino.jstype.JSType jSType34 = node14.getJSType();
        com.google.javascript.rhino.Node node35 = node1.copyInformationFrom(node14);
        boolean boolean36 = node35.isAssignAdd();
        boolean boolean37 = node35.isDelProp();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER -1.0" + "'", str4, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(jSType34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test09921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09921");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        java.lang.String str4 = node1.toString();
        boolean boolean5 = node1.isWith();
        int int7 = node1.getIntProp((int) ' ');
        boolean boolean8 = node1.isNE();
        com.google.javascript.rhino.jstype.JSType jSType9 = node1.getJSType();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition10 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int11 = namePosition10.getPositionOnStartLine();
        int int12 = namePosition10.getStartLine();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node14.isName();
        boolean boolean16 = node14.isSwitch();
        java.lang.String str17 = node14.toString();
        boolean boolean18 = node14.isNumber();
        boolean boolean19 = node14.isComma();
        boolean boolean20 = node14.isDebugger();
        boolean boolean21 = node14.isWith();
        namePosition10.setItem(node14);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node24.isName();
        boolean boolean26 = node24.isSwitch();
        java.lang.String str27 = node24.toString();
        boolean boolean28 = node24.isWith();
        int int30 = node24.getIntProp((int) ' ');
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder31 = node24.new FileLevelJsDocBuilder();
        int int32 = node14.getIndexOfChild(node24);
        node1.addChildToFront(node24);
        com.google.javascript.rhino.InputId inputId35 = new com.google.javascript.rhino.InputId("");
        java.lang.String str36 = inputId35.getIdName();
        node24.setInputId(inputId35);
        boolean boolean38 = node24.isExprResult();
        com.google.javascript.rhino.Node node39 = node24.removeChildren();
        int int40 = node24.getSourceOffset();
        com.google.javascript.rhino.Node node42 = node24.getAncestor((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean43 = node42.isAdd();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER -1.0" + "'", str4, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSType9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "NUMBER -1.0" + "'", str17, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "NUMBER -1.0" + "'", str27, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNull(node42);
    }

    @Test
    public void test09922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09922");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        boolean boolean6 = node4.isSwitch();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node4.hasChild(node8);
        com.google.javascript.rhino.Node node10 = com.google.javascript.jscomp.NodeUtil.newExpr(node4);
        boolean boolean11 = node10.isRegExp();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean14 = node13.isName();
        boolean boolean15 = node13.isSwitch();
        java.lang.String str16 = node13.toString();
        com.google.javascript.rhino.Node node17 = node10.useSourceInfoIfMissingFromForTree(node13);
        java.lang.String str18 = node1.checkTreeEquals(node17);
        boolean boolean19 = node1.isScript();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection20 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node1);
        boolean boolean21 = node1.isTrue();
        com.google.javascript.rhino.Node node22 = node1.cloneTree();
        int int23 = node1.getLineno();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "NUMBER -1.0" + "'", str16, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n" + "'", str18, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeCollection20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
    }

    @Test
    public void test09923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09923");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.jstype.JSType jSType7 = null;
        node5.setJSType(jSType7);
        node5.setType(2);
        boolean boolean11 = node5.isIn();
        com.google.javascript.rhino.jstype.JSType jSType12 = null;
        node5.setJSType(jSType12);
        int int14 = node5.getLineno();
        boolean boolean15 = node5.isRegExp();
        com.google.javascript.rhino.Node node17 = node5.getAncestor(143457);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(node17);
    }

    @Test
    public void test09924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09924");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getReturnDescription();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        boolean boolean4 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = jSDocInfo0.getVisibility();
        int int6 = jSDocInfo0.getImplementedInterfaceCount();
        int int7 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean8 = jSDocInfo0.isConsistentIdGenerator();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(visibility5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test09925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09925");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.hasParameter("hi!");
        boolean boolean4 = jSDocInfo0.hasThisType();
        boolean boolean5 = jSDocInfo0.isIdGenerator();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        boolean boolean8 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node10.hasChild(node14);
        com.google.javascript.rhino.Node node16 = com.google.javascript.jscomp.NodeUtil.newExpr(node10);
        boolean boolean17 = node16.isRegExp();
        jSDocInfo0.setAssociatedNode(node16);
        jSDocInfo0.addSuppression("Not declared as a constructor");
        java.util.Set<java.lang.String> strSet21 = jSDocInfo0.getParameterNames();
        java.util.Set<java.lang.String> strSet22 = jSDocInfo0.getSuppressions();
        boolean boolean23 = jSDocInfo0.isConstant();
        java.lang.String str24 = jSDocInfo0.getLendsName();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test09926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09926");
        boolean boolean1 = com.google.javascript.jscomp.NodeUtil.isValidQualifiedName("Unknown class name");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test09927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09927");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        java.lang.String str6 = jSDocInfo0.getFileOverview();
        boolean boolean7 = jSDocInfo0.isExport();
        boolean boolean8 = jSDocInfo0.isConsistentIdGenerator();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getModifies();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet9);
    }

    @Test
    public void test09928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09928");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        java.lang.String str4 = node1.toString();
        boolean boolean5 = node1.isWith();
        int int7 = node1.getIntProp((int) ' ');
        boolean boolean8 = node1.isNE();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node10.hasChild(node14);
        com.google.javascript.rhino.jstype.JSType jSType16 = null;
        node14.setJSType(jSType16);
        node14.setType(2);
        com.google.javascript.rhino.Node node20 = node14.getLastSibling();
        com.google.javascript.rhino.Node node21 = node1.srcref(node20);
        boolean boolean22 = node21.isNot();
        boolean boolean23 = node21.isQuotedString();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER -1.0" + "'", str4, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test09929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09929");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        boolean boolean8 = node7.isRegExp();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        java.lang.String str13 = node10.toString();
        com.google.javascript.rhino.Node node14 = node7.useSourceInfoIfMissingFromForTree(node10);
        com.google.javascript.rhino.jstype.JSType jSType15 = null;
        node10.setJSType(jSType15);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable17 = node10.children();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean20 = node19.isName();
        boolean boolean21 = node19.isSwitch();
        java.lang.String str22 = node19.toString();
        boolean boolean23 = node19.isWith();
        int int25 = node19.getIntProp((int) ' ');
        boolean boolean26 = node19.isNE();
        com.google.javascript.rhino.jstype.JSType jSType27 = node19.getJSType();
        com.google.javascript.rhino.Node node28 = node10.clonePropsFrom(node19);
        boolean boolean29 = node28.isScript();
        boolean boolean30 = node28.isLabelName();
        java.lang.Appendable appendable31 = null;
        // The following exception was thrown during execution in test generation
        try {
            node28.appendStringTree(appendable31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "NUMBER -1.0" + "'", str13, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(nodeIterable17);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "NUMBER -1.0" + "'", str22, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(jSType27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test09930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09930");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        int int5 = node4.getChildCount();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node7.isName();
        boolean boolean9 = node7.isSwitch();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node7.hasChild(node11);
        boolean boolean13 = node7.isVar();
        com.google.javascript.rhino.Node node14 = node7.getParent();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node16.isName();
        boolean boolean18 = node16.isSwitch();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node16.hasChild(node20);
        boolean boolean22 = node16.isVar();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node24.isName();
        boolean boolean26 = node24.isSwitch();
        java.lang.String str27 = node24.toString();
        boolean boolean28 = node24.isWith();
        com.google.javascript.rhino.Node node29 = node16.srcref(node24);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(130, node4, node7, node24, node33, 0, 15);
        boolean boolean37 = node7.isBreak();
        boolean boolean38 = node7.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node39 = node7.removeChildren();
        com.google.javascript.rhino.Node node40 = node7.getParent();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "NUMBER -1.0" + "'", str27, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node40);
    }

    @Test
    public void test09931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09931");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        node1.setOptionalArg(true);
        node1.putBooleanProp((int) (short) -1, true);
        boolean boolean13 = node1.hasChildren();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean16 = node15.isName();
        boolean boolean17 = node15.isSwitch();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean20 = node15.hasChild(node19);
        com.google.javascript.rhino.Node node21 = com.google.javascript.jscomp.NodeUtil.newExpr(node15);
        boolean boolean22 = node21.isRegExp();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node24.isName();
        boolean boolean26 = node24.isSwitch();
        java.lang.String str27 = node24.toString();
        com.google.javascript.rhino.Node node28 = node21.useSourceInfoIfMissingFromForTree(node24);
        com.google.javascript.rhino.jstype.JSType jSType29 = null;
        node24.setJSType(jSType29);
        boolean boolean31 = node24.isGetterDef();
        boolean boolean32 = node24.isNoSideEffectsCall();
        node1.addChildrenToBack(node24);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean36 = node35.isName();
        boolean boolean37 = node35.isSwitch();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean40 = node35.hasChild(node39);
        com.google.javascript.rhino.Node node41 = com.google.javascript.jscomp.NodeUtil.newExpr(node35);
        boolean boolean42 = node41.isGetElem();
        boolean boolean43 = node41.isTypeOf();
        boolean boolean44 = node41.isAnd();
        boolean boolean45 = node41.isThrow();
        node1.addChildrenToFront(node41);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean49 = node48.isName();
        boolean boolean50 = node48.isSwitch();
        java.lang.String str51 = node48.toString();
        boolean boolean52 = node48.isWith();
        boolean boolean53 = node48.hasOneChild();
        boolean boolean54 = node48.isDebugger();
        com.google.javascript.rhino.Node node55 = node48.cloneNode();
        node41.addChildrenToFront(node48);
        node41.setLineno(40);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "NUMBER -1.0" + "'", str27, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "NUMBER -1.0" + "'", str51, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
    }

    @Test
    public void test09932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09932");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '#');
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.setThrows();
        boolean boolean4 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.setMutatesThis();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test09933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09933");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        boolean boolean4 = node1.isVarArgs();
        boolean boolean5 = node1.isVar();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node7.isName();
        boolean boolean9 = node7.isSwitch();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node7.hasChild(node11);
        com.google.javascript.rhino.Node node13 = com.google.javascript.jscomp.NodeUtil.newExpr(node7);
        node7.setOptionalArg(true);
        node7.putBooleanProp((int) (short) -1, true);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node20.isName();
        boolean boolean22 = node20.isSwitch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node20.hasChild(node24);
        com.google.javascript.rhino.Node node26 = com.google.javascript.jscomp.NodeUtil.newExpr(node20);
        boolean boolean27 = node26.isRegExp();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean30 = node29.isName();
        boolean boolean31 = node29.isSwitch();
        java.lang.String str32 = node29.toString();
        com.google.javascript.rhino.Node node33 = node26.useSourceInfoIfMissingFromForTree(node29);
        com.google.javascript.rhino.Node node34 = node7.useSourceInfoFromForTree(node26);
        boolean boolean35 = node7.hasOneChild();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean38 = node37.isName();
        boolean boolean39 = node37.isSwitch();
        java.lang.String str40 = node37.toString();
        boolean boolean41 = node37.isVar();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean44 = node43.isName();
        boolean boolean45 = node43.isSwitch();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean48 = node43.hasChild(node47);
        com.google.javascript.rhino.Node node49 = com.google.javascript.jscomp.NodeUtil.newExpr(node43);
        boolean boolean50 = node49.isRegExp();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean53 = node52.isName();
        boolean boolean54 = node52.isSwitch();
        java.lang.String str55 = node52.toString();
        com.google.javascript.rhino.Node node56 = node49.useSourceInfoIfMissingFromForTree(node52);
        com.google.javascript.jscomp.CodingConvention.Bind bind57 = new com.google.javascript.jscomp.CodingConvention.Bind(node7, node37, node49);
        boolean boolean58 = node37.isInstanceOf();
        com.google.javascript.rhino.Node node59 = node1.useSourceInfoIfMissingFromForTree(node37);
        com.google.javascript.rhino.jstype.JSType jSType60 = node37.getJSType();
        int int61 = node37.getLength();
        com.google.javascript.rhino.InputId inputId63 = new com.google.javascript.rhino.InputId("Not declared as a constructor");
        node37.setInputId(inputId63);
        java.lang.Object obj66 = node37.getProp((int) (byte) 10);
        com.google.javascript.rhino.Node node67 = node37.getParent();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "NUMBER -1.0" + "'", str32, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "NUMBER -1.0" + "'", str40, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "NUMBER -1.0" + "'", str55, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNull(node67);
    }

    @Test
    public void test09934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09934");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        boolean boolean2 = node1.isDelProp();
        node1.setCharno(2);
        boolean boolean5 = node1.isFromExterns();
        node1.addSuppression("");
        boolean boolean8 = node1.isCase();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test09935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09935");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getReferences();
        boolean boolean3 = jSDocInfo0.isJavaDispatch();
        java.lang.String str4 = jSDocInfo0.toString();
        boolean boolean5 = jSDocInfo0.shouldPreserveTry();
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = jSDocInfo0.getTemplateTypeNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getThisType();
        boolean boolean8 = jSDocInfo0.isNoShadow();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getSuppressions();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node11.isName();
        boolean boolean13 = node11.isSwitch();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean16 = node11.hasChild(node15);
        com.google.javascript.rhino.Node node17 = com.google.javascript.jscomp.NodeUtil.newExpr(node11);
        boolean boolean18 = node17.isRegExp();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node20.isName();
        boolean boolean22 = node20.isSwitch();
        java.lang.String str23 = node20.toString();
        com.google.javascript.rhino.Node node24 = node17.useSourceInfoIfMissingFromForTree(node20);
        com.google.javascript.rhino.jstype.JSType jSType25 = null;
        node20.setJSType(jSType25);
        boolean boolean27 = node20.isOptionalArg();
        boolean boolean28 = node20.hasChildren();
        com.google.javascript.rhino.Node node29 = null;
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean33 = node32.isName();
        boolean boolean34 = node32.isSwitch();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean37 = node32.hasChild(node36);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean40 = node39.isName();
        boolean boolean41 = node39.isSwitch();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean44 = node39.hasChild(node43);
        com.google.javascript.rhino.Node node45 = com.google.javascript.jscomp.NodeUtil.newExpr(node39);
        boolean boolean46 = node45.isRegExp();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean49 = node48.isName();
        boolean boolean50 = node48.isSwitch();
        java.lang.String str51 = node48.toString();
        com.google.javascript.rhino.Node node52 = node45.useSourceInfoIfMissingFromForTree(node48);
        boolean boolean53 = node36.isEquivalentToTyped(node48);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean56 = node55.isName();
        boolean boolean57 = node55.isSwitch();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean60 = node55.hasChild(node59);
        com.google.javascript.rhino.jstype.JSType jSType61 = null;
        node59.setJSType(jSType61);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(45, node36, node59, 10, 2);
        java.util.Set<java.lang.String> strSet66 = null;
        node36.setDirectives(strSet66);
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean70 = node69.isName();
        boolean boolean71 = node69.isSwitch();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean74 = node69.hasChild(node73);
        boolean boolean75 = node69.isComma();
        com.google.javascript.jscomp.CodingConvention.Bind bind76 = new com.google.javascript.jscomp.CodingConvention.Bind(node29, node36, node69);
        com.google.javascript.rhino.Node node77 = node20.useSourceInfoFrom(node36);
        boolean boolean78 = node77.isAssign();
        boolean boolean79 = strSet9.contains((java.lang.Object) boolean78);
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JSDocInfo" + "'", str4, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "NUMBER -1.0" + "'", str23, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "NUMBER -1.0" + "'", str51, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test09936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09936");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.jstype.JSType jSType7 = null;
        node5.setJSType(jSType7);
        com.google.javascript.rhino.InputId inputId9 = com.google.javascript.jscomp.NodeUtil.getInputId(node5);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node11.isName();
        boolean boolean13 = node11.isSwitch();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean16 = node11.hasChild(node15);
        com.google.javascript.rhino.Node node17 = com.google.javascript.jscomp.NodeUtil.newExpr(node11);
        int int18 = node11.getLength();
        boolean boolean19 = node11.isNew();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node21.isName();
        boolean boolean23 = node21.isSwitch();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean26 = node21.hasChild(node25);
        com.google.javascript.rhino.Node node27 = com.google.javascript.jscomp.NodeUtil.newExpr(node21);
        int int28 = node21.getLength();
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet32 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet32, strArray31);
        node21.setDirectives((java.util.Set<java.lang.String>) strSet32);
        boolean boolean36 = node21.getBooleanProp(41);
        com.google.javascript.rhino.Node node37 = node11.useSourceInfoFromForTree(node21);
        boolean boolean38 = node21.isGetElem();
        com.google.javascript.rhino.Node node39 = node5.useSourceInfoFrom(node21);
        com.google.javascript.rhino.Node node41 = node5.getAncestor((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node43 = node5.getChildAtIndex((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(inputId9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
    }

    @Test
    public void test09937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09937");
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative1 = null;
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec2 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("", jSTypeNative1);
        com.google.javascript.rhino.Node node3 = null;
        com.google.javascript.rhino.Node node4 = assertionFunctionSpec2.getAssertedParam(node3);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node6.isName();
        boolean boolean8 = node6.isSwitch();
        java.lang.String str9 = node6.toString();
        boolean boolean10 = node6.isWith();
        boolean boolean11 = node6.isSyntheticBlock();
        boolean boolean12 = node6.isAnd();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = null;
        com.google.javascript.rhino.jstype.JSType jSType14 = assertionFunctionSpec2.getAssertedType(node6, jSTypeRegistry13);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node16.isFunction();
        boolean boolean18 = node16.isNot();
        com.google.javascript.rhino.Node node19 = assertionFunctionSpec2.getAssertedParam(node16);
        boolean boolean20 = node19.isAssign();
        int int21 = node19.getLineno();
        boolean boolean22 = node19.isFromExterns();
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER -1.0" + "'", str9, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(jSType14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test09938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09938");
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative1 = null;
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec2 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("", jSTypeNative1);
        com.google.javascript.rhino.Node node3 = null;
        com.google.javascript.rhino.Node node4 = assertionFunctionSpec2.getAssertedParam(node3);
        java.lang.String str5 = assertionFunctionSpec2.getFunctionName();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node7.isName();
        boolean boolean9 = node7.isSwitch();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node7.hasChild(node11);
        java.lang.String str13 = node7.getSourceFileName();
        com.google.javascript.rhino.Node node14 = assertionFunctionSpec2.getAssertedParam(node7);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node16.isName();
        boolean boolean18 = node16.isSwitch();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node16.hasChild(node20);
        com.google.javascript.rhino.Node node22 = com.google.javascript.jscomp.NodeUtil.newExpr(node20);
        com.google.javascript.rhino.Node node23 = node14.copyInformationFromForTree(node22);
        double double24 = node23.getDouble();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("BITXOR 0\n", 41, (int) ' ');
        boolean boolean30 = com.google.javascript.jscomp.NodeUtil.isSymmetricOperation(node29);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n", (int) (short) 100, 42);
        node34.setOptionalArg(true);
        boolean boolean37 = node34.isAssign();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(43, node29, node34);
        boolean boolean39 = node29.isTry();
        com.google.javascript.rhino.JSDocInfo jSDocInfo40 = node29.getJSDocInfo();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n", (int) (short) 100, 42);
        node45.setSourceEncodedPosition(10);
        boolean boolean48 = node45.isAdd();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(12, node45, (int) '4', 46);
        com.google.javascript.rhino.Node node52 = node29.useSourceInfoIfMissingFrom(node45);
        node45.putBooleanProp((int) 'a', true);
        boolean boolean56 = node45.isLocalResultCall();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str57 = node23.checkTreeEquals(node45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: unexpect prop id 97");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-1.0d) + "'", double24 == (-1.0d));
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(jSDocInfo40);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test09939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09939");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node5.isFunction();
        boolean boolean7 = node5.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node8 = node1.useSourceInfoIfMissingFrom(node5);
        boolean boolean9 = node8.isQuotedString();
        node8.setSourceFileForTesting("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node8);
        boolean boolean13 = staticSourceFile12.isExtern();
        int int15 = staticSourceFile12.getColumnOfOffset(39);
        int int17 = staticSourceFile12.getLineOffset(36);
        java.lang.String str18 = staticSourceFile12.getName();
        boolean boolean19 = staticSourceFile12.isExtern();
        int int21 = staticSourceFile12.getLineOffset(45);
        int int23 = staticSourceFile12.getLineOfOffset(43);
        boolean boolean24 = staticSourceFile12.isExtern();
        int int26 = staticSourceFile12.getLineOfOffset(29);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(staticSourceFile12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-2147483648) + "'", int17 == (-2147483648));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n" + "'", str18, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-2147483648) + "'", int21 == (-2147483648));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test09940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09940");
        boolean boolean1 = com.google.javascript.jscomp.NodeUtil.isValidSimpleName("ERROR\n    NUMBER -1.0\n    NUMBER -1.0\n    NUMBER -1.0\n    NUMBER -1.0\n");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test09941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09941");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node7.isName();
        boolean boolean9 = node7.isSwitch();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (byte) 100, node2, node4, node7);
        boolean boolean11 = node4.isBreak();
        com.google.javascript.rhino.Node node12 = node4.removeChildren();
        boolean boolean13 = node4.wasEmptyNode();
        boolean boolean14 = node4.isFor();
        boolean boolean15 = node4.isOptionalArg();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node17.isName();
        boolean boolean19 = node17.isSwitch();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node17.hasChild(node21);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node24.isName();
        boolean boolean26 = node24.isSwitch();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean29 = node24.hasChild(node28);
        com.google.javascript.rhino.Node node30 = com.google.javascript.jscomp.NodeUtil.newExpr(node24);
        boolean boolean31 = node30.isRegExp();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean34 = node33.isName();
        boolean boolean35 = node33.isSwitch();
        java.lang.String str36 = node33.toString();
        com.google.javascript.rhino.Node node37 = node30.useSourceInfoIfMissingFromForTree(node33);
        boolean boolean38 = node21.isEquivalentToTyped(node33);
        com.google.javascript.rhino.InputId inputId39 = null;
        node33.setInputId(inputId39);
        boolean boolean41 = node33.isCatch();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(38);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean46 = node45.isName();
        boolean boolean47 = node45.isSwitch();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean50 = node45.hasChild(node49);
        com.google.javascript.rhino.Node node51 = com.google.javascript.jscomp.NodeUtil.newExpr(node45);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean54 = node53.isName();
        boolean boolean55 = node53.isSwitch();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean58 = node53.hasChild(node57);
        com.google.javascript.rhino.Node node59 = com.google.javascript.jscomp.NodeUtil.newExpr(node53);
        node53.setOptionalArg(true);
        node53.putBooleanProp((int) (short) -1, true);
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean67 = node66.isName();
        boolean boolean68 = node66.isSwitch();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean71 = node66.hasChild(node70);
        com.google.javascript.rhino.Node node72 = com.google.javascript.jscomp.NodeUtil.newExpr(node66);
        boolean boolean73 = node72.isRegExp();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean76 = node75.isName();
        boolean boolean77 = node75.isSwitch();
        java.lang.String str78 = node75.toString();
        com.google.javascript.rhino.Node node79 = node72.useSourceInfoIfMissingFromForTree(node75);
        com.google.javascript.rhino.Node node80 = node53.useSourceInfoFromForTree(node72);
        boolean boolean81 = node51.hasChild(node53);
        boolean boolean82 = node53.isReturn();
        boolean boolean83 = node53.isParamList();
        node53.putIntProp(36, 27);
        com.google.javascript.jscomp.CodingConvention.Bind bind87 = new com.google.javascript.jscomp.CodingConvention.Bind(node33, node43, node53);
        boolean boolean88 = node43.isVarArgs();
        boolean boolean89 = node43.isOnlyModifiesThisCall();
        boolean boolean90 = node43.isContinue();
        com.google.javascript.rhino.Node node91 = node4.copyInformationFromForTree(node43);
        boolean boolean92 = node43.isOr();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "NUMBER -1.0" + "'", str36, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "NUMBER -1.0" + "'", str78, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test09942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09942");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(41, "InputId: ", 16, 41);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node6.isName();
        boolean boolean8 = node6.isSwitch();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node6.hasChild(node10);
        com.google.javascript.rhino.Node node12 = com.google.javascript.jscomp.NodeUtil.newExpr(node6);
        int int13 = node6.getLength();
        boolean boolean14 = node6.isNew();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node16.isName();
        boolean boolean18 = node16.isSwitch();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node16.hasChild(node20);
        com.google.javascript.rhino.Node node22 = com.google.javascript.jscomp.NodeUtil.newExpr(node16);
        int int23 = node16.getLength();
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        node16.setDirectives((java.util.Set<java.lang.String>) strSet27);
        boolean boolean31 = node16.getBooleanProp(41);
        com.google.javascript.rhino.Node node32 = node6.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean35 = node34.isName();
        boolean boolean36 = node34.isSwitch();
        boolean boolean37 = node32.hasChild(node34);
        com.google.javascript.rhino.Node node38 = node4.copyInformationFromForTree(node32);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
    }

    @Test
    public void test09943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09943");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getReferences();
        boolean boolean3 = jSDocInfo0.isJavaDispatch();
        boolean boolean4 = jSDocInfo0.hasTypedefType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getBaseType();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        int int10 = strList8.size();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility11 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        boolean boolean12 = strList8.remove((java.lang.Object) visibility11);
        jSDocInfo0.setVisibility(visibility11);
        boolean boolean14 = jSDocInfo0.hasBaseType();
        java.util.Collection<java.lang.String> strCollection15 = jSDocInfo0.getAuthors();
        com.google.common.collect.ImmutableList<java.lang.String> strList16 = jSDocInfo0.getTemplateTypeNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList17 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str18 = jSDocInfo0.getLicense();
        boolean boolean19 = jSDocInfo0.hasType();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + visibility11 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility11.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(strCollection15);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(jSTypeExpressionList17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test09944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09944");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        com.google.javascript.rhino.jstype.JSType jSType2 = node1.getJSType();
        boolean boolean3 = node1.isScript();
        boolean boolean4 = node1.isTry();
        boolean boolean5 = node1.isAssignAdd();
        int int6 = node1.getSourcePosition();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(jSType2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
    }

    @Test
    public void test09945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09945");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        java.lang.String str6 = jSDocInfo0.getFileOverview();
        boolean boolean7 = jSDocInfo0.isExport();
        boolean boolean8 = jSDocInfo0.hasReturnType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getThisType();
        java.lang.String str10 = jSDocInfo0.getFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getThisType();
        boolean boolean12 = jSDocInfo0.hasType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression13 = jSDocInfo0.getThisType();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(jSTypeExpression13);
    }

    @Test
    public void test09946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09946");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.hasParameterType("SHEQ 10\n    NUMBER -1.0\n    NUMBER -1.0\n");
        boolean boolean4 = jSDocInfo0.isOverride();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test09947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09947");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int1 = namePosition0.getPositionOnStartLine();
        int int2 = namePosition0.getPositionOnStartLine();
        int int3 = namePosition0.getPositionOnStartLine();
        int int4 = namePosition0.getPositionOnStartLine();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node6.isName();
        boolean boolean8 = node6.isSwitch();
        java.lang.String str9 = node6.toString();
        boolean boolean10 = node6.isWith();
        boolean boolean11 = node6.hasOneChild();
        boolean boolean12 = node6.isLocalResultCall();
        namePosition0.setItem(node6);
        com.google.javascript.rhino.Node node14 = com.google.javascript.jscomp.NodeUtil.newExpr(node6);
        boolean boolean15 = node14.isVar();
        com.google.javascript.rhino.JSDocInfo jSDocInfo16 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet17 = jSDocInfo16.getParameterNames();
        boolean boolean19 = jSDocInfo16.hasParameter("hi!");
        boolean boolean20 = jSDocInfo16.containsDeclaration();
        java.lang.String str21 = jSDocInfo16.getOriginalCommentString();
        boolean boolean23 = jSDocInfo16.hasDescriptionForParameter("Not declared as a type name");
        int int24 = jSDocInfo16.getExtendedInterfacesCount();
        boolean boolean25 = jSDocInfo16.hasModifies();
        java.lang.String str26 = jSDocInfo16.getOriginalCommentString();
        boolean boolean27 = jSDocInfo16.hasThisType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility28 = jSDocInfo16.getVisibility();
        node14.setJSDocInfo(jSDocInfo16);
        java.util.Collection<java.lang.String> strCollection30 = jSDocInfo16.getReferences();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER -1.0" + "'", str9, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(visibility28);
        org.junit.Assert.assertNull(strCollection30);
    }

    @Test
    public void test09948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09948");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node2.hasChild(node6);
        boolean boolean8 = node2.isVar();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        java.lang.String str13 = node10.toString();
        boolean boolean14 = node10.isWith();
        com.google.javascript.rhino.Node node15 = node2.srcref(node10);
        boolean boolean16 = node10.isFor();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean19 = node18.isName();
        boolean boolean20 = node18.isSwitch();
        boolean boolean21 = node18.isNull();
        boolean boolean22 = node18.isFunction();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node24.isName();
        boolean boolean26 = node24.isSwitch();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean29 = node24.hasChild(node28);
        boolean boolean30 = node24.isVar();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean33 = node32.isName();
        boolean boolean34 = node32.isSwitch();
        java.lang.String str35 = node32.toString();
        boolean boolean36 = node32.isWith();
        com.google.javascript.rhino.Node node37 = node24.srcref(node32);
        java.lang.String str38 = node37.toString();
        boolean boolean39 = node37.isDec();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean42 = node41.isName();
        boolean boolean43 = node41.isSwitch();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean46 = node41.hasChild(node45);
        com.google.javascript.rhino.Node node47 = com.google.javascript.jscomp.NodeUtil.newExpr(node41);
        boolean boolean48 = node47.isRegExp();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean51 = node50.isName();
        boolean boolean52 = node50.isSwitch();
        java.lang.String str53 = node50.toString();
        com.google.javascript.rhino.Node node54 = node47.useSourceInfoIfMissingFromForTree(node50);
        com.google.javascript.rhino.jstype.JSType jSType55 = null;
        node50.setJSType(jSType55);
        boolean boolean57 = node50.isOptionalArg();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) -1, node10, node18, node37, node50, (int) (short) -1, 0);
        node10.setCharno((int) '#');
        boolean boolean63 = node10.isNumber();
        node10.setLineno(47);
        com.google.javascript.rhino.InputId inputId67 = new com.google.javascript.rhino.InputId("NUMBER 100.0 100");
        node10.setInputId(inputId67);
        java.lang.String str69 = inputId67.getIdName();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "NUMBER -1.0" + "'", str13, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "NUMBER -1.0" + "'", str35, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "NUMBER -1.0" + "'", str38, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "NUMBER -1.0" + "'", str53, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "NUMBER 100.0 100" + "'", str69, "NUMBER 100.0 100");
    }

    @Test
    public void test09949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09949");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(111, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: STRING \n", 52, 35);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test09950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09950");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.hasModifies();
        boolean boolean5 = jSDocInfo0.hasDescriptionForParameter("");
        java.lang.String str6 = jSDocInfo0.getSourceName();
        boolean boolean7 = jSDocInfo0.isDefine();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getReturnType();
        boolean boolean12 = jSDocInfo0.hasParameter("Node tree inequality:\nTree1:\nREGEXP\n    NUMBER -1.0 [empty_block: 1]\n\n\nTree2:\nNUMBER -1.0 0\n\n\nSubtree1: REGEXP\n    NUMBER -1.0 [empty_block: 1]\n\n\nSubtree2: NUMBER -1.0 0\n");
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test09951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09951");
        java.lang.Throwable throwable2 = null;
        java.io.IOException iOException3 = new java.io.IOException(throwable2);
        java.lang.Throwable throwable4 = null;
        java.io.IOException iOException5 = new java.io.IOException(throwable4);
        iOException3.addSuppressed((java.lang.Throwable) iOException5);
        java.io.IOException iOException7 = new java.io.IOException("hi!", (java.lang.Throwable) iOException3);
        java.lang.Throwable[] throwableArray8 = iOException7.getSuppressed();
        java.lang.Throwable throwable10 = null;
        java.io.IOException iOException11 = new java.io.IOException(throwable10);
        java.io.IOException iOException12 = new java.io.IOException((java.lang.Throwable) iOException11);
        java.io.IOException iOException13 = new java.io.IOException("NUMBER -1.0\n", (java.lang.Throwable) iOException11);
        iOException7.addSuppressed((java.lang.Throwable) iOException13);
        java.io.IOException iOException15 = new java.io.IOException((java.lang.Throwable) iOException13);
        java.io.IOException iOException17 = new java.io.IOException("BITXOR 0\n");
        iOException13.addSuppressed((java.lang.Throwable) iOException17);
        java.io.IOException iOException19 = new java.io.IOException((java.lang.Throwable) iOException13);
        java.io.IOException iOException20 = new java.io.IOException((java.lang.Throwable) iOException19);
        java.lang.Throwable throwable22 = null;
        java.io.IOException iOException23 = new java.io.IOException(throwable22);
        java.io.IOException iOException24 = new java.io.IOException((java.lang.Throwable) iOException23);
        java.lang.Throwable[] throwableArray25 = iOException23.getSuppressed();
        java.io.IOException iOException26 = new java.io.IOException("NUMBER -1.0\n", (java.lang.Throwable) iOException23);
        iOException20.addSuppressed((java.lang.Throwable) iOException26);
        java.io.IOException iOException28 = new java.io.IOException("java.io.IOException: java.io.IOException: java.io.IOException: hi!", (java.lang.Throwable) iOException20);
        java.lang.Throwable[] throwableArray29 = iOException28.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray29);
    }

    @Test
    public void test09952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09952");
        com.google.javascript.rhino.jstype.JSType jSType0 = null;
        com.google.javascript.rhino.jstype.JSType jSType1 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair2 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType0, jSType1);
        com.google.javascript.rhino.jstype.JSType jSType3 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType4 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType5 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType6 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType7 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType8 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType9 = typePair2.typeA;
        org.junit.Assert.assertNull(jSType3);
        org.junit.Assert.assertNull(jSType4);
        org.junit.Assert.assertNull(jSType5);
        org.junit.Assert.assertNull(jSType6);
        org.junit.Assert.assertNull(jSType7);
        org.junit.Assert.assertNull(jSType8);
        org.junit.Assert.assertNull(jSType9);
    }

    @Test
    public void test09953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09953");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        boolean boolean8 = node7.isInstanceOf();
        com.google.javascript.rhino.InputId inputId9 = com.google.javascript.jscomp.NodeUtil.getInputId(node7);
        boolean boolean10 = node7.isSwitch();
        boolean boolean11 = node7.isTry();
        boolean boolean12 = node7.isInc();
        int int13 = node7.getSourceOffset();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(inputId9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test09954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09954");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setPositionInformation((int) (byte) -1, 0, 42, 17);
        int int6 = stringPosition0.getEndLine();
        stringPosition0.setItem("InputId: Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        java.lang.String str9 = stringPosition0.getItem();
        int int10 = stringPosition0.getPositionOnEndLine();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 42 + "'", int6 == 42);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "InputId: Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n" + "'", str9, "InputId: Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 17 + "'", int10 == 17);
    }

    @Test
    public void test09955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09955");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.hasParameter("hi!");
        com.google.javascript.rhino.Node node4 = jSDocInfo0.getAssociatedNode();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node11.isName();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node14.isName();
        boolean boolean16 = node14.isSwitch();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (byte) 100, node9, node11, node14);
        java.lang.String str18 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(node9);
        java.lang.String str19 = node9.toStringTree();
        jSDocInfo0.setAssociatedNode(node9);
        boolean boolean21 = jSDocInfo0.isNoAlias();
        boolean boolean22 = jSDocInfo0.isHidden();
        java.util.Collection<java.lang.String> strCollection23 = jSDocInfo0.getAuthors();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression25 = jSDocInfo0.getParameterType("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nSTRING Unknown class name\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: STRING Unknown class name\n");
        com.google.common.collect.ImmutableList<java.lang.String> strList26 = jSDocInfo0.getTemplateTypeNames();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "STRING Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n\n" + "'", str19, "STRING Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n\n");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(strCollection23);
        org.junit.Assert.assertNull(jSTypeExpression25);
        org.junit.Assert.assertNotNull(strList26);
    }

    @Test
    public void test09956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09956");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition4 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = marker0.getType();
        org.junit.Assert.assertNull(typePosition1);
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(stringPosition3);
        org.junit.Assert.assertNull(stringPosition4);
        org.junit.Assert.assertNull(typePosition5);
        org.junit.Assert.assertNull(stringPosition6);
        org.junit.Assert.assertNull(typePosition7);
    }

    @Test
    public void test09957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09957");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node8.isName();
        boolean boolean10 = node8.isSwitch();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node8.hasChild(node12);
        com.google.javascript.rhino.Node node14 = com.google.javascript.jscomp.NodeUtil.newExpr(node8);
        boolean boolean15 = node14.isRegExp();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node17.isName();
        boolean boolean19 = node17.isSwitch();
        java.lang.String str20 = node17.toString();
        com.google.javascript.rhino.Node node21 = node14.useSourceInfoIfMissingFromForTree(node17);
        boolean boolean22 = node5.isEquivalentToTyped(node17);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = null;
        node5.setStaticSourceFile(staticSourceFile23);
        int int25 = node5.getType();
        boolean boolean26 = node5.isThrow();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder27 = node5.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet29 = jSDocInfo28.getParameterNames();
        boolean boolean31 = jSDocInfo28.hasParameter("hi!");
        boolean boolean32 = jSDocInfo28.containsDeclaration();
        java.lang.String str33 = jSDocInfo28.getOriginalCommentString();
        boolean boolean34 = jSDocInfo28.isConstant();
        java.util.Collection<java.lang.String> strCollection35 = jSDocInfo28.getReferences();
        boolean boolean37 = jSDocInfo28.hasParameterType("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList38 = jSDocInfo28.getImplementedInterfaces();
        node5.setJSDocInfo(jSDocInfo28);
        boolean boolean40 = jSDocInfo28.hasEnumParameterType();
        boolean boolean41 = jSDocInfo28.hasReturnType();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "NUMBER -1.0" + "'", str20, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 39 + "'", int25 == 39);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(strCollection35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test09958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09958");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(204831);
    }

    @Test
    public void test09959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09959");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        java.lang.String str6 = jSDocInfo0.getFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getThisType();
        boolean boolean8 = jSDocInfo0.hasModifies();
        java.lang.String str9 = jSDocInfo0.getLendsName();
        boolean boolean10 = jSDocInfo0.shouldPreserveTry();
        int int11 = jSDocInfo0.getExtendedInterfacesCount();
        java.lang.String str12 = jSDocInfo0.getMeaning();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test09960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09960");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        int int8 = node1.getLength();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        node1.setDirectives((java.util.Set<java.lang.String>) strSet12);
        int int15 = strSet12.size();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node17.isName();
        boolean boolean19 = node17.isSwitch();
        java.lang.String str20 = node17.toString();
        boolean boolean21 = node17.isWith();
        boolean boolean22 = node17.isBreak();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList24 = jSDocInfo23.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection25 = jSDocInfo23.getReferences();
        java.util.Collection<java.lang.String> strCollection26 = jSDocInfo23.getReferences();
        com.google.javascript.rhino.Node node27 = jSDocInfo23.getAssociatedNode();
        node17.setJSDocInfo(jSDocInfo23);
        jSDocInfo23.setLicense("NUMBER -1.0");
        int int31 = jSDocInfo23.getImplementedInterfaceCount();
        boolean boolean33 = jSDocInfo23.hasDescriptionForParameter("");
        java.util.Set<java.lang.String> strSet34 = jSDocInfo23.getParameterNames();
        boolean boolean35 = strSet12.contains((java.lang.Object) jSDocInfo23);
        boolean boolean36 = jSDocInfo23.hasFileOverview();
        boolean boolean37 = jSDocInfo23.containsDeclaration();
        java.util.Collection<java.lang.String> strCollection38 = jSDocInfo23.getReferences();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "NUMBER -1.0" + "'", str20, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList24);
        org.junit.Assert.assertNull(strCollection25);
        org.junit.Assert.assertNull(strCollection26);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(strCollection38);
    }

    @Test
    public void test09961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09961");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        boolean boolean4 = node1.isExprResult();
        boolean boolean5 = node1.isArrayLit();
        boolean boolean6 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node1);
        boolean boolean7 = node1.isThis();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = node1.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: NUMBER -1.0 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test09962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09962");
        java.lang.String[] strArray1 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        int int4 = strList2.size();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        boolean boolean6 = strList2.remove((java.lang.Object) visibility5);
        java.util.Spliterator<java.lang.String> strSpliterator7 = strList2.spliterator();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean10 = node9.isName();
        boolean boolean11 = node9.isSwitch();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean14 = node9.hasChild(node13);
        com.google.javascript.rhino.Node node15 = com.google.javascript.jscomp.NodeUtil.newExpr(node9);
        int int16 = node9.getLength();
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        node9.setDirectives((java.util.Set<java.lang.String>) strSet20);
        java.lang.Object[] objArray23 = strSet20.toArray();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        int int28 = strList26.size();
        boolean boolean29 = strSet20.containsAll((java.util.Collection<java.lang.String>) strList26);
        java.util.Spliterator<java.lang.String> strSpliterator30 = strSet20.spliterator();
        boolean boolean31 = strList2.containsAll((java.util.Collection<java.lang.String>) strSet20);
        int int32 = strSet20.size();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean35 = node34.isName();
        boolean boolean36 = node34.isSwitch();
        java.lang.String str37 = node34.toString();
        boolean boolean38 = node34.isWith();
        int int40 = node34.getIntProp((int) ' ');
        boolean boolean41 = node34.isNE();
        com.google.javascript.rhino.jstype.JSType jSType42 = node34.getJSType();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition43 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int44 = namePosition43.getPositionOnStartLine();
        int int45 = namePosition43.getStartLine();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean48 = node47.isName();
        boolean boolean49 = node47.isSwitch();
        java.lang.String str50 = node47.toString();
        boolean boolean51 = node47.isNumber();
        boolean boolean52 = node47.isComma();
        boolean boolean53 = node47.isDebugger();
        boolean boolean54 = node47.isWith();
        namePosition43.setItem(node47);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean58 = node57.isName();
        boolean boolean59 = node57.isSwitch();
        java.lang.String str60 = node57.toString();
        boolean boolean61 = node57.isWith();
        int int63 = node57.getIntProp((int) ' ');
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder64 = node57.new FileLevelJsDocBuilder();
        int int65 = node47.getIndexOfChild(node57);
        node34.addChildToFront(node57);
        boolean boolean67 = strSet20.remove((java.lang.Object) node57);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSpliterator7);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[hi!]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strSpliterator30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "NUMBER -1.0" + "'", str37, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(jSType42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "NUMBER -1.0" + "'", str50, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "NUMBER -1.0" + "'", str60, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test09963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09963");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        java.lang.String str6 = jSDocInfo0.getFileOverview();
        boolean boolean7 = jSDocInfo0.isExport();
        boolean boolean8 = jSDocInfo0.hasReturnType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getThisType();
        boolean boolean10 = jSDocInfo0.shouldPreserveTry();
        boolean boolean11 = jSDocInfo0.isImplicitCast();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test09964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09964");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        int int5 = node4.getChildCount();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node7.isName();
        boolean boolean9 = node7.isSwitch();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node7.hasChild(node11);
        boolean boolean13 = node7.isVar();
        com.google.javascript.rhino.Node node14 = node7.getParent();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node16.isName();
        boolean boolean18 = node16.isSwitch();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node16.hasChild(node20);
        boolean boolean22 = node16.isVar();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node24.isName();
        boolean boolean26 = node24.isSwitch();
        java.lang.String str27 = node24.toString();
        boolean boolean28 = node24.isWith();
        com.google.javascript.rhino.Node node29 = node16.srcref(node24);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(130, node4, node7, node24, node33, 0, 15);
        boolean boolean37 = node7.isBreak();
        boolean boolean38 = node7.isGetProp();
        node7.setCharno(10);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean43 = node42.isName();
        boolean boolean44 = node42.isSwitch();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean47 = node42.hasChild(node46);
        com.google.javascript.rhino.Node node48 = com.google.javascript.jscomp.NodeUtil.newExpr(node42);
        int int49 = node48.getType();
        com.google.javascript.rhino.Node node50 = node48.getFirstChild();
        boolean boolean51 = node50.isScript();
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList53 = jSDocInfo52.getExtendedInterfaces();
        java.lang.String str54 = jSDocInfo52.getReturnDescription();
        boolean boolean55 = jSDocInfo52.hasFileOverview();
        node50.setJSDocInfo(jSDocInfo52);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile57 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node50);
        int int58 = node50.getType();
        // The following exception was thrown during execution in test generation
        try {
            node7.addChildrenToFront(node50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "NUMBER -1.0" + "'", str27, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 130 + "'", int49 == 130);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(staticSourceFile57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 39 + "'", int58 == 39);
    }

    @Test
    public void test09965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09965");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(53, "java.io.IOException: java.io.IOException");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(27, node3);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node6.isName();
        boolean boolean8 = node6.isSwitch();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isFunction();
        boolean boolean12 = node10.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node13 = node6.useSourceInfoIfMissingFrom(node10);
        boolean boolean14 = node13.isQuotedString();
        node13.setSourceFileForTesting("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node13);
        boolean boolean18 = staticSourceFile17.isExtern();
        int int20 = staticSourceFile17.getColumnOfOffset(39);
        node4.setStaticSourceFile(staticSourceFile17);
        int int23 = staticSourceFile17.getLineOfOffset((int) (byte) 1);
        int int25 = staticSourceFile17.getLineOfOffset((int) (short) 1);
        boolean boolean26 = staticSourceFile17.isExtern();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(staticSourceFile17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test09966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09966");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        int int8 = node1.getLength();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        node1.setDirectives((java.util.Set<java.lang.String>) strSet12);
        boolean boolean16 = strSet12.add("");
        java.lang.Object[] objArray17 = strSet12.toArray();
        java.util.Iterator<java.lang.String> strItor18 = strSet12.iterator();
        int int19 = strSet12.size();
        java.util.Iterator<java.lang.String> strItor20 = strSet12.iterator();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition21 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int22 = namePosition21.getPositionOnStartLine();
        int int23 = namePosition21.getStartLine();
        int int24 = namePosition21.getPositionOnStartLine();
        int int25 = namePosition21.getPositionOnStartLine();
        int int26 = namePosition21.getPositionOnStartLine();
        int int27 = namePosition21.getEndLine();
        namePosition21.setPositionInformation((int) (byte) 10, 41, 409642, 50);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean36 = node35.isName();
        boolean boolean37 = node35.isSwitch();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean40 = node35.hasChild(node39);
        boolean boolean41 = node35.isVar();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean44 = node43.isName();
        boolean boolean45 = node43.isSwitch();
        java.lang.String str46 = node43.toString();
        boolean boolean47 = node43.isWith();
        com.google.javascript.rhino.Node node48 = node35.srcref(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean51 = node50.isName();
        boolean boolean52 = node50.isSwitch();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean55 = node50.hasChild(node54);
        com.google.javascript.rhino.Node node56 = com.google.javascript.jscomp.NodeUtil.newExpr(node50);
        boolean boolean57 = node56.isRegExp();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean60 = node59.isName();
        boolean boolean61 = node59.isSwitch();
        java.lang.String str62 = node59.toString();
        com.google.javascript.rhino.Node node63 = node56.useSourceInfoIfMissingFromForTree(node59);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean66 = node65.isName();
        boolean boolean67 = node65.isSwitch();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean70 = node65.hasChild(node69);
        com.google.javascript.rhino.jstype.JSType jSType71 = null;
        node69.setJSType(jSType71);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (byte) 0, node43, node59, node69, (int) (byte) 0, (int) '#');
        com.google.javascript.rhino.Node node76 = node75.getFirstChild();
        boolean boolean77 = node76.isComma();
        namePosition21.setItem(node76);
        namePosition21.setPositionInformation(0, 8, 46, (int) (short) 0);
        int int84 = namePosition21.getEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition85 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int86 = namePosition85.getPositionOnStartLine();
        int int87 = namePosition85.getStartLine();
        int int88 = namePosition85.getPositionOnStartLine();
        int int89 = namePosition85.getPositionOnEndLine();
        int int90 = namePosition85.getPositionOnEndLine();
        int int91 = namePosition85.getStartLine();
        int int92 = namePosition85.getPositionOnEndLine();
        com.google.javascript.rhino.Node node93 = namePosition85.getItem();
        int int94 = namePosition85.getPositionOnEndLine();
        int int95 = namePosition85.getStartLine();
        int int96 = namePosition85.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition[] namePositionArray97 = new com.google.javascript.rhino.JSDocInfo.NamePosition[] { namePosition21, namePosition85 };
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.JSDocInfo.NamePosition[] namePositionArray98 = strSet12.toArray(namePositionArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[hi!, ]");
        org.junit.Assert.assertNotNull(strItor18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(strItor20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "NUMBER -1.0" + "'", str46, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "NUMBER -1.0" + "'", str62, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 46 + "'", int84 == 46);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNull(node93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertNotNull(namePositionArray97);
    }

    @Test
    public void test09967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09967");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        int int8 = node1.getLength();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        node1.setDirectives((java.util.Set<java.lang.String>) strSet12);
        java.lang.Object[] objArray15 = strSet12.toArray();
        java.util.stream.Stream<java.lang.String> strStream16 = strSet12.parallelStream();
        int int17 = strSet12.size();
        java.lang.Object obj18 = null;
        boolean boolean19 = strSet12.contains(obj18);
        int int20 = strSet12.size();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[hi!]");
        org.junit.Assert.assertNotNull(strStream16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test09968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09968");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.Node node5 = jSDocInfo0.getAssociatedNode();
        java.lang.String str6 = jSDocInfo0.toString();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node8.isName();
        boolean boolean10 = node8.isSwitch();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node8.hasChild(node12);
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        node12.setJSType(jSType14);
        node12.setSourceFileForTesting("Named type with empty name component");
        boolean boolean18 = node12.isLabelName();
        jSDocInfo0.setAssociatedNode(node12);
        boolean boolean21 = jSDocInfo0.hasParameter("Not declared as a constructor");
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JSDocInfo" + "'", str6, "JSDocInfo");
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test09969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09969");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node2.hasChild(node6);
        com.google.javascript.rhino.Node node8 = com.google.javascript.jscomp.NodeUtil.newExpr(node2);
        boolean boolean9 = node8.isRegExp();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node11.isName();
        boolean boolean13 = node11.isSwitch();
        java.lang.String str14 = node11.toString();
        com.google.javascript.rhino.Node node15 = node8.useSourceInfoIfMissingFromForTree(node11);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        node17.setWasEmptyNode(true);
        boolean boolean20 = node17.isOr();
        boolean boolean21 = node17.isInstanceOf();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) '#', node15, node17, 32, 4095);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node26.isName();
        boolean boolean28 = node26.isSwitch();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean31 = node26.hasChild(node30);
        com.google.javascript.rhino.Node node32 = com.google.javascript.jscomp.NodeUtil.newExpr(node26);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean35 = node34.isName();
        boolean boolean36 = node34.isSwitch();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean39 = node34.hasChild(node38);
        com.google.javascript.rhino.Node node40 = com.google.javascript.jscomp.NodeUtil.newExpr(node34);
        node34.setOptionalArg(true);
        node34.putBooleanProp((int) (short) -1, true);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean48 = node47.isName();
        boolean boolean49 = node47.isSwitch();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean52 = node47.hasChild(node51);
        com.google.javascript.rhino.Node node53 = com.google.javascript.jscomp.NodeUtil.newExpr(node47);
        boolean boolean54 = node53.isRegExp();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean57 = node56.isName();
        boolean boolean58 = node56.isSwitch();
        java.lang.String str59 = node56.toString();
        com.google.javascript.rhino.Node node60 = node53.useSourceInfoIfMissingFromForTree(node56);
        com.google.javascript.rhino.Node node61 = node34.useSourceInfoFromForTree(node53);
        boolean boolean62 = node32.hasChild(node34);
        com.google.javascript.rhino.Node node63 = null;
        com.google.javascript.jscomp.CodingConvention.Bind bind64 = new com.google.javascript.jscomp.CodingConvention.Bind(node17, node34, node63);
        node17.setIsSyntheticBlock(false);
        java.util.Set<java.lang.String> strSet67 = node17.getDirectives();
        boolean boolean68 = node17.isNE();
        boolean boolean69 = node17.isTypeOf();
        int int70 = node17.getLineno();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "NUMBER -1.0" + "'", str14, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "NUMBER -1.0" + "'", str59, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(strSet67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
    }

    @Test
    public void test09970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09970");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        boolean boolean7 = jSDocInfo0.hasDescriptionForParameter("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        boolean boolean8 = jSDocInfo0.hasBaseType();
        int int9 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo0.getModifies();
        boolean boolean11 = jSDocInfo0.hasBaseType();
        boolean boolean12 = jSDocInfo0.isExport();
        java.util.Set<java.lang.String> strSet13 = jSDocInfo0.getModifies();
        java.lang.Object[] objArray14 = strSet13.toArray();
        boolean boolean15 = strSet13.isEmpty();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString(0, "EXPR_RESULT 0", 4095, (-2147483648));
        boolean boolean21 = strSet13.remove((java.lang.Object) 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test09971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09971");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        boolean boolean7 = node5.isGetElem();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection8 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node5);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        int int14 = node13.getChildCount();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node16.isName();
        boolean boolean18 = node16.isSwitch();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node16.hasChild(node20);
        boolean boolean22 = node16.isVar();
        com.google.javascript.rhino.Node node23 = node16.getParent();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean26 = node25.isName();
        boolean boolean27 = node25.isSwitch();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean30 = node25.hasChild(node29);
        boolean boolean31 = node25.isVar();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean34 = node33.isName();
        boolean boolean35 = node33.isSwitch();
        java.lang.String str36 = node33.toString();
        boolean boolean37 = node33.isWith();
        com.google.javascript.rhino.Node node38 = node25.srcref(node33);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(130, node13, node16, node33, node42, 0, 15);
        java.lang.String str46 = node5.checkTreeEquals(node13);
        com.google.javascript.rhino.Node node47 = node13.getLastSibling();
        boolean boolean48 = node13.isContinue();
        node13.putIntProp(29, 46);
        int int52 = node13.getSideEffectFlags();
        int int53 = node13.getSourcePosition();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(nodeCollection8);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "NUMBER -1.0" + "'", str36, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n" + "'", str46, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 409697 + "'", int53 == 409697);
    }

    @Test
    public void test09972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09972");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        java.lang.String str7 = node1.getSourceFileName();
        boolean boolean8 = node1.isIn();
        com.google.javascript.rhino.InputId inputId9 = com.google.javascript.jscomp.NodeUtil.getInputId(node1);
        boolean boolean10 = node1.isVoid();
        node1.setDouble((double) 31);
        boolean boolean13 = node1.hasOneChild();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(inputId9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test09973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09973");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 49);
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean4 = node3.isName();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node6.isName();
        boolean boolean8 = node6.isSwitch();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node6.hasChild(node10);
        com.google.javascript.rhino.Node node12 = com.google.javascript.jscomp.NodeUtil.newExpr(node6);
        boolean boolean13 = node12.isRegExp();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean16 = node15.isName();
        boolean boolean17 = node15.isSwitch();
        java.lang.String str18 = node15.toString();
        com.google.javascript.rhino.Node node19 = node12.useSourceInfoIfMissingFromForTree(node15);
        java.lang.String str20 = node3.checkTreeEquals(node19);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean24 = node23.isName();
        boolean boolean25 = node23.isSwitch();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean28 = node23.hasChild(node27);
        boolean boolean29 = node27.isGetElem();
        node3.putProp((int) (short) 100, (java.lang.Object) boolean29);
        boolean boolean31 = node3.isCatch();
        boolean boolean32 = node3.isRegExp();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean35 = node34.isName();
        boolean boolean36 = node34.isSwitch();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean39 = node34.hasChild(node38);
        com.google.javascript.rhino.Node node40 = com.google.javascript.jscomp.NodeUtil.newExpr(node34);
        int int41 = node34.getLength();
        boolean boolean42 = node34.isNew();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean45 = node44.isName();
        boolean boolean46 = node44.isSwitch();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean49 = node44.hasChild(node48);
        com.google.javascript.rhino.Node node50 = com.google.javascript.jscomp.NodeUtil.newExpr(node44);
        int int51 = node44.getLength();
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet55 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54);
        node44.setDirectives((java.util.Set<java.lang.String>) strSet55);
        boolean boolean59 = node44.getBooleanProp(41);
        com.google.javascript.rhino.Node node60 = node34.useSourceInfoFromForTree(node44);
        com.google.javascript.rhino.InputId inputId62 = new com.google.javascript.rhino.InputId("");
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean65 = node64.isName();
        boolean boolean66 = node64.isSwitch();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean69 = node64.hasChild(node68);
        com.google.javascript.rhino.Node node70 = com.google.javascript.jscomp.NodeUtil.newExpr(node64);
        node64.setOptionalArg(true);
        node64.putBooleanProp((int) (short) -1, true);
        boolean boolean76 = inputId62.equals((java.lang.Object) true);
        node44.setInputId(inputId62);
        node3.setInputId(inputId62);
        node1.setInputId(inputId62);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags81 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 10);
        sideEffectFlags81.setMutatesArguments();
        sideEffectFlags81.clearSideEffectFlags();
        sideEffectFlags81.setAllFlags();
        sideEffectFlags81.setAllFlags();
        boolean boolean86 = sideEffectFlags81.areAllFlagsSet();
        sideEffectFlags81.clearSideEffectFlags();
        boolean boolean88 = inputId62.equals((java.lang.Object) sideEffectFlags81);
        java.lang.String str89 = inputId62.getIdName();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "NUMBER -1.0" + "'", str18, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n" + "'", str20, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
    }

    @Test
    public void test09974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09974");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("InputId: Named type with empty name component", 43, 163937);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test09975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09975");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node8.isName();
        boolean boolean10 = node8.isSwitch();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node8.hasChild(node12);
        com.google.javascript.rhino.Node node14 = com.google.javascript.jscomp.NodeUtil.newExpr(node8);
        boolean boolean15 = node14.isRegExp();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node17.isName();
        boolean boolean19 = node17.isSwitch();
        java.lang.String str20 = node17.toString();
        com.google.javascript.rhino.Node node21 = node14.useSourceInfoIfMissingFromForTree(node17);
        boolean boolean22 = node5.isEquivalentToTyped(node17);
        boolean boolean23 = node5.isTypeOf();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean26 = node25.isName();
        boolean boolean27 = node25.isSwitch();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean30 = node25.hasChild(node29);
        com.google.javascript.rhino.Node node31 = com.google.javascript.jscomp.NodeUtil.newExpr(node25);
        boolean boolean32 = node31.isRegExp();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean35 = node34.isName();
        boolean boolean36 = node34.isSwitch();
        java.lang.String str37 = node34.toString();
        com.google.javascript.rhino.Node node38 = node31.useSourceInfoIfMissingFromForTree(node34);
        com.google.javascript.rhino.jstype.JSType jSType39 = null;
        node34.setJSType(jSType39);
        boolean boolean41 = node34.isGetterDef();
        boolean boolean42 = node34.isWith();
        boolean boolean43 = node34.isRegExp();
        com.google.javascript.rhino.Node node44 = node5.copyInformationFromForTree(node34);
        boolean boolean45 = node5.isSyntheticBlock();
        com.google.javascript.rhino.Node node47 = node5.getAncestor(15);
        boolean boolean48 = node5.isBreak();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "NUMBER -1.0" + "'", str20, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "NUMBER -1.0" + "'", str37, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test09976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09976");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 10, 100, 12);
        boolean boolean4 = node3.isUnscopedQualifiedName();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test09977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09977");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(41, "NUMBER 31.0");
        boolean boolean3 = node2.isOptionalArg();
        node2.setVarArgs(false);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test09978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09978");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        java.lang.String str6 = jSDocInfo0.getFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getThisType();
        boolean boolean8 = jSDocInfo0.isDeprecated();
        boolean boolean9 = jSDocInfo0.hasModifies();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test09979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09979");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.Node node5 = jSDocInfo0.getAssociatedNode();
        boolean boolean7 = jSDocInfo0.hasParameterType("InputId: ");
        boolean boolean8 = jSDocInfo0.shouldPreserveTry();
        boolean boolean9 = jSDocInfo0.hasType();
        boolean boolean10 = jSDocInfo0.shouldPreserveTry();
        jSDocInfo0.setDeprecated(false);
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection13 = jSDocInfo0.getMarkers();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(markerCollection13);
    }

    @Test
    public void test09980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09980");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str7 = jSDocInfo0.getFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getThisType();
        boolean boolean9 = jSDocInfo0.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getThisType();
        java.util.Collection<java.lang.String> strCollection11 = jSDocInfo0.getAuthors();
        java.lang.String str12 = jSDocInfo0.toString();
        java.lang.String str13 = jSDocInfo0.getDeprecationReason();
        boolean boolean14 = jSDocInfo0.isNoShadow();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertNull(strCollection11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "JSDocInfo" + "'", str12, "JSDocInfo");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test09981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09981");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getReturnDescription();
        boolean boolean3 = jSDocInfo0.hasFileOverview();
        java.util.Set<java.lang.String> strSet4 = jSDocInfo0.getModifies();
        java.lang.String str5 = jSDocInfo0.getOriginalCommentString();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility6 = jSDocInfo0.getVisibility();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility7 = jSDocInfo0.getVisibility();
        boolean boolean8 = jSDocInfo0.isNoShadow();
        java.lang.String str9 = jSDocInfo0.getReturnDescription();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(visibility6);
        org.junit.Assert.assertNull(visibility7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test09982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09982");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getReferences();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection3 = jSDocInfo0.getMarkers();
        java.lang.String str4 = jSDocInfo0.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getParameterType("java.io.IOException: java.io.IOException: java.io.IOException");
        java.lang.String str7 = jSDocInfo0.getMeaning();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertNotNull(markerCollection3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test09983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09983");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        int int8 = node1.getLength();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        node1.setDirectives((java.util.Set<java.lang.String>) strSet12);
        java.util.Spliterator<java.lang.String> strSpliterator15 = strSet12.spliterator();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node17.isName();
        boolean boolean19 = node17.isSwitch();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node17.hasChild(node21);
        java.lang.String str23 = com.google.javascript.jscomp.NodeUtil.getSourceName(node17);
        com.google.javascript.rhino.Node node24 = com.google.javascript.jscomp.NodeUtil.newExpr(node17);
        boolean boolean25 = strSet12.equals((java.lang.Object) node24);
        java.util.Spliterator<java.lang.String> strSpliterator26 = strSet12.spliterator();
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        int int31 = strList29.size();
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        int int36 = strList34.size();
        boolean boolean37 = strList29.removeAll((java.util.Collection<java.lang.String>) strList34);
        java.io.IOException iOException39 = new java.io.IOException("Not declared as a type name");
        java.io.IOException iOException41 = new java.io.IOException("Not declared as a type name");
        java.lang.Throwable throwable42 = null;
        java.io.IOException iOException43 = new java.io.IOException(throwable42);
        java.lang.Exception[] exceptionArray44 = new java.lang.Exception[] { iOException39, iOException41, iOException43 };
        java.lang.Exception[] exceptionArray45 = strList29.toArray(exceptionArray44);
        boolean boolean46 = strSet12.containsAll((java.util.Collection<java.lang.String>) strList29);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean49 = node48.isName();
        boolean boolean50 = node48.isSwitch();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean53 = node48.hasChild(node52);
        com.google.javascript.rhino.Node node54 = com.google.javascript.jscomp.NodeUtil.newExpr(node48);
        int int55 = node48.getLength();
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet59 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet59, strArray58);
        node48.setDirectives((java.util.Set<java.lang.String>) strSet59);
        java.util.Spliterator<java.lang.String> strSpliterator62 = strSet59.spliterator();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean65 = node64.isName();
        boolean boolean66 = node64.isSwitch();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean69 = node64.hasChild(node68);
        com.google.javascript.rhino.Node node70 = com.google.javascript.jscomp.NodeUtil.newExpr(node64);
        int int71 = node64.getLength();
        java.lang.String[] strArray74 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet75 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet75, strArray74);
        node64.setDirectives((java.util.Set<java.lang.String>) strSet75);
        boolean boolean79 = strSet75.add("");
        java.lang.Object[] objArray80 = strSet75.toArray();
        boolean boolean81 = strSet59.addAll((java.util.Collection<java.lang.String>) strSet75);
        boolean boolean83 = strSet75.add("BITXOR 0\n");
        boolean boolean84 = strSet12.equals((java.lang.Object) "BITXOR 0\n");
        boolean boolean85 = strSet12.isEmpty();
        int int86 = strSet12.size();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strSpliterator15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strSpliterator26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(exceptionArray44);
        org.junit.Assert.assertNotNull(exceptionArray45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(strSpliterator62);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[hi!, ]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
    }

    @Test
    public void test09984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09984");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber(0.0d);
        boolean boolean2 = node1.isNE();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node3 = com.google.javascript.jscomp.NodeUtil.getRootOfQualifiedName(node1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test09985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09985");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setItem("Not declared as a type name");
        int int3 = stringPosition0.getEndLine();
        int int4 = stringPosition0.getEndLine();
        int int5 = stringPosition0.getPositionOnStartLine();
        stringPosition0.setPositionInformation(25, 24, 46, 130);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test09986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09986");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        java.lang.String str4 = node1.toString();
        boolean boolean5 = node1.isWith();
        boolean boolean6 = node1.isBreak();
        com.google.javascript.rhino.JSDocInfo jSDocInfo7 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo7.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection9 = jSDocInfo7.getReferences();
        java.util.Collection<java.lang.String> strCollection10 = jSDocInfo7.getReferences();
        com.google.javascript.rhino.Node node11 = jSDocInfo7.getAssociatedNode();
        node1.setJSDocInfo(jSDocInfo7);
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = jSDocInfo7.getTemplateTypeNames();
        java.util.Set<java.lang.String> strSet14 = jSDocInfo7.getSuppressions();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility15 = jSDocInfo7.getVisibility();
        boolean boolean16 = jSDocInfo7.isConstructor();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER -1.0" + "'", str4, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertNull(strCollection9);
        org.junit.Assert.assertNull(strCollection10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNull(visibility15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test09987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09987");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        int int8 = node1.getLength();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        node1.setDirectives((java.util.Set<java.lang.String>) strSet12);
        java.lang.Object[] objArray15 = strSet12.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo16 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet17 = jSDocInfo16.getParameterNames();
        java.util.stream.Stream<java.lang.String> strStream18 = strSet17.stream();
        boolean boolean19 = strSet12.containsAll((java.util.Collection<java.lang.String>) strSet17);
        boolean boolean20 = strSet12.isEmpty();
        int int21 = strSet12.size();
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList23 = jSDocInfo22.getExtendedInterfaces();
        java.lang.String str24 = jSDocInfo22.getVersion();
        boolean boolean25 = jSDocInfo22.isInterface();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection26 = jSDocInfo22.getMarkers();
        java.util.Set<java.lang.String> strSet27 = jSDocInfo22.getModifies();
        boolean boolean28 = strSet12.removeAll((java.util.Collection<java.lang.String>) strSet27);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean31 = node30.isName();
        boolean boolean32 = node30.isSwitch();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean35 = node30.hasChild(node34);
        com.google.javascript.rhino.Node node36 = com.google.javascript.jscomp.NodeUtil.newExpr(node30);
        int int37 = node30.getLength();
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        node30.setDirectives((java.util.Set<java.lang.String>) strSet41);
        java.util.Spliterator<java.lang.String> strSpliterator44 = strSet41.spliterator();
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet50 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean54 = node53.isName();
        boolean boolean55 = node53.isSwitch();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean58 = node53.hasChild(node57);
        com.google.javascript.rhino.Node node59 = com.google.javascript.jscomp.NodeUtil.newExpr(node53);
        int int60 = node53.getLength();
        java.lang.String[] strArray63 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet64 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet64, strArray63);
        node53.setDirectives((java.util.Set<java.lang.String>) strSet64);
        java.util.Spliterator<java.lang.String> strSpliterator67 = strSet64.spliterator();
        boolean boolean68 = strSet50.retainAll((java.util.Collection<java.lang.String>) strSet64);
        java.lang.Object[] objArray69 = strSet50.toArray();
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean72 = node71.isName();
        boolean boolean73 = node71.isSwitch();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean76 = node71.hasChild(node75);
        com.google.javascript.rhino.Node node77 = com.google.javascript.jscomp.NodeUtil.newExpr(node71);
        int int78 = node71.getLength();
        java.lang.String[] strArray81 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet82 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet82, strArray81);
        node71.setDirectives((java.util.Set<java.lang.String>) strSet82);
        boolean boolean85 = strSet82.isEmpty();
        boolean boolean86 = strSet50.containsAll((java.util.Collection<java.lang.String>) strSet82);
        com.google.javascript.rhino.JSDocInfo jSDocInfo87 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet88 = jSDocInfo87.getParameterNames();
        boolean boolean89 = strSet50.containsAll((java.util.Collection<java.lang.String>) strSet88);
        java.util.Spliterator<java.lang.String> strSpliterator90 = strSet88.spliterator();
        boolean boolean91 = strSet41.retainAll((java.util.Collection<java.lang.String>) strSet88);
        boolean boolean93 = strSet41.add("BITXOR 0\n");
        int int94 = strSet41.size();
        strSet41.clear();
        boolean boolean96 = strSet27.addAll((java.util.Collection<java.lang.String>) strSet41);
        java.util.stream.Stream<java.lang.String> strStream97 = strSet27.parallelStream();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[hi!]");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(strStream18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(jSTypeExpressionList23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(markerCollection26);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strSpliterator44);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(strSpliterator67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[hi!]");
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(strSet88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(strSpliterator90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(strStream97);
    }

    @Test
    public void test09988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09988");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getReferences();
        com.google.common.collect.ImmutableList<java.lang.String> strList3 = jSDocInfo0.getTemplateTypeNames();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection4 = jSDocInfo0.getTypeNodes();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getParameterNames();
        java.util.Spliterator<java.lang.String> strSpliterator6 = strSet5.spliterator();
        com.google.javascript.rhino.Node.SideEffectFlags[] sideEffectFlagsArray7 = new com.google.javascript.rhino.Node.SideEffectFlags[] {};
        com.google.javascript.rhino.Node.SideEffectFlags[] sideEffectFlagsArray8 = strSet5.toArray(sideEffectFlagsArray7);
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(nodeCollection4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strSpliterator6);
        org.junit.Assert.assertNotNull(sideEffectFlagsArray7);
        org.junit.Assert.assertNotNull(sideEffectFlagsArray8);
    }

    @Test
    public void test09989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09989");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        java.lang.String str4 = node1.toString();
        boolean boolean5 = node1.isWith();
        int int7 = node1.getIntProp((int) ' ');
        boolean boolean8 = node1.isNE();
        com.google.javascript.rhino.jstype.JSType jSType9 = node1.getJSType();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition10 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int11 = namePosition10.getPositionOnStartLine();
        int int12 = namePosition10.getStartLine();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node14.isName();
        boolean boolean16 = node14.isSwitch();
        java.lang.String str17 = node14.toString();
        boolean boolean18 = node14.isNumber();
        boolean boolean19 = node14.isComma();
        boolean boolean20 = node14.isDebugger();
        boolean boolean21 = node14.isWith();
        namePosition10.setItem(node14);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node24.isName();
        boolean boolean26 = node24.isSwitch();
        java.lang.String str27 = node24.toString();
        boolean boolean28 = node24.isWith();
        int int30 = node24.getIntProp((int) ' ');
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder31 = node24.new FileLevelJsDocBuilder();
        int int32 = node14.getIndexOfChild(node24);
        node1.addChildToFront(node24);
        java.lang.String str34 = com.google.javascript.jscomp.NodeUtil.getSourceName(node1);
        int int35 = node1.getSideEffectFlags();
        boolean boolean36 = node1.isCatch();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER -1.0" + "'", str4, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSType9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "NUMBER -1.0" + "'", str17, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "NUMBER -1.0" + "'", str27, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test09990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09990");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(35, nodeArray1, 54, (int) (byte) 100);
        node4.detachChildren();
        int int6 = node4.getType();
        boolean boolean7 = node4.isInc();
        com.google.javascript.rhino.Node node8 = node4.removeFirstChild();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(node8);
    }

    @Test
    public void test09991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09991");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(41, node4);
        boolean boolean6 = node5.isWith();
        boolean boolean7 = node5.isNE();
        int int8 = node5.getLineno();
        node5.setType((int) (short) 10);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(10, "java.io.IOException: BITXOR 0\n");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node13.getStaticSourceFile();
        com.google.javascript.rhino.Node node15 = node5.useSourceInfoIfMissingFrom(node13);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node17.isFunction();
        boolean boolean19 = node17.isUnscopedQualifiedName();
        boolean boolean20 = node17.isEmpty();
        boolean boolean21 = node17.isEmpty();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean24 = node23.isName();
        boolean boolean25 = node23.isSwitch();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean28 = node23.hasChild(node27);
        boolean boolean29 = node23.isVar();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean32 = node31.isName();
        boolean boolean33 = node31.isSwitch();
        java.lang.String str34 = node31.toString();
        boolean boolean35 = node31.isWith();
        com.google.javascript.rhino.Node node36 = node23.srcref(node31);
        node23.detachChildren();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        com.google.javascript.jscomp.CodingConvention.Bind bind40 = new com.google.javascript.jscomp.CodingConvention.Bind(node17, node23, node39);
        node39.removeProp(53);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean45 = node44.isName();
        boolean boolean46 = node44.isSwitch();
        java.lang.String str47 = node44.toString();
        boolean boolean48 = node44.isWith();
        int int50 = node44.getIntProp((int) ' ');
        boolean boolean51 = node44.isNE();
        com.google.javascript.rhino.jstype.JSType jSType52 = node44.getJSType();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition53 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int54 = namePosition53.getPositionOnStartLine();
        int int55 = namePosition53.getStartLine();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean58 = node57.isName();
        boolean boolean59 = node57.isSwitch();
        java.lang.String str60 = node57.toString();
        boolean boolean61 = node57.isNumber();
        boolean boolean62 = node57.isComma();
        boolean boolean63 = node57.isDebugger();
        boolean boolean64 = node57.isWith();
        namePosition53.setItem(node57);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean68 = node67.isName();
        boolean boolean69 = node67.isSwitch();
        java.lang.String str70 = node67.toString();
        boolean boolean71 = node67.isWith();
        int int73 = node67.getIntProp((int) ' ');
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder74 = node67.new FileLevelJsDocBuilder();
        int int75 = node57.getIndexOfChild(node67);
        node44.addChildToFront(node67);
        com.google.javascript.rhino.InputId inputId78 = new com.google.javascript.rhino.InputId("");
        java.lang.String str79 = inputId78.getIdName();
        node67.setInputId(inputId78);
        node39.setInputId(inputId78);
        boolean boolean82 = node15.hasChild(node39);
        boolean boolean83 = node39.isIf();
        boolean boolean84 = node39.isReturn();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "NUMBER -1.0" + "'", str34, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "NUMBER -1.0" + "'", str47, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(jSType52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "NUMBER -1.0" + "'", str60, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "NUMBER -1.0" + "'", str70, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test09992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09992");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getReferences();
        com.google.common.collect.ImmutableList<java.lang.String> strList3 = jSDocInfo0.getTemplateTypeNames();
        java.util.Set<java.lang.String> strSet4 = jSDocInfo0.getSuppressions();
        boolean boolean5 = jSDocInfo0.hasModifies();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node7.isName();
        boolean boolean9 = node7.isSwitch();
        java.lang.String str10 = node7.toString();
        boolean boolean11 = node7.isWith();
        int int13 = node7.getIntProp((int) ' ');
        boolean boolean14 = node7.isNE();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node16.isName();
        boolean boolean18 = node16.isSwitch();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node16.hasChild(node20);
        com.google.javascript.rhino.jstype.JSType jSType22 = null;
        node20.setJSType(jSType22);
        node20.setType(2);
        com.google.javascript.rhino.Node node26 = node20.getLastSibling();
        com.google.javascript.rhino.Node node27 = node7.srcref(node26);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean30 = node29.isName();
        boolean boolean31 = node29.isSwitch();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean34 = node29.hasChild(node33);
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        node33.setJSType(jSType35);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean40 = node39.isName();
        boolean boolean41 = node39.isSwitch();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean44 = node39.hasChild(node43);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean47 = node46.isName();
        boolean boolean48 = node46.isSwitch();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean51 = node46.hasChild(node50);
        com.google.javascript.rhino.Node node52 = com.google.javascript.jscomp.NodeUtil.newExpr(node46);
        boolean boolean53 = node52.isRegExp();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean56 = node55.isName();
        boolean boolean57 = node55.isSwitch();
        java.lang.String str58 = node55.toString();
        com.google.javascript.rhino.Node node59 = node52.useSourceInfoIfMissingFromForTree(node55);
        boolean boolean60 = node43.isEquivalentToTyped(node55);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean63 = node62.isName();
        boolean boolean64 = node62.isSwitch();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean67 = node62.hasChild(node66);
        com.google.javascript.rhino.jstype.JSType jSType68 = null;
        node66.setJSType(jSType68);
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node(45, node43, node66, 10, 2);
        boolean boolean73 = node66.isFunction();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean76 = node75.isName();
        boolean boolean77 = node75.isSwitch();
        java.lang.String str78 = node75.toString();
        boolean boolean79 = node75.isWith();
        boolean boolean80 = node75.isBreak();
        com.google.javascript.jscomp.CodingConvention.Bind bind81 = new com.google.javascript.jscomp.CodingConvention.Bind(node33, node66, node75);
        com.google.javascript.rhino.Node node82 = node7.useSourceInfoFrom(node75);
        jSDocInfo0.setAssociatedNode(node7);
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nSTRING 0\n\n\nTree2:\nSTRING \n\n\nSubtree1: STRING 0\n\n\nSubtree2: STRING \n");
        java.lang.String str86 = jSDocInfo0.toString();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER -1.0" + "'", str10, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "NUMBER -1.0" + "'", str58, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "NUMBER -1.0" + "'", str78, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "JSDocInfo" + "'", str86, "JSDocInfo");
    }

    @Test
    public void test09993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09993");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int1 = namePosition0.getPositionOnStartLine();
        int int2 = namePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.Node node3 = namePosition0.getItem();
        int int4 = namePosition0.getPositionOnStartLine();
        com.google.javascript.rhino.Node node5 = namePosition0.getItem();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node7.isName();
        boolean boolean9 = node7.isSwitch();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node7.hasChild(node11);
        com.google.javascript.rhino.jstype.JSType jSType13 = null;
        node11.setJSType(jSType13);
        node11.setType(2);
        com.google.javascript.rhino.Node node17 = node11.getLastSibling();
        boolean boolean18 = node11.isRegExp();
        boolean boolean19 = node11.isGetProp();
        boolean boolean20 = node11.isOptionalArg();
        int int22 = node11.getIntProp((int) (byte) 1);
        com.google.javascript.rhino.Node node23 = node11.getLastSibling();
        boolean boolean24 = node11.isVarArgs();
        namePosition0.setItem(node11);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean29 = node28.isName();
        boolean boolean30 = node28.isSwitch();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean33 = node28.hasChild(node32);
        com.google.javascript.rhino.Node node34 = com.google.javascript.jscomp.NodeUtil.newExpr(node28);
        boolean boolean35 = node34.isRegExp();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean38 = node37.isName();
        boolean boolean39 = node37.isSwitch();
        java.lang.String str40 = node37.toString();
        com.google.javascript.rhino.Node node41 = node34.useSourceInfoIfMissingFromForTree(node37);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(50, node41);
        boolean boolean43 = node41.isGetterDef();
        boolean boolean44 = node41.isEmpty();
        boolean boolean45 = node41.isDo();
        boolean boolean47 = node41.getBooleanProp(12);
        com.google.javascript.rhino.jstype.JSType jSType48 = null;
        node41.setJSType(jSType48);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean52 = node51.isName();
        boolean boolean53 = node51.isSwitch();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean56 = node51.hasChild(node55);
        com.google.javascript.rhino.Node node57 = com.google.javascript.jscomp.NodeUtil.newExpr(node51);
        int int58 = node51.getLength();
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet62 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet62, strArray61);
        node51.setDirectives((java.util.Set<java.lang.String>) strSet62);
        java.util.Spliterator<java.lang.String> strSpliterator65 = strSet62.spliterator();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean68 = node67.isName();
        boolean boolean69 = node67.isSwitch();
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean72 = node67.hasChild(node71);
        java.lang.String str73 = com.google.javascript.jscomp.NodeUtil.getSourceName(node67);
        com.google.javascript.rhino.Node node74 = com.google.javascript.jscomp.NodeUtil.newExpr(node67);
        boolean boolean75 = strSet62.equals((java.lang.Object) node74);
        java.util.Spliterator<java.lang.String> strSpliterator76 = strSet62.spliterator();
        node41.setDirectives((java.util.Set<java.lang.String>) strSet62);
        boolean boolean78 = node41.isNE();
        namePosition0.setItem(node41);
        com.google.javascript.rhino.JSDocInfo jSDocInfo80 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet81 = jSDocInfo80.getParameterNames();
        boolean boolean83 = jSDocInfo80.hasParameter("hi!");
        boolean boolean84 = jSDocInfo80.hasThisType();
        java.util.Set<java.lang.String> strSet85 = jSDocInfo80.getModifies();
        java.util.Iterator<java.lang.String> strItor86 = strSet85.iterator();
        java.util.Spliterator<java.lang.String> strSpliterator87 = strSet85.spliterator();
        java.util.Spliterator<java.lang.String> strSpliterator88 = strSet85.spliterator();
        node41.setDirectives(strSet85);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "NUMBER -1.0" + "'", str40, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strSpliterator65);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(strSpliterator76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(strSet81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertNotNull(strItor86);
        org.junit.Assert.assertNotNull(strSpliterator87);
        org.junit.Assert.assertNotNull(strSpliterator88);
    }

    @Test
    public void test09994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09994");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getReturnDescription();
        int int3 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean4 = jSDocInfo0.isExterns();
        boolean boolean5 = jSDocInfo0.isConstructor();
        java.lang.String str6 = jSDocInfo0.getDeprecationReason();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility7 = jSDocInfo0.getVisibility();
        boolean boolean8 = jSDocInfo0.hasBaseType();
        java.lang.String str9 = jSDocInfo0.getSourceName();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(visibility7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test09995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09995");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        java.lang.String str6 = jSDocInfo0.getFileOverview();
        boolean boolean7 = jSDocInfo0.isExport();
        boolean boolean8 = jSDocInfo0.hasReturnType();
        boolean boolean9 = jSDocInfo0.isIdGenerator();
        boolean boolean10 = jSDocInfo0.hasThisType();
        boolean boolean11 = jSDocInfo0.hasTypedefType();
        jSDocInfo0.setDeprecated(false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test09996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09996");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        boolean boolean7 = node1.isVar();
        node1.setWasEmptyNode(false);
        boolean boolean10 = node1.isFalse();
        boolean boolean11 = node1.isArrayLit();
        boolean boolean12 = node1.hasChildren();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test09997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09997");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node8.isName();
        boolean boolean10 = node8.isSwitch();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node8.hasChild(node12);
        com.google.javascript.rhino.Node node14 = com.google.javascript.jscomp.NodeUtil.newExpr(node8);
        boolean boolean15 = node14.isRegExp();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node17.isName();
        boolean boolean19 = node17.isSwitch();
        java.lang.String str20 = node17.toString();
        com.google.javascript.rhino.Node node21 = node14.useSourceInfoIfMissingFromForTree(node17);
        boolean boolean22 = node5.isEquivalentToTyped(node17);
        com.google.javascript.rhino.InputId inputId23 = null;
        node17.setInputId(inputId23);
        boolean boolean25 = node17.isName();
        boolean boolean26 = node17.isVoid();
        com.google.javascript.rhino.Node node27 = com.google.javascript.jscomp.NodeUtil.newExpr(node17);
        node27.setVarArgs(true);
        boolean boolean30 = node27.isIf();
        boolean boolean31 = node27.isDefaultCase();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "NUMBER -1.0" + "'", str20, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test09998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09998");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN;
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        node2.removeProp((int) (byte) 1);
        boolean boolean6 = node2.isFromExterns();
        boolean boolean7 = node2.isOnlyModifiesThisCall();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo8.getParameterNames();
        boolean boolean11 = jSDocInfo8.hasParameter("hi!");
        boolean boolean12 = jSDocInfo8.hasThisType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList13 = jSDocInfo8.getThrownTypes();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList14 = jSDocInfo8.getImplementedInterfaces();
        java.lang.String str15 = jSDocInfo8.getLicense();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList16 = jSDocInfo8.getImplementedInterfaces();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList17 = jSDocInfo8.getImplementedInterfaces();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean20 = node19.isName();
        boolean boolean21 = node19.isSwitch();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean24 = node19.hasChild(node23);
        com.google.javascript.rhino.Node node25 = com.google.javascript.jscomp.NodeUtil.newExpr(node19);
        int int26 = node25.getType();
        jSDocInfo8.setAssociatedNode(node25);
        node25.setVarArgs(true);
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship30 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node2, node25);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder31 = node2.new FileLevelJsDocBuilder();
        org.junit.Assert.assertTrue("'" + subclassType0 + "' != '" + com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN + "'", subclassType0.equals(com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN));
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList13);
        org.junit.Assert.assertNotNull(jSTypeExpressionList14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(jSTypeExpressionList16);
        org.junit.Assert.assertNotNull(jSTypeExpressionList17);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 130 + "'", int26 == 130);
    }

    @Test
    public void test09999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09999");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        boolean boolean8 = node1.isIn();
        boolean boolean9 = node1.isTypeOf();
        com.google.javascript.rhino.Node node10 = null;
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean14 = node13.isName();
        boolean boolean15 = node13.isSwitch();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node13.hasChild(node17);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node20.isName();
        boolean boolean22 = node20.isSwitch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node20.hasChild(node24);
        com.google.javascript.rhino.Node node26 = com.google.javascript.jscomp.NodeUtil.newExpr(node20);
        boolean boolean27 = node26.isRegExp();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean30 = node29.isName();
        boolean boolean31 = node29.isSwitch();
        java.lang.String str32 = node29.toString();
        com.google.javascript.rhino.Node node33 = node26.useSourceInfoIfMissingFromForTree(node29);
        boolean boolean34 = node17.isEquivalentToTyped(node29);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean37 = node36.isName();
        boolean boolean38 = node36.isSwitch();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean41 = node36.hasChild(node40);
        com.google.javascript.rhino.jstype.JSType jSType42 = null;
        node40.setJSType(jSType42);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(45, node17, node40, 10, 2);
        java.util.Set<java.lang.String> strSet47 = null;
        node17.setDirectives(strSet47);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean51 = node50.isName();
        boolean boolean52 = node50.isSwitch();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean55 = node50.hasChild(node54);
        boolean boolean56 = node50.isComma();
        com.google.javascript.jscomp.CodingConvention.Bind bind57 = new com.google.javascript.jscomp.CodingConvention.Bind(node10, node17, node50);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean61 = node60.isName();
        boolean boolean62 = node60.isSwitch();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean65 = node60.hasChild(node64);
        com.google.javascript.rhino.Node node66 = com.google.javascript.jscomp.NodeUtil.newExpr(node60);
        boolean boolean67 = node66.isRegExp();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean70 = node69.isName();
        boolean boolean71 = node69.isSwitch();
        java.lang.String str72 = node69.toString();
        com.google.javascript.rhino.Node node73 = node66.useSourceInfoIfMissingFromForTree(node69);
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(50, node73);
        com.google.javascript.rhino.Node node75 = node17.srcref(node74);
        int int76 = node17.getType();
        com.google.javascript.rhino.Node node77 = node17.getParent();
        boolean boolean78 = node77.isParamList();
        com.google.javascript.rhino.JSDocInfo jSDocInfo79 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet80 = jSDocInfo79.getParameterNames();
        boolean boolean82 = jSDocInfo79.hasParameter("hi!");
        boolean boolean83 = jSDocInfo79.hasThisType();
        java.util.Set<java.lang.String> strSet84 = jSDocInfo79.getModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression85 = jSDocInfo79.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility86 = jSDocInfo79.getVisibility();
        boolean boolean87 = jSDocInfo79.isNoSideEffects();
        boolean boolean88 = jSDocInfo79.isNoCompile();
        boolean boolean89 = jSDocInfo79.isIdGenerator();
        node77.setJSDocInfo(jSDocInfo79);
        com.google.javascript.rhino.Node node91 = node1.clonePropsFrom(node77);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "NUMBER -1.0" + "'", str32, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "NUMBER -1.0" + "'", str72, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 39 + "'", int76 == 39);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(strSet80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(strSet84);
        org.junit.Assert.assertNull(jSTypeExpression85);
        org.junit.Assert.assertNull(visibility86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(node91);
    }

    @Test
    public void test10000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test10000");
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative1 = null;
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec2 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("java.io.IOException: Unknown class name", jSTypeNative1);
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node5.isName();
        boolean boolean7 = node5.isSwitch();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean10 = node5.hasChild(node9);
        boolean boolean11 = node5.isVar();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean14 = node13.isName();
        boolean boolean15 = node13.isSwitch();
        java.lang.String str16 = node13.toString();
        boolean boolean17 = node13.isWith();
        com.google.javascript.rhino.Node node18 = node5.srcref(node13);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node20.isName();
        boolean boolean22 = node20.isSwitch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node20.hasChild(node24);
        com.google.javascript.rhino.Node node26 = com.google.javascript.jscomp.NodeUtil.newExpr(node20);
        boolean boolean27 = node26.isRegExp();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean30 = node29.isName();
        boolean boolean31 = node29.isSwitch();
        java.lang.String str32 = node29.toString();
        com.google.javascript.rhino.Node node33 = node26.useSourceInfoIfMissingFromForTree(node29);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean36 = node35.isName();
        boolean boolean37 = node35.isSwitch();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean40 = node35.hasChild(node39);
        com.google.javascript.rhino.jstype.JSType jSType41 = null;
        node39.setJSType(jSType41);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (byte) 0, node13, node29, node39, (int) (byte) 0, (int) '#');
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean48 = node47.isName();
        boolean boolean49 = node47.isSwitch();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean52 = node47.hasChild(node51);
        com.google.javascript.rhino.Node node53 = com.google.javascript.jscomp.NodeUtil.newExpr(node47);
        int int54 = node47.getLength();
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet58 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet58, strArray57);
        node47.setDirectives((java.util.Set<java.lang.String>) strSet58);
        java.lang.Object[] objArray61 = strSet58.toArray();
        java.lang.String[] strArray63 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList64 = new java.util.ArrayList<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList64, strArray63);
        int int66 = strList64.size();
        boolean boolean67 = strSet58.containsAll((java.util.Collection<java.lang.String>) strList64);
        com.google.javascript.rhino.JSDocInfo jSDocInfo68 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet69 = jSDocInfo68.getParameterNames();
        boolean boolean71 = jSDocInfo68.hasParameter("hi!");
        boolean boolean72 = jSDocInfo68.hasThisType();
        java.util.Set<java.lang.String> strSet73 = jSDocInfo68.getModifies();
        com.google.javascript.rhino.JSDocInfo jSDocInfo74 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet75 = jSDocInfo74.getParameterNames();
        boolean boolean76 = strSet73.addAll((java.util.Collection<java.lang.String>) strSet75);
        strSet73.clear();
        boolean boolean78 = strList64.addAll((java.util.Collection<java.lang.String>) strSet73);
        node29.setDirectives(strSet73);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry80 = null;
        com.google.javascript.rhino.jstype.JSType jSType81 = assertionFunctionSpec2.getAssertedType(node29, jSTypeRegistry80);
        com.google.javascript.rhino.Node node82 = node29.removeFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.JSDocInfo jSDocInfo83 = node82.getJSDocInfo();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "NUMBER -1.0" + "'", str16, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "NUMBER -1.0" + "'", str32, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[hi!]");
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(strSet73);
        org.junit.Assert.assertNotNull(strSet75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType81);
        org.junit.Assert.assertNull(node82);
    }
}


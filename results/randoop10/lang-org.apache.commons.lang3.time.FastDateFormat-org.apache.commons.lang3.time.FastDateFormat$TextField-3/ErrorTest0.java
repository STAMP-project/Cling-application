import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class ErrorTest0 {

    public static boolean debug = false;

    @Test
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test001");
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        int int3 = calendar1.getActualMaximum(4);
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone5);
        java.util.TimeZone timeZone7 = fastDateFormat6.getTimeZone();
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone7);
        calendar1.setTimeZone(timeZone7);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\u534f\u8c03\u4e16\u754c\u65f6\u95f4", timeZone7);
        java.util.Locale.LanguageRange[] languageRangeArray11 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList12 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12, languageRangeArray11);
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.util.Locale locale15 = java.util.Locale.FRANCE;
        boolean boolean16 = locale15.hasExtensions();
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.util.Locale locale18 = java.util.Locale.CHINESE;
        java.lang.String str19 = locale18.getLanguage();
        java.util.Locale[] localeArray20 = new java.util.Locale[] { locale14, locale15, locale17, locale18 };
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.Locale.FilteringMode filteringMode23 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList24 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.util.Locale>) localeList21, filteringMode23);
        java.util.Spliterator<java.util.Locale> localeSpliterator25 = localeList24.spliterator();
        java.util.Locale.LanguageRange[] languageRangeArray26 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList27 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList27, languageRangeArray26);
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        java.util.Locale locale30 = java.util.Locale.FRANCE;
        boolean boolean31 = locale30.hasExtensions();
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.util.Locale locale33 = java.util.Locale.CHINESE;
        java.lang.String str34 = locale33.getLanguage();
        java.util.Locale[] localeArray35 = new java.util.Locale[] { locale29, locale30, locale32, locale33 };
        java.util.ArrayList<java.util.Locale> localeList36 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList36, localeArray35);
        java.util.Locale.FilteringMode filteringMode38 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList39 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, (java.util.Collection<java.util.Locale>) localeList36, filteringMode38);
        java.util.Spliterator<java.util.Locale> localeSpliterator40 = localeList39.spliterator();
        boolean boolean41 = localeList24.equals((java.lang.Object) localeSpliterator40);
        java.lang.Object[] objArray42 = localeList24.toArray();
        java.util.Locale.LanguageRange[] languageRangeArray43 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList44 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList44, languageRangeArray43);
        java.util.Locale locale46 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar47 = java.util.Calendar.getInstance(locale46);
        java.util.Locale locale48 = java.util.Locale.CHINESE;
        java.lang.String str49 = locale48.getLanguage();
        java.lang.String str51 = locale48.getExtension('a');
        java.util.Locale locale52 = java.util.Locale.CHINESE;
        java.lang.String str53 = locale52.getLanguage();
        boolean boolean54 = locale52.hasExtensions();
        java.lang.String str55 = locale52.getDisplayCountry();
        java.util.Locale locale56 = java.util.Locale.JAPANESE;
        java.util.Locale locale57 = java.util.Locale.JAPAN;
        java.util.Locale locale58 = java.util.Locale.JAPANESE;
        java.util.Locale locale62 = new java.util.Locale("", "hi!", "");
        java.util.Locale locale63 = java.util.Locale.FRANCE;
        boolean boolean64 = locale63.hasExtensions();
        java.util.Locale locale65 = java.util.Locale.CHINESE;
        java.lang.String str66 = locale65.getLanguage();
        java.util.Locale locale67 = java.util.Locale.CHINA;
        java.util.Locale locale68 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray69 = new java.util.Locale[] { locale46, locale48, locale52, locale56, locale57, locale58, locale62, locale63, locale65, locale67, locale68 };
        java.util.ArrayList<java.util.Locale> localeList70 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList70, localeArray69);
        java.util.Locale.LanguageRange[] languageRangeArray72 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList73 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList73, languageRangeArray72);
        java.util.Locale locale75 = java.util.Locale.GERMAN;
        java.util.Locale locale76 = java.util.Locale.FRANCE;
        boolean boolean77 = locale76.hasExtensions();
        java.util.Locale locale78 = java.util.Locale.FRANCE;
        java.util.Locale locale79 = java.util.Locale.CHINESE;
        java.lang.String str80 = locale79.getLanguage();
        java.util.Locale[] localeArray81 = new java.util.Locale[] { locale75, locale76, locale78, locale79 };
        java.util.ArrayList<java.util.Locale> localeList82 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList82, localeArray81);
        java.util.Locale.FilteringMode filteringMode84 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList85 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList73, (java.util.Collection<java.util.Locale>) localeList82, filteringMode84);
        java.util.List<java.util.Locale> localeList86 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList44, (java.util.Collection<java.util.Locale>) localeList70, filteringMode84);
        java.util.Locale locale87 = java.util.Locale.ITALIAN;
        java.util.Set<java.lang.String> strSet88 = locale87.getUnicodeLocaleAttributes();
        boolean boolean89 = localeList86.add(locale87);
        java.util.Set<java.lang.String> strSet90 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream91 = strSet90.parallelStream();
        boolean boolean92 = localeList86.removeAll((java.util.Collection<java.lang.String>) strSet90);
        boolean boolean93 = localeList24.remove((java.lang.Object) localeList86);
        java.util.Locale locale96 = new java.util.Locale("h:mm:ss a z", "21 Feb 2022 14:45:57 GMT");
        boolean boolean97 = localeList86.add(locale96);
        java.lang.String str98 = timeZone7.getDisplayName(locale96);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar1 and calendar47", (calendar1.compareTo(calendar47) == 0) == calendar1.equals(calendar47));
    }

    @Test
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test002");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        java.util.TimeZone timeZone4 = calendar3.getTimeZone();
        int int6 = timeZone4.getOffset((long) 'a');
        java.util.TimeZone.setDefault(timeZone4);
        java.util.Locale locale9 = new java.util.Locale("java.util.GregorianCalendar[time=1645454753591,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=53,MILLISECOND=591,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale10 = java.util.Locale.US;
        java.lang.String str12 = locale10.getExtension('a');
        java.util.Set<java.lang.Character> charSet13 = locale10.getExtensionKeys();
        java.lang.String str14 = locale10.getDisplayCountry();
        java.lang.String str15 = locale10.getDisplayVariant();
        java.util.Locale.setDefault(locale10);
        java.lang.String str17 = locale9.getDisplayVariant(locale10);
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone4, locale10);
        int int20 = timeZone4.getOffset((long) 9);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar18", (calendar3.compareTo(calendar18) == 0) == calendar3.equals(calendar18));
    }

    @Test
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test003");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        java.util.Locale locale4 = java.util.Locale.CHINA;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone0, locale4);
        timeZone0.setID("java.util.GregorianCalendar[time=1645454754087,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=54,MILLISECOND=87,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale9 = new java.util.Locale("java.util.GregorianCalendar[time=1645454753591,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=53,MILLISECOND=591,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale10 = java.util.Locale.US;
        java.lang.String str12 = locale10.getExtension('a');
        java.util.Set<java.lang.Character> charSet13 = locale10.getExtensionKeys();
        java.lang.String str14 = locale10.getDisplayCountry();
        java.lang.String str15 = locale10.getDisplayVariant();
        java.util.Locale.setDefault(locale10);
        java.lang.String str17 = locale9.getDisplayVariant(locale10);
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone0, locale10);
        java.util.Calendar.Builder builder19 = new java.util.Calendar.Builder();
        java.util.Calendar calendar20 = builder19.build();
        java.util.Calendar calendar21 = java.util.Calendar.getInstance();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone22.hasSameRules(timeZone23);
        boolean boolean25 = timeZone23.observesDaylightTime();
        calendar21.setTimeZone(timeZone23);
        java.time.ZoneId zoneId27 = timeZone23.toZoneId();
        java.util.Calendar.Builder builder28 = builder19.setTimeZone(timeZone23);
        boolean boolean29 = timeZone0.hasSameRules(timeZone23);
        java.util.TimeZone.setDefault(timeZone0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar18 and calendar21", (calendar18.compareTo(calendar21) == 0) == calendar18.equals(calendar21));
    }

    @Test
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test004");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.lang.String str8 = locale7.getLanguage();
        java.util.Locale[] localeArray9 = new java.util.Locale[] { locale3, locale4, locale6, locale7 };
        java.util.ArrayList<java.util.Locale> localeList10 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList10, localeArray9);
        java.util.Locale.FilteringMode filteringMode12 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList13 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList10, filteringMode12);
        localeList13.clear();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone16.hasSameRules(timeZone17);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone16);
        java.util.Locale locale20 = java.util.Locale.CHINA;
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone16, locale20);
        timeZone16.setID("java.util.GregorianCalendar[time=1645454754087,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=54,MILLISECOND=87,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale25 = new java.util.Locale("java.util.GregorianCalendar[time=1645454753591,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=53,MILLISECOND=591,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale26 = java.util.Locale.US;
        java.lang.String str28 = locale26.getExtension('a');
        java.util.Set<java.lang.Character> charSet29 = locale26.getExtensionKeys();
        java.lang.String str30 = locale26.getDisplayCountry();
        java.lang.String str31 = locale26.getDisplayVariant();
        java.util.Locale.setDefault(locale26);
        java.lang.String str33 = locale25.getDisplayVariant(locale26);
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone16, locale26);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat35 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone16);
        int int36 = localeList13.indexOf((java.lang.Object) timeZone16);
        timeZone16.setRawOffset(18);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar19 and calendar21", (calendar19.compareTo(calendar21) == 0) == calendar19.equals(calendar21));
    }

    @Test
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test005");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.util.TimeZone timeZone3 = fastDateFormat2.getTimeZone();
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone3);
        java.util.Locale locale5 = java.util.Locale.US;
        java.lang.String str7 = locale5.getExtension('a');
        java.util.Set<java.lang.Character> charSet8 = locale5.getExtensionKeys();
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone3, locale5);
        java.util.TimeZone timeZone10 = calendar9.getTimeZone();
        int int12 = timeZone10.getOffset(0L);
        timeZone10.setRawOffset(100);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar4 and calendar9", (calendar4.compareTo(calendar9) == 0) == calendar4.equals(calendar9));
    }

    @Test
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test006");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        java.util.TimeZone timeZone4 = calendar3.getTimeZone();
        java.util.TimeZone timeZone5 = calendar3.getTimeZone();
        boolean boolean6 = timeZone5.observesDaylightTime();
        java.util.Locale.Category category7 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale8 = java.util.Locale.getDefault(category7);
        java.util.Locale locale9 = java.util.Locale.CHINESE;
        java.lang.String str10 = locale9.getLanguage();
        boolean boolean11 = locale9.hasExtensions();
        java.lang.String str12 = locale9.getDisplayCountry();
        java.util.Locale.setDefault(category7, locale9);
        java.util.Set<java.lang.String> strSet14 = locale9.getUnicodeLocaleAttributes();
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone5, locale9);
        java.util.Date date22 = new java.util.Date(7, (int) (byte) 0, 122, (-1), (int) (byte) 100, (int) (byte) 1);
        int int23 = date22.getYear();
        boolean boolean24 = timeZone5.inDaylightTime(date22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar15", (calendar3.compareTo(calendar15) == 0) == calendar3.equals(calendar15));
    }

    @Test
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test007");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str4 = fastDateFormat2.format((long) '#');
        java.lang.String str6 = fastDateFormat2.format((long) 7);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone7.hasSameRules(timeZone8);
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone7);
        java.util.Locale locale11 = java.util.Locale.CHINA;
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone7, locale11);
        long long13 = calendar12.getTimeInMillis();
        java.lang.String str14 = fastDateFormat2.format(calendar12);
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone16);
        java.lang.String str18 = fastDateFormat17.toString();
        java.lang.String str19 = fastDateFormat17.getPattern();
        boolean boolean20 = fastDateFormat2.equals((java.lang.Object) fastDateFormat17);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar10 and calendar12", (calendar10.compareTo(calendar12) == 0) == calendar10.equals(calendar12));
    }

    @Test
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test008");
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        int int3 = calendar1.getActualMaximum(4);
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone5);
        java.util.TimeZone timeZone7 = fastDateFormat6.getTimeZone();
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone7);
        calendar1.setTimeZone(timeZone7);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\u534f\u8c03\u4e16\u754c\u65f6\u95f4", timeZone7);
        java.util.TimeZone.setDefault(timeZone7);
        java.util.Locale.Builder builder12 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder14 = builder12.setLanguage("");
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.lang.String str16 = locale15.getLanguage();
        boolean boolean17 = locale15.hasExtensions();
        java.lang.String str18 = locale15.getDisplayCountry();
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(locale15);
        java.util.Locale.Builder builder20 = builder14.setLocale(locale15);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone7, locale15);
        java.lang.String str22 = locale15.getVariant();
        java.lang.String str23 = locale15.getDisplayName();
        java.util.Locale locale25 = java.util.Locale.forLanguageTag("English");
        java.lang.String str26 = locale15.getDisplayScript(locale25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar1 and calendar19", (calendar1.compareTo(calendar19) == 0) == calendar1.equals(calendar19));
    }

    @Test
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test009");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        java.util.Locale locale4 = java.util.Locale.CHINA;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone0, locale4);
        timeZone0.setID("java.util.GregorianCalendar[time=1645454754087,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=54,MILLISECOND=87,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale9 = new java.util.Locale("java.util.GregorianCalendar[time=1645454753591,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=53,MILLISECOND=591,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale10 = java.util.Locale.US;
        java.lang.String str12 = locale10.getExtension('a');
        java.util.Set<java.lang.Character> charSet13 = locale10.getExtensionKeys();
        java.lang.String str14 = locale10.getDisplayCountry();
        java.lang.String str15 = locale10.getDisplayVariant();
        java.util.Locale.setDefault(locale10);
        java.lang.String str17 = locale9.getDisplayVariant(locale10);
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone0, locale10);
        java.lang.String str19 = timeZone0.getID();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar5", (calendar3.compareTo(calendar5) == 0) == calendar3.equals(calendar5));
    }

    @Test
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test010");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3);
        java.util.TimeZone timeZone7 = calendar6.getTimeZone();
        int int8 = calendar6.getFirstDayOfWeek();
        int int9 = calendar6.getFirstDayOfWeek();
        calendar6.setTimeInMillis((long) 100);
        calendar6.setFirstDayOfWeek(7);
        int int14 = calendar6.getMinimalDaysInFirstWeek();
        calendar6.set((int) '#', 17, (int) (byte) 10, (int) (short) 1, (int) (byte) 1);
        java.lang.StringBuffer stringBuffer21 = null;
        java.lang.StringBuffer stringBuffer22 = fastDateFormat2.format(calendar6, stringBuffer21);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance();
        int int25 = calendar23.getActualMaximum(4);
        java.util.TimeZone timeZone27 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone27);
        java.util.TimeZone timeZone29 = fastDateFormat28.getTimeZone();
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone29);
        calendar23.setTimeZone(timeZone29);
        int int32 = calendar23.getFirstDayOfWeek();
        int int34 = calendar23.getActualMaximum((int) (short) 1);
        java.lang.StringBuffer stringBuffer35 = null;
        java.lang.StringBuffer stringBuffer36 = fastDateFormat2.format(calendar23, stringBuffer35);
        java.lang.String str37 = fastDateFormat2.getPattern();
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone39 = java.util.TimeZone.getDefault();
        boolean boolean40 = timeZone38.hasSameRules(timeZone39);
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(timeZone38);
        java.time.Instant instant42 = calendar41.toInstant();
        int int43 = calendar41.getFirstDayOfWeek();
        boolean boolean45 = calendar41.after((java.lang.Object) 15);
        java.util.Date date46 = calendar41.getTime();
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        boolean boolean50 = timeZone48.hasSameRules(timeZone49);
        java.util.Calendar calendar51 = java.util.Calendar.getInstance(timeZone48);
        java.util.Locale.Category category52 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale53 = java.util.Locale.getDefault(category52);
        java.lang.String str54 = locale53.getISO3Language();
        java.lang.String str55 = locale53.getDisplayLanguage();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat56 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(3, timeZone48, locale53);
        calendar41.setTimeZone(timeZone48);
        calendar41.setFirstDayOfWeek(48);
        java.lang.StringBuffer stringBuffer60 = null;
        java.lang.StringBuffer stringBuffer61 = fastDateFormat2.format(calendar41, stringBuffer60);
        java.util.Locale locale62 = fastDateFormat2.getLocale();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar30 and calendar41", (calendar30.compareTo(calendar41) == 0) == calendar30.equals(calendar41));
    }

    @Test
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test011");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("zh");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap2 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList3 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap2);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap4 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList5 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap4);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap6 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList7 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap6);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap8 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap8);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        boolean boolean12 = timeZone10.hasSameRules(timeZone11);
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone10);
        java.util.TimeZone timeZone14 = calendar13.getTimeZone();
        java.util.TimeZone timeZone15 = calendar13.getTimeZone();
        int int17 = calendar13.getMinimum(13);
        java.util.Locale.LanguageRange[] languageRangeArray18 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList19 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19, languageRangeArray18);
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        boolean boolean23 = locale22.hasExtensions();
        java.util.Locale locale24 = java.util.Locale.FRANCE;
        java.util.Locale locale25 = java.util.Locale.CHINESE;
        java.lang.String str26 = locale25.getLanguage();
        java.util.Locale[] localeArray27 = new java.util.Locale[] { locale21, locale22, locale24, locale25 };
        java.util.ArrayList<java.util.Locale> localeList28 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList28, localeArray27);
        java.util.Locale.FilteringMode filteringMode30 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList31 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.util.Locale>) localeList28, filteringMode30);
        boolean boolean32 = calendar13.after((java.lang.Object) localeList28);
        java.lang.Object obj33 = null;
        boolean boolean34 = localeList28.equals(obj33);
        java.util.ListIterator<java.util.Locale> localeItor35 = localeList28.listIterator();
        java.util.Locale locale36 = java.util.Locale.lookup(languageRangeList1, (java.util.Collection<java.util.Locale>) localeList28);
        java.util.Locale locale38 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(locale38);
        int int41 = calendar39.getMinimum(13);
        java.util.Calendar.Builder builder42 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone43 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        boolean boolean45 = timeZone43.hasSameRules(timeZone44);
        java.util.Calendar.Builder builder46 = builder42.setTimeZone(timeZone43);
        calendar39.setTimeZone(timeZone43);
        java.util.Locale.Category category48 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale49 = java.util.Locale.getDefault(category48);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat50 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone43, locale49);
        java.util.Set<java.lang.String> strSet51 = locale49.getUnicodeLocaleKeys();
        boolean boolean52 = localeList28.removeAll((java.util.Collection<java.lang.String>) strSet51);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar13 and calendar39", (calendar13.compareTo(calendar39) == 0) == calendar13.equals(calendar39));
    }

    @Test
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test012");
        java.text.Format.Field field0 = null;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition(field0);
        int int2 = fieldPosition1.getBeginIndex();
        boolean boolean4 = fieldPosition1.equals((java.lang.Object) 52);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList6 = java.util.Locale.LanguageRange.parse("zh");
        java.util.Set<java.lang.String> strSet7 = java.util.Calendar.getAvailableCalendarTypes();
        java.lang.String str8 = java.util.Locale.lookupTag(languageRangeList6, (java.util.Collection<java.lang.String>) strSet7);
        java.util.Locale.LanguageRange[] languageRangeArray9 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList10 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10, languageRangeArray9);
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.util.Locale locale13 = java.util.Locale.FRANCE;
        boolean boolean14 = locale13.hasExtensions();
        java.util.Locale locale15 = java.util.Locale.FRANCE;
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.lang.String str17 = locale16.getLanguage();
        java.util.Locale[] localeArray18 = new java.util.Locale[] { locale12, locale13, locale15, locale16 };
        java.util.ArrayList<java.util.Locale> localeList19 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList19, localeArray18);
        java.util.Locale.FilteringMode filteringMode21 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList22 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.util.Locale>) localeList19, filteringMode21);
        java.util.Spliterator<java.util.Locale> localeSpliterator23 = localeList22.spliterator();
        java.util.List<java.util.Locale> localeList24 = java.util.Locale.filter(languageRangeList6, (java.util.Collection<java.util.Locale>) localeList22);
        boolean boolean25 = fieldPosition1.equals((java.lang.Object) languageRangeList6);
        java.lang.String str26 = fieldPosition1.toString();
        fieldPosition1.setEndIndex((int) '#');
        java.text.Format.Field field29 = fieldPosition1.getFieldAttribute();
        java.lang.String str30 = fieldPosition1.toString();
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        boolean boolean33 = timeZone31.hasSameRules(timeZone32);
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone31);
        java.util.Locale locale35 = java.util.Locale.CHINA;
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(timeZone31, locale35);
        timeZone31.setID("java.util.GregorianCalendar[time=1645454754087,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=54,MILLISECOND=87,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale40 = new java.util.Locale("java.util.GregorianCalendar[time=1645454753591,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=53,MILLISECOND=591,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale41 = java.util.Locale.US;
        java.lang.String str43 = locale41.getExtension('a');
        java.util.Set<java.lang.Character> charSet44 = locale41.getExtensionKeys();
        java.lang.String str45 = locale41.getDisplayCountry();
        java.lang.String str46 = locale41.getDisplayVariant();
        java.util.Locale.setDefault(locale41);
        java.lang.String str48 = locale40.getDisplayVariant(locale41);
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(timeZone31, locale41);
        java.util.Set<java.lang.Character> charSet50 = locale41.getExtensionKeys();
        boolean boolean51 = fieldPosition1.equals((java.lang.Object) charSet50);
        java.lang.String str52 = fieldPosition1.toString();
        int int53 = fieldPosition1.getEndIndex();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar34 and calendar36", (calendar34.compareTo(calendar36) == 0) == calendar34.equals(calendar36));
    }

    @Test
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test013");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone1);
        java.util.Locale.Category category5 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale6 = java.util.Locale.getDefault(category5);
        java.lang.String str7 = locale6.getISO3Language();
        java.lang.String str8 = locale6.getDisplayLanguage();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(3, timeZone1, locale6);
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone1);
        timeZone1.setRawOffset(1969);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        boolean boolean17 = timeZone15.hasSameRules(timeZone16);
        boolean boolean18 = timeZone14.hasSameRules(timeZone15);
        int int19 = timeZone14.getRawOffset();
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone14);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone14);
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone22.hasSameRules(timeZone23);
        boolean boolean25 = timeZone14.hasSameRules(timeZone22);
        boolean boolean26 = timeZone1.hasSameRules(timeZone14);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar4 and calendar20", (calendar4.compareTo(calendar20) == 0) == calendar4.equals(calendar20));
    }

    @Test
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test014");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Calendar.Builder builder4 = builder0.setTimeZone(timeZone1);
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str6 = locale5.getLanguage();
        java.lang.String str7 = locale5.getDisplayScript();
        java.util.Calendar.Builder builder8 = builder4.setLocale(locale5);
        java.util.Calendar calendar9 = builder8.build();
        java.util.Calendar.Builder builder11 = builder8.setLenient(true);
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone12.hasSameRules(timeZone13);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone12);
        java.util.TimeZone timeZone16 = calendar15.getTimeZone();
        java.util.TimeZone timeZone17 = calendar15.getTimeZone();
        boolean boolean18 = calendar15.isWeekDateSupported();
        int int20 = calendar15.getLeastMaximum(10);
        int int21 = calendar15.getWeekYear();
        java.lang.String str22 = calendar15.getCalendarType();
        calendar15.setTimeInMillis((long) (short) -1);
        java.util.TimeZone timeZone25 = calendar15.getTimeZone();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance();
        int int28 = calendar26.getActualMaximum(4);
        java.util.TimeZone timeZone30 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone30);
        java.util.TimeZone timeZone32 = fastDateFormat31.getTimeZone();
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone32);
        calendar26.setTimeZone(timeZone32);
        timeZone32.setID("21 Feb 2022 14:45:52 GMT");
        boolean boolean37 = timeZone25.hasSameRules(timeZone32);
        java.util.Calendar.Builder builder38 = builder11.setTimeZone(timeZone32);
        java.util.Locale locale39 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(locale39);
        java.lang.String str41 = locale39.getVariant();
        java.lang.String str42 = locale39.getDisplayName();
        java.lang.String str43 = locale39.getISO3Country();
        java.lang.String str44 = locale39.getDisplayName();
        java.util.Calendar.Builder builder45 = builder11.setLocale(locale39);
        java.util.Calendar.Builder builder49 = builder45.setWeekDate((int) 'u', 100, 0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar26 and calendar40", (calendar26.compareTo(calendar40) == 0) == calendar26.equals(calendar40));
    }

    @Test
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test015");
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition(50);
        fieldPosition1.setBeginIndex((int) (short) 1);
        java.text.Format.Field field4 = null;
        java.text.FieldPosition fieldPosition5 = new java.text.FieldPosition(field4);
        int int6 = fieldPosition5.getBeginIndex();
        boolean boolean8 = fieldPosition5.equals((java.lang.Object) 52);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList10 = java.util.Locale.LanguageRange.parse("zh");
        java.util.Set<java.lang.String> strSet11 = java.util.Calendar.getAvailableCalendarTypes();
        java.lang.String str12 = java.util.Locale.lookupTag(languageRangeList10, (java.util.Collection<java.lang.String>) strSet11);
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        boolean boolean18 = locale17.hasExtensions();
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.util.Locale locale20 = java.util.Locale.CHINESE;
        java.lang.String str21 = locale20.getLanguage();
        java.util.Locale[] localeArray22 = new java.util.Locale[] { locale16, locale17, locale19, locale20 };
        java.util.ArrayList<java.util.Locale> localeList23 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList23, localeArray22);
        java.util.Locale.FilteringMode filteringMode25 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList26 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.util.Locale>) localeList23, filteringMode25);
        java.util.Spliterator<java.util.Locale> localeSpliterator27 = localeList26.spliterator();
        java.util.List<java.util.Locale> localeList28 = java.util.Locale.filter(languageRangeList10, (java.util.Collection<java.util.Locale>) localeList26);
        boolean boolean29 = fieldPosition5.equals((java.lang.Object) languageRangeList10);
        java.lang.String str30 = fieldPosition5.toString();
        fieldPosition5.setEndIndex((int) '#');
        java.text.Format.Field field33 = fieldPosition5.getFieldAttribute();
        java.lang.String str34 = fieldPosition5.toString();
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        boolean boolean37 = timeZone35.hasSameRules(timeZone36);
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(timeZone35);
        java.util.Locale locale39 = java.util.Locale.CHINA;
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(timeZone35, locale39);
        timeZone35.setID("java.util.GregorianCalendar[time=1645454754087,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=54,MILLISECOND=87,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale44 = new java.util.Locale("java.util.GregorianCalendar[time=1645454753591,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=53,MILLISECOND=591,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale45 = java.util.Locale.US;
        java.lang.String str47 = locale45.getExtension('a');
        java.util.Set<java.lang.Character> charSet48 = locale45.getExtensionKeys();
        java.lang.String str49 = locale45.getDisplayCountry();
        java.lang.String str50 = locale45.getDisplayVariant();
        java.util.Locale.setDefault(locale45);
        java.lang.String str52 = locale44.getDisplayVariant(locale45);
        java.util.Calendar calendar53 = java.util.Calendar.getInstance(timeZone35, locale45);
        java.util.Set<java.lang.Character> charSet54 = locale45.getExtensionKeys();
        boolean boolean55 = fieldPosition5.equals((java.lang.Object) charSet54);
        java.lang.String str56 = fieldPosition5.toString();
        boolean boolean57 = fieldPosition1.equals((java.lang.Object) str56);
        java.util.Locale.LanguageRange[] languageRangeArray58 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList59 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList59, languageRangeArray58);
        java.util.Locale.LanguageRange[] languageRangeArray61 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList62 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList62, languageRangeArray61);
        java.util.Locale locale64 = java.util.Locale.GERMAN;
        java.util.Locale locale65 = java.util.Locale.FRANCE;
        boolean boolean66 = locale65.hasExtensions();
        java.util.Locale locale67 = java.util.Locale.FRANCE;
        java.util.Locale locale68 = java.util.Locale.CHINESE;
        java.lang.String str69 = locale68.getLanguage();
        java.util.Locale[] localeArray70 = new java.util.Locale[] { locale64, locale65, locale67, locale68 };
        java.util.ArrayList<java.util.Locale> localeList71 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList71, localeArray70);
        java.util.Locale.FilteringMode filteringMode73 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList74 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList62, (java.util.Collection<java.util.Locale>) localeList71, filteringMode73);
        int int76 = localeList74.lastIndexOf((java.lang.Object) 11);
        java.util.Locale locale77 = java.util.Locale.CHINESE;
        java.lang.String str78 = locale77.getLanguage();
        boolean boolean79 = locale77.hasExtensions();
        java.lang.String str80 = locale77.getDisplayCountry();
        java.util.Set<java.lang.String> strSet81 = locale77.getUnicodeLocaleKeys();
        boolean boolean82 = localeList74.containsAll((java.util.Collection<java.lang.String>) strSet81);
        java.util.Locale.FilteringMode filteringMode83 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList84 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList59, (java.util.Collection<java.util.Locale>) localeList74, filteringMode83);
        java.util.Spliterator<java.util.Locale> localeSpliterator85 = localeList84.spliterator();
        boolean boolean86 = fieldPosition1.equals((java.lang.Object) localeList84);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar38 and calendar40", (calendar38.compareTo(calendar40) == 0) == calendar38.equals(calendar40));
    }

    @Test
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test016");
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        int int3 = calendar1.getActualMaximum(4);
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone5);
        java.util.TimeZone timeZone7 = fastDateFormat6.getTimeZone();
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone7);
        calendar1.setTimeZone(timeZone7);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\u534f\u8c03\u4e16\u754c\u65f6\u95f4", timeZone7);
        java.util.TimeZone.setDefault(timeZone7);
        java.util.Locale.Builder builder12 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder14 = builder12.setLanguage("");
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.lang.String str16 = locale15.getLanguage();
        boolean boolean17 = locale15.hasExtensions();
        java.lang.String str18 = locale15.getDisplayCountry();
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(locale15);
        java.util.Locale.Builder builder20 = builder14.setLocale(locale15);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone7, locale15);
        timeZone7.setID("Nov 5, 1900 4:35:00 AM");
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar1 and calendar19", (calendar1.compareTo(calendar19) == 0) == calendar1.equals(calendar19));
    }

    @Test
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test017");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        java.util.TimeZone timeZone4 = calendar3.getTimeZone();
        int int5 = calendar3.getFirstDayOfWeek();
        int int6 = calendar3.getFirstDayOfWeek();
        calendar3.setTimeInMillis((long) 100);
        calendar3.setFirstDayOfWeek(7);
        int int11 = calendar3.getMinimalDaysInFirstWeek();
        int int13 = calendar3.getActualMaximum((int) (short) 10);
        java.lang.String str14 = calendar3.getCalendarType();
        java.util.Calendar calendar15 = java.util.Calendar.getInstance();
        java.util.Date date16 = calendar15.getTime();
        calendar3.setTime(date16);
        date16.setMinutes(18);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar15", (calendar3.compareTo(calendar15) == 0) == calendar3.equals(calendar15));
    }

    @Test
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test018");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Calendar.Builder builder4 = builder0.setTimeZone(timeZone1);
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str6 = locale5.getLanguage();
        java.lang.String str7 = locale5.getDisplayScript();
        java.util.Calendar.Builder builder8 = builder4.setLocale(locale5);
        java.util.Calendar calendar9 = builder8.build();
        java.util.Calendar.Builder builder11 = builder8.setLenient(true);
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone12.hasSameRules(timeZone13);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone12);
        java.util.TimeZone timeZone16 = calendar15.getTimeZone();
        java.util.TimeZone timeZone17 = calendar15.getTimeZone();
        boolean boolean18 = calendar15.isWeekDateSupported();
        int int20 = calendar15.getLeastMaximum(10);
        int int21 = calendar15.getWeekYear();
        java.lang.String str22 = calendar15.getCalendarType();
        calendar15.setTimeInMillis((long) (short) -1);
        java.util.TimeZone timeZone25 = calendar15.getTimeZone();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance();
        int int28 = calendar26.getActualMaximum(4);
        java.util.TimeZone timeZone30 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone30);
        java.util.TimeZone timeZone32 = fastDateFormat31.getTimeZone();
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone32);
        calendar26.setTimeZone(timeZone32);
        timeZone32.setID("21 Feb 2022 14:45:52 GMT");
        boolean boolean37 = timeZone25.hasSameRules(timeZone32);
        java.util.Calendar.Builder builder38 = builder11.setTimeZone(timeZone32);
        java.util.Locale locale39 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(locale39);
        java.lang.String str41 = locale39.getVariant();
        java.lang.String str42 = locale39.getDisplayName();
        java.lang.String str43 = locale39.getISO3Country();
        java.lang.String str44 = locale39.getDisplayName();
        java.util.Calendar.Builder builder45 = builder11.setLocale(locale39);
        java.util.Locale locale46 = java.util.Locale.CHINESE;
        java.lang.String str47 = locale46.getLanguage();
        boolean boolean48 = locale46.hasExtensions();
        java.lang.String str49 = locale46.getDisplayCountry();
        java.util.Set<java.lang.String> strSet50 = locale46.getUnicodeLocaleKeys();
        java.lang.String str51 = locale46.getDisplayCountry();
        java.lang.String str52 = locale46.getDisplayScript();
        java.lang.String str53 = locale46.getVariant();
        java.lang.String str54 = locale39.getDisplayCountry(locale46);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar33 and calendar40", (calendar33.compareTo(calendar40) == 0) == calendar33.equals(calendar40));
    }

    @Test
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test019");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone1);
        java.util.Locale.Category category5 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale6 = java.util.Locale.getDefault(category5);
        java.lang.String str7 = locale6.getISO3Language();
        java.lang.String str8 = locale6.getDisplayLanguage();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(3, timeZone1, locale6);
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone1);
        timeZone1.setRawOffset(1969);
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone13.hasSameRules(timeZone14);
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.lang.String str17 = locale16.getLanguage();
        java.lang.String str18 = locale16.getDisplayScript();
        java.lang.String str19 = locale16.getDisplayScript();
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone14, locale16);
        boolean boolean21 = timeZone1.hasSameRules(timeZone14);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar4 and calendar20", (calendar4.compareTo(calendar20) == 0) == calendar4.equals(calendar20));
    }

    @Test
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test020");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        long long2 = calendar1.getTimeInMillis();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3);
        java.util.TimeZone timeZone7 = calendar6.getTimeZone();
        java.util.TimeZone timeZone8 = calendar6.getTimeZone();
        boolean boolean9 = calendar6.isWeekDateSupported();
        int int11 = calendar6.getLeastMaximum(10);
        int int12 = calendar6.getWeekYear();
        java.lang.String str13 = calendar6.getCalendarType();
        calendar6.setTimeInMillis((long) (short) -1);
        java.util.TimeZone timeZone16 = calendar6.getTimeZone();
        java.util.Calendar calendar17 = java.util.Calendar.getInstance();
        int int19 = calendar17.getActualMaximum(4);
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone21);
        java.util.TimeZone timeZone23 = fastDateFormat22.getTimeZone();
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone23);
        calendar17.setTimeZone(timeZone23);
        timeZone23.setID("21 Feb 2022 14:45:52 GMT");
        boolean boolean28 = timeZone16.hasSameRules(timeZone23);
        calendar1.setTimeZone(timeZone16);
        int int30 = timeZone16.getDSTSavings();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar1 and calendar17", (calendar1.compareTo(calendar17) == 0) == calendar1.equals(calendar17));
    }

    @Test
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test021");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Calendar.Builder builder4 = builder0.setTimeZone(timeZone1);
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str6 = locale5.getLanguage();
        java.lang.String str7 = locale5.getDisplayScript();
        java.util.Calendar.Builder builder8 = builder4.setLocale(locale5);
        java.util.Calendar calendar9 = builder8.build();
        java.util.Calendar.Builder builder11 = builder8.setLenient(true);
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone12.hasSameRules(timeZone13);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone12);
        java.util.TimeZone timeZone16 = calendar15.getTimeZone();
        java.util.TimeZone timeZone17 = calendar15.getTimeZone();
        boolean boolean18 = calendar15.isWeekDateSupported();
        int int20 = calendar15.getLeastMaximum(10);
        int int21 = calendar15.getWeekYear();
        java.lang.String str22 = calendar15.getCalendarType();
        calendar15.setTimeInMillis((long) (short) -1);
        java.util.TimeZone timeZone25 = calendar15.getTimeZone();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance();
        int int28 = calendar26.getActualMaximum(4);
        java.util.TimeZone timeZone30 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone30);
        java.util.TimeZone timeZone32 = fastDateFormat31.getTimeZone();
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone32);
        calendar26.setTimeZone(timeZone32);
        timeZone32.setID("21 Feb 2022 14:45:52 GMT");
        boolean boolean37 = timeZone25.hasSameRules(timeZone32);
        java.util.Calendar.Builder builder38 = builder11.setTimeZone(timeZone32);
        java.util.Locale locale39 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(locale39);
        java.lang.String str41 = locale39.getVariant();
        java.lang.String str42 = locale39.getDisplayName();
        java.lang.String str43 = locale39.getISO3Country();
        java.lang.String str44 = locale39.getDisplayName();
        java.util.Calendar.Builder builder45 = builder11.setLocale(locale39);
        java.util.TimeZone timeZone47 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        boolean boolean49 = timeZone47.hasSameRules(timeZone48);
        java.util.Calendar calendar50 = java.util.Calendar.getInstance(timeZone47);
        java.util.Locale locale51 = java.util.Locale.CHINA;
        java.util.Calendar calendar52 = java.util.Calendar.getInstance(timeZone47, locale51);
        timeZone47.setID("java.util.GregorianCalendar[time=1645454754087,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=54,MILLISECOND=87,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale56 = new java.util.Locale("java.util.GregorianCalendar[time=1645454753591,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=53,MILLISECOND=591,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale57 = java.util.Locale.US;
        java.lang.String str59 = locale57.getExtension('a');
        java.util.Set<java.lang.Character> charSet60 = locale57.getExtensionKeys();
        java.lang.String str61 = locale57.getDisplayCountry();
        java.lang.String str62 = locale57.getDisplayVariant();
        java.util.Locale.setDefault(locale57);
        java.lang.String str64 = locale56.getDisplayVariant(locale57);
        java.util.Calendar calendar65 = java.util.Calendar.getInstance(timeZone47, locale57);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat66 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone47);
        java.util.Locale locale67 = fastDateFormat66.getLocale();
        java.util.Calendar.Builder builder68 = builder11.setLocale(locale67);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar26 and calendar40", (calendar26.compareTo(calendar40) == 0) == calendar26.equals(calendar40));
    }

    @Test
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test022");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        java.util.TimeZone timeZone4 = calendar3.getTimeZone();
        java.util.TimeZone timeZone5 = calendar3.getTimeZone();
        boolean boolean6 = calendar3.isWeekDateSupported();
        int int8 = calendar3.getLeastMaximum(10);
        int int9 = calendar3.getWeekYear();
        java.util.TimeZone timeZone11 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone11);
        java.lang.String str13 = fastDateFormat12.getPattern();
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.text.ParsePosition parsePosition21 = new java.text.ParsePosition(16);
        parsePosition21.setIndex(11);
        java.lang.Object obj24 = fastDateFormat17.parseObject("hi!", parsePosition21);
        java.text.ParsePosition parsePosition27 = new java.text.ParsePosition(16);
        java.lang.Object obj28 = fastDateFormat17.parseObject("hi!", parsePosition27);
        java.lang.Object obj29 = fastDateFormat12.parseObject("hi!", parsePosition27);
        boolean boolean30 = calendar3.after(obj29);
        java.util.Date date31 = new java.util.Date();
        java.lang.String str32 = date31.toGMTString();
        int int33 = date31.getYear();
        int int34 = date31.getMonth();
        long long35 = date31.getTime();
        calendar3.setTime(date31);
        java.util.Date date37 = calendar3.getTime();
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone39 = java.util.TimeZone.getDefault();
        boolean boolean40 = timeZone38.hasSameRules(timeZone39);
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(timeZone38);
        java.util.TimeZone timeZone42 = calendar41.getTimeZone();
        int int44 = timeZone42.getOffset((long) 'a');
        java.util.TimeZone.setDefault(timeZone42);
        java.util.Locale locale47 = new java.util.Locale("java.util.GregorianCalendar[time=1645454753591,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=53,MILLISECOND=591,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale48 = java.util.Locale.US;
        java.lang.String str50 = locale48.getExtension('a');
        java.util.Set<java.lang.Character> charSet51 = locale48.getExtensionKeys();
        java.lang.String str52 = locale48.getDisplayCountry();
        java.lang.String str53 = locale48.getDisplayVariant();
        java.util.Locale.setDefault(locale48);
        java.lang.String str55 = locale47.getDisplayVariant(locale48);
        java.util.Calendar calendar56 = java.util.Calendar.getInstance(timeZone42, locale48);
        calendar3.setTimeZone(timeZone42);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar41 and calendar56", (calendar41.compareTo(calendar56) == 0) == calendar41.equals(calendar56));
    }

    @Test
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test023");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Calendar.Builder builder4 = builder0.setTimeZone(timeZone1);
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str6 = locale5.getLanguage();
        java.lang.String str7 = locale5.getDisplayScript();
        java.util.Calendar.Builder builder8 = builder4.setLocale(locale5);
        java.util.Calendar calendar9 = builder8.build();
        java.util.Calendar.Builder builder11 = builder8.setLenient(true);
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone12.hasSameRules(timeZone13);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone12);
        java.util.TimeZone timeZone16 = calendar15.getTimeZone();
        java.util.TimeZone timeZone17 = calendar15.getTimeZone();
        boolean boolean18 = calendar15.isWeekDateSupported();
        int int20 = calendar15.getLeastMaximum(10);
        int int21 = calendar15.getWeekYear();
        java.lang.String str22 = calendar15.getCalendarType();
        calendar15.setTimeInMillis((long) (short) -1);
        java.util.TimeZone timeZone25 = calendar15.getTimeZone();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance();
        int int28 = calendar26.getActualMaximum(4);
        java.util.TimeZone timeZone30 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone30);
        java.util.TimeZone timeZone32 = fastDateFormat31.getTimeZone();
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone32);
        calendar26.setTimeZone(timeZone32);
        timeZone32.setID("21 Feb 2022 14:45:52 GMT");
        boolean boolean37 = timeZone25.hasSameRules(timeZone32);
        java.util.Calendar.Builder builder38 = builder11.setTimeZone(timeZone32);
        java.util.Locale locale39 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(locale39);
        java.lang.String str41 = locale39.getVariant();
        java.lang.String str42 = locale39.getDisplayName();
        java.lang.String str43 = locale39.getISO3Country();
        java.lang.String str44 = locale39.getDisplayName();
        java.util.Calendar.Builder builder45 = builder11.setLocale(locale39);
        java.util.Locale locale47 = java.util.Locale.CHINESE;
        java.lang.String str48 = locale47.getLanguage();
        java.lang.String str49 = locale47.getDisplayScript();
        java.util.Set<java.lang.Character> charSet50 = locale47.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet51 = locale47.getExtensionKeys();
        java.util.Locale locale52 = locale47.stripExtensions();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat53 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, locale47);
        java.util.Calendar.Builder builder54 = builder11.setLocale(locale47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar26 and calendar40", (calendar26.compareTo(calendar40) == 0) == calendar26.equals(calendar40));
    }

    @Test
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test024");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        java.util.Locale locale4 = java.util.Locale.CHINA;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone0, locale4);
        int int7 = calendar5.getLeastMaximum((int) (byte) 0);
        java.util.TimeZone timeZone8 = calendar5.getTimeZone();
        java.util.TimeZone timeZone10 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone10);
        java.util.Locale locale12 = fastDateFormat11.getLocale();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(locale12);
        java.lang.String str14 = locale12.getDisplayName();
        java.lang.String str15 = locale12.getDisplayScript();
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.lang.String str17 = locale16.getLanguage();
        boolean boolean18 = locale16.hasExtensions();
        java.lang.String str19 = locale16.getDisplayCountry();
        java.lang.String str20 = locale16.getDisplayLanguage();
        java.lang.String str21 = locale16.getLanguage();
        java.lang.String str22 = locale16.getVariant();
        java.util.Locale.setDefault(locale16);
        java.lang.String str24 = locale12.getDisplayName(locale16);
        java.lang.String str25 = locale16.getVariant();
        java.lang.String str26 = timeZone8.getDisplayName(locale16);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar5", (calendar3.compareTo(calendar5) == 0) == calendar3.equals(calendar5));
    }

    @Test
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test025");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Calendar.Builder builder4 = builder0.setTimeZone(timeZone1);
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str6 = locale5.getLanguage();
        java.lang.String str7 = locale5.getDisplayScript();
        java.util.Calendar.Builder builder8 = builder4.setLocale(locale5);
        java.util.Calendar calendar9 = builder8.build();
        java.util.Calendar.Builder builder11 = builder8.setLenient(true);
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone12.hasSameRules(timeZone13);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone12);
        java.util.TimeZone timeZone16 = calendar15.getTimeZone();
        java.util.TimeZone timeZone17 = calendar15.getTimeZone();
        boolean boolean18 = calendar15.isWeekDateSupported();
        int int20 = calendar15.getLeastMaximum(10);
        int int21 = calendar15.getWeekYear();
        java.lang.String str22 = calendar15.getCalendarType();
        calendar15.setTimeInMillis((long) (short) -1);
        java.util.TimeZone timeZone25 = calendar15.getTimeZone();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance();
        int int28 = calendar26.getActualMaximum(4);
        java.util.TimeZone timeZone30 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone30);
        java.util.TimeZone timeZone32 = fastDateFormat31.getTimeZone();
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone32);
        calendar26.setTimeZone(timeZone32);
        timeZone32.setID("21 Feb 2022 14:45:52 GMT");
        boolean boolean37 = timeZone25.hasSameRules(timeZone32);
        java.util.Calendar.Builder builder38 = builder11.setTimeZone(timeZone32);
        java.util.Locale locale39 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(locale39);
        java.lang.String str41 = locale39.getVariant();
        java.lang.String str42 = locale39.getDisplayName();
        java.lang.String str43 = locale39.getISO3Country();
        java.lang.String str44 = locale39.getDisplayName();
        java.util.Calendar.Builder builder45 = builder11.setLocale(locale39);
        java.util.Calendar.Builder builder47 = builder45.setLenient(true);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar26 and calendar40", (calendar26.compareTo(calendar40) == 0) == calendar26.equals(calendar40));
    }

    @Test
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test026");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        java.util.TimeZone timeZone4 = calendar3.getTimeZone();
        timeZone4.setID("21 Feb 2022 14:45:49 GMT");
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone4, locale7);
        int int9 = timeZone4.getRawOffset();
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        boolean boolean15 = locale14.hasExtensions();
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.lang.String str18 = locale17.getLanguage();
        java.util.Locale[] localeArray19 = new java.util.Locale[] { locale13, locale14, locale16, locale17 };
        java.util.ArrayList<java.util.Locale> localeList20 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList20, localeArray19);
        java.util.Locale.FilteringMode filteringMode22 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList23 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList20, filteringMode22);
        int int25 = localeList23.lastIndexOf((java.lang.Object) 11);
        java.util.Locale locale26 = java.util.Locale.CHINESE;
        java.lang.String str27 = locale26.getLanguage();
        boolean boolean28 = locale26.hasExtensions();
        java.lang.String str29 = locale26.getDisplayCountry();
        java.util.Set<java.lang.String> strSet30 = locale26.getUnicodeLocaleKeys();
        boolean boolean31 = localeList23.containsAll((java.util.Collection<java.lang.String>) strSet30);
        java.util.ListIterator<java.util.Locale> localeItor32 = localeList23.listIterator();
        boolean boolean33 = localeList23.isEmpty();
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        boolean boolean36 = timeZone34.hasSameRules(timeZone35);
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(timeZone34);
        java.util.Locale locale38 = java.util.Locale.CHINA;
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(timeZone34, locale38);
        timeZone34.setID("java.util.GregorianCalendar[time=1645454754087,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=54,MILLISECOND=87,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale43 = new java.util.Locale("java.util.GregorianCalendar[time=1645454753591,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=53,MILLISECOND=591,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale44 = java.util.Locale.US;
        java.lang.String str46 = locale44.getExtension('a');
        java.util.Set<java.lang.Character> charSet47 = locale44.getExtensionKeys();
        java.lang.String str48 = locale44.getDisplayCountry();
        java.lang.String str49 = locale44.getDisplayVariant();
        java.util.Locale.setDefault(locale44);
        java.lang.String str51 = locale43.getDisplayVariant(locale44);
        java.util.Calendar calendar52 = java.util.Calendar.getInstance(timeZone34, locale44);
        boolean boolean53 = localeList23.add(locale44);
        java.util.Calendar calendar54 = java.util.Calendar.getInstance(timeZone4, locale44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar37", (calendar3.compareTo(calendar37) == 0) == calendar3.equals(calendar37));
    }

    @Test
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test027");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        java.util.Locale locale4 = java.util.Locale.CHINA;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone0, locale4);
        timeZone0.setID("java.util.GregorianCalendar[time=1645454754087,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=54,MILLISECOND=87,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale9 = new java.util.Locale("java.util.GregorianCalendar[time=1645454753591,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=53,MILLISECOND=591,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale10 = java.util.Locale.US;
        java.lang.String str12 = locale10.getExtension('a');
        java.util.Set<java.lang.Character> charSet13 = locale10.getExtensionKeys();
        java.lang.String str14 = locale10.getDisplayCountry();
        java.lang.String str15 = locale10.getDisplayVariant();
        java.util.Locale.setDefault(locale10);
        java.lang.String str17 = locale9.getDisplayVariant(locale10);
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone0, locale10);
        java.util.Calendar.Builder builder19 = new java.util.Calendar.Builder();
        java.util.Calendar calendar20 = builder19.build();
        java.util.Calendar calendar21 = java.util.Calendar.getInstance();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone22.hasSameRules(timeZone23);
        boolean boolean25 = timeZone23.observesDaylightTime();
        calendar21.setTimeZone(timeZone23);
        java.time.ZoneId zoneId27 = timeZone23.toZoneId();
        java.util.Calendar.Builder builder28 = builder19.setTimeZone(timeZone23);
        boolean boolean29 = timeZone0.hasSameRules(timeZone23);
        int int30 = timeZone0.getRawOffset();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar21", (calendar3.compareTo(calendar21) == 0) == calendar3.equals(calendar21));
    }

    @Test
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test028");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("it-IT");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] { languageRange1 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList6 = java.util.Locale.LanguageRange.parse("zh");
        java.util.Set<java.lang.String> strSet7 = java.util.Calendar.getAvailableCalendarTypes();
        java.lang.String str8 = java.util.Locale.lookupTag(languageRangeList6, (java.util.Collection<java.lang.String>) strSet7);
        java.util.stream.Stream<java.lang.String> strStream9 = strSet7.stream();
        java.util.Locale.FilteringMode filteringMode10 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList11 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strSet7, filteringMode10);
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleAttributes();
        java.util.Locale.FilteringMode filteringMode14 = null;
        java.util.List<java.lang.String> strList15 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strSet13, filteringMode14);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap17 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList18 = java.util.Locale.LanguageRange.parse("zh-TW", strMap17);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList20 = java.util.Locale.LanguageRange.parse("zh");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap21 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList22 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList20, strMap21);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap23 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList24 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList20, strMap23);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap25 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList26 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList20, strMap25);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap27 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList28 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList20, strMap27);
        java.util.Locale.LanguageRange[] languageRangeArray29 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList30 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList30, languageRangeArray29);
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.util.Locale locale33 = java.util.Locale.FRANCE;
        boolean boolean34 = locale33.hasExtensions();
        java.util.Locale locale35 = java.util.Locale.FRANCE;
        java.util.Locale locale36 = java.util.Locale.CHINESE;
        java.lang.String str37 = locale36.getLanguage();
        java.util.Locale[] localeArray38 = new java.util.Locale[] { locale32, locale33, locale35, locale36 };
        java.util.ArrayList<java.util.Locale> localeList39 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList39, localeArray38);
        java.util.Locale.FilteringMode filteringMode41 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList42 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, (java.util.Collection<java.util.Locale>) localeList39, filteringMode41);
        java.util.Locale.LanguageRange[] languageRangeArray43 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList44 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList44, languageRangeArray43);
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.util.Locale locale47 = java.util.Locale.FRANCE;
        boolean boolean48 = locale47.hasExtensions();
        java.util.Locale locale49 = java.util.Locale.FRANCE;
        java.util.Locale locale50 = java.util.Locale.CHINESE;
        java.lang.String str51 = locale50.getLanguage();
        java.util.Locale[] localeArray52 = new java.util.Locale[] { locale46, locale47, locale49, locale50 };
        java.util.ArrayList<java.util.Locale> localeList53 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList53, localeArray52);
        java.util.Locale.FilteringMode filteringMode55 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList56 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList44, (java.util.Collection<java.util.Locale>) localeList53, filteringMode55);
        int int57 = localeList42.indexOf((java.lang.Object) filteringMode55);
        localeList42.clear();
        java.util.Locale locale59 = java.util.Locale.CHINESE;
        java.lang.String str60 = locale59.getLanguage();
        boolean boolean61 = locale59.hasExtensions();
        java.lang.String str62 = locale59.getDisplayCountry();
        java.lang.String str63 = locale59.getDisplayLanguage();
        java.lang.String str64 = locale59.getLanguage();
        java.lang.String str65 = locale59.getDisplayVariant();
        boolean boolean66 = localeList42.add(locale59);
        localeList42.clear();
        java.util.Locale locale68 = java.util.Locale.lookup(languageRangeList20, (java.util.Collection<java.util.Locale>) localeList42);
        java.util.Locale.FilteringMode filteringMode69 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList70 = java.util.Locale.filter(languageRangeList18, (java.util.Collection<java.util.Locale>) localeList42, filteringMode69);
        java.util.TimeZone timeZone71 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone72 = java.util.TimeZone.getDefault();
        boolean boolean73 = timeZone71.hasSameRules(timeZone72);
        java.util.Calendar calendar74 = java.util.Calendar.getInstance(timeZone71);
        java.util.Locale locale75 = java.util.Locale.CHINA;
        java.util.Calendar calendar76 = java.util.Calendar.getInstance(timeZone71, locale75);
        java.lang.String str77 = locale75.getDisplayCountry();
        java.util.Set<java.lang.String> strSet78 = locale75.getUnicodeLocaleKeys();
        boolean boolean79 = localeList70.containsAll((java.util.Collection<java.lang.String>) strSet78);
        java.util.List<java.util.Locale> localeList80 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.util.Locale>) localeList70);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar74 and calendar76", (calendar74.compareTo(calendar76) == 0) == calendar74.equals(calendar76));
    }

    @Test
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test029");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        java.util.TimeZone timeZone4 = calendar3.getTimeZone();
        java.util.TimeZone timeZone5 = calendar3.getTimeZone();
        java.lang.String str6 = timeZone5.getID();
        timeZone5.setRawOffset(9);
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone5);
        int int10 = calendar9.getWeekYear();
        java.util.Locale.Builder builder11 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder12 = builder11.clear();
        boolean boolean13 = calendar9.after((java.lang.Object) builder12);
        java.text.AttributedCharacterIterator.Attribute attribute14 = java.text.AttributedCharacterIterator.Attribute.INPUT_METHOD_SEGMENT;
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone16);
        java.util.TimeZone timeZone18 = fastDateFormat17.getTimeZone();
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone18);
        java.util.Locale locale20 = java.util.Locale.US;
        java.lang.String str22 = locale20.getExtension('a');
        java.util.Set<java.lang.Character> charSet23 = locale20.getExtensionKeys();
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone18, locale20);
        java.util.TimeZone timeZone25 = calendar24.getTimeZone();
        boolean boolean26 = attribute14.equals((java.lang.Object) calendar24);
        java.util.Date date27 = new java.util.Date();
        int int28 = date27.getSeconds();
        java.util.Date date29 = new java.util.Date();
        int int30 = date29.getTimezoneOffset();
        date29.setMinutes(5);
        boolean boolean33 = date27.after(date29);
        int int34 = date27.getMonth();
        calendar24.setTime(date27);
        calendar9.setTime(date27);
        java.lang.String str37 = date27.toLocaleString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar19", (calendar3.compareTo(calendar19) == 0) == calendar3.equals(calendar19));
    }

    @Test
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test030");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        java.util.TimeZone timeZone4 = calendar3.getTimeZone();
        java.util.TimeZone timeZone6 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat7 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone6);
        java.util.TimeZone timeZone8 = fastDateFormat7.getTimeZone();
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone8);
        calendar3.setTimeZone(timeZone8);
        timeZone8.setID("21 Feb 2022 14:45:49 GMT");
        java.lang.String str13 = timeZone8.getID();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone14);
        java.util.TimeZone timeZone18 = calendar17.getTimeZone();
        java.util.TimeZone timeZone19 = calendar17.getTimeZone();
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        boolean boolean22 = timeZone20.hasSameRules(timeZone21);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone20);
        java.util.TimeZone.setDefault(timeZone20);
        calendar17.setTimeZone(timeZone20);
        boolean boolean26 = timeZone8.hasSameRules(timeZone20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar9 and calendar17", (calendar9.compareTo(calendar17) == 0) == calendar9.equals(calendar17));
    }

    @Test
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test031");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Calendar.Builder builder4 = builder0.setTimeZone(timeZone1);
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str6 = locale5.getLanguage();
        java.lang.String str7 = locale5.getDisplayScript();
        java.util.Calendar.Builder builder8 = builder4.setLocale(locale5);
        java.util.Calendar.Builder builder12 = builder4.setWeekDate((int) (short) 10, 59, 50);
        java.util.Calendar.Builder builder16 = builder4.setWeekDate((int) ' ', 41, (int) (short) 1);
        java.util.Calendar.Builder builder17 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        boolean boolean20 = timeZone18.hasSameRules(timeZone19);
        java.util.Calendar.Builder builder21 = builder17.setTimeZone(timeZone18);
        java.util.Calendar.Builder builder23 = builder17.setLenient(true);
        int[] intArray24 = new int[] {};
        java.util.Calendar.Builder builder25 = builder23.setFields(intArray24);
        java.util.Calendar.Builder builder26 = builder16.setFields(intArray24);
        java.util.Calendar.Builder builder27 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        boolean boolean30 = timeZone28.hasSameRules(timeZone29);
        java.util.Calendar.Builder builder31 = builder27.setTimeZone(timeZone28);
        java.util.Calendar.Builder builder33 = builder27.setLenient(true);
        int[] intArray34 = new int[] {};
        java.util.Calendar.Builder builder35 = builder33.setFields(intArray34);
        java.util.Calendar.Builder builder36 = builder16.setFields(intArray34);
        java.util.Calendar.Builder builder37 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone39 = java.util.TimeZone.getDefault();
        boolean boolean40 = timeZone38.hasSameRules(timeZone39);
        java.util.Calendar.Builder builder41 = builder37.setTimeZone(timeZone38);
        java.util.Calendar calendar42 = builder41.build();
        java.util.Calendar.Builder builder46 = builder41.setTimeOfDay(12, 21, (int) (short) -1);
        java.util.Calendar.Builder builder51 = builder41.setTimeOfDay(49, 54, 11, 15);
        java.util.Calendar.Builder builder54 = builder41.set(3, 0);
        java.util.TimeZone timeZone55 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone56 = java.util.TimeZone.getDefault();
        boolean boolean57 = timeZone55.hasSameRules(timeZone56);
        boolean boolean58 = timeZone56.observesDaylightTime();
        java.util.TimeZone timeZone60 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat61 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone60);
        java.util.TimeZone timeZone62 = fastDateFormat61.getTimeZone();
        java.util.Calendar calendar63 = java.util.Calendar.getInstance(timeZone62);
        java.util.Locale locale64 = java.util.Locale.US;
        java.lang.String str66 = locale64.getExtension('a');
        java.util.Set<java.lang.Character> charSet67 = locale64.getExtensionKeys();
        java.util.Calendar calendar68 = java.util.Calendar.getInstance(timeZone62, locale64);
        java.util.TimeZone timeZone69 = calendar68.getTimeZone();
        int int71 = timeZone69.getOffset(0L);
        boolean boolean72 = timeZone56.hasSameRules(timeZone69);
        java.util.Calendar.Builder builder73 = builder41.setTimeZone(timeZone69);
        java.util.TimeZone.setDefault(timeZone69);
        java.util.Calendar.Builder builder75 = builder36.setTimeZone(timeZone69);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar63 and calendar68", (calendar63.compareTo(calendar68) == 0) == calendar63.equals(calendar68));
    }

    @Test
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test032");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        java.util.TimeZone timeZone4 = calendar3.getTimeZone();
        java.util.TimeZone timeZone5 = calendar3.getTimeZone();
        boolean boolean6 = timeZone5.observesDaylightTime();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone7.hasSameRules(timeZone8);
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone7);
        java.util.Locale locale11 = java.util.Locale.CHINA;
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone7, locale11);
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone5, locale11);
        java.lang.String str14 = timeZone5.getID();
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(locale15);
        int int18 = calendar16.getMinimum(13);
        java.util.Calendar.Builder builder19 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        boolean boolean22 = timeZone20.hasSameRules(timeZone21);
        java.util.Calendar.Builder builder23 = builder19.setTimeZone(timeZone20);
        calendar16.setTimeZone(timeZone20);
        java.util.TimeZone timeZone26 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone26);
        java.lang.String str28 = fastDateFormat27.getPattern();
        java.util.TimeZone timeZone31 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat32 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone31);
        java.lang.String str33 = fastDateFormat32.getPattern();
        java.text.ParsePosition parsePosition36 = new java.text.ParsePosition(16);
        parsePosition36.setIndex(11);
        java.lang.Object obj39 = fastDateFormat32.parseObject("hi!", parsePosition36);
        java.text.ParsePosition parsePosition42 = new java.text.ParsePosition(16);
        java.lang.Object obj43 = fastDateFormat32.parseObject("hi!", parsePosition42);
        java.lang.Object obj44 = fastDateFormat27.parseObject("hi!", parsePosition42);
        boolean boolean45 = calendar16.before((java.lang.Object) "hi!");
        calendar16.set(17, 100, (int) 'a');
        java.util.Date date55 = new java.util.Date((int) (byte) 100, 17, (int) (byte) 100, 32769, 6);
        calendar16.setTime(date55);
        boolean boolean57 = timeZone5.inDaylightTime(date55);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar12", (calendar3.compareTo(calendar12) == 0) == calendar3.equals(calendar12));
    }

    @Test
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test033");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.text.ParsePosition parsePosition6 = new java.text.ParsePosition(16);
        parsePosition6.setIndex(11);
        java.lang.Object obj9 = fastDateFormat2.parseObject("hi!", parsePosition6);
        java.text.ParsePosition parsePosition12 = new java.text.ParsePosition(16);
        java.lang.Object obj13 = fastDateFormat2.parseObject("hi!", parsePosition12);
        boolean boolean14 = fastDateFormat2.getTimeZoneOverridesCalendar();
        java.lang.String str16 = fastDateFormat2.format(1645454760110L);
        java.util.TimeZone timeZone18 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat19 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone18);
        java.lang.String str20 = fastDateFormat19.getPattern();
        java.text.ParsePosition parsePosition23 = new java.text.ParsePosition(16);
        parsePosition23.setIndex(11);
        int int26 = parsePosition23.getErrorIndex();
        java.lang.Object obj27 = fastDateFormat19.parseObject("12:00:00 AM UTC", parsePosition23);
        java.util.TimeZone timeZone28 = fastDateFormat19.getTimeZone();
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        boolean boolean31 = timeZone29.hasSameRules(timeZone30);
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(timeZone29);
        java.util.TimeZone timeZone33 = calendar32.getTimeZone();
        java.util.TimeZone timeZone34 = calendar32.getTimeZone();
        boolean boolean35 = calendar32.isWeekDateSupported();
        int int37 = calendar32.getLeastMaximum(10);
        int int38 = calendar32.getWeekYear();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        java.util.TimeZone timeZone45 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat46 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone45);
        java.lang.String str47 = fastDateFormat46.getPattern();
        java.text.ParsePosition parsePosition50 = new java.text.ParsePosition(16);
        parsePosition50.setIndex(11);
        java.lang.Object obj53 = fastDateFormat46.parseObject("hi!", parsePosition50);
        java.text.ParsePosition parsePosition56 = new java.text.ParsePosition(16);
        java.lang.Object obj57 = fastDateFormat46.parseObject("hi!", parsePosition56);
        java.lang.Object obj58 = fastDateFormat41.parseObject("hi!", parsePosition56);
        boolean boolean59 = calendar32.after(obj58);
        java.lang.String str60 = fastDateFormat19.format(calendar32);
        java.util.Date date64 = new java.util.Date(29, (int) (short) 100, 35);
        calendar32.setTime(date64);
        java.lang.String str66 = fastDateFormat2.format(date64);
        java.util.TimeZone timeZone67 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone68 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone69 = java.util.TimeZone.getDefault();
        boolean boolean70 = timeZone68.hasSameRules(timeZone69);
        boolean boolean71 = timeZone67.hasSameRules(timeZone68);
        timeZone67.setID("java.util.GregorianCalendar[time=1645454754087,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=54,MILLISECOND=87,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale75 = java.util.Locale.forLanguageTag("English");
        java.util.Calendar calendar76 = java.util.Calendar.getInstance(timeZone67, locale75);
        int int78 = calendar76.getMinimum((int) (short) 1);
        java.time.Instant instant79 = calendar76.toInstant();
        int int80 = calendar76.getWeeksInWeekYear();
        java.util.TimeZone timeZone81 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone82 = java.util.TimeZone.getDefault();
        boolean boolean83 = timeZone81.hasSameRules(timeZone82);
        java.util.Calendar calendar84 = java.util.Calendar.getInstance(timeZone81);
        java.time.Instant instant85 = calendar84.toInstant();
        java.util.Date date86 = java.util.Date.from(instant85);
        java.util.Date date92 = new java.util.Date(0, (int) (short) 10, (int) (short) 1, (int) (byte) 100, (int) '#');
        boolean boolean93 = date86.after(date92);
        int int94 = date86.getMonth();
        calendar76.setTime(date86);
        boolean boolean96 = date64.before(date86);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar76 and calendar84", (calendar76.compareTo(calendar84) == 0) == calendar76.equals(calendar84));
    }

    @Test
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test034");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone1);
        java.util.TimeZone timeZone5 = calendar4.getTimeZone();
        java.util.TimeZone timeZone6 = calendar4.getTimeZone();
        java.lang.String str7 = timeZone6.getID();
        timeZone6.setRawOffset(9);
        timeZone6.setID("FastDateFormat[]");
        timeZone6.setRawOffset(41);
        java.util.Locale locale14 = java.util.Locale.US;
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleKeys();
        java.lang.String str16 = locale14.toLanguageTag();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone6, locale14);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        boolean boolean20 = timeZone18.hasSameRules(timeZone19);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone18);
        java.util.Locale locale22 = java.util.Locale.CHINA;
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone18, locale22);
        calendar23.setTimeInMillis((long) 6);
        boolean boolean26 = calendar23.isWeekDateSupported();
        calendar23.clear();
        java.util.Date date33 = new java.util.Date(48, (int) (byte) 100, 48, 50, 49);
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        boolean boolean36 = timeZone34.hasSameRules(timeZone35);
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(timeZone34);
        java.util.TimeZone timeZone38 = calendar37.getTimeZone();
        java.util.TimeZone timeZone39 = calendar37.getTimeZone();
        calendar37.set(4, (int) (byte) 0, 50, 11, 8, 54);
        java.util.Date date47 = calendar37.getTime();
        boolean boolean48 = date33.after(date47);
        calendar23.setTime(date33);
        java.lang.String str50 = fastDateFormat17.format(date33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar4 and calendar21", (calendar4.compareTo(calendar21) == 0) == calendar4.equals(calendar21));
    }

    @Test
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test035");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str4 = fastDateFormat2.format((long) '#');
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone5.hasSameRules(timeZone6);
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone5);
        java.util.TimeZone timeZone9 = calendar8.getTimeZone();
        java.util.TimeZone timeZone10 = calendar8.getTimeZone();
        int int12 = calendar8.getMinimum(13);
        java.lang.String str13 = fastDateFormat2.format(calendar8);
        java.util.TimeZone timeZone14 = calendar8.getTimeZone();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        boolean boolean17 = timeZone15.hasSameRules(timeZone16);
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone15);
        java.util.TimeZone timeZone19 = calendar18.getTimeZone();
        timeZone19.setID("21 Feb 2022 14:45:49 GMT");
        boolean boolean22 = timeZone14.hasSameRules(timeZone19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar8 and calendar18", (calendar8.compareTo(calendar18) == 0) == calendar8.equals(calendar18));
    }

    @Test
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test036");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        boolean boolean4 = timeZone0.hasSameRules(timeZone1);
        timeZone0.setID("java.util.GregorianCalendar[time=1645454754087,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=54,MILLISECOND=87,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale8 = java.util.Locale.forLanguageTag("English");
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone0, locale8);
        int int11 = calendar9.getMinimum((int) (short) 1);
        java.time.Instant instant12 = calendar9.toInstant();
        int int13 = calendar9.getWeeksInWeekYear();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone14);
        java.time.Instant instant18 = calendar17.toInstant();
        java.util.Date date19 = java.util.Date.from(instant18);
        java.util.Date date25 = new java.util.Date(0, (int) (short) 10, (int) (short) 1, (int) (byte) 100, (int) '#');
        boolean boolean26 = date19.after(date25);
        int int27 = date19.getMonth();
        calendar9.setTime(date19);
        java.time.Instant instant29 = date19.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar9 and calendar17", (calendar9.compareTo(calendar17) == 0) == calendar9.equals(calendar17));
    }

    @Test
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test037");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        boolean boolean4 = timeZone0.hasSameRules(timeZone1);
        timeZone0.setID("java.util.GregorianCalendar[time=1645454754087,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=54,MILLISECOND=87,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale8 = java.util.Locale.forLanguageTag("English");
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone0, locale8);
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        boolean boolean11 = locale10.hasExtensions();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = locale10.getDisplayCountry();
        boolean boolean14 = locale10.hasExtensions();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        boolean boolean17 = timeZone15.hasSameRules(timeZone16);
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone15);
        java.util.TimeZone timeZone19 = calendar18.getTimeZone();
        java.util.TimeZone timeZone20 = calendar18.getTimeZone();
        boolean boolean21 = timeZone20.observesDaylightTime();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone22.hasSameRules(timeZone23);
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone22);
        java.util.Locale locale26 = java.util.Locale.CHINA;
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone22, locale26);
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(timeZone20, locale26);
        java.lang.String str29 = locale10.getDisplayVariant(locale26);
        java.util.Set<java.lang.String> strSet30 = locale10.getUnicodeLocaleKeys();
        java.lang.String str31 = locale10.getISO3Language();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar9 and calendar18", (calendar9.compareTo(calendar18) == 0) == calendar9.equals(calendar18));
    }

    @Test
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test038");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        java.util.Locale locale5 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale5);
        int int8 = calendar6.getMinimum(13);
        java.util.Calendar.Builder builder9 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        boolean boolean12 = timeZone10.hasSameRules(timeZone11);
        java.util.Calendar.Builder builder13 = builder9.setTimeZone(timeZone10);
        calendar6.setTimeZone(timeZone10);
        java.util.Locale.Category category15 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale16 = java.util.Locale.getDefault(category15);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone10, locale16);
        java.util.Locale locale18 = locale16.stripExtensions();
        java.util.Locale locale19 = java.util.Locale.CHINESE;
        java.lang.String str20 = locale19.getLanguage();
        boolean boolean21 = locale19.hasExtensions();
        java.lang.String str22 = locale19.getDisplayCountry();
        java.util.Set<java.lang.String> strSet23 = locale19.getUnicodeLocaleKeys();
        java.lang.String str24 = locale19.getDisplayCountry();
        java.lang.String str25 = locale19.getDisplayScript();
        java.lang.String str26 = locale18.getDisplayVariant(locale19);
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone0, locale19);
        java.lang.String str28 = timeZone0.getID();
        timeZone0.setRawOffset(35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar6", (calendar3.compareTo(calendar6) == 0) == calendar3.equals(calendar6));
    }

    @Test
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test039");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Calendar.Builder builder4 = builder0.setTimeZone(timeZone1);
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str6 = locale5.getLanguage();
        java.lang.String str7 = locale5.getDisplayScript();
        java.util.Calendar.Builder builder8 = builder4.setLocale(locale5);
        java.util.Calendar calendar9 = builder8.build();
        java.util.Calendar.Builder builder11 = builder8.setLenient(true);
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone12.hasSameRules(timeZone13);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone12);
        java.util.TimeZone timeZone16 = calendar15.getTimeZone();
        java.util.TimeZone timeZone17 = calendar15.getTimeZone();
        boolean boolean18 = calendar15.isWeekDateSupported();
        int int20 = calendar15.getLeastMaximum(10);
        int int21 = calendar15.getWeekYear();
        java.lang.String str22 = calendar15.getCalendarType();
        calendar15.setTimeInMillis((long) (short) -1);
        java.util.TimeZone timeZone25 = calendar15.getTimeZone();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance();
        int int28 = calendar26.getActualMaximum(4);
        java.util.TimeZone timeZone30 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone30);
        java.util.TimeZone timeZone32 = fastDateFormat31.getTimeZone();
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone32);
        calendar26.setTimeZone(timeZone32);
        timeZone32.setID("21 Feb 2022 14:45:52 GMT");
        boolean boolean37 = timeZone25.hasSameRules(timeZone32);
        java.util.Calendar.Builder builder38 = builder11.setTimeZone(timeZone32);
        java.util.Locale locale39 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(locale39);
        java.lang.String str41 = locale39.getVariant();
        java.lang.String str42 = locale39.getDisplayName();
        java.lang.String str43 = locale39.getISO3Country();
        java.lang.String str44 = locale39.getDisplayName();
        java.util.Calendar.Builder builder45 = builder11.setLocale(locale39);
        java.util.Calendar.Builder builder50 = builder45.setTimeOfDay(46, 32769, 24, 57);
        java.util.Calendar.Builder builder52 = builder50.setLenient(true);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar26 and calendar40", (calendar26.compareTo(calendar40) == 0) == calendar26.equals(calendar40));
    }

    @Test
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test040");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        java.util.Locale locale4 = java.util.Locale.CHINA;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone0, locale4);
        timeZone0.setID("java.util.GregorianCalendar[time=1645454754087,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=54,MILLISECOND=87,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale9 = new java.util.Locale("java.util.GregorianCalendar[time=1645454753591,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=53,MILLISECOND=591,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale10 = java.util.Locale.US;
        java.lang.String str12 = locale10.getExtension('a');
        java.util.Set<java.lang.Character> charSet13 = locale10.getExtensionKeys();
        java.lang.String str14 = locale10.getDisplayCountry();
        java.lang.String str15 = locale10.getDisplayVariant();
        java.util.Locale.setDefault(locale10);
        java.lang.String str17 = locale9.getDisplayVariant(locale10);
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone0, locale10);
        java.util.Calendar.Builder builder19 = new java.util.Calendar.Builder();
        java.util.Calendar calendar20 = builder19.build();
        java.util.Calendar calendar21 = java.util.Calendar.getInstance();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone22.hasSameRules(timeZone23);
        boolean boolean25 = timeZone23.observesDaylightTime();
        calendar21.setTimeZone(timeZone23);
        java.time.ZoneId zoneId27 = timeZone23.toZoneId();
        java.util.Calendar.Builder builder28 = builder19.setTimeZone(timeZone23);
        boolean boolean29 = timeZone0.hasSameRules(timeZone23);
        java.time.ZoneId zoneId30 = timeZone23.toZoneId();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar21", (calendar3.compareTo(calendar21) == 0) == calendar3.equals(calendar21));
    }

    @Test
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test041");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Calendar.Builder builder4 = builder0.setTimeZone(timeZone1);
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str6 = locale5.getLanguage();
        java.lang.String str7 = locale5.getDisplayScript();
        java.util.Calendar.Builder builder8 = builder4.setLocale(locale5);
        java.util.Calendar calendar9 = builder8.build();
        java.util.Calendar.Builder builder11 = builder8.setLenient(true);
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone12.hasSameRules(timeZone13);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone12);
        java.util.TimeZone timeZone16 = calendar15.getTimeZone();
        java.util.TimeZone timeZone17 = calendar15.getTimeZone();
        boolean boolean18 = calendar15.isWeekDateSupported();
        int int20 = calendar15.getLeastMaximum(10);
        int int21 = calendar15.getWeekYear();
        java.lang.String str22 = calendar15.getCalendarType();
        calendar15.setTimeInMillis((long) (short) -1);
        java.util.TimeZone timeZone25 = calendar15.getTimeZone();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance();
        int int28 = calendar26.getActualMaximum(4);
        java.util.TimeZone timeZone30 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone30);
        java.util.TimeZone timeZone32 = fastDateFormat31.getTimeZone();
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone32);
        calendar26.setTimeZone(timeZone32);
        timeZone32.setID("21 Feb 2022 14:45:52 GMT");
        boolean boolean37 = timeZone25.hasSameRules(timeZone32);
        java.util.Calendar.Builder builder38 = builder11.setTimeZone(timeZone32);
        java.util.Calendar.Builder builder41 = builder38.set(10, 17);
        java.util.Calendar calendar42 = builder38.build();
        java.time.Instant instant43 = calendar42.toInstant();
        calendar42.set((int) 'u', 0, (int) (byte) 10, 30, 292269054, 56);
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        boolean boolean53 = timeZone51.hasSameRules(timeZone52);
        java.util.Calendar calendar54 = java.util.Calendar.getInstance(timeZone51);
        java.util.Locale locale55 = java.util.Locale.CHINA;
        java.util.Calendar calendar56 = java.util.Calendar.getInstance(timeZone51, locale55);
        long long57 = calendar56.getTimeInMillis();
        boolean boolean58 = calendar42.after((java.lang.Object) long57);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar26 and calendar54", (calendar26.compareTo(calendar54) == 0) == calendar26.equals(calendar54));
    }

    @Test
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test042");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str4 = fastDateFormat2.format((long) '#');
        java.lang.String str6 = fastDateFormat2.format((long) 7);
        java.util.Calendar.Builder builder7 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone8.hasSameRules(timeZone9);
        java.util.Calendar.Builder builder11 = builder7.setTimeZone(timeZone8);
        java.util.Locale locale12 = java.util.Locale.CHINESE;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale12.getDisplayScript();
        java.util.Calendar.Builder builder15 = builder11.setLocale(locale12);
        boolean boolean16 = fastDateFormat2.equals((java.lang.Object) builder15);
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.lang.String str18 = locale17.getLanguage();
        boolean boolean19 = locale17.hasExtensions();
        java.lang.String str20 = locale17.getDisplayCountry();
        java.lang.String str21 = locale17.getISO3Language();
        java.util.Calendar.Builder builder22 = builder15.setLocale(locale17);
        java.util.Calendar.Builder builder23 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone24.hasSameRules(timeZone25);
        java.util.Calendar.Builder builder27 = builder23.setTimeZone(timeZone24);
        java.util.Calendar calendar28 = builder27.build();
        java.util.Calendar.Builder builder32 = builder27.setTimeOfDay(12, 21, (int) (short) -1);
        java.util.Calendar.Builder builder36 = builder27.setDate(49, 1, (int) (byte) 10);
        java.util.Calendar.Builder builder38 = builder36.setLenient(true);
        java.util.Calendar.Builder builder41 = builder38.set(15, 355);
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone43 = java.util.TimeZone.getDefault();
        boolean boolean44 = timeZone42.hasSameRules(timeZone43);
        java.util.Calendar calendar45 = java.util.Calendar.getInstance(timeZone42);
        java.util.Locale locale47 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(locale47);
        int int50 = calendar48.getMinimum(13);
        java.util.Calendar.Builder builder51 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone53 = java.util.TimeZone.getDefault();
        boolean boolean54 = timeZone52.hasSameRules(timeZone53);
        java.util.Calendar.Builder builder55 = builder51.setTimeZone(timeZone52);
        calendar48.setTimeZone(timeZone52);
        java.util.Locale.Category category57 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale58 = java.util.Locale.getDefault(category57);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat59 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone52, locale58);
        java.util.Locale locale60 = locale58.stripExtensions();
        java.util.Locale locale61 = java.util.Locale.CHINESE;
        java.lang.String str62 = locale61.getLanguage();
        boolean boolean63 = locale61.hasExtensions();
        java.lang.String str64 = locale61.getDisplayCountry();
        java.util.Set<java.lang.String> strSet65 = locale61.getUnicodeLocaleKeys();
        java.lang.String str66 = locale61.getDisplayCountry();
        java.lang.String str67 = locale61.getDisplayScript();
        java.lang.String str68 = locale60.getDisplayVariant(locale61);
        java.util.Calendar calendar69 = java.util.Calendar.getInstance(timeZone42, locale61);
        java.util.Locale locale70 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar71 = java.util.Calendar.getInstance(locale70);
        java.lang.String str72 = locale70.getVariant();
        java.lang.String str73 = locale70.getDisplayName();
        java.lang.String str74 = locale70.getISO3Country();
        java.lang.String str75 = locale61.getDisplayCountry(locale70);
        java.util.Calendar.Builder builder76 = builder38.setLocale(locale61);
        java.util.Calendar.Builder builder77 = builder22.setLocale(locale61);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar45 and calendar48", (calendar45.compareTo(calendar48) == 0) == calendar45.equals(calendar48));
    }

    @Test
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test043");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        java.util.Locale locale4 = java.util.Locale.CHINA;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone0, locale4);
        timeZone0.setID("java.util.GregorianCalendar[time=1645454754087,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=54,MILLISECOND=87,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale9 = new java.util.Locale("java.util.GregorianCalendar[time=1645454753591,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=53,MILLISECOND=591,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale10 = java.util.Locale.US;
        java.lang.String str12 = locale10.getExtension('a');
        java.util.Set<java.lang.Character> charSet13 = locale10.getExtensionKeys();
        java.lang.String str14 = locale10.getDisplayCountry();
        java.lang.String str15 = locale10.getDisplayVariant();
        java.util.Locale.setDefault(locale10);
        java.lang.String str17 = locale9.getDisplayVariant(locale10);
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone0, locale10);
        java.util.Calendar.Builder builder19 = new java.util.Calendar.Builder();
        java.util.Calendar calendar20 = builder19.build();
        java.util.Calendar calendar21 = java.util.Calendar.getInstance();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone22.hasSameRules(timeZone23);
        boolean boolean25 = timeZone23.observesDaylightTime();
        calendar21.setTimeZone(timeZone23);
        java.time.ZoneId zoneId27 = timeZone23.toZoneId();
        java.util.Calendar.Builder builder28 = builder19.setTimeZone(timeZone23);
        boolean boolean29 = timeZone0.hasSameRules(timeZone23);
        timeZone23.setID("21 Feb 2022 14:48:23 GMT");
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar21", (calendar3.compareTo(calendar21) == 0) == calendar3.equals(calendar21));
    }

    @Test
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test044");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.lang.String str8 = locale7.getLanguage();
        java.util.Locale[] localeArray9 = new java.util.Locale[] { locale3, locale4, locale6, locale7 };
        java.util.ArrayList<java.util.Locale> localeList10 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList10, localeArray9);
        java.util.Locale.FilteringMode filteringMode12 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList13 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList10, filteringMode12);
        int int15 = localeList13.lastIndexOf((java.lang.Object) 11);
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.lang.String str17 = locale16.getLanguage();
        boolean boolean18 = locale16.hasExtensions();
        java.lang.String str19 = locale16.getDisplayCountry();
        java.util.Set<java.lang.String> strSet20 = locale16.getUnicodeLocaleKeys();
        boolean boolean21 = localeList13.containsAll((java.util.Collection<java.lang.String>) strSet20);
        java.util.ListIterator<java.util.Locale> localeItor22 = localeList13.listIterator();
        java.util.List<java.util.Locale.LanguageRange> languageRangeList24 = java.util.Locale.LanguageRange.parse("zh");
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.util.Locale locale29 = java.util.Locale.FRANCE;
        boolean boolean30 = locale29.hasExtensions();
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        java.util.Locale locale32 = java.util.Locale.CHINESE;
        java.lang.String str33 = locale32.getLanguage();
        java.util.Locale[] localeArray34 = new java.util.Locale[] { locale28, locale29, locale31, locale32 };
        java.util.ArrayList<java.util.Locale> localeList35 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList35, localeArray34);
        java.util.Locale.FilteringMode filteringMode37 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList38 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.util.Locale>) localeList35, filteringMode37);
        java.util.Locale.LanguageRange[] languageRangeArray39 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList40 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList40, languageRangeArray39);
        java.util.Locale locale42 = java.util.Locale.GERMAN;
        java.util.Locale locale43 = java.util.Locale.FRANCE;
        boolean boolean44 = locale43.hasExtensions();
        java.util.Locale locale45 = java.util.Locale.FRANCE;
        java.util.Locale locale46 = java.util.Locale.CHINESE;
        java.lang.String str47 = locale46.getLanguage();
        java.util.Locale[] localeArray48 = new java.util.Locale[] { locale42, locale43, locale45, locale46 };
        java.util.ArrayList<java.util.Locale> localeList49 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList49, localeArray48);
        java.util.Locale.FilteringMode filteringMode51 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList52 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList40, (java.util.Collection<java.util.Locale>) localeList49, filteringMode51);
        int int53 = localeList38.indexOf((java.lang.Object) filteringMode51);
        java.util.List<java.util.Locale> localeList54 = java.util.Locale.filter(languageRangeList24, (java.util.Collection<java.util.Locale>) localeList38);
        java.lang.Object obj55 = null;
        boolean boolean56 = localeList38.contains(obj55);
        boolean boolean57 = localeList13.equals((java.lang.Object) boolean56);
        java.util.Calendar.Builder builder58 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone59 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone60 = java.util.TimeZone.getDefault();
        boolean boolean61 = timeZone59.hasSameRules(timeZone60);
        java.util.Calendar.Builder builder62 = builder58.setTimeZone(timeZone59);
        java.util.Calendar.Builder builder64 = builder58.setLenient(true);
        java.util.Calendar.Builder builder68 = builder58.setDate(56, 2, 5);
        java.util.Locale locale69 = java.util.Locale.CHINESE;
        java.lang.String str70 = locale69.getLanguage();
        boolean boolean71 = locale69.hasExtensions();
        java.lang.String str72 = locale69.getDisplayCountry();
        java.util.Set<java.lang.String> strSet73 = locale69.getUnicodeLocaleKeys();
        java.lang.String str74 = locale69.getDisplayCountry();
        java.util.Calendar.Builder builder75 = builder58.setLocale(locale69);
        java.util.Locale locale77 = java.util.Locale.forLanguageTag("US");
        java.util.Calendar.Builder builder78 = builder75.setLocale(locale77);
        int int79 = localeList13.lastIndexOf((java.lang.Object) builder75);
        java.util.TimeZone timeZone81 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat82 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone81);
        java.util.TimeZone timeZone83 = fastDateFormat82.getTimeZone();
        java.util.Calendar calendar84 = java.util.Calendar.getInstance(timeZone83);
        java.util.Locale locale85 = java.util.Locale.US;
        java.lang.String str87 = locale85.getExtension('a');
        java.util.Set<java.lang.Character> charSet88 = locale85.getExtensionKeys();
        java.util.Calendar calendar89 = java.util.Calendar.getInstance(timeZone83, locale85);
        java.util.Calendar.Builder builder90 = builder75.setTimeZone(timeZone83);
        java.util.Calendar.Builder builder94 = builder90.setWeekDate(50, 30, 31);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar84 and calendar89", (calendar84.compareTo(calendar89) == 0) == calendar84.equals(calendar89));
    }

    @Test
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test045");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Calendar.Builder builder4 = builder0.setTimeZone(timeZone1);
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str6 = locale5.getLanguage();
        java.lang.String str7 = locale5.getDisplayScript();
        java.util.Calendar.Builder builder8 = builder4.setLocale(locale5);
        java.util.Calendar.Builder builder12 = builder4.setDate(0, 9, 56);
        java.util.Locale locale13 = java.util.Locale.CHINESE;
        java.lang.String str14 = locale13.getLanguage();
        java.lang.String str15 = locale13.getDisplayScript();
        java.util.Set<java.lang.Character> charSet16 = locale13.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet17 = locale13.getExtensionKeys();
        java.util.Locale locale18 = locale13.stripExtensions();
        java.lang.String str19 = locale18.getScript();
        java.util.Locale locale21 = new java.util.Locale("java.util.GregorianCalendar[time=1645454753591,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=53,MILLISECOND=591,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale22 = java.util.Locale.US;
        java.lang.String str24 = locale22.getExtension('a');
        java.util.Set<java.lang.Character> charSet25 = locale22.getExtensionKeys();
        java.lang.String str26 = locale22.getDisplayCountry();
        java.lang.String str27 = locale22.getDisplayVariant();
        java.util.Locale.setDefault(locale22);
        java.lang.String str29 = locale21.getDisplayVariant(locale22);
        java.lang.String str30 = locale18.getDisplayName(locale22);
        boolean boolean31 = locale18.hasExtensions();
        java.util.Calendar.Builder builder32 = builder4.setLocale(locale18);
        java.util.Calendar.Builder builder34 = builder32.setLenient(true);
        java.util.TimeZone timeZone36 = java.util.TimeZone.getTimeZone("Fri Jan 21 14:45:48 UTC 2022");
        int int37 = timeZone36.getRawOffset();
        java.time.ZoneId zoneId38 = timeZone36.toZoneId();
        java.util.Calendar.Builder builder39 = builder32.setTimeZone(timeZone36);
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(timeZone36);
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        boolean boolean43 = timeZone41.hasSameRules(timeZone42);
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(timeZone41);
        java.util.TimeZone.setDefault(timeZone41);
        boolean boolean46 = timeZone36.hasSameRules(timeZone41);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar40 and calendar44", (calendar40.compareTo(calendar44) == 0) == calendar40.equals(calendar44));
    }

    @Test
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test046");
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        boolean boolean6 = locale5.hasExtensions();
        java.util.Locale locale7 = java.util.Locale.FRANCE;
        java.util.Locale locale8 = java.util.Locale.CHINESE;
        java.lang.String str9 = locale8.getLanguage();
        java.util.Locale[] localeArray10 = new java.util.Locale[] { locale4, locale5, locale7, locale8 };
        java.util.ArrayList<java.util.Locale> localeList11 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList11, localeArray10);
        java.util.Locale.FilteringMode filteringMode13 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList14 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.util.Locale>) localeList11, filteringMode13);
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        boolean boolean20 = locale19.hasExtensions();
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.util.Locale locale22 = java.util.Locale.CHINESE;
        java.lang.String str23 = locale22.getLanguage();
        java.util.Locale[] localeArray24 = new java.util.Locale[] { locale18, locale19, locale21, locale22 };
        java.util.ArrayList<java.util.Locale> localeList25 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList25, localeArray24);
        java.util.Locale.FilteringMode filteringMode27 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList28 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.util.Locale>) localeList25, filteringMode27);
        int int29 = localeList14.indexOf((java.lang.Object) filteringMode27);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList31 = java.util.Locale.LanguageRange.parse("zh");
        java.util.Set<java.lang.String> strSet32 = java.util.Calendar.getAvailableCalendarTypes();
        java.lang.String str33 = java.util.Locale.lookupTag(languageRangeList31, (java.util.Collection<java.lang.String>) strSet32);
        boolean boolean34 = localeList14.retainAll((java.util.Collection<java.lang.String>) strSet32);
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        boolean boolean38 = timeZone36.hasSameRules(timeZone37);
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(timeZone36);
        java.util.Locale.Category category40 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale41 = java.util.Locale.getDefault(category40);
        java.lang.String str42 = locale41.getISO3Language();
        java.lang.String str43 = locale41.getDisplayLanguage();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(3, timeZone36, locale41);
        java.util.Calendar calendar45 = java.util.Calendar.getInstance(timeZone36);
        boolean boolean46 = localeList14.remove((java.lang.Object) timeZone36);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat47 = org.apache.commons.lang3.time.FastDateFormat.getInstance("2022-2-21 14:46:01", timeZone36);
        java.util.Locale locale48 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale48);
        java.util.Calendar calendar50 = java.util.Calendar.getInstance(timeZone36, locale48);
        java.time.ZoneId zoneId51 = timeZone36.toZoneId();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar39 and calendar50", (calendar39.compareTo(calendar50) == 0) == calendar39.equals(calendar50));
    }

    @Test
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test047");
        java.util.Date date3 = new java.util.Date(29, 0, 54);
        java.util.Date date4 = new java.util.Date();
        int int5 = date4.getTimezoneOffset();
        date4.setMonth(0);
        int int8 = date4.getSeconds();
        date4.setMinutes((int) (short) 10);
        java.util.TimeZone timeZone12 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone12);
        java.lang.String str15 = fastDateFormat13.format((long) '#');
        java.lang.String str17 = fastDateFormat13.format((long) 7);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        boolean boolean20 = timeZone18.hasSameRules(timeZone19);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone18);
        java.util.Locale locale22 = java.util.Locale.CHINA;
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone18, locale22);
        long long24 = calendar23.getTimeInMillis();
        java.lang.String str25 = fastDateFormat13.format(calendar23);
        java.util.Date date26 = calendar23.getTime();
        boolean boolean27 = date4.before(date26);
        boolean boolean28 = date3.before(date4);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar21 and calendar23", (calendar21.compareTo(calendar23) == 0) == calendar21.equals(calendar23));
    }

    @Test
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test048");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3);
        java.util.TimeZone timeZone7 = calendar6.getTimeZone();
        int int8 = calendar6.getFirstDayOfWeek();
        int int9 = calendar6.getFirstDayOfWeek();
        calendar6.setTimeInMillis((long) 100);
        calendar6.setFirstDayOfWeek(7);
        int int14 = calendar6.getMinimalDaysInFirstWeek();
        calendar6.set((int) '#', 17, (int) (byte) 10, (int) (short) 1, (int) (byte) 1);
        java.lang.StringBuffer stringBuffer21 = null;
        java.lang.StringBuffer stringBuffer22 = fastDateFormat2.format(calendar6, stringBuffer21);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance();
        int int25 = calendar23.getActualMaximum(4);
        java.util.TimeZone timeZone27 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone27);
        java.util.TimeZone timeZone29 = fastDateFormat28.getTimeZone();
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone29);
        calendar23.setTimeZone(timeZone29);
        int int32 = calendar23.getFirstDayOfWeek();
        int int34 = calendar23.getActualMaximum((int) (short) 1);
        java.lang.StringBuffer stringBuffer35 = null;
        java.lang.StringBuffer stringBuffer36 = fastDateFormat2.format(calendar23, stringBuffer35);
        java.lang.String str37 = fastDateFormat2.getPattern();
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone39 = java.util.TimeZone.getDefault();
        boolean boolean40 = timeZone38.hasSameRules(timeZone39);
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(timeZone38);
        java.time.Instant instant42 = calendar41.toInstant();
        int int43 = calendar41.getFirstDayOfWeek();
        boolean boolean45 = calendar41.after((java.lang.Object) 15);
        java.util.Date date46 = calendar41.getTime();
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        boolean boolean50 = timeZone48.hasSameRules(timeZone49);
        java.util.Calendar calendar51 = java.util.Calendar.getInstance(timeZone48);
        java.util.Locale.Category category52 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale53 = java.util.Locale.getDefault(category52);
        java.lang.String str54 = locale53.getISO3Language();
        java.lang.String str55 = locale53.getDisplayLanguage();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat56 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(3, timeZone48, locale53);
        calendar41.setTimeZone(timeZone48);
        calendar41.setFirstDayOfWeek(48);
        java.lang.StringBuffer stringBuffer60 = null;
        java.lang.StringBuffer stringBuffer61 = fastDateFormat2.format(calendar41, stringBuffer60);
        java.lang.String str62 = fastDateFormat2.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar30 and calendar41", (calendar30.compareTo(calendar41) == 0) == calendar30.equals(calendar41));
    }

    @Test
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test049");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        boolean boolean4 = timeZone0.hasSameRules(timeZone1);
        timeZone0.setID("java.util.GregorianCalendar[time=1645454754087,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=54,MILLISECOND=87,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale8 = java.util.Locale.forLanguageTag("English");
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone0, locale8);
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        boolean boolean11 = locale10.hasExtensions();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = locale10.getDisplayCountry();
        boolean boolean14 = locale10.hasExtensions();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        boolean boolean17 = timeZone15.hasSameRules(timeZone16);
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone15);
        java.util.TimeZone timeZone19 = calendar18.getTimeZone();
        java.util.TimeZone timeZone20 = calendar18.getTimeZone();
        boolean boolean21 = timeZone20.observesDaylightTime();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone22.hasSameRules(timeZone23);
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone22);
        java.util.Locale locale26 = java.util.Locale.CHINA;
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone22, locale26);
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(timeZone20, locale26);
        java.lang.String str29 = locale10.getDisplayVariant(locale26);
        java.util.Set<java.lang.String> strSet30 = locale10.getUnicodeLocaleKeys();
        java.util.stream.Stream<java.lang.String> strStream31 = strSet30.stream();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar9 and calendar18", (calendar9.compareTo(calendar18) == 0) == calendar9.equals(calendar18));
    }

    @Test
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test050");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.lang.String str1 = locale0.getLanguage();
        boolean boolean2 = locale0.hasExtensions();
        java.lang.String str3 = locale0.getDisplayCountry();
        java.lang.String str4 = locale0.getDisplayLanguage();
        java.lang.String str5 = locale0.getLanguage();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale0);
        java.util.Locale locale8 = java.util.Locale.forLanguageTag("GMT");
        java.lang.String str9 = locale8.getISO3Country();
        java.lang.String str10 = locale0.getDisplayCountry(locale8);
        java.util.Calendar.Builder builder11 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone12.hasSameRules(timeZone13);
        java.util.Calendar.Builder builder15 = builder11.setTimeZone(timeZone12);
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.lang.String str17 = locale16.getLanguage();
        java.lang.String str18 = locale16.getDisplayScript();
        java.util.Calendar.Builder builder19 = builder15.setLocale(locale16);
        java.util.Calendar calendar20 = builder19.build();
        java.util.Calendar.Builder builder22 = builder19.setLenient(true);
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        boolean boolean25 = timeZone23.hasSameRules(timeZone24);
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(timeZone23);
        java.util.TimeZone timeZone27 = calendar26.getTimeZone();
        java.util.TimeZone timeZone28 = calendar26.getTimeZone();
        boolean boolean29 = calendar26.isWeekDateSupported();
        int int31 = calendar26.getLeastMaximum(10);
        int int32 = calendar26.getWeekYear();
        java.lang.String str33 = calendar26.getCalendarType();
        calendar26.setTimeInMillis((long) (short) -1);
        java.util.TimeZone timeZone36 = calendar26.getTimeZone();
        java.util.Calendar calendar37 = java.util.Calendar.getInstance();
        int int39 = calendar37.getActualMaximum(4);
        java.util.TimeZone timeZone41 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat42 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone41);
        java.util.TimeZone timeZone43 = fastDateFormat42.getTimeZone();
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(timeZone43);
        calendar37.setTimeZone(timeZone43);
        timeZone43.setID("21 Feb 2022 14:45:52 GMT");
        boolean boolean48 = timeZone36.hasSameRules(timeZone43);
        java.util.Calendar.Builder builder49 = builder22.setTimeZone(timeZone43);
        java.util.Locale locale50 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar51 = java.util.Calendar.getInstance(locale50);
        java.lang.String str52 = locale50.getVariant();
        java.lang.String str53 = locale50.getDisplayName();
        java.lang.String str54 = locale50.getISO3Country();
        java.lang.String str55 = locale50.getDisplayName();
        java.util.Calendar.Builder builder56 = builder22.setLocale(locale50);
        java.lang.String str57 = locale0.getDisplayVariant(locale50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar37", (calendar6.compareTo(calendar37) == 0) == calendar6.equals(calendar37));
    }

    @Test
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test051");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        long long4 = calendar3.getTimeInMillis();
        calendar3.set(0, 43, 37);
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone9.hasSameRules(timeZone10);
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone9);
        java.util.Locale locale13 = java.util.Locale.CHINA;
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone9, locale13);
        timeZone9.setID("java.util.GregorianCalendar[time=1645454754087,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=54,MILLISECOND=87,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale18 = new java.util.Locale("java.util.GregorianCalendar[time=1645454753591,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=53,MILLISECOND=591,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale19 = java.util.Locale.US;
        java.lang.String str21 = locale19.getExtension('a');
        java.util.Set<java.lang.Character> charSet22 = locale19.getExtensionKeys();
        java.lang.String str23 = locale19.getDisplayCountry();
        java.lang.String str24 = locale19.getDisplayVariant();
        java.util.Locale.setDefault(locale19);
        java.lang.String str26 = locale18.getDisplayVariant(locale19);
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone9, locale19);
        java.util.Calendar.Builder builder28 = new java.util.Calendar.Builder();
        java.util.Calendar calendar29 = builder28.build();
        java.util.Calendar calendar30 = java.util.Calendar.getInstance();
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        boolean boolean33 = timeZone31.hasSameRules(timeZone32);
        boolean boolean34 = timeZone32.observesDaylightTime();
        calendar30.setTimeZone(timeZone32);
        java.time.ZoneId zoneId36 = timeZone32.toZoneId();
        java.util.Calendar.Builder builder37 = builder28.setTimeZone(timeZone32);
        boolean boolean38 = timeZone9.hasSameRules(timeZone32);
        boolean boolean39 = timeZone9.observesDaylightTime();
        calendar3.setTimeZone(timeZone9);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar12 and calendar30", (calendar12.compareTo(calendar30) == 0) == calendar12.equals(calendar30));
    }

    @Test
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test052");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Calendar.Builder builder4 = builder0.setTimeZone(timeZone1);
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str6 = locale5.getLanguage();
        java.lang.String str7 = locale5.getDisplayScript();
        java.util.Calendar.Builder builder8 = builder4.setLocale(locale5);
        java.util.Calendar calendar9 = builder8.build();
        java.util.Calendar.Builder builder11 = builder8.setLenient(true);
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone12.hasSameRules(timeZone13);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone12);
        java.util.TimeZone timeZone16 = calendar15.getTimeZone();
        java.util.TimeZone timeZone17 = calendar15.getTimeZone();
        boolean boolean18 = calendar15.isWeekDateSupported();
        int int20 = calendar15.getLeastMaximum(10);
        int int21 = calendar15.getWeekYear();
        java.lang.String str22 = calendar15.getCalendarType();
        calendar15.setTimeInMillis((long) (short) -1);
        java.util.TimeZone timeZone25 = calendar15.getTimeZone();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance();
        int int28 = calendar26.getActualMaximum(4);
        java.util.TimeZone timeZone30 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone30);
        java.util.TimeZone timeZone32 = fastDateFormat31.getTimeZone();
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone32);
        calendar26.setTimeZone(timeZone32);
        timeZone32.setID("21 Feb 2022 14:45:52 GMT");
        boolean boolean37 = timeZone25.hasSameRules(timeZone32);
        java.util.Calendar.Builder builder38 = builder11.setTimeZone(timeZone32);
        java.util.Calendar.Builder builder41 = builder38.set(10, 17);
        java.util.Calendar calendar42 = builder41.build();
        java.util.Calendar.Builder builder43 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        boolean boolean46 = timeZone44.hasSameRules(timeZone45);
        java.util.Calendar.Builder builder47 = builder43.setTimeZone(timeZone44);
        java.util.Locale locale48 = java.util.Locale.CHINESE;
        java.lang.String str49 = locale48.getLanguage();
        java.lang.String str50 = locale48.getDisplayScript();
        java.util.Calendar.Builder builder51 = builder47.setLocale(locale48);
        java.util.Calendar.Builder builder55 = builder47.setWeekDate((int) (short) 10, 59, 50);
        java.util.Calendar.Builder builder59 = builder47.setWeekDate((int) ' ', 41, (int) (short) 1);
        java.util.Calendar.Builder builder60 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone61 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone62 = java.util.TimeZone.getDefault();
        boolean boolean63 = timeZone61.hasSameRules(timeZone62);
        java.util.Calendar.Builder builder64 = builder60.setTimeZone(timeZone61);
        java.util.Calendar.Builder builder66 = builder60.setLenient(true);
        int[] intArray67 = new int[] {};
        java.util.Calendar.Builder builder68 = builder66.setFields(intArray67);
        java.util.Calendar.Builder builder69 = builder59.setFields(intArray67);
        java.util.Calendar.Builder builder70 = builder41.setFields(intArray67);
        java.util.Calendar calendar72 = java.util.Calendar.getInstance();
        int int74 = calendar72.getActualMaximum(4);
        java.util.TimeZone timeZone76 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat77 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone76);
        java.util.TimeZone timeZone78 = fastDateFormat77.getTimeZone();
        java.util.Calendar calendar79 = java.util.Calendar.getInstance(timeZone78);
        calendar72.setTimeZone(timeZone78);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat81 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\u534f\u8c03\u4e16\u754c\u65f6\u95f4", timeZone78);
        java.util.TimeZone.setDefault(timeZone78);
        java.util.Locale.Builder builder83 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder85 = builder83.setLanguage("");
        java.util.Locale locale86 = java.util.Locale.CHINESE;
        java.lang.String str87 = locale86.getLanguage();
        boolean boolean88 = locale86.hasExtensions();
        java.lang.String str89 = locale86.getDisplayCountry();
        java.util.Calendar calendar90 = java.util.Calendar.getInstance(locale86);
        java.util.Locale.Builder builder91 = builder85.setLocale(locale86);
        java.util.Calendar calendar92 = java.util.Calendar.getInstance(timeZone78, locale86);
        java.util.Calendar.Builder builder93 = builder70.setTimeZone(timeZone78);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar26 and calendar72", (calendar26.compareTo(calendar72) == 0) == calendar26.equals(calendar72));
    }

    @Test
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test053");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone1);
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone1, locale5);
        timeZone1.setID("java.util.GregorianCalendar[time=1645454754087,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=54,MILLISECOND=87,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale10 = new java.util.Locale("java.util.GregorianCalendar[time=1645454753591,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=53,MILLISECOND=591,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale11 = java.util.Locale.US;
        java.lang.String str13 = locale11.getExtension('a');
        java.util.Set<java.lang.Character> charSet14 = locale11.getExtensionKeys();
        java.lang.String str15 = locale11.getDisplayCountry();
        java.lang.String str16 = locale11.getDisplayVariant();
        java.util.Locale.setDefault(locale11);
        java.lang.String str18 = locale10.getDisplayVariant(locale11);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone1, locale11);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone1);
        java.util.TimeZone timeZone23 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone23);
        java.lang.String str25 = fastDateFormat24.getPattern();
        java.util.TimeZone timeZone28 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat29 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone28);
        java.lang.String str30 = fastDateFormat29.getPattern();
        java.text.ParsePosition parsePosition33 = new java.text.ParsePosition(16);
        parsePosition33.setIndex(11);
        java.lang.Object obj36 = fastDateFormat29.parseObject("hi!", parsePosition33);
        java.lang.Object obj37 = fastDateFormat24.parseObject("eng", parsePosition33);
        java.lang.Object obj38 = fastDateFormat20.parseObject("21 Feb 2022 14:47:20 GMT", parsePosition33);
        boolean boolean39 = fastDateFormat20.getTimeZoneOverridesCalendar();
        java.util.TimeZone timeZone41 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat42 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone41);
        java.util.TimeZone timeZone43 = fastDateFormat42.getTimeZone();
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(timeZone43);
        java.util.Locale locale45 = java.util.Locale.US;
        java.lang.String str47 = locale45.getExtension('a');
        java.util.Set<java.lang.Character> charSet48 = locale45.getExtensionKeys();
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(timeZone43, locale45);
        java.util.TimeZone timeZone50 = calendar49.getTimeZone();
        java.lang.String str51 = fastDateFormat20.format(calendar49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar4 and calendar44", (calendar4.compareTo(calendar44) == 0) == calendar4.equals(calendar44));
    }

    @Test
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test054");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.CHINESE;
        java.lang.String str4 = locale3.getLanguage();
        java.lang.String str5 = locale3.getDisplayScript();
        java.lang.String str6 = locale3.getDisplayScript();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone1, locale3);
        java.util.Locale locale8 = java.util.Locale.CHINESE;
        java.lang.String str9 = locale8.getLanguage();
        boolean boolean10 = locale8.hasExtensions();
        java.lang.String str11 = locale8.getDisplayCountry();
        java.lang.String str12 = locale8.getDisplayLanguage();
        java.lang.String str13 = locale8.getLanguage();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(locale8);
        boolean boolean15 = calendar7.after((java.lang.Object) locale8);
        calendar7.setLenient(false);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        boolean boolean20 = timeZone18.hasSameRules(timeZone19);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone18);
        java.util.TimeZone timeZone22 = calendar21.getTimeZone();
        java.util.TimeZone timeZone23 = calendar21.getTimeZone();
        boolean boolean24 = timeZone23.observesDaylightTime();
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone23);
        calendar7.setTimeZone(timeZone23);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone27.hasSameRules(timeZone28);
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone27);
        java.util.TimeZone timeZone31 = calendar30.getTimeZone();
        java.util.TimeZone timeZone32 = calendar30.getTimeZone();
        java.lang.String str33 = timeZone32.getID();
        timeZone32.setRawOffset(9);
        int int36 = timeZone32.getRawOffset();
        boolean boolean37 = timeZone23.hasSameRules(timeZone32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar14 and calendar30", (calendar14.compareTo(calendar30) == 0) == calendar14.equals(calendar30));
    }

    @Test
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test055");
        java.util.Locale locale1 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale1);
        int int4 = calendar2.getMinimum(13);
        java.util.Calendar.Builder builder5 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone6.hasSameRules(timeZone7);
        java.util.Calendar.Builder builder9 = builder5.setTimeZone(timeZone6);
        calendar2.setTimeZone(timeZone6);
        java.util.Locale.Category category11 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale12 = java.util.Locale.getDefault(category11);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone6, locale12);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        boolean boolean17 = timeZone15.hasSameRules(timeZone16);
        boolean boolean18 = timeZone14.hasSameRules(timeZone15);
        timeZone14.setID("java.util.GregorianCalendar[time=1645454754087,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=54,MILLISECOND=87,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale22 = java.util.Locale.forLanguageTag("English");
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone14, locale22);
        java.util.Locale locale24 = java.util.Locale.SIMPLIFIED_CHINESE;
        boolean boolean25 = locale24.hasExtensions();
        java.lang.String str26 = locale22.getDisplayName(locale24);
        java.lang.String str27 = locale24.getDisplayCountry();
        java.lang.String str28 = locale24.getISO3Country();
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(timeZone6, locale24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar2 and calendar23", (calendar2.compareTo(calendar23) == 0) == calendar2.equals(calendar23));
    }

    @Test
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test056");
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        boolean boolean6 = locale5.hasExtensions();
        java.util.Locale locale7 = java.util.Locale.FRANCE;
        java.util.Locale locale8 = java.util.Locale.CHINESE;
        java.lang.String str9 = locale8.getLanguage();
        java.util.Locale[] localeArray10 = new java.util.Locale[] { locale4, locale5, locale7, locale8 };
        java.util.ArrayList<java.util.Locale> localeList11 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList11, localeArray10);
        java.util.Locale.FilteringMode filteringMode13 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList14 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.util.Locale>) localeList11, filteringMode13);
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        boolean boolean20 = locale19.hasExtensions();
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.util.Locale locale22 = java.util.Locale.CHINESE;
        java.lang.String str23 = locale22.getLanguage();
        java.util.Locale[] localeArray24 = new java.util.Locale[] { locale18, locale19, locale21, locale22 };
        java.util.ArrayList<java.util.Locale> localeList25 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList25, localeArray24);
        java.util.Locale.FilteringMode filteringMode27 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList28 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.util.Locale>) localeList25, filteringMode27);
        int int29 = localeList14.indexOf((java.lang.Object) filteringMode27);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList31 = java.util.Locale.LanguageRange.parse("zh");
        java.util.Set<java.lang.String> strSet32 = java.util.Calendar.getAvailableCalendarTypes();
        java.lang.String str33 = java.util.Locale.lookupTag(languageRangeList31, (java.util.Collection<java.lang.String>) strSet32);
        boolean boolean34 = localeList14.retainAll((java.util.Collection<java.lang.String>) strSet32);
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        boolean boolean38 = timeZone36.hasSameRules(timeZone37);
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(timeZone36);
        java.util.Locale.Category category40 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale41 = java.util.Locale.getDefault(category40);
        java.lang.String str42 = locale41.getISO3Language();
        java.lang.String str43 = locale41.getDisplayLanguage();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(3, timeZone36, locale41);
        java.util.Calendar calendar45 = java.util.Calendar.getInstance(timeZone36);
        boolean boolean46 = localeList14.remove((java.lang.Object) timeZone36);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat47 = org.apache.commons.lang3.time.FastDateFormat.getInstance("2022-2-21 14:46:01", timeZone36);
        java.util.Locale locale48 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale48);
        java.util.Calendar calendar50 = java.util.Calendar.getInstance(timeZone36, locale48);
        java.util.TimeZone.setDefault(timeZone36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar45 and calendar50", (calendar45.compareTo(calendar50) == 0) == calendar45.equals(calendar50));
    }

    @Test
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test057");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Calendar.Builder builder4 = builder0.setTimeZone(timeZone1);
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str6 = locale5.getLanguage();
        java.lang.String str7 = locale5.getDisplayScript();
        java.util.Calendar.Builder builder8 = builder4.setLocale(locale5);
        java.util.Calendar calendar9 = builder8.build();
        java.util.Calendar.Builder builder11 = builder8.setLenient(true);
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone12.hasSameRules(timeZone13);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone12);
        java.util.TimeZone timeZone16 = calendar15.getTimeZone();
        java.util.TimeZone timeZone17 = calendar15.getTimeZone();
        boolean boolean18 = calendar15.isWeekDateSupported();
        int int20 = calendar15.getLeastMaximum(10);
        int int21 = calendar15.getWeekYear();
        java.lang.String str22 = calendar15.getCalendarType();
        calendar15.setTimeInMillis((long) (short) -1);
        java.util.TimeZone timeZone25 = calendar15.getTimeZone();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance();
        int int28 = calendar26.getActualMaximum(4);
        java.util.TimeZone timeZone30 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone30);
        java.util.TimeZone timeZone32 = fastDateFormat31.getTimeZone();
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone32);
        calendar26.setTimeZone(timeZone32);
        timeZone32.setID("21 Feb 2022 14:45:52 GMT");
        boolean boolean37 = timeZone25.hasSameRules(timeZone32);
        java.util.Calendar.Builder builder38 = builder11.setTimeZone(timeZone32);
        java.util.Calendar.Builder builder40 = builder11.setLenient(false);
        java.util.Calendar.Builder builder42 = builder11.setLenient(true);
        java.util.Calendar.Builder builder44 = builder42.setInstant((long) 999);
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        boolean boolean47 = timeZone45.hasSameRules(timeZone46);
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(timeZone45);
        java.util.TimeZone timeZone49 = calendar48.getTimeZone();
        java.util.TimeZone timeZone50 = calendar48.getTimeZone();
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        boolean boolean53 = timeZone51.hasSameRules(timeZone52);
        java.util.Calendar calendar54 = java.util.Calendar.getInstance(timeZone51);
        java.util.TimeZone.setDefault(timeZone51);
        calendar48.setTimeZone(timeZone51);
        java.util.Calendar.Builder builder57 = builder44.setTimeZone(timeZone51);
        java.util.Calendar calendar58 = builder57.build();
        boolean boolean59 = calendar58.isWeekDateSupported();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar26 and calendar48", (calendar26.compareTo(calendar48) == 0) == calendar26.equals(calendar48));
    }

    @Test
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test058");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        java.util.TimeZone timeZone4 = calendar3.getTimeZone();
        timeZone4.setID("21 Feb 2022 14:45:49 GMT");
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone4, locale7);
        boolean boolean9 = locale7.hasExtensions();
        java.text.AttributedCharacterIterator.Attribute attribute10 = java.text.AttributedCharacterIterator.Attribute.LANGUAGE;
        java.lang.String str11 = attribute10.toString();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone12.hasSameRules(timeZone13);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone12);
        java.util.Locale locale16 = java.util.Locale.CHINA;
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone12, locale16);
        java.lang.String str18 = locale16.getDisplayCountry();
        java.util.Set<java.lang.String> strSet19 = locale16.getUnicodeLocaleKeys();
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(locale16);
        boolean boolean21 = attribute10.equals((java.lang.Object) locale16);
        java.lang.String str22 = locale7.getDisplayName(locale16);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar15", (calendar3.compareTo(calendar15) == 0) == calendar3.equals(calendar15));
    }

    @Test
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test059");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.lang.String str1 = locale0.getLanguage();
        boolean boolean2 = locale0.hasExtensions();
        java.lang.String str3 = locale0.getDisplayCountry();
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(locale0);
        java.util.Date date5 = new java.util.Date();
        int int6 = date5.getTimezoneOffset();
        long long7 = date5.getTime();
        calendar4.setTime(date5);
        java.util.Date date9 = calendar4.getTime();
        java.util.TimeZone timeZone11 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone11);
        java.util.TimeZone timeZone13 = fastDateFormat12.getTimeZone();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone13);
        java.util.Locale locale15 = java.util.Locale.US;
        java.lang.String str17 = locale15.getExtension('a');
        java.util.Set<java.lang.Character> charSet18 = locale15.getExtensionKeys();
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone13, locale15);
        timeZone13.setRawOffset(59);
        calendar4.setTimeZone(timeZone13);
        calendar4.roll((int) (short) 10, 56);
        java.util.Locale locale27 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(locale27);
        int int30 = calendar28.getMinimum(13);
        java.util.Calendar.Builder builder31 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        boolean boolean34 = timeZone32.hasSameRules(timeZone33);
        java.util.Calendar.Builder builder35 = builder31.setTimeZone(timeZone32);
        calendar28.setTimeZone(timeZone32);
        java.util.Locale.Category category37 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale38 = java.util.Locale.getDefault(category37);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat39 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone32, locale38);
        int int40 = timeZone32.getRawOffset();
        java.lang.String str41 = timeZone32.getID();
        calendar4.setTimeZone(timeZone32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar14 and calendar28", (calendar14.compareTo(calendar28) == 0) == calendar14.equals(calendar28));
    }

    @Test
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test060");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        java.util.TimeZone timeZone4 = calendar3.getTimeZone();
        java.util.TimeZone timeZone5 = calendar3.getTimeZone();
        boolean boolean6 = calendar3.isWeekDateSupported();
        int int8 = calendar3.getLeastMaximum(10);
        int int9 = calendar3.getWeekYear();
        java.lang.String str10 = calendar3.getCalendarType();
        calendar3.setTimeInMillis((long) (short) -1);
        java.util.TimeZone timeZone13 = calendar3.getTimeZone();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance();
        int int16 = calendar14.getActualMaximum(4);
        java.util.TimeZone timeZone18 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat19 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone18);
        java.util.TimeZone timeZone20 = fastDateFormat19.getTimeZone();
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone20);
        calendar14.setTimeZone(timeZone20);
        timeZone20.setID("21 Feb 2022 14:45:52 GMT");
        boolean boolean25 = timeZone13.hasSameRules(timeZone20);
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        boolean boolean28 = timeZone26.hasSameRules(timeZone27);
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(timeZone26);
        boolean boolean30 = timeZone20.hasSameRules(timeZone26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar14 and calendar29", (calendar14.compareTo(calendar29) == 0) == calendar14.equals(calendar29));
    }

    @Test
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test061");
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        boolean boolean6 = locale5.hasExtensions();
        java.util.Locale locale7 = java.util.Locale.FRANCE;
        java.util.Locale locale8 = java.util.Locale.CHINESE;
        java.lang.String str9 = locale8.getLanguage();
        java.util.Locale[] localeArray10 = new java.util.Locale[] { locale4, locale5, locale7, locale8 };
        java.util.ArrayList<java.util.Locale> localeList11 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList11, localeArray10);
        java.util.Locale.FilteringMode filteringMode13 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList14 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.util.Locale>) localeList11, filteringMode13);
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        boolean boolean20 = locale19.hasExtensions();
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.util.Locale locale22 = java.util.Locale.CHINESE;
        java.lang.String str23 = locale22.getLanguage();
        java.util.Locale[] localeArray24 = new java.util.Locale[] { locale18, locale19, locale21, locale22 };
        java.util.ArrayList<java.util.Locale> localeList25 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList25, localeArray24);
        java.util.Locale.FilteringMode filteringMode27 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList28 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.util.Locale>) localeList25, filteringMode27);
        int int29 = localeList14.indexOf((java.lang.Object) filteringMode27);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList31 = java.util.Locale.LanguageRange.parse("zh");
        java.util.Set<java.lang.String> strSet32 = java.util.Calendar.getAvailableCalendarTypes();
        java.lang.String str33 = java.util.Locale.lookupTag(languageRangeList31, (java.util.Collection<java.lang.String>) strSet32);
        boolean boolean34 = localeList14.retainAll((java.util.Collection<java.lang.String>) strSet32);
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        boolean boolean38 = timeZone36.hasSameRules(timeZone37);
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(timeZone36);
        java.util.Locale.Category category40 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale41 = java.util.Locale.getDefault(category40);
        java.lang.String str42 = locale41.getISO3Language();
        java.lang.String str43 = locale41.getDisplayLanguage();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(3, timeZone36, locale41);
        java.util.Calendar calendar45 = java.util.Calendar.getInstance(timeZone36);
        boolean boolean46 = localeList14.remove((java.lang.Object) timeZone36);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat47 = org.apache.commons.lang3.time.FastDateFormat.getInstance("2022-2-21 14:46:01", timeZone36);
        java.util.Locale locale48 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale48);
        java.util.Calendar calendar50 = java.util.Calendar.getInstance(timeZone36, locale48);
        java.util.Locale locale51 = locale48.stripExtensions();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar39 and calendar50", (calendar39.compareTo(calendar50) == 0) == calendar39.equals(calendar50));
    }

    @Test
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test062");
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone2.hasSameRules(timeZone3);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone2);
        java.util.Locale locale6 = java.util.Locale.CHINA;
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone2, locale6);
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone8.hasSameRules(timeZone9);
        boolean boolean11 = timeZone9.observesDaylightTime();
        boolean boolean12 = timeZone2.hasSameRules(timeZone9);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (byte) 0, timeZone2);
        timeZone2.setRawOffset(16);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone2);
        int int17 = fastDateFormat16.getMaxLengthEstimate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar7", (calendar5.compareTo(calendar7) == 0) == calendar5.equals(calendar7));
    }

    @Test
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test063");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        java.util.TimeZone timeZone4 = calendar3.getTimeZone();
        java.util.TimeZone timeZone6 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat7 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone6);
        java.util.TimeZone timeZone8 = fastDateFormat7.getTimeZone();
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone8);
        calendar3.setTimeZone(timeZone8);
        timeZone8.setID("21 Feb 2022 14:45:49 GMT");
        java.lang.String str13 = timeZone8.getID();
        java.lang.String str14 = timeZone8.getID();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        boolean boolean17 = timeZone15.hasSameRules(timeZone16);
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone15);
        java.util.TimeZone timeZone19 = calendar18.getTimeZone();
        timeZone19.setID("21 Feb 2022 14:45:49 GMT");
        java.util.Locale locale22 = java.util.Locale.ENGLISH;
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone19, locale22);
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone24.hasSameRules(timeZone25);
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone24);
        java.util.TimeZone timeZone28 = calendar27.getTimeZone();
        java.util.TimeZone timeZone30 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone30);
        java.util.TimeZone timeZone32 = fastDateFormat31.getTimeZone();
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone32);
        calendar27.setTimeZone(timeZone32);
        timeZone32.setID("21 Feb 2022 14:45:49 GMT");
        boolean boolean37 = timeZone19.hasSameRules(timeZone32);
        boolean boolean38 = timeZone8.hasSameRules(timeZone32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar23", (calendar3.compareTo(calendar23) == 0) == calendar3.equals(calendar23));
    }

    @Test
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test064");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int2 = calendar0.getActualMaximum(4);
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone4);
        java.util.TimeZone timeZone6 = fastDateFormat5.getTimeZone();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone6);
        calendar0.setTimeZone(timeZone6);
        java.lang.String str9 = timeZone6.getID();
        java.util.Locale locale11 = new java.util.Locale("zh_TW");
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(locale11);
        java.lang.String str13 = timeZone6.getDisplayName(locale11);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar0 and calendar12", (calendar0.compareTo(calendar12) == 0) == calendar0.equals(calendar12));
    }

    @Test
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test065");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = java.util.Locale.FRANCE;
        boolean boolean8 = locale7.hasExtensions();
        java.util.Locale locale9 = java.util.Locale.FRANCE;
        java.util.Locale locale10 = java.util.Locale.CHINESE;
        java.lang.String str11 = locale10.getLanguage();
        java.util.Locale[] localeArray12 = new java.util.Locale[] { locale6, locale7, locale9, locale10 };
        java.util.ArrayList<java.util.Locale> localeList13 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList13, localeArray12);
        java.util.Locale.FilteringMode filteringMode15 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList16 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList13, filteringMode15);
        int int18 = localeList16.lastIndexOf((java.lang.Object) 11);
        java.util.Locale locale19 = java.util.Locale.CHINESE;
        java.lang.String str20 = locale19.getLanguage();
        boolean boolean21 = locale19.hasExtensions();
        java.lang.String str22 = locale19.getDisplayCountry();
        java.util.Set<java.lang.String> strSet23 = locale19.getUnicodeLocaleKeys();
        boolean boolean24 = localeList16.containsAll((java.util.Collection<java.lang.String>) strSet23);
        java.util.Locale.FilteringMode filteringMode25 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList26 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList16, filteringMode25);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone27.hasSameRules(timeZone28);
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone27);
        java.util.Locale locale31 = java.util.Locale.CHINA;
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(timeZone27, locale31);
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        boolean boolean35 = timeZone33.hasSameRules(timeZone34);
        boolean boolean36 = timeZone34.observesDaylightTime();
        boolean boolean37 = timeZone27.hasSameRules(timeZone34);
        boolean boolean38 = localeList16.remove((java.lang.Object) timeZone34);
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(timeZone34);
        calendar39.setLenient(false);
        java.time.Instant instant42 = calendar39.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar30 and calendar32", (calendar30.compareTo(calendar32) == 0) == calendar30.equals(calendar32));
    }

    @Test
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test066");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        java.util.Locale locale4 = java.util.Locale.CHINA;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone0, locale4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone6.hasSameRules(timeZone7);
        boolean boolean9 = timeZone7.observesDaylightTime();
        boolean boolean10 = timeZone0.hasSameRules(timeZone7);
        java.lang.String str11 = timeZone7.getID();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar5", (calendar3.compareTo(calendar5) == 0) == calendar3.equals(calendar5));
    }

    @Test
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test067");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        java.util.TimeZone timeZone4 = calendar3.getTimeZone();
        timeZone4.setID("21 Feb 2022 14:45:49 GMT");
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone4, locale7);
        java.util.Locale locale9 = locale7.stripExtensions();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar8", (calendar3.compareTo(calendar8) == 0) == calendar3.equals(calendar8));
    }

    @Test
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test068");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("java.util.GregorianCalendar[time=1645454792267,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=1645454754087,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=54,MILLISECOND=87,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=46,SECOND=32,MILLISECOND=267,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.lang.String str2 = locale1.toLanguageTag();
        java.lang.String str3 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder4 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone5.hasSameRules(timeZone6);
        java.util.Calendar.Builder builder8 = builder4.setTimeZone(timeZone5);
        java.util.Locale locale9 = java.util.Locale.CHINESE;
        java.lang.String str10 = locale9.getLanguage();
        java.lang.String str11 = locale9.getDisplayScript();
        java.util.Calendar.Builder builder12 = builder8.setLocale(locale9);
        java.util.Calendar.Builder builder14 = builder12.setLenient(false);
        java.util.Calendar.Builder builder17 = builder14.set((int) (short) 1, 100);
        java.util.Calendar.Builder builder19 = builder14.setLenient(false);
        java.util.Locale locale20 = java.util.Locale.CHINESE;
        java.lang.String str21 = locale20.getLanguage();
        boolean boolean22 = locale20.hasExtensions();
        java.lang.String str23 = locale20.getDisplayCountry();
        java.util.Set<java.lang.String> strSet24 = locale20.getUnicodeLocaleKeys();
        java.lang.String str25 = locale20.getDisplayLanguage();
        java.util.Calendar.Builder builder26 = builder14.setLocale(locale20);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        boolean boolean30 = timeZone28.hasSameRules(timeZone29);
        boolean boolean31 = timeZone27.hasSameRules(timeZone28);
        timeZone27.setID("java.util.GregorianCalendar[time=1645454754087,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=54,MILLISECOND=87,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale35 = java.util.Locale.forLanguageTag("English");
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(timeZone27, locale35);
        java.util.Locale locale37 = java.util.Locale.SIMPLIFIED_CHINESE;
        boolean boolean38 = locale37.hasExtensions();
        java.lang.String str39 = locale35.getDisplayName(locale37);
        java.lang.String str40 = locale37.getDisplayCountry();
        boolean boolean41 = locale37.hasExtensions();
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone43 = java.util.TimeZone.getDefault();
        boolean boolean44 = timeZone42.hasSameRules(timeZone43);
        java.util.Calendar calendar45 = java.util.Calendar.getInstance(timeZone42);
        java.util.TimeZone timeZone46 = calendar45.getTimeZone();
        java.util.TimeZone timeZone47 = calendar45.getTimeZone();
        boolean boolean48 = timeZone47.observesDaylightTime();
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone50 = java.util.TimeZone.getDefault();
        boolean boolean51 = timeZone49.hasSameRules(timeZone50);
        java.util.Calendar calendar52 = java.util.Calendar.getInstance(timeZone49);
        java.util.Locale locale53 = java.util.Locale.CHINA;
        java.util.Calendar calendar54 = java.util.Calendar.getInstance(timeZone49, locale53);
        java.util.Calendar calendar55 = java.util.Calendar.getInstance(timeZone47, locale53);
        java.lang.String str56 = locale37.getDisplayVariant(locale53);
        java.lang.String str57 = locale20.getDisplayLanguage(locale53);
        java.lang.String str58 = locale1.getDisplayCountry(locale20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar36 and calendar45", (calendar36.compareTo(calendar45) == 0) == calendar36.equals(calendar45));
    }

    @Test
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test069");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Calendar.Builder builder4 = builder0.setTimeZone(timeZone1);
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str6 = locale5.getLanguage();
        java.lang.String str7 = locale5.getDisplayScript();
        java.util.Calendar.Builder builder8 = builder4.setLocale(locale5);
        java.util.Calendar.Builder builder10 = builder8.setLenient(false);
        java.util.Calendar.Builder builder15 = builder8.setTimeOfDay(0, 0, (int) (short) 100, (int) (byte) 1);
        java.util.Calendar.Builder builder19 = builder8.setTimeOfDay(21, 21, 0);
        java.util.Calendar calendar20 = java.util.Calendar.getInstance();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        boolean boolean23 = timeZone21.hasSameRules(timeZone22);
        boolean boolean24 = timeZone22.observesDaylightTime();
        calendar20.setTimeZone(timeZone22);
        java.util.Calendar.Builder builder26 = builder19.setTimeZone(timeZone22);
        java.util.Calendar.Builder builder30 = builder19.setDate(30, 47, (int) (byte) -1);
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        boolean boolean33 = timeZone31.hasSameRules(timeZone32);
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone31);
        java.util.TimeZone timeZone35 = calendar34.getTimeZone();
        timeZone35.setID("21 Feb 2022 14:45:49 GMT");
        java.util.Locale locale38 = java.util.Locale.ENGLISH;
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(timeZone35, locale38);
        java.util.TimeZone timeZone40 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        boolean boolean42 = timeZone40.hasSameRules(timeZone41);
        java.util.Calendar calendar43 = java.util.Calendar.getInstance(timeZone40);
        java.util.TimeZone timeZone44 = calendar43.getTimeZone();
        java.util.TimeZone timeZone46 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat47 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone46);
        java.util.TimeZone timeZone48 = fastDateFormat47.getTimeZone();
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(timeZone48);
        calendar43.setTimeZone(timeZone48);
        timeZone48.setID("21 Feb 2022 14:45:49 GMT");
        boolean boolean53 = timeZone35.hasSameRules(timeZone48);
        java.util.Calendar.Builder builder54 = builder19.setTimeZone(timeZone35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar20 and calendar34", (calendar20.compareTo(calendar34) == 0) == calendar20.equals(calendar34));
    }

    @Test
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test070");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.lang.String str8 = locale7.getLanguage();
        java.util.Locale[] localeArray9 = new java.util.Locale[] { locale3, locale4, locale6, locale7 };
        java.util.ArrayList<java.util.Locale> localeList10 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList10, localeArray9);
        java.util.Locale.FilteringMode filteringMode12 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList13 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList10, filteringMode12);
        int int15 = localeList13.lastIndexOf((java.lang.Object) 11);
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.lang.String str17 = locale16.getLanguage();
        boolean boolean18 = locale16.hasExtensions();
        java.lang.String str19 = locale16.getDisplayCountry();
        java.util.Set<java.lang.String> strSet20 = locale16.getUnicodeLocaleKeys();
        boolean boolean21 = localeList13.containsAll((java.util.Collection<java.lang.String>) strSet20);
        java.util.ListIterator<java.util.Locale> localeItor22 = localeList13.listIterator();
        boolean boolean23 = localeList13.isEmpty();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone24.hasSameRules(timeZone25);
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone24);
        java.util.Locale locale28 = java.util.Locale.CHINA;
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(timeZone24, locale28);
        timeZone24.setID("java.util.GregorianCalendar[time=1645454754087,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=54,MILLISECOND=87,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale33 = new java.util.Locale("java.util.GregorianCalendar[time=1645454753591,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=53,MILLISECOND=591,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale34 = java.util.Locale.US;
        java.lang.String str36 = locale34.getExtension('a');
        java.util.Set<java.lang.Character> charSet37 = locale34.getExtensionKeys();
        java.lang.String str38 = locale34.getDisplayCountry();
        java.lang.String str39 = locale34.getDisplayVariant();
        java.util.Locale.setDefault(locale34);
        java.lang.String str41 = locale33.getDisplayVariant(locale34);
        java.util.Calendar calendar42 = java.util.Calendar.getInstance(timeZone24, locale34);
        boolean boolean43 = localeList13.add(locale34);
        java.util.ListIterator<java.util.Locale> localeItor44 = localeList13.listIterator();
        java.lang.Object[] objArray45 = localeList13.toArray();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar27 and calendar29", (calendar27.compareTo(calendar29) == 0) == calendar27.equals(calendar29));
    }

    @Test
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test071");
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        int int3 = calendar1.getActualMaximum(4);
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone5);
        java.util.TimeZone timeZone7 = fastDateFormat6.getTimeZone();
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone7);
        calendar1.setTimeZone(timeZone7);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\u534f\u8c03\u4e16\u754c\u65f6\u95f4", timeZone7);
        java.text.ParsePosition parsePosition13 = new java.text.ParsePosition(3);
        java.util.Locale locale14 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(locale14);
        java.util.Date date16 = calendar15.getTime();
        java.util.Date date17 = new java.util.Date();
        int int18 = date17.getDay();
        boolean boolean19 = date16.before(date17);
        java.lang.String str20 = date16.toGMTString();
        boolean boolean21 = parsePosition13.equals((java.lang.Object) str20);
        java.lang.Object obj22 = fastDateFormat10.parseObject("12:01:00 AM UTC", parsePosition13);
        java.util.TimeZone timeZone23 = fastDateFormat10.getTimeZone();
        timeZone23.setID("Wed Feb 23 01:47:43 GMT+00:00 2022");
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar1 and calendar15", (calendar1.compareTo(calendar15) == 0) == calendar1.equals(calendar15));
    }

    @Test
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test072");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.CHINESE;
        java.lang.String str4 = locale3.getLanguage();
        java.lang.String str5 = locale3.getDisplayScript();
        java.lang.String str6 = locale3.getDisplayScript();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone1, locale3);
        java.util.Locale locale8 = java.util.Locale.CHINESE;
        java.lang.String str9 = locale8.getLanguage();
        boolean boolean10 = locale8.hasExtensions();
        java.lang.String str11 = locale8.getDisplayCountry();
        java.lang.String str12 = locale8.getDisplayLanguage();
        java.lang.String str13 = locale8.getLanguage();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(locale8);
        boolean boolean15 = calendar7.after((java.lang.Object) locale8);
        calendar7.setLenient(false);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        boolean boolean20 = timeZone18.hasSameRules(timeZone19);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone18);
        java.util.TimeZone timeZone22 = calendar21.getTimeZone();
        java.util.TimeZone timeZone23 = calendar21.getTimeZone();
        boolean boolean24 = timeZone23.observesDaylightTime();
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone23);
        calendar7.setTimeZone(timeZone23);
        java.lang.String str27 = timeZone23.getDisplayName();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar7 and calendar14", (calendar7.compareTo(calendar14) == 0) == calendar7.equals(calendar14));
    }

    @Test
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test073");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3);
        java.util.TimeZone timeZone7 = calendar6.getTimeZone();
        int int8 = calendar6.getFirstDayOfWeek();
        int int9 = calendar6.getFirstDayOfWeek();
        calendar6.setTimeInMillis((long) 100);
        calendar6.setFirstDayOfWeek(7);
        int int14 = calendar6.getMinimalDaysInFirstWeek();
        calendar6.set((int) '#', 17, (int) (byte) 10, (int) (short) 1, (int) (byte) 1);
        java.lang.StringBuffer stringBuffer21 = null;
        java.lang.StringBuffer stringBuffer22 = fastDateFormat2.format(calendar6, stringBuffer21);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance();
        int int25 = calendar23.getActualMaximum(4);
        java.util.TimeZone timeZone27 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone27);
        java.util.TimeZone timeZone29 = fastDateFormat28.getTimeZone();
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone29);
        calendar23.setTimeZone(timeZone29);
        int int32 = calendar23.getFirstDayOfWeek();
        int int34 = calendar23.getActualMaximum((int) (short) 1);
        java.lang.StringBuffer stringBuffer35 = null;
        java.lang.StringBuffer stringBuffer36 = fastDateFormat2.format(calendar23, stringBuffer35);
        java.lang.String str37 = fastDateFormat2.getPattern();
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone39 = java.util.TimeZone.getDefault();
        boolean boolean40 = timeZone38.hasSameRules(timeZone39);
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(timeZone38);
        java.time.Instant instant42 = calendar41.toInstant();
        int int43 = calendar41.getFirstDayOfWeek();
        boolean boolean45 = calendar41.after((java.lang.Object) 15);
        java.util.Date date46 = calendar41.getTime();
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        boolean boolean50 = timeZone48.hasSameRules(timeZone49);
        java.util.Calendar calendar51 = java.util.Calendar.getInstance(timeZone48);
        java.util.Locale.Category category52 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale53 = java.util.Locale.getDefault(category52);
        java.lang.String str54 = locale53.getISO3Language();
        java.lang.String str55 = locale53.getDisplayLanguage();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat56 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(3, timeZone48, locale53);
        calendar41.setTimeZone(timeZone48);
        calendar41.setFirstDayOfWeek(48);
        java.lang.StringBuffer stringBuffer60 = null;
        java.lang.StringBuffer stringBuffer61 = fastDateFormat2.format(calendar41, stringBuffer60);
        java.text.Format.Field field62 = null;
        java.text.FieldPosition fieldPosition63 = new java.text.FieldPosition(field62);
        int int64 = fieldPosition63.getBeginIndex();
        int int65 = fieldPosition63.getField();
        java.util.Date date66 = new java.util.Date();
        int int67 = date66.getSeconds();
        int int68 = date66.getHours();
        boolean boolean69 = fieldPosition63.equals((java.lang.Object) date66);
        date66.setHours(8);
        java.lang.String str72 = fastDateFormat2.format(date66);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar23 and calendar41", (calendar23.compareTo(calendar41) == 0) == calendar23.equals(calendar41));
    }

    @Test
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test074");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        java.util.TimeZone timeZone4 = calendar3.getTimeZone();
        int int5 = calendar3.getFirstDayOfWeek();
        int int6 = calendar3.getFirstDayOfWeek();
        calendar3.setTimeInMillis((long) 100);
        calendar3.setFirstDayOfWeek(7);
        int int11 = calendar3.getMinimalDaysInFirstWeek();
        int int13 = calendar3.getActualMaximum((int) (short) 10);
        java.lang.String str14 = calendar3.getCalendarType();
        java.util.Calendar calendar15 = java.util.Calendar.getInstance();
        java.util.Date date16 = calendar15.getTime();
        calendar3.setTime(date16);
        int int18 = date16.getYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar15", (calendar3.compareTo(calendar15) == 0) == calendar3.equals(calendar15));
    }

    @Test
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test075");
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        int int3 = calendar1.getActualMaximum(4);
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone5);
        java.util.TimeZone timeZone7 = fastDateFormat6.getTimeZone();
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone7);
        calendar1.setTimeZone(timeZone7);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\u534f\u8c03\u4e16\u754c\u65f6\u95f4", timeZone7);
        java.util.TimeZone.setDefault(timeZone7);
        java.util.Locale.Builder builder12 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder14 = builder12.setLanguage("");
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.lang.String str16 = locale15.getLanguage();
        boolean boolean17 = locale15.hasExtensions();
        java.lang.String str18 = locale15.getDisplayCountry();
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(locale15);
        java.util.Locale.Builder builder20 = builder14.setLocale(locale15);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone7, locale15);
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.Locale locale25 = java.util.Locale.GERMAN;
        java.util.Locale locale26 = java.util.Locale.FRANCE;
        boolean boolean27 = locale26.hasExtensions();
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        java.util.Locale locale29 = java.util.Locale.CHINESE;
        java.lang.String str30 = locale29.getLanguage();
        java.util.Locale[] localeArray31 = new java.util.Locale[] { locale25, locale26, locale28, locale29 };
        java.util.ArrayList<java.util.Locale> localeList32 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList32, localeArray31);
        java.util.Locale.FilteringMode filteringMode34 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList35 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList32, filteringMode34);
        java.util.Spliterator<java.util.Locale> localeSpliterator36 = localeList35.spliterator();
        java.util.Locale.LanguageRange[] languageRangeArray37 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList38 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList38, languageRangeArray37);
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        java.util.Locale locale41 = java.util.Locale.FRANCE;
        boolean boolean42 = locale41.hasExtensions();
        java.util.Locale locale43 = java.util.Locale.FRANCE;
        java.util.Locale locale44 = java.util.Locale.CHINESE;
        java.lang.String str45 = locale44.getLanguage();
        java.util.Locale[] localeArray46 = new java.util.Locale[] { locale40, locale41, locale43, locale44 };
        java.util.ArrayList<java.util.Locale> localeList47 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList47, localeArray46);
        java.util.Locale.FilteringMode filteringMode49 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, (java.util.Collection<java.util.Locale>) localeList47, filteringMode49);
        java.util.Spliterator<java.util.Locale> localeSpliterator51 = localeList50.spliterator();
        boolean boolean52 = localeList35.equals((java.lang.Object) localeSpliterator51);
        java.lang.Object[] objArray53 = localeList35.toArray();
        java.util.Locale locale54 = java.util.Locale.CHINESE;
        java.lang.String str55 = locale54.getLanguage();
        java.lang.String str56 = locale54.getDisplayScript();
        java.util.Set<java.lang.Character> charSet57 = locale54.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet58 = locale54.getExtensionKeys();
        java.util.Locale locale59 = locale54.stripExtensions();
        java.lang.String str60 = locale59.getScript();
        java.util.Locale locale62 = new java.util.Locale("java.util.GregorianCalendar[time=1645454753591,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=53,MILLISECOND=591,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale63 = java.util.Locale.US;
        java.lang.String str65 = locale63.getExtension('a');
        java.util.Set<java.lang.Character> charSet66 = locale63.getExtensionKeys();
        java.lang.String str67 = locale63.getDisplayCountry();
        java.lang.String str68 = locale63.getDisplayVariant();
        java.util.Locale.setDefault(locale63);
        java.lang.String str70 = locale62.getDisplayVariant(locale63);
        java.lang.String str71 = locale59.getDisplayName(locale63);
        boolean boolean72 = localeList35.add(locale59);
        java.util.TimeZone timeZone73 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone74 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone75 = java.util.TimeZone.getDefault();
        boolean boolean76 = timeZone74.hasSameRules(timeZone75);
        boolean boolean77 = timeZone73.hasSameRules(timeZone74);
        timeZone73.setID("java.util.GregorianCalendar[time=1645454754087,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=54,MILLISECOND=87,ZONE_OFFSET=0,DST_OFFSET=0]");
        boolean boolean80 = localeList35.equals((java.lang.Object) timeZone73);
        calendar21.setTimeZone(timeZone73);
        java.util.TimeZone.setDefault(timeZone73);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar1 and calendar19", (calendar1.compareTo(calendar19) == 0) == calendar1.equals(calendar19));
    }

    @Test
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test076");
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone2.hasSameRules(timeZone3);
        boolean boolean5 = timeZone3.observesDaylightTime();
        calendar1.setTimeZone(timeZone3);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        java.util.Locale.Category category9 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale10 = java.util.Locale.getDefault(category9);
        java.util.Locale locale11 = java.util.Locale.CHINESE;
        java.lang.String str12 = locale11.getLanguage();
        boolean boolean13 = locale11.hasExtensions();
        java.lang.String str14 = locale11.getDisplayCountry();
        java.util.Locale.setDefault(category9, locale11);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale11);
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone7, locale11);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\u7f8e\u56fd", timeZone3, locale11);
        java.util.Locale locale19 = locale11.stripExtensions();
        java.lang.String str20 = locale11.getDisplayName();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar1 and calendar17", (calendar1.compareTo(calendar17) == 0) == calendar1.equals(calendar17));
    }

    @Test
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test077");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str4 = fastDateFormat2.format((long) '#');
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone5.hasSameRules(timeZone6);
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone5);
        java.util.TimeZone timeZone9 = calendar8.getTimeZone();
        java.util.TimeZone timeZone10 = calendar8.getTimeZone();
        int int12 = calendar8.getMinimum(13);
        java.lang.String str13 = fastDateFormat2.format(calendar8);
        java.lang.String str14 = fastDateFormat2.getPattern();
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.text.ParsePosition parsePosition21 = new java.text.ParsePosition(16);
        parsePosition21.setIndex(11);
        int int24 = parsePosition21.getErrorIndex();
        java.lang.Object obj25 = fastDateFormat17.parseObject("12:00:00 AM UTC", parsePosition21);
        java.util.TimeZone timeZone26 = fastDateFormat17.getTimeZone();
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone27.hasSameRules(timeZone28);
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone27);
        java.util.TimeZone timeZone31 = calendar30.getTimeZone();
        java.util.TimeZone timeZone33 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat34 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone33);
        java.util.TimeZone timeZone35 = fastDateFormat34.getTimeZone();
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(timeZone35);
        calendar30.setTimeZone(timeZone35);
        timeZone35.setID("21 Feb 2022 14:45:49 GMT");
        timeZone35.setRawOffset(9);
        java.util.Locale locale43 = java.util.Locale.forLanguageTag("GMT");
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(timeZone35, locale43);
        java.lang.StringBuffer stringBuffer45 = null;
        java.lang.StringBuffer stringBuffer46 = fastDateFormat17.format(calendar44, stringBuffer45);
        java.util.Locale locale47 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(locale47);
        int int50 = calendar48.getMinimum(13);
        java.util.Calendar.Builder builder51 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone53 = java.util.TimeZone.getDefault();
        boolean boolean54 = timeZone52.hasSameRules(timeZone53);
        java.util.Calendar.Builder builder55 = builder51.setTimeZone(timeZone52);
        calendar48.setTimeZone(timeZone52);
        java.util.TimeZone timeZone58 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat59 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone58);
        java.lang.String str60 = fastDateFormat59.getPattern();
        java.util.TimeZone timeZone63 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat64 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone63);
        java.lang.String str65 = fastDateFormat64.getPattern();
        java.text.ParsePosition parsePosition68 = new java.text.ParsePosition(16);
        parsePosition68.setIndex(11);
        java.lang.Object obj71 = fastDateFormat64.parseObject("hi!", parsePosition68);
        java.text.ParsePosition parsePosition74 = new java.text.ParsePosition(16);
        java.lang.Object obj75 = fastDateFormat64.parseObject("hi!", parsePosition74);
        java.lang.Object obj76 = fastDateFormat59.parseObject("hi!", parsePosition74);
        boolean boolean77 = calendar48.before((java.lang.Object) "hi!");
        calendar48.set(17, 100, (int) 'a');
        calendar48.add(0, 20);
        java.util.Date date85 = calendar48.getTime();
        java.lang.StringBuffer stringBuffer86 = null;
        java.lang.StringBuffer stringBuffer87 = fastDateFormat17.format(date85, stringBuffer86);
        java.lang.String str88 = fastDateFormat2.format(date85);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar8 and calendar30", (calendar8.compareTo(calendar30) == 0) == calendar8.equals(calendar30));
    }

    @Test
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test078");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        java.util.Locale locale4 = java.util.Locale.CHINA;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone0, locale4);
        java.lang.String str6 = locale4.getDisplayCountry();
        java.util.Set<java.lang.String> strSet7 = locale4.getUnicodeLocaleKeys();
        java.lang.String str8 = locale4.getDisplayLanguage();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar5", (calendar3.compareTo(calendar5) == 0) == calendar3.equals(calendar5));
    }

    @Test
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test079");
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        int int3 = calendar1.getActualMaximum(4);
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone5);
        java.util.TimeZone timeZone7 = fastDateFormat6.getTimeZone();
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone7);
        calendar1.setTimeZone(timeZone7);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\u534f\u8c03\u4e16\u754c\u65f6\u95f4", timeZone7);
        java.util.TimeZone.setDefault(timeZone7);
        java.util.Locale.Builder builder12 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder14 = builder12.setLanguage("");
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.lang.String str16 = locale15.getLanguage();
        boolean boolean17 = locale15.hasExtensions();
        java.lang.String str18 = locale15.getDisplayCountry();
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(locale15);
        java.util.Locale.Builder builder20 = builder14.setLocale(locale15);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone7, locale15);
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone22.hasSameRules(timeZone23);
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone22);
        java.util.Locale locale26 = java.util.Locale.CHINA;
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone22, locale26);
        timeZone22.setID("java.util.GregorianCalendar[time=1645454754087,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=54,MILLISECOND=87,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale31 = new java.util.Locale("java.util.GregorianCalendar[time=1645454753591,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=53,MILLISECOND=591,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale32 = java.util.Locale.US;
        java.lang.String str34 = locale32.getExtension('a');
        java.util.Set<java.lang.Character> charSet35 = locale32.getExtensionKeys();
        java.lang.String str36 = locale32.getDisplayCountry();
        java.lang.String str37 = locale32.getDisplayVariant();
        java.util.Locale.setDefault(locale32);
        java.lang.String str39 = locale31.getDisplayVariant(locale32);
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(timeZone22, locale32);
        java.lang.String str42 = locale32.getExtension('u');
        java.lang.String str43 = locale15.getDisplayLanguage(locale32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar1 and calendar25", (calendar1.compareTo(calendar25) == 0) == calendar1.equals(calendar25));
    }

    @Test
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test080");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("java.text.ParsePosition[index=16,errorIndex=-1]");
        java.time.ZoneId zoneId4 = timeZone3.toZoneId();
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone3);
        java.util.Locale locale6 = java.util.Locale.US;
        java.lang.String str8 = locale6.getExtension('a');
        java.util.Set<java.lang.Character> charSet9 = locale6.getExtensionKeys();
        java.lang.String str10 = locale6.getDisplayCountry();
        java.util.Locale.LanguageRange[] languageRangeArray11 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList12 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12, languageRangeArray11);
        java.util.Locale locale14 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(locale14);
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.lang.String str17 = locale16.getLanguage();
        java.lang.String str19 = locale16.getExtension('a');
        java.util.Locale locale20 = java.util.Locale.CHINESE;
        java.lang.String str21 = locale20.getLanguage();
        boolean boolean22 = locale20.hasExtensions();
        java.lang.String str23 = locale20.getDisplayCountry();
        java.util.Locale locale24 = java.util.Locale.JAPANESE;
        java.util.Locale locale25 = java.util.Locale.JAPAN;
        java.util.Locale locale26 = java.util.Locale.JAPANESE;
        java.util.Locale locale30 = new java.util.Locale("", "hi!", "");
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        boolean boolean32 = locale31.hasExtensions();
        java.util.Locale locale33 = java.util.Locale.CHINESE;
        java.lang.String str34 = locale33.getLanguage();
        java.util.Locale locale35 = java.util.Locale.CHINA;
        java.util.Locale locale36 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray37 = new java.util.Locale[] { locale14, locale16, locale20, locale24, locale25, locale26, locale30, locale31, locale33, locale35, locale36 };
        java.util.ArrayList<java.util.Locale> localeList38 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList38, localeArray37);
        java.util.Locale.LanguageRange[] languageRangeArray40 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList41 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList41, languageRangeArray40);
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.util.Locale locale44 = java.util.Locale.FRANCE;
        boolean boolean45 = locale44.hasExtensions();
        java.util.Locale locale46 = java.util.Locale.FRANCE;
        java.util.Locale locale47 = java.util.Locale.CHINESE;
        java.lang.String str48 = locale47.getLanguage();
        java.util.Locale[] localeArray49 = new java.util.Locale[] { locale43, locale44, locale46, locale47 };
        java.util.ArrayList<java.util.Locale> localeList50 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList50, localeArray49);
        java.util.Locale.FilteringMode filteringMode52 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList53 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList41, (java.util.Collection<java.util.Locale>) localeList50, filteringMode52);
        java.util.List<java.util.Locale> localeList54 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.util.Locale>) localeList38, filteringMode52);
        java.util.Locale locale55 = java.util.Locale.ITALIAN;
        java.util.Set<java.lang.String> strSet56 = locale55.getUnicodeLocaleAttributes();
        boolean boolean57 = localeList54.add(locale55);
        java.lang.String str58 = locale6.getDisplayVariant(locale55);
        java.util.Calendar calendar59 = java.util.Calendar.getInstance(locale6);
        java.lang.String str60 = locale6.getISO3Language();
        java.util.Set<java.lang.Character> charSet61 = locale6.getExtensionKeys();
        java.util.Locale locale62 = locale6.stripExtensions();
        java.util.Locale locale63 = java.util.Locale.US;
        java.lang.String str65 = locale63.getExtension('a');
        java.util.Set<java.lang.Character> charSet66 = locale63.getExtensionKeys();
        java.lang.String str67 = locale63.getDisplayCountry();
        java.lang.String str68 = locale62.getDisplayScript(locale63);
        java.util.Set<java.lang.String> strSet69 = locale63.getUnicodeLocaleKeys();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat70 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 0, timeZone3, locale63);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar15", (calendar5.compareTo(calendar15) == 0) == calendar5.equals(calendar15));
    }

    @Test
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test081");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.lang.String str8 = locale7.getLanguage();
        java.util.Locale[] localeArray9 = new java.util.Locale[] { locale3, locale4, locale6, locale7 };
        java.util.ArrayList<java.util.Locale> localeList10 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList10, localeArray9);
        java.util.Locale.FilteringMode filteringMode12 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList13 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList10, filteringMode12);
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        boolean boolean15 = locale14.hasExtensions();
        boolean boolean16 = localeList13.add(locale14);
        localeList13.clear();
        java.util.ListIterator<java.util.Locale> localeItor18 = localeList13.listIterator();
        java.util.List<java.util.Locale.LanguageRange> languageRangeList20 = java.util.Locale.LanguageRange.parse("zh");
        java.util.Set<java.lang.String> strSet21 = java.util.Calendar.getAvailableCalendarTypes();
        java.lang.String str22 = java.util.Locale.lookupTag(languageRangeList20, (java.util.Collection<java.lang.String>) strSet21);
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.util.Locale locale27 = java.util.Locale.FRANCE;
        boolean boolean28 = locale27.hasExtensions();
        java.util.Locale locale29 = java.util.Locale.FRANCE;
        java.util.Locale locale30 = java.util.Locale.CHINESE;
        java.lang.String str31 = locale30.getLanguage();
        java.util.Locale[] localeArray32 = new java.util.Locale[] { locale26, locale27, locale29, locale30 };
        java.util.ArrayList<java.util.Locale> localeList33 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList33, localeArray32);
        java.util.Locale.FilteringMode filteringMode35 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList36 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.util.Locale>) localeList33, filteringMode35);
        java.util.Spliterator<java.util.Locale> localeSpliterator37 = localeList36.spliterator();
        java.util.List<java.util.Locale> localeList38 = java.util.Locale.filter(languageRangeList20, (java.util.Collection<java.util.Locale>) localeList36);
        java.util.ListIterator<java.util.Locale> localeItor39 = localeList36.listIterator();
        java.util.ListIterator<java.util.Locale> localeItor40 = localeList36.listIterator();
        java.util.Spliterator<java.util.Locale> localeSpliterator41 = localeList36.spliterator();
        java.util.Locale.LanguageRange languageRange43 = new java.util.Locale.LanguageRange("it-IT");
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] { languageRange43 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList48 = java.util.Locale.LanguageRange.parse("zh");
        java.util.Set<java.lang.String> strSet49 = java.util.Calendar.getAvailableCalendarTypes();
        java.lang.String str50 = java.util.Locale.lookupTag(languageRangeList48, (java.util.Collection<java.lang.String>) strSet49);
        java.util.stream.Stream<java.lang.String> strStream51 = strSet49.stream();
        java.util.Locale.FilteringMode filteringMode52 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList53 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.lang.String>) strSet49, filteringMode52);
        java.util.Locale locale54 = java.util.Locale.ITALIAN;
        java.util.Set<java.lang.String> strSet55 = locale54.getUnicodeLocaleAttributes();
        java.util.Locale.FilteringMode filteringMode56 = null;
        java.util.List<java.lang.String> strList57 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.lang.String>) strSet55, filteringMode56);
        boolean boolean58 = localeList36.retainAll((java.util.Collection<java.lang.String>) strSet55);
        boolean boolean59 = localeList13.containsAll((java.util.Collection<java.lang.String>) strSet55);
        java.util.TimeZone timeZone60 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone61 = java.util.TimeZone.getDefault();
        boolean boolean62 = timeZone60.hasSameRules(timeZone61);
        java.util.Calendar calendar63 = java.util.Calendar.getInstance(timeZone60);
        java.time.Instant instant64 = calendar63.toInstant();
        int int65 = calendar63.getFirstDayOfWeek();
        boolean boolean67 = calendar63.after((java.lang.Object) 15);
        java.util.Date date68 = calendar63.getTime();
        java.util.TimeZone timeZone70 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone71 = java.util.TimeZone.getDefault();
        boolean boolean72 = timeZone70.hasSameRules(timeZone71);
        java.util.Calendar calendar73 = java.util.Calendar.getInstance(timeZone70);
        java.util.Locale.Category category74 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale75 = java.util.Locale.getDefault(category74);
        java.lang.String str76 = locale75.getISO3Language();
        java.lang.String str77 = locale75.getDisplayLanguage();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat78 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(3, timeZone70, locale75);
        calendar63.setTimeZone(timeZone70);
        calendar63.setFirstDayOfWeek(48);
        int int83 = calendar63.getMinimum(0);
        int int84 = localeList13.indexOf((java.lang.Object) int83);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar63 and calendar73", (calendar63.compareTo(calendar73) == 0) == calendar63.equals(calendar73));
    }

    @Test
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test082");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        java.util.TimeZone timeZone4 = calendar3.getTimeZone();
        int int5 = calendar3.getFirstDayOfWeek();
        int int6 = calendar3.getFirstDayOfWeek();
        calendar3.setTimeInMillis((long) 100);
        java.util.Locale.LanguageRange[] languageRangeArray9 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList10 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10, languageRangeArray9);
        java.util.Locale locale12 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(locale12);
        java.util.Locale locale14 = java.util.Locale.CHINESE;
        java.lang.String str15 = locale14.getLanguage();
        java.lang.String str17 = locale14.getExtension('a');
        java.util.Locale locale18 = java.util.Locale.CHINESE;
        java.lang.String str19 = locale18.getLanguage();
        boolean boolean20 = locale18.hasExtensions();
        java.lang.String str21 = locale18.getDisplayCountry();
        java.util.Locale locale22 = java.util.Locale.JAPANESE;
        java.util.Locale locale23 = java.util.Locale.JAPAN;
        java.util.Locale locale24 = java.util.Locale.JAPANESE;
        java.util.Locale locale28 = new java.util.Locale("", "hi!", "");
        java.util.Locale locale29 = java.util.Locale.FRANCE;
        boolean boolean30 = locale29.hasExtensions();
        java.util.Locale locale31 = java.util.Locale.CHINESE;
        java.lang.String str32 = locale31.getLanguage();
        java.util.Locale locale33 = java.util.Locale.CHINA;
        java.util.Locale locale34 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray35 = new java.util.Locale[] { locale12, locale14, locale18, locale22, locale23, locale24, locale28, locale29, locale31, locale33, locale34 };
        java.util.ArrayList<java.util.Locale> localeList36 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList36, localeArray35);
        java.util.Locale.LanguageRange[] languageRangeArray38 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList39 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList39, languageRangeArray38);
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.util.Locale locale42 = java.util.Locale.FRANCE;
        boolean boolean43 = locale42.hasExtensions();
        java.util.Locale locale44 = java.util.Locale.FRANCE;
        java.util.Locale locale45 = java.util.Locale.CHINESE;
        java.lang.String str46 = locale45.getLanguage();
        java.util.Locale[] localeArray47 = new java.util.Locale[] { locale41, locale42, locale44, locale45 };
        java.util.ArrayList<java.util.Locale> localeList48 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList48, localeArray47);
        java.util.Locale.FilteringMode filteringMode50 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList51 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList39, (java.util.Collection<java.util.Locale>) localeList48, filteringMode50);
        java.util.List<java.util.Locale> localeList52 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.util.Locale>) localeList36, filteringMode50);
        java.util.Locale locale53 = java.util.Locale.ITALIAN;
        java.util.Set<java.lang.String> strSet54 = locale53.getUnicodeLocaleAttributes();
        boolean boolean55 = localeList52.add(locale53);
        boolean boolean56 = calendar3.after((java.lang.Object) localeList52);
        calendar3.setFirstDayOfWeek(51);
        calendar3.setLenient(false);
        java.util.TimeZone timeZone61 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone62 = java.util.TimeZone.getDefault();
        boolean boolean63 = timeZone61.hasSameRules(timeZone62);
        java.util.Calendar calendar64 = java.util.Calendar.getInstance(timeZone61);
        java.util.TimeZone timeZone65 = calendar64.getTimeZone();
        int int66 = calendar64.getFirstDayOfWeek();
        int int67 = calendar64.getFirstDayOfWeek();
        calendar64.setTimeInMillis((long) 100);
        calendar64.setFirstDayOfWeek(7);
        int int72 = calendar64.getMinimalDaysInFirstWeek();
        int int74 = calendar64.getActualMaximum((int) (short) 10);
        java.lang.String str75 = calendar64.getCalendarType();
        java.util.Calendar calendar76 = java.util.Calendar.getInstance();
        java.util.Date date77 = calendar76.getTime();
        calendar64.setTime(date77);
        calendar3.setTime(date77);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar13 and calendar64", (calendar13.compareTo(calendar64) == 0) == calendar13.equals(calendar64));
    }

    @Test
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test083");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        java.util.Locale locale4 = java.util.Locale.CHINA;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone0, locale4);
        calendar5.setTimeInMillis((long) 6);
        int int8 = calendar5.getMinimalDaysInFirstWeek();
        java.util.TimeZone timeZone10 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone10);
        java.util.TimeZone timeZone12 = fastDateFormat11.getTimeZone();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone12);
        java.util.Locale locale14 = java.util.Locale.US;
        java.lang.String str16 = locale14.getExtension('a');
        java.util.Set<java.lang.Character> charSet17 = locale14.getExtensionKeys();
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone12, locale14);
        calendar5.setTimeZone(timeZone12);
        boolean boolean20 = timeZone12.useDaylightTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar18", (calendar3.compareTo(calendar18) == 0) == calendar3.equals(calendar18));
    }

    @Test
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test084");
        java.text.AttributedCharacterIterator.Attribute attribute0 = java.text.AttributedCharacterIterator.Attribute.LANGUAGE;
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        long long3 = date1.getTime();
        java.util.Date date4 = new java.util.Date();
        int int5 = date4.getTimezoneOffset();
        date4.setMinutes(5);
        int int8 = date4.getTimezoneOffset();
        date4.setDate(9);
        boolean boolean11 = date1.before(date4);
        int int12 = date1.getSeconds();
        boolean boolean13 = attribute0.equals((java.lang.Object) int12);
        java.util.TimeZone timeZone15 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone15);
        java.util.Locale locale17 = fastDateFormat16.getLocale();
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(locale17);
        boolean boolean19 = attribute0.equals((java.lang.Object) locale17);
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone21);
        java.util.Locale locale23 = fastDateFormat22.getLocale();
        java.lang.String str24 = fastDateFormat22.getPattern();
        java.lang.Object obj25 = fastDateFormat22.clone();
        boolean boolean26 = attribute0.equals((java.lang.Object) fastDateFormat22);
        java.lang.String str27 = attribute0.toString();
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        boolean boolean29 = locale28.hasExtensions();
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(locale28);
        boolean boolean31 = attribute0.equals((java.lang.Object) locale28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar18 and calendar30", (calendar18.compareTo(calendar30) == 0) == calendar18.equals(calendar30));
    }

    @Test
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test085");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Calendar.Builder builder4 = builder0.setTimeZone(timeZone1);
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str6 = locale5.getLanguage();
        java.lang.String str7 = locale5.getDisplayScript();
        java.util.Calendar.Builder builder8 = builder4.setLocale(locale5);
        java.util.Calendar calendar9 = builder8.build();
        java.util.Calendar.Builder builder11 = builder8.setLenient(true);
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone12.hasSameRules(timeZone13);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone12);
        java.util.TimeZone timeZone16 = calendar15.getTimeZone();
        java.util.TimeZone timeZone17 = calendar15.getTimeZone();
        boolean boolean18 = calendar15.isWeekDateSupported();
        int int20 = calendar15.getLeastMaximum(10);
        int int21 = calendar15.getWeekYear();
        java.lang.String str22 = calendar15.getCalendarType();
        calendar15.setTimeInMillis((long) (short) -1);
        java.util.TimeZone timeZone25 = calendar15.getTimeZone();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance();
        int int28 = calendar26.getActualMaximum(4);
        java.util.TimeZone timeZone30 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone30);
        java.util.TimeZone timeZone32 = fastDateFormat31.getTimeZone();
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone32);
        calendar26.setTimeZone(timeZone32);
        timeZone32.setID("21 Feb 2022 14:45:52 GMT");
        boolean boolean37 = timeZone25.hasSameRules(timeZone32);
        java.util.Calendar.Builder builder38 = builder11.setTimeZone(timeZone32);
        java.util.Calendar.Builder builder41 = builder38.set(10, 17);
        java.util.Calendar calendar42 = builder41.build();
        java.util.Calendar.Builder builder45 = builder41.set(6, 15);
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone47 = java.util.TimeZone.getDefault();
        boolean boolean48 = timeZone46.hasSameRules(timeZone47);
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(timeZone46);
        java.util.TimeZone timeZone50 = calendar49.getTimeZone();
        java.util.TimeZone timeZone51 = calendar49.getTimeZone();
        boolean boolean52 = calendar49.isWeekDateSupported();
        int int54 = calendar49.getLeastMaximum(10);
        int int55 = calendar49.getWeekYear();
        java.lang.String str56 = calendar49.getCalendarType();
        calendar49.setTimeInMillis((long) (short) -1);
        java.util.TimeZone timeZone59 = calendar49.getTimeZone();
        java.util.Calendar calendar60 = java.util.Calendar.getInstance();
        int int62 = calendar60.getActualMaximum(4);
        java.util.TimeZone timeZone64 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat65 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone64);
        java.util.TimeZone timeZone66 = fastDateFormat65.getTimeZone();
        java.util.Calendar calendar67 = java.util.Calendar.getInstance(timeZone66);
        calendar60.setTimeZone(timeZone66);
        timeZone66.setID("21 Feb 2022 14:45:52 GMT");
        boolean boolean71 = timeZone59.hasSameRules(timeZone66);
        java.lang.String str72 = timeZone66.getID();
        java.util.Calendar.Builder builder73 = builder45.setTimeZone(timeZone66);
        java.util.Date date79 = new java.util.Date(48, (int) (byte) 100, 48, 50, 49);
        date79.setDate(0);
        date79.setTime((-2220479108000L));
        long long84 = date79.getTime();
        int int85 = date79.getDate();
        boolean boolean86 = timeZone66.inDaylightTime(date79);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar15 and calendar49", (calendar15.compareTo(calendar49) == 0) == calendar15.equals(calendar49));
    }

    @Test
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test086");
        java.util.Locale locale1 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale1);
        java.util.Date date3 = calendar2.getTime();
        calendar2.setFirstDayOfWeek((int) (short) 10);
        int int7 = calendar2.getActualMaximum(3);
        int int8 = calendar2.getMinimalDaysInFirstWeek();
        int int10 = calendar2.getGreatestMinimum(5);
        java.util.TimeZone timeZone11 = calendar2.getTimeZone();
        java.util.Locale locale12 = java.util.Locale.US;
        java.lang.String str14 = locale12.getExtension('a');
        java.util.Set<java.lang.Character> charSet15 = locale12.getExtensionKeys();
        java.lang.String str16 = locale12.getDisplayCountry();
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Locale locale20 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(locale20);
        java.util.Locale locale22 = java.util.Locale.CHINESE;
        java.lang.String str23 = locale22.getLanguage();
        java.lang.String str25 = locale22.getExtension('a');
        java.util.Locale locale26 = java.util.Locale.CHINESE;
        java.lang.String str27 = locale26.getLanguage();
        boolean boolean28 = locale26.hasExtensions();
        java.lang.String str29 = locale26.getDisplayCountry();
        java.util.Locale locale30 = java.util.Locale.JAPANESE;
        java.util.Locale locale31 = java.util.Locale.JAPAN;
        java.util.Locale locale32 = java.util.Locale.JAPANESE;
        java.util.Locale locale36 = new java.util.Locale("", "hi!", "");
        java.util.Locale locale37 = java.util.Locale.FRANCE;
        boolean boolean38 = locale37.hasExtensions();
        java.util.Locale locale39 = java.util.Locale.CHINESE;
        java.lang.String str40 = locale39.getLanguage();
        java.util.Locale locale41 = java.util.Locale.CHINA;
        java.util.Locale locale42 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray43 = new java.util.Locale[] { locale20, locale22, locale26, locale30, locale31, locale32, locale36, locale37, locale39, locale41, locale42 };
        java.util.ArrayList<java.util.Locale> localeList44 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList44, localeArray43);
        java.util.Locale.LanguageRange[] languageRangeArray46 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList47 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList47, languageRangeArray46);
        java.util.Locale locale49 = java.util.Locale.GERMAN;
        java.util.Locale locale50 = java.util.Locale.FRANCE;
        boolean boolean51 = locale50.hasExtensions();
        java.util.Locale locale52 = java.util.Locale.FRANCE;
        java.util.Locale locale53 = java.util.Locale.CHINESE;
        java.lang.String str54 = locale53.getLanguage();
        java.util.Locale[] localeArray55 = new java.util.Locale[] { locale49, locale50, locale52, locale53 };
        java.util.ArrayList<java.util.Locale> localeList56 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList56, localeArray55);
        java.util.Locale.FilteringMode filteringMode58 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList59 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList47, (java.util.Collection<java.util.Locale>) localeList56, filteringMode58);
        java.util.List<java.util.Locale> localeList60 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList44, filteringMode58);
        java.util.Locale locale61 = java.util.Locale.ITALIAN;
        java.util.Set<java.lang.String> strSet62 = locale61.getUnicodeLocaleAttributes();
        boolean boolean63 = localeList60.add(locale61);
        java.lang.String str64 = locale12.getDisplayVariant(locale61);
        java.util.Calendar calendar65 = java.util.Calendar.getInstance(locale12);
        java.lang.String str66 = locale12.getISO3Language();
        java.util.Set<java.lang.Character> charSet67 = locale12.getExtensionKeys();
        java.util.Locale locale68 = locale12.stripExtensions();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat69 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone11, locale12);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar2 and calendar21", (calendar2.compareTo(calendar21) == 0) == calendar2.equals(calendar21));
    }

    @Test
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test087");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        java.util.TimeZone timeZone4 = calendar3.getTimeZone();
        java.util.TimeZone timeZone5 = calendar3.getTimeZone();
        boolean boolean6 = calendar3.isWeekDateSupported();
        int int8 = calendar3.getLeastMaximum(10);
        int int9 = calendar3.getWeekYear();
        java.util.TimeZone timeZone11 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone11);
        java.lang.String str13 = fastDateFormat12.getPattern();
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.text.ParsePosition parsePosition21 = new java.text.ParsePosition(16);
        parsePosition21.setIndex(11);
        java.lang.Object obj24 = fastDateFormat17.parseObject("hi!", parsePosition21);
        java.text.ParsePosition parsePosition27 = new java.text.ParsePosition(16);
        java.lang.Object obj28 = fastDateFormat17.parseObject("hi!", parsePosition27);
        java.lang.Object obj29 = fastDateFormat12.parseObject("hi!", parsePosition27);
        boolean boolean30 = calendar3.after(obj29);
        java.time.Instant instant31 = calendar3.toInstant();
        java.util.Date date32 = new java.util.Date();
        int int33 = date32.getSeconds();
        int int34 = date32.getHours();
        java.util.Date date36 = new java.util.Date("21 Feb 2022 14:45:48 GMT");
        boolean boolean37 = date32.before(date36);
        calendar3.setTime(date36);
        java.util.TimeZone timeZone39 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone40 = java.util.TimeZone.getDefault();
        boolean boolean41 = timeZone39.hasSameRules(timeZone40);
        java.util.Calendar calendar42 = java.util.Calendar.getInstance(timeZone39);
        java.util.Locale locale43 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(locale43);
        java.util.Date date45 = calendar44.getTime();
        java.util.Date date46 = new java.util.Date();
        int int47 = date46.getDay();
        boolean boolean48 = date45.before(date46);
        calendar42.setTime(date46);
        int int50 = date46.getYear();
        int int51 = date46.getYear();
        int int52 = date46.getSeconds();
        date46.setMonth(7);
        boolean boolean55 = date36.after(date46);
        date36.setYear(12);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar42 and calendar44", (calendar42.compareTo(calendar44) == 0) == calendar42.equals(calendar44));
    }

    @Test
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test088");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        java.util.TimeZone timeZone4 = calendar3.getTimeZone();
        java.util.TimeZone timeZone5 = calendar3.getTimeZone();
        java.lang.String str6 = timeZone5.getID();
        timeZone5.setRawOffset(9);
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone5);
        int int10 = calendar9.getWeekYear();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone11.hasSameRules(timeZone12);
        java.util.Locale locale14 = java.util.Locale.CHINESE;
        java.lang.String str15 = locale14.getLanguage();
        java.lang.String str16 = locale14.getDisplayScript();
        java.lang.String str17 = locale14.getDisplayScript();
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone12, locale14);
        java.util.TimeZone timeZone19 = calendar18.getTimeZone();
        boolean boolean20 = timeZone19.observesDaylightTime();
        calendar9.setTimeZone(timeZone19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar18", (calendar3.compareTo(calendar18) == 0) == calendar3.equals(calendar18));
    }

    @Test
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test089");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str4 = fastDateFormat2.format((long) '#');
        java.util.TimeZone timeZone5 = fastDateFormat2.getTimeZone();
        int int6 = timeZone5.getRawOffset();
        timeZone5.setRawOffset(3);
        java.util.TimeZone timeZone10 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone10);
        java.lang.String str12 = fastDateFormat11.getPattern();
        java.util.Date date13 = new java.util.Date();
        int int14 = date13.getSeconds();
        java.lang.String str15 = fastDateFormat11.format(date13);
        java.util.Locale locale16 = fastDateFormat11.getLocale();
        java.util.Locale locale17 = fastDateFormat11.getLocale();
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        boolean boolean21 = timeZone19.hasSameRules(timeZone20);
        boolean boolean22 = timeZone18.hasSameRules(timeZone19);
        timeZone18.setID("java.util.GregorianCalendar[time=1645454754087,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=54,MILLISECOND=87,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale26 = java.util.Locale.forLanguageTag("English");
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone18, locale26);
        java.util.Locale locale28 = java.util.Locale.SIMPLIFIED_CHINESE;
        boolean boolean29 = locale28.hasExtensions();
        java.lang.String str30 = locale26.getDisplayName(locale28);
        java.lang.String str31 = locale28.getDisplayCountry();
        boolean boolean32 = locale28.hasExtensions();
        java.lang.String str33 = locale17.getDisplayScript(locale28);
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone35);
        java.util.TimeZone timeZone37 = fastDateFormat36.getTimeZone();
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(timeZone37);
        java.util.Locale locale39 = java.util.Locale.US;
        java.lang.String str41 = locale39.getExtension('a');
        java.util.Set<java.lang.Character> charSet42 = locale39.getExtensionKeys();
        java.util.Calendar calendar43 = java.util.Calendar.getInstance(timeZone37, locale39);
        java.lang.String str44 = locale28.getDisplayLanguage(locale39);
        java.lang.String str45 = timeZone5.getDisplayName(locale28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar27 and calendar38", (calendar27.compareTo(calendar38) == 0) == calendar27.equals(calendar38));
    }

    @Test
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test090");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("java.text.ParsePosition[index=16,errorIndex=-1]");
        java.time.ZoneId zoneId2 = timeZone1.toZoneId();
        java.util.Locale locale3 = java.util.Locale.US;
        java.lang.String str5 = locale3.getExtension('a');
        java.util.Set<java.lang.Character> charSet6 = locale3.getExtensionKeys();
        java.lang.String str7 = locale3.getDisplayCountry();
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.Locale locale11 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(locale11);
        java.util.Locale locale13 = java.util.Locale.CHINESE;
        java.lang.String str14 = locale13.getLanguage();
        java.lang.String str16 = locale13.getExtension('a');
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.lang.String str18 = locale17.getLanguage();
        boolean boolean19 = locale17.hasExtensions();
        java.lang.String str20 = locale17.getDisplayCountry();
        java.util.Locale locale21 = java.util.Locale.JAPANESE;
        java.util.Locale locale22 = java.util.Locale.JAPAN;
        java.util.Locale locale23 = java.util.Locale.JAPANESE;
        java.util.Locale locale27 = new java.util.Locale("", "hi!", "");
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        boolean boolean29 = locale28.hasExtensions();
        java.util.Locale locale30 = java.util.Locale.CHINESE;
        java.lang.String str31 = locale30.getLanguage();
        java.util.Locale locale32 = java.util.Locale.CHINA;
        java.util.Locale locale33 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray34 = new java.util.Locale[] { locale11, locale13, locale17, locale21, locale22, locale23, locale27, locale28, locale30, locale32, locale33 };
        java.util.ArrayList<java.util.Locale> localeList35 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList35, localeArray34);
        java.util.Locale.LanguageRange[] languageRangeArray37 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList38 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList38, languageRangeArray37);
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        java.util.Locale locale41 = java.util.Locale.FRANCE;
        boolean boolean42 = locale41.hasExtensions();
        java.util.Locale locale43 = java.util.Locale.FRANCE;
        java.util.Locale locale44 = java.util.Locale.CHINESE;
        java.lang.String str45 = locale44.getLanguage();
        java.util.Locale[] localeArray46 = new java.util.Locale[] { locale40, locale41, locale43, locale44 };
        java.util.ArrayList<java.util.Locale> localeList47 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList47, localeArray46);
        java.util.Locale.FilteringMode filteringMode49 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, (java.util.Collection<java.util.Locale>) localeList47, filteringMode49);
        java.util.List<java.util.Locale> localeList51 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList35, filteringMode49);
        java.util.Locale locale52 = java.util.Locale.ITALIAN;
        java.util.Set<java.lang.String> strSet53 = locale52.getUnicodeLocaleAttributes();
        boolean boolean54 = localeList51.add(locale52);
        java.lang.String str55 = locale3.getDisplayVariant(locale52);
        java.util.Calendar calendar56 = java.util.Calendar.getInstance(locale3);
        java.lang.String str57 = locale3.getISO3Language();
        java.util.Calendar calendar58 = java.util.Calendar.getInstance(timeZone1, locale3);
        java.lang.String str59 = locale3.getISO3Country();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar12 and calendar58", (calendar12.compareTo(calendar58) == 0) == calendar12.equals(calendar58));
    }

    @Test
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test091");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Calendar.Builder builder4 = builder0.setTimeZone(timeZone1);
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str6 = locale5.getLanguage();
        java.lang.String str7 = locale5.getDisplayScript();
        java.util.Calendar.Builder builder8 = builder4.setLocale(locale5);
        java.util.Calendar calendar9 = builder8.build();
        java.util.Calendar.Builder builder11 = builder8.setLenient(true);
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone12.hasSameRules(timeZone13);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone12);
        java.util.TimeZone timeZone16 = calendar15.getTimeZone();
        java.util.TimeZone timeZone17 = calendar15.getTimeZone();
        boolean boolean18 = calendar15.isWeekDateSupported();
        int int20 = calendar15.getLeastMaximum(10);
        int int21 = calendar15.getWeekYear();
        java.lang.String str22 = calendar15.getCalendarType();
        calendar15.setTimeInMillis((long) (short) -1);
        java.util.TimeZone timeZone25 = calendar15.getTimeZone();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance();
        int int28 = calendar26.getActualMaximum(4);
        java.util.TimeZone timeZone30 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone30);
        java.util.TimeZone timeZone32 = fastDateFormat31.getTimeZone();
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone32);
        calendar26.setTimeZone(timeZone32);
        timeZone32.setID("21 Feb 2022 14:45:52 GMT");
        boolean boolean37 = timeZone25.hasSameRules(timeZone32);
        java.util.Calendar.Builder builder38 = builder11.setTimeZone(timeZone32);
        java.util.Calendar.Builder builder40 = builder11.setLenient(false);
        java.util.Calendar.Builder builder42 = builder11.setLenient(true);
        java.util.Calendar.Builder builder44 = builder42.setInstant((long) 999);
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        boolean boolean47 = timeZone45.hasSameRules(timeZone46);
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(timeZone45);
        java.util.TimeZone timeZone49 = calendar48.getTimeZone();
        java.util.TimeZone timeZone50 = calendar48.getTimeZone();
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        boolean boolean53 = timeZone51.hasSameRules(timeZone52);
        java.util.Calendar calendar54 = java.util.Calendar.getInstance(timeZone51);
        java.util.TimeZone.setDefault(timeZone51);
        calendar48.setTimeZone(timeZone51);
        java.util.Calendar.Builder builder57 = builder44.setTimeZone(timeZone51);
        java.util.Locale locale58 = java.util.Locale.JAPANESE;
        java.lang.String str59 = locale58.getDisplayVariant();
        java.util.Calendar.Builder builder60 = builder44.setLocale(locale58);
        java.lang.String str61 = locale58.getDisplayLanguage();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar26 and calendar48", (calendar26.compareTo(calendar48) == 0) == calendar26.equals(calendar48));
    }

    @Test
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test092");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        java.util.TimeZone timeZone4 = calendar3.getTimeZone();
        java.util.TimeZone timeZone5 = calendar3.getTimeZone();
        boolean boolean6 = calendar3.isWeekDateSupported();
        int int8 = calendar3.getLeastMaximum(10);
        java.util.Date date9 = new java.util.Date();
        int int10 = date9.getSeconds();
        long long11 = date9.getTime();
        calendar3.setTime(date9);
        java.util.Date date13 = new java.util.Date();
        int int14 = date13.getSeconds();
        java.util.Date date15 = new java.util.Date();
        int int16 = date15.getTimezoneOffset();
        date15.setMinutes(5);
        boolean boolean19 = date13.after(date15);
        int int20 = date13.getMinutes();
        boolean boolean21 = date9.after(date13);
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        boolean boolean25 = timeZone23.hasSameRules(timeZone24);
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(timeZone23);
        java.util.TimeZone timeZone27 = calendar26.getTimeZone();
        java.util.TimeZone timeZone28 = calendar26.getTimeZone();
        boolean boolean29 = calendar26.isWeekDateSupported();
        int int31 = calendar26.getLeastMaximum(10);
        int int32 = calendar26.getWeekYear();
        java.lang.String str33 = calendar26.getCalendarType();
        calendar26.setTimeInMillis((long) (short) -1);
        java.util.TimeZone timeZone36 = calendar26.getTimeZone();
        java.util.Calendar calendar37 = java.util.Calendar.getInstance();
        int int39 = calendar37.getActualMaximum(4);
        java.util.TimeZone timeZone41 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat42 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone41);
        java.util.TimeZone timeZone43 = fastDateFormat42.getTimeZone();
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(timeZone43);
        calendar37.setTimeZone(timeZone43);
        timeZone43.setID("21 Feb 2022 14:45:52 GMT");
        boolean boolean48 = timeZone36.hasSameRules(timeZone43);
        java.util.Locale locale49 = java.util.Locale.CHINESE;
        java.lang.String str50 = locale49.getLanguage();
        boolean boolean51 = locale49.hasExtensions();
        java.lang.String str52 = locale49.getDisplayCountry();
        java.lang.String str53 = locale49.getDisplayLanguage();
        java.lang.String str54 = locale49.getLanguage();
        java.lang.String str55 = locale49.getDisplayVariant();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat56 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, timeZone43, locale49);
        boolean boolean57 = date9.equals((java.lang.Object) 1);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar37", (calendar3.compareTo(calendar37) == 0) == calendar3.equals(calendar37));
    }

    @Test
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test093");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.CHINESE;
        java.lang.String str4 = locale3.getLanguage();
        java.lang.String str5 = locale3.getDisplayScript();
        java.lang.String str6 = locale3.getDisplayScript();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone1, locale3);
        java.util.TimeZone timeZone8 = calendar7.getTimeZone();
        java.util.TimeZone timeZone10 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone10);
        java.util.TimeZone timeZone12 = fastDateFormat11.getTimeZone();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone12);
        java.util.Locale locale14 = java.util.Locale.US;
        java.lang.String str16 = locale14.getExtension('a');
        java.util.Set<java.lang.Character> charSet17 = locale14.getExtensionKeys();
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone12, locale14);
        calendar7.setTimeZone(timeZone12);
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = java.util.Locale.FRANCE;
        boolean boolean25 = locale24.hasExtensions();
        java.util.Locale locale26 = java.util.Locale.FRANCE;
        java.util.Locale locale27 = java.util.Locale.CHINESE;
        java.lang.String str28 = locale27.getLanguage();
        java.util.Locale[] localeArray29 = new java.util.Locale[] { locale23, locale24, locale26, locale27 };
        java.util.ArrayList<java.util.Locale> localeList30 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList30, localeArray29);
        java.util.Locale.FilteringMode filteringMode32 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList33 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.util.Locale>) localeList30, filteringMode32);
        localeList33.clear();
        java.util.Date date35 = new java.util.Date();
        int int36 = date35.getSeconds();
        java.util.Date date37 = new java.util.Date();
        int int38 = date37.getTimezoneOffset();
        date37.setMinutes(5);
        boolean boolean41 = date35.after(date37);
        boolean boolean42 = localeList33.contains((java.lang.Object) date35);
        java.lang.String str43 = date35.toGMTString();
        calendar7.setTime(date35);
        calendar7.set(0, 28, 9, 56, 19);
        int int51 = calendar7.getWeekYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar13 and calendar18", (calendar13.compareTo(calendar18) == 0) == calendar13.equals(calendar18));
    }

    @Test
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test094");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Calendar.Builder builder4 = builder0.setTimeZone(timeZone1);
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str6 = locale5.getLanguage();
        java.lang.String str7 = locale5.getDisplayScript();
        java.util.Calendar.Builder builder8 = builder4.setLocale(locale5);
        java.util.Calendar calendar9 = builder8.build();
        java.util.Calendar.Builder builder11 = builder8.setLenient(true);
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone12.hasSameRules(timeZone13);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone12);
        java.util.TimeZone timeZone16 = calendar15.getTimeZone();
        java.util.TimeZone timeZone17 = calendar15.getTimeZone();
        boolean boolean18 = calendar15.isWeekDateSupported();
        int int20 = calendar15.getLeastMaximum(10);
        int int21 = calendar15.getWeekYear();
        java.lang.String str22 = calendar15.getCalendarType();
        calendar15.setTimeInMillis((long) (short) -1);
        java.util.TimeZone timeZone25 = calendar15.getTimeZone();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance();
        int int28 = calendar26.getActualMaximum(4);
        java.util.TimeZone timeZone30 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone30);
        java.util.TimeZone timeZone32 = fastDateFormat31.getTimeZone();
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone32);
        calendar26.setTimeZone(timeZone32);
        timeZone32.setID("21 Feb 2022 14:45:52 GMT");
        boolean boolean37 = timeZone25.hasSameRules(timeZone32);
        java.util.Calendar.Builder builder38 = builder11.setTimeZone(timeZone32);
        java.util.Locale locale39 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(locale39);
        java.lang.String str41 = locale39.getVariant();
        java.lang.String str42 = locale39.getDisplayName();
        java.lang.String str43 = locale39.getISO3Country();
        java.lang.String str44 = locale39.getDisplayName();
        java.util.Calendar.Builder builder45 = builder11.setLocale(locale39);
        java.util.Locale locale46 = java.util.Locale.FRANCE;
        boolean boolean47 = locale46.hasExtensions();
        java.util.Calendar.Builder builder48 = builder11.setLocale(locale46);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar26 and calendar40", (calendar26.compareTo(calendar40) == 0) == calendar26.equals(calendar40));
    }

    @Test
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test095");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Calendar.Builder builder4 = builder0.setTimeZone(timeZone1);
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str6 = locale5.getLanguage();
        java.lang.String str7 = locale5.getDisplayScript();
        java.util.Calendar.Builder builder8 = builder4.setLocale(locale5);
        java.util.Calendar.Builder builder12 = builder4.setDate(0, 9, 56);
        java.util.Locale locale13 = java.util.Locale.CHINESE;
        java.lang.String str14 = locale13.getLanguage();
        java.lang.String str15 = locale13.getDisplayScript();
        java.util.Set<java.lang.Character> charSet16 = locale13.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet17 = locale13.getExtensionKeys();
        java.util.Locale locale18 = locale13.stripExtensions();
        java.lang.String str19 = locale18.getScript();
        java.util.Locale locale21 = new java.util.Locale("java.util.GregorianCalendar[time=1645454753591,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=53,MILLISECOND=591,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale22 = java.util.Locale.US;
        java.lang.String str24 = locale22.getExtension('a');
        java.util.Set<java.lang.Character> charSet25 = locale22.getExtensionKeys();
        java.lang.String str26 = locale22.getDisplayCountry();
        java.lang.String str27 = locale22.getDisplayVariant();
        java.util.Locale.setDefault(locale22);
        java.lang.String str29 = locale21.getDisplayVariant(locale22);
        java.lang.String str30 = locale18.getDisplayName(locale22);
        boolean boolean31 = locale18.hasExtensions();
        java.util.Calendar.Builder builder32 = builder4.setLocale(locale18);
        java.util.Calendar.Builder builder34 = builder32.setLenient(true);
        java.util.TimeZone timeZone36 = java.util.TimeZone.getTimeZone("Fri Jan 21 14:45:48 UTC 2022");
        int int37 = timeZone36.getRawOffset();
        java.time.ZoneId zoneId38 = timeZone36.toZoneId();
        java.util.Calendar.Builder builder39 = builder32.setTimeZone(timeZone36);
        timeZone36.setRawOffset(53);
        java.util.Calendar.Builder builder42 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone43 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        boolean boolean45 = timeZone43.hasSameRules(timeZone44);
        java.util.Calendar.Builder builder46 = builder42.setTimeZone(timeZone43);
        java.util.Locale locale47 = java.util.Locale.CHINESE;
        java.lang.String str48 = locale47.getLanguage();
        java.lang.String str49 = locale47.getDisplayScript();
        java.util.Calendar.Builder builder50 = builder46.setLocale(locale47);
        java.util.Calendar.Builder builder52 = builder50.setLenient(false);
        java.util.Calendar.Builder builder55 = builder52.set((int) (short) 1, 100);
        java.util.Calendar.Builder builder57 = builder52.setLenient(false);
        java.util.Locale locale58 = java.util.Locale.CHINESE;
        java.lang.String str59 = locale58.getLanguage();
        boolean boolean60 = locale58.hasExtensions();
        java.lang.String str61 = locale58.getDisplayCountry();
        java.util.Set<java.lang.String> strSet62 = locale58.getUnicodeLocaleKeys();
        java.lang.String str63 = locale58.getDisplayLanguage();
        java.util.Calendar.Builder builder64 = builder52.setLocale(locale58);
        java.util.TimeZone timeZone65 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone66 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone67 = java.util.TimeZone.getDefault();
        boolean boolean68 = timeZone66.hasSameRules(timeZone67);
        boolean boolean69 = timeZone65.hasSameRules(timeZone66);
        timeZone65.setID("java.util.GregorianCalendar[time=1645454754087,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=54,MILLISECOND=87,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale73 = java.util.Locale.forLanguageTag("English");
        java.util.Calendar calendar74 = java.util.Calendar.getInstance(timeZone65, locale73);
        java.util.Locale locale75 = java.util.Locale.SIMPLIFIED_CHINESE;
        boolean boolean76 = locale75.hasExtensions();
        java.lang.String str77 = locale73.getDisplayName(locale75);
        java.lang.String str78 = locale75.getDisplayCountry();
        boolean boolean79 = locale75.hasExtensions();
        java.util.TimeZone timeZone80 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone81 = java.util.TimeZone.getDefault();
        boolean boolean82 = timeZone80.hasSameRules(timeZone81);
        java.util.Calendar calendar83 = java.util.Calendar.getInstance(timeZone80);
        java.util.TimeZone timeZone84 = calendar83.getTimeZone();
        java.util.TimeZone timeZone85 = calendar83.getTimeZone();
        boolean boolean86 = timeZone85.observesDaylightTime();
        java.util.TimeZone timeZone87 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone88 = java.util.TimeZone.getDefault();
        boolean boolean89 = timeZone87.hasSameRules(timeZone88);
        java.util.Calendar calendar90 = java.util.Calendar.getInstance(timeZone87);
        java.util.Locale locale91 = java.util.Locale.CHINA;
        java.util.Calendar calendar92 = java.util.Calendar.getInstance(timeZone87, locale91);
        java.util.Calendar calendar93 = java.util.Calendar.getInstance(timeZone85, locale91);
        java.lang.String str94 = locale75.getDisplayVariant(locale91);
        java.lang.String str95 = locale58.getDisplayLanguage(locale91);
        java.util.Calendar calendar96 = java.util.Calendar.getInstance(timeZone36, locale58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar74 and calendar83", (calendar74.compareTo(calendar83) == 0) == calendar74.equals(calendar83));
    }

    @Test
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test096");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        boolean boolean4 = timeZone0.hasSameRules(timeZone1);
        timeZone0.setID("java.util.GregorianCalendar[time=1645454754087,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=54,MILLISECOND=87,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale8 = java.util.Locale.forLanguageTag("English");
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone0, locale8);
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        boolean boolean11 = locale10.hasExtensions();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = locale10.getDisplayCountry();
        boolean boolean14 = locale10.hasExtensions();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        boolean boolean17 = timeZone15.hasSameRules(timeZone16);
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone15);
        java.util.TimeZone timeZone19 = calendar18.getTimeZone();
        java.util.TimeZone timeZone20 = calendar18.getTimeZone();
        boolean boolean21 = timeZone20.observesDaylightTime();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone22.hasSameRules(timeZone23);
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone22);
        java.util.Locale locale26 = java.util.Locale.CHINA;
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone22, locale26);
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(timeZone20, locale26);
        java.lang.String str29 = locale10.getDisplayVariant(locale26);
        java.util.Locale.setDefault(locale10);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar9 and calendar18", (calendar9.compareTo(calendar18) == 0) == calendar9.equals(calendar18));
    }

    @Test
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test097");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        boolean boolean1 = locale0.hasExtensions();
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale0);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = java.util.Locale.FRANCE;
        boolean boolean8 = locale7.hasExtensions();
        java.util.Locale locale9 = java.util.Locale.FRANCE;
        java.util.Locale locale10 = java.util.Locale.CHINESE;
        java.lang.String str11 = locale10.getLanguage();
        java.util.Locale[] localeArray12 = new java.util.Locale[] { locale6, locale7, locale9, locale10 };
        java.util.ArrayList<java.util.Locale> localeList13 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList13, localeArray12);
        java.util.Locale.FilteringMode filteringMode15 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList16 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList13, filteringMode15);
        java.util.Spliterator<java.util.Locale> localeSpliterator17 = localeList16.spliterator();
        java.util.Locale.LanguageRange[] languageRangeArray18 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList19 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19, languageRangeArray18);
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        boolean boolean23 = locale22.hasExtensions();
        java.util.Locale locale24 = java.util.Locale.FRANCE;
        java.util.Locale locale25 = java.util.Locale.CHINESE;
        java.lang.String str26 = locale25.getLanguage();
        java.util.Locale[] localeArray27 = new java.util.Locale[] { locale21, locale22, locale24, locale25 };
        java.util.ArrayList<java.util.Locale> localeList28 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList28, localeArray27);
        java.util.Locale.FilteringMode filteringMode30 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList31 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.util.Locale>) localeList28, filteringMode30);
        java.util.Spliterator<java.util.Locale> localeSpliterator32 = localeList31.spliterator();
        boolean boolean33 = localeList16.equals((java.lang.Object) localeSpliterator32);
        java.lang.Object[] objArray34 = localeList16.toArray();
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.util.Locale locale38 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(locale38);
        java.util.Locale locale40 = java.util.Locale.CHINESE;
        java.lang.String str41 = locale40.getLanguage();
        java.lang.String str43 = locale40.getExtension('a');
        java.util.Locale locale44 = java.util.Locale.CHINESE;
        java.lang.String str45 = locale44.getLanguage();
        boolean boolean46 = locale44.hasExtensions();
        java.lang.String str47 = locale44.getDisplayCountry();
        java.util.Locale locale48 = java.util.Locale.JAPANESE;
        java.util.Locale locale49 = java.util.Locale.JAPAN;
        java.util.Locale locale50 = java.util.Locale.JAPANESE;
        java.util.Locale locale54 = new java.util.Locale("", "hi!", "");
        java.util.Locale locale55 = java.util.Locale.FRANCE;
        boolean boolean56 = locale55.hasExtensions();
        java.util.Locale locale57 = java.util.Locale.CHINESE;
        java.lang.String str58 = locale57.getLanguage();
        java.util.Locale locale59 = java.util.Locale.CHINA;
        java.util.Locale locale60 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray61 = new java.util.Locale[] { locale38, locale40, locale44, locale48, locale49, locale50, locale54, locale55, locale57, locale59, locale60 };
        java.util.ArrayList<java.util.Locale> localeList62 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList62, localeArray61);
        java.util.Locale.LanguageRange[] languageRangeArray64 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList65 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList65, languageRangeArray64);
        java.util.Locale locale67 = java.util.Locale.GERMAN;
        java.util.Locale locale68 = java.util.Locale.FRANCE;
        boolean boolean69 = locale68.hasExtensions();
        java.util.Locale locale70 = java.util.Locale.FRANCE;
        java.util.Locale locale71 = java.util.Locale.CHINESE;
        java.lang.String str72 = locale71.getLanguage();
        java.util.Locale[] localeArray73 = new java.util.Locale[] { locale67, locale68, locale70, locale71 };
        java.util.ArrayList<java.util.Locale> localeList74 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList74, localeArray73);
        java.util.Locale.FilteringMode filteringMode76 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList77 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList65, (java.util.Collection<java.util.Locale>) localeList74, filteringMode76);
        java.util.List<java.util.Locale> localeList78 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.util.Locale>) localeList62, filteringMode76);
        java.util.Locale locale79 = java.util.Locale.ITALIAN;
        java.util.Set<java.lang.String> strSet80 = locale79.getUnicodeLocaleAttributes();
        boolean boolean81 = localeList78.add(locale79);
        java.util.Set<java.lang.String> strSet82 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream83 = strSet82.parallelStream();
        boolean boolean84 = localeList78.removeAll((java.util.Collection<java.lang.String>) strSet82);
        boolean boolean85 = localeList16.remove((java.lang.Object) localeList78);
        boolean boolean86 = localeList16.isEmpty();
        java.lang.Object obj87 = null;
        int int88 = localeList16.lastIndexOf(obj87);
        java.util.Calendar.Builder builder89 = new java.util.Calendar.Builder();
        int int90 = localeList16.lastIndexOf((java.lang.Object) builder89);
        java.util.TimeZone timeZone92 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat93 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone92);
        boolean boolean94 = fastDateFormat93.getTimeZoneOverridesCalendar();
        java.util.Locale locale95 = fastDateFormat93.getLocale();
        boolean boolean96 = locale95.hasExtensions();
        boolean boolean97 = localeList16.add(locale95);
        java.lang.String str98 = locale0.getDisplayCountry(locale95);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar2 and calendar39", (calendar2.compareTo(calendar39) == 0) == calendar2.equals(calendar39));
    }

    @Test
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test098");
        java.text.Format.Field field0 = null;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition(field0);
        int int2 = fieldPosition1.getBeginIndex();
        boolean boolean4 = fieldPosition1.equals((java.lang.Object) 52);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList6 = java.util.Locale.LanguageRange.parse("zh");
        java.util.Set<java.lang.String> strSet7 = java.util.Calendar.getAvailableCalendarTypes();
        java.lang.String str8 = java.util.Locale.lookupTag(languageRangeList6, (java.util.Collection<java.lang.String>) strSet7);
        java.util.Locale.LanguageRange[] languageRangeArray9 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList10 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10, languageRangeArray9);
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.util.Locale locale13 = java.util.Locale.FRANCE;
        boolean boolean14 = locale13.hasExtensions();
        java.util.Locale locale15 = java.util.Locale.FRANCE;
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.lang.String str17 = locale16.getLanguage();
        java.util.Locale[] localeArray18 = new java.util.Locale[] { locale12, locale13, locale15, locale16 };
        java.util.ArrayList<java.util.Locale> localeList19 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList19, localeArray18);
        java.util.Locale.FilteringMode filteringMode21 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList22 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.util.Locale>) localeList19, filteringMode21);
        java.util.Spliterator<java.util.Locale> localeSpliterator23 = localeList22.spliterator();
        java.util.List<java.util.Locale> localeList24 = java.util.Locale.filter(languageRangeList6, (java.util.Collection<java.util.Locale>) localeList22);
        boolean boolean25 = fieldPosition1.equals((java.lang.Object) languageRangeList6);
        java.lang.String str26 = fieldPosition1.toString();
        fieldPosition1.setEndIndex((int) '#');
        java.text.Format.Field field29 = fieldPosition1.getFieldAttribute();
        java.lang.String str30 = fieldPosition1.toString();
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        boolean boolean33 = timeZone31.hasSameRules(timeZone32);
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone31);
        java.util.Locale locale35 = java.util.Locale.CHINA;
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(timeZone31, locale35);
        timeZone31.setID("java.util.GregorianCalendar[time=1645454754087,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=54,MILLISECOND=87,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale40 = new java.util.Locale("java.util.GregorianCalendar[time=1645454753591,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=53,MILLISECOND=591,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale41 = java.util.Locale.US;
        java.lang.String str43 = locale41.getExtension('a');
        java.util.Set<java.lang.Character> charSet44 = locale41.getExtensionKeys();
        java.lang.String str45 = locale41.getDisplayCountry();
        java.lang.String str46 = locale41.getDisplayVariant();
        java.util.Locale.setDefault(locale41);
        java.lang.String str48 = locale40.getDisplayVariant(locale41);
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(timeZone31, locale41);
        java.util.Set<java.lang.Character> charSet50 = locale41.getExtensionKeys();
        boolean boolean51 = fieldPosition1.equals((java.lang.Object) charSet50);
        java.lang.String str52 = fieldPosition1.toString();
        int int53 = fieldPosition1.getBeginIndex();
        fieldPosition1.setEndIndex(17);
        java.text.Format.Field field56 = fieldPosition1.getFieldAttribute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar34 and calendar36", (calendar34.compareTo(calendar36) == 0) == calendar34.equals(calendar36));
    }

    @Test
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test099");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        java.util.Locale locale4 = java.util.Locale.CHINA;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone0, locale4);
        timeZone0.setID("java.util.GregorianCalendar[time=1645454754087,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=54,MILLISECOND=87,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale9 = new java.util.Locale("java.util.GregorianCalendar[time=1645454753591,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=53,MILLISECOND=591,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale10 = java.util.Locale.US;
        java.lang.String str12 = locale10.getExtension('a');
        java.util.Set<java.lang.Character> charSet13 = locale10.getExtensionKeys();
        java.lang.String str14 = locale10.getDisplayCountry();
        java.lang.String str15 = locale10.getDisplayVariant();
        java.util.Locale.setDefault(locale10);
        java.lang.String str17 = locale9.getDisplayVariant(locale10);
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone0, locale10);
        java.util.Calendar.Builder builder19 = new java.util.Calendar.Builder();
        java.util.Calendar calendar20 = builder19.build();
        java.util.Calendar calendar21 = java.util.Calendar.getInstance();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone22.hasSameRules(timeZone23);
        boolean boolean25 = timeZone23.observesDaylightTime();
        calendar21.setTimeZone(timeZone23);
        java.time.ZoneId zoneId27 = timeZone23.toZoneId();
        java.util.Calendar.Builder builder28 = builder19.setTimeZone(timeZone23);
        boolean boolean29 = timeZone0.hasSameRules(timeZone23);
        timeZone0.setRawOffset(27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar21", (calendar3.compareTo(calendar21) == 0) == calendar3.equals(calendar21));
    }

    @Test
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test100");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        boolean boolean4 = timeZone0.hasSameRules(timeZone1);
        timeZone0.setID("java.util.GregorianCalendar[time=1645454754087,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=54,MILLISECOND=87,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale8 = java.util.Locale.forLanguageTag("English");
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone0, locale8);
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        boolean boolean11 = locale10.hasExtensions();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = locale10.getDisplayCountry();
        boolean boolean14 = locale10.hasExtensions();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        boolean boolean17 = timeZone15.hasSameRules(timeZone16);
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone15);
        java.util.TimeZone timeZone19 = calendar18.getTimeZone();
        java.util.TimeZone timeZone20 = calendar18.getTimeZone();
        boolean boolean21 = timeZone20.observesDaylightTime();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone22.hasSameRules(timeZone23);
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone22);
        java.util.Locale locale26 = java.util.Locale.CHINA;
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone22, locale26);
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(timeZone20, locale26);
        java.lang.String str29 = locale10.getDisplayVariant(locale26);
        java.lang.String str30 = locale26.getDisplayLanguage();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar9 and calendar18", (calendar9.compareTo(calendar18) == 0) == calendar9.equals(calendar18));
    }

    @Test
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test101");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.util.Locale locale4 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(locale4);
        java.util.Date date6 = calendar5.getTime();
        java.lang.StringBuffer stringBuffer7 = null;
        java.text.Format.Field field8 = null;
        java.text.FieldPosition fieldPosition9 = new java.text.FieldPosition(field8);
        int int10 = fieldPosition9.getBeginIndex();
        boolean boolean12 = fieldPosition9.equals((java.lang.Object) 52);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList14 = java.util.Locale.LanguageRange.parse("zh");
        java.util.Set<java.lang.String> strSet15 = java.util.Calendar.getAvailableCalendarTypes();
        java.lang.String str16 = java.util.Locale.lookupTag(languageRangeList14, (java.util.Collection<java.lang.String>) strSet15);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        boolean boolean22 = locale21.hasExtensions();
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.util.Locale locale24 = java.util.Locale.CHINESE;
        java.lang.String str25 = locale24.getLanguage();
        java.util.Locale[] localeArray26 = new java.util.Locale[] { locale20, locale21, locale23, locale24 };
        java.util.ArrayList<java.util.Locale> localeList27 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList27, localeArray26);
        java.util.Locale.FilteringMode filteringMode29 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList30 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList27, filteringMode29);
        java.util.Spliterator<java.util.Locale> localeSpliterator31 = localeList30.spliterator();
        java.util.List<java.util.Locale> localeList32 = java.util.Locale.filter(languageRangeList14, (java.util.Collection<java.util.Locale>) localeList30);
        boolean boolean33 = fieldPosition9.equals((java.lang.Object) languageRangeList14);
        java.lang.String str34 = fieldPosition9.toString();
        fieldPosition9.setEndIndex((int) '#');
        java.text.Format.Field field37 = fieldPosition9.getFieldAttribute();
        java.lang.String str38 = fieldPosition9.toString();
        java.lang.StringBuffer stringBuffer39 = fastDateFormat2.format((java.lang.Object) date6, stringBuffer7, fieldPosition9);
        java.lang.StringBuffer stringBuffer41 = null;
        java.lang.StringBuffer stringBuffer42 = fastDateFormat2.format(1645454806245L, stringBuffer41);
        java.lang.String str43 = fastDateFormat2.getPattern();
        java.lang.StringBuffer stringBuffer45 = null;
        java.lang.StringBuffer stringBuffer46 = fastDateFormat2.format(1645454797657L, stringBuffer45);
        java.util.TimeZone timeZone47 = fastDateFormat2.getTimeZone();
        java.util.Date date48 = new java.util.Date();
        int int49 = date48.getTimezoneOffset();
        long long50 = date48.getTime();
        int int51 = date48.getYear();
        java.lang.String str52 = fastDateFormat2.format(date48);
        java.text.ParsePosition parsePosition55 = new java.text.ParsePosition(3);
        java.util.Locale locale56 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar57 = java.util.Calendar.getInstance(locale56);
        java.util.Date date58 = calendar57.getTime();
        java.util.Date date59 = new java.util.Date();
        int int60 = date59.getDay();
        boolean boolean61 = date58.before(date59);
        java.lang.String str62 = date58.toGMTString();
        boolean boolean63 = parsePosition55.equals((java.lang.Object) str62);
        int int64 = parsePosition55.getIndex();
        int int65 = parsePosition55.getErrorIndex();
        java.lang.Object obj66 = fastDateFormat2.parseObject("21 Feb 2022 14:48:45 GMT", parsePosition55);
        java.util.TimeZone timeZone67 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone68 = java.util.TimeZone.getDefault();
        boolean boolean69 = timeZone67.hasSameRules(timeZone68);
        java.util.Calendar calendar70 = java.util.Calendar.getInstance(timeZone67);
        java.util.TimeZone timeZone71 = calendar70.getTimeZone();
        java.util.TimeZone timeZone73 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat74 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone73);
        java.util.TimeZone timeZone75 = fastDateFormat74.getTimeZone();
        java.util.Calendar calendar76 = java.util.Calendar.getInstance(timeZone75);
        calendar70.setTimeZone(timeZone75);
        timeZone75.setID("21 Feb 2022 14:45:49 GMT");
        timeZone75.setRawOffset(9);
        java.util.Locale locale83 = java.util.Locale.forLanguageTag("GMT");
        java.util.Calendar calendar84 = java.util.Calendar.getInstance(timeZone75, locale83);
        java.util.TimeZone timeZone86 = java.util.TimeZone.getTimeZone("");
        boolean boolean87 = timeZone75.hasSameRules(timeZone86);
        java.util.Calendar calendar88 = java.util.Calendar.getInstance(timeZone86);
        java.lang.String str89 = fastDateFormat2.format(calendar88);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar57 and calendar70", (calendar57.compareTo(calendar70) == 0) == calendar57.equals(calendar70));
    }

    @Test
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test102");
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        int int3 = calendar1.getActualMaximum(4);
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone5);
        java.util.TimeZone timeZone7 = fastDateFormat6.getTimeZone();
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone7);
        calendar1.setTimeZone(timeZone7);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\u534f\u8c03\u4e16\u754c\u65f6\u95f4", timeZone7);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone11.hasSameRules(timeZone12);
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone11);
        java.util.TimeZone timeZone15 = calendar14.getTimeZone();
        java.util.TimeZone timeZone16 = calendar14.getTimeZone();
        int int18 = calendar14.getMinimum(13);
        java.util.Locale.LanguageRange[] languageRangeArray19 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList20 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList20, languageRangeArray19);
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        boolean boolean24 = locale23.hasExtensions();
        java.util.Locale locale25 = java.util.Locale.FRANCE;
        java.util.Locale locale26 = java.util.Locale.CHINESE;
        java.lang.String str27 = locale26.getLanguage();
        java.util.Locale[] localeArray28 = new java.util.Locale[] { locale22, locale23, locale25, locale26 };
        java.util.ArrayList<java.util.Locale> localeList29 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList29, localeArray28);
        java.util.Locale.FilteringMode filteringMode31 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList32 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, (java.util.Collection<java.util.Locale>) localeList29, filteringMode31);
        boolean boolean33 = calendar14.after((java.lang.Object) localeList29);
        calendar14.setLenient(false);
        java.lang.String str36 = fastDateFormat10.format(calendar14);
        boolean boolean37 = fastDateFormat10.getTimeZoneOverridesCalendar();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar1 and calendar14", (calendar1.compareTo(calendar14) == 0) == calendar1.equals(calendar14));
    }

    @Test
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test103");
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone2.hasSameRules(timeZone3);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone2);
        java.util.Locale locale6 = java.util.Locale.CHINA;
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone2, locale6);
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone8.hasSameRules(timeZone9);
        boolean boolean11 = timeZone9.observesDaylightTime();
        boolean boolean12 = timeZone2.hasSameRules(timeZone9);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (byte) 0, timeZone2);
        timeZone2.setRawOffset(16);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, timeZone2);
        java.text.AttributedCharacterIterator.Attribute attribute17 = java.text.AttributedCharacterIterator.Attribute.LANGUAGE;
        java.util.Date date18 = new java.util.Date();
        int int19 = date18.getSeconds();
        long long20 = date18.getTime();
        java.util.Date date21 = new java.util.Date();
        int int22 = date21.getTimezoneOffset();
        date21.setMinutes(5);
        int int25 = date21.getTimezoneOffset();
        date21.setDate(9);
        boolean boolean28 = date18.before(date21);
        int int29 = date18.getSeconds();
        boolean boolean30 = attribute17.equals((java.lang.Object) int29);
        java.util.Locale.LanguageRange[] languageRangeArray31 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList32 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList32, languageRangeArray31);
        java.util.Locale locale34 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(locale34);
        java.util.Locale locale36 = java.util.Locale.CHINESE;
        java.lang.String str37 = locale36.getLanguage();
        java.lang.String str39 = locale36.getExtension('a');
        java.util.Locale locale40 = java.util.Locale.CHINESE;
        java.lang.String str41 = locale40.getLanguage();
        boolean boolean42 = locale40.hasExtensions();
        java.lang.String str43 = locale40.getDisplayCountry();
        java.util.Locale locale44 = java.util.Locale.JAPANESE;
        java.util.Locale locale45 = java.util.Locale.JAPAN;
        java.util.Locale locale46 = java.util.Locale.JAPANESE;
        java.util.Locale locale50 = new java.util.Locale("", "hi!", "");
        java.util.Locale locale51 = java.util.Locale.FRANCE;
        boolean boolean52 = locale51.hasExtensions();
        java.util.Locale locale53 = java.util.Locale.CHINESE;
        java.lang.String str54 = locale53.getLanguage();
        java.util.Locale locale55 = java.util.Locale.CHINA;
        java.util.Locale locale56 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray57 = new java.util.Locale[] { locale34, locale36, locale40, locale44, locale45, locale46, locale50, locale51, locale53, locale55, locale56 };
        java.util.ArrayList<java.util.Locale> localeList58 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList58, localeArray57);
        java.util.Locale.LanguageRange[] languageRangeArray60 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList61 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList61, languageRangeArray60);
        java.util.Locale locale63 = java.util.Locale.GERMAN;
        java.util.Locale locale64 = java.util.Locale.FRANCE;
        boolean boolean65 = locale64.hasExtensions();
        java.util.Locale locale66 = java.util.Locale.FRANCE;
        java.util.Locale locale67 = java.util.Locale.CHINESE;
        java.lang.String str68 = locale67.getLanguage();
        java.util.Locale[] localeArray69 = new java.util.Locale[] { locale63, locale64, locale66, locale67 };
        java.util.ArrayList<java.util.Locale> localeList70 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList70, localeArray69);
        java.util.Locale.FilteringMode filteringMode72 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList73 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList61, (java.util.Collection<java.util.Locale>) localeList70, filteringMode72);
        java.util.List<java.util.Locale> localeList74 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, (java.util.Collection<java.util.Locale>) localeList58, filteringMode72);
        java.util.Locale locale75 = java.util.Locale.CHINESE;
        java.lang.String str76 = locale75.getLanguage();
        boolean boolean77 = locale75.hasExtensions();
        java.lang.String str78 = locale75.getDisplayCountry();
        java.lang.String str79 = locale75.getDisplayLanguage();
        java.lang.String str80 = locale75.getLanguage();
        java.util.Calendar calendar81 = java.util.Calendar.getInstance(locale75);
        int int82 = localeList74.indexOf((java.lang.Object) locale75);
        java.lang.Object[] objArray83 = localeList74.toArray();
        boolean boolean84 = attribute17.equals((java.lang.Object) objArray83);
        java.util.Calendar.Builder builder85 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone86 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone87 = java.util.TimeZone.getDefault();
        boolean boolean88 = timeZone86.hasSameRules(timeZone87);
        java.util.Calendar.Builder builder89 = builder85.setTimeZone(timeZone86);
        java.util.Calendar.Builder builder91 = builder85.setInstant((long) (short) 0);
        java.util.Calendar calendar92 = builder91.build();
        int int93 = calendar92.getMinimalDaysInFirstWeek();
        boolean boolean94 = attribute17.equals((java.lang.Object) calendar92);
        java.lang.String str95 = fastDateFormat16.format(calendar92);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar35", (calendar5.compareTo(calendar35) == 0) == calendar5.equals(calendar35));
    }

    @Test
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test104");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        java.util.Locale locale4 = java.util.Locale.CHINA;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone0, locale4);
        timeZone0.setID("java.util.GregorianCalendar[time=1645454754087,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=54,MILLISECOND=87,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale9 = new java.util.Locale("java.util.GregorianCalendar[time=1645454753591,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=53,MILLISECOND=591,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale10 = java.util.Locale.US;
        java.lang.String str12 = locale10.getExtension('a');
        java.util.Set<java.lang.Character> charSet13 = locale10.getExtensionKeys();
        java.lang.String str14 = locale10.getDisplayCountry();
        java.lang.String str15 = locale10.getDisplayVariant();
        java.util.Locale.setDefault(locale10);
        java.lang.String str17 = locale9.getDisplayVariant(locale10);
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone0, locale10);
        java.util.Locale locale21 = new java.util.Locale("Nov 5, 1936 2:10:00 PM", "java.text.FieldPosition[field=-1,attribute=null,beginIndex=13,endIndex=0]");
        java.util.Locale locale22 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(locale22);
        java.lang.String str24 = locale21.getDisplayCountry(locale22);
        java.lang.String str25 = timeZone0.getDisplayName(locale22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar23", (calendar3.compareTo(calendar23) == 0) == calendar3.equals(calendar23));
    }

    @Test
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test105");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        java.util.Locale locale4 = java.util.Locale.CHINA;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone0, locale4);
        timeZone0.setID("java.util.GregorianCalendar[time=1645454754087,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=54,MILLISECOND=87,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale9 = new java.util.Locale("java.util.GregorianCalendar[time=1645454753591,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=53,MILLISECOND=591,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale10 = java.util.Locale.US;
        java.lang.String str12 = locale10.getExtension('a');
        java.util.Set<java.lang.Character> charSet13 = locale10.getExtensionKeys();
        java.lang.String str14 = locale10.getDisplayCountry();
        java.lang.String str15 = locale10.getDisplayVariant();
        java.util.Locale.setDefault(locale10);
        java.lang.String str17 = locale9.getDisplayVariant(locale10);
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone0, locale10);
        java.util.Calendar.Builder builder19 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        boolean boolean22 = timeZone20.hasSameRules(timeZone21);
        java.util.Calendar.Builder builder23 = builder19.setTimeZone(timeZone20);
        java.util.Calendar.Builder builder25 = builder19.setLenient(true);
        java.util.TimeZone timeZone27 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone27);
        java.lang.String str29 = fastDateFormat28.getPattern();
        java.text.ParsePosition parsePosition32 = new java.text.ParsePosition(16);
        parsePosition32.setIndex(11);
        int int35 = parsePosition32.getErrorIndex();
        java.lang.Object obj36 = fastDateFormat28.parseObject("12:00:00 AM UTC", parsePosition32);
        java.util.TimeZone timeZone37 = fastDateFormat28.getTimeZone();
        java.util.Calendar.Builder builder38 = builder19.setTimeZone(timeZone37);
        boolean boolean39 = timeZone0.hasSameRules(timeZone37);
        int int40 = timeZone0.getDSTSavings();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar5", (calendar3.compareTo(calendar5) == 0) == calendar3.equals(calendar5));
    }

    @Test
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test106");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Calendar.Builder builder4 = builder0.setTimeZone(timeZone1);
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str6 = locale5.getLanguage();
        java.lang.String str7 = locale5.getDisplayScript();
        java.util.Calendar.Builder builder8 = builder4.setLocale(locale5);
        java.util.Calendar.Builder builder10 = builder8.setLenient(false);
        java.util.Locale.LanguageRange[] languageRangeArray11 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList12 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12, languageRangeArray11);
        java.util.Locale locale14 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(locale14);
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.lang.String str17 = locale16.getLanguage();
        java.lang.String str19 = locale16.getExtension('a');
        java.util.Locale locale20 = java.util.Locale.CHINESE;
        java.lang.String str21 = locale20.getLanguage();
        boolean boolean22 = locale20.hasExtensions();
        java.lang.String str23 = locale20.getDisplayCountry();
        java.util.Locale locale24 = java.util.Locale.JAPANESE;
        java.util.Locale locale25 = java.util.Locale.JAPAN;
        java.util.Locale locale26 = java.util.Locale.JAPANESE;
        java.util.Locale locale30 = new java.util.Locale("", "hi!", "");
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        boolean boolean32 = locale31.hasExtensions();
        java.util.Locale locale33 = java.util.Locale.CHINESE;
        java.lang.String str34 = locale33.getLanguage();
        java.util.Locale locale35 = java.util.Locale.CHINA;
        java.util.Locale locale36 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray37 = new java.util.Locale[] { locale14, locale16, locale20, locale24, locale25, locale26, locale30, locale31, locale33, locale35, locale36 };
        java.util.ArrayList<java.util.Locale> localeList38 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList38, localeArray37);
        java.util.Locale.LanguageRange[] languageRangeArray40 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList41 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList41, languageRangeArray40);
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.util.Locale locale44 = java.util.Locale.FRANCE;
        boolean boolean45 = locale44.hasExtensions();
        java.util.Locale locale46 = java.util.Locale.FRANCE;
        java.util.Locale locale47 = java.util.Locale.CHINESE;
        java.lang.String str48 = locale47.getLanguage();
        java.util.Locale[] localeArray49 = new java.util.Locale[] { locale43, locale44, locale46, locale47 };
        java.util.ArrayList<java.util.Locale> localeList50 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList50, localeArray49);
        java.util.Locale.FilteringMode filteringMode52 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList53 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList41, (java.util.Collection<java.util.Locale>) localeList50, filteringMode52);
        java.util.List<java.util.Locale> localeList54 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.util.Locale>) localeList38, filteringMode52);
        java.util.Locale locale55 = java.util.Locale.CHINESE;
        java.lang.String str56 = locale55.getLanguage();
        boolean boolean57 = locale55.hasExtensions();
        java.lang.String str58 = locale55.getDisplayCountry();
        java.lang.String str59 = locale55.getDisplayLanguage();
        java.lang.String str60 = locale55.getLanguage();
        java.util.Calendar calendar61 = java.util.Calendar.getInstance(locale55);
        int int62 = localeList54.indexOf((java.lang.Object) locale55);
        java.lang.String str63 = locale55.getISO3Country();
        java.util.Calendar.Builder builder64 = builder8.setLocale(locale55);
        java.util.TimeZone timeZone65 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone66 = java.util.TimeZone.getDefault();
        boolean boolean67 = timeZone65.hasSameRules(timeZone66);
        java.util.Calendar calendar68 = java.util.Calendar.getInstance(timeZone65);
        java.util.TimeZone timeZone69 = calendar68.getTimeZone();
        java.util.TimeZone timeZone70 = calendar68.getTimeZone();
        java.lang.String str71 = timeZone70.getID();
        timeZone70.setRawOffset(9);
        java.util.Calendar calendar74 = java.util.Calendar.getInstance(timeZone70);
        java.util.Calendar.Builder builder75 = builder64.setTimeZone(timeZone70);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar15 and calendar68", (calendar15.compareTo(calendar68) == 0) == calendar15.equals(calendar68));
    }

    @Test
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test107");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.lang.String str8 = locale7.getLanguage();
        java.util.Locale[] localeArray9 = new java.util.Locale[] { locale3, locale4, locale6, locale7 };
        java.util.ArrayList<java.util.Locale> localeList10 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList10, localeArray9);
        java.util.Locale.FilteringMode filteringMode12 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList13 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList10, filteringMode12);
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        boolean boolean19 = locale18.hasExtensions();
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        java.util.Locale locale21 = java.util.Locale.CHINESE;
        java.lang.String str22 = locale21.getLanguage();
        java.util.Locale[] localeArray23 = new java.util.Locale[] { locale17, locale18, locale20, locale21 };
        java.util.ArrayList<java.util.Locale> localeList24 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList24, localeArray23);
        java.util.Locale.FilteringMode filteringMode26 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList27 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.util.Locale>) localeList24, filteringMode26);
        int int28 = localeList13.indexOf((java.lang.Object) filteringMode26);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList30 = java.util.Locale.LanguageRange.parse("zh");
        java.util.Set<java.lang.String> strSet31 = java.util.Calendar.getAvailableCalendarTypes();
        java.lang.String str32 = java.util.Locale.lookupTag(languageRangeList30, (java.util.Collection<java.lang.String>) strSet31);
        boolean boolean33 = localeList13.retainAll((java.util.Collection<java.lang.String>) strSet31);
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        boolean boolean37 = timeZone35.hasSameRules(timeZone36);
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(timeZone35);
        java.util.Locale.Category category39 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale40 = java.util.Locale.getDefault(category39);
        java.lang.String str41 = locale40.getISO3Language();
        java.lang.String str42 = locale40.getDisplayLanguage();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat43 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(3, timeZone35, locale40);
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(timeZone35);
        boolean boolean45 = localeList13.remove((java.lang.Object) timeZone35);
        java.lang.String str46 = timeZone35.getID();
        timeZone35.setID("ja-JP");
        timeZone35.setRawOffset((-1896));
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        boolean boolean53 = timeZone51.hasSameRules(timeZone52);
        java.util.Calendar calendar54 = java.util.Calendar.getInstance(timeZone51);
        java.util.Locale locale55 = java.util.Locale.CHINA;
        java.util.Calendar calendar56 = java.util.Calendar.getInstance(timeZone51, locale55);
        java.util.TimeZone timeZone57 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone58 = java.util.TimeZone.getDefault();
        boolean boolean59 = timeZone57.hasSameRules(timeZone58);
        boolean boolean60 = timeZone58.observesDaylightTime();
        boolean boolean61 = timeZone51.hasSameRules(timeZone58);
        java.util.Calendar calendar62 = java.util.Calendar.getInstance(timeZone51);
        boolean boolean63 = timeZone35.hasSameRules(timeZone51);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar38 and calendar54", (calendar38.compareTo(calendar54) == 0) == calendar38.equals(calendar54));
    }

    @Test
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test108");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Calendar.Builder builder4 = builder0.setTimeZone(timeZone1);
        java.util.Calendar calendar5 = builder4.build();
        java.util.Calendar.Builder builder9 = builder4.setTimeOfDay(12, 21, (int) (short) -1);
        java.util.Calendar.Builder builder14 = builder4.setTimeOfDay(49, 54, 11, 15);
        java.util.Calendar.Builder builder17 = builder4.set(3, 0);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        boolean boolean21 = timeZone19.hasSameRules(timeZone20);
        boolean boolean22 = timeZone18.hasSameRules(timeZone19);
        timeZone18.setID("java.util.GregorianCalendar[time=1645454754087,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=54,MILLISECOND=87,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale26 = java.util.Locale.forLanguageTag("English");
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone18, locale26);
        java.util.TimeZone.setDefault(timeZone18);
        java.util.Calendar.Builder builder29 = builder4.setTimeZone(timeZone18);
        java.util.Calendar.Builder builder33 = builder4.setWeekDate(52, 35, 2);
        java.util.Locale locale34 = java.util.Locale.CHINESE;
        java.lang.String str35 = locale34.getLanguage();
        boolean boolean36 = locale34.hasExtensions();
        java.lang.String str37 = locale34.getDisplayCountry();
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(locale34);
        java.util.Date date39 = new java.util.Date();
        int int40 = date39.getTimezoneOffset();
        long long41 = date39.getTime();
        calendar38.setTime(date39);
        java.util.Date date43 = calendar38.getTime();
        java.util.TimeZone timeZone45 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat46 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone45);
        java.util.TimeZone timeZone47 = fastDateFormat46.getTimeZone();
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(timeZone47);
        java.util.Locale locale49 = java.util.Locale.US;
        java.lang.String str51 = locale49.getExtension('a');
        java.util.Set<java.lang.Character> charSet52 = locale49.getExtensionKeys();
        java.util.Calendar calendar53 = java.util.Calendar.getInstance(timeZone47, locale49);
        timeZone47.setRawOffset(59);
        calendar38.setTimeZone(timeZone47);
        boolean boolean57 = timeZone47.observesDaylightTime();
        java.util.Calendar.Builder builder58 = builder33.setTimeZone(timeZone47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar27 and calendar38", (calendar27.compareTo(calendar38) == 0) == calendar27.equals(calendar38));
    }

    @Test
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test109");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        java.util.Locale locale4 = java.util.Locale.CHINA;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone0, locale4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone6.hasSameRules(timeZone7);
        boolean boolean9 = timeZone7.observesDaylightTime();
        boolean boolean10 = timeZone0.hasSameRules(timeZone7);
        int int11 = timeZone7.getRawOffset();
        java.lang.String str12 = timeZone7.getID();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar5", (calendar3.compareTo(calendar5) == 0) == calendar3.equals(calendar5));
    }

    @Test
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test110");
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        boolean boolean6 = locale5.hasExtensions();
        java.util.Locale locale7 = java.util.Locale.FRANCE;
        java.util.Locale locale8 = java.util.Locale.CHINESE;
        java.lang.String str9 = locale8.getLanguage();
        java.util.Locale[] localeArray10 = new java.util.Locale[] { locale4, locale5, locale7, locale8 };
        java.util.ArrayList<java.util.Locale> localeList11 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList11, localeArray10);
        java.util.Locale.FilteringMode filteringMode13 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList14 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.util.Locale>) localeList11, filteringMode13);
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        boolean boolean20 = locale19.hasExtensions();
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.util.Locale locale22 = java.util.Locale.CHINESE;
        java.lang.String str23 = locale22.getLanguage();
        java.util.Locale[] localeArray24 = new java.util.Locale[] { locale18, locale19, locale21, locale22 };
        java.util.ArrayList<java.util.Locale> localeList25 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList25, localeArray24);
        java.util.Locale.FilteringMode filteringMode27 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList28 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.util.Locale>) localeList25, filteringMode27);
        int int29 = localeList14.indexOf((java.lang.Object) filteringMode27);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList31 = java.util.Locale.LanguageRange.parse("zh");
        java.util.Set<java.lang.String> strSet32 = java.util.Calendar.getAvailableCalendarTypes();
        java.lang.String str33 = java.util.Locale.lookupTag(languageRangeList31, (java.util.Collection<java.lang.String>) strSet32);
        boolean boolean34 = localeList14.retainAll((java.util.Collection<java.lang.String>) strSet32);
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        boolean boolean38 = timeZone36.hasSameRules(timeZone37);
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(timeZone36);
        java.util.Locale.Category category40 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale41 = java.util.Locale.getDefault(category40);
        java.lang.String str42 = locale41.getISO3Language();
        java.lang.String str43 = locale41.getDisplayLanguage();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(3, timeZone36, locale41);
        java.util.Calendar calendar45 = java.util.Calendar.getInstance(timeZone36);
        boolean boolean46 = localeList14.remove((java.lang.Object) timeZone36);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat47 = org.apache.commons.lang3.time.FastDateFormat.getInstance("2022-2-21 14:46:01", timeZone36);
        java.util.Locale locale48 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale48);
        java.util.Calendar calendar50 = java.util.Calendar.getInstance(timeZone36, locale48);
        java.lang.String str51 = locale48.getDisplayName();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar39 and calendar50", (calendar39.compareTo(calendar50) == 0) == calendar39.equals(calendar50));
    }

    @Test
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test111");
        java.text.AttributedCharacterIterator.Attribute attribute0 = java.text.AttributedCharacterIterator.Attribute.INPUT_METHOD_SEGMENT;
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone2);
        java.util.TimeZone timeZone4 = fastDateFormat3.getTimeZone();
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone4);
        java.util.Locale locale6 = java.util.Locale.US;
        java.lang.String str8 = locale6.getExtension('a');
        java.util.Set<java.lang.Character> charSet9 = locale6.getExtensionKeys();
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone4, locale6);
        java.util.TimeZone timeZone11 = calendar10.getTimeZone();
        boolean boolean12 = attribute0.equals((java.lang.Object) calendar10);
        java.lang.String str13 = attribute0.toString();
        java.util.Locale.Builder builder14 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder16 = builder14.setLanguage("");
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.lang.String str18 = locale17.getLanguage();
        boolean boolean19 = locale17.hasExtensions();
        java.lang.String str20 = locale17.getDisplayCountry();
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(locale17);
        java.util.Locale.Builder builder22 = builder16.setLocale(locale17);
        java.util.Locale.Builder builder23 = builder22.clear();
        java.util.Locale.Builder builder25 = builder23.setLanguage("CHN");
        java.util.Locale.Builder builder26 = builder23.clear();
        java.util.Locale.Builder builder27 = builder26.clearExtensions();
        boolean boolean28 = attribute0.equals((java.lang.Object) builder26);
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        boolean boolean31 = timeZone29.hasSameRules(timeZone30);
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(timeZone29);
        java.util.TimeZone timeZone33 = calendar32.getTimeZone();
        java.util.TimeZone timeZone34 = calendar32.getTimeZone();
        int int36 = calendar32.getMinimum(13);
        java.util.Locale.LanguageRange[] languageRangeArray37 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList38 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList38, languageRangeArray37);
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        java.util.Locale locale41 = java.util.Locale.FRANCE;
        boolean boolean42 = locale41.hasExtensions();
        java.util.Locale locale43 = java.util.Locale.FRANCE;
        java.util.Locale locale44 = java.util.Locale.CHINESE;
        java.lang.String str45 = locale44.getLanguage();
        java.util.Locale[] localeArray46 = new java.util.Locale[] { locale40, locale41, locale43, locale44 };
        java.util.ArrayList<java.util.Locale> localeList47 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList47, localeArray46);
        java.util.Locale.FilteringMode filteringMode49 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, (java.util.Collection<java.util.Locale>) localeList47, filteringMode49);
        boolean boolean51 = calendar32.after((java.lang.Object) localeList47);
        java.lang.Object obj52 = null;
        boolean boolean53 = localeList47.equals(obj52);
        java.util.ListIterator<java.util.Locale> localeItor54 = localeList47.listIterator();
        java.util.Locale locale55 = java.util.Locale.US;
        boolean boolean56 = localeList47.add(locale55);
        java.lang.String str57 = locale55.getDisplayVariant();
        java.util.Locale locale58 = locale55.stripExtensions();
        java.util.Locale locale59 = locale58.stripExtensions();
        java.util.Locale locale60 = java.util.Locale.US;
        java.lang.String str62 = locale60.getExtension('a');
        java.util.Set<java.lang.Character> charSet63 = locale60.getExtensionKeys();
        java.lang.String str64 = locale60.getDisplayCountry();
        java.lang.String str65 = locale60.getDisplayVariant();
        java.util.Locale.setDefault(locale60);
        java.lang.String str67 = locale60.getISO3Language();
        java.lang.String str68 = locale59.getDisplayScript(locale60);
        java.util.Locale.Builder builder69 = builder26.setLocale(locale60);
        java.util.Locale.Builder builder70 = builder26.clear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar10", (calendar5.compareTo(calendar10) == 0) == calendar5.equals(calendar10));
    }

    @Test
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test112");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone1);
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone1, locale5);
        timeZone1.setID("java.util.GregorianCalendar[time=1645454754087,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=54,MILLISECOND=87,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale10 = new java.util.Locale("java.util.GregorianCalendar[time=1645454753591,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=53,MILLISECOND=591,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale11 = java.util.Locale.US;
        java.lang.String str13 = locale11.getExtension('a');
        java.util.Set<java.lang.Character> charSet14 = locale11.getExtensionKeys();
        java.lang.String str15 = locale11.getDisplayCountry();
        java.lang.String str16 = locale11.getDisplayVariant();
        java.util.Locale.setDefault(locale11);
        java.lang.String str18 = locale10.getDisplayVariant(locale11);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone1, locale11);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone1);
        int int22 = timeZone1.getOffset(1645505368415L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar4 and calendar6", (calendar4.compareTo(calendar6) == 0) == calendar4.equals(calendar6));
    }

    @Test
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test113");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3);
        java.util.TimeZone timeZone7 = calendar6.getTimeZone();
        int int8 = calendar6.getFirstDayOfWeek();
        int int9 = calendar6.getFirstDayOfWeek();
        calendar6.setTimeInMillis((long) 100);
        calendar6.setFirstDayOfWeek(7);
        int int14 = calendar6.getMinimalDaysInFirstWeek();
        calendar6.set((int) '#', 17, (int) (byte) 10, (int) (short) 1, (int) (byte) 1);
        java.lang.StringBuffer stringBuffer21 = null;
        java.lang.StringBuffer stringBuffer22 = fastDateFormat2.format(calendar6, stringBuffer21);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance();
        int int25 = calendar23.getActualMaximum(4);
        java.util.TimeZone timeZone27 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone27);
        java.util.TimeZone timeZone29 = fastDateFormat28.getTimeZone();
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone29);
        calendar23.setTimeZone(timeZone29);
        int int32 = calendar23.getFirstDayOfWeek();
        int int34 = calendar23.getActualMaximum((int) (short) 1);
        java.lang.StringBuffer stringBuffer35 = null;
        java.lang.StringBuffer stringBuffer36 = fastDateFormat2.format(calendar23, stringBuffer35);
        java.lang.String str37 = fastDateFormat2.getPattern();
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone39 = java.util.TimeZone.getDefault();
        boolean boolean40 = timeZone38.hasSameRules(timeZone39);
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(timeZone38);
        java.time.Instant instant42 = calendar41.toInstant();
        int int43 = calendar41.getFirstDayOfWeek();
        boolean boolean45 = calendar41.after((java.lang.Object) 15);
        java.util.Date date46 = calendar41.getTime();
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        boolean boolean50 = timeZone48.hasSameRules(timeZone49);
        java.util.Calendar calendar51 = java.util.Calendar.getInstance(timeZone48);
        java.util.Locale.Category category52 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale53 = java.util.Locale.getDefault(category52);
        java.lang.String str54 = locale53.getISO3Language();
        java.lang.String str55 = locale53.getDisplayLanguage();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat56 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(3, timeZone48, locale53);
        calendar41.setTimeZone(timeZone48);
        calendar41.setFirstDayOfWeek(48);
        java.lang.StringBuffer stringBuffer60 = null;
        java.lang.StringBuffer stringBuffer61 = fastDateFormat2.format(calendar41, stringBuffer60);
        java.lang.String str63 = fastDateFormat2.format(1645454853862L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar30 and calendar41", (calendar30.compareTo(calendar41) == 0) == calendar30.equals(calendar41));
    }

    @Test
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test114");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Calendar.Builder builder4 = builder0.setTimeZone(timeZone1);
        java.util.Calendar calendar5 = builder4.build();
        java.util.Calendar.Builder builder9 = builder4.setTimeOfDay(12, 21, (int) (short) -1);
        java.util.Calendar.Builder builder14 = builder4.setTimeOfDay(49, 54, 11, 15);
        java.util.Calendar.Builder builder17 = builder4.set(3, 0);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        boolean boolean20 = timeZone18.hasSameRules(timeZone19);
        boolean boolean21 = timeZone19.observesDaylightTime();
        java.util.TimeZone timeZone23 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone23);
        java.util.TimeZone timeZone25 = fastDateFormat24.getTimeZone();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(timeZone25);
        java.util.Locale locale27 = java.util.Locale.US;
        java.lang.String str29 = locale27.getExtension('a');
        java.util.Set<java.lang.Character> charSet30 = locale27.getExtensionKeys();
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(timeZone25, locale27);
        java.util.TimeZone timeZone32 = calendar31.getTimeZone();
        int int34 = timeZone32.getOffset(0L);
        boolean boolean35 = timeZone19.hasSameRules(timeZone32);
        java.util.Calendar.Builder builder36 = builder4.setTimeZone(timeZone32);
        java.util.Calendar.Builder builder41 = builder4.setTimeOfDay(56, 19, 53, 25);
        java.util.Calendar calendar42 = builder4.build();
        java.util.Calendar calendar43 = builder4.build();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar26 and calendar31", (calendar26.compareTo(calendar31) == 0) == calendar26.equals(calendar31));
    }

    @Test
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test115");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone1);
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone1, locale5);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone7.hasSameRules(timeZone8);
        boolean boolean10 = timeZone8.observesDaylightTime();
        boolean boolean11 = timeZone1.hasSameRules(timeZone8);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (byte) 0, timeZone1);
        java.util.TimeZone.setDefault(timeZone1);
        int int15 = timeZone1.getOffset(1645454857048L);
        java.lang.String str16 = timeZone1.getID();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar4 and calendar6", (calendar4.compareTo(calendar6) == 0) == calendar4.equals(calendar6));
    }

    @Test
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test116");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str4 = fastDateFormat2.format((long) '#');
        java.lang.String str6 = fastDateFormat2.format((long) 7);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone7.hasSameRules(timeZone8);
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone7);
        java.util.Locale locale11 = java.util.Locale.CHINA;
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone7, locale11);
        long long13 = calendar12.getTimeInMillis();
        java.lang.String str14 = fastDateFormat2.format(calendar12);
        java.util.TimeZone timeZone17 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone17);
        java.lang.String str19 = fastDateFormat18.getPattern();
        java.util.TimeZone timeZone22 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone22);
        java.lang.String str24 = fastDateFormat23.getPattern();
        java.text.ParsePosition parsePosition27 = new java.text.ParsePosition(16);
        parsePosition27.setIndex(11);
        java.lang.Object obj30 = fastDateFormat23.parseObject("hi!", parsePosition27);
        java.lang.Object obj31 = fastDateFormat18.parseObject("eng", parsePosition27);
        java.lang.Object obj32 = fastDateFormat2.parseObject("2:47:07 PM UTC", parsePosition27);
        java.util.Locale locale33 = fastDateFormat2.getLocale();
        java.util.TimeZone timeZone34 = fastDateFormat2.getTimeZone();
        java.lang.String str35 = timeZone34.getDisplayName();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar10 and calendar12", (calendar10.compareTo(calendar12) == 0) == calendar10.equals(calendar12));
    }

    @Test
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test117");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Calendar.Builder builder4 = builder0.setTimeZone(timeZone1);
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str6 = locale5.getLanguage();
        java.lang.String str7 = locale5.getDisplayScript();
        java.util.Calendar.Builder builder8 = builder4.setLocale(locale5);
        java.util.Calendar calendar9 = builder8.build();
        java.util.Calendar.Builder builder11 = builder8.setLenient(true);
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone12.hasSameRules(timeZone13);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone12);
        java.util.TimeZone timeZone16 = calendar15.getTimeZone();
        java.util.TimeZone timeZone17 = calendar15.getTimeZone();
        boolean boolean18 = calendar15.isWeekDateSupported();
        int int20 = calendar15.getLeastMaximum(10);
        int int21 = calendar15.getWeekYear();
        java.lang.String str22 = calendar15.getCalendarType();
        calendar15.setTimeInMillis((long) (short) -1);
        java.util.TimeZone timeZone25 = calendar15.getTimeZone();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance();
        int int28 = calendar26.getActualMaximum(4);
        java.util.TimeZone timeZone30 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone30);
        java.util.TimeZone timeZone32 = fastDateFormat31.getTimeZone();
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone32);
        calendar26.setTimeZone(timeZone32);
        timeZone32.setID("21 Feb 2022 14:45:52 GMT");
        boolean boolean37 = timeZone25.hasSameRules(timeZone32);
        java.util.Calendar.Builder builder38 = builder11.setTimeZone(timeZone32);
        java.util.Calendar.Builder builder40 = builder11.setLenient(false);
        java.util.Calendar.Builder builder42 = builder11.setLenient(true);
        java.util.Calendar.Builder builder44 = builder42.setInstant((long) 999);
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        boolean boolean47 = timeZone45.hasSameRules(timeZone46);
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(timeZone45);
        java.util.TimeZone timeZone49 = calendar48.getTimeZone();
        java.util.TimeZone timeZone50 = calendar48.getTimeZone();
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        boolean boolean53 = timeZone51.hasSameRules(timeZone52);
        java.util.Calendar calendar54 = java.util.Calendar.getInstance(timeZone51);
        java.util.TimeZone.setDefault(timeZone51);
        calendar48.setTimeZone(timeZone51);
        java.util.Calendar.Builder builder57 = builder44.setTimeZone(timeZone51);
        int int59 = timeZone51.getOffset(1645454972005L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar26 and calendar48", (calendar26.compareTo(calendar48) == 0) == calendar26.equals(calendar48));
    }

    @Test
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test118");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Calendar.Builder builder4 = builder0.setTimeZone(timeZone1);
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str6 = locale5.getLanguage();
        java.lang.String str7 = locale5.getDisplayScript();
        java.util.Calendar.Builder builder8 = builder4.setLocale(locale5);
        java.util.Calendar.Builder builder12 = builder4.setDate(0, 9, 56);
        java.util.Locale locale13 = java.util.Locale.CHINESE;
        java.lang.String str14 = locale13.getLanguage();
        java.lang.String str15 = locale13.getDisplayScript();
        java.util.Set<java.lang.Character> charSet16 = locale13.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet17 = locale13.getExtensionKeys();
        java.util.Locale locale18 = locale13.stripExtensions();
        java.lang.String str19 = locale18.getScript();
        java.util.Locale locale21 = new java.util.Locale("java.util.GregorianCalendar[time=1645454753591,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=53,MILLISECOND=591,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale22 = java.util.Locale.US;
        java.lang.String str24 = locale22.getExtension('a');
        java.util.Set<java.lang.Character> charSet25 = locale22.getExtensionKeys();
        java.lang.String str26 = locale22.getDisplayCountry();
        java.lang.String str27 = locale22.getDisplayVariant();
        java.util.Locale.setDefault(locale22);
        java.lang.String str29 = locale21.getDisplayVariant(locale22);
        java.lang.String str30 = locale18.getDisplayName(locale22);
        boolean boolean31 = locale18.hasExtensions();
        java.util.Calendar.Builder builder32 = builder4.setLocale(locale18);
        java.util.Calendar.Builder builder34 = builder32.setLenient(true);
        java.util.TimeZone timeZone36 = java.util.TimeZone.getTimeZone("Fri Jan 21 14:45:48 UTC 2022");
        int int37 = timeZone36.getRawOffset();
        java.time.ZoneId zoneId38 = timeZone36.toZoneId();
        java.util.Calendar.Builder builder39 = builder32.setTimeZone(timeZone36);
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(timeZone36);
        java.util.TimeZone timeZone42 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat43 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone42);
        java.util.TimeZone timeZone44 = fastDateFormat43.getTimeZone();
        boolean boolean45 = fastDateFormat43.getTimeZoneOverridesCalendar();
        java.lang.String str46 = fastDateFormat43.toString();
        java.lang.StringBuffer stringBuffer48 = null;
        java.lang.StringBuffer stringBuffer49 = fastDateFormat43.format((long) 59, stringBuffer48);
        java.util.TimeZone timeZone50 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        boolean boolean52 = timeZone50.hasSameRules(timeZone51);
        java.util.Calendar calendar53 = java.util.Calendar.getInstance(timeZone50);
        java.util.Locale locale54 = java.util.Locale.CHINA;
        java.util.Calendar calendar55 = java.util.Calendar.getInstance(timeZone50, locale54);
        java.util.TimeZone timeZone56 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone57 = java.util.TimeZone.getDefault();
        boolean boolean58 = timeZone56.hasSameRules(timeZone57);
        boolean boolean59 = timeZone57.observesDaylightTime();
        boolean boolean60 = timeZone50.hasSameRules(timeZone57);
        java.util.Calendar calendar61 = java.util.Calendar.getInstance(timeZone50);
        java.util.Calendar calendar62 = java.util.Calendar.getInstance(timeZone50);
        calendar62.setFirstDayOfWeek((int) (short) -1);
        calendar62.setTimeInMillis(1645454772224L);
        java.util.Date date67 = calendar62.getTime();
        java.lang.StringBuffer stringBuffer68 = null;
        java.text.FieldPosition fieldPosition69 = null;
        java.lang.StringBuffer stringBuffer70 = fastDateFormat43.format((java.lang.Object) date67, stringBuffer68, fieldPosition69);
        java.util.Locale locale71 = fastDateFormat43.getLocale();
        java.lang.String str72 = timeZone36.getDisplayName(locale71);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar40 and calendar53", (calendar40.compareTo(calendar53) == 0) == calendar40.equals(calendar53));
    }

    @Test
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test119");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Calendar.Builder builder4 = builder0.setTimeZone(timeZone1);
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str6 = locale5.getLanguage();
        java.lang.String str7 = locale5.getDisplayScript();
        java.util.Calendar.Builder builder8 = builder4.setLocale(locale5);
        java.util.Calendar.Builder builder10 = builder8.setLenient(false);
        java.util.Locale.LanguageRange[] languageRangeArray11 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList12 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12, languageRangeArray11);
        java.util.Locale locale14 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(locale14);
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.lang.String str17 = locale16.getLanguage();
        java.lang.String str19 = locale16.getExtension('a');
        java.util.Locale locale20 = java.util.Locale.CHINESE;
        java.lang.String str21 = locale20.getLanguage();
        boolean boolean22 = locale20.hasExtensions();
        java.lang.String str23 = locale20.getDisplayCountry();
        java.util.Locale locale24 = java.util.Locale.JAPANESE;
        java.util.Locale locale25 = java.util.Locale.JAPAN;
        java.util.Locale locale26 = java.util.Locale.JAPANESE;
        java.util.Locale locale30 = new java.util.Locale("", "hi!", "");
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        boolean boolean32 = locale31.hasExtensions();
        java.util.Locale locale33 = java.util.Locale.CHINESE;
        java.lang.String str34 = locale33.getLanguage();
        java.util.Locale locale35 = java.util.Locale.CHINA;
        java.util.Locale locale36 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray37 = new java.util.Locale[] { locale14, locale16, locale20, locale24, locale25, locale26, locale30, locale31, locale33, locale35, locale36 };
        java.util.ArrayList<java.util.Locale> localeList38 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList38, localeArray37);
        java.util.Locale.LanguageRange[] languageRangeArray40 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList41 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList41, languageRangeArray40);
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.util.Locale locale44 = java.util.Locale.FRANCE;
        boolean boolean45 = locale44.hasExtensions();
        java.util.Locale locale46 = java.util.Locale.FRANCE;
        java.util.Locale locale47 = java.util.Locale.CHINESE;
        java.lang.String str48 = locale47.getLanguage();
        java.util.Locale[] localeArray49 = new java.util.Locale[] { locale43, locale44, locale46, locale47 };
        java.util.ArrayList<java.util.Locale> localeList50 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList50, localeArray49);
        java.util.Locale.FilteringMode filteringMode52 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList53 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList41, (java.util.Collection<java.util.Locale>) localeList50, filteringMode52);
        java.util.List<java.util.Locale> localeList54 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.util.Locale>) localeList38, filteringMode52);
        java.util.Locale locale55 = java.util.Locale.CHINESE;
        java.lang.String str56 = locale55.getLanguage();
        boolean boolean57 = locale55.hasExtensions();
        java.lang.String str58 = locale55.getDisplayCountry();
        java.lang.String str59 = locale55.getDisplayLanguage();
        java.lang.String str60 = locale55.getLanguage();
        java.util.Calendar calendar61 = java.util.Calendar.getInstance(locale55);
        int int62 = localeList54.indexOf((java.lang.Object) locale55);
        java.lang.String str63 = locale55.getISO3Country();
        java.util.Calendar.Builder builder64 = builder8.setLocale(locale55);
        java.util.TimeZone timeZone66 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat67 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone66);
        java.util.Locale locale68 = fastDateFormat67.getLocale();
        java.util.Calendar calendar69 = java.util.Calendar.getInstance(locale68);
        java.util.Locale locale70 = java.util.Locale.GERMAN;
        boolean boolean71 = calendar69.before((java.lang.Object) locale70);
        java.util.Calendar.Builder builder72 = builder64.setLocale(locale70);
        java.util.TimeZone timeZone73 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone74 = java.util.TimeZone.getDefault();
        boolean boolean75 = timeZone73.hasSameRules(timeZone74);
        java.util.Calendar calendar76 = java.util.Calendar.getInstance(timeZone73);
        java.time.Instant instant77 = calendar76.toInstant();
        java.util.Date date78 = java.util.Date.from(instant77);
        java.util.Calendar.Builder builder79 = builder64.setInstant(date78);
        date78.setSeconds(0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar15 and calendar76", (calendar15.compareTo(calendar76) == 0) == calendar15.equals(calendar76));
    }

    @Test
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test120");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        java.util.TimeZone timeZone4 = calendar3.getTimeZone();
        java.util.TimeZone timeZone5 = calendar3.getTimeZone();
        boolean boolean6 = timeZone5.observesDaylightTime();
        java.util.Locale.Category category7 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale8 = java.util.Locale.getDefault(category7);
        java.util.Locale locale9 = java.util.Locale.CHINESE;
        java.lang.String str10 = locale9.getLanguage();
        boolean boolean11 = locale9.hasExtensions();
        java.lang.String str12 = locale9.getDisplayCountry();
        java.util.Locale.setDefault(category7, locale9);
        java.util.Set<java.lang.String> strSet14 = locale9.getUnicodeLocaleAttributes();
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone5, locale9);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        boolean boolean20 = timeZone18.hasSameRules(timeZone19);
        boolean boolean21 = timeZone17.hasSameRules(timeZone18);
        int int22 = timeZone17.getRawOffset();
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone17);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone17);
        boolean boolean25 = timeZone5.hasSameRules(timeZone17);
        boolean boolean26 = timeZone17.observesDaylightTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar15", (calendar3.compareTo(calendar15) == 0) == calendar3.equals(calendar15));
    }

    @Test
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test121");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.lang.String str8 = locale7.getLanguage();
        java.util.Locale[] localeArray9 = new java.util.Locale[] { locale3, locale4, locale6, locale7 };
        java.util.ArrayList<java.util.Locale> localeList10 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList10, localeArray9);
        java.util.Locale.FilteringMode filteringMode12 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList13 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList10, filteringMode12);
        localeList13.clear();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone16.hasSameRules(timeZone17);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone16);
        java.util.Locale locale20 = java.util.Locale.CHINA;
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone16, locale20);
        timeZone16.setID("java.util.GregorianCalendar[time=1645454754087,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=54,MILLISECOND=87,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale25 = new java.util.Locale("java.util.GregorianCalendar[time=1645454753591,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=53,MILLISECOND=591,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale26 = java.util.Locale.US;
        java.lang.String str28 = locale26.getExtension('a');
        java.util.Set<java.lang.Character> charSet29 = locale26.getExtensionKeys();
        java.lang.String str30 = locale26.getDisplayCountry();
        java.lang.String str31 = locale26.getDisplayVariant();
        java.util.Locale.setDefault(locale26);
        java.lang.String str33 = locale25.getDisplayVariant(locale26);
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone16, locale26);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat35 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone16);
        int int36 = localeList13.indexOf((java.lang.Object) timeZone16);
        java.util.Locale.Category category37 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale38 = java.util.Locale.getDefault(category37);
        java.lang.String str39 = locale38.getISO3Language();
        java.lang.String str40 = locale38.getDisplayLanguage();
        java.lang.String str41 = locale38.getISO3Country();
        boolean boolean42 = localeList13.add(locale38);
        java.util.TimeZone timeZone43 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        boolean boolean45 = timeZone43.hasSameRules(timeZone44);
        java.util.Calendar calendar46 = java.util.Calendar.getInstance(timeZone43);
        java.util.TimeZone timeZone47 = calendar46.getTimeZone();
        java.util.TimeZone timeZone49 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat50 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone49);
        java.util.TimeZone timeZone51 = fastDateFormat50.getTimeZone();
        java.util.Calendar calendar52 = java.util.Calendar.getInstance(timeZone51);
        calendar46.setTimeZone(timeZone51);
        timeZone51.setID("21 Feb 2022 14:45:49 GMT");
        timeZone51.setRawOffset(9);
        java.util.Locale locale59 = java.util.Locale.forLanguageTag("GMT");
        java.util.Calendar calendar60 = java.util.Calendar.getInstance(timeZone51, locale59);
        long long61 = calendar60.getTimeInMillis();
        int int62 = calendar60.getMinimalDaysInFirstWeek();
        int int63 = localeList13.indexOf((java.lang.Object) int62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar19 and calendar46", (calendar19.compareTo(calendar46) == 0) == calendar19.equals(calendar46));
    }

    @Test
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test122");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.text.ParsePosition parsePosition6 = new java.text.ParsePosition(16);
        parsePosition6.setIndex(11);
        java.lang.Object obj9 = fastDateFormat2.parseObject("hi!", parsePosition6);
        java.util.Calendar.Builder builder10 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone11.hasSameRules(timeZone12);
        java.util.Calendar.Builder builder14 = builder10.setTimeZone(timeZone11);
        java.util.Calendar.Builder builder16 = builder10.setInstant((long) (short) 0);
        java.util.Calendar calendar17 = builder16.build();
        java.lang.String str18 = fastDateFormat2.format((java.lang.Object) calendar17);
        java.util.Locale locale19 = fastDateFormat2.getLocale();
        java.util.Locale locale20 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(locale20);
        int int23 = calendar21.getMinimum(13);
        java.util.Calendar.Builder builder24 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        boolean boolean27 = timeZone25.hasSameRules(timeZone26);
        java.util.Calendar.Builder builder28 = builder24.setTimeZone(timeZone25);
        calendar21.setTimeZone(timeZone25);
        calendar21.setMinimalDaysInFirstWeek(16);
        java.lang.String str32 = fastDateFormat2.format(calendar21);
        java.text.ParsePosition parsePosition35 = new java.text.ParsePosition(16);
        int int36 = parsePosition35.getErrorIndex();
        java.lang.String str37 = parsePosition35.toString();
        java.lang.Object obj38 = null;
        boolean boolean39 = parsePosition35.equals(obj38);
        java.lang.Object obj40 = null;
        boolean boolean41 = parsePosition35.equals(obj40);
        java.lang.String str42 = parsePosition35.toString();
        parsePosition35.setIndex((int) (byte) 0);
        int int45 = parsePosition35.getIndex();
        java.util.Locale.LanguageRange[] languageRangeArray46 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList47 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList47, languageRangeArray46);
        java.util.Locale locale49 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar50 = java.util.Calendar.getInstance(locale49);
        java.util.Locale locale51 = java.util.Locale.CHINESE;
        java.lang.String str52 = locale51.getLanguage();
        java.lang.String str54 = locale51.getExtension('a');
        java.util.Locale locale55 = java.util.Locale.CHINESE;
        java.lang.String str56 = locale55.getLanguage();
        boolean boolean57 = locale55.hasExtensions();
        java.lang.String str58 = locale55.getDisplayCountry();
        java.util.Locale locale59 = java.util.Locale.JAPANESE;
        java.util.Locale locale60 = java.util.Locale.JAPAN;
        java.util.Locale locale61 = java.util.Locale.JAPANESE;
        java.util.Locale locale65 = new java.util.Locale("", "hi!", "");
        java.util.Locale locale66 = java.util.Locale.FRANCE;
        boolean boolean67 = locale66.hasExtensions();
        java.util.Locale locale68 = java.util.Locale.CHINESE;
        java.lang.String str69 = locale68.getLanguage();
        java.util.Locale locale70 = java.util.Locale.CHINA;
        java.util.Locale locale71 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray72 = new java.util.Locale[] { locale49, locale51, locale55, locale59, locale60, locale61, locale65, locale66, locale68, locale70, locale71 };
        java.util.ArrayList<java.util.Locale> localeList73 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList73, localeArray72);
        java.util.Locale.LanguageRange[] languageRangeArray75 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList76 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList76, languageRangeArray75);
        java.util.Locale locale78 = java.util.Locale.GERMAN;
        java.util.Locale locale79 = java.util.Locale.FRANCE;
        boolean boolean80 = locale79.hasExtensions();
        java.util.Locale locale81 = java.util.Locale.FRANCE;
        java.util.Locale locale82 = java.util.Locale.CHINESE;
        java.lang.String str83 = locale82.getLanguage();
        java.util.Locale[] localeArray84 = new java.util.Locale[] { locale78, locale79, locale81, locale82 };
        java.util.ArrayList<java.util.Locale> localeList85 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList85, localeArray84);
        java.util.Locale.FilteringMode filteringMode87 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList88 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList76, (java.util.Collection<java.util.Locale>) localeList85, filteringMode87);
        java.util.List<java.util.Locale> localeList89 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList47, (java.util.Collection<java.util.Locale>) localeList73, filteringMode87);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap90 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList91 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList47, strMap90);
        java.util.Locale locale92 = java.util.Locale.US;
        java.util.Set<java.lang.String> strSet93 = locale92.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList94 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList47, (java.util.Collection<java.lang.String>) strSet93);
        java.util.stream.Stream<java.lang.String> strStream95 = strList94.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream96 = strList94.parallelStream();
        boolean boolean97 = parsePosition35.equals((java.lang.Object) strStream96);
        java.lang.Object obj98 = fastDateFormat2.parseObject("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"21 Feb 2022 14:45:52 GMT\",offset=45,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=14,minimalDaysInFirstWeek=1,ERA=1,YEAR=50,MONTH=47,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=999,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=46,SECOND=42,MILLISECOND=736,ZONE_OFFSET=45,DST_OFFSET=0]", parsePosition35);
        int int99 = parsePosition35.getIndex();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar21 and calendar50", (calendar21.compareTo(calendar50) == 0) == calendar21.equals(calendar50));
    }

    @Test
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test123");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        java.util.Locale locale4 = java.util.Locale.CHINA;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone0, locale4);
        timeZone0.setID("java.util.GregorianCalendar[time=1645454754087,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=54,MILLISECOND=87,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale9 = new java.util.Locale("java.util.GregorianCalendar[time=1645454753591,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=53,MILLISECOND=591,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale10 = java.util.Locale.US;
        java.lang.String str12 = locale10.getExtension('a');
        java.util.Set<java.lang.Character> charSet13 = locale10.getExtensionKeys();
        java.lang.String str14 = locale10.getDisplayCountry();
        java.lang.String str15 = locale10.getDisplayVariant();
        java.util.Locale.setDefault(locale10);
        java.lang.String str17 = locale9.getDisplayVariant(locale10);
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone0, locale10);
        java.util.Set<java.lang.Character> charSet19 = locale10.getExtensionKeys();
        java.lang.String str20 = locale10.getVariant();
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(locale10);
        java.lang.String str22 = locale10.getVariant();
        java.lang.String str23 = locale10.toLanguageTag();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar21", (calendar3.compareTo(calendar21) == 0) == calendar3.equals(calendar21));
    }

    @Test
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test124");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        java.util.Locale locale4 = java.util.Locale.CHINA;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone0, locale4);
        java.util.Date date6 = calendar5.getTime();
        int int7 = date6.getDate();
        int int8 = date6.getMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar5", (calendar3.compareTo(calendar5) == 0) == calendar3.equals(calendar5));
    }

    @Test
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test125");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        java.lang.String str1 = locale0.getVariant();
        java.util.Locale locale2 = locale0.stripExtensions();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3);
        java.util.Locale locale7 = java.util.Locale.CHINA;
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone3, locale7);
        timeZone3.setID("java.util.GregorianCalendar[time=1645454754087,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=54,MILLISECOND=87,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale12 = new java.util.Locale("java.util.GregorianCalendar[time=1645454753591,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=53,MILLISECOND=591,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale13 = java.util.Locale.US;
        java.lang.String str15 = locale13.getExtension('a');
        java.util.Set<java.lang.Character> charSet16 = locale13.getExtensionKeys();
        java.lang.String str17 = locale13.getDisplayCountry();
        java.lang.String str18 = locale13.getDisplayVariant();
        java.util.Locale.setDefault(locale13);
        java.lang.String str20 = locale12.getDisplayVariant(locale13);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone3, locale13);
        java.util.Set<java.lang.Character> charSet22 = locale13.getExtensionKeys();
        java.lang.String str23 = locale13.getVariant();
        java.lang.String str24 = locale2.getDisplayLanguage(locale13);
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(locale2);
        java.util.TimeZone timeZone26 = calendar25.getTimeZone();
        java.lang.String str27 = timeZone26.getID();
        java.lang.String str28 = timeZone26.getDisplayName();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar25", (calendar6.compareTo(calendar25) == 0) == calendar6.equals(calendar25));
    }

    @Test
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test126");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.CHINESE;
        java.lang.String str4 = locale3.getLanguage();
        java.lang.String str5 = locale3.getDisplayScript();
        java.lang.String str6 = locale3.getDisplayScript();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone1, locale3);
        java.util.TimeZone timeZone8 = calendar7.getTimeZone();
        java.util.TimeZone timeZone10 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone10);
        java.util.TimeZone timeZone12 = fastDateFormat11.getTimeZone();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone12);
        java.util.Locale locale14 = java.util.Locale.US;
        java.lang.String str16 = locale14.getExtension('a');
        java.util.Set<java.lang.Character> charSet17 = locale14.getExtensionKeys();
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone12, locale14);
        calendar7.setTimeZone(timeZone12);
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale locale24 = java.util.Locale.FRANCE;
        boolean boolean25 = locale24.hasExtensions();
        java.util.Locale locale26 = java.util.Locale.FRANCE;
        java.util.Locale locale27 = java.util.Locale.CHINESE;
        java.lang.String str28 = locale27.getLanguage();
        java.util.Locale[] localeArray29 = new java.util.Locale[] { locale23, locale24, locale26, locale27 };
        java.util.ArrayList<java.util.Locale> localeList30 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList30, localeArray29);
        java.util.Locale.FilteringMode filteringMode32 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList33 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.util.Locale>) localeList30, filteringMode32);
        localeList33.clear();
        java.util.Date date35 = new java.util.Date();
        int int36 = date35.getSeconds();
        java.util.Date date37 = new java.util.Date();
        int int38 = date37.getTimezoneOffset();
        date37.setMinutes(5);
        boolean boolean41 = date35.after(date37);
        boolean boolean42 = localeList33.contains((java.lang.Object) date35);
        java.lang.String str43 = date35.toGMTString();
        calendar7.setTime(date35);
        java.lang.String str45 = date35.toLocaleString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar7 and calendar13", (calendar7.compareTo(calendar13) == 0) == calendar7.equals(calendar13));
    }

    @Test
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test127");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.lang.String str8 = locale7.getLanguage();
        java.util.Locale[] localeArray9 = new java.util.Locale[] { locale3, locale4, locale6, locale7 };
        java.util.ArrayList<java.util.Locale> localeList10 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList10, localeArray9);
        java.util.Locale.FilteringMode filteringMode12 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList13 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList10, filteringMode12);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.lang.String str18 = locale17.getLanguage();
        java.lang.String str19 = locale17.getDisplayScript();
        java.lang.String str20 = locale17.getDisplayScript();
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone15, locale17);
        java.util.TimeZone timeZone22 = calendar21.getTimeZone();
        java.util.TimeZone timeZone24 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone24);
        java.util.TimeZone timeZone26 = fastDateFormat25.getTimeZone();
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone26);
        java.util.Locale locale28 = java.util.Locale.US;
        java.lang.String str30 = locale28.getExtension('a');
        java.util.Set<java.lang.Character> charSet31 = locale28.getExtensionKeys();
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(timeZone26, locale28);
        calendar21.setTimeZone(timeZone26);
        java.util.Locale.LanguageRange[] languageRangeArray34 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList35 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList35, languageRangeArray34);
        java.util.Locale locale37 = java.util.Locale.GERMAN;
        java.util.Locale locale38 = java.util.Locale.FRANCE;
        boolean boolean39 = locale38.hasExtensions();
        java.util.Locale locale40 = java.util.Locale.FRANCE;
        java.util.Locale locale41 = java.util.Locale.CHINESE;
        java.lang.String str42 = locale41.getLanguage();
        java.util.Locale[] localeArray43 = new java.util.Locale[] { locale37, locale38, locale40, locale41 };
        java.util.ArrayList<java.util.Locale> localeList44 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList44, localeArray43);
        java.util.Locale.FilteringMode filteringMode46 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList47 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, (java.util.Collection<java.util.Locale>) localeList44, filteringMode46);
        localeList47.clear();
        java.util.Date date49 = new java.util.Date();
        int int50 = date49.getSeconds();
        java.util.Date date51 = new java.util.Date();
        int int52 = date51.getTimezoneOffset();
        date51.setMinutes(5);
        boolean boolean55 = date49.after(date51);
        boolean boolean56 = localeList47.contains((java.lang.Object) date49);
        java.lang.String str57 = date49.toGMTString();
        calendar21.setTime(date49);
        boolean boolean59 = localeList10.contains((java.lang.Object) date49);
        int int60 = date49.getSeconds();
        int int61 = date49.getSeconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar21 and calendar27", (calendar21.compareTo(calendar27) == 0) == calendar21.equals(calendar27));
    }

    @Test
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test128");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = java.util.Locale.FRANCE;
        boolean boolean8 = locale7.hasExtensions();
        java.util.Locale locale9 = java.util.Locale.FRANCE;
        java.util.Locale locale10 = java.util.Locale.CHINESE;
        java.lang.String str11 = locale10.getLanguage();
        java.util.Locale[] localeArray12 = new java.util.Locale[] { locale6, locale7, locale9, locale10 };
        java.util.ArrayList<java.util.Locale> localeList13 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList13, localeArray12);
        java.util.Locale.FilteringMode filteringMode15 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList16 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList13, filteringMode15);
        int int18 = localeList16.lastIndexOf((java.lang.Object) 11);
        java.util.Locale locale19 = java.util.Locale.CHINESE;
        java.lang.String str20 = locale19.getLanguage();
        boolean boolean21 = locale19.hasExtensions();
        java.lang.String str22 = locale19.getDisplayCountry();
        java.util.Set<java.lang.String> strSet23 = locale19.getUnicodeLocaleKeys();
        boolean boolean24 = localeList16.containsAll((java.util.Collection<java.lang.String>) strSet23);
        java.util.Locale.FilteringMode filteringMode25 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList26 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList16, filteringMode25);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone27.hasSameRules(timeZone28);
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone27);
        java.util.Locale locale31 = java.util.Locale.CHINA;
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(timeZone27, locale31);
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        boolean boolean35 = timeZone33.hasSameRules(timeZone34);
        boolean boolean36 = timeZone34.observesDaylightTime();
        boolean boolean37 = timeZone27.hasSameRules(timeZone34);
        boolean boolean38 = localeList16.remove((java.lang.Object) timeZone34);
        java.util.Locale locale41 = java.util.Locale.forLanguageTag("Fri Jan 21 14:45:48 UTC 2022");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat42 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(2, locale41);
        boolean boolean43 = localeList16.equals((java.lang.Object) locale41);
        java.lang.Object obj44 = null;
        boolean boolean45 = localeList16.remove(obj44);
        localeList16.clear();
        int int48 = localeList16.lastIndexOf((java.lang.Object) "Feb 21, 2022 2:47:59 PM");
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar30 and calendar32", (calendar30.compareTo(calendar32) == 0) == calendar30.equals(calendar32));
    }

    @Test
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test129");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("java.util.GregorianCalendar[time=1645454754087,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=54,MILLISECOND=87,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale.Category category2 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(category2, locale3);
        java.util.Locale locale5 = java.util.Locale.getDefault(category2);
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone1, locale5);
        java.util.TimeZone timeZone8 = java.util.TimeZone.getTimeZone("java.text.AttributedCharacterIterator$Attribute(reading)");
        int int10 = timeZone8.getOffset(1645454850495L);
        boolean boolean11 = timeZone1.hasSameRules(timeZone8);
        java.util.Calendar.Builder builder12 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone13.hasSameRules(timeZone14);
        java.util.Calendar.Builder builder16 = builder12.setTimeZone(timeZone13);
        java.util.Calendar calendar17 = builder16.build();
        java.util.Calendar.Builder builder21 = builder16.setTimeOfDay(12, 21, (int) (short) -1);
        java.util.Calendar.Builder builder26 = builder16.setTimeOfDay(49, 54, 11, 15);
        java.util.Calendar.Builder builder28 = builder26.setLenient(false);
        java.util.Calendar.Builder builder32 = builder26.setWeekDate(0, 44, 0);
        java.util.Locale locale33 = java.util.Locale.getDefault();
        java.util.Locale locale34 = java.util.Locale.CHINESE;
        java.lang.String str35 = locale34.getLanguage();
        boolean boolean36 = locale34.hasExtensions();
        java.lang.String str37 = locale33.getDisplayVariant(locale34);
        java.lang.String str38 = locale34.getDisplayScript();
        java.util.TimeZone timeZone39 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone40 = java.util.TimeZone.getDefault();
        boolean boolean41 = timeZone39.hasSameRules(timeZone40);
        java.util.Locale locale42 = java.util.Locale.CHINESE;
        java.lang.String str43 = locale42.getLanguage();
        java.lang.String str44 = locale42.getDisplayScript();
        java.lang.String str45 = locale42.getDisplayScript();
        java.util.Calendar calendar46 = java.util.Calendar.getInstance(timeZone40, locale42);
        java.lang.String str47 = locale34.getDisplayName(locale42);
        java.util.Calendar.Builder builder48 = builder32.setLocale(locale34);
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(timeZone8, locale34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar46", (calendar6.compareTo(calendar46) == 0) == calendar6.equals(calendar46));
    }

    @Test
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test130");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        java.util.Locale locale4 = java.util.Locale.CHINA;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone0, locale4);
        long long6 = calendar5.getTimeInMillis();
        int int7 = calendar5.getWeekYear();
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        boolean boolean13 = locale12.hasExtensions();
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.lang.String str16 = locale15.getLanguage();
        java.util.Locale[] localeArray17 = new java.util.Locale[] { locale11, locale12, locale14, locale15 };
        java.util.ArrayList<java.util.Locale> localeList18 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList18, localeArray17);
        java.util.Locale.FilteringMode filteringMode20 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList21 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList18, filteringMode20);
        java.util.Locale locale23 = new java.util.Locale("java.util.GregorianCalendar[time=1645454753591,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=53,MILLISECOND=591,ZONE_OFFSET=0,DST_OFFSET=0]");
        boolean boolean24 = localeList21.equals((java.lang.Object) locale23);
        java.lang.String str25 = locale23.getScript();
        java.lang.String str26 = locale23.getDisplayVariant();
        boolean boolean27 = calendar5.after((java.lang.Object) str26);
        java.util.TimeZone timeZone28 = calendar5.getTimeZone();
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        boolean boolean31 = timeZone29.hasSameRules(timeZone30);
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(timeZone29);
        java.util.TimeZone timeZone33 = calendar32.getTimeZone();
        int int35 = timeZone33.getOffset((long) 'a');
        java.util.TimeZone.setDefault(timeZone33);
        java.util.Locale locale38 = new java.util.Locale("java.util.GregorianCalendar[time=1645454753591,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=53,MILLISECOND=591,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale39 = java.util.Locale.US;
        java.lang.String str41 = locale39.getExtension('a');
        java.util.Set<java.lang.Character> charSet42 = locale39.getExtensionKeys();
        java.lang.String str43 = locale39.getDisplayCountry();
        java.lang.String str44 = locale39.getDisplayVariant();
        java.util.Locale.setDefault(locale39);
        java.lang.String str46 = locale38.getDisplayVariant(locale39);
        java.util.Calendar calendar47 = java.util.Calendar.getInstance(timeZone33, locale39);
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(timeZone28, locale39);
        java.util.Locale locale49 = java.util.Locale.US;
        boolean boolean50 = locale49.hasExtensions();
        java.lang.String str51 = locale49.getCountry();
        java.util.Locale locale52 = java.util.Locale.UK;
        java.lang.String str53 = locale49.getDisplayCountry(locale52);
        java.util.Locale locale55 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar56 = java.util.Calendar.getInstance(locale55);
        int int58 = calendar56.getMinimum(13);
        java.util.Calendar.Builder builder59 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone60 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone61 = java.util.TimeZone.getDefault();
        boolean boolean62 = timeZone60.hasSameRules(timeZone61);
        java.util.Calendar.Builder builder63 = builder59.setTimeZone(timeZone60);
        calendar56.setTimeZone(timeZone60);
        java.util.Locale.Category category65 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale66 = java.util.Locale.getDefault(category65);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat67 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone60, locale66);
        java.util.Set<java.lang.String> strSet68 = locale66.getUnicodeLocaleKeys();
        java.lang.String str69 = locale66.getDisplayCountry();
        java.lang.String str70 = locale52.getDisplayLanguage(locale66);
        java.util.Calendar calendar71 = java.util.Calendar.getInstance(timeZone28, locale66);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar5", (calendar3.compareTo(calendar5) == 0) == calendar3.equals(calendar5));
    }

    @Test
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test131");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.util.Locale locale3 = fastDateFormat2.getLocale();
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        boolean boolean6 = calendar4.before((java.lang.Object) locale5);
        boolean boolean7 = locale5.hasExtensions();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone8.hasSameRules(timeZone9);
        java.util.Locale.Category category11 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale12 = java.util.Locale.getDefault(category11);
        java.util.Locale locale13 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category11, locale13);
        java.util.Locale locale15 = java.util.Locale.getDefault(category11);
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone9, locale15);
        java.util.Locale locale17 = locale15.stripExtensions();
        java.lang.String str18 = locale17.getScript();
        java.lang.String str19 = locale5.getDisplayLanguage(locale17);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar4 and calendar16", (calendar4.compareTo(calendar16) == 0) == calendar4.equals(calendar16));
    }

    @Test
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test132");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        java.util.TimeZone timeZone4 = calendar3.getTimeZone();
        java.util.TimeZone timeZone5 = calendar3.getTimeZone();
        int int7 = calendar3.getMinimum(13);
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        boolean boolean13 = locale12.hasExtensions();
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.lang.String str16 = locale15.getLanguage();
        java.util.Locale[] localeArray17 = new java.util.Locale[] { locale11, locale12, locale14, locale15 };
        java.util.ArrayList<java.util.Locale> localeList18 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList18, localeArray17);
        java.util.Locale.FilteringMode filteringMode20 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList21 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList18, filteringMode20);
        boolean boolean22 = calendar3.after((java.lang.Object) localeList18);
        java.lang.String[] strArray24 = new java.lang.String[] { "21 Feb 2022 14:46:04 GMT" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        boolean boolean27 = localeList18.containsAll((java.util.Collection<java.lang.String>) strList25);
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        java.util.Locale locale29 = java.util.Locale.US;
        java.lang.String str31 = locale29.getExtension('a');
        java.util.Set<java.lang.Character> charSet32 = locale29.getExtensionKeys();
        java.lang.String str33 = locale28.getDisplayScript(locale29);
        java.util.Locale locale34 = locale29.stripExtensions();
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        boolean boolean37 = timeZone35.hasSameRules(timeZone36);
        java.util.Locale locale38 = java.util.Locale.CHINESE;
        java.lang.String str39 = locale38.getLanguage();
        java.lang.String str40 = locale38.getDisplayScript();
        java.lang.String str41 = locale38.getDisplayScript();
        java.util.Calendar calendar42 = java.util.Calendar.getInstance(timeZone36, locale38);
        java.lang.String str43 = locale34.getDisplayName(locale38);
        java.lang.String str44 = locale38.getDisplayName();
        java.util.Locale locale45 = java.util.Locale.US;
        java.lang.String str47 = locale45.getExtension('a');
        java.util.Set<java.lang.Character> charSet48 = locale45.getExtensionKeys();
        java.util.Set<java.lang.String> strSet49 = locale45.getUnicodeLocaleKeys();
        java.lang.String str50 = locale38.getDisplayName(locale45);
        java.util.Set<java.lang.String> strSet51 = locale45.getUnicodeLocaleKeys();
        boolean boolean52 = localeList18.removeAll((java.util.Collection<java.lang.String>) strSet51);
        java.util.Locale locale54 = java.util.Locale.SIMPLIFIED_CHINESE;
        boolean boolean55 = locale54.hasExtensions();
        java.lang.String str57 = locale54.getExtension('u');
        localeList18.add(0, locale54);
        java.util.Calendar calendar59 = java.util.Calendar.getInstance(locale54);
        java.lang.String str60 = locale54.toLanguageTag();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar42", (calendar3.compareTo(calendar42) == 0) == calendar3.equals(calendar42));
    }

    @Test
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test133");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Calendar.Builder builder4 = builder0.setTimeZone(timeZone1);
        java.util.Calendar calendar5 = builder4.build();
        java.util.Calendar.Builder builder9 = builder4.setTimeOfDay(12, 21, (int) (short) -1);
        java.util.Calendar.Builder builder14 = builder4.setTimeOfDay(49, 54, 11, 15);
        java.util.Calendar.Builder builder17 = builder4.set(3, 0);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        boolean boolean20 = timeZone18.hasSameRules(timeZone19);
        boolean boolean21 = timeZone19.observesDaylightTime();
        java.util.TimeZone timeZone23 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone23);
        java.util.TimeZone timeZone25 = fastDateFormat24.getTimeZone();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(timeZone25);
        java.util.Locale locale27 = java.util.Locale.US;
        java.lang.String str29 = locale27.getExtension('a');
        java.util.Set<java.lang.Character> charSet30 = locale27.getExtensionKeys();
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(timeZone25, locale27);
        java.util.TimeZone timeZone32 = calendar31.getTimeZone();
        int int34 = timeZone32.getOffset(0L);
        boolean boolean35 = timeZone19.hasSameRules(timeZone32);
        java.util.Calendar.Builder builder36 = builder4.setTimeZone(timeZone32);
        java.util.Calendar.Builder builder41 = builder4.setTimeOfDay(56, 19, 53, 25);
        java.util.Calendar calendar42 = builder4.build();
        java.util.TimeZone timeZone43 = calendar42.getTimeZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar26 and calendar31", (calendar26.compareTo(calendar31) == 0) == calendar26.equals(calendar31));
    }

    @Test
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test134");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        java.util.TimeZone timeZone4 = calendar3.getTimeZone();
        java.util.TimeZone timeZone5 = calendar3.getTimeZone();
        boolean boolean6 = timeZone5.observesDaylightTime();
        java.util.Locale.Category category7 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale8 = java.util.Locale.getDefault(category7);
        java.util.Locale locale9 = java.util.Locale.CHINESE;
        java.lang.String str10 = locale9.getLanguage();
        boolean boolean11 = locale9.hasExtensions();
        java.lang.String str12 = locale9.getDisplayCountry();
        java.util.Locale.setDefault(category7, locale9);
        java.util.Set<java.lang.String> strSet14 = locale9.getUnicodeLocaleAttributes();
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone5, locale9);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        boolean boolean20 = timeZone18.hasSameRules(timeZone19);
        boolean boolean21 = timeZone17.hasSameRules(timeZone18);
        int int22 = timeZone17.getRawOffset();
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone17);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone17);
        boolean boolean25 = timeZone5.hasSameRules(timeZone17);
        timeZone17.setID("Mon Feb 21 14:50:15 GMT+00:00 2022");
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar23", (calendar3.compareTo(calendar23) == 0) == calendar3.equals(calendar23));
    }

    @Test
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test135");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("zh");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        boolean boolean7 = locale6.hasExtensions();
        java.util.Locale locale8 = java.util.Locale.FRANCE;
        java.util.Locale locale9 = java.util.Locale.CHINESE;
        java.lang.String str10 = locale9.getLanguage();
        java.util.Locale[] localeArray11 = new java.util.Locale[] { locale5, locale6, locale8, locale9 };
        java.util.ArrayList<java.util.Locale> localeList12 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList12, localeArray11);
        java.util.Locale.FilteringMode filteringMode14 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList15 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.util.Locale>) localeList12, filteringMode14);
        int int17 = localeList15.lastIndexOf((java.lang.Object) 11);
        java.util.Locale locale18 = java.util.Locale.CHINESE;
        java.lang.String str19 = locale18.getLanguage();
        boolean boolean20 = locale18.hasExtensions();
        java.lang.String str21 = locale18.getDisplayCountry();
        java.util.Set<java.lang.String> strSet22 = locale18.getUnicodeLocaleKeys();
        boolean boolean23 = localeList15.containsAll((java.util.Collection<java.lang.String>) strSet22);
        java.util.ListIterator<java.util.Locale> localeItor24 = localeList15.listIterator();
        boolean boolean25 = localeList15.isEmpty();
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        boolean boolean28 = timeZone26.hasSameRules(timeZone27);
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(timeZone26);
        java.util.Locale locale30 = java.util.Locale.CHINA;
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(timeZone26, locale30);
        timeZone26.setID("java.util.GregorianCalendar[time=1645454754087,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=54,MILLISECOND=87,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale35 = new java.util.Locale("java.util.GregorianCalendar[time=1645454753591,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=53,MILLISECOND=591,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale36 = java.util.Locale.US;
        java.lang.String str38 = locale36.getExtension('a');
        java.util.Set<java.lang.Character> charSet39 = locale36.getExtensionKeys();
        java.lang.String str40 = locale36.getDisplayCountry();
        java.lang.String str41 = locale36.getDisplayVariant();
        java.util.Locale.setDefault(locale36);
        java.lang.String str43 = locale35.getDisplayVariant(locale36);
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(timeZone26, locale36);
        boolean boolean45 = localeList15.add(locale36);
        java.util.Locale locale47 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(locale47);
        int int50 = calendar48.getMinimum(13);
        java.util.Calendar.Builder builder51 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone53 = java.util.TimeZone.getDefault();
        boolean boolean54 = timeZone52.hasSameRules(timeZone53);
        java.util.Calendar.Builder builder55 = builder51.setTimeZone(timeZone52);
        calendar48.setTimeZone(timeZone52);
        java.util.Locale.Category category57 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale58 = java.util.Locale.getDefault(category57);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat59 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone52, locale58);
        java.util.Set<java.lang.String> strSet60 = locale58.getUnicodeLocaleKeys();
        boolean boolean61 = localeList15.containsAll((java.util.Collection<java.lang.String>) strSet60);
        java.util.Locale locale62 = java.util.Locale.lookup(languageRangeList1, (java.util.Collection<java.util.Locale>) localeList15);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar29 and calendar48", (calendar29.compareTo(calendar48) == 0) == calendar29.equals(calendar48));
    }

    @Test
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test136");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("zh-TW", strMap1);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.parse("zh");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap5 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList6 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList4, strMap5);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap7 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList8 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList4, strMap7);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap9 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList10 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList4, strMap9);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap11 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList12 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList4, strMap11);
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        boolean boolean18 = locale17.hasExtensions();
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.util.Locale locale20 = java.util.Locale.CHINESE;
        java.lang.String str21 = locale20.getLanguage();
        java.util.Locale[] localeArray22 = new java.util.Locale[] { locale16, locale17, locale19, locale20 };
        java.util.ArrayList<java.util.Locale> localeList23 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList23, localeArray22);
        java.util.Locale.FilteringMode filteringMode25 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList26 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.util.Locale>) localeList23, filteringMode25);
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        boolean boolean32 = locale31.hasExtensions();
        java.util.Locale locale33 = java.util.Locale.FRANCE;
        java.util.Locale locale34 = java.util.Locale.CHINESE;
        java.lang.String str35 = locale34.getLanguage();
        java.util.Locale[] localeArray36 = new java.util.Locale[] { locale30, locale31, locale33, locale34 };
        java.util.ArrayList<java.util.Locale> localeList37 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList37, localeArray36);
        java.util.Locale.FilteringMode filteringMode39 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList40 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.util.Locale>) localeList37, filteringMode39);
        int int41 = localeList26.indexOf((java.lang.Object) filteringMode39);
        localeList26.clear();
        java.util.Locale locale43 = java.util.Locale.CHINESE;
        java.lang.String str44 = locale43.getLanguage();
        boolean boolean45 = locale43.hasExtensions();
        java.lang.String str46 = locale43.getDisplayCountry();
        java.lang.String str47 = locale43.getDisplayLanguage();
        java.lang.String str48 = locale43.getLanguage();
        java.lang.String str49 = locale43.getDisplayVariant();
        boolean boolean50 = localeList26.add(locale43);
        localeList26.clear();
        java.util.Locale locale52 = java.util.Locale.lookup(languageRangeList4, (java.util.Collection<java.util.Locale>) localeList26);
        java.util.Locale.FilteringMode filteringMode53 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList54 = java.util.Locale.filter(languageRangeList2, (java.util.Collection<java.util.Locale>) localeList26, filteringMode53);
        java.util.TimeZone timeZone55 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone56 = java.util.TimeZone.getDefault();
        boolean boolean57 = timeZone55.hasSameRules(timeZone56);
        java.util.Calendar calendar58 = java.util.Calendar.getInstance(timeZone55);
        java.util.Locale locale59 = java.util.Locale.CHINA;
        java.util.Calendar calendar60 = java.util.Calendar.getInstance(timeZone55, locale59);
        java.lang.String str61 = locale59.getDisplayCountry();
        java.util.Set<java.lang.String> strSet62 = locale59.getUnicodeLocaleKeys();
        boolean boolean63 = localeList54.containsAll((java.util.Collection<java.lang.String>) strSet62);
        boolean boolean65 = localeList54.remove((java.lang.Object) 1645454924017L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar58 and calendar60", (calendar58.compareTo(calendar60) == 0) == calendar58.equals(calendar60));
    }

    @Test
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test137");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        java.util.TimeZone timeZone4 = calendar3.getTimeZone();
        java.util.TimeZone timeZone5 = calendar3.getTimeZone();
        int int7 = calendar3.getMinimum(13);
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        boolean boolean13 = locale12.hasExtensions();
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.lang.String str16 = locale15.getLanguage();
        java.util.Locale[] localeArray17 = new java.util.Locale[] { locale11, locale12, locale14, locale15 };
        java.util.ArrayList<java.util.Locale> localeList18 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList18, localeArray17);
        java.util.Locale.FilteringMode filteringMode20 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList21 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList18, filteringMode20);
        boolean boolean22 = calendar3.after((java.lang.Object) localeList18);
        calendar3.setLenient(false);
        int int25 = calendar3.getWeekYear();
        java.util.Locale locale27 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(locale27);
        int int30 = calendar28.getMinimum(13);
        java.util.Calendar.Builder builder31 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        boolean boolean34 = timeZone32.hasSameRules(timeZone33);
        java.util.Calendar.Builder builder35 = builder31.setTimeZone(timeZone32);
        calendar28.setTimeZone(timeZone32);
        java.util.Locale.Category category37 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale38 = java.util.Locale.getDefault(category37);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat39 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone32, locale38);
        int int40 = fastDateFormat39.getMaxLengthEstimate();
        java.util.Locale locale41 = fastDateFormat39.getLocale();
        boolean boolean42 = calendar3.before((java.lang.Object) locale41);
        java.util.Locale locale43 = java.util.Locale.JAPAN;
        java.lang.String str44 = locale43.getDisplayVariant();
        java.lang.String str45 = locale43.getLanguage();
        java.util.Set<java.lang.String> strSet46 = locale43.getUnicodeLocaleAttributes();
        boolean boolean47 = locale43.hasExtensions();
        java.util.Set<java.lang.String> strSet48 = locale43.getUnicodeLocaleAttributes();
        java.lang.String str49 = locale41.getDisplayCountry(locale43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar28", (calendar3.compareTo(calendar28) == 0) == calendar3.equals(calendar28));
    }

    @Test
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test138");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.lang.String str8 = locale7.getLanguage();
        java.util.Locale[] localeArray9 = new java.util.Locale[] { locale3, locale4, locale6, locale7 };
        java.util.ArrayList<java.util.Locale> localeList10 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList10, localeArray9);
        java.util.Locale.FilteringMode filteringMode12 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList13 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList10, filteringMode12);
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        boolean boolean19 = locale18.hasExtensions();
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        java.util.Locale locale21 = java.util.Locale.CHINESE;
        java.lang.String str22 = locale21.getLanguage();
        java.util.Locale[] localeArray23 = new java.util.Locale[] { locale17, locale18, locale20, locale21 };
        java.util.ArrayList<java.util.Locale> localeList24 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList24, localeArray23);
        java.util.Locale.FilteringMode filteringMode26 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList27 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.util.Locale>) localeList24, filteringMode26);
        int int28 = localeList13.indexOf((java.lang.Object) filteringMode26);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList30 = java.util.Locale.LanguageRange.parse("zh");
        java.util.Set<java.lang.String> strSet31 = java.util.Calendar.getAvailableCalendarTypes();
        java.lang.String str32 = java.util.Locale.lookupTag(languageRangeList30, (java.util.Collection<java.lang.String>) strSet31);
        boolean boolean33 = localeList13.retainAll((java.util.Collection<java.lang.String>) strSet31);
        java.util.ListIterator<java.util.Locale> localeItor34 = localeList13.listIterator();
        java.util.Locale locale35 = java.util.Locale.US;
        boolean boolean36 = locale35.hasExtensions();
        java.lang.String str37 = locale35.getCountry();
        boolean boolean38 = localeList13.add(locale35);
        java.util.ListIterator<java.util.Locale> localeItor39 = localeList13.listIterator();
        java.util.TimeZone timeZone40 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        boolean boolean42 = timeZone40.hasSameRules(timeZone41);
        java.util.Calendar calendar43 = java.util.Calendar.getInstance(timeZone40);
        java.util.Locale locale44 = java.util.Locale.CHINA;
        java.util.Calendar calendar45 = java.util.Calendar.getInstance(timeZone40, locale44);
        timeZone40.setID("java.util.GregorianCalendar[time=1645454754087,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=54,MILLISECOND=87,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale49 = new java.util.Locale("java.util.GregorianCalendar[time=1645454753591,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=53,MILLISECOND=591,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale50 = java.util.Locale.US;
        java.lang.String str52 = locale50.getExtension('a');
        java.util.Set<java.lang.Character> charSet53 = locale50.getExtensionKeys();
        java.lang.String str54 = locale50.getDisplayCountry();
        java.lang.String str55 = locale50.getDisplayVariant();
        java.util.Locale.setDefault(locale50);
        java.lang.String str57 = locale49.getDisplayVariant(locale50);
        java.util.Calendar calendar58 = java.util.Calendar.getInstance(timeZone40, locale50);
        java.util.Set<java.lang.Character> charSet59 = locale50.getExtensionKeys();
        java.lang.String str60 = locale50.getVariant();
        java.util.Calendar calendar61 = java.util.Calendar.getInstance(locale50);
        java.lang.String str62 = locale50.getVariant();
        boolean boolean63 = localeList13.contains((java.lang.Object) str62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar43 and calendar61", (calendar43.compareTo(calendar61) == 0) == calendar43.equals(calendar61));
    }

    @Test
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test139");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.util.Date date4 = new java.util.Date();
        int int5 = date4.getSeconds();
        java.lang.String str6 = fastDateFormat2.format(date4);
        java.util.Locale locale7 = fastDateFormat2.getLocale();
        java.util.Locale locale8 = fastDateFormat2.getLocale();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        boolean boolean12 = timeZone10.hasSameRules(timeZone11);
        boolean boolean13 = timeZone9.hasSameRules(timeZone10);
        timeZone9.setID("java.util.GregorianCalendar[time=1645454754087,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=54,MILLISECOND=87,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale17 = java.util.Locale.forLanguageTag("English");
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone9, locale17);
        java.util.Locale locale19 = java.util.Locale.SIMPLIFIED_CHINESE;
        boolean boolean20 = locale19.hasExtensions();
        java.lang.String str21 = locale17.getDisplayName(locale19);
        java.lang.String str22 = locale19.getDisplayCountry();
        boolean boolean23 = locale19.hasExtensions();
        java.lang.String str24 = locale8.getDisplayScript(locale19);
        java.util.TimeZone timeZone26 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone26);
        java.util.TimeZone timeZone28 = fastDateFormat27.getTimeZone();
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(timeZone28);
        java.util.Locale locale30 = java.util.Locale.US;
        java.lang.String str32 = locale30.getExtension('a');
        java.util.Set<java.lang.Character> charSet33 = locale30.getExtensionKeys();
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone28, locale30);
        java.lang.String str35 = locale19.getDisplayLanguage(locale30);
        java.lang.String str36 = locale30.getISO3Language();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar18 and calendar29", (calendar18.compareTo(calendar29) == 0) == calendar18.equals(calendar29));
    }

    @Test
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test140");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Calendar.Builder builder4 = builder0.setTimeZone(timeZone1);
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str6 = locale5.getLanguage();
        java.lang.String str7 = locale5.getDisplayScript();
        java.util.Calendar.Builder builder8 = builder4.setLocale(locale5);
        java.util.Calendar calendar9 = builder8.build();
        java.util.Calendar.Builder builder11 = builder8.setLenient(true);
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone12.hasSameRules(timeZone13);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone12);
        java.util.TimeZone timeZone16 = calendar15.getTimeZone();
        java.util.TimeZone timeZone17 = calendar15.getTimeZone();
        boolean boolean18 = calendar15.isWeekDateSupported();
        int int20 = calendar15.getLeastMaximum(10);
        int int21 = calendar15.getWeekYear();
        java.lang.String str22 = calendar15.getCalendarType();
        calendar15.setTimeInMillis((long) (short) -1);
        java.util.TimeZone timeZone25 = calendar15.getTimeZone();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance();
        int int28 = calendar26.getActualMaximum(4);
        java.util.TimeZone timeZone30 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone30);
        java.util.TimeZone timeZone32 = fastDateFormat31.getTimeZone();
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone32);
        calendar26.setTimeZone(timeZone32);
        timeZone32.setID("21 Feb 2022 14:45:52 GMT");
        boolean boolean37 = timeZone25.hasSameRules(timeZone32);
        java.util.Calendar.Builder builder38 = builder11.setTimeZone(timeZone32);
        java.util.Calendar.Builder builder40 = builder11.setLenient(false);
        java.util.Calendar.Builder builder42 = builder11.setLenient(true);
        java.util.Calendar.Builder builder44 = builder42.setInstant((long) 999);
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        boolean boolean47 = timeZone45.hasSameRules(timeZone46);
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(timeZone45);
        java.util.TimeZone timeZone49 = calendar48.getTimeZone();
        java.util.TimeZone timeZone50 = calendar48.getTimeZone();
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        boolean boolean53 = timeZone51.hasSameRules(timeZone52);
        java.util.Calendar calendar54 = java.util.Calendar.getInstance(timeZone51);
        java.util.TimeZone.setDefault(timeZone51);
        calendar48.setTimeZone(timeZone51);
        java.util.Calendar.Builder builder57 = builder44.setTimeZone(timeZone51);
        java.util.Calendar calendar58 = builder57.build();
        java.util.Calendar.Builder builder60 = builder57.setInstant(1645454941360L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar26 and calendar48", (calendar26.compareTo(calendar48) == 0) == calendar26.equals(calendar48));
    }

    @Test
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test141");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = java.util.Locale.FRANCE;
        boolean boolean8 = locale7.hasExtensions();
        java.util.Locale locale9 = java.util.Locale.FRANCE;
        java.util.Locale locale10 = java.util.Locale.CHINESE;
        java.lang.String str11 = locale10.getLanguage();
        java.util.Locale[] localeArray12 = new java.util.Locale[] { locale6, locale7, locale9, locale10 };
        java.util.ArrayList<java.util.Locale> localeList13 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList13, localeArray12);
        java.util.Locale.FilteringMode filteringMode15 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList16 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList13, filteringMode15);
        int int18 = localeList16.lastIndexOf((java.lang.Object) 11);
        java.util.Locale locale19 = java.util.Locale.CHINESE;
        java.lang.String str20 = locale19.getLanguage();
        boolean boolean21 = locale19.hasExtensions();
        java.lang.String str22 = locale19.getDisplayCountry();
        java.util.Set<java.lang.String> strSet23 = locale19.getUnicodeLocaleKeys();
        boolean boolean24 = localeList16.containsAll((java.util.Collection<java.lang.String>) strSet23);
        java.util.Locale.FilteringMode filteringMode25 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList26 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList16, filteringMode25);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone27.hasSameRules(timeZone28);
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone27);
        java.util.Locale locale31 = java.util.Locale.CHINA;
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(timeZone27, locale31);
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        boolean boolean35 = timeZone33.hasSameRules(timeZone34);
        boolean boolean36 = timeZone34.observesDaylightTime();
        boolean boolean37 = timeZone27.hasSameRules(timeZone34);
        boolean boolean38 = localeList16.remove((java.lang.Object) timeZone34);
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(timeZone34);
        java.util.Date date40 = calendar39.getTime();
        java.util.TimeZone timeZone42 = java.util.TimeZone.getTimeZone("2:46:23 PM UTC");
        java.lang.String str43 = timeZone42.getID();
        int int44 = timeZone42.getRawOffset();
        java.util.Locale.Category category45 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale46 = java.util.Locale.getDefault(category45);
        java.lang.String str47 = locale46.getScript();
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(timeZone42, locale46);
        calendar39.setTimeZone(timeZone42);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar30 and calendar48", (calendar30.compareTo(calendar48) == 0) == calendar30.equals(calendar48));
    }

    @Test
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test142");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        java.util.TimeZone timeZone4 = calendar3.getTimeZone();
        int int5 = calendar3.getFirstDayOfWeek();
        int int6 = calendar3.getFirstDayOfWeek();
        calendar3.setTimeInMillis((long) 100);
        calendar3.roll(36, 0);
        calendar3.add((int) (byte) 0, 24);
        java.util.TimeZone timeZone15 = calendar3.getTimeZone();
        java.util.Locale locale17 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(locale17);
        int int20 = calendar18.getMinimum(13);
        java.util.Calendar.Builder builder21 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone22.hasSameRules(timeZone23);
        java.util.Calendar.Builder builder25 = builder21.setTimeZone(timeZone22);
        calendar18.setTimeZone(timeZone22);
        java.util.Locale.Category category27 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale28 = java.util.Locale.getDefault(category27);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat29 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone22, locale28);
        java.util.Locale locale30 = locale28.stripExtensions();
        java.util.Locale locale31 = java.util.Locale.CHINESE;
        java.lang.String str32 = locale31.getLanguage();
        boolean boolean33 = locale31.hasExtensions();
        java.lang.String str34 = locale31.getDisplayCountry();
        java.util.Set<java.lang.String> strSet35 = locale31.getUnicodeLocaleKeys();
        java.lang.String str36 = locale31.getDisplayCountry();
        java.lang.String str37 = locale31.getDisplayScript();
        java.lang.String str38 = locale30.getDisplayVariant(locale31);
        java.lang.String str39 = locale30.getDisplayVariant();
        java.lang.String str40 = locale30.toLanguageTag();
        java.util.Locale locale41 = java.util.Locale.CHINESE;
        java.lang.String str42 = locale41.getLanguage();
        boolean boolean43 = locale41.hasExtensions();
        java.lang.String str44 = locale41.getDisplayCountry();
        java.util.Set<java.lang.String> strSet45 = locale41.getUnicodeLocaleKeys();
        java.lang.String str46 = locale41.getDisplayCountry();
        java.lang.String str47 = locale41.getDisplayScript();
        java.lang.String str48 = locale41.getVariant();
        java.lang.String str49 = locale30.getDisplayName(locale41);
        java.util.Calendar calendar50 = java.util.Calendar.getInstance(timeZone15, locale30);
        java.util.TimeZone.setDefault(timeZone15);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar18 and calendar50", (calendar18.compareTo(calendar50) == 0) == calendar18.equals(calendar50));
    }

    @Test
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test143");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.CHINESE;
        java.lang.String str4 = locale3.getLanguage();
        java.lang.String str5 = locale3.getDisplayScript();
        java.lang.String str6 = locale3.getDisplayScript();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone1, locale3);
        java.util.Locale locale8 = java.util.Locale.CHINESE;
        java.lang.String str9 = locale8.getLanguage();
        boolean boolean10 = locale8.hasExtensions();
        java.lang.String str11 = locale8.getDisplayCountry();
        java.lang.String str12 = locale8.getDisplayLanguage();
        java.lang.String str13 = locale8.getLanguage();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(locale8);
        boolean boolean15 = calendar7.after((java.lang.Object) locale8);
        calendar7.setLenient(false);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        boolean boolean20 = timeZone18.hasSameRules(timeZone19);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone18);
        java.util.TimeZone timeZone22 = calendar21.getTimeZone();
        java.util.TimeZone timeZone23 = calendar21.getTimeZone();
        boolean boolean24 = timeZone23.observesDaylightTime();
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone23);
        calendar7.setTimeZone(timeZone23);
        int int27 = calendar7.getFirstDayOfWeek();
        java.util.Calendar calendar28 = java.util.Calendar.getInstance();
        java.util.Date date29 = calendar28.getTime();
        int int30 = date29.getTimezoneOffset();
        calendar7.setTime(date29);
        int int32 = calendar7.getMinimalDaysInFirstWeek();
        java.time.Instant instant33 = calendar7.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar14 and calendar21", (calendar14.compareTo(calendar21) == 0) == calendar14.equals(calendar21));
    }

    @Test
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test144");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Calendar.Builder builder4 = builder0.setTimeZone(timeZone1);
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str6 = locale5.getLanguage();
        java.lang.String str7 = locale5.getDisplayScript();
        java.util.Calendar.Builder builder8 = builder4.setLocale(locale5);
        java.util.Calendar calendar9 = builder8.build();
        java.util.Calendar.Builder builder11 = builder8.setLenient(true);
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone12.hasSameRules(timeZone13);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone12);
        java.util.TimeZone timeZone16 = calendar15.getTimeZone();
        java.util.TimeZone timeZone17 = calendar15.getTimeZone();
        boolean boolean18 = calendar15.isWeekDateSupported();
        int int20 = calendar15.getLeastMaximum(10);
        int int21 = calendar15.getWeekYear();
        java.lang.String str22 = calendar15.getCalendarType();
        calendar15.setTimeInMillis((long) (short) -1);
        java.util.TimeZone timeZone25 = calendar15.getTimeZone();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance();
        int int28 = calendar26.getActualMaximum(4);
        java.util.TimeZone timeZone30 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone30);
        java.util.TimeZone timeZone32 = fastDateFormat31.getTimeZone();
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone32);
        calendar26.setTimeZone(timeZone32);
        timeZone32.setID("21 Feb 2022 14:45:52 GMT");
        boolean boolean37 = timeZone25.hasSameRules(timeZone32);
        java.util.Calendar.Builder builder38 = builder11.setTimeZone(timeZone32);
        java.util.Calendar.Builder builder41 = builder38.set(10, 17);
        java.util.Calendar calendar42 = builder41.build();
        java.util.TimeZone timeZone43 = calendar42.getTimeZone();
        int int44 = calendar42.getMinimalDaysInFirstWeek();
        calendar42.roll(2, true);
        java.util.TimeZone timeZone48 = calendar42.getTimeZone();
        java.lang.String str49 = timeZone48.getID();
        timeZone48.setRawOffset((int) (byte) 10);
        java.util.Locale.Builder builder52 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder54 = builder52.setLanguage("");
        java.util.Locale locale55 = java.util.Locale.CHINESE;
        java.lang.String str56 = locale55.getLanguage();
        boolean boolean57 = locale55.hasExtensions();
        java.lang.String str58 = locale55.getDisplayCountry();
        java.util.Calendar calendar59 = java.util.Calendar.getInstance(locale55);
        java.util.Locale.Builder builder60 = builder54.setLocale(locale55);
        java.text.Format.Field field61 = null;
        java.text.FieldPosition fieldPosition62 = new java.text.FieldPosition(field61);
        int int63 = fieldPosition62.getBeginIndex();
        int int64 = fieldPosition62.getField();
        fieldPosition62.setBeginIndex(17);
        java.util.Locale locale67 = java.util.Locale.CANADA_FRENCH;
        boolean boolean68 = fieldPosition62.equals((java.lang.Object) locale67);
        java.util.Locale.Builder builder69 = builder54.setLocale(locale67);
        java.lang.String str70 = timeZone48.getDisplayName(locale67);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar26 and calendar59", (calendar26.compareTo(calendar59) == 0) == calendar26.equals(calendar59));
    }

    @Test
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test145");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str4 = fastDateFormat2.format((long) '#');
        java.lang.String str6 = fastDateFormat2.format((long) 7);
        java.util.Calendar.Builder builder7 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone8.hasSameRules(timeZone9);
        java.util.Calendar.Builder builder11 = builder7.setTimeZone(timeZone8);
        java.util.Locale locale12 = java.util.Locale.CHINESE;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale12.getDisplayScript();
        java.util.Calendar.Builder builder15 = builder11.setLocale(locale12);
        boolean boolean16 = fastDateFormat2.equals((java.lang.Object) builder15);
        java.util.Calendar.Builder builder21 = builder15.setTimeOfDay(122, 8, (int) (byte) 100, 29);
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone22.hasSameRules(timeZone23);
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone22);
        java.util.TimeZone timeZone26 = calendar25.getTimeZone();
        java.util.TimeZone timeZone28 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat29 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone28);
        java.util.TimeZone timeZone30 = fastDateFormat29.getTimeZone();
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(timeZone30);
        calendar25.setTimeZone(timeZone30);
        boolean boolean33 = timeZone30.observesDaylightTime();
        java.util.Calendar.Builder builder34 = builder21.setTimeZone(timeZone30);
        java.util.Calendar.Builder builder35 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        boolean boolean38 = timeZone36.hasSameRules(timeZone37);
        java.util.Calendar.Builder builder39 = builder35.setTimeZone(timeZone36);
        java.util.Locale locale40 = java.util.Locale.CHINESE;
        java.lang.String str41 = locale40.getLanguage();
        java.lang.String str42 = locale40.getDisplayScript();
        java.util.Calendar.Builder builder43 = builder39.setLocale(locale40);
        java.util.Calendar.Builder builder45 = builder43.setLenient(false);
        java.util.Calendar.Builder builder50 = builder43.setTimeOfDay(0, 0, (int) (short) 100, (int) (byte) 1);
        java.util.Calendar.Builder builder54 = builder43.setTimeOfDay(21, 21, 0);
        java.util.Calendar calendar55 = java.util.Calendar.getInstance();
        java.util.TimeZone timeZone56 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone57 = java.util.TimeZone.getDefault();
        boolean boolean58 = timeZone56.hasSameRules(timeZone57);
        boolean boolean59 = timeZone57.observesDaylightTime();
        calendar55.setTimeZone(timeZone57);
        java.util.Calendar.Builder builder61 = builder54.setTimeZone(timeZone57);
        java.util.Locale locale62 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar63 = java.util.Calendar.getInstance(locale62);
        int int65 = calendar63.getMinimum(13);
        java.util.Calendar.Builder builder66 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone67 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone68 = java.util.TimeZone.getDefault();
        boolean boolean69 = timeZone67.hasSameRules(timeZone68);
        java.util.Calendar.Builder builder70 = builder66.setTimeZone(timeZone67);
        calendar63.setTimeZone(timeZone67);
        java.util.Calendar.Builder builder72 = builder61.setTimeZone(timeZone67);
        java.util.Calendar.Builder builder73 = builder34.setTimeZone(timeZone67);
        java.util.TimeZone timeZone74 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone75 = java.util.TimeZone.getDefault();
        boolean boolean76 = timeZone74.hasSameRules(timeZone75);
        java.util.Calendar calendar77 = java.util.Calendar.getInstance(timeZone74);
        java.util.TimeZone timeZone78 = calendar77.getTimeZone();
        java.util.TimeZone timeZone79 = calendar77.getTimeZone();
        java.util.TimeZone timeZone80 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone81 = java.util.TimeZone.getDefault();
        boolean boolean82 = timeZone80.hasSameRules(timeZone81);
        java.util.Calendar calendar83 = java.util.Calendar.getInstance(timeZone80);
        java.util.TimeZone.setDefault(timeZone80);
        calendar77.setTimeZone(timeZone80);
        java.util.Calendar calendar86 = java.util.Calendar.getInstance(timeZone80);
        timeZone80.setID("21 Feb 2022 14:46:26 GMT");
        java.util.Calendar.Builder builder89 = builder73.setTimeZone(timeZone80);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar25 and calendar77", (calendar25.compareTo(calendar77) == 0) == calendar25.equals(calendar77));
    }

    @Test
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test146");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.lang.String str8 = locale7.getLanguage();
        java.util.Locale[] localeArray9 = new java.util.Locale[] { locale3, locale4, locale6, locale7 };
        java.util.ArrayList<java.util.Locale> localeList10 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList10, localeArray9);
        java.util.Locale.FilteringMode filteringMode12 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList13 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList10, filteringMode12);
        int int15 = localeList13.lastIndexOf((java.lang.Object) 11);
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.lang.String str17 = locale16.getLanguage();
        boolean boolean18 = locale16.hasExtensions();
        java.lang.String str19 = locale16.getDisplayCountry();
        java.util.Set<java.lang.String> strSet20 = locale16.getUnicodeLocaleKeys();
        boolean boolean21 = localeList13.containsAll((java.util.Collection<java.lang.String>) strSet20);
        java.util.ListIterator<java.util.Locale> localeItor22 = localeList13.listIterator();
        boolean boolean23 = localeList13.isEmpty();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone24.hasSameRules(timeZone25);
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone24);
        java.util.Locale locale28 = java.util.Locale.CHINA;
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(timeZone24, locale28);
        timeZone24.setID("java.util.GregorianCalendar[time=1645454754087,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=54,MILLISECOND=87,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale33 = new java.util.Locale("java.util.GregorianCalendar[time=1645454753591,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=53,MILLISECOND=591,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale34 = java.util.Locale.US;
        java.lang.String str36 = locale34.getExtension('a');
        java.util.Set<java.lang.Character> charSet37 = locale34.getExtensionKeys();
        java.lang.String str38 = locale34.getDisplayCountry();
        java.lang.String str39 = locale34.getDisplayVariant();
        java.util.Locale.setDefault(locale34);
        java.lang.String str41 = locale33.getDisplayVariant(locale34);
        java.util.Calendar calendar42 = java.util.Calendar.getInstance(timeZone24, locale34);
        boolean boolean43 = localeList13.add(locale34);
        java.util.ListIterator<java.util.Locale> localeItor44 = localeList13.listIterator();
        java.util.ListIterator<java.util.Locale> localeItor45 = localeList13.listIterator();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar27 and calendar29", (calendar27.compareTo(calendar29) == 0) == calendar27.equals(calendar29));
    }

    @Test
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test147");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        java.util.TimeZone timeZone4 = calendar3.getTimeZone();
        java.util.TimeZone timeZone6 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat7 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone6);
        java.util.TimeZone timeZone8 = fastDateFormat7.getTimeZone();
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone8);
        calendar3.setTimeZone(timeZone8);
        timeZone8.setID("21 Feb 2022 14:45:49 GMT");
        timeZone8.setRawOffset(9);
        java.util.Locale locale16 = java.util.Locale.forLanguageTag("GMT");
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone8, locale16);
        java.util.TimeZone timeZone19 = java.util.TimeZone.getTimeZone("");
        boolean boolean20 = timeZone8.hasSameRules(timeZone19);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone19);
        java.util.Date date27 = new java.util.Date((int) (short) 0, (int) (byte) -1, (int) (short) -1, (-1896), 7);
        int int28 = date27.getTimezoneOffset();
        int int29 = date27.getSeconds();
        boolean boolean30 = timeZone19.inDaylightTime(date27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar21", (calendar3.compareTo(calendar21) == 0) == calendar3.equals(calendar21));
    }

    @Test
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test148");
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        int int3 = calendar1.getActualMaximum(4);
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone5);
        java.util.TimeZone timeZone7 = fastDateFormat6.getTimeZone();
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone7);
        calendar1.setTimeZone(timeZone7);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\u534f\u8c03\u4e16\u754c\u65f6\u95f4", timeZone7);
        java.util.TimeZone.setDefault(timeZone7);
        java.util.Locale.Builder builder12 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder14 = builder12.setLanguage("");
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.lang.String str16 = locale15.getLanguage();
        boolean boolean17 = locale15.hasExtensions();
        java.lang.String str18 = locale15.getDisplayCountry();
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(locale15);
        java.util.Locale.Builder builder20 = builder14.setLocale(locale15);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone7, locale15);
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.Locale locale25 = java.util.Locale.GERMAN;
        java.util.Locale locale26 = java.util.Locale.FRANCE;
        boolean boolean27 = locale26.hasExtensions();
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        java.util.Locale locale29 = java.util.Locale.CHINESE;
        java.lang.String str30 = locale29.getLanguage();
        java.util.Locale[] localeArray31 = new java.util.Locale[] { locale25, locale26, locale28, locale29 };
        java.util.ArrayList<java.util.Locale> localeList32 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList32, localeArray31);
        java.util.Locale.FilteringMode filteringMode34 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList35 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList32, filteringMode34);
        java.util.Spliterator<java.util.Locale> localeSpliterator36 = localeList35.spliterator();
        java.util.Locale.LanguageRange[] languageRangeArray37 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList38 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList38, languageRangeArray37);
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        java.util.Locale locale41 = java.util.Locale.FRANCE;
        boolean boolean42 = locale41.hasExtensions();
        java.util.Locale locale43 = java.util.Locale.FRANCE;
        java.util.Locale locale44 = java.util.Locale.CHINESE;
        java.lang.String str45 = locale44.getLanguage();
        java.util.Locale[] localeArray46 = new java.util.Locale[] { locale40, locale41, locale43, locale44 };
        java.util.ArrayList<java.util.Locale> localeList47 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList47, localeArray46);
        java.util.Locale.FilteringMode filteringMode49 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, (java.util.Collection<java.util.Locale>) localeList47, filteringMode49);
        java.util.Spliterator<java.util.Locale> localeSpliterator51 = localeList50.spliterator();
        boolean boolean52 = localeList35.equals((java.lang.Object) localeSpliterator51);
        java.lang.Object[] objArray53 = localeList35.toArray();
        java.util.Locale locale54 = java.util.Locale.CHINESE;
        java.lang.String str55 = locale54.getLanguage();
        java.lang.String str56 = locale54.getDisplayScript();
        java.util.Set<java.lang.Character> charSet57 = locale54.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet58 = locale54.getExtensionKeys();
        java.util.Locale locale59 = locale54.stripExtensions();
        java.lang.String str60 = locale59.getScript();
        java.util.Locale locale62 = new java.util.Locale("java.util.GregorianCalendar[time=1645454753591,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=53,MILLISECOND=591,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale63 = java.util.Locale.US;
        java.lang.String str65 = locale63.getExtension('a');
        java.util.Set<java.lang.Character> charSet66 = locale63.getExtensionKeys();
        java.lang.String str67 = locale63.getDisplayCountry();
        java.lang.String str68 = locale63.getDisplayVariant();
        java.util.Locale.setDefault(locale63);
        java.lang.String str70 = locale62.getDisplayVariant(locale63);
        java.lang.String str71 = locale59.getDisplayName(locale63);
        boolean boolean72 = localeList35.add(locale59);
        java.util.TimeZone timeZone73 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone74 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone75 = java.util.TimeZone.getDefault();
        boolean boolean76 = timeZone74.hasSameRules(timeZone75);
        boolean boolean77 = timeZone73.hasSameRules(timeZone74);
        timeZone73.setID("java.util.GregorianCalendar[time=1645454754087,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=54,MILLISECOND=87,ZONE_OFFSET=0,DST_OFFSET=0]");
        boolean boolean80 = localeList35.equals((java.lang.Object) timeZone73);
        calendar21.setTimeZone(timeZone73);
        timeZone73.setRawOffset(54);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar19 and calendar21", (calendar19.compareTo(calendar21) == 0) == calendar19.equals(calendar21));
    }

    @Test
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test149");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Calendar.Builder builder4 = builder0.setTimeZone(timeZone1);
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str6 = locale5.getLanguage();
        java.lang.String str7 = locale5.getDisplayScript();
        java.util.Calendar.Builder builder8 = builder4.setLocale(locale5);
        java.util.Calendar.Builder builder12 = builder4.setDate(0, 9, 56);
        java.util.Locale locale13 = java.util.Locale.CHINESE;
        java.lang.String str14 = locale13.getLanguage();
        java.lang.String str15 = locale13.getDisplayScript();
        java.util.Set<java.lang.Character> charSet16 = locale13.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet17 = locale13.getExtensionKeys();
        java.util.Locale locale18 = locale13.stripExtensions();
        java.lang.String str19 = locale18.getScript();
        java.util.Locale locale21 = new java.util.Locale("java.util.GregorianCalendar[time=1645454753591,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=53,MILLISECOND=591,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale22 = java.util.Locale.US;
        java.lang.String str24 = locale22.getExtension('a');
        java.util.Set<java.lang.Character> charSet25 = locale22.getExtensionKeys();
        java.lang.String str26 = locale22.getDisplayCountry();
        java.lang.String str27 = locale22.getDisplayVariant();
        java.util.Locale.setDefault(locale22);
        java.lang.String str29 = locale21.getDisplayVariant(locale22);
        java.lang.String str30 = locale18.getDisplayName(locale22);
        boolean boolean31 = locale18.hasExtensions();
        java.util.Calendar.Builder builder32 = builder4.setLocale(locale18);
        java.util.Calendar.Builder builder34 = builder32.setLenient(true);
        java.util.TimeZone timeZone36 = java.util.TimeZone.getTimeZone("Fri Jan 21 14:45:48 UTC 2022");
        int int37 = timeZone36.getRawOffset();
        java.time.ZoneId zoneId38 = timeZone36.toZoneId();
        java.util.Calendar.Builder builder39 = builder32.setTimeZone(timeZone36);
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(timeZone36);
        timeZone36.setID("Wednesday, September 18, 2024 1:40:00 PM GMT+00:00");
        boolean boolean43 = timeZone36.observesDaylightTime();
        java.util.Locale locale44 = java.util.Locale.FRANCE;
        java.util.Locale locale45 = java.util.Locale.US;
        java.lang.String str47 = locale45.getExtension('a');
        java.util.Set<java.lang.Character> charSet48 = locale45.getExtensionKeys();
        java.lang.String str49 = locale44.getDisplayScript(locale45);
        java.util.Locale locale50 = locale45.stripExtensions();
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        boolean boolean53 = timeZone51.hasSameRules(timeZone52);
        java.util.Locale locale54 = java.util.Locale.CHINESE;
        java.lang.String str55 = locale54.getLanguage();
        java.lang.String str56 = locale54.getDisplayScript();
        java.lang.String str57 = locale54.getDisplayScript();
        java.util.Calendar calendar58 = java.util.Calendar.getInstance(timeZone52, locale54);
        java.lang.String str59 = locale50.getDisplayName(locale54);
        java.lang.String str60 = locale54.getDisplayName();
        java.util.Locale locale61 = java.util.Locale.US;
        java.lang.String str63 = locale61.getExtension('a');
        java.util.Set<java.lang.Character> charSet64 = locale61.getExtensionKeys();
        java.util.Set<java.lang.String> strSet65 = locale61.getUnicodeLocaleKeys();
        java.lang.String str66 = locale54.getDisplayName(locale61);
        java.util.Set<java.lang.String> strSet67 = locale61.getUnicodeLocaleAttributes();
        java.util.Calendar calendar68 = java.util.Calendar.getInstance(timeZone36, locale61);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar40 and calendar58", (calendar40.compareTo(calendar58) == 0) == calendar40.equals(calendar58));
    }

    @Test
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test150");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Calendar.Builder builder4 = builder0.setTimeZone(timeZone1);
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str6 = locale5.getLanguage();
        java.lang.String str7 = locale5.getDisplayScript();
        java.util.Calendar.Builder builder8 = builder4.setLocale(locale5);
        java.util.Calendar calendar9 = builder8.build();
        java.util.Calendar.Builder builder11 = builder8.setLenient(true);
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone12.hasSameRules(timeZone13);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone12);
        java.util.TimeZone timeZone16 = calendar15.getTimeZone();
        java.util.TimeZone timeZone17 = calendar15.getTimeZone();
        boolean boolean18 = calendar15.isWeekDateSupported();
        int int20 = calendar15.getLeastMaximum(10);
        int int21 = calendar15.getWeekYear();
        java.lang.String str22 = calendar15.getCalendarType();
        calendar15.setTimeInMillis((long) (short) -1);
        java.util.TimeZone timeZone25 = calendar15.getTimeZone();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance();
        int int28 = calendar26.getActualMaximum(4);
        java.util.TimeZone timeZone30 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone30);
        java.util.TimeZone timeZone32 = fastDateFormat31.getTimeZone();
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone32);
        calendar26.setTimeZone(timeZone32);
        timeZone32.setID("21 Feb 2022 14:45:52 GMT");
        boolean boolean37 = timeZone25.hasSameRules(timeZone32);
        java.util.Calendar.Builder builder38 = builder11.setTimeZone(timeZone32);
        java.util.Locale locale39 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(locale39);
        java.lang.String str41 = locale39.getVariant();
        java.lang.String str42 = locale39.getDisplayName();
        java.lang.String str43 = locale39.getISO3Country();
        java.lang.String str44 = locale39.getDisplayName();
        java.util.Calendar.Builder builder45 = builder11.setLocale(locale39);
        java.util.Calendar.Builder builder50 = builder45.setTimeOfDay(46, 32769, 24, 57);
        java.util.Calendar.Builder builder54 = builder50.setDate(39, (int) (short) -1, 70);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar26 and calendar40", (calendar26.compareTo(calendar40) == 0) == calendar26.equals(calendar40));
    }

    @Test
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test151");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        boolean boolean4 = timeZone0.hasSameRules(timeZone1);
        timeZone0.setID("java.util.GregorianCalendar[time=1645454754087,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=54,MILLISECOND=87,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale8 = java.util.Locale.forLanguageTag("English");
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone0, locale8);
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        boolean boolean11 = locale10.hasExtensions();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = locale10.getDisplayCountry();
        boolean boolean14 = locale10.hasExtensions();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        boolean boolean17 = timeZone15.hasSameRules(timeZone16);
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone15);
        java.util.TimeZone timeZone19 = calendar18.getTimeZone();
        java.util.TimeZone timeZone20 = calendar18.getTimeZone();
        boolean boolean21 = timeZone20.observesDaylightTime();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone22.hasSameRules(timeZone23);
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone22);
        java.util.Locale locale26 = java.util.Locale.CHINA;
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone22, locale26);
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(timeZone20, locale26);
        java.lang.String str29 = locale10.getDisplayVariant(locale26);
        java.util.Set<java.lang.String> strSet30 = locale10.getUnicodeLocaleKeys();
        java.util.stream.Stream<java.lang.String> strStream31 = strSet30.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream32 = strSet30.parallelStream();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar9 and calendar18", (calendar9.compareTo(calendar18) == 0) == calendar9.equals(calendar18));
    }

    @Test
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test152");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.text.ParsePosition parsePosition6 = new java.text.ParsePosition(16);
        parsePosition6.setIndex(11);
        int int9 = parsePosition6.getErrorIndex();
        java.lang.Object obj10 = fastDateFormat2.parseObject("12:00:00 AM UTC", parsePosition6);
        java.util.TimeZone timeZone11 = fastDateFormat2.getTimeZone();
        java.util.TimeZone timeZone12 = fastDateFormat2.getTimeZone();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone13.hasSameRules(timeZone14);
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone13);
        java.util.TimeZone timeZone17 = calendar16.getTimeZone();
        java.util.TimeZone timeZone18 = calendar16.getTimeZone();
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        boolean boolean21 = timeZone19.hasSameRules(timeZone20);
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone19);
        java.util.TimeZone.setDefault(timeZone19);
        calendar16.setTimeZone(timeZone19);
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        boolean boolean27 = timeZone25.hasSameRules(timeZone26);
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(timeZone25);
        java.util.TimeZone timeZone29 = calendar28.getTimeZone();
        java.util.TimeZone timeZone30 = calendar28.getTimeZone();
        calendar28.set(4, (int) (byte) 0, 50, 11, 8, 54);
        java.util.Date date38 = calendar28.getTime();
        calendar16.setTime(date38);
        java.lang.StringBuffer stringBuffer40 = null;
        java.lang.StringBuffer stringBuffer41 = fastDateFormat2.format(date38, stringBuffer40);
        java.util.Date date42 = new java.util.Date();
        int int43 = date42.getSeconds();
        date42.setSeconds((int) (byte) 1);
        java.lang.String str46 = fastDateFormat2.format(date42);
        java.util.Date date52 = new java.util.Date(48, (int) (byte) 100, 48, 50, 49);
        java.lang.StringBuffer stringBuffer53 = null;
        java.lang.StringBuffer stringBuffer54 = fastDateFormat2.format(date52, stringBuffer53);
        java.lang.StringBuffer stringBuffer56 = null;
        java.lang.StringBuffer stringBuffer57 = fastDateFormat2.format((-1649030400045L), stringBuffer56);
        boolean boolean58 = fastDateFormat2.getTimeZoneOverridesCalendar();
        java.lang.String str59 = fastDateFormat2.getPattern();
        java.util.Calendar.Builder builder60 = new java.util.Calendar.Builder();
        java.util.Calendar calendar61 = builder60.build();
        boolean boolean62 = calendar61.isWeekDateSupported();
        java.util.TimeZone timeZone63 = calendar61.getTimeZone();
        calendar61.set(0, (int) (byte) 0, 292278994);
        java.lang.String str68 = fastDateFormat2.format(calendar61);
        boolean boolean69 = calendar61.isWeekDateSupported();
        java.util.TimeZone timeZone70 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone71 = java.util.TimeZone.getDefault();
        boolean boolean72 = timeZone70.hasSameRules(timeZone71);
        java.util.Calendar calendar73 = java.util.Calendar.getInstance(timeZone70);
        java.util.TimeZone timeZone74 = calendar73.getTimeZone();
        java.util.TimeZone timeZone76 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat77 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone76);
        java.util.TimeZone timeZone78 = fastDateFormat77.getTimeZone();
        java.util.Calendar calendar79 = java.util.Calendar.getInstance(timeZone78);
        calendar73.setTimeZone(timeZone78);
        timeZone78.setID("21 Feb 2022 14:45:49 GMT");
        timeZone78.setRawOffset(9);
        java.util.Locale locale86 = java.util.Locale.forLanguageTag("GMT");
        java.util.Calendar calendar87 = java.util.Calendar.getInstance(timeZone78, locale86);
        java.util.TimeZone timeZone89 = java.util.TimeZone.getTimeZone("");
        boolean boolean90 = timeZone78.hasSameRules(timeZone89);
        calendar61.setTimeZone(timeZone78);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar22 and calendar73", (calendar22.compareTo(calendar73) == 0) == calendar22.equals(calendar73));
    }

    @Test
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test153");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.lang.String str8 = locale7.getLanguage();
        java.util.Locale[] localeArray9 = new java.util.Locale[] { locale3, locale4, locale6, locale7 };
        java.util.ArrayList<java.util.Locale> localeList10 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList10, localeArray9);
        java.util.Locale.FilteringMode filteringMode12 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList13 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList10, filteringMode12);
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        boolean boolean19 = locale18.hasExtensions();
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        java.util.Locale locale21 = java.util.Locale.CHINESE;
        java.lang.String str22 = locale21.getLanguage();
        java.util.Locale[] localeArray23 = new java.util.Locale[] { locale17, locale18, locale20, locale21 };
        java.util.ArrayList<java.util.Locale> localeList24 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList24, localeArray23);
        java.util.Locale.FilteringMode filteringMode26 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList27 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.util.Locale>) localeList24, filteringMode26);
        int int28 = localeList13.indexOf((java.lang.Object) filteringMode26);
        localeList13.clear();
        java.util.Locale locale30 = java.util.Locale.CHINESE;
        java.lang.String str31 = locale30.getLanguage();
        boolean boolean32 = locale30.hasExtensions();
        java.lang.String str33 = locale30.getDisplayCountry();
        java.lang.String str34 = locale30.getDisplayLanguage();
        java.lang.String str35 = locale30.getLanguage();
        java.lang.String str36 = locale30.getDisplayVariant();
        boolean boolean37 = localeList13.add(locale30);
        localeList13.clear();
        java.util.Spliterator<java.util.Locale> localeSpliterator39 = localeList13.spliterator();
        java.util.Date date40 = new java.util.Date();
        java.lang.String str41 = date40.toGMTString();
        int int42 = date40.getYear();
        date40.setDate(0);
        int int45 = date40.getDay();
        date40.setYear((int) (byte) 1);
        date40.setYear(20);
        java.lang.String str50 = date40.toLocaleString();
        date40.setDate((int) 'u');
        int int53 = date40.getTimezoneOffset();
        int int54 = localeList13.indexOf((java.lang.Object) int53);
        java.text.AttributedCharacterIterator.Attribute attribute55 = java.text.AttributedCharacterIterator.Attribute.INPUT_METHOD_SEGMENT;
        java.util.TimeZone timeZone57 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat58 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone57);
        java.util.TimeZone timeZone59 = fastDateFormat58.getTimeZone();
        java.util.Calendar calendar60 = java.util.Calendar.getInstance(timeZone59);
        java.util.Locale locale61 = java.util.Locale.US;
        java.lang.String str63 = locale61.getExtension('a');
        java.util.Set<java.lang.Character> charSet64 = locale61.getExtensionKeys();
        java.util.Calendar calendar65 = java.util.Calendar.getInstance(timeZone59, locale61);
        java.util.TimeZone timeZone66 = calendar65.getTimeZone();
        boolean boolean67 = attribute55.equals((java.lang.Object) calendar65);
        java.lang.String str68 = attribute55.toString();
        java.util.Locale.Builder builder69 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder71 = builder69.setLanguage("");
        java.util.Locale locale72 = java.util.Locale.CHINESE;
        java.lang.String str73 = locale72.getLanguage();
        boolean boolean74 = locale72.hasExtensions();
        java.lang.String str75 = locale72.getDisplayCountry();
        java.util.Calendar calendar76 = java.util.Calendar.getInstance(locale72);
        java.util.Locale.Builder builder77 = builder71.setLocale(locale72);
        java.util.Locale.Builder builder78 = builder77.clear();
        java.util.Locale.Builder builder80 = builder78.setLanguage("CHN");
        java.util.Locale.Builder builder81 = builder78.clear();
        java.util.Locale.Builder builder82 = builder81.clearExtensions();
        boolean boolean83 = attribute55.equals((java.lang.Object) builder81);
        boolean boolean84 = localeList13.contains((java.lang.Object) boolean83);
        java.util.Date date86 = new java.util.Date((-1891728385000L));
        int int87 = date86.getHours();
        boolean boolean88 = localeList13.equals((java.lang.Object) date86);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar60 and calendar65", (calendar60.compareTo(calendar65) == 0) == calendar60.equals(calendar65));
    }

    @Test
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test154");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Calendar.Builder builder4 = builder0.setTimeZone(timeZone1);
        java.util.Calendar.Builder builder6 = builder0.setLenient(true);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone7.hasSameRules(timeZone8);
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone7);
        java.util.TimeZone timeZone11 = calendar10.getTimeZone();
        java.util.TimeZone timeZone12 = calendar10.getTimeZone();
        java.util.Calendar.Builder builder13 = builder0.setTimeZone(timeZone12);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.lang.String str18 = locale17.getLanguage();
        java.lang.String str19 = locale17.getDisplayScript();
        java.lang.String str20 = locale17.getDisplayScript();
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone15, locale17);
        java.util.Locale locale22 = java.util.Locale.CHINESE;
        java.lang.String str23 = locale22.getLanguage();
        boolean boolean24 = locale22.hasExtensions();
        java.lang.String str25 = locale22.getDisplayCountry();
        java.lang.String str26 = locale22.getDisplayLanguage();
        java.lang.String str27 = locale22.getLanguage();
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(locale22);
        boolean boolean29 = calendar21.after((java.lang.Object) locale22);
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone12, locale22);
        long long31 = calendar30.getTimeInMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar10 and calendar21", (calendar10.compareTo(calendar21) == 0) == calendar10.equals(calendar21));
    }

    @Test
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test155");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance();
        int int5 = calendar3.getActualMaximum(4);
        java.util.TimeZone timeZone7 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat8 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone7);
        java.util.TimeZone timeZone9 = fastDateFormat8.getTimeZone();
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone9);
        calendar3.setTimeZone(timeZone9);
        int int12 = calendar3.getFirstDayOfWeek();
        int int14 = calendar3.getActualMaximum((int) (short) 1);
        java.lang.String str15 = fastDateFormat2.format(calendar3);
        calendar3.setMinimalDaysInFirstWeek(2734);
        java.time.Instant instant18 = calendar3.toInstant();
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        boolean boolean21 = timeZone19.hasSameRules(timeZone20);
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone19);
        java.util.TimeZone timeZone23 = calendar22.getTimeZone();
        java.util.TimeZone timeZone24 = calendar22.getTimeZone();
        calendar22.set(4, (int) (byte) 0, 50, 11, 8, 54);
        java.util.Date date32 = calendar22.getTime();
        calendar3.setTime(date32);
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone35);
        java.lang.String str37 = fastDateFormat36.toString();
        java.lang.StringBuffer stringBuffer39 = null;
        java.lang.StringBuffer stringBuffer40 = fastDateFormat36.format((long) '4', stringBuffer39);
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        boolean boolean43 = timeZone41.hasSameRules(timeZone42);
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(timeZone41);
        java.util.TimeZone timeZone45 = calendar44.getTimeZone();
        int int46 = calendar44.getFirstDayOfWeek();
        int int47 = calendar44.getFirstDayOfWeek();
        int int49 = calendar44.getGreatestMinimum((int) (short) 10);
        calendar44.clear();
        java.lang.String str51 = fastDateFormat36.format(calendar44);
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone53 = java.util.TimeZone.getDefault();
        boolean boolean54 = timeZone52.hasSameRules(timeZone53);
        java.util.Calendar calendar55 = java.util.Calendar.getInstance(timeZone52);
        java.util.TimeZone timeZone56 = calendar55.getTimeZone();
        int int57 = calendar55.getFirstDayOfWeek();
        int int58 = calendar55.getFirstDayOfWeek();
        calendar55.setTimeInMillis((long) 100);
        java.lang.String str61 = fastDateFormat36.format(calendar55);
        java.lang.Object obj62 = fastDateFormat36.clone();
        int int63 = fastDateFormat36.getMaxLengthEstimate();
        java.util.TimeZone timeZone65 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat66 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone65);
        java.lang.String str67 = fastDateFormat66.toString();
        java.util.Date date68 = new java.util.Date();
        java.lang.String str69 = date68.toGMTString();
        int int70 = date68.getYear();
        int int71 = date68.getMonth();
        long long72 = date68.getTime();
        date68.setMinutes(32769);
        int int75 = date68.getDate();
        int int76 = date68.getSeconds();
        java.lang.StringBuffer stringBuffer77 = null;
        java.lang.StringBuffer stringBuffer78 = fastDateFormat66.format(date68, stringBuffer77);
        java.util.TimeZone timeZone80 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat81 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone80);
        java.util.TimeZone timeZone82 = fastDateFormat81.getTimeZone();
        boolean boolean83 = fastDateFormat81.getTimeZoneOverridesCalendar();
        java.lang.String str84 = fastDateFormat81.toString();
        java.util.Calendar calendar85 = java.util.Calendar.getInstance();
        java.util.Date date86 = calendar85.getTime();
        java.lang.String str87 = fastDateFormat81.format(date86);
        date86.setTime(1645454783535L);
        int int90 = date86.getHours();
        int int91 = date86.getMinutes();
        java.lang.StringBuffer stringBuffer92 = null;
        java.lang.StringBuffer stringBuffer93 = fastDateFormat66.format(date86, stringBuffer92);
        java.lang.StringBuffer stringBuffer94 = null;
        java.text.FieldPosition fieldPosition96 = new java.text.FieldPosition(32772);
        java.lang.StringBuffer stringBuffer97 = fastDateFormat36.format((java.lang.Object) date86, stringBuffer94, fieldPosition96);
        boolean boolean98 = date32.equals((java.lang.Object) date86);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar22", (calendar3.compareTo(calendar22) == 0) == calendar3.equals(calendar22));
    }

    @Test
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test156");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.util.TimeZone timeZone3 = fastDateFormat2.getTimeZone();
        int int4 = fastDateFormat2.getMaxLengthEstimate();
        java.util.Locale locale5 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale5);
        java.util.Date date7 = calendar6.getTime();
        calendar6.setFirstDayOfWeek((int) (short) 10);
        int int11 = calendar6.getActualMaximum(3);
        java.lang.String str12 = fastDateFormat2.format(calendar6);
        java.text.AttributedCharacterIterator.Attribute attribute13 = java.text.AttributedCharacterIterator.Attribute.INPUT_METHOD_SEGMENT;
        java.util.TimeZone timeZone15 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone15);
        java.util.TimeZone timeZone17 = fastDateFormat16.getTimeZone();
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone17);
        java.util.Locale locale19 = java.util.Locale.US;
        java.lang.String str21 = locale19.getExtension('a');
        java.util.Set<java.lang.Character> charSet22 = locale19.getExtensionKeys();
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone17, locale19);
        java.util.TimeZone timeZone24 = calendar23.getTimeZone();
        boolean boolean25 = attribute13.equals((java.lang.Object) calendar23);
        java.lang.String str26 = attribute13.toString();
        java.util.Locale.Builder builder27 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder29 = builder27.setLanguage("");
        java.util.Locale locale30 = java.util.Locale.CHINESE;
        java.lang.String str31 = locale30.getLanguage();
        boolean boolean32 = locale30.hasExtensions();
        java.lang.String str33 = locale30.getDisplayCountry();
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(locale30);
        java.util.Locale.Builder builder35 = builder29.setLocale(locale30);
        java.util.Locale.Builder builder36 = builder35.clear();
        java.util.Locale.Builder builder38 = builder36.setLanguage("CHN");
        java.util.Locale.Builder builder39 = builder36.clear();
        java.util.Locale.Builder builder40 = builder39.clearExtensions();
        boolean boolean41 = attribute13.equals((java.lang.Object) builder39);
        java.lang.String str42 = attribute13.toString();
        java.util.Calendar.Builder builder43 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        boolean boolean46 = timeZone44.hasSameRules(timeZone45);
        java.util.Calendar.Builder builder47 = builder43.setTimeZone(timeZone44);
        java.util.Locale locale48 = java.util.Locale.CHINESE;
        java.lang.String str49 = locale48.getLanguage();
        java.lang.String str50 = locale48.getDisplayScript();
        java.util.Calendar.Builder builder51 = builder47.setLocale(locale48);
        java.util.Calendar calendar52 = builder51.build();
        java.util.Calendar calendar53 = builder51.build();
        calendar53.setTimeInMillis(1645454798562L);
        boolean boolean56 = attribute13.equals((java.lang.Object) calendar53);
        java.lang.String str57 = fastDateFormat2.format(calendar53);
        java.lang.StringBuffer stringBuffer59 = null;
        java.text.Format.Field field60 = null;
        java.text.FieldPosition fieldPosition61 = new java.text.FieldPosition(field60);
        int int62 = fieldPosition61.getBeginIndex();
        boolean boolean64 = fieldPosition61.equals((java.lang.Object) 52);
        java.lang.String str65 = fieldPosition61.toString();
        int int66 = fieldPosition61.getField();
        fieldPosition61.setEndIndex(18);
        int int69 = fieldPosition61.getBeginIndex();
        java.lang.StringBuffer stringBuffer70 = fastDateFormat2.format((java.lang.Object) 1645454775508L, stringBuffer59, fieldPosition61);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar18", (calendar6.compareTo(calendar18) == 0) == calendar6.equals(calendar18));
    }

    @Test
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test157");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Calendar.Builder builder4 = builder0.setTimeZone(timeZone1);
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str6 = locale5.getLanguage();
        java.lang.String str7 = locale5.getDisplayScript();
        java.util.Calendar.Builder builder8 = builder4.setLocale(locale5);
        java.util.Calendar.Builder builder10 = builder8.setLenient(false);
        java.util.Calendar.Builder builder13 = builder10.set((int) (short) 1, 100);
        java.util.Calendar.Builder builder15 = builder10.setLenient(false);
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.lang.String str17 = locale16.getLanguage();
        boolean boolean18 = locale16.hasExtensions();
        java.lang.String str19 = locale16.getDisplayCountry();
        java.util.Set<java.lang.String> strSet20 = locale16.getUnicodeLocaleKeys();
        java.lang.String str21 = locale16.getDisplayLanguage();
        java.util.Calendar.Builder builder22 = builder10.setLocale(locale16);
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone24.hasSameRules(timeZone25);
        boolean boolean27 = timeZone23.hasSameRules(timeZone24);
        timeZone23.setID("java.util.GregorianCalendar[time=1645454754087,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=54,MILLISECOND=87,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale31 = java.util.Locale.forLanguageTag("English");
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(timeZone23, locale31);
        java.util.Locale locale33 = java.util.Locale.SIMPLIFIED_CHINESE;
        boolean boolean34 = locale33.hasExtensions();
        java.lang.String str35 = locale31.getDisplayName(locale33);
        java.lang.String str36 = locale33.getDisplayCountry();
        boolean boolean37 = locale33.hasExtensions();
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone39 = java.util.TimeZone.getDefault();
        boolean boolean40 = timeZone38.hasSameRules(timeZone39);
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(timeZone38);
        java.util.TimeZone timeZone42 = calendar41.getTimeZone();
        java.util.TimeZone timeZone43 = calendar41.getTimeZone();
        boolean boolean44 = timeZone43.observesDaylightTime();
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        boolean boolean47 = timeZone45.hasSameRules(timeZone46);
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(timeZone45);
        java.util.Locale locale49 = java.util.Locale.CHINA;
        java.util.Calendar calendar50 = java.util.Calendar.getInstance(timeZone45, locale49);
        java.util.Calendar calendar51 = java.util.Calendar.getInstance(timeZone43, locale49);
        java.lang.String str52 = locale33.getDisplayVariant(locale49);
        java.lang.String str53 = locale16.getDisplayLanguage(locale49);
        java.lang.String str54 = locale49.getISO3Language();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar32 and calendar41", (calendar32.compareTo(calendar41) == 0) == calendar32.equals(calendar41));
    }

    @Test
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test158");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Calendar.Builder builder4 = builder0.setTimeZone(timeZone1);
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str6 = locale5.getLanguage();
        java.lang.String str7 = locale5.getDisplayScript();
        java.util.Calendar.Builder builder8 = builder4.setLocale(locale5);
        java.util.Calendar calendar9 = builder8.build();
        java.util.Calendar.Builder builder11 = builder8.setLenient(true);
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone12.hasSameRules(timeZone13);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone12);
        java.util.TimeZone timeZone16 = calendar15.getTimeZone();
        java.util.TimeZone timeZone17 = calendar15.getTimeZone();
        boolean boolean18 = calendar15.isWeekDateSupported();
        int int20 = calendar15.getLeastMaximum(10);
        int int21 = calendar15.getWeekYear();
        java.lang.String str22 = calendar15.getCalendarType();
        calendar15.setTimeInMillis((long) (short) -1);
        java.util.TimeZone timeZone25 = calendar15.getTimeZone();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance();
        int int28 = calendar26.getActualMaximum(4);
        java.util.TimeZone timeZone30 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone30);
        java.util.TimeZone timeZone32 = fastDateFormat31.getTimeZone();
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone32);
        calendar26.setTimeZone(timeZone32);
        timeZone32.setID("21 Feb 2022 14:45:52 GMT");
        boolean boolean37 = timeZone25.hasSameRules(timeZone32);
        java.util.Calendar.Builder builder38 = builder11.setTimeZone(timeZone32);
        java.util.Calendar.Builder builder41 = builder38.set(10, 17);
        java.util.Calendar calendar42 = builder41.build();
        java.util.TimeZone timeZone43 = calendar42.getTimeZone();
        timeZone43.setRawOffset(10);
        java.util.Calendar.Builder builder46 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone47 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        boolean boolean49 = timeZone47.hasSameRules(timeZone48);
        java.util.Calendar.Builder builder50 = builder46.setTimeZone(timeZone47);
        java.util.Calendar calendar51 = builder50.build();
        java.util.Calendar.Builder builder55 = builder50.setTimeOfDay(12, 21, (int) (short) -1);
        java.util.Calendar.Builder builder60 = builder50.setTimeOfDay(49, 54, 11, 15);
        java.util.Calendar.Builder builder62 = builder60.setLenient(false);
        java.util.Calendar.Builder builder66 = builder60.setWeekDate(0, 44, 0);
        java.util.Locale locale67 = java.util.Locale.getDefault();
        java.util.Locale locale68 = java.util.Locale.CHINESE;
        java.lang.String str69 = locale68.getLanguage();
        boolean boolean70 = locale68.hasExtensions();
        java.lang.String str71 = locale67.getDisplayVariant(locale68);
        java.lang.String str72 = locale68.getDisplayScript();
        java.util.TimeZone timeZone73 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone74 = java.util.TimeZone.getDefault();
        boolean boolean75 = timeZone73.hasSameRules(timeZone74);
        java.util.Locale locale76 = java.util.Locale.CHINESE;
        java.lang.String str77 = locale76.getLanguage();
        java.lang.String str78 = locale76.getDisplayScript();
        java.lang.String str79 = locale76.getDisplayScript();
        java.util.Calendar calendar80 = java.util.Calendar.getInstance(timeZone74, locale76);
        java.lang.String str81 = locale68.getDisplayName(locale76);
        java.util.Calendar.Builder builder82 = builder66.setLocale(locale68);
        java.lang.String str83 = timeZone43.getDisplayName(locale68);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar26 and calendar80", (calendar26.compareTo(calendar80) == 0) == calendar26.equals(calendar80));
    }

    @Test
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test159");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        java.lang.String str1 = locale0.getVariant();
        java.util.Locale locale2 = locale0.stripExtensions();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3);
        java.util.Locale locale7 = java.util.Locale.CHINA;
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone3, locale7);
        timeZone3.setID("java.util.GregorianCalendar[time=1645454754087,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=54,MILLISECOND=87,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale12 = new java.util.Locale("java.util.GregorianCalendar[time=1645454753591,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=53,MILLISECOND=591,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale13 = java.util.Locale.US;
        java.lang.String str15 = locale13.getExtension('a');
        java.util.Set<java.lang.Character> charSet16 = locale13.getExtensionKeys();
        java.lang.String str17 = locale13.getDisplayCountry();
        java.lang.String str18 = locale13.getDisplayVariant();
        java.util.Locale.setDefault(locale13);
        java.lang.String str20 = locale12.getDisplayVariant(locale13);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone3, locale13);
        java.util.Set<java.lang.Character> charSet22 = locale13.getExtensionKeys();
        java.lang.String str23 = locale13.getVariant();
        java.lang.String str24 = locale2.getDisplayLanguage(locale13);
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(locale2);
        java.util.TimeZone timeZone26 = calendar25.getTimeZone();
        java.util.TimeZone.setDefault(timeZone26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar8", (calendar6.compareTo(calendar8) == 0) == calendar6.equals(calendar8));
    }

    @Test
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test160");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.util.TimeZone timeZone3 = fastDateFormat2.getTimeZone();
        java.util.Locale locale4 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(locale4);
        int int7 = calendar5.getMinimum(13);
        int int9 = calendar5.getMaximum(0);
        java.lang.String str10 = fastDateFormat2.format(calendar5);
        calendar5.setFirstDayOfWeek(120);
        java.util.Locale locale13 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(locale13);
        java.util.Date date15 = calendar14.getTime();
        java.lang.String str16 = date15.toLocaleString();
        calendar5.setTime(date15);
        java.util.TimeZone timeZone19 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone19);
        java.lang.String str21 = fastDateFormat20.getPattern();
        java.text.ParsePosition parsePosition24 = new java.text.ParsePosition(16);
        parsePosition24.setIndex(11);
        int int27 = parsePosition24.getErrorIndex();
        java.lang.Object obj28 = fastDateFormat20.parseObject("12:00:00 AM UTC", parsePosition24);
        java.util.TimeZone timeZone29 = fastDateFormat20.getTimeZone();
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone29);
        boolean boolean31 = date15.equals((java.lang.Object) timeZone29);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar14", (calendar5.compareTo(calendar14) == 0) == calendar5.equals(calendar14));
    }

    @Test
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test161");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Calendar.Builder builder4 = builder0.setTimeZone(timeZone1);
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str6 = locale5.getLanguage();
        java.lang.String str7 = locale5.getDisplayScript();
        java.util.Calendar.Builder builder8 = builder4.setLocale(locale5);
        java.util.Calendar calendar9 = builder8.build();
        java.util.Calendar.Builder builder11 = builder8.setLenient(true);
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone12.hasSameRules(timeZone13);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone12);
        java.util.TimeZone timeZone16 = calendar15.getTimeZone();
        java.util.TimeZone timeZone17 = calendar15.getTimeZone();
        boolean boolean18 = calendar15.isWeekDateSupported();
        int int20 = calendar15.getLeastMaximum(10);
        int int21 = calendar15.getWeekYear();
        java.lang.String str22 = calendar15.getCalendarType();
        calendar15.setTimeInMillis((long) (short) -1);
        java.util.TimeZone timeZone25 = calendar15.getTimeZone();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance();
        int int28 = calendar26.getActualMaximum(4);
        java.util.TimeZone timeZone30 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone30);
        java.util.TimeZone timeZone32 = fastDateFormat31.getTimeZone();
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone32);
        calendar26.setTimeZone(timeZone32);
        timeZone32.setID("21 Feb 2022 14:45:52 GMT");
        boolean boolean37 = timeZone25.hasSameRules(timeZone32);
        java.util.Calendar.Builder builder38 = builder11.setTimeZone(timeZone32);
        java.util.Calendar.Builder builder43 = builder38.setTimeOfDay(30, 7, 122, 23);
        java.util.Calendar.Builder builder48 = builder43.setTimeOfDay(7200000, 52, 0, 3);
        java.util.Calendar.Builder builder52 = builder48.setWeekDate(49, 14, 58);
        java.util.TimeZone timeZone53 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone54 = java.util.TimeZone.getDefault();
        boolean boolean55 = timeZone53.hasSameRules(timeZone54);
        java.util.Locale locale56 = java.util.Locale.CHINESE;
        java.lang.String str57 = locale56.getLanguage();
        java.lang.String str58 = locale56.getDisplayScript();
        java.lang.String str59 = locale56.getDisplayScript();
        java.util.Calendar calendar60 = java.util.Calendar.getInstance(timeZone54, locale56);
        java.util.Calendar.Builder builder61 = builder48.setTimeZone(timeZone54);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar26 and calendar60", (calendar26.compareTo(calendar60) == 0) == calendar26.equals(calendar60));
    }

    @Test
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test162");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Calendar.Builder builder4 = builder0.setTimeZone(timeZone1);
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str6 = locale5.getLanguage();
        java.lang.String str7 = locale5.getDisplayScript();
        java.util.Calendar.Builder builder8 = builder4.setLocale(locale5);
        java.util.Calendar calendar9 = builder8.build();
        java.util.Calendar.Builder builder11 = builder8.setLenient(true);
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone12.hasSameRules(timeZone13);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone12);
        java.util.TimeZone timeZone16 = calendar15.getTimeZone();
        java.util.TimeZone timeZone17 = calendar15.getTimeZone();
        boolean boolean18 = calendar15.isWeekDateSupported();
        int int20 = calendar15.getLeastMaximum(10);
        int int21 = calendar15.getWeekYear();
        java.lang.String str22 = calendar15.getCalendarType();
        calendar15.setTimeInMillis((long) (short) -1);
        java.util.TimeZone timeZone25 = calendar15.getTimeZone();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance();
        int int28 = calendar26.getActualMaximum(4);
        java.util.TimeZone timeZone30 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone30);
        java.util.TimeZone timeZone32 = fastDateFormat31.getTimeZone();
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone32);
        calendar26.setTimeZone(timeZone32);
        timeZone32.setID("21 Feb 2022 14:45:52 GMT");
        boolean boolean37 = timeZone25.hasSameRules(timeZone32);
        java.util.Calendar.Builder builder38 = builder11.setTimeZone(timeZone32);
        java.util.Calendar.Builder builder43 = builder38.setTimeOfDay(30, 7, 122, 23);
        java.util.Calendar.Builder builder47 = builder38.setTimeOfDay(12, 0, 23);
        java.util.Calendar calendar48 = builder47.build();
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone50 = java.util.TimeZone.getDefault();
        boolean boolean51 = timeZone49.hasSameRules(timeZone50);
        java.util.Calendar calendar52 = java.util.Calendar.getInstance(timeZone49);
        java.util.TimeZone timeZone53 = calendar52.getTimeZone();
        int int54 = calendar52.getFirstDayOfWeek();
        int int55 = calendar52.getFirstDayOfWeek();
        calendar52.setTimeInMillis((long) 100);
        calendar52.setFirstDayOfWeek(7);
        int int60 = calendar52.getMinimalDaysInFirstWeek();
        int int62 = calendar52.getActualMaximum((int) (short) 10);
        java.lang.String str63 = calendar52.getCalendarType();
        java.util.Calendar calendar64 = java.util.Calendar.getInstance();
        java.util.Date date65 = calendar64.getTime();
        calendar52.setTime(date65);
        calendar48.setTime(date65);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar26 and calendar52", (calendar26.compareTo(calendar52) == 0) == calendar26.equals(calendar52));
    }

    @Test
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test163");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("");
        java.util.Locale locale3 = java.util.Locale.CHINESE;
        java.lang.String str4 = locale3.getLanguage();
        boolean boolean5 = locale3.hasExtensions();
        java.lang.String str6 = locale3.getDisplayCountry();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(locale3);
        java.util.Locale.Builder builder8 = builder2.setLocale(locale3);
        java.util.Locale.Builder builder10 = builder2.setLanguage("");
        java.util.Locale.Builder builder11 = builder10.clear();
        java.util.Locale locale12 = builder11.build();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance();
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.lang.String str17 = locale16.getLanguage();
        java.lang.String str18 = locale16.getDisplayScript();
        java.util.Set<java.lang.Character> charSet19 = locale16.getExtensionKeys();
        java.util.Map<java.lang.String, java.lang.Integer> strMap20 = calendar13.getDisplayNames((int) (byte) 10, 0, locale16);
        java.util.Locale.setDefault(locale16);
        java.lang.String str22 = locale12.getDisplayName(locale16);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar7 and calendar13", (calendar7.compareTo(calendar13) == 0) == calendar7.equals(calendar13));
    }

    @Test
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test164");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.util.TimeZone timeZone3 = fastDateFormat2.getTimeZone();
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone3);
        java.util.Locale locale5 = java.util.Locale.US;
        java.lang.String str7 = locale5.getExtension('a');
        java.util.Set<java.lang.Character> charSet8 = locale5.getExtensionKeys();
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone3, locale5);
        timeZone3.setRawOffset(59);
        java.util.TimeZone timeZone13 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone13);
        java.util.TimeZone timeZone15 = fastDateFormat14.getTimeZone();
        java.util.Calendar calendar16 = java.util.Calendar.getInstance();
        java.util.Date date17 = calendar16.getTime();
        java.lang.String str18 = date17.toLocaleString();
        int int19 = date17.getMonth();
        java.util.Date date20 = new java.util.Date();
        java.lang.String str21 = date20.toGMTString();
        int int22 = date20.getDay();
        date20.setMinutes(32769);
        boolean boolean25 = date17.after(date20);
        java.lang.String str26 = fastDateFormat14.format(date17);
        java.util.Locale locale27 = fastDateFormat14.getLocale();
        java.lang.String str28 = timeZone3.getDisplayName(locale27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar4 and calendar16", (calendar4.compareTo(calendar16) == 0) == calendar4.equals(calendar16));
    }

    @Test
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test165");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str4 = fastDateFormat2.format((long) '#');
        java.lang.String str6 = fastDateFormat2.format((long) 7);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone7.hasSameRules(timeZone8);
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone7);
        java.util.Locale locale11 = java.util.Locale.CHINA;
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone7, locale11);
        long long13 = calendar12.getTimeInMillis();
        java.lang.String str14 = fastDateFormat2.format(calendar12);
        java.util.TimeZone timeZone17 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone17);
        java.lang.String str19 = fastDateFormat18.getPattern();
        java.util.TimeZone timeZone22 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone22);
        java.lang.String str24 = fastDateFormat23.getPattern();
        java.text.ParsePosition parsePosition27 = new java.text.ParsePosition(16);
        parsePosition27.setIndex(11);
        java.lang.Object obj30 = fastDateFormat23.parseObject("hi!", parsePosition27);
        java.lang.Object obj31 = fastDateFormat18.parseObject("eng", parsePosition27);
        java.lang.Object obj32 = fastDateFormat2.parseObject("2:47:07 PM UTC", parsePosition27);
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        java.text.ParsePosition parsePosition40 = new java.text.ParsePosition(16);
        parsePosition40.setIndex(11);
        int int43 = parsePosition40.getErrorIndex();
        java.lang.Object obj44 = fastDateFormat36.parseObject("12:00:00 AM UTC", parsePosition40);
        java.util.TimeZone timeZone45 = fastDateFormat36.getTimeZone();
        java.text.ParsePosition parsePosition48 = new java.text.ParsePosition(16);
        java.lang.Object obj49 = fastDateFormat36.parseObject("21 Feb 2022 14:46:11 GMT", parsePosition48);
        java.lang.Object obj50 = fastDateFormat2.parseObject("\u65e5\u672c", parsePosition48);
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        boolean boolean53 = timeZone51.hasSameRules(timeZone52);
        java.util.Calendar calendar54 = java.util.Calendar.getInstance(timeZone51);
        java.util.TimeZone timeZone55 = calendar54.getTimeZone();
        java.util.TimeZone timeZone56 = calendar54.getTimeZone();
        boolean boolean57 = calendar54.isWeekDateSupported();
        int int59 = calendar54.getLeastMaximum(10);
        int int60 = calendar54.getWeekYear();
        java.util.TimeZone timeZone62 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat63 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone62);
        java.lang.String str64 = fastDateFormat63.getPattern();
        java.util.TimeZone timeZone67 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat68 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone67);
        java.lang.String str69 = fastDateFormat68.getPattern();
        java.text.ParsePosition parsePosition72 = new java.text.ParsePosition(16);
        parsePosition72.setIndex(11);
        java.lang.Object obj75 = fastDateFormat68.parseObject("hi!", parsePosition72);
        java.text.ParsePosition parsePosition78 = new java.text.ParsePosition(16);
        java.lang.Object obj79 = fastDateFormat68.parseObject("hi!", parsePosition78);
        java.lang.Object obj80 = fastDateFormat63.parseObject("hi!", parsePosition78);
        boolean boolean81 = calendar54.after(obj80);
        java.util.Date date82 = new java.util.Date();
        java.lang.String str83 = date82.toGMTString();
        int int84 = date82.getYear();
        int int85 = date82.getMonth();
        long long86 = date82.getTime();
        calendar54.setTime(date82);
        java.util.Date date88 = calendar54.getTime();
        calendar54.setFirstDayOfWeek(32769);
        java.lang.String str91 = fastDateFormat2.format(calendar54);
        java.text.ParsePosition parsePosition94 = new java.text.ParsePosition(20);
        java.lang.Object obj95 = fastDateFormat2.parseObject("21 Feb 2022 14:52:48 GMT", parsePosition94);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar10 and calendar54", (calendar10.compareTo(calendar54) == 0) == calendar10.equals(calendar54));
    }

    @Test
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test166");
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone2.hasSameRules(timeZone3);
        boolean boolean5 = timeZone3.observesDaylightTime();
        calendar1.setTimeZone(timeZone3);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        java.util.Locale.Category category9 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale10 = java.util.Locale.getDefault(category9);
        java.util.Locale locale11 = java.util.Locale.CHINESE;
        java.lang.String str12 = locale11.getLanguage();
        boolean boolean13 = locale11.hasExtensions();
        java.lang.String str14 = locale11.getDisplayCountry();
        java.util.Locale.setDefault(category9, locale11);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale11);
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone7, locale11);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\u7f8e\u56fd", timeZone3, locale11);
        java.util.Locale locale19 = locale11.stripExtensions();
        java.util.Locale locale22 = new java.util.Locale("2:46:22 PM UTC", "Nov 5, 1900 4:35:00 AM");
        java.util.Locale locale23 = java.util.Locale.CHINESE;
        java.lang.String str24 = locale23.getLanguage();
        boolean boolean25 = locale23.hasExtensions();
        java.lang.String str26 = locale23.getDisplayCountry();
        java.lang.String str27 = locale23.getDisplayLanguage();
        java.lang.String str28 = locale23.getLanguage();
        java.lang.String str29 = locale23.getVariant();
        java.util.Locale locale30 = locale23.stripExtensions();
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        boolean boolean33 = timeZone31.hasSameRules(timeZone32);
        java.util.Locale locale34 = java.util.Locale.CHINESE;
        java.lang.String str35 = locale34.getLanguage();
        java.lang.String str36 = locale34.getDisplayScript();
        java.lang.String str37 = locale34.getDisplayScript();
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(timeZone32, locale34);
        java.util.Locale locale39 = java.util.Locale.CHINESE;
        java.lang.String str40 = locale39.getLanguage();
        boolean boolean41 = locale39.hasExtensions();
        java.lang.String str42 = locale39.getDisplayCountry();
        java.lang.String str43 = locale39.getDisplayLanguage();
        java.lang.String str44 = locale39.getLanguage();
        java.util.Calendar calendar45 = java.util.Calendar.getInstance(locale39);
        boolean boolean46 = calendar38.after((java.lang.Object) locale39);
        java.lang.String str47 = locale23.getDisplayLanguage(locale39);
        java.util.Locale.Category category49 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale50 = java.util.Locale.getDefault(category49);
        java.util.Locale locale51 = java.util.Locale.CHINESE;
        java.lang.String str52 = locale51.getLanguage();
        boolean boolean53 = locale51.hasExtensions();
        java.lang.String str54 = locale51.getDisplayCountry();
        java.util.Locale.setDefault(category49, locale51);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat56 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale51);
        java.util.Locale locale57 = java.util.Locale.CHINESE;
        java.lang.String str58 = locale57.getLanguage();
        java.lang.String str59 = locale57.getDisplayScript();
        java.util.Set<java.lang.Character> charSet60 = locale57.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet61 = locale57.getExtensionKeys();
        java.util.Locale locale62 = locale57.stripExtensions();
        java.lang.String str63 = locale62.getScript();
        java.util.Locale locale65 = new java.util.Locale("java.util.GregorianCalendar[time=1645454753591,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=53,MILLISECOND=591,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale66 = java.util.Locale.US;
        java.lang.String str68 = locale66.getExtension('a');
        java.util.Set<java.lang.Character> charSet69 = locale66.getExtensionKeys();
        java.lang.String str70 = locale66.getDisplayCountry();
        java.lang.String str71 = locale66.getDisplayVariant();
        java.util.Locale.setDefault(locale66);
        java.lang.String str73 = locale65.getDisplayVariant(locale66);
        java.lang.String str74 = locale62.getDisplayName(locale66);
        java.util.Locale locale76 = java.util.Locale.CHINESE;
        java.lang.String str77 = locale76.getLanguage();
        java.lang.String str78 = locale76.getDisplayScript();
        java.util.Set<java.lang.Character> charSet79 = locale76.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet80 = locale76.getExtensionKeys();
        java.util.Locale locale81 = locale76.stripExtensions();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat82 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, locale76);
        java.lang.String str83 = locale66.getDisplayName(locale76);
        java.lang.String str84 = locale51.getDisplayName(locale76);
        java.lang.String str85 = locale39.getDisplayLanguage(locale51);
        java.util.Locale locale86 = java.util.Locale.CHINESE;
        java.lang.String str87 = locale86.getLanguage();
        boolean boolean88 = locale86.hasExtensions();
        java.lang.String str89 = locale86.getDisplayCountry();
        java.lang.String str90 = locale86.getDisplayLanguage();
        java.util.Locale locale91 = java.util.Locale.SIMPLIFIED_CHINESE;
        boolean boolean92 = locale91.hasExtensions();
        java.lang.String str93 = locale86.getDisplayName(locale91);
        java.lang.String str94 = locale39.getDisplayName(locale86);
        java.lang.String str95 = locale86.getVariant();
        java.lang.String str96 = locale22.getDisplayScript(locale86);
        java.lang.String str97 = locale11.getDisplayName(locale86);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar1 and calendar17", (calendar1.compareTo(calendar17) == 0) == calendar1.equals(calendar17));
    }

    @Test
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test167");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        long long2 = calendar1.getTimeInMillis();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3);
        java.util.TimeZone timeZone7 = calendar6.getTimeZone();
        java.util.TimeZone timeZone8 = calendar6.getTimeZone();
        boolean boolean9 = calendar6.isWeekDateSupported();
        int int11 = calendar6.getLeastMaximum(10);
        int int12 = calendar6.getWeekYear();
        java.lang.String str13 = calendar6.getCalendarType();
        calendar6.setTimeInMillis((long) (short) -1);
        java.util.TimeZone timeZone16 = calendar6.getTimeZone();
        java.util.Calendar calendar17 = java.util.Calendar.getInstance();
        int int19 = calendar17.getActualMaximum(4);
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone21);
        java.util.TimeZone timeZone23 = fastDateFormat22.getTimeZone();
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone23);
        calendar17.setTimeZone(timeZone23);
        timeZone23.setID("21 Feb 2022 14:45:52 GMT");
        boolean boolean28 = timeZone16.hasSameRules(timeZone23);
        calendar1.setTimeZone(timeZone16);
        java.util.Date date30 = new java.util.Date();
        int int31 = date30.getDay();
        int int32 = date30.getDay();
        int int33 = date30.getMinutes();
        java.util.Date date34 = new java.util.Date();
        int int35 = date34.getDay();
        java.util.Date date36 = new java.util.Date();
        java.lang.String str37 = date36.toGMTString();
        int int38 = date36.getYear();
        boolean boolean39 = date34.before(date36);
        java.util.Date date40 = new java.util.Date();
        int int41 = date40.getDay();
        java.util.Date date42 = new java.util.Date();
        java.lang.String str43 = date42.toGMTString();
        int int44 = date42.getYear();
        boolean boolean45 = date40.before(date42);
        boolean boolean46 = date34.before(date40);
        boolean boolean47 = date30.after(date34);
        long long48 = date30.getTime();
        boolean boolean49 = timeZone16.inDaylightTime(date30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar1 and calendar17", (calendar1.compareTo(calendar17) == 0) == calendar1.equals(calendar17));
    }

    @Test
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test168");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.Locale locale5 = new java.util.Locale("6 Jan 1903 00:01:00 GMT", "java.text.ParsePosition[index=16,errorIndex=-1]", "China");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone1, locale5);
        java.util.Locale locale7 = fastDateFormat6.getLocale();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone8.hasSameRules(timeZone9);
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone8);
        java.util.Locale locale13 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(locale13);
        int int16 = calendar14.getMinimum(13);
        java.util.Calendar.Builder builder17 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        boolean boolean20 = timeZone18.hasSameRules(timeZone19);
        java.util.Calendar.Builder builder21 = builder17.setTimeZone(timeZone18);
        calendar14.setTimeZone(timeZone18);
        java.util.Locale.Category category23 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale24 = java.util.Locale.getDefault(category23);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone18, locale24);
        java.util.Locale locale26 = locale24.stripExtensions();
        java.util.Locale locale27 = java.util.Locale.CHINESE;
        java.lang.String str28 = locale27.getLanguage();
        boolean boolean29 = locale27.hasExtensions();
        java.lang.String str30 = locale27.getDisplayCountry();
        java.util.Set<java.lang.String> strSet31 = locale27.getUnicodeLocaleKeys();
        java.lang.String str32 = locale27.getDisplayCountry();
        java.lang.String str33 = locale27.getDisplayScript();
        java.lang.String str34 = locale26.getDisplayVariant(locale27);
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(timeZone8, locale27);
        java.util.Locale locale36 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(locale36);
        java.lang.String str38 = locale36.getVariant();
        java.lang.String str39 = locale36.getDisplayName();
        java.lang.String str40 = locale36.getISO3Country();
        java.lang.String str41 = locale27.getDisplayCountry(locale36);
        java.util.Locale locale44 = java.util.Locale.forLanguageTag("");
        java.lang.String str45 = locale44.getVariant();
        java.lang.String str46 = locale44.getCountry();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat47 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, locale44);
        java.lang.String str48 = locale27.getDisplayCountry(locale44);
        java.lang.String str49 = locale7.getDisplayScript(locale27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar11 and calendar14", (calendar11.compareTo(calendar14) == 0) == calendar11.equals(calendar14));
    }

    @Test
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test169");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        java.util.TimeZone timeZone4 = calendar3.getTimeZone();
        java.util.TimeZone timeZone6 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat7 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone6);
        java.util.TimeZone timeZone8 = fastDateFormat7.getTimeZone();
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone8);
        calendar3.setTimeZone(timeZone8);
        timeZone8.setID("21 Feb 2022 14:45:49 GMT");
        timeZone8.setRawOffset(9);
        java.util.Locale locale16 = java.util.Locale.forLanguageTag("GMT");
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone8, locale16);
        long long18 = calendar17.getTimeInMillis();
        calendar17.clear(0);
        calendar17.clear();
        java.util.List<java.util.Locale.LanguageRange> languageRangeList23 = java.util.Locale.LanguageRange.parse("zh");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap24 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList25 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList23, strMap24);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap26 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList27 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList23, strMap26);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap28 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList29 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList23, strMap28);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap30 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList31 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList23, strMap30);
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        boolean boolean34 = timeZone32.hasSameRules(timeZone33);
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(timeZone32);
        java.util.TimeZone timeZone36 = calendar35.getTimeZone();
        java.util.TimeZone timeZone37 = calendar35.getTimeZone();
        int int39 = calendar35.getMinimum(13);
        java.util.Locale.LanguageRange[] languageRangeArray40 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList41 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList41, languageRangeArray40);
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.util.Locale locale44 = java.util.Locale.FRANCE;
        boolean boolean45 = locale44.hasExtensions();
        java.util.Locale locale46 = java.util.Locale.FRANCE;
        java.util.Locale locale47 = java.util.Locale.CHINESE;
        java.lang.String str48 = locale47.getLanguage();
        java.util.Locale[] localeArray49 = new java.util.Locale[] { locale43, locale44, locale46, locale47 };
        java.util.ArrayList<java.util.Locale> localeList50 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList50, localeArray49);
        java.util.Locale.FilteringMode filteringMode52 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList53 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList41, (java.util.Collection<java.util.Locale>) localeList50, filteringMode52);
        boolean boolean54 = calendar35.after((java.lang.Object) localeList50);
        java.lang.Object obj55 = null;
        boolean boolean56 = localeList50.equals(obj55);
        java.util.ListIterator<java.util.Locale> localeItor57 = localeList50.listIterator();
        java.util.Locale locale58 = java.util.Locale.lookup(languageRangeList23, (java.util.Collection<java.util.Locale>) localeList50);
        java.util.Iterator<java.util.Locale> localeItor59 = localeList50.iterator();
        boolean boolean60 = calendar17.after((java.lang.Object) localeItor59);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar35", (calendar3.compareTo(calendar35) == 0) == calendar3.equals(calendar35));
    }

    @Test
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test170");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Calendar.Builder builder4 = builder0.setTimeZone(timeZone1);
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str6 = locale5.getLanguage();
        java.lang.String str7 = locale5.getDisplayScript();
        java.util.Calendar.Builder builder8 = builder4.setLocale(locale5);
        java.util.Calendar calendar9 = builder8.build();
        java.util.Calendar.Builder builder11 = builder8.setLenient(true);
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone12.hasSameRules(timeZone13);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone12);
        java.util.TimeZone timeZone16 = calendar15.getTimeZone();
        java.util.TimeZone timeZone17 = calendar15.getTimeZone();
        boolean boolean18 = calendar15.isWeekDateSupported();
        int int20 = calendar15.getLeastMaximum(10);
        int int21 = calendar15.getWeekYear();
        java.lang.String str22 = calendar15.getCalendarType();
        calendar15.setTimeInMillis((long) (short) -1);
        java.util.TimeZone timeZone25 = calendar15.getTimeZone();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance();
        int int28 = calendar26.getActualMaximum(4);
        java.util.TimeZone timeZone30 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone30);
        java.util.TimeZone timeZone32 = fastDateFormat31.getTimeZone();
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone32);
        calendar26.setTimeZone(timeZone32);
        timeZone32.setID("21 Feb 2022 14:45:52 GMT");
        boolean boolean37 = timeZone25.hasSameRules(timeZone32);
        java.util.Calendar.Builder builder38 = builder11.setTimeZone(timeZone32);
        java.util.Locale locale39 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(locale39);
        java.lang.String str41 = locale39.getVariant();
        java.lang.String str42 = locale39.getDisplayName();
        java.lang.String str43 = locale39.getISO3Country();
        java.lang.String str44 = locale39.getDisplayName();
        java.util.Calendar.Builder builder45 = builder11.setLocale(locale39);
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone47 = java.util.TimeZone.getDefault();
        boolean boolean48 = timeZone46.hasSameRules(timeZone47);
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(timeZone46);
        java.util.TimeZone timeZone50 = calendar49.getTimeZone();
        java.util.TimeZone timeZone51 = calendar49.getTimeZone();
        boolean boolean52 = calendar49.isWeekDateSupported();
        int int54 = calendar49.getLeastMaximum(10);
        int int55 = calendar49.getWeekYear();
        java.lang.String str56 = calendar49.getCalendarType();
        calendar49.setTimeInMillis((long) (short) -1);
        java.util.TimeZone timeZone59 = calendar49.getTimeZone();
        java.util.TimeZone.setDefault(timeZone59);
        java.util.Calendar calendar61 = java.util.Calendar.getInstance(timeZone59);
        timeZone59.setRawOffset(16);
        java.util.Calendar.Builder builder64 = builder11.setTimeZone(timeZone59);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar15 and calendar49", (calendar15.compareTo(calendar49) == 0) == calendar15.equals(calendar49));
    }

    @Test
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test171");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = java.util.Locale.FRANCE;
        boolean boolean8 = locale7.hasExtensions();
        java.util.Locale locale9 = java.util.Locale.FRANCE;
        java.util.Locale locale10 = java.util.Locale.CHINESE;
        java.lang.String str11 = locale10.getLanguage();
        java.util.Locale[] localeArray12 = new java.util.Locale[] { locale6, locale7, locale9, locale10 };
        java.util.ArrayList<java.util.Locale> localeList13 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList13, localeArray12);
        java.util.Locale.FilteringMode filteringMode15 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList16 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList13, filteringMode15);
        int int18 = localeList16.lastIndexOf((java.lang.Object) 11);
        java.util.Locale locale19 = java.util.Locale.CHINESE;
        java.lang.String str20 = locale19.getLanguage();
        boolean boolean21 = locale19.hasExtensions();
        java.lang.String str22 = locale19.getDisplayCountry();
        java.util.Set<java.lang.String> strSet23 = locale19.getUnicodeLocaleKeys();
        boolean boolean24 = localeList16.containsAll((java.util.Collection<java.lang.String>) strSet23);
        java.util.Locale.FilteringMode filteringMode25 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList26 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList16, filteringMode25);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone27.hasSameRules(timeZone28);
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone27);
        java.util.Locale locale31 = java.util.Locale.CHINA;
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(timeZone27, locale31);
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        boolean boolean35 = timeZone33.hasSameRules(timeZone34);
        boolean boolean36 = timeZone34.observesDaylightTime();
        boolean boolean37 = timeZone27.hasSameRules(timeZone34);
        boolean boolean38 = localeList16.remove((java.lang.Object) timeZone34);
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(timeZone34);
        boolean boolean40 = timeZone34.observesDaylightTime();
        timeZone34.setRawOffset(31);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar30 and calendar39", (calendar30.compareTo(calendar39) == 0) == calendar30.equals(calendar39));
    }

    @Test
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test172");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone1);
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone1, locale5);
        timeZone1.setID("java.util.GregorianCalendar[time=1645454754087,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=54,MILLISECOND=87,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale10 = new java.util.Locale("java.util.GregorianCalendar[time=1645454753591,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=53,MILLISECOND=591,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale11 = java.util.Locale.US;
        java.lang.String str13 = locale11.getExtension('a');
        java.util.Set<java.lang.Character> charSet14 = locale11.getExtensionKeys();
        java.lang.String str15 = locale11.getDisplayCountry();
        java.lang.String str16 = locale11.getDisplayVariant();
        java.util.Locale.setDefault(locale11);
        java.lang.String str18 = locale10.getDisplayVariant(locale11);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone1, locale11);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone1);
        java.util.TimeZone timeZone23 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone23);
        java.lang.String str25 = fastDateFormat24.getPattern();
        java.util.TimeZone timeZone28 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat29 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone28);
        java.lang.String str30 = fastDateFormat29.getPattern();
        java.text.ParsePosition parsePosition33 = new java.text.ParsePosition(16);
        parsePosition33.setIndex(11);
        java.lang.Object obj36 = fastDateFormat29.parseObject("hi!", parsePosition33);
        java.lang.Object obj37 = fastDateFormat24.parseObject("eng", parsePosition33);
        java.lang.Object obj38 = fastDateFormat20.parseObject("21 Feb 2022 14:47:20 GMT", parsePosition33);
        boolean boolean39 = fastDateFormat20.getTimeZoneOverridesCalendar();
        java.util.Locale.LanguageRange languageRange41 = new java.util.Locale.LanguageRange("it-IT");
        java.lang.String str42 = languageRange41.getRange();
        java.lang.String str43 = languageRange41.getRange();
        double double44 = languageRange41.getWeight();
        boolean boolean45 = fastDateFormat20.equals((java.lang.Object) double44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar4 and calendar6", (calendar4.compareTo(calendar6) == 0) == calendar4.equals(calendar6));
    }

    @Test
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test173");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition(16);
        int int2 = parsePosition1.getErrorIndex();
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.parse("zh");
        java.util.Set<java.lang.String> strSet5 = java.util.Calendar.getAvailableCalendarTypes();
        java.lang.String str6 = java.util.Locale.lookupTag(languageRangeList4, (java.util.Collection<java.lang.String>) strSet5);
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.lang.String str8 = locale7.getLanguage();
        java.lang.String str10 = locale7.getExtension('a');
        java.util.Set<java.lang.String> strSet11 = locale7.getUnicodeLocaleAttributes();
        java.util.Locale.FilteringMode filteringMode12 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList13 = java.util.Locale.filterTags(languageRangeList4, (java.util.Collection<java.lang.String>) strSet11, filteringMode12);
        boolean boolean14 = parsePosition1.equals((java.lang.Object) languageRangeList4);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap15 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList16 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList4, strMap15);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap17 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList18 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList16, strMap17);
        java.util.Locale.LanguageRange[] languageRangeArray19 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList20 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList20, languageRangeArray19);
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        boolean boolean24 = locale23.hasExtensions();
        java.util.Locale locale25 = java.util.Locale.FRANCE;
        java.util.Locale locale26 = java.util.Locale.CHINESE;
        java.lang.String str27 = locale26.getLanguage();
        java.util.Locale[] localeArray28 = new java.util.Locale[] { locale22, locale23, locale25, locale26 };
        java.util.ArrayList<java.util.Locale> localeList29 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList29, localeArray28);
        java.util.Locale.FilteringMode filteringMode31 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList32 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, (java.util.Collection<java.util.Locale>) localeList29, filteringMode31);
        java.util.Locale.LanguageRange[] languageRangeArray33 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList34 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList34, languageRangeArray33);
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.util.Locale locale37 = java.util.Locale.FRANCE;
        boolean boolean38 = locale37.hasExtensions();
        java.util.Locale locale39 = java.util.Locale.FRANCE;
        java.util.Locale locale40 = java.util.Locale.CHINESE;
        java.lang.String str41 = locale40.getLanguage();
        java.util.Locale[] localeArray42 = new java.util.Locale[] { locale36, locale37, locale39, locale40 };
        java.util.ArrayList<java.util.Locale> localeList43 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList43, localeArray42);
        java.util.Locale.FilteringMode filteringMode45 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList46 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, (java.util.Collection<java.util.Locale>) localeList43, filteringMode45);
        int int47 = localeList32.indexOf((java.lang.Object) filteringMode45);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList49 = java.util.Locale.LanguageRange.parse("zh");
        java.util.Set<java.lang.String> strSet50 = java.util.Calendar.getAvailableCalendarTypes();
        java.lang.String str51 = java.util.Locale.lookupTag(languageRangeList49, (java.util.Collection<java.lang.String>) strSet50);
        boolean boolean52 = localeList32.retainAll((java.util.Collection<java.lang.String>) strSet50);
        int int53 = localeList32.size();
        java.util.TimeZone timeZone54 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone55 = java.util.TimeZone.getDefault();
        boolean boolean56 = timeZone54.hasSameRules(timeZone55);
        java.util.Calendar calendar57 = java.util.Calendar.getInstance(timeZone54);
        java.util.TimeZone timeZone58 = calendar57.getTimeZone();
        java.util.TimeZone timeZone59 = calendar57.getTimeZone();
        int int61 = calendar57.getMinimum(13);
        java.util.Locale.LanguageRange[] languageRangeArray62 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList63 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList63, languageRangeArray62);
        java.util.Locale locale65 = java.util.Locale.GERMAN;
        java.util.Locale locale66 = java.util.Locale.FRANCE;
        boolean boolean67 = locale66.hasExtensions();
        java.util.Locale locale68 = java.util.Locale.FRANCE;
        java.util.Locale locale69 = java.util.Locale.CHINESE;
        java.lang.String str70 = locale69.getLanguage();
        java.util.Locale[] localeArray71 = new java.util.Locale[] { locale65, locale66, locale68, locale69 };
        java.util.ArrayList<java.util.Locale> localeList72 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList72, localeArray71);
        java.util.Locale.FilteringMode filteringMode74 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList75 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList63, (java.util.Collection<java.util.Locale>) localeList72, filteringMode74);
        boolean boolean76 = calendar57.after((java.lang.Object) localeList72);
        long long77 = calendar57.getTimeInMillis();
        java.util.Locale.FilteringMode filteringMode78 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        boolean boolean79 = calendar57.before((java.lang.Object) filteringMode78);
        java.util.List<java.util.Locale> localeList80 = java.util.Locale.filter(languageRangeList16, (java.util.Collection<java.util.Locale>) localeList32, filteringMode78);
        java.util.Locale.Builder builder81 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder83 = builder81.setLanguage("");
        java.util.Locale locale84 = java.util.Locale.CHINESE;
        java.lang.String str85 = locale84.getLanguage();
        boolean boolean86 = locale84.hasExtensions();
        java.lang.String str87 = locale84.getDisplayCountry();
        java.util.Calendar calendar88 = java.util.Calendar.getInstance(locale84);
        java.util.Locale.Builder builder89 = builder83.setLocale(locale84);
        java.util.Locale.Builder builder90 = builder89.clear();
        java.util.Locale locale91 = builder89.build();
        java.util.Locale locale92 = builder89.build();
        boolean boolean93 = localeList80.contains((java.lang.Object) builder89);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar57 and calendar88", (calendar57.compareTo(calendar88) == 0) == calendar57.equals(calendar88));
    }

    @Test
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test174");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Calendar.Builder builder4 = builder0.setTimeZone(timeZone1);
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str6 = locale5.getLanguage();
        java.lang.String str7 = locale5.getDisplayScript();
        java.util.Calendar.Builder builder8 = builder4.setLocale(locale5);
        java.util.Calendar calendar9 = builder8.build();
        java.util.Calendar.Builder builder11 = builder8.setLenient(true);
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone12.hasSameRules(timeZone13);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone12);
        java.util.TimeZone timeZone16 = calendar15.getTimeZone();
        java.util.TimeZone timeZone17 = calendar15.getTimeZone();
        boolean boolean18 = calendar15.isWeekDateSupported();
        int int20 = calendar15.getLeastMaximum(10);
        int int21 = calendar15.getWeekYear();
        java.lang.String str22 = calendar15.getCalendarType();
        calendar15.setTimeInMillis((long) (short) -1);
        java.util.TimeZone timeZone25 = calendar15.getTimeZone();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance();
        int int28 = calendar26.getActualMaximum(4);
        java.util.TimeZone timeZone30 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone30);
        java.util.TimeZone timeZone32 = fastDateFormat31.getTimeZone();
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone32);
        calendar26.setTimeZone(timeZone32);
        timeZone32.setID("21 Feb 2022 14:45:52 GMT");
        boolean boolean37 = timeZone25.hasSameRules(timeZone32);
        java.util.Calendar.Builder builder38 = builder11.setTimeZone(timeZone32);
        java.util.Calendar.Builder builder40 = builder11.setLenient(false);
        java.util.Calendar.Builder builder42 = builder11.setLenient(true);
        java.util.TimeZone timeZone43 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        boolean boolean45 = timeZone43.hasSameRules(timeZone44);
        java.util.Calendar calendar46 = java.util.Calendar.getInstance(timeZone43);
        java.util.TimeZone timeZone47 = calendar46.getTimeZone();
        java.util.TimeZone timeZone48 = calendar46.getTimeZone();
        int int50 = calendar46.getMinimum(13);
        java.util.Locale.LanguageRange[] languageRangeArray51 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList52 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList52, languageRangeArray51);
        java.util.Locale locale54 = java.util.Locale.GERMAN;
        java.util.Locale locale55 = java.util.Locale.FRANCE;
        boolean boolean56 = locale55.hasExtensions();
        java.util.Locale locale57 = java.util.Locale.FRANCE;
        java.util.Locale locale58 = java.util.Locale.CHINESE;
        java.lang.String str59 = locale58.getLanguage();
        java.util.Locale[] localeArray60 = new java.util.Locale[] { locale54, locale55, locale57, locale58 };
        java.util.ArrayList<java.util.Locale> localeList61 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList61, localeArray60);
        java.util.Locale.FilteringMode filteringMode63 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList64 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList52, (java.util.Collection<java.util.Locale>) localeList61, filteringMode63);
        boolean boolean65 = calendar46.after((java.lang.Object) localeList61);
        calendar46.set(11, (int) (short) 0, 47, 27, 3);
        java.util.TimeZone timeZone72 = calendar46.getTimeZone();
        java.util.TimeZone timeZone73 = null;
        boolean boolean74 = timeZone72.hasSameRules(timeZone73);
        java.lang.String str75 = timeZone72.getID();
        java.util.Calendar.Builder builder76 = builder42.setTimeZone(timeZone72);
        java.util.TimeZone timeZone78 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone79 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone80 = java.util.TimeZone.getDefault();
        boolean boolean81 = timeZone79.hasSameRules(timeZone80);
        boolean boolean82 = timeZone78.hasSameRules(timeZone79);
        int int83 = timeZone78.getRawOffset();
        java.util.Calendar calendar84 = java.util.Calendar.getInstance(timeZone78);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat85 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone78);
        java.util.TimeZone timeZone86 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone87 = java.util.TimeZone.getDefault();
        boolean boolean88 = timeZone86.hasSameRules(timeZone87);
        boolean boolean89 = timeZone78.hasSameRules(timeZone86);
        boolean boolean90 = timeZone86.observesDaylightTime();
        boolean boolean91 = timeZone86.observesDaylightTime();
        int int93 = timeZone86.getOffset(1645454792894L);
        boolean boolean94 = timeZone72.hasSameRules(timeZone86);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar33 and calendar84", (calendar33.compareTo(calendar84) == 0) == calendar33.equals(calendar84));
    }

    @Test
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test175");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int2 = calendar0.getActualMaximum(4);
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone4);
        java.util.TimeZone timeZone6 = fastDateFormat5.getTimeZone();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone6);
        calendar0.setTimeZone(timeZone6);
        timeZone6.setID("21 Feb 2022 14:45:52 GMT");
        java.util.TimeZone timeZone12 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone12);
        java.lang.String str14 = fastDateFormat13.getPattern();
        java.text.ParsePosition parsePosition17 = new java.text.ParsePosition(16);
        parsePosition17.setIndex(11);
        int int20 = parsePosition17.getErrorIndex();
        java.lang.Object obj21 = fastDateFormat13.parseObject("12:00:00 AM UTC", parsePosition17);
        java.util.TimeZone timeZone22 = fastDateFormat13.getTimeZone();
        java.util.TimeZone timeZone23 = fastDateFormat13.getTimeZone();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone24.hasSameRules(timeZone25);
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone24);
        java.util.TimeZone timeZone28 = calendar27.getTimeZone();
        java.util.TimeZone timeZone29 = calendar27.getTimeZone();
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        boolean boolean32 = timeZone30.hasSameRules(timeZone31);
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone30);
        java.util.TimeZone.setDefault(timeZone30);
        calendar27.setTimeZone(timeZone30);
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        boolean boolean38 = timeZone36.hasSameRules(timeZone37);
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(timeZone36);
        java.util.TimeZone timeZone40 = calendar39.getTimeZone();
        java.util.TimeZone timeZone41 = calendar39.getTimeZone();
        calendar39.set(4, (int) (byte) 0, 50, 11, 8, 54);
        java.util.Date date49 = calendar39.getTime();
        calendar27.setTime(date49);
        java.lang.StringBuffer stringBuffer51 = null;
        java.lang.StringBuffer stringBuffer52 = fastDateFormat13.format(date49, stringBuffer51);
        int int53 = date49.getTimezoneOffset();
        boolean boolean54 = timeZone6.inDaylightTime(date49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar0 and calendar33", (calendar0.compareTo(calendar33) == 0) == calendar0.equals(calendar33));
    }

    @Test
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test176");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Calendar.Builder builder4 = builder0.setTimeZone(timeZone1);
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str6 = locale5.getLanguage();
        java.lang.String str7 = locale5.getDisplayScript();
        java.util.Calendar.Builder builder8 = builder4.setLocale(locale5);
        java.util.Calendar.Builder builder10 = builder8.setLenient(false);
        java.util.Calendar.Builder builder13 = builder10.set((int) (short) 1, 100);
        java.util.Calendar.Builder builder15 = builder10.setLenient(false);
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.lang.String str17 = locale16.getLanguage();
        boolean boolean18 = locale16.hasExtensions();
        java.lang.String str19 = locale16.getDisplayCountry();
        java.util.Set<java.lang.String> strSet20 = locale16.getUnicodeLocaleKeys();
        java.lang.String str21 = locale16.getDisplayLanguage();
        java.util.Calendar.Builder builder22 = builder10.setLocale(locale16);
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone24.hasSameRules(timeZone25);
        boolean boolean27 = timeZone23.hasSameRules(timeZone24);
        timeZone23.setID("java.util.GregorianCalendar[time=1645454754087,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=54,MILLISECOND=87,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale31 = java.util.Locale.forLanguageTag("English");
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(timeZone23, locale31);
        java.util.Locale locale33 = java.util.Locale.SIMPLIFIED_CHINESE;
        boolean boolean34 = locale33.hasExtensions();
        java.lang.String str35 = locale31.getDisplayName(locale33);
        java.lang.String str36 = locale33.getDisplayCountry();
        boolean boolean37 = locale33.hasExtensions();
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone39 = java.util.TimeZone.getDefault();
        boolean boolean40 = timeZone38.hasSameRules(timeZone39);
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(timeZone38);
        java.util.TimeZone timeZone42 = calendar41.getTimeZone();
        java.util.TimeZone timeZone43 = calendar41.getTimeZone();
        boolean boolean44 = timeZone43.observesDaylightTime();
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        boolean boolean47 = timeZone45.hasSameRules(timeZone46);
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(timeZone45);
        java.util.Locale locale49 = java.util.Locale.CHINA;
        java.util.Calendar calendar50 = java.util.Calendar.getInstance(timeZone45, locale49);
        java.util.Calendar calendar51 = java.util.Calendar.getInstance(timeZone43, locale49);
        java.lang.String str52 = locale33.getDisplayVariant(locale49);
        java.lang.String str53 = locale16.getDisplayLanguage(locale49);
        java.util.Set<java.lang.String> strSet54 = locale49.getUnicodeLocaleAttributes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar32 and calendar41", (calendar32.compareTo(calendar41) == 0) == calendar32.equals(calendar41));
    }

    @Test
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test177");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        java.util.TimeZone timeZone4 = calendar3.getTimeZone();
        java.util.TimeZone timeZone5 = calendar3.getTimeZone();
        boolean boolean6 = calendar3.isWeekDateSupported();
        int int8 = calendar3.getLeastMaximum(10);
        int int9 = calendar3.getWeekYear();
        java.lang.String str10 = calendar3.getCalendarType();
        calendar3.setTimeInMillis((long) (short) -1);
        java.util.TimeZone timeZone13 = calendar3.getTimeZone();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance();
        int int16 = calendar14.getActualMaximum(4);
        java.util.TimeZone timeZone18 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat19 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone18);
        java.util.TimeZone timeZone20 = fastDateFormat19.getTimeZone();
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone20);
        calendar14.setTimeZone(timeZone20);
        timeZone20.setID("21 Feb 2022 14:45:52 GMT");
        boolean boolean25 = timeZone13.hasSameRules(timeZone20);
        java.lang.String str26 = timeZone20.getID();
        java.util.Locale.Category category27 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale28 = java.util.Locale.getDefault(category27);
        java.util.Locale locale29 = java.util.Locale.CHINESE;
        java.lang.String str30 = locale29.getLanguage();
        boolean boolean31 = locale29.hasExtensions();
        java.lang.String str32 = locale29.getDisplayCountry();
        java.util.Locale.setDefault(category27, locale29);
        java.util.Locale locale34 = locale29.stripExtensions();
        java.lang.String str35 = locale29.getCountry();
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(timeZone20, locale29);
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone39 = java.util.TimeZone.getDefault();
        boolean boolean40 = timeZone38.hasSameRules(timeZone39);
        boolean boolean41 = timeZone37.hasSameRules(timeZone38);
        timeZone37.setID("java.util.GregorianCalendar[time=1645454754087,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=54,MILLISECOND=87,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale45 = java.util.Locale.forLanguageTag("English");
        java.util.Calendar calendar46 = java.util.Calendar.getInstance(timeZone37, locale45);
        int int48 = calendar46.getMinimum((int) (short) 1);
        java.time.Instant instant49 = calendar46.toInstant();
        java.util.TimeZone timeZone50 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        boolean boolean52 = timeZone50.hasSameRules(timeZone51);
        java.util.Calendar calendar53 = java.util.Calendar.getInstance(timeZone50);
        java.util.TimeZone timeZone54 = calendar53.getTimeZone();
        java.util.TimeZone timeZone56 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat57 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone56);
        java.util.TimeZone timeZone58 = fastDateFormat57.getTimeZone();
        java.util.Calendar calendar59 = java.util.Calendar.getInstance(timeZone58);
        calendar53.setTimeZone(timeZone58);
        calendar46.setTimeZone(timeZone58);
        int int62 = timeZone58.getRawOffset();
        boolean boolean63 = timeZone20.hasSameRules(timeZone58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar14 and calendar46", (calendar14.compareTo(calendar46) == 0) == calendar14.equals(calendar46));
    }

    @Test
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test178");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder5 = builder0.setLanguage("");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList7 = java.util.Locale.LanguageRange.parse("zh");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap8 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList7, strMap8);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap10 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList11 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList7, strMap10);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap12 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList13 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList7, strMap12);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap14 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList15 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList7, strMap14);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone16.hasSameRules(timeZone17);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone16);
        java.util.TimeZone timeZone20 = calendar19.getTimeZone();
        java.util.TimeZone timeZone21 = calendar19.getTimeZone();
        int int23 = calendar19.getMinimum(13);
        java.util.Locale.LanguageRange[] languageRangeArray24 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList25 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList25, languageRangeArray24);
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        boolean boolean29 = locale28.hasExtensions();
        java.util.Locale locale30 = java.util.Locale.FRANCE;
        java.util.Locale locale31 = java.util.Locale.CHINESE;
        java.lang.String str32 = locale31.getLanguage();
        java.util.Locale[] localeArray33 = new java.util.Locale[] { locale27, locale28, locale30, locale31 };
        java.util.ArrayList<java.util.Locale> localeList34 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList34, localeArray33);
        java.util.Locale.FilteringMode filteringMode36 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList37 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList25, (java.util.Collection<java.util.Locale>) localeList34, filteringMode36);
        boolean boolean38 = calendar19.after((java.lang.Object) localeList34);
        java.lang.Object obj39 = null;
        boolean boolean40 = localeList34.equals(obj39);
        java.util.ListIterator<java.util.Locale> localeItor41 = localeList34.listIterator();
        java.util.Locale locale42 = java.util.Locale.lookup(languageRangeList7, (java.util.Collection<java.util.Locale>) localeList34);
        java.util.Locale.Builder builder43 = builder5.setLocale(locale42);
        java.util.Locale locale44 = java.util.Locale.FRANCE;
        java.util.Locale locale45 = java.util.Locale.US;
        java.lang.String str47 = locale45.getExtension('a');
        java.util.Set<java.lang.Character> charSet48 = locale45.getExtensionKeys();
        java.lang.String str49 = locale44.getDisplayScript(locale45);
        java.util.Locale locale50 = locale45.stripExtensions();
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        boolean boolean53 = timeZone51.hasSameRules(timeZone52);
        java.util.Locale locale54 = java.util.Locale.CHINESE;
        java.lang.String str55 = locale54.getLanguage();
        java.lang.String str56 = locale54.getDisplayScript();
        java.lang.String str57 = locale54.getDisplayScript();
        java.util.Calendar calendar58 = java.util.Calendar.getInstance(timeZone52, locale54);
        java.lang.String str59 = locale50.getDisplayName(locale54);
        java.lang.String str60 = locale54.getDisplayName();
        java.util.Locale locale61 = java.util.Locale.US;
        java.lang.String str63 = locale61.getExtension('a');
        java.util.Set<java.lang.Character> charSet64 = locale61.getExtensionKeys();
        java.util.Set<java.lang.String> strSet65 = locale61.getUnicodeLocaleKeys();
        java.lang.String str66 = locale54.getDisplayName(locale61);
        java.util.Locale.Builder builder67 = builder43.setLocale(locale54);
        java.util.TimeZone timeZone68 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone69 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone70 = java.util.TimeZone.getDefault();
        boolean boolean71 = timeZone69.hasSameRules(timeZone70);
        boolean boolean72 = timeZone68.hasSameRules(timeZone69);
        timeZone68.setID("java.util.GregorianCalendar[time=1645454754087,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=54,MILLISECOND=87,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale76 = java.util.Locale.forLanguageTag("English");
        java.util.Calendar calendar77 = java.util.Calendar.getInstance(timeZone68, locale76);
        java.util.Locale locale78 = java.util.Locale.SIMPLIFIED_CHINESE;
        boolean boolean79 = locale78.hasExtensions();
        java.lang.String str80 = locale76.getDisplayName(locale78);
        java.lang.String str81 = locale78.getDisplayCountry();
        boolean boolean82 = locale78.hasExtensions();
        java.util.TimeZone timeZone83 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone84 = java.util.TimeZone.getDefault();
        boolean boolean85 = timeZone83.hasSameRules(timeZone84);
        java.util.Calendar calendar86 = java.util.Calendar.getInstance(timeZone83);
        java.util.TimeZone timeZone87 = calendar86.getTimeZone();
        java.util.TimeZone timeZone88 = calendar86.getTimeZone();
        boolean boolean89 = timeZone88.observesDaylightTime();
        java.util.TimeZone timeZone90 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone91 = java.util.TimeZone.getDefault();
        boolean boolean92 = timeZone90.hasSameRules(timeZone91);
        java.util.Calendar calendar93 = java.util.Calendar.getInstance(timeZone90);
        java.util.Locale locale94 = java.util.Locale.CHINA;
        java.util.Calendar calendar95 = java.util.Calendar.getInstance(timeZone90, locale94);
        java.util.Calendar calendar96 = java.util.Calendar.getInstance(timeZone88, locale94);
        java.lang.String str97 = locale78.getDisplayVariant(locale94);
        java.lang.String str98 = locale54.getDisplayScript(locale94);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar19 and calendar58", (calendar19.compareTo(calendar58) == 0) == calendar19.equals(calendar58));
    }

    @Test
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test179");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int2 = calendar0.getActualMaximum(4);
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone4);
        java.util.TimeZone timeZone6 = fastDateFormat5.getTimeZone();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone6);
        calendar0.setTimeZone(timeZone6);
        calendar0.setLenient(true);
        calendar0.setMinimalDaysInFirstWeek(292269054);
        java.util.Calendar.Builder builder13 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.util.Calendar.Builder builder17 = builder13.setTimeZone(timeZone14);
        java.util.Locale locale18 = java.util.Locale.CHINESE;
        java.lang.String str19 = locale18.getLanguage();
        java.lang.String str20 = locale18.getDisplayScript();
        java.util.Calendar.Builder builder21 = builder17.setLocale(locale18);
        java.util.Calendar.Builder builder25 = builder17.setWeekDate((int) (short) 10, 59, 50);
        java.util.Calendar.Builder builder29 = builder17.setWeekDate((int) ' ', 41, (int) (short) 1);
        java.util.Calendar.Builder builder30 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        boolean boolean33 = timeZone31.hasSameRules(timeZone32);
        java.util.Calendar.Builder builder34 = builder30.setTimeZone(timeZone31);
        java.util.Calendar.Builder builder36 = builder30.setLenient(true);
        int[] intArray37 = new int[] {};
        java.util.Calendar.Builder builder38 = builder36.setFields(intArray37);
        java.util.Calendar.Builder builder39 = builder29.setFields(intArray37);
        java.util.Calendar.Builder builder43 = builder29.setDate(40, 29, 53);
        boolean boolean44 = calendar0.before((java.lang.Object) builder29);
        java.util.Calendar.Builder builder48 = builder29.setDate(355, 12, 32770);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar0 and calendar7", (calendar0.compareTo(calendar7) == 0) == calendar0.equals(calendar7));
    }

    @Test
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test180");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance();
        int int5 = calendar3.getActualMaximum(4);
        java.util.TimeZone timeZone7 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat8 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone7);
        java.util.TimeZone timeZone9 = fastDateFormat8.getTimeZone();
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone9);
        calendar3.setTimeZone(timeZone9);
        int int12 = calendar3.getFirstDayOfWeek();
        int int14 = calendar3.getActualMaximum((int) (short) 1);
        java.lang.String str15 = fastDateFormat2.format(calendar3);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone16.hasSameRules(timeZone17);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone16);
        java.util.TimeZone timeZone20 = calendar19.getTimeZone();
        java.util.TimeZone timeZone21 = calendar19.getTimeZone();
        int int23 = calendar19.getMinimum(13);
        java.util.Locale.LanguageRange[] languageRangeArray24 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList25 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList25, languageRangeArray24);
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        boolean boolean29 = locale28.hasExtensions();
        java.util.Locale locale30 = java.util.Locale.FRANCE;
        java.util.Locale locale31 = java.util.Locale.CHINESE;
        java.lang.String str32 = locale31.getLanguage();
        java.util.Locale[] localeArray33 = new java.util.Locale[] { locale27, locale28, locale30, locale31 };
        java.util.ArrayList<java.util.Locale> localeList34 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList34, localeArray33);
        java.util.Locale.FilteringMode filteringMode36 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList37 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList25, (java.util.Collection<java.util.Locale>) localeList34, filteringMode36);
        boolean boolean38 = calendar19.after((java.lang.Object) localeList34);
        calendar19.setLenient(false);
        int int41 = calendar19.getWeekYear();
        java.lang.String str42 = fastDateFormat2.format(calendar19);
        java.lang.String str44 = fastDateFormat2.format(1645454867076L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar19", (calendar3.compareTo(calendar19) == 0) == calendar3.equals(calendar19));
    }

    @Test
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test181");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone2.hasSameRules(timeZone3);
        boolean boolean5 = timeZone1.hasSameRules(timeZone2);
        int int6 = timeZone1.getRawOffset();
        boolean boolean7 = timeZone1.observesDaylightTime();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat8 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(2, timeZone1);
        java.util.TimeZone timeZone10 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone10);
        java.lang.String str12 = fastDateFormat11.getPattern();
        java.text.ParsePosition parsePosition15 = new java.text.ParsePosition(16);
        parsePosition15.setIndex(11);
        int int18 = parsePosition15.getErrorIndex();
        java.lang.Object obj19 = fastDateFormat11.parseObject("12:00:00 AM UTC", parsePosition15);
        java.util.TimeZone timeZone20 = fastDateFormat11.getTimeZone();
        java.util.Locale locale21 = fastDateFormat11.getLocale();
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone1, locale21);
        int int24 = timeZone1.getOffset((-2101020230045L));
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        boolean boolean27 = timeZone25.hasSameRules(timeZone26);
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(timeZone25);
        java.util.TimeZone timeZone29 = calendar28.getTimeZone();
        java.util.TimeZone timeZone31 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat32 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone31);
        java.util.TimeZone timeZone33 = fastDateFormat32.getTimeZone();
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone33);
        calendar28.setTimeZone(timeZone33);
        timeZone33.setID("21 Feb 2022 14:45:49 GMT");
        timeZone33.setRawOffset(9);
        java.util.Locale locale41 = java.util.Locale.forLanguageTag("GMT");
        java.util.Calendar calendar42 = java.util.Calendar.getInstance(timeZone33, locale41);
        java.util.TimeZone timeZone44 = java.util.TimeZone.getTimeZone("");
        boolean boolean45 = timeZone33.hasSameRules(timeZone44);
        timeZone33.setRawOffset(57);
        boolean boolean48 = timeZone1.hasSameRules(timeZone33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar22 and calendar28", (calendar22.compareTo(calendar28) == 0) == calendar22.equals(calendar28));
    }

    @Test
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test182");
        java.text.AttributedCharacterIterator.Attribute attribute0 = java.text.AttributedCharacterIterator.Attribute.INPUT_METHOD_SEGMENT;
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone2);
        java.util.TimeZone timeZone4 = fastDateFormat3.getTimeZone();
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone4);
        java.util.Locale locale6 = java.util.Locale.US;
        java.lang.String str8 = locale6.getExtension('a');
        java.util.Set<java.lang.Character> charSet9 = locale6.getExtensionKeys();
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone4, locale6);
        java.util.TimeZone timeZone11 = calendar10.getTimeZone();
        boolean boolean12 = attribute0.equals((java.lang.Object) calendar10);
        java.lang.String str13 = attribute0.toString();
        java.text.Format.Field field14 = null;
        java.text.FieldPosition fieldPosition15 = new java.text.FieldPosition(field14);
        int int16 = fieldPosition15.getBeginIndex();
        boolean boolean18 = fieldPosition15.equals((java.lang.Object) 52);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList20 = java.util.Locale.LanguageRange.parse("zh");
        java.util.Set<java.lang.String> strSet21 = java.util.Calendar.getAvailableCalendarTypes();
        java.lang.String str22 = java.util.Locale.lookupTag(languageRangeList20, (java.util.Collection<java.lang.String>) strSet21);
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.util.Locale locale27 = java.util.Locale.FRANCE;
        boolean boolean28 = locale27.hasExtensions();
        java.util.Locale locale29 = java.util.Locale.FRANCE;
        java.util.Locale locale30 = java.util.Locale.CHINESE;
        java.lang.String str31 = locale30.getLanguage();
        java.util.Locale[] localeArray32 = new java.util.Locale[] { locale26, locale27, locale29, locale30 };
        java.util.ArrayList<java.util.Locale> localeList33 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList33, localeArray32);
        java.util.Locale.FilteringMode filteringMode35 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList36 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.util.Locale>) localeList33, filteringMode35);
        java.util.Spliterator<java.util.Locale> localeSpliterator37 = localeList36.spliterator();
        java.util.List<java.util.Locale> localeList38 = java.util.Locale.filter(languageRangeList20, (java.util.Collection<java.util.Locale>) localeList36);
        boolean boolean39 = fieldPosition15.equals((java.lang.Object) languageRangeList20);
        java.lang.String str40 = fieldPosition15.toString();
        fieldPosition15.setEndIndex((int) '#');
        java.text.Format.Field field43 = fieldPosition15.getFieldAttribute();
        java.lang.String str44 = fieldPosition15.toString();
        boolean boolean45 = attribute0.equals((java.lang.Object) str44);
        java.lang.Object obj46 = null;
        boolean boolean47 = attribute0.equals(obj46);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar10", (calendar5.compareTo(calendar10) == 0) == calendar5.equals(calendar10));
    }

    @Test
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test183");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.lang.String str1 = locale0.getLanguage();
        boolean boolean2 = locale0.hasExtensions();
        java.lang.String str3 = locale0.getDisplayCountry();
        java.util.Locale locale4 = locale0.stripExtensions();
        java.lang.String str5 = locale0.getDisplayName();
        java.util.TimeZone timeZone7 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat8 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone7);
        java.lang.String str9 = fastDateFormat8.getPattern();
        java.util.TimeZone timeZone12 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone12);
        java.lang.String str14 = fastDateFormat13.getPattern();
        java.text.ParsePosition parsePosition17 = new java.text.ParsePosition(16);
        parsePosition17.setIndex(11);
        java.lang.Object obj20 = fastDateFormat13.parseObject("hi!", parsePosition17);
        java.text.ParsePosition parsePosition23 = new java.text.ParsePosition(16);
        java.lang.Object obj24 = fastDateFormat13.parseObject("hi!", parsePosition23);
        java.lang.Object obj25 = fastDateFormat8.parseObject("hi!", parsePosition23);
        java.lang.String str26 = fastDateFormat8.getPattern();
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone27.hasSameRules(timeZone28);
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone27);
        java.util.TimeZone timeZone31 = calendar30.getTimeZone();
        java.util.TimeZone timeZone32 = calendar30.getTimeZone();
        boolean boolean33 = calendar30.isWeekDateSupported();
        int int35 = calendar30.getLeastMaximum(10);
        java.util.Date date36 = new java.util.Date();
        int int37 = date36.getSeconds();
        long long38 = date36.getTime();
        calendar30.setTime(date36);
        java.lang.String str40 = fastDateFormat8.format(date36);
        java.util.Locale locale41 = fastDateFormat8.getLocale();
        java.lang.String str42 = locale41.getISO3Language();
        java.lang.String str43 = locale0.getDisplayName(locale41);
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        boolean boolean46 = timeZone44.hasSameRules(timeZone45);
        java.util.Calendar calendar47 = java.util.Calendar.getInstance(timeZone44);
        java.util.TimeZone timeZone48 = calendar47.getTimeZone();
        java.util.TimeZone timeZone49 = calendar47.getTimeZone();
        boolean boolean50 = calendar47.isWeekDateSupported();
        int int52 = calendar47.getLeastMaximum(10);
        int int53 = calendar47.getWeekYear();
        java.lang.String str54 = calendar47.getCalendarType();
        calendar47.setTimeInMillis((long) (short) -1);
        java.util.TimeZone timeZone57 = calendar47.getTimeZone();
        java.util.Calendar calendar58 = java.util.Calendar.getInstance();
        int int60 = calendar58.getActualMaximum(4);
        java.util.TimeZone timeZone62 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat63 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone62);
        java.util.TimeZone timeZone64 = fastDateFormat63.getTimeZone();
        java.util.Calendar calendar65 = java.util.Calendar.getInstance(timeZone64);
        calendar58.setTimeZone(timeZone64);
        timeZone64.setID("21 Feb 2022 14:45:52 GMT");
        boolean boolean69 = timeZone57.hasSameRules(timeZone64);
        java.lang.String str70 = timeZone64.getID();
        java.util.Locale.Category category71 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale72 = java.util.Locale.getDefault(category71);
        java.util.Locale locale73 = java.util.Locale.CHINESE;
        java.lang.String str74 = locale73.getLanguage();
        boolean boolean75 = locale73.hasExtensions();
        java.lang.String str76 = locale73.getDisplayCountry();
        java.util.Locale.setDefault(category71, locale73);
        java.util.Locale locale78 = locale73.stripExtensions();
        java.lang.String str79 = locale73.getCountry();
        java.util.Calendar calendar80 = java.util.Calendar.getInstance(timeZone64, locale73);
        java.lang.String str81 = locale0.getDisplayVariant(locale73);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar30 and calendar58", (calendar30.compareTo(calendar58) == 0) == calendar30.equals(calendar58));
    }

    @Test
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test184");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3);
        java.util.TimeZone timeZone7 = calendar6.getTimeZone();
        int int8 = calendar6.getFirstDayOfWeek();
        int int9 = calendar6.getFirstDayOfWeek();
        calendar6.setTimeInMillis((long) 100);
        calendar6.setFirstDayOfWeek(7);
        int int14 = calendar6.getMinimalDaysInFirstWeek();
        calendar6.set((int) '#', 17, (int) (byte) 10, (int) (short) 1, (int) (byte) 1);
        java.lang.StringBuffer stringBuffer21 = null;
        java.lang.StringBuffer stringBuffer22 = fastDateFormat2.format(calendar6, stringBuffer21);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance();
        int int25 = calendar23.getActualMaximum(4);
        java.util.TimeZone timeZone27 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone27);
        java.util.TimeZone timeZone29 = fastDateFormat28.getTimeZone();
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone29);
        calendar23.setTimeZone(timeZone29);
        int int32 = calendar23.getFirstDayOfWeek();
        int int34 = calendar23.getActualMaximum((int) (short) 1);
        java.lang.StringBuffer stringBuffer35 = null;
        java.lang.StringBuffer stringBuffer36 = fastDateFormat2.format(calendar23, stringBuffer35);
        java.lang.String str37 = fastDateFormat2.getPattern();
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone39 = java.util.TimeZone.getDefault();
        boolean boolean40 = timeZone38.hasSameRules(timeZone39);
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(timeZone38);
        java.time.Instant instant42 = calendar41.toInstant();
        int int43 = calendar41.getFirstDayOfWeek();
        boolean boolean45 = calendar41.after((java.lang.Object) 15);
        java.util.Date date46 = calendar41.getTime();
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        boolean boolean50 = timeZone48.hasSameRules(timeZone49);
        java.util.Calendar calendar51 = java.util.Calendar.getInstance(timeZone48);
        java.util.Locale.Category category52 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale53 = java.util.Locale.getDefault(category52);
        java.lang.String str54 = locale53.getISO3Language();
        java.lang.String str55 = locale53.getDisplayLanguage();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat56 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(3, timeZone48, locale53);
        calendar41.setTimeZone(timeZone48);
        calendar41.setFirstDayOfWeek(48);
        java.lang.StringBuffer stringBuffer60 = null;
        java.lang.StringBuffer stringBuffer61 = fastDateFormat2.format(calendar41, stringBuffer60);
        java.time.Instant instant62 = calendar41.toInstant();
        int int63 = calendar41.getMinimalDaysInFirstWeek();
        calendar41.setFirstDayOfWeek((int) '#');
        java.util.TimeZone timeZone66 = calendar41.getTimeZone();
        java.util.TimeZone timeZone68 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone69 = java.util.TimeZone.getDefault();
        boolean boolean70 = timeZone68.hasSameRules(timeZone69);
        java.util.Calendar calendar71 = java.util.Calendar.getInstance(timeZone68);
        java.util.Locale locale72 = java.util.Locale.CHINA;
        java.util.Calendar calendar73 = java.util.Calendar.getInstance(timeZone68, locale72);
        java.util.Locale locale75 = new java.util.Locale("java.util.GregorianCalendar[time=1645454753591,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=53,MILLISECOND=591,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale76 = java.util.Locale.US;
        java.lang.String str78 = locale76.getExtension('a');
        java.util.Set<java.lang.Character> charSet79 = locale76.getExtensionKeys();
        java.lang.String str80 = locale76.getDisplayCountry();
        java.lang.String str81 = locale76.getDisplayVariant();
        java.util.Locale.setDefault(locale76);
        java.lang.String str83 = locale75.getDisplayVariant(locale76);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat84 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (byte) 0, timeZone68, locale75);
        calendar41.setTimeZone(timeZone68);
        boolean boolean86 = timeZone68.useDaylightTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar23 and calendar41", (calendar23.compareTo(calendar41) == 0) == calendar23.equals(calendar41));
    }

    @Test
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test185");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        java.util.TimeZone timeZone4 = calendar3.getTimeZone();
        int int6 = calendar3.getMaximum(8);
        calendar3.clear((int) (short) 0);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getTimeZone("java.text.ParsePosition[index=16,errorIndex=-1]");
        java.time.ZoneId zoneId11 = timeZone10.toZoneId();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getTimeZone(zoneId11);
        java.util.TimeZone timeZone13 = java.util.TimeZone.getTimeZone(zoneId11);
        boolean boolean14 = calendar3.after((java.lang.Object) zoneId11);
        java.util.TimeZone timeZone15 = java.util.TimeZone.getTimeZone(zoneId11);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getTimeZone("21 Feb 2022 14:45:58 GMT");
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone17);
        boolean boolean19 = timeZone15.hasSameRules(timeZone17);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar18", (calendar3.compareTo(calendar18) == 0) == calendar3.equals(calendar18));
    }

    @Test
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test186");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Calendar.Builder builder4 = builder0.setTimeZone(timeZone1);
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str6 = locale5.getLanguage();
        java.lang.String str7 = locale5.getDisplayScript();
        java.util.Calendar.Builder builder8 = builder4.setLocale(locale5);
        java.util.Calendar calendar9 = builder8.build();
        java.util.Calendar.Builder builder11 = builder8.setLenient(true);
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone12.hasSameRules(timeZone13);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone12);
        java.util.TimeZone timeZone16 = calendar15.getTimeZone();
        java.util.TimeZone timeZone17 = calendar15.getTimeZone();
        boolean boolean18 = calendar15.isWeekDateSupported();
        int int20 = calendar15.getLeastMaximum(10);
        int int21 = calendar15.getWeekYear();
        java.lang.String str22 = calendar15.getCalendarType();
        calendar15.setTimeInMillis((long) (short) -1);
        java.util.TimeZone timeZone25 = calendar15.getTimeZone();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance();
        int int28 = calendar26.getActualMaximum(4);
        java.util.TimeZone timeZone30 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone30);
        java.util.TimeZone timeZone32 = fastDateFormat31.getTimeZone();
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone32);
        calendar26.setTimeZone(timeZone32);
        timeZone32.setID("21 Feb 2022 14:45:52 GMT");
        boolean boolean37 = timeZone25.hasSameRules(timeZone32);
        java.util.Calendar.Builder builder38 = builder11.setTimeZone(timeZone32);
        java.util.Calendar.Builder builder41 = builder38.set(10, 17);
        java.util.Calendar calendar42 = builder38.build();
        java.util.Locale locale43 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(locale43);
        java.util.Locale locale45 = java.util.Locale.UK;
        java.lang.String str46 = locale43.getDisplayCountry(locale45);
        java.util.Locale locale47 = java.util.Locale.CHINA;
        java.lang.String str48 = locale43.getDisplayLanguage(locale47);
        java.lang.String str49 = locale47.getScript();
        java.util.Calendar.Builder builder50 = builder38.setLocale(locale47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar26 and calendar44", (calendar26.compareTo(calendar44) == 0) == calendar26.equals(calendar44));
    }

    @Test
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test187");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.util.Date date4 = new java.util.Date();
        int int5 = date4.getSeconds();
        java.lang.String str6 = fastDateFormat2.format(date4);
        java.util.Locale locale7 = fastDateFormat2.getLocale();
        java.util.Locale locale8 = fastDateFormat2.getLocale();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        boolean boolean12 = timeZone10.hasSameRules(timeZone11);
        boolean boolean13 = timeZone9.hasSameRules(timeZone10);
        timeZone9.setID("java.util.GregorianCalendar[time=1645454754087,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=54,MILLISECOND=87,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale17 = java.util.Locale.forLanguageTag("English");
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone9, locale17);
        java.util.Locale locale19 = java.util.Locale.SIMPLIFIED_CHINESE;
        boolean boolean20 = locale19.hasExtensions();
        java.lang.String str21 = locale17.getDisplayName(locale19);
        java.lang.String str22 = locale19.getDisplayCountry();
        boolean boolean23 = locale19.hasExtensions();
        java.lang.String str24 = locale8.getDisplayScript(locale19);
        java.util.TimeZone timeZone26 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone26);
        java.util.TimeZone timeZone28 = fastDateFormat27.getTimeZone();
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(timeZone28);
        java.util.Locale locale30 = java.util.Locale.US;
        java.lang.String str32 = locale30.getExtension('a');
        java.util.Set<java.lang.Character> charSet33 = locale30.getExtensionKeys();
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone28, locale30);
        java.lang.String str35 = locale19.getDisplayLanguage(locale30);
        java.lang.Object obj36 = locale30.clone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar18 and calendar29", (calendar18.compareTo(calendar29) == 0) == calendar18.equals(calendar29));
    }

    @Test
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test188");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Calendar.Builder builder4 = builder0.setTimeZone(timeZone1);
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str6 = locale5.getLanguage();
        java.lang.String str7 = locale5.getDisplayScript();
        java.util.Calendar.Builder builder8 = builder4.setLocale(locale5);
        java.util.Calendar calendar9 = builder8.build();
        java.util.Calendar.Builder builder11 = builder8.setLenient(true);
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone12.hasSameRules(timeZone13);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone12);
        java.util.TimeZone timeZone16 = calendar15.getTimeZone();
        java.util.TimeZone timeZone17 = calendar15.getTimeZone();
        boolean boolean18 = calendar15.isWeekDateSupported();
        int int20 = calendar15.getLeastMaximum(10);
        int int21 = calendar15.getWeekYear();
        java.lang.String str22 = calendar15.getCalendarType();
        calendar15.setTimeInMillis((long) (short) -1);
        java.util.TimeZone timeZone25 = calendar15.getTimeZone();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance();
        int int28 = calendar26.getActualMaximum(4);
        java.util.TimeZone timeZone30 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone30);
        java.util.TimeZone timeZone32 = fastDateFormat31.getTimeZone();
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone32);
        calendar26.setTimeZone(timeZone32);
        timeZone32.setID("21 Feb 2022 14:45:52 GMT");
        boolean boolean37 = timeZone25.hasSameRules(timeZone32);
        java.util.Calendar.Builder builder38 = builder11.setTimeZone(timeZone32);
        java.util.Calendar.Builder builder40 = builder11.setLenient(false);
        java.util.Calendar.Builder builder42 = builder11.setLenient(true);
        java.util.Calendar.Builder builder44 = builder42.setInstant((long) 999);
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        boolean boolean47 = timeZone45.hasSameRules(timeZone46);
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(timeZone45);
        java.util.TimeZone timeZone49 = calendar48.getTimeZone();
        java.util.TimeZone timeZone50 = calendar48.getTimeZone();
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        boolean boolean53 = timeZone51.hasSameRules(timeZone52);
        java.util.Calendar calendar54 = java.util.Calendar.getInstance(timeZone51);
        java.util.TimeZone.setDefault(timeZone51);
        calendar48.setTimeZone(timeZone51);
        java.util.Calendar.Builder builder57 = builder44.setTimeZone(timeZone51);
        java.util.Calendar calendar58 = builder57.build();
        calendar58.set(57, (int) (byte) 0, 70, 24, (int) (short) 100);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar26 and calendar48", (calendar26.compareTo(calendar48) == 0) == calendar26.equals(calendar48));
    }

    @Test
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test189");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(locale3);
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str6 = locale5.getLanguage();
        java.lang.String str8 = locale5.getExtension('a');
        java.util.Locale locale9 = java.util.Locale.CHINESE;
        java.lang.String str10 = locale9.getLanguage();
        boolean boolean11 = locale9.hasExtensions();
        java.lang.String str12 = locale9.getDisplayCountry();
        java.util.Locale locale13 = java.util.Locale.JAPANESE;
        java.util.Locale locale14 = java.util.Locale.JAPAN;
        java.util.Locale locale15 = java.util.Locale.JAPANESE;
        java.util.Locale locale19 = new java.util.Locale("", "hi!", "");
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        boolean boolean21 = locale20.hasExtensions();
        java.util.Locale locale22 = java.util.Locale.CHINESE;
        java.lang.String str23 = locale22.getLanguage();
        java.util.Locale locale24 = java.util.Locale.CHINA;
        java.util.Locale locale25 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray26 = new java.util.Locale[] { locale3, locale5, locale9, locale13, locale14, locale15, locale19, locale20, locale22, locale24, locale25 };
        java.util.ArrayList<java.util.Locale> localeList27 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList27, localeArray26);
        java.util.Locale.LanguageRange[] languageRangeArray29 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList30 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList30, languageRangeArray29);
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.util.Locale locale33 = java.util.Locale.FRANCE;
        boolean boolean34 = locale33.hasExtensions();
        java.util.Locale locale35 = java.util.Locale.FRANCE;
        java.util.Locale locale36 = java.util.Locale.CHINESE;
        java.lang.String str37 = locale36.getLanguage();
        java.util.Locale[] localeArray38 = new java.util.Locale[] { locale32, locale33, locale35, locale36 };
        java.util.ArrayList<java.util.Locale> localeList39 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList39, localeArray38);
        java.util.Locale.FilteringMode filteringMode41 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList42 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, (java.util.Collection<java.util.Locale>) localeList39, filteringMode41);
        java.util.List<java.util.Locale> localeList43 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList27, filteringMode41);
        java.util.Date date47 = new java.util.Date((int) '4', 32770, 49);
        java.text.Format.Field field48 = null;
        java.text.FieldPosition fieldPosition49 = new java.text.FieldPosition(field48);
        int int50 = fieldPosition49.getBeginIndex();
        int int51 = fieldPosition49.getField();
        java.util.Date date52 = new java.util.Date();
        int int53 = date52.getSeconds();
        int int54 = date52.getHours();
        boolean boolean55 = fieldPosition49.equals((java.lang.Object) date52);
        boolean boolean56 = date47.before(date52);
        boolean boolean57 = localeList43.equals((java.lang.Object) date52);
        java.util.Locale locale58 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar59 = java.util.Calendar.getInstance(locale58);
        int int61 = calendar59.getMinimum(13);
        java.util.Calendar.Builder builder62 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone63 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone64 = java.util.TimeZone.getDefault();
        boolean boolean65 = timeZone63.hasSameRules(timeZone64);
        java.util.Calendar.Builder builder66 = builder62.setTimeZone(timeZone63);
        calendar59.setTimeZone(timeZone63);
        java.util.TimeZone timeZone69 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat70 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone69);
        java.lang.String str71 = fastDateFormat70.getPattern();
        java.util.TimeZone timeZone74 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat75 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone74);
        java.lang.String str76 = fastDateFormat75.getPattern();
        java.text.ParsePosition parsePosition79 = new java.text.ParsePosition(16);
        parsePosition79.setIndex(11);
        java.lang.Object obj82 = fastDateFormat75.parseObject("hi!", parsePosition79);
        java.text.ParsePosition parsePosition85 = new java.text.ParsePosition(16);
        java.lang.Object obj86 = fastDateFormat75.parseObject("hi!", parsePosition85);
        java.lang.Object obj87 = fastDateFormat70.parseObject("hi!", parsePosition85);
        boolean boolean88 = calendar59.before((java.lang.Object) "hi!");
        boolean boolean89 = calendar59.isWeekDateSupported();
        calendar59.setMinimalDaysInFirstWeek(21);
        int int93 = calendar59.getActualMaximum((int) (byte) 0);
        int int94 = calendar59.getMinimalDaysInFirstWeek();
        java.time.Instant instant95 = calendar59.toInstant();
        java.util.Date date96 = java.util.Date.from(instant95);
        boolean boolean97 = date52.equals((java.lang.Object) date96);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar4 and calendar59", (calendar4.compareTo(calendar59) == 0) == calendar4.equals(calendar59));
    }

    @Test
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test190");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        java.util.Date date2 = calendar1.getTime();
        int int4 = calendar1.getActualMinimum(7);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone5.hasSameRules(timeZone6);
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone5);
        java.util.TimeZone timeZone9 = calendar8.getTimeZone();
        int int10 = calendar8.getFirstDayOfWeek();
        int int11 = calendar8.getFirstDayOfWeek();
        int int13 = calendar8.getGreatestMinimum((int) (short) 10);
        calendar8.set(12, (int) (byte) 1, 6);
        int int18 = calendar8.getFirstDayOfWeek();
        int int19 = calendar8.getMinimalDaysInFirstWeek();
        java.text.Format.Field field20 = null;
        java.text.FieldPosition fieldPosition21 = new java.text.FieldPosition(field20);
        int int22 = fieldPosition21.getBeginIndex();
        int int23 = fieldPosition21.getField();
        java.util.Date date24 = new java.util.Date();
        int int25 = date24.getSeconds();
        int int26 = date24.getHours();
        boolean boolean27 = fieldPosition21.equals((java.lang.Object) date24);
        int int28 = fieldPosition21.getEndIndex();
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        boolean boolean31 = timeZone29.hasSameRules(timeZone30);
        timeZone30.setRawOffset(9);
        boolean boolean34 = fieldPosition21.equals((java.lang.Object) timeZone30);
        timeZone30.setID("Vereinigte Staaten von Amerika");
        calendar8.setTimeZone(timeZone30);
        java.util.TimeZone timeZone39 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone40 = java.util.TimeZone.getDefault();
        boolean boolean41 = timeZone39.hasSameRules(timeZone40);
        java.util.Calendar calendar42 = java.util.Calendar.getInstance(timeZone39);
        java.util.Locale.Category category43 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale44 = java.util.Locale.getDefault(category43);
        java.lang.String str45 = locale44.getISO3Language();
        java.lang.String str46 = locale44.getDisplayLanguage();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat47 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(3, timeZone39, locale44);
        java.util.TimeZone.setDefault(timeZone39);
        boolean boolean49 = timeZone30.hasSameRules(timeZone39);
        calendar1.setTimeZone(timeZone30);
        int int52 = timeZone30.getOffset(1645454982170L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar1 and calendar42", (calendar1.compareTo(calendar42) == 0) == calendar1.equals(calendar42));
    }

    @Test
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test191");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        boolean boolean4 = timeZone0.hasSameRules(timeZone1);
        timeZone0.setID("java.util.GregorianCalendar[time=1645454754087,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=54,MILLISECOND=87,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale8 = java.util.Locale.forLanguageTag("English");
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone0, locale8);
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        boolean boolean11 = locale10.hasExtensions();
        java.lang.String str12 = locale8.getDisplayName(locale10);
        java.lang.String str13 = locale10.getDisplayCountry();
        boolean boolean14 = locale10.hasExtensions();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        boolean boolean17 = timeZone15.hasSameRules(timeZone16);
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone15);
        java.util.TimeZone timeZone19 = calendar18.getTimeZone();
        java.util.TimeZone timeZone20 = calendar18.getTimeZone();
        boolean boolean21 = timeZone20.observesDaylightTime();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone22.hasSameRules(timeZone23);
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone22);
        java.util.Locale locale26 = java.util.Locale.CHINA;
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone22, locale26);
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(timeZone20, locale26);
        java.lang.String str29 = locale10.getDisplayVariant(locale26);
        java.lang.String str30 = locale26.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar9 and calendar18", (calendar9.compareTo(calendar18) == 0) == calendar9.equals(calendar18));
    }

    @Test
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test192");
        java.util.Locale locale1 = new java.util.Locale("Sun Dec 15 00:00:00 GMT+00:00 2002");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        boolean boolean7 = locale6.hasExtensions();
        java.util.Locale locale8 = java.util.Locale.FRANCE;
        java.util.Locale locale9 = java.util.Locale.CHINESE;
        java.lang.String str10 = locale9.getLanguage();
        java.util.Locale[] localeArray11 = new java.util.Locale[] { locale5, locale6, locale8, locale9 };
        java.util.ArrayList<java.util.Locale> localeList12 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList12, localeArray11);
        java.util.Locale.FilteringMode filteringMode14 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList15 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.util.Locale>) localeList12, filteringMode14);
        int int17 = localeList15.lastIndexOf((java.lang.Object) 11);
        java.util.Locale locale18 = java.util.Locale.CHINESE;
        java.lang.String str19 = locale18.getLanguage();
        boolean boolean20 = locale18.hasExtensions();
        java.lang.String str21 = locale18.getDisplayCountry();
        java.util.Set<java.lang.String> strSet22 = locale18.getUnicodeLocaleKeys();
        boolean boolean23 = localeList15.containsAll((java.util.Collection<java.lang.String>) strSet22);
        java.util.TimeZone timeZone25 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone25);
        boolean boolean27 = localeList15.contains((java.lang.Object) timeZone25);
        int int28 = localeList15.size();
        localeList15.clear();
        java.util.TimeZone timeZone31 = java.util.TimeZone.getTimeZone("2:46:23 PM UTC");
        java.lang.String str32 = timeZone31.getID();
        int int33 = timeZone31.getRawOffset();
        java.util.Locale.Category category34 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale35 = java.util.Locale.getDefault(category34);
        java.lang.String str36 = locale35.getScript();
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(timeZone31, locale35);
        java.util.Locale locale38 = java.util.Locale.CHINESE;
        java.lang.String str39 = locale38.getLanguage();
        boolean boolean40 = locale38.hasExtensions();
        java.lang.String str41 = locale38.getDisplayCountry();
        java.lang.String str42 = locale38.getDisplayLanguage();
        java.util.Locale locale43 = java.util.Locale.SIMPLIFIED_CHINESE;
        boolean boolean44 = locale43.hasExtensions();
        java.lang.String str45 = locale38.getDisplayName(locale43);
        java.lang.String str46 = locale38.getISO3Language();
        java.util.Set<java.lang.Character> charSet47 = locale38.getExtensionKeys();
        java.util.Locale locale48 = java.util.Locale.UK;
        java.util.Locale locale49 = java.util.Locale.getDefault();
        java.util.Locale locale50 = java.util.Locale.CHINESE;
        java.lang.String str51 = locale50.getLanguage();
        boolean boolean52 = locale50.hasExtensions();
        java.lang.String str53 = locale49.getDisplayVariant(locale50);
        java.lang.String str54 = locale48.getDisplayScript(locale49);
        java.lang.String str55 = locale49.getISO3Country();
        java.lang.String str56 = locale38.getDisplayScript(locale49);
        java.util.Calendar calendar57 = java.util.Calendar.getInstance(timeZone31, locale38);
        boolean boolean58 = localeList15.contains((java.lang.Object) locale38);
        java.lang.String str59 = locale38.getISO3Country();
        java.util.Locale.Builder builder60 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder62 = builder60.setLanguage("");
        java.util.Locale locale63 = builder60.build();
        java.util.Locale.Builder builder65 = builder60.setLanguage("");
        java.util.Locale.Builder builder67 = builder65.setRegion("US");
        java.util.Locale.Builder builder68 = builder67.clearExtensions();
        java.util.Locale.Builder builder69 = builder68.clear();
        java.util.Locale.Builder builder71 = builder69.removeUnicodeLocaleAttribute("zho");
        java.util.Locale.Category category72 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale73 = java.util.Locale.getDefault(category72);
        java.lang.String str74 = locale73.getISO3Language();
        java.lang.String str75 = locale73.getDisplayLanguage();
        java.lang.String str76 = locale73.getVariant();
        java.util.Locale.Builder builder77 = builder71.setLocale(locale73);
        java.lang.String str78 = locale38.getDisplayScript(locale73);
        java.lang.String str79 = locale1.getDisplayVariant(locale38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar37 and calendar57", (calendar37.compareTo(calendar57) == 0) == calendar37.equals(calendar57));
    }

    @Test
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test193");
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.lang.String str5 = locale1.getDisplayLanguage();
        java.lang.String str6 = locale1.getLanguage();
        java.lang.String str7 = locale1.getVariant();
        java.util.Locale locale9 = new java.util.Locale("java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.lang.String str10 = locale1.getDisplayCountry(locale9);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, locale1);
        java.util.TimeZone timeZone12 = fastDateFormat11.getTimeZone();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone13.hasSameRules(timeZone14);
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.lang.String str17 = locale16.getLanguage();
        java.lang.String str18 = locale16.getDisplayScript();
        java.lang.String str19 = locale16.getDisplayScript();
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone14, locale16);
        java.util.Locale locale21 = java.util.Locale.CHINESE;
        java.lang.String str22 = locale21.getLanguage();
        boolean boolean23 = locale21.hasExtensions();
        java.lang.String str24 = locale21.getDisplayCountry();
        java.lang.String str25 = locale21.getDisplayLanguage();
        java.lang.String str26 = locale21.getLanguage();
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(locale21);
        boolean boolean28 = calendar20.after((java.lang.Object) locale21);
        calendar20.setLenient(false);
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        boolean boolean33 = timeZone31.hasSameRules(timeZone32);
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone31);
        java.util.TimeZone timeZone35 = calendar34.getTimeZone();
        java.util.TimeZone timeZone36 = calendar34.getTimeZone();
        boolean boolean37 = timeZone36.observesDaylightTime();
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(timeZone36);
        calendar20.setTimeZone(timeZone36);
        java.util.Date date43 = new java.util.Date((int) (byte) 100, (int) 'u', 8);
        boolean boolean44 = calendar20.after((java.lang.Object) date43);
        java.lang.String str45 = fastDateFormat11.format(calendar20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar27 and calendar34", (calendar27.compareTo(calendar34) == 0) == calendar27.equals(calendar34));
    }

    @Test
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test194");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone1);
        java.util.TimeZone timeZone5 = calendar4.getTimeZone();
        java.util.TimeZone timeZone6 = calendar4.getTimeZone();
        java.lang.String str7 = timeZone6.getID();
        timeZone6.setRawOffset(9);
        timeZone6.setID("FastDateFormat[]");
        timeZone6.setRawOffset(41);
        java.util.Locale locale14 = java.util.Locale.US;
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleKeys();
        java.lang.String str16 = locale14.toLanguageTag();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone6, locale14);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.Calendar calendar19 = java.util.Calendar.getInstance();
        int int21 = calendar19.getActualMaximum(4);
        java.util.TimeZone timeZone23 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone23);
        java.util.TimeZone timeZone25 = fastDateFormat24.getTimeZone();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(timeZone25);
        calendar19.setTimeZone(timeZone25);
        boolean boolean28 = timeZone25.observesDaylightTime();
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(timeZone25);
        boolean boolean30 = fastDateFormat17.equals((java.lang.Object) calendar29);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar4 and calendar19", (calendar4.compareTo(calendar19) == 0) == calendar4.equals(calendar19));
    }

    @Test
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test195");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        boolean boolean4 = timeZone0.hasSameRules(timeZone1);
        timeZone0.setID("java.util.GregorianCalendar[time=1645454754087,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=54,MILLISECOND=87,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale8 = java.util.Locale.forLanguageTag("English");
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone0, locale8);
        int int11 = calendar9.getMinimum((int) (short) 1);
        java.time.Instant instant12 = calendar9.toInstant();
        int int13 = calendar9.getWeeksInWeekYear();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone14);
        java.time.Instant instant18 = calendar17.toInstant();
        java.util.Date date19 = java.util.Date.from(instant18);
        java.util.Date date25 = new java.util.Date(0, (int) (short) 10, (int) (short) 1, (int) (byte) 100, (int) '#');
        boolean boolean26 = date19.after(date25);
        int int27 = date19.getMonth();
        calendar9.setTime(date19);
        date19.setYear(21);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar9 and calendar17", (calendar9.compareTo(calendar17) == 0) == calendar9.equals(calendar17));
    }

    @Test
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test196");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        java.util.Date date2 = calendar1.getTime();
        int int4 = calendar1.getActualMinimum(7);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone5.hasSameRules(timeZone6);
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone5);
        java.util.TimeZone timeZone9 = calendar8.getTimeZone();
        int int10 = calendar8.getFirstDayOfWeek();
        int int11 = calendar8.getFirstDayOfWeek();
        int int13 = calendar8.getGreatestMinimum((int) (short) 10);
        calendar8.set(12, (int) (byte) 1, 6);
        int int18 = calendar8.getFirstDayOfWeek();
        int int19 = calendar8.getMinimalDaysInFirstWeek();
        java.text.Format.Field field20 = null;
        java.text.FieldPosition fieldPosition21 = new java.text.FieldPosition(field20);
        int int22 = fieldPosition21.getBeginIndex();
        int int23 = fieldPosition21.getField();
        java.util.Date date24 = new java.util.Date();
        int int25 = date24.getSeconds();
        int int26 = date24.getHours();
        boolean boolean27 = fieldPosition21.equals((java.lang.Object) date24);
        int int28 = fieldPosition21.getEndIndex();
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        boolean boolean31 = timeZone29.hasSameRules(timeZone30);
        timeZone30.setRawOffset(9);
        boolean boolean34 = fieldPosition21.equals((java.lang.Object) timeZone30);
        timeZone30.setID("Vereinigte Staaten von Amerika");
        calendar8.setTimeZone(timeZone30);
        java.util.TimeZone timeZone39 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone40 = java.util.TimeZone.getDefault();
        boolean boolean41 = timeZone39.hasSameRules(timeZone40);
        java.util.Calendar calendar42 = java.util.Calendar.getInstance(timeZone39);
        java.util.Locale.Category category43 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale44 = java.util.Locale.getDefault(category43);
        java.lang.String str45 = locale44.getISO3Language();
        java.lang.String str46 = locale44.getDisplayLanguage();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat47 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(3, timeZone39, locale44);
        java.util.TimeZone.setDefault(timeZone39);
        boolean boolean49 = timeZone30.hasSameRules(timeZone39);
        calendar1.setTimeZone(timeZone30);
        int int52 = timeZone30.getOffset(1645454821920L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar1 and calendar42", (calendar1.compareTo(calendar42) == 0) == calendar1.equals(calendar42));
    }

    @Test
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test197");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.text.ParsePosition parsePosition6 = new java.text.ParsePosition(16);
        parsePosition6.setIndex(11);
        java.lang.Object obj9 = fastDateFormat2.parseObject("hi!", parsePosition6);
        java.util.Calendar.Builder builder10 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone11.hasSameRules(timeZone12);
        java.util.Calendar.Builder builder14 = builder10.setTimeZone(timeZone11);
        java.util.Calendar.Builder builder16 = builder10.setInstant((long) (short) 0);
        java.util.Calendar calendar17 = builder16.build();
        java.lang.String str18 = fastDateFormat2.format((java.lang.Object) calendar17);
        java.util.Locale locale19 = fastDateFormat2.getLocale();
        java.util.Locale locale20 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(locale20);
        int int23 = calendar21.getMinimum(13);
        java.util.Calendar.Builder builder24 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        boolean boolean27 = timeZone25.hasSameRules(timeZone26);
        java.util.Calendar.Builder builder28 = builder24.setTimeZone(timeZone25);
        calendar21.setTimeZone(timeZone25);
        calendar21.setMinimalDaysInFirstWeek(16);
        java.lang.String str32 = fastDateFormat2.format(calendar21);
        java.text.ParsePosition parsePosition35 = new java.text.ParsePosition(16);
        int int36 = parsePosition35.getErrorIndex();
        java.lang.String str37 = parsePosition35.toString();
        java.lang.Object obj38 = null;
        boolean boolean39 = parsePosition35.equals(obj38);
        java.lang.Object obj40 = null;
        boolean boolean41 = parsePosition35.equals(obj40);
        java.lang.String str42 = parsePosition35.toString();
        parsePosition35.setIndex((int) (byte) 0);
        int int45 = parsePosition35.getIndex();
        java.util.Locale.LanguageRange[] languageRangeArray46 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList47 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList47, languageRangeArray46);
        java.util.Locale locale49 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar50 = java.util.Calendar.getInstance(locale49);
        java.util.Locale locale51 = java.util.Locale.CHINESE;
        java.lang.String str52 = locale51.getLanguage();
        java.lang.String str54 = locale51.getExtension('a');
        java.util.Locale locale55 = java.util.Locale.CHINESE;
        java.lang.String str56 = locale55.getLanguage();
        boolean boolean57 = locale55.hasExtensions();
        java.lang.String str58 = locale55.getDisplayCountry();
        java.util.Locale locale59 = java.util.Locale.JAPANESE;
        java.util.Locale locale60 = java.util.Locale.JAPAN;
        java.util.Locale locale61 = java.util.Locale.JAPANESE;
        java.util.Locale locale65 = new java.util.Locale("", "hi!", "");
        java.util.Locale locale66 = java.util.Locale.FRANCE;
        boolean boolean67 = locale66.hasExtensions();
        java.util.Locale locale68 = java.util.Locale.CHINESE;
        java.lang.String str69 = locale68.getLanguage();
        java.util.Locale locale70 = java.util.Locale.CHINA;
        java.util.Locale locale71 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray72 = new java.util.Locale[] { locale49, locale51, locale55, locale59, locale60, locale61, locale65, locale66, locale68, locale70, locale71 };
        java.util.ArrayList<java.util.Locale> localeList73 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList73, localeArray72);
        java.util.Locale.LanguageRange[] languageRangeArray75 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList76 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList76, languageRangeArray75);
        java.util.Locale locale78 = java.util.Locale.GERMAN;
        java.util.Locale locale79 = java.util.Locale.FRANCE;
        boolean boolean80 = locale79.hasExtensions();
        java.util.Locale locale81 = java.util.Locale.FRANCE;
        java.util.Locale locale82 = java.util.Locale.CHINESE;
        java.lang.String str83 = locale82.getLanguage();
        java.util.Locale[] localeArray84 = new java.util.Locale[] { locale78, locale79, locale81, locale82 };
        java.util.ArrayList<java.util.Locale> localeList85 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList85, localeArray84);
        java.util.Locale.FilteringMode filteringMode87 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList88 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList76, (java.util.Collection<java.util.Locale>) localeList85, filteringMode87);
        java.util.List<java.util.Locale> localeList89 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList47, (java.util.Collection<java.util.Locale>) localeList73, filteringMode87);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap90 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList91 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList47, strMap90);
        java.util.Locale locale92 = java.util.Locale.US;
        java.util.Set<java.lang.String> strSet93 = locale92.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList94 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList47, (java.util.Collection<java.lang.String>) strSet93);
        java.util.stream.Stream<java.lang.String> strStream95 = strList94.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream96 = strList94.parallelStream();
        boolean boolean97 = parsePosition35.equals((java.lang.Object) strStream96);
        java.lang.Object obj98 = fastDateFormat2.parseObject("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"21 Feb 2022 14:45:52 GMT\",offset=45,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=14,minimalDaysInFirstWeek=1,ERA=1,YEAR=50,MONTH=47,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=999,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=46,SECOND=42,MILLISECOND=736,ZONE_OFFSET=45,DST_OFFSET=0]", parsePosition35);
        int int99 = parsePosition35.getErrorIndex();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar21 and calendar50", (calendar21.compareTo(calendar50) == 0) == calendar21.equals(calendar50));
    }

    @Test
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test198");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int2 = calendar0.getActualMaximum(4);
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone4);
        java.util.TimeZone timeZone6 = fastDateFormat5.getTimeZone();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone6);
        calendar0.setTimeZone(timeZone6);
        int int9 = calendar0.getFirstDayOfWeek();
        calendar0.setMinimalDaysInFirstWeek(5);
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone12.hasSameRules(timeZone13);
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.lang.String str16 = locale15.getLanguage();
        java.lang.String str17 = locale15.getDisplayScript();
        java.lang.String str18 = locale15.getDisplayScript();
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone13, locale15);
        int int20 = calendar19.getFirstDayOfWeek();
        java.util.TimeZone timeZone21 = calendar19.getTimeZone();
        boolean boolean22 = timeZone21.observesDaylightTime();
        calendar0.setTimeZone(timeZone21);
        int int24 = timeZone21.getRawOffset();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar0 and calendar7", (calendar0.compareTo(calendar7) == 0) == calendar0.equals(calendar7));
    }

    @Test
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test199");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.util.TimeZone timeZone3 = fastDateFormat2.getTimeZone();
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone3);
        int int6 = calendar4.getMaximum((int) (short) 0);
        java.util.Calendar.Builder builder7 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone8.hasSameRules(timeZone9);
        java.util.Calendar.Builder builder11 = builder7.setTimeZone(timeZone8);
        java.util.Locale locale12 = java.util.Locale.CHINESE;
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale12.getDisplayScript();
        java.util.Calendar.Builder builder15 = builder11.setLocale(locale12);
        java.util.Calendar.Builder builder19 = builder11.setWeekDate((int) (short) 10, 59, 50);
        java.util.Calendar.Builder builder23 = builder11.setWeekDate((int) ' ', 41, (int) (short) 1);
        java.util.Calendar.Builder builder24 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        boolean boolean27 = timeZone25.hasSameRules(timeZone26);
        java.util.Calendar.Builder builder28 = builder24.setTimeZone(timeZone25);
        java.util.Calendar.Builder builder30 = builder24.setLenient(true);
        int[] intArray31 = new int[] {};
        java.util.Calendar.Builder builder32 = builder30.setFields(intArray31);
        java.util.Calendar.Builder builder33 = builder23.setFields(intArray31);
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        boolean boolean38 = timeZone36.hasSameRules(timeZone37);
        boolean boolean39 = timeZone35.hasSameRules(timeZone36);
        int int40 = timeZone35.getRawOffset();
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(timeZone35);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat42 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone35);
        java.util.TimeZone timeZone43 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        boolean boolean45 = timeZone43.hasSameRules(timeZone44);
        boolean boolean46 = timeZone35.hasSameRules(timeZone43);
        boolean boolean47 = timeZone43.observesDaylightTime();
        boolean boolean48 = timeZone43.observesDaylightTime();
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone50 = java.util.TimeZone.getDefault();
        boolean boolean51 = timeZone49.hasSameRules(timeZone50);
        java.util.Calendar calendar52 = java.util.Calendar.getInstance(timeZone49);
        java.util.TimeZone timeZone53 = calendar52.getTimeZone();
        java.util.TimeZone timeZone54 = calendar52.getTimeZone();
        boolean boolean55 = calendar52.isWeekDateSupported();
        int int57 = calendar52.getLeastMaximum(10);
        int int58 = calendar52.getWeekYear();
        java.lang.String str59 = calendar52.getCalendarType();
        calendar52.setTimeInMillis((long) (short) -1);
        java.util.TimeZone timeZone62 = calendar52.getTimeZone();
        java.util.TimeZone.setDefault(timeZone62);
        boolean boolean64 = timeZone43.hasSameRules(timeZone62);
        timeZone43.setID("2:49:10 PM");
        java.util.Calendar.Builder builder67 = builder23.setTimeZone(timeZone43);
        calendar4.setTimeZone(timeZone43);
        java.lang.Object obj69 = timeZone43.clone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar4 and calendar41", (calendar4.compareTo(calendar41) == 0) == calendar4.equals(calendar41));
    }

    @Test
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test200");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.lang.String str8 = locale7.getLanguage();
        java.util.Locale[] localeArray9 = new java.util.Locale[] { locale3, locale4, locale6, locale7 };
        java.util.ArrayList<java.util.Locale> localeList10 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList10, localeArray9);
        java.util.Locale.FilteringMode filteringMode12 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList13 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList10, filteringMode12);
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        boolean boolean19 = locale18.hasExtensions();
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        java.util.Locale locale21 = java.util.Locale.CHINESE;
        java.lang.String str22 = locale21.getLanguage();
        java.util.Locale[] localeArray23 = new java.util.Locale[] { locale17, locale18, locale20, locale21 };
        java.util.ArrayList<java.util.Locale> localeList24 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList24, localeArray23);
        java.util.Locale.FilteringMode filteringMode26 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList27 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.util.Locale>) localeList24, filteringMode26);
        int int28 = localeList13.indexOf((java.lang.Object) filteringMode26);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList30 = java.util.Locale.LanguageRange.parse("zh");
        java.util.Set<java.lang.String> strSet31 = java.util.Calendar.getAvailableCalendarTypes();
        java.lang.String str32 = java.util.Locale.lookupTag(languageRangeList30, (java.util.Collection<java.lang.String>) strSet31);
        boolean boolean33 = localeList13.retainAll((java.util.Collection<java.lang.String>) strSet31);
        java.util.ListIterator<java.util.Locale> localeItor34 = localeList13.listIterator();
        java.util.Calendar.Builder builder35 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        boolean boolean38 = timeZone36.hasSameRules(timeZone37);
        java.util.Calendar.Builder builder39 = builder35.setTimeZone(timeZone36);
        java.util.Calendar calendar40 = builder39.build();
        java.util.Calendar.Builder builder44 = builder39.setTimeOfDay(12, 21, (int) (short) -1);
        int int45 = localeList13.indexOf((java.lang.Object) builder44);
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone47 = java.util.TimeZone.getDefault();
        boolean boolean48 = timeZone46.hasSameRules(timeZone47);
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(timeZone46);
        java.time.Instant instant50 = calendar49.toInstant();
        java.util.Date date51 = java.util.Date.from(instant50);
        date51.setHours(999);
        java.time.Instant instant54 = date51.toInstant();
        int int55 = localeList13.indexOf((java.lang.Object) date51);
        java.util.Spliterator<java.util.Locale> localeSpliterator56 = localeList13.spliterator();
        java.util.Spliterator<java.util.Locale> localeSpliterator57 = localeList13.spliterator();
        java.util.TimeZone timeZone59 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat60 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone59);
        java.lang.String str61 = fastDateFormat60.getPattern();
        java.util.Date date62 = new java.util.Date();
        int int63 = date62.getSeconds();
        java.lang.String str64 = fastDateFormat60.format(date62);
        java.util.Locale locale65 = fastDateFormat60.getLocale();
        java.util.Locale locale66 = fastDateFormat60.getLocale();
        java.util.TimeZone timeZone67 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone68 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone69 = java.util.TimeZone.getDefault();
        boolean boolean70 = timeZone68.hasSameRules(timeZone69);
        boolean boolean71 = timeZone67.hasSameRules(timeZone68);
        timeZone67.setID("java.util.GregorianCalendar[time=1645454754087,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=54,MILLISECOND=87,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale75 = java.util.Locale.forLanguageTag("English");
        java.util.Calendar calendar76 = java.util.Calendar.getInstance(timeZone67, locale75);
        java.util.Locale locale77 = java.util.Locale.SIMPLIFIED_CHINESE;
        boolean boolean78 = locale77.hasExtensions();
        java.lang.String str79 = locale75.getDisplayName(locale77);
        java.lang.String str80 = locale77.getDisplayCountry();
        boolean boolean81 = locale77.hasExtensions();
        java.lang.String str82 = locale66.getDisplayScript(locale77);
        java.lang.String str83 = locale66.getScript();
        boolean boolean84 = localeList13.add(locale66);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar49 and calendar76", (calendar49.compareTo(calendar76) == 0) == calendar49.equals(calendar76));
    }

    @Test
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test201");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        java.util.Locale locale4 = java.util.Locale.CHINA;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone0, locale4);
        calendar5.setTimeInMillis((long) 6);
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone8.hasSameRules(timeZone9);
        java.util.Locale locale11 = java.util.Locale.CHINESE;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale11.getDisplayScript();
        java.lang.String str14 = locale11.getDisplayScript();
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone9, locale11);
        int int16 = calendar15.getFirstDayOfWeek();
        java.util.TimeZone timeZone17 = calendar15.getTimeZone();
        boolean boolean18 = timeZone17.observesDaylightTime();
        timeZone17.setRawOffset((int) 'u');
        calendar5.setTimeZone(timeZone17);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar15", (calendar3.compareTo(calendar15) == 0) == calendar3.equals(calendar15));
    }

    @Test
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test202");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.util.Locale locale7 = java.util.Locale.FRANCE;
        boolean boolean8 = locale7.hasExtensions();
        java.util.Locale locale9 = java.util.Locale.FRANCE;
        java.util.Locale locale10 = java.util.Locale.CHINESE;
        java.lang.String str11 = locale10.getLanguage();
        java.util.Locale[] localeArray12 = new java.util.Locale[] { locale6, locale7, locale9, locale10 };
        java.util.ArrayList<java.util.Locale> localeList13 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList13, localeArray12);
        java.util.Locale.FilteringMode filteringMode15 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList16 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList13, filteringMode15);
        int int18 = localeList16.lastIndexOf((java.lang.Object) 11);
        java.util.Locale locale19 = java.util.Locale.CHINESE;
        java.lang.String str20 = locale19.getLanguage();
        boolean boolean21 = locale19.hasExtensions();
        java.lang.String str22 = locale19.getDisplayCountry();
        java.util.Set<java.lang.String> strSet23 = locale19.getUnicodeLocaleKeys();
        boolean boolean24 = localeList16.containsAll((java.util.Collection<java.lang.String>) strSet23);
        java.util.Locale.FilteringMode filteringMode25 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList26 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList16, filteringMode25);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone27.hasSameRules(timeZone28);
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone27);
        java.util.Locale locale31 = java.util.Locale.CHINA;
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(timeZone27, locale31);
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        boolean boolean35 = timeZone33.hasSameRules(timeZone34);
        boolean boolean36 = timeZone34.observesDaylightTime();
        boolean boolean37 = timeZone27.hasSameRules(timeZone34);
        boolean boolean38 = localeList16.remove((java.lang.Object) timeZone34);
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(timeZone34);
        calendar39.setLenient(false);
        java.util.Date date42 = calendar39.getTime();
        int int43 = date42.getTimezoneOffset();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar30 and calendar39", (calendar30.compareTo(calendar39) == 0) == calendar30.equals(calendar39));
    }

    @Test
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test203");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str4 = fastDateFormat2.format((long) '#');
        java.util.TimeZone timeZone5 = fastDateFormat2.getTimeZone();
        int int6 = timeZone5.getRawOffset();
        int int7 = timeZone5.getRawOffset();
        int int9 = timeZone5.getOffset(1645454841276L);
        int int10 = timeZone5.getRawOffset();
        java.util.Locale locale11 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(locale11);
        java.util.Locale locale13 = java.util.Locale.UK;
        java.lang.String str14 = locale11.getDisplayCountry(locale13);
        java.util.Locale locale15 = java.util.Locale.CHINA;
        java.lang.String str16 = locale11.getDisplayLanguage(locale15);
        java.lang.String str17 = locale15.getDisplayLanguage();
        java.lang.String str18 = locale15.getDisplayScript();
        java.lang.String str19 = locale15.getLanguage();
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone5, locale15);
        java.lang.String str21 = timeZone5.getDisplayName();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar12 and calendar20", (calendar12.compareTo(calendar20) == 0) == calendar12.equals(calendar20));
    }

    @Test
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test204");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        java.util.Date date2 = calendar1.getTime();
        int int4 = calendar1.getActualMinimum(7);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone5.hasSameRules(timeZone6);
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone5);
        java.util.TimeZone timeZone9 = calendar8.getTimeZone();
        int int10 = calendar8.getFirstDayOfWeek();
        int int11 = calendar8.getFirstDayOfWeek();
        int int13 = calendar8.getGreatestMinimum((int) (short) 10);
        calendar8.set(12, (int) (byte) 1, 6);
        int int18 = calendar8.getFirstDayOfWeek();
        int int19 = calendar8.getMinimalDaysInFirstWeek();
        java.text.Format.Field field20 = null;
        java.text.FieldPosition fieldPosition21 = new java.text.FieldPosition(field20);
        int int22 = fieldPosition21.getBeginIndex();
        int int23 = fieldPosition21.getField();
        java.util.Date date24 = new java.util.Date();
        int int25 = date24.getSeconds();
        int int26 = date24.getHours();
        boolean boolean27 = fieldPosition21.equals((java.lang.Object) date24);
        int int28 = fieldPosition21.getEndIndex();
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        boolean boolean31 = timeZone29.hasSameRules(timeZone30);
        timeZone30.setRawOffset(9);
        boolean boolean34 = fieldPosition21.equals((java.lang.Object) timeZone30);
        timeZone30.setID("Vereinigte Staaten von Amerika");
        calendar8.setTimeZone(timeZone30);
        java.util.TimeZone timeZone39 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone40 = java.util.TimeZone.getDefault();
        boolean boolean41 = timeZone39.hasSameRules(timeZone40);
        java.util.Calendar calendar42 = java.util.Calendar.getInstance(timeZone39);
        java.util.Locale.Category category43 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale44 = java.util.Locale.getDefault(category43);
        java.lang.String str45 = locale44.getISO3Language();
        java.lang.String str46 = locale44.getDisplayLanguage();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat47 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(3, timeZone39, locale44);
        java.util.TimeZone.setDefault(timeZone39);
        boolean boolean49 = timeZone30.hasSameRules(timeZone39);
        calendar1.setTimeZone(timeZone30);
        boolean boolean51 = timeZone30.observesDaylightTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar1 and calendar42", (calendar1.compareTo(calendar42) == 0) == calendar1.equals(calendar42));
    }

    @Test
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test205");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.lang.String str1 = locale0.getLanguage();
        boolean boolean2 = locale0.hasExtensions();
        java.lang.String str3 = locale0.getDisplayCountry();
        java.lang.String str4 = locale0.getDisplayLanguage();
        java.lang.String str5 = locale0.getLanguage();
        java.util.Locale locale6 = java.util.Locale.JAPAN;
        java.lang.String str7 = locale6.getDisplayName();
        java.lang.String str8 = locale0.getDisplayCountry(locale6);
        java.lang.String str9 = locale6.getISO3Country();
        java.util.Locale locale10 = locale6.stripExtensions();
        java.lang.String str11 = locale6.getDisplayCountry();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        java.util.Locale locale17 = new java.util.Locale("6 Jan 1903 00:01:00 GMT", "java.text.ParsePosition[index=16,errorIndex=-1]", "China");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone13, locale17);
        java.lang.String str20 = locale17.getExtension('x');
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.util.Locale locale22 = java.util.Locale.US;
        java.lang.String str24 = locale22.getExtension('a');
        java.util.Set<java.lang.Character> charSet25 = locale22.getExtensionKeys();
        java.lang.String str26 = locale21.getDisplayScript(locale22);
        java.util.Locale locale27 = locale22.stripExtensions();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        boolean boolean30 = timeZone28.hasSameRules(timeZone29);
        java.util.Locale locale31 = java.util.Locale.CHINESE;
        java.lang.String str32 = locale31.getLanguage();
        java.lang.String str33 = locale31.getDisplayScript();
        java.lang.String str34 = locale31.getDisplayScript();
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(timeZone29, locale31);
        java.lang.String str36 = locale27.getDisplayName(locale31);
        java.lang.String str37 = locale31.getDisplayName();
        java.util.Locale locale38 = java.util.Locale.US;
        java.lang.String str40 = locale38.getExtension('a');
        java.util.Set<java.lang.Character> charSet41 = locale38.getExtensionKeys();
        java.util.Set<java.lang.String> strSet42 = locale38.getUnicodeLocaleKeys();
        java.lang.String str43 = locale31.getDisplayName(locale38);
        java.util.Set<java.lang.String> strSet44 = locale38.getUnicodeLocaleKeys();
        java.lang.String str45 = locale17.getDisplayScript(locale38);
        java.lang.String str46 = locale6.getDisplayLanguage(locale17);
        java.util.TimeZone timeZone49 = java.util.TimeZone.getTimeZone("java.util.GregorianCalendar[time=1645454754087,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=54,MILLISECOND=87,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.TimeZone.setDefault(timeZone49);
        timeZone49.setRawOffset(45);
        timeZone49.setID("Taiwan");
        java.util.Locale.Category category56 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale57 = java.util.Locale.getDefault(category56);
        java.util.Locale locale58 = java.util.Locale.CHINESE;
        java.lang.String str59 = locale58.getLanguage();
        boolean boolean60 = locale58.hasExtensions();
        java.lang.String str61 = locale58.getDisplayCountry();
        java.util.Locale.setDefault(category56, locale58);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat63 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale58);
        java.util.Locale locale64 = java.util.Locale.CHINESE;
        java.lang.String str65 = locale64.getLanguage();
        java.lang.String str66 = locale64.getDisplayScript();
        java.util.Set<java.lang.Character> charSet67 = locale64.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet68 = locale64.getExtensionKeys();
        java.util.Locale locale69 = locale64.stripExtensions();
        java.lang.String str70 = locale69.getScript();
        java.util.Locale locale72 = new java.util.Locale("java.util.GregorianCalendar[time=1645454753591,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=53,MILLISECOND=591,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale73 = java.util.Locale.US;
        java.lang.String str75 = locale73.getExtension('a');
        java.util.Set<java.lang.Character> charSet76 = locale73.getExtensionKeys();
        java.lang.String str77 = locale73.getDisplayCountry();
        java.lang.String str78 = locale73.getDisplayVariant();
        java.util.Locale.setDefault(locale73);
        java.lang.String str80 = locale72.getDisplayVariant(locale73);
        java.lang.String str81 = locale69.getDisplayName(locale73);
        java.util.Locale locale83 = java.util.Locale.CHINESE;
        java.lang.String str84 = locale83.getLanguage();
        java.lang.String str85 = locale83.getDisplayScript();
        java.util.Set<java.lang.Character> charSet86 = locale83.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet87 = locale83.getExtensionKeys();
        java.util.Locale locale88 = locale83.stripExtensions();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat89 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, locale83);
        java.lang.String str90 = locale73.getDisplayName(locale83);
        java.lang.String str91 = locale58.getDisplayName(locale83);
        java.util.Calendar calendar92 = java.util.Calendar.getInstance(timeZone49, locale83);
        java.util.Locale locale93 = java.util.Locale.GERMANY;
        java.lang.String str94 = locale93.getVariant();
        java.util.Locale locale95 = locale93.stripExtensions();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat96 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\u65e5\u6587\u65e5\u672c)", timeZone49, locale93);
        java.lang.String str97 = locale17.getDisplayLanguage(locale93);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar35 and calendar92", (calendar35.compareTo(calendar92) == 0) == calendar35.equals(calendar92));
    }

    @Test
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test206");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("zh");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        boolean boolean7 = locale6.hasExtensions();
        java.util.Locale locale8 = java.util.Locale.FRANCE;
        java.util.Locale locale9 = java.util.Locale.CHINESE;
        java.lang.String str10 = locale9.getLanguage();
        java.util.Locale[] localeArray11 = new java.util.Locale[] { locale5, locale6, locale8, locale9 };
        java.util.ArrayList<java.util.Locale> localeList12 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList12, localeArray11);
        java.util.Locale.FilteringMode filteringMode14 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList15 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.util.Locale>) localeList12, filteringMode14);
        java.util.Locale.LanguageRange[] languageRangeArray16 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList17 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17, languageRangeArray16);
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        boolean boolean21 = locale20.hasExtensions();
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.util.Locale locale23 = java.util.Locale.CHINESE;
        java.lang.String str24 = locale23.getLanguage();
        java.util.Locale[] localeArray25 = new java.util.Locale[] { locale19, locale20, locale22, locale23 };
        java.util.ArrayList<java.util.Locale> localeList26 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList26, localeArray25);
        java.util.Locale.FilteringMode filteringMode28 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList29 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.util.Locale>) localeList26, filteringMode28);
        int int30 = localeList15.indexOf((java.lang.Object) filteringMode28);
        java.util.List<java.util.Locale> localeList31 = java.util.Locale.filter(languageRangeList1, (java.util.Collection<java.util.Locale>) localeList15);
        java.util.Locale.LanguageRange[] languageRangeArray32 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList33 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList33, languageRangeArray32);
        java.util.Locale locale35 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(locale35);
        java.util.Locale locale37 = java.util.Locale.CHINESE;
        java.lang.String str38 = locale37.getLanguage();
        java.lang.String str40 = locale37.getExtension('a');
        java.util.Locale locale41 = java.util.Locale.CHINESE;
        java.lang.String str42 = locale41.getLanguage();
        boolean boolean43 = locale41.hasExtensions();
        java.lang.String str44 = locale41.getDisplayCountry();
        java.util.Locale locale45 = java.util.Locale.JAPANESE;
        java.util.Locale locale46 = java.util.Locale.JAPAN;
        java.util.Locale locale47 = java.util.Locale.JAPANESE;
        java.util.Locale locale51 = new java.util.Locale("", "hi!", "");
        java.util.Locale locale52 = java.util.Locale.FRANCE;
        boolean boolean53 = locale52.hasExtensions();
        java.util.Locale locale54 = java.util.Locale.CHINESE;
        java.lang.String str55 = locale54.getLanguage();
        java.util.Locale locale56 = java.util.Locale.CHINA;
        java.util.Locale locale57 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray58 = new java.util.Locale[] { locale35, locale37, locale41, locale45, locale46, locale47, locale51, locale52, locale54, locale56, locale57 };
        java.util.ArrayList<java.util.Locale> localeList59 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList59, localeArray58);
        java.util.Locale.LanguageRange[] languageRangeArray61 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList62 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList62, languageRangeArray61);
        java.util.Locale locale64 = java.util.Locale.GERMAN;
        java.util.Locale locale65 = java.util.Locale.FRANCE;
        boolean boolean66 = locale65.hasExtensions();
        java.util.Locale locale67 = java.util.Locale.FRANCE;
        java.util.Locale locale68 = java.util.Locale.CHINESE;
        java.lang.String str69 = locale68.getLanguage();
        java.util.Locale[] localeArray70 = new java.util.Locale[] { locale64, locale65, locale67, locale68 };
        java.util.ArrayList<java.util.Locale> localeList71 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList71, localeArray70);
        java.util.Locale.FilteringMode filteringMode73 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList74 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList62, (java.util.Collection<java.util.Locale>) localeList71, filteringMode73);
        java.util.List<java.util.Locale> localeList75 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, (java.util.Collection<java.util.Locale>) localeList59, filteringMode73);
        java.util.Locale locale76 = java.util.Locale.ITALIAN;
        java.util.Set<java.lang.String> strSet77 = locale76.getUnicodeLocaleAttributes();
        boolean boolean78 = localeList75.add(locale76);
        java.util.Set<java.lang.String> strSet79 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream80 = strSet79.parallelStream();
        boolean boolean81 = localeList75.removeAll((java.util.Collection<java.lang.String>) strSet79);
        java.util.List<java.util.Locale> localeList82 = java.util.Locale.filter(languageRangeList1, (java.util.Collection<java.util.Locale>) localeList75);
        java.util.ListIterator<java.util.Locale> localeItor83 = localeList75.listIterator();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap85 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList86 = java.util.Locale.LanguageRange.parse("JPN", strMap85);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap87 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList88 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList86, strMap87);
        java.util.Locale locale89 = java.util.Locale.FRANCE;
        java.util.Locale locale90 = locale89.stripExtensions();
        java.util.Calendar calendar91 = java.util.Calendar.getInstance(locale90);
        java.lang.String str92 = locale90.getDisplayVariant();
        java.lang.String str93 = locale90.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet94 = locale90.getUnicodeLocaleKeys();
        java.lang.String str95 = java.util.Locale.lookupTag(languageRangeList88, (java.util.Collection<java.lang.String>) strSet94);
        boolean boolean96 = localeList75.removeAll((java.util.Collection<java.lang.String>) strSet94);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar36 and calendar91", (calendar36.compareTo(calendar91) == 0) == calendar36.equals(calendar91));
    }

    @Test
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test207");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.lang.String str8 = locale7.getLanguage();
        java.util.Locale[] localeArray9 = new java.util.Locale[] { locale3, locale4, locale6, locale7 };
        java.util.ArrayList<java.util.Locale> localeList10 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList10, localeArray9);
        java.util.Locale.FilteringMode filteringMode12 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList13 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList10, filteringMode12);
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        boolean boolean15 = locale14.hasExtensions();
        boolean boolean16 = localeList13.add(locale14);
        localeList13.clear();
        java.util.ListIterator<java.util.Locale> localeItor18 = localeList13.listIterator();
        boolean boolean19 = localeList13.isEmpty();
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        boolean boolean23 = timeZone21.hasSameRules(timeZone22);
        boolean boolean24 = timeZone20.hasSameRules(timeZone21);
        timeZone20.setID("java.util.GregorianCalendar[time=1645454754087,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=54,MILLISECOND=87,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale28 = java.util.Locale.forLanguageTag("English");
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(timeZone20, locale28);
        java.util.Locale locale30 = java.util.Locale.SIMPLIFIED_CHINESE;
        boolean boolean31 = locale30.hasExtensions();
        java.lang.String str32 = locale28.getDisplayName(locale30);
        java.lang.String str33 = locale30.getDisplayCountry();
        boolean boolean34 = locale30.hasExtensions();
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        boolean boolean37 = timeZone35.hasSameRules(timeZone36);
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(timeZone35);
        java.util.TimeZone timeZone39 = calendar38.getTimeZone();
        java.util.TimeZone timeZone40 = calendar38.getTimeZone();
        boolean boolean41 = timeZone40.observesDaylightTime();
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone43 = java.util.TimeZone.getDefault();
        boolean boolean44 = timeZone42.hasSameRules(timeZone43);
        java.util.Calendar calendar45 = java.util.Calendar.getInstance(timeZone42);
        java.util.Locale locale46 = java.util.Locale.CHINA;
        java.util.Calendar calendar47 = java.util.Calendar.getInstance(timeZone42, locale46);
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(timeZone40, locale46);
        java.lang.String str49 = locale30.getDisplayVariant(locale46);
        java.util.Set<java.lang.String> strSet50 = locale30.getUnicodeLocaleKeys();
        boolean boolean51 = localeList13.removeAll((java.util.Collection<java.lang.String>) strSet50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar29 and calendar38", (calendar29.compareTo(calendar38) == 0) == calendar29.equals(calendar38));
    }

    @Test
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test208");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        timeZone2.setID("China");
        java.util.Locale locale6 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(locale6);
        java.util.Locale locale8 = java.util.Locale.UK;
        java.lang.String str9 = locale6.getDisplayCountry(locale8);
        java.util.Locale locale10 = java.util.Locale.TAIWAN;
        java.lang.String str11 = locale6.getDisplayCountry(locale10);
        java.lang.String str12 = locale10.getScript();
        java.lang.String str13 = locale10.getDisplayCountry();
        java.util.Locale.Category category15 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale16 = java.util.Locale.getDefault(category15);
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.lang.String str18 = locale17.getLanguage();
        boolean boolean19 = locale17.hasExtensions();
        java.lang.String str20 = locale17.getDisplayCountry();
        java.util.Locale.setDefault(category15, locale17);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale17);
        java.util.Locale locale24 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(locale24);
        int int27 = calendar25.getMinimum(13);
        java.util.Calendar.Builder builder28 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        boolean boolean31 = timeZone29.hasSameRules(timeZone30);
        java.util.Calendar.Builder builder32 = builder28.setTimeZone(timeZone29);
        calendar25.setTimeZone(timeZone29);
        java.util.Locale.Category category34 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale35 = java.util.Locale.getDefault(category34);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone29, locale35);
        java.util.Locale locale37 = locale35.stripExtensions();
        java.util.Locale locale38 = java.util.Locale.CHINESE;
        java.lang.String str39 = locale38.getLanguage();
        java.lang.String str40 = locale38.getDisplayScript();
        java.util.Set<java.lang.Character> charSet41 = locale38.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet42 = locale38.getExtensionKeys();
        java.util.Locale locale43 = locale38.stripExtensions();
        java.lang.String str44 = locale43.getScript();
        java.util.Locale locale46 = new java.util.Locale("java.util.GregorianCalendar[time=1645454753591,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=53,MILLISECOND=591,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale47 = java.util.Locale.US;
        java.lang.String str49 = locale47.getExtension('a');
        java.util.Set<java.lang.Character> charSet50 = locale47.getExtensionKeys();
        java.lang.String str51 = locale47.getDisplayCountry();
        java.lang.String str52 = locale47.getDisplayVariant();
        java.util.Locale.setDefault(locale47);
        java.lang.String str54 = locale46.getDisplayVariant(locale47);
        java.lang.String str55 = locale43.getDisplayName(locale47);
        boolean boolean56 = locale43.hasExtensions();
        java.lang.String str57 = locale37.getDisplayName(locale43);
        java.lang.String str59 = locale37.getExtension('a');
        java.lang.String str60 = locale37.getISO3Country();
        java.lang.String str61 = locale17.getDisplayScript(locale37);
        java.lang.String str62 = locale17.getVariant();
        java.lang.String str63 = locale10.getDisplayCountry(locale17);
        java.util.Locale locale64 = locale10.stripExtensions();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat65 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, timeZone2, locale64);
        java.util.Calendar calendar66 = java.util.Calendar.getInstance(timeZone2);
        java.util.Locale locale67 = java.util.Locale.CHINESE;
        java.lang.String str68 = locale67.getLanguage();
        java.lang.String str69 = locale67.getDisplayScript();
        java.util.Set<java.lang.Character> charSet70 = locale67.getExtensionKeys();
        java.util.Set<java.lang.Character> charSet71 = locale67.getExtensionKeys();
        java.util.Locale.Category category72 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale73 = java.util.Locale.getDefault(category72);
        java.util.Locale.Category category74 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale75 = java.util.Locale.getDefault(category74);
        java.lang.String str76 = locale75.getISO3Language();
        java.lang.String str77 = locale75.getScript();
        java.util.Locale locale78 = java.util.Locale.CHINA;
        java.lang.String str79 = locale75.getDisplayCountry(locale78);
        java.lang.String str80 = locale73.getDisplayLanguage(locale78);
        java.lang.String str81 = locale67.getDisplayScript(locale73);
        java.lang.String str83 = locale73.getExtension('a');
        java.util.Locale.setDefault(locale73);
        java.lang.String str85 = timeZone2.getDisplayName(locale73);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar7 and calendar66", (calendar7.compareTo(calendar66) == 0) == calendar7.equals(calendar66));
    }

    @Test
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test209");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale4 = java.util.Locale.getDefault(category0);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone5.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.CHINESE;
        java.lang.String str9 = locale8.getLanguage();
        java.lang.String str10 = locale8.getDisplayScript();
        java.lang.String str11 = locale8.getDisplayScript();
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone6, locale8);
        java.util.Locale locale13 = java.util.Locale.CHINESE;
        java.lang.String str14 = locale13.getLanguage();
        boolean boolean15 = locale13.hasExtensions();
        java.lang.String str16 = locale13.getDisplayCountry();
        java.lang.String str17 = locale13.getDisplayLanguage();
        java.lang.String str18 = locale13.getLanguage();
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(locale13);
        boolean boolean20 = calendar12.after((java.lang.Object) locale13);
        calendar12.setLenient(false);
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        boolean boolean25 = timeZone23.hasSameRules(timeZone24);
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(timeZone23);
        java.util.TimeZone timeZone27 = calendar26.getTimeZone();
        java.util.TimeZone timeZone28 = calendar26.getTimeZone();
        boolean boolean29 = timeZone28.observesDaylightTime();
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone28);
        calendar12.setTimeZone(timeZone28);
        int int32 = calendar12.getFirstDayOfWeek();
        java.util.Calendar calendar33 = java.util.Calendar.getInstance();
        java.util.Date date34 = calendar33.getTime();
        int int35 = date34.getTimezoneOffset();
        calendar12.setTime(date34);
        int int37 = calendar12.getWeeksInWeekYear();
        java.util.Date date41 = new java.util.Date(29, (int) (short) 100, 35);
        java.time.Instant instant42 = date41.toInstant();
        date41.setSeconds(32770);
        calendar12.setTime(date41);
        boolean boolean46 = locale4.equals((java.lang.Object) calendar12);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar19 and calendar26", (calendar19.compareTo(calendar26) == 0) == calendar19.equals(calendar26));
    }

    @Test
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test210");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Calendar.Builder builder4 = builder0.setTimeZone(timeZone1);
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str6 = locale5.getLanguage();
        java.lang.String str7 = locale5.getDisplayScript();
        java.util.Calendar.Builder builder8 = builder4.setLocale(locale5);
        java.util.Calendar calendar9 = builder8.build();
        java.util.Calendar.Builder builder11 = builder8.setLenient(true);
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone12.hasSameRules(timeZone13);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone12);
        java.util.TimeZone timeZone16 = calendar15.getTimeZone();
        java.util.TimeZone timeZone17 = calendar15.getTimeZone();
        boolean boolean18 = calendar15.isWeekDateSupported();
        int int20 = calendar15.getLeastMaximum(10);
        int int21 = calendar15.getWeekYear();
        java.lang.String str22 = calendar15.getCalendarType();
        calendar15.setTimeInMillis((long) (short) -1);
        java.util.TimeZone timeZone25 = calendar15.getTimeZone();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance();
        int int28 = calendar26.getActualMaximum(4);
        java.util.TimeZone timeZone30 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone30);
        java.util.TimeZone timeZone32 = fastDateFormat31.getTimeZone();
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone32);
        calendar26.setTimeZone(timeZone32);
        timeZone32.setID("21 Feb 2022 14:45:52 GMT");
        boolean boolean37 = timeZone25.hasSameRules(timeZone32);
        java.util.Calendar.Builder builder38 = builder11.setTimeZone(timeZone32);
        java.util.Locale locale39 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(locale39);
        java.lang.String str41 = locale39.getVariant();
        java.lang.String str42 = locale39.getDisplayName();
        java.lang.String str43 = locale39.getISO3Country();
        java.lang.String str44 = locale39.getDisplayName();
        java.util.Calendar.Builder builder45 = builder11.setLocale(locale39);
        java.util.Calendar.Builder builder50 = builder45.setTimeOfDay(46, 32769, 24, 57);
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        boolean boolean53 = timeZone51.hasSameRules(timeZone52);
        java.util.Calendar calendar54 = java.util.Calendar.getInstance(timeZone51);
        java.util.Locale locale55 = java.util.Locale.CHINA;
        java.util.Calendar calendar56 = java.util.Calendar.getInstance(timeZone51, locale55);
        java.lang.String str57 = timeZone51.getID();
        boolean boolean58 = timeZone51.observesDaylightTime();
        java.util.Calendar.Builder builder59 = builder50.setTimeZone(timeZone51);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar26 and calendar40", (calendar26.compareTo(calendar40) == 0) == calendar26.equals(calendar40));
    }

    @Test
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test211");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2:46:23 PM UTC");
        java.lang.String str2 = timeZone1.getID();
        int int3 = timeZone1.getRawOffset();
        java.util.Locale.Category category4 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale5 = java.util.Locale.getDefault(category4);
        java.lang.String str6 = locale5.getScript();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone1, locale5);
        java.lang.String str8 = locale5.getDisplayVariant();
        java.util.Locale.Builder builder9 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder11 = builder9.setLanguage("");
        java.util.Locale locale12 = java.util.Locale.CHINESE;
        java.lang.String str13 = locale12.getLanguage();
        boolean boolean14 = locale12.hasExtensions();
        java.lang.String str15 = locale12.getDisplayCountry();
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(locale12);
        java.util.Locale.Builder builder17 = builder11.setLocale(locale12);
        java.util.Locale.Builder builder19 = builder11.removeUnicodeLocaleAttribute("eng");
        java.util.Locale.Builder builder20 = builder11.clearExtensions();
        java.util.Locale.Builder builder21 = builder20.clear();
        java.util.Locale locale22 = java.util.Locale.CHINA;
        java.util.Locale.Builder builder23 = builder20.setLocale(locale22);
        java.lang.String str24 = locale22.getDisplayVariant();
        java.lang.String str25 = locale5.getDisplayLanguage(locale22);
        java.lang.String str26 = locale22.getVariant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar7 and calendar16", (calendar7.compareTo(calendar16) == 0) == calendar7.equals(calendar16));
    }

    @Test
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test212");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.lang.String str4 = fastDateFormat2.format((long) 32772);
        java.lang.String str6 = fastDateFormat2.format((long) 49);
        java.util.Locale locale7 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(locale7);
        java.util.Date date9 = calendar8.getTime();
        calendar8.setFirstDayOfWeek((int) (short) 10);
        java.util.Date date12 = new java.util.Date();
        int int13 = date12.getTimezoneOffset();
        date12.setMinutes(5);
        int int16 = date12.getTimezoneOffset();
        calendar8.setTime(date12);
        int int19 = calendar8.getActualMinimum(2);
        boolean boolean20 = calendar8.isWeekDateSupported();
        calendar8.clear();
        java.lang.StringBuffer stringBuffer22 = null;
        java.lang.StringBuffer stringBuffer23 = fastDateFormat2.format(calendar8, stringBuffer22);
        java.util.TimeZone timeZone24 = fastDateFormat2.getTimeZone();
        java.util.Locale locale25 = fastDateFormat2.getLocale();
        java.util.Calendar.Builder builder26 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone27.hasSameRules(timeZone28);
        java.util.Calendar.Builder builder30 = builder26.setTimeZone(timeZone27);
        java.util.Locale locale31 = java.util.Locale.CHINESE;
        java.lang.String str32 = locale31.getLanguage();
        java.lang.String str33 = locale31.getDisplayScript();
        java.util.Calendar.Builder builder34 = builder30.setLocale(locale31);
        java.util.Calendar.Builder builder38 = builder30.setWeekDate((int) (short) 10, 59, 50);
        java.util.Calendar.Builder builder42 = builder30.setWeekDate((int) ' ', 41, (int) (short) 1);
        java.util.Calendar.Builder builder43 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        boolean boolean46 = timeZone44.hasSameRules(timeZone45);
        java.util.Calendar.Builder builder47 = builder43.setTimeZone(timeZone44);
        java.util.Calendar.Builder builder49 = builder43.setLenient(true);
        int[] intArray50 = new int[] {};
        java.util.Calendar.Builder builder51 = builder49.setFields(intArray50);
        java.util.Calendar.Builder builder52 = builder42.setFields(intArray50);
        java.util.TimeZone timeZone54 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone55 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone56 = java.util.TimeZone.getDefault();
        boolean boolean57 = timeZone55.hasSameRules(timeZone56);
        boolean boolean58 = timeZone54.hasSameRules(timeZone55);
        int int59 = timeZone54.getRawOffset();
        java.util.Calendar calendar60 = java.util.Calendar.getInstance(timeZone54);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat61 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone54);
        java.util.TimeZone timeZone62 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone63 = java.util.TimeZone.getDefault();
        boolean boolean64 = timeZone62.hasSameRules(timeZone63);
        boolean boolean65 = timeZone54.hasSameRules(timeZone62);
        boolean boolean66 = timeZone62.observesDaylightTime();
        boolean boolean67 = timeZone62.observesDaylightTime();
        java.util.TimeZone timeZone68 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone69 = java.util.TimeZone.getDefault();
        boolean boolean70 = timeZone68.hasSameRules(timeZone69);
        java.util.Calendar calendar71 = java.util.Calendar.getInstance(timeZone68);
        java.util.TimeZone timeZone72 = calendar71.getTimeZone();
        java.util.TimeZone timeZone73 = calendar71.getTimeZone();
        boolean boolean74 = calendar71.isWeekDateSupported();
        int int76 = calendar71.getLeastMaximum(10);
        int int77 = calendar71.getWeekYear();
        java.lang.String str78 = calendar71.getCalendarType();
        calendar71.setTimeInMillis((long) (short) -1);
        java.util.TimeZone timeZone81 = calendar71.getTimeZone();
        java.util.TimeZone.setDefault(timeZone81);
        boolean boolean83 = timeZone62.hasSameRules(timeZone81);
        timeZone62.setID("2:49:10 PM");
        java.util.Calendar.Builder builder86 = builder42.setTimeZone(timeZone62);
        java.util.TimeZone.setDefault(timeZone62);
        java.util.Locale locale88 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar89 = java.util.Calendar.getInstance(locale88);
        java.lang.String str90 = locale88.getVariant();
        java.lang.String str91 = locale88.getDisplayScript();
        java.util.Calendar calendar92 = java.util.Calendar.getInstance(timeZone62, locale88);
        java.lang.StringBuffer stringBuffer93 = null;
        java.lang.StringBuffer stringBuffer94 = fastDateFormat2.format(calendar92, stringBuffer93);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar60 and calendar89", (calendar60.compareTo(calendar89) == 0) == calendar60.equals(calendar89));
    }

    @Test
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test213");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        java.util.TimeZone timeZone4 = calendar3.getTimeZone();
        java.util.TimeZone timeZone5 = calendar3.getTimeZone();
        boolean boolean6 = calendar3.isWeekDateSupported();
        int int8 = calendar3.getLeastMaximum(10);
        int int9 = calendar3.getWeekYear();
        java.lang.String str10 = calendar3.getCalendarType();
        calendar3.setTimeInMillis((long) (short) -1);
        java.util.TimeZone timeZone13 = calendar3.getTimeZone();
        java.util.TimeZone.setDefault(timeZone13);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone13);
        timeZone13.setRawOffset(16);
        java.util.TimeZone timeZone19 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone19);
        java.lang.String str22 = fastDateFormat20.format((long) 32772);
        java.lang.String str24 = fastDateFormat20.format((long) 49);
        java.util.TimeZone timeZone25 = fastDateFormat20.getTimeZone();
        java.util.TimeZone timeZone27 = java.util.TimeZone.getTimeZone("java.util.GregorianCalendar[time=1645454754087,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=54,MILLISECOND=87,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.TimeZone.setDefault(timeZone27);
        timeZone27.setRawOffset(45);
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(timeZone27);
        int int32 = timeZone27.getRawOffset();
        boolean boolean33 = timeZone25.hasSameRules(timeZone27);
        java.lang.String str34 = timeZone27.getID();
        boolean boolean35 = timeZone13.hasSameRules(timeZone27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar15 and calendar31", (calendar15.compareTo(calendar31) == 0) == calendar15.equals(calendar31));
    }

    @Test
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test214");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Calendar.Builder builder4 = builder0.setTimeZone(timeZone1);
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str6 = locale5.getLanguage();
        java.lang.String str7 = locale5.getDisplayScript();
        java.util.Calendar.Builder builder8 = builder4.setLocale(locale5);
        java.util.Calendar.Builder builder10 = builder8.setLenient(false);
        java.util.Calendar.Builder builder15 = builder8.setTimeOfDay(0, 0, (int) (short) 100, (int) (byte) 1);
        java.util.Calendar.Builder builder19 = builder8.setTimeOfDay(21, 21, 0);
        java.util.Calendar calendar20 = java.util.Calendar.getInstance();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        boolean boolean23 = timeZone21.hasSameRules(timeZone22);
        boolean boolean24 = timeZone22.observesDaylightTime();
        calendar20.setTimeZone(timeZone22);
        java.util.Calendar.Builder builder26 = builder19.setTimeZone(timeZone22);
        java.util.Locale locale27 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(locale27);
        int int30 = calendar28.getMinimum(13);
        java.util.Calendar.Builder builder31 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        boolean boolean34 = timeZone32.hasSameRules(timeZone33);
        java.util.Calendar.Builder builder35 = builder31.setTimeZone(timeZone32);
        calendar28.setTimeZone(timeZone32);
        java.util.Calendar.Builder builder37 = builder26.setTimeZone(timeZone32);
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone39 = java.util.TimeZone.getDefault();
        boolean boolean40 = timeZone38.hasSameRules(timeZone39);
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(timeZone38);
        java.util.TimeZone timeZone42 = calendar41.getTimeZone();
        int int44 = timeZone42.getOffset((long) 'a');
        java.util.TimeZone.setDefault(timeZone42);
        java.util.Calendar.Builder builder46 = builder37.setTimeZone(timeZone42);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar20 and calendar28", (calendar20.compareTo(calendar28) == 0) == calendar20.equals(calendar28));
    }

    @Test
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test215");
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        boolean boolean6 = locale5.hasExtensions();
        java.util.Locale locale7 = java.util.Locale.FRANCE;
        java.util.Locale locale8 = java.util.Locale.CHINESE;
        java.lang.String str9 = locale8.getLanguage();
        java.util.Locale[] localeArray10 = new java.util.Locale[] { locale4, locale5, locale7, locale8 };
        java.util.ArrayList<java.util.Locale> localeList11 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList11, localeArray10);
        java.util.Locale.FilteringMode filteringMode13 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList14 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.util.Locale>) localeList11, filteringMode13);
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        boolean boolean20 = locale19.hasExtensions();
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.util.Locale locale22 = java.util.Locale.CHINESE;
        java.lang.String str23 = locale22.getLanguage();
        java.util.Locale[] localeArray24 = new java.util.Locale[] { locale18, locale19, locale21, locale22 };
        java.util.ArrayList<java.util.Locale> localeList25 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList25, localeArray24);
        java.util.Locale.FilteringMode filteringMode27 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList28 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.util.Locale>) localeList25, filteringMode27);
        int int29 = localeList14.indexOf((java.lang.Object) filteringMode27);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList31 = java.util.Locale.LanguageRange.parse("zh");
        java.util.Set<java.lang.String> strSet32 = java.util.Calendar.getAvailableCalendarTypes();
        java.lang.String str33 = java.util.Locale.lookupTag(languageRangeList31, (java.util.Collection<java.lang.String>) strSet32);
        boolean boolean34 = localeList14.retainAll((java.util.Collection<java.lang.String>) strSet32);
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        boolean boolean38 = timeZone36.hasSameRules(timeZone37);
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(timeZone36);
        java.util.Locale.Category category40 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale41 = java.util.Locale.getDefault(category40);
        java.lang.String str42 = locale41.getISO3Language();
        java.lang.String str43 = locale41.getDisplayLanguage();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(3, timeZone36, locale41);
        java.util.Calendar calendar45 = java.util.Calendar.getInstance(timeZone36);
        boolean boolean46 = localeList14.remove((java.lang.Object) timeZone36);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat47 = org.apache.commons.lang3.time.FastDateFormat.getInstance("2022-2-21 14:46:01", timeZone36);
        java.util.Locale locale48 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(locale48);
        java.util.Calendar calendar50 = java.util.Calendar.getInstance(timeZone36, locale48);
        boolean boolean51 = timeZone36.observesDaylightTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar39 and calendar50", (calendar39.compareTo(calendar50) == 0) == calendar39.equals(calendar50));
    }

    @Test
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test216");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Calendar.Builder builder4 = builder0.setTimeZone(timeZone1);
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str6 = locale5.getLanguage();
        java.lang.String str7 = locale5.getDisplayScript();
        java.util.Calendar.Builder builder8 = builder4.setLocale(locale5);
        java.util.Calendar calendar9 = builder8.build();
        java.util.Calendar.Builder builder11 = builder8.setLenient(true);
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone12.hasSameRules(timeZone13);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone12);
        java.util.TimeZone timeZone16 = calendar15.getTimeZone();
        java.util.TimeZone timeZone17 = calendar15.getTimeZone();
        boolean boolean18 = calendar15.isWeekDateSupported();
        int int20 = calendar15.getLeastMaximum(10);
        int int21 = calendar15.getWeekYear();
        java.lang.String str22 = calendar15.getCalendarType();
        calendar15.setTimeInMillis((long) (short) -1);
        java.util.TimeZone timeZone25 = calendar15.getTimeZone();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance();
        int int28 = calendar26.getActualMaximum(4);
        java.util.TimeZone timeZone30 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone30);
        java.util.TimeZone timeZone32 = fastDateFormat31.getTimeZone();
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone32);
        calendar26.setTimeZone(timeZone32);
        timeZone32.setID("21 Feb 2022 14:45:52 GMT");
        boolean boolean37 = timeZone25.hasSameRules(timeZone32);
        java.util.Calendar.Builder builder38 = builder11.setTimeZone(timeZone32);
        java.util.Locale locale39 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(locale39);
        java.lang.String str41 = locale39.getVariant();
        java.lang.String str42 = locale39.getDisplayName();
        java.lang.String str43 = locale39.getISO3Country();
        java.lang.String str44 = locale39.getDisplayName();
        java.util.Calendar.Builder builder45 = builder11.setLocale(locale39);
        java.util.Calendar.Builder builder50 = builder45.setTimeOfDay(46, 32769, 24, 57);
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        boolean boolean53 = timeZone51.hasSameRules(timeZone52);
        java.util.Locale locale54 = java.util.Locale.CHINESE;
        java.lang.String str55 = locale54.getLanguage();
        java.lang.String str56 = locale54.getDisplayScript();
        java.lang.String str57 = locale54.getDisplayScript();
        java.util.Calendar calendar58 = java.util.Calendar.getInstance(timeZone52, locale54);
        java.util.TimeZone timeZone59 = calendar58.getTimeZone();
        timeZone59.setRawOffset(3);
        java.util.Calendar.Builder builder62 = builder45.setTimeZone(timeZone59);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar33 and calendar40", (calendar33.compareTo(calendar40) == 0) == calendar33.equals(calendar40));
    }

    @Test
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test217");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        java.util.TimeZone timeZone4 = calendar3.getTimeZone();
        java.util.TimeZone timeZone6 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat7 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone6);
        java.util.TimeZone timeZone8 = fastDateFormat7.getTimeZone();
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone8);
        calendar3.setTimeZone(timeZone8);
        timeZone8.setID("21 Feb 2022 14:45:49 GMT");
        timeZone8.setRawOffset(9);
        java.util.Locale locale16 = java.util.Locale.forLanguageTag("GMT");
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone8, locale16);
        java.util.TimeZone timeZone19 = java.util.TimeZone.getTimeZone("28 Sep 1909 10:57:00 GMT");
        boolean boolean20 = timeZone19.observesDaylightTime();
        calendar17.setTimeZone(timeZone19);
        int int22 = timeZone19.getDSTSavings();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar17", (calendar3.compareTo(calendar17) == 0) == calendar3.equals(calendar17));
    }

    @Test
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test218");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Calendar.Builder builder4 = builder0.setTimeZone(timeZone1);
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str6 = locale5.getLanguage();
        java.lang.String str7 = locale5.getDisplayScript();
        java.util.Calendar.Builder builder8 = builder4.setLocale(locale5);
        java.util.Calendar calendar9 = builder8.build();
        java.util.Calendar.Builder builder11 = builder8.setLenient(true);
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone12.hasSameRules(timeZone13);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone12);
        java.util.TimeZone timeZone16 = calendar15.getTimeZone();
        java.util.TimeZone timeZone17 = calendar15.getTimeZone();
        boolean boolean18 = calendar15.isWeekDateSupported();
        int int20 = calendar15.getLeastMaximum(10);
        int int21 = calendar15.getWeekYear();
        java.lang.String str22 = calendar15.getCalendarType();
        calendar15.setTimeInMillis((long) (short) -1);
        java.util.TimeZone timeZone25 = calendar15.getTimeZone();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance();
        int int28 = calendar26.getActualMaximum(4);
        java.util.TimeZone timeZone30 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone30);
        java.util.TimeZone timeZone32 = fastDateFormat31.getTimeZone();
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone32);
        calendar26.setTimeZone(timeZone32);
        timeZone32.setID("21 Feb 2022 14:45:52 GMT");
        boolean boolean37 = timeZone25.hasSameRules(timeZone32);
        java.util.Calendar.Builder builder38 = builder11.setTimeZone(timeZone32);
        java.util.Calendar.Builder builder43 = builder38.setTimeOfDay(30, 7, 122, 23);
        java.util.Calendar.Builder builder47 = builder38.setTimeOfDay(12, 0, 23);
        java.util.Calendar.Builder builder49 = builder47.setLenient(false);
        java.util.Calendar calendar50 = builder47.build();
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        boolean boolean53 = timeZone51.hasSameRules(timeZone52);
        java.util.Calendar calendar54 = java.util.Calendar.getInstance(timeZone51);
        java.util.TimeZone timeZone55 = calendar54.getTimeZone();
        java.util.TimeZone timeZone56 = calendar54.getTimeZone();
        boolean boolean57 = calendar54.isWeekDateSupported();
        int int59 = calendar54.getLeastMaximum(10);
        int int60 = calendar54.getWeekYear();
        java.lang.String str61 = calendar54.getCalendarType();
        calendar54.setTimeInMillis((long) (short) -1);
        java.util.TimeZone timeZone64 = calendar54.getTimeZone();
        java.util.TimeZone timeZone65 = calendar54.getTimeZone();
        calendar54.setMinimalDaysInFirstWeek(16);
        int int69 = calendar54.getActualMaximum(0);
        java.util.TimeZone timeZone70 = calendar54.getTimeZone();
        java.util.Calendar.Builder builder71 = builder47.setTimeZone(timeZone70);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar15 and calendar54", (calendar15.compareTo(calendar54) == 0) == calendar15.equals(calendar54));
    }

    @Test
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test219");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.text.ParsePosition parsePosition6 = new java.text.ParsePosition(16);
        parsePosition6.setIndex(11);
        java.lang.Object obj9 = fastDateFormat2.parseObject("hi!", parsePosition6);
        java.text.ParsePosition parsePosition12 = new java.text.ParsePosition(16);
        java.lang.Object obj13 = fastDateFormat2.parseObject("hi!", parsePosition12);
        java.lang.Object obj14 = fastDateFormat2.clone();
        int int15 = fastDateFormat2.getMaxLengthEstimate();
        java.lang.Object obj16 = fastDateFormat2.clone();
        java.util.TimeZone timeZone19 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone19);
        java.lang.String str21 = fastDateFormat20.getPattern();
        java.text.ParsePosition parsePosition24 = new java.text.ParsePosition(16);
        parsePosition24.setIndex(11);
        java.lang.Object obj27 = fastDateFormat20.parseObject("hi!", parsePosition24);
        java.text.ParsePosition parsePosition30 = new java.text.ParsePosition(16);
        java.lang.Object obj31 = fastDateFormat20.parseObject("hi!", parsePosition30);
        java.lang.Object obj32 = fastDateFormat20.clone();
        int int33 = fastDateFormat20.getMaxLengthEstimate();
        java.text.ParsePosition parsePosition36 = new java.text.ParsePosition(16);
        parsePosition36.setIndex(11);
        int int39 = parsePosition36.getErrorIndex();
        java.lang.Object obj40 = fastDateFormat20.parseObject("6 Jan 1903 00:01:00 GMT", parsePosition36);
        parsePosition36.setIndex(31);
        parsePosition36.setErrorIndex((int) (byte) 100);
        java.lang.Object obj45 = fastDateFormat2.parseObject("2:18:21 AM UTC", parsePosition36);
        java.util.TimeZone timeZone47 = java.util.TimeZone.getTimeZone("2:46:23 PM UTC");
        java.lang.String str48 = timeZone47.getID();
        int int49 = timeZone47.getRawOffset();
        java.util.Locale.Category category50 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale51 = java.util.Locale.getDefault(category50);
        java.lang.String str52 = locale51.getScript();
        java.util.Calendar calendar53 = java.util.Calendar.getInstance(timeZone47, locale51);
        java.lang.String str54 = locale51.getDisplayVariant();
        java.util.Locale.Builder builder55 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder57 = builder55.setLanguage("");
        java.util.Locale locale58 = java.util.Locale.CHINESE;
        java.lang.String str59 = locale58.getLanguage();
        boolean boolean60 = locale58.hasExtensions();
        java.lang.String str61 = locale58.getDisplayCountry();
        java.util.Calendar calendar62 = java.util.Calendar.getInstance(locale58);
        java.util.Locale.Builder builder63 = builder57.setLocale(locale58);
        java.util.Locale.Builder builder65 = builder57.removeUnicodeLocaleAttribute("eng");
        java.util.Locale.Builder builder66 = builder57.clearExtensions();
        java.util.Locale.Builder builder67 = builder66.clear();
        java.util.Locale locale68 = java.util.Locale.CHINA;
        java.util.Locale.Builder builder69 = builder66.setLocale(locale68);
        java.lang.String str70 = locale68.getDisplayVariant();
        java.lang.String str71 = locale51.getDisplayLanguage(locale68);
        boolean boolean72 = fastDateFormat2.equals((java.lang.Object) locale68);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar53 and calendar62", (calendar53.compareTo(calendar62) == 0) == calendar53.equals(calendar62));
    }

    @Test
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test220");
        java.text.AttributedCharacterIterator.Attribute attribute0 = java.text.AttributedCharacterIterator.Attribute.INPUT_METHOD_SEGMENT;
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone2);
        java.util.TimeZone timeZone4 = fastDateFormat3.getTimeZone();
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone4);
        java.util.Locale locale6 = java.util.Locale.US;
        java.lang.String str8 = locale6.getExtension('a');
        java.util.Set<java.lang.Character> charSet9 = locale6.getExtensionKeys();
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone4, locale6);
        java.util.TimeZone timeZone11 = calendar10.getTimeZone();
        boolean boolean12 = attribute0.equals((java.lang.Object) calendar10);
        java.lang.String str13 = attribute0.toString();
        java.lang.String str14 = attribute0.toString();
        java.util.Date date20 = new java.util.Date((int) (byte) 10, (int) 'x', 49, 122, (-1));
        java.util.Date date21 = new java.util.Date();
        java.lang.String str22 = date21.toGMTString();
        int int23 = date21.getYear();
        int int24 = date21.getMonth();
        boolean boolean25 = date20.before(date21);
        boolean boolean26 = attribute0.equals((java.lang.Object) date21);
        java.util.TimeZone timeZone28 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat29 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone28);
        java.lang.String str30 = fastDateFormat29.getPattern();
        java.text.ParsePosition parsePosition33 = new java.text.ParsePosition(16);
        int int34 = parsePosition33.getErrorIndex();
        java.lang.String str35 = parsePosition33.toString();
        java.lang.Object obj36 = null;
        boolean boolean37 = parsePosition33.equals(obj36);
        java.lang.Object obj38 = fastDateFormat29.parseObject("Coordinated Universal Time", parsePosition33);
        java.util.Locale locale39 = fastDateFormat29.getLocale();
        java.util.TimeZone timeZone40 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        boolean boolean42 = timeZone40.hasSameRules(timeZone41);
        java.util.Calendar calendar43 = java.util.Calendar.getInstance(timeZone40);
        java.util.TimeZone timeZone44 = calendar43.getTimeZone();
        int int45 = calendar43.getFirstDayOfWeek();
        int int46 = calendar43.getFirstDayOfWeek();
        calendar43.setTimeInMillis((long) 100);
        java.lang.StringBuffer stringBuffer49 = null;
        java.lang.StringBuffer stringBuffer50 = fastDateFormat29.format(calendar43, stringBuffer49);
        int int51 = fastDateFormat29.getMaxLengthEstimate();
        int int52 = fastDateFormat29.getMaxLengthEstimate();
        boolean boolean53 = attribute0.equals((java.lang.Object) fastDateFormat29);
        java.util.Calendar.Builder builder54 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone55 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone56 = java.util.TimeZone.getDefault();
        boolean boolean57 = timeZone55.hasSameRules(timeZone56);
        java.util.Calendar.Builder builder58 = builder54.setTimeZone(timeZone55);
        java.util.Calendar.Builder builder60 = builder54.setLenient(true);
        int[] intArray61 = new int[] {};
        java.util.Calendar.Builder builder62 = builder60.setFields(intArray61);
        java.util.Calendar calendar63 = builder62.build();
        java.time.Instant instant64 = calendar63.toInstant();
        int int66 = calendar63.getGreatestMinimum(8);
        boolean boolean67 = attribute0.equals((java.lang.Object) calendar63);
        java.lang.Object obj68 = null;
        boolean boolean69 = attribute0.equals(obj68);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar10", (calendar5.compareTo(calendar10) == 0) == calendar5.equals(calendar10));
    }

    @Test
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test221");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        java.util.TimeZone timeZone4 = calendar3.getTimeZone();
        timeZone4.setID("21 Feb 2022 14:45:49 GMT");
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone4, locale7);
        java.util.Set<java.lang.String> strSet9 = locale7.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        boolean boolean15 = locale14.hasExtensions();
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.lang.String str18 = locale17.getLanguage();
        java.util.Locale[] localeArray19 = new java.util.Locale[] { locale13, locale14, locale16, locale17 };
        java.util.ArrayList<java.util.Locale> localeList20 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList20, localeArray19);
        java.util.Locale.FilteringMode filteringMode22 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList23 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList20, filteringMode22);
        java.util.Locale.LanguageRange[] languageRangeArray24 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList25 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList25, languageRangeArray24);
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        boolean boolean29 = locale28.hasExtensions();
        java.util.Locale locale30 = java.util.Locale.FRANCE;
        java.util.Locale locale31 = java.util.Locale.CHINESE;
        java.lang.String str32 = locale31.getLanguage();
        java.util.Locale[] localeArray33 = new java.util.Locale[] { locale27, locale28, locale30, locale31 };
        java.util.ArrayList<java.util.Locale> localeList34 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList34, localeArray33);
        java.util.Locale.FilteringMode filteringMode36 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList37 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList25, (java.util.Collection<java.util.Locale>) localeList34, filteringMode36);
        int int38 = localeList23.indexOf((java.lang.Object) filteringMode36);
        localeList23.clear();
        java.util.Locale locale40 = java.util.Locale.CHINESE;
        java.lang.String str41 = locale40.getLanguage();
        boolean boolean42 = locale40.hasExtensions();
        java.lang.String str43 = locale40.getDisplayCountry();
        java.lang.String str44 = locale40.getDisplayLanguage();
        java.lang.String str45 = locale40.getLanguage();
        java.lang.String str46 = locale40.getDisplayVariant();
        boolean boolean47 = localeList23.add(locale40);
        java.util.TimeZone timeZone49 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat50 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone49);
        java.lang.String str51 = fastDateFormat50.getPattern();
        java.text.ParsePosition parsePosition54 = new java.text.ParsePosition(16);
        int int55 = parsePosition54.getErrorIndex();
        java.lang.String str56 = parsePosition54.toString();
        java.lang.Object obj57 = null;
        boolean boolean58 = parsePosition54.equals(obj57);
        java.lang.Object obj59 = fastDateFormat50.parseObject("Coordinated Universal Time", parsePosition54);
        java.util.Locale locale60 = fastDateFormat50.getLocale();
        java.lang.String str61 = locale40.getDisplayCountry(locale60);
        java.util.Set<java.lang.String> strSet62 = locale40.getUnicodeLocaleKeys();
        java.lang.String str63 = locale7.getDisplayName(locale40);
        java.util.Calendar calendar64 = java.util.Calendar.getInstance(locale40);
        java.lang.String str65 = locale40.getDisplayScript();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar64", (calendar3.compareTo(calendar64) == 0) == calendar3.equals(calendar64));
    }

    @Test
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test222");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        boolean boolean4 = timeZone0.hasSameRules(timeZone1);
        int int5 = timeZone1.getRawOffset();
        java.util.Locale locale6 = java.util.Locale.CHINESE;
        java.lang.String str7 = locale6.getLanguage();
        boolean boolean8 = locale6.hasExtensions();
        java.lang.String str9 = locale6.getDisplayCountry();
        java.lang.String str10 = locale6.getDisplayLanguage();
        java.lang.String str11 = locale6.getLanguage();
        java.lang.String str12 = locale6.getVariant();
        java.util.Locale locale13 = locale6.stripExtensions();
        java.lang.String str14 = locale13.getDisplayLanguage();
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        java.util.Locale locale19 = fastDateFormat17.getLocale();
        java.lang.String str20 = locale13.getDisplayName(locale19);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone1, locale13);
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone22.hasSameRules(timeZone23);
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone22);
        java.util.TimeZone timeZone26 = calendar25.getTimeZone();
        java.util.TimeZone timeZone27 = calendar25.getTimeZone();
        boolean boolean28 = calendar25.isWeekDateSupported();
        int int30 = calendar25.getLeastMaximum(10);
        int int31 = calendar25.getWeekYear();
        java.lang.String str32 = calendar25.getCalendarType();
        calendar25.setTimeInMillis((long) (short) -1);
        java.util.TimeZone timeZone35 = calendar25.getTimeZone();
        java.util.TimeZone timeZone36 = calendar25.getTimeZone();
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(timeZone36);
        boolean boolean38 = timeZone1.hasSameRules(timeZone36);
        java.util.TimeZone timeZone40 = java.util.TimeZone.getTimeZone("java.util.GregorianCalendar[time=1645454754087,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=45,SECOND=54,MILLISECOND=87,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale.Category category41 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale42 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(category41, locale42);
        java.util.Locale locale44 = java.util.Locale.getDefault(category41);
        java.util.Calendar calendar45 = java.util.Calendar.getInstance(timeZone40, locale44);
        java.util.TimeZone timeZone47 = java.util.TimeZone.getTimeZone("java.text.AttributedCharacterIterator$Attribute(reading)");
        int int49 = timeZone47.getOffset(1645454850495L);
        boolean boolean50 = timeZone40.hasSameRules(timeZone47);
        boolean boolean51 = timeZone1.hasSameRules(timeZone40);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar21 and calendar45", (calendar21.compareTo(calendar45) == 0) == calendar21.equals(calendar45));
    }

    @Test
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test223");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.util.TimeZone timeZone6 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat7 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone6);
        java.lang.String str8 = fastDateFormat7.getPattern();
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition(16);
        parsePosition11.setIndex(11);
        java.lang.Object obj14 = fastDateFormat7.parseObject("hi!", parsePosition11);
        java.text.ParsePosition parsePosition17 = new java.text.ParsePosition(16);
        java.lang.Object obj18 = fastDateFormat7.parseObject("hi!", parsePosition17);
        java.lang.Object obj19 = fastDateFormat2.parseObject("hi!", parsePosition17);
        java.lang.String str20 = fastDateFormat2.getPattern();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        boolean boolean23 = timeZone21.hasSameRules(timeZone22);
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone21);
        java.util.TimeZone timeZone25 = calendar24.getTimeZone();
        java.util.TimeZone timeZone26 = calendar24.getTimeZone();
        boolean boolean27 = calendar24.isWeekDateSupported();
        int int29 = calendar24.getLeastMaximum(10);
        java.util.Date date30 = new java.util.Date();
        int int31 = date30.getSeconds();
        long long32 = date30.getTime();
        calendar24.setTime(date30);
        java.lang.String str34 = fastDateFormat2.format(date30);
        java.util.Locale locale35 = fastDateFormat2.getLocale();
        java.util.Date date36 = new java.util.Date();
        int int37 = date36.getDay();
        int int38 = date36.getHours();
        date36.setMinutes(10);
        java.lang.String str41 = fastDateFormat2.format(date36);
        int int42 = fastDateFormat2.getMaxLengthEstimate();
        java.util.Locale locale43 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(locale43);
        long long45 = calendar44.getTimeInMillis();
        int int47 = calendar44.getLeastMaximum(8);
        java.util.Date date48 = calendar44.getTime();
        calendar44.roll(5, 0);
        calendar44.setMinimalDaysInFirstWeek(48);
        calendar44.setLenient(false);
        java.lang.StringBuffer stringBuffer56 = null;
        java.lang.StringBuffer stringBuffer57 = fastDateFormat2.format(calendar44, stringBuffer56);
        java.util.Date date58 = new java.util.Date();
        java.lang.String str59 = date58.toGMTString();
        int int60 = date58.getYear();
        date58.setDate(0);
        int int63 = date58.getDay();
        date58.setYear((int) (byte) 1);
        date58.setYear(20);
        java.util.Date date68 = new java.util.Date();
        int int69 = date68.getTimezoneOffset();
        long long70 = date68.getTime();
        java.time.Instant instant71 = date68.toInstant();
        java.util.Date date72 = java.util.Date.from(instant71);
        java.time.Instant instant73 = date72.toInstant();
        java.util.Date date74 = java.util.Date.from(instant73);
        java.lang.String str75 = date74.toLocaleString();
        java.util.Date date76 = new java.util.Date();
        int int77 = date76.getTimezoneOffset();
        long long78 = date76.getTime();
        java.time.Instant instant79 = date76.toInstant();
        java.util.Date date80 = java.util.Date.from(instant79);
        java.time.Instant instant81 = date80.toInstant();
        date80.setSeconds(52);
        boolean boolean84 = date74.after(date80);
        int int85 = date80.getDay();
        boolean boolean86 = date58.before(date80);
        date80.setSeconds(27);
        java.lang.String str89 = fastDateFormat2.format(date80);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar24 and calendar44", (calendar24.compareTo(calendar44) == 0) == calendar24.equals(calendar44));
    }

    @Test
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test224");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.CHINESE;
        java.lang.String str4 = locale3.getLanguage();
        java.lang.String str5 = locale3.getDisplayScript();
        java.lang.String str6 = locale3.getDisplayScript();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone1, locale3);
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone9.hasSameRules(timeZone10);
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone9);
        java.util.Locale.Category category13 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale14 = java.util.Locale.getDefault(category13);
        java.lang.String str15 = locale14.getISO3Language();
        java.lang.String str16 = locale14.getDisplayLanguage();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(3, timeZone9, locale14);
        java.util.TimeZone.setDefault(timeZone9);
        calendar7.setTimeZone(timeZone9);
        int int20 = timeZone9.getRawOffset();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        boolean boolean25 = timeZone23.hasSameRules(timeZone24);
        boolean boolean26 = timeZone22.hasSameRules(timeZone23);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone23);
        boolean boolean28 = timeZone23.observesDaylightTime();
        boolean boolean29 = timeZone9.hasSameRules(timeZone23);
        int int31 = timeZone23.getOffset((-123076654321985000L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar7 and calendar12", (calendar7.compareTo(calendar12) == 0) == calendar7.equals(calendar12));
    }

    @Test
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test225");
        java.text.Format.Field field0 = null;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition(field0);
        int int2 = fieldPosition1.getBeginIndex();
        boolean boolean4 = fieldPosition1.equals((java.lang.Object) 52);
        int int5 = fieldPosition1.getEndIndex();
        fieldPosition1.setEndIndex((int) (byte) 1);
        java.lang.String str8 = fieldPosition1.toString();
        boolean boolean10 = fieldPosition1.equals((java.lang.Object) "java.text.ParsePosition[index=51,errorIndex=-1]");
        java.util.Locale.LanguageRange[] languageRangeArray11 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList12 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12, languageRangeArray11);
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        boolean boolean19 = locale18.hasExtensions();
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        java.util.Locale locale21 = java.util.Locale.CHINESE;
        java.lang.String str22 = locale21.getLanguage();
        java.util.Locale[] localeArray23 = new java.util.Locale[] { locale17, locale18, locale20, locale21 };
        java.util.ArrayList<java.util.Locale> localeList24 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList24, localeArray23);
        java.util.Locale.FilteringMode filteringMode26 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList27 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.util.Locale>) localeList24, filteringMode26);
        int int29 = localeList27.lastIndexOf((java.lang.Object) 11);
        java.util.Locale locale30 = java.util.Locale.CHINESE;
        java.lang.String str31 = locale30.getLanguage();
        boolean boolean32 = locale30.hasExtensions();
        java.lang.String str33 = locale30.getDisplayCountry();
        java.util.Set<java.lang.String> strSet34 = locale30.getUnicodeLocaleKeys();
        boolean boolean35 = localeList27.containsAll((java.util.Collection<java.lang.String>) strSet34);
        java.util.Locale.FilteringMode filteringMode36 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList37 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.util.Locale>) localeList27, filteringMode36);
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone39 = java.util.TimeZone.getDefault();
        boolean boolean40 = timeZone38.hasSameRules(timeZone39);
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(timeZone38);
        java.util.Locale locale42 = java.util.Locale.CHINA;
        java.util.Calendar calendar43 = java.util.Calendar.getInstance(timeZone38, locale42);
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        boolean boolean46 = timeZone44.hasSameRules(timeZone45);
        boolean boolean47 = timeZone45.observesDaylightTime();
        boolean boolean48 = timeZone38.hasSameRules(timeZone45);
        boolean boolean49 = localeList27.remove((java.lang.Object) timeZone45);
        java.util.Locale locale52 = java.util.Locale.forLanguageTag("Fri Jan 21 14:45:48 UTC 2022");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat53 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(2, locale52);
        boolean boolean54 = localeList27.equals((java.lang.Object) locale52);
        java.lang.Object obj55 = null;
        boolean boolean56 = localeList27.remove(obj55);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList58 = java.util.Locale.LanguageRange.parse("zh");
        java.util.Set<java.lang.String> strSet59 = java.util.Calendar.getAvailableCalendarTypes();
        java.lang.String str60 = java.util.Locale.lookupTag(languageRangeList58, (java.util.Collection<java.lang.String>) strSet59);
        java.util.Locale locale61 = java.util.Locale.CHINESE;
        java.lang.String str62 = locale61.getLanguage();
        java.lang.String str64 = locale61.getExtension('a');
        java.util.Set<java.lang.String> strSet65 = locale61.getUnicodeLocaleAttributes();
        java.util.Locale.FilteringMode filteringMode66 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList67 = java.util.Locale.filterTags(languageRangeList58, (java.util.Collection<java.lang.String>) strSet65, filteringMode66);
        java.util.stream.Stream<java.lang.String> strStream68 = strSet65.stream();
        boolean boolean69 = localeList27.containsAll((java.util.Collection<java.lang.String>) strSet65);
        boolean boolean70 = localeList27.isEmpty();
        boolean boolean71 = fieldPosition1.equals((java.lang.Object) localeList27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar41 and calendar43", (calendar41.compareTo(calendar43) == 0) == calendar41.equals(calendar43));
    }
}


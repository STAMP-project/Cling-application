import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

    public static boolean debug = false;

    @Test
    public void test01501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01501");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray2 = new org.apache.commons.math.util.ResizableDoubleArray((int) '4', (float) 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The expansion factor must be a number greater than 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01502");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        descriptiveStatistics0.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics6.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        descriptiveStatistics6.setKurtosisImpl(univariateStatistic9);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        descriptiveStatistics11.setKurtosisImpl(univariateStatistic14);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics11.getKurtosisImpl();
        descriptiveStatistics6.setMaxImpl(univariateStatistic16);
        double double18 = descriptiveStatistics6.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics6.getMinImpl();
        descriptiveStatistics0.setMinImpl(univariateStatistic19);
        double double21 = descriptiveStatistics0.getGeometricMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) 1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getKurtosisImpl();
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic24);
        double double26 = descriptiveStatistics0.getStandardDeviation();
        descriptiveStatistics0.addValue((double) 52.0f);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
    }

    @Test
    public void test01503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01503");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getMinImpl();
        double double7 = descriptiveStatistics0.getMax();
        descriptiveStatistics0.addValue((double) (short) 1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics0.getMeanImpl();
        double double11 = descriptiveStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str13 = descriptiveStatistics12.toString();
        double double14 = descriptiveStatistics12.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics17.getSumsqImpl();
        descriptiveStatistics15.setKurtosisImpl(univariateStatistic18);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics15.getKurtosisImpl();
        double double21 = descriptiveStatistics12.apply(univariateStatistic20);
        double double22 = descriptiveStatistics12.getSumsq();
        double double23 = descriptiveStatistics12.getMean();
        double double24 = descriptiveStatistics12.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str26 = descriptiveStatistics25.toString();
        descriptiveStatistics25.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics25.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics25.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics30.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics30.getKurtosisImpl();
        long long33 = descriptiveStatistics30.getN();
        double double34 = descriptiveStatistics30.getMax();
        double double35 = descriptiveStatistics30.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double37 = descriptiveStatistics36.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics36.getMinImpl();
        descriptiveStatistics30.setSumImpl(univariateStatistic38);
        descriptiveStatistics25.setSumImpl(univariateStatistic38);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics41.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics43.getSumsqImpl();
        descriptiveStatistics41.setKurtosisImpl(univariateStatistic44);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics46 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics46.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics48 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics48.getSumsqImpl();
        descriptiveStatistics46.setKurtosisImpl(univariateStatistic49);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics46.getKurtosisImpl();
        descriptiveStatistics41.setMaxImpl(univariateStatistic51);
        double double53 = descriptiveStatistics25.apply(univariateStatistic51);
        double double54 = descriptiveStatistics12.apply(univariateStatistic51);
        double double55 = descriptiveStatistics12.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic56 = descriptiveStatistics12.getPercentileImpl();
        double double57 = descriptiveStatistics0.apply(univariateStatistic56);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics58 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic59 = descriptiveStatistics58.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics60 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic61 = descriptiveStatistics60.getSumsqImpl();
        descriptiveStatistics58.setKurtosisImpl(univariateStatistic61);
        descriptiveStatistics58.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic64 = descriptiveStatistics58.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic65 = descriptiveStatistics58.getSumsqImpl();
        double double66 = descriptiveStatistics58.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic67 = descriptiveStatistics58.getSumsqImpl();
        double[] doubleArray68 = descriptiveStatistics58.getSortedValues();
        // The following exception was thrown during execution in test generation
        try {
            double double71 = univariateStatistic56.evaluate(doubleArray68, (int) (byte) 100, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str13, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str26, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(descriptiveStatistics30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertNotNull(descriptiveStatistics41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(descriptiveStatistics43);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(descriptiveStatistics46);
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertNotNull(descriptiveStatistics48);
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(univariateStatistic56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics58);
        org.junit.Assert.assertNotNull(univariateStatistic59);
        org.junit.Assert.assertNotNull(descriptiveStatistics60);
        org.junit.Assert.assertNotNull(univariateStatistic61);
        org.junit.Assert.assertNotNull(univariateStatistic64);
        org.junit.Assert.assertNotNull(univariateStatistic65);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(univariateStatistic67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
    }

    @Test
    public void test01504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01504");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        double[] doubleArray3 = descriptiveStatistics0.getValues();
        double double4 = descriptiveStatistics0.getVariance();
        double double5 = descriptiveStatistics0.getMax();
        double double6 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str8 = descriptiveStatistics7.toString();
        double double9 = descriptiveStatistics7.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        descriptiveStatistics10.setKurtosisImpl(univariateStatistic13);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics10.getKurtosisImpl();
        double double16 = descriptiveStatistics7.apply(univariateStatistic15);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str18 = descriptiveStatistics17.toString();
        descriptiveStatistics17.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics17.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics17.getSumsqImpl();
        descriptiveStatistics7.setMeanImpl(univariateStatistic21);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics7.getSkewnessImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic23);
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray25 = new org.apache.commons.math.util.ResizableDoubleArray();
        double[] doubleArray26 = resizableDoubleArray25.getElements();
        double[] doubleArray27 = resizableDoubleArray25.getElements();
        resizableDoubleArray25.clear();
        resizableDoubleArray25.addElement((double) 32);
        int int31 = resizableDoubleArray25.getExpansionMode();
        int int32 = resizableDoubleArray25.getExpansionMode();
        double[] doubleArray33 = resizableDoubleArray25.getElements();
        // The following exception was thrown during execution in test generation
        try {
            double double36 = univariateStatistic23.evaluate(doubleArray33, (int) (short) -1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str8, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str18, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[32.0]");
    }

    @Test
    public void test01505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01505");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics6.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics6.getKurtosisImpl();
        long long9 = descriptiveStatistics6.getN();
        double double10 = descriptiveStatistics6.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        descriptiveStatistics11.setKurtosisImpl(univariateStatistic14);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics16.getKurtosisImpl();
        descriptiveStatistics11.setMaxImpl(univariateStatistic21);
        descriptiveStatistics6.setSumImpl(univariateStatistic21);
        descriptiveStatistics0.setSumsqImpl(univariateStatistic21);
        double double26 = descriptiveStatistics0.getPercentile((double) (short) 10);
        double double27 = descriptiveStatistics0.getSum();
        double[] doubleArray28 = descriptiveStatistics0.getValues();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
    }

    @Test
    public void test01506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01506");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        double double5 = resizableDoubleArray0.addElementRolling((double) 0.0f);
        resizableDoubleArray0.clear();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.discardFrontElements(103);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot discard more elements than arecontained in this array.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    }

    @Test
    public void test01507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01507");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.setElement(0, (double) 0.0f);
        resizableDoubleArray0.clear();
        double[] doubleArray6 = resizableDoubleArray0.getElements();
        double double8 = resizableDoubleArray0.addElementRolling(5.4999999999999964d);
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setExpansionFactor(10.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    }

    @Test
    public void test01508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01508");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray2 = new org.apache.commons.math.util.ResizableDoubleArray((int) (short) -1, (float) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The initial capacity supplied: -1must be a positive integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01509");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray4 = new org.apache.commons.math.util.ResizableDoubleArray(91, (float) (short) 0, (float) 11, 11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The expansion factor must be a number greater than 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01510");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        double[] doubleArray3 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.clear();
        double double6 = resizableDoubleArray0.addElementRolling((double) (short) 100);
        resizableDoubleArray0.clear();
        resizableDoubleArray0.clear();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    }

    @Test
    public void test01511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01511");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics6.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics6.getKurtosisImpl();
        long long9 = descriptiveStatistics6.getN();
        double double10 = descriptiveStatistics6.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        descriptiveStatistics11.setKurtosisImpl(univariateStatistic14);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics16.getKurtosisImpl();
        descriptiveStatistics11.setMaxImpl(univariateStatistic21);
        descriptiveStatistics6.setSumImpl(univariateStatistic21);
        descriptiveStatistics0.setSumsqImpl(univariateStatistic21);
        double double26 = descriptiveStatistics0.getPercentile((double) (short) 10);
        double double27 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str29 = descriptiveStatistics28.toString();
        descriptiveStatistics28.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics28.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics28.getSumsqImpl();
        double double34 = descriptiveStatistics28.getPercentile(Double.NaN);
        double double35 = descriptiveStatistics28.getKurtosis();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics37 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics37.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics39 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics39.getSumsqImpl();
        descriptiveStatistics37.setKurtosisImpl(univariateStatistic40);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics37.getKurtosisImpl();
        double[] doubleArray46 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double47 = univariateStatistic42.evaluate(doubleArray46);
        descriptiveStatistics36.setMaxImpl(univariateStatistic42);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics49 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic50 = descriptiveStatistics49.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics49.getKurtosisImpl();
        long long52 = descriptiveStatistics49.getN();
        double[] doubleArray53 = descriptiveStatistics49.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic54 = descriptiveStatistics49.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics49.getMeanImpl();
        descriptiveStatistics36.setGeometricMeanImpl(univariateStatistic55);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics36.getSumsqImpl();
        double double58 = descriptiveStatistics28.apply(univariateStatistic57);
        descriptiveStatistics0.setMeanImpl(univariateStatistic57);
        // The following exception was thrown during execution in test generation
        try {
            double double61 = descriptiveStatistics0.getElement(2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 2 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str29, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertNotNull(descriptiveStatistics37);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertNotNull(descriptiveStatistics39);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 2.0d + "'", double47 == 2.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics49);
        org.junit.Assert.assertNotNull(univariateStatistic50);
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic54);
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
    }

    @Test
    public void test01512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01512");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        double double5 = resizableDoubleArray0.addElementRolling((double) 0.0f);
        resizableDoubleArray0.clear();
        resizableDoubleArray0.setNumElements((int) '4');
        double double10 = resizableDoubleArray0.addElementRolling((double) (byte) -1);
        double double12 = resizableDoubleArray0.getElement((int) (short) 0);
        resizableDoubleArray0.clear();
        int int14 = resizableDoubleArray0.getNumElements();
        // The following exception was thrown during execution in test generation
        try {
            double double16 = resizableDoubleArray0.getElement(91);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 91 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test01513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01513");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        double[] doubleArray3 = resizableDoubleArray0.getValues();
        int int4 = resizableDoubleArray0.start();
        int int5 = resizableDoubleArray0.getExpansionMode();
        double double7 = resizableDoubleArray0.addElementRolling((-1.0d));
        float float8 = resizableDoubleArray0.getContractionCriteria();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setExpansionFactor((float) 100L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 2.5f + "'", float8 == 2.5f);
    }

    @Test
    public void test01514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01514");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray2 = new org.apache.commons.math.util.ResizableDoubleArray((int) 'a', (float) (short) 100);
        resizableDoubleArray2.clear();
        double double5 = resizableDoubleArray2.addElementRolling((double) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray2.setExpansionMode((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal expansionMode setting.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    }

    @Test
    public void test01515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01515");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        java.lang.String str2 = descriptiveStatistics0.toString();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics3.getKurtosisImpl();
        long long6 = descriptiveStatistics3.getN();
        descriptiveStatistics3.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics3.getSkewnessImpl();
        descriptiveStatistics0.setSumsqImpl(univariateStatistic9);
        double double11 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics0.getSkewnessImpl();
        double double13 = descriptiveStatistics0.getMean();
        long long14 = descriptiveStatistics0.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics0.getPercentileImpl();
        // The following exception was thrown during execution in test generation
        try {
            double double17 = descriptiveStatistics0.getElement((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Elements cannot be retrieved from a negative array index");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str2, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic15);
    }

    @Test
    public void test01516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01516");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray4 = new org.apache.commons.math.util.ResizableDoubleArray(101, 0.0f, 32.0f, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The expansion factor must be a number greater than 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01517");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics3.getKurtosisImpl();
        double double9 = descriptiveStatistics0.apply(univariateStatistic8);
        double double10 = descriptiveStatistics0.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics0.getSumImpl();
        double double12 = descriptiveStatistics0.getMin();
        double[] doubleArray13 = descriptiveStatistics0.getSortedValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        descriptiveStatistics14.setKurtosisImpl(univariateStatistic17);
        descriptiveStatistics14.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics14.getPercentileImpl();
        double double21 = descriptiveStatistics14.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics22.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics22.getKurtosisImpl();
        double[] doubleArray25 = descriptiveStatistics22.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics22.getVarianceImpl();
        double double27 = descriptiveStatistics14.apply(univariateStatistic26);
        descriptiveStatistics0.setSumsqImpl(univariateStatistic26);
        long long29 = descriptiveStatistics0.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics0.getMaxImpl();
        long long31 = descriptiveStatistics0.getN();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(descriptiveStatistics22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
    }

    @Test
    public void test01518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01518");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double double4 = descriptiveStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        descriptiveStatistics10.setKurtosisImpl(univariateStatistic13);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics10.getKurtosisImpl();
        descriptiveStatistics5.setMaxImpl(univariateStatistic15);
        descriptiveStatistics0.setSumImpl(univariateStatistic15);
        double double18 = descriptiveStatistics0.getVariance();
        double double19 = descriptiveStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics20.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics20.getKurtosisImpl();
        long long23 = descriptiveStatistics20.getN();
        descriptiveStatistics20.addValue((double) 0);
        int int26 = descriptiveStatistics20.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics20.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics20.getSumImpl();
        double double29 = descriptiveStatistics20.getMean();
        double double30 = descriptiveStatistics20.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics31.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics31.getKurtosisImpl();
        long long34 = descriptiveStatistics31.getN();
        double[] doubleArray35 = descriptiveStatistics31.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics31.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics31.getMinImpl();
        double double38 = descriptiveStatistics31.getMax();
        descriptiveStatistics31.addValue((double) (short) 1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics31.getMeanImpl();
        double double42 = descriptiveStatistics31.getMin();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str44 = descriptiveStatistics43.toString();
        double double45 = descriptiveStatistics43.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics46 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics46.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics48 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics48.getSumsqImpl();
        descriptiveStatistics46.setKurtosisImpl(univariateStatistic49);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics46.getKurtosisImpl();
        double double52 = descriptiveStatistics43.apply(univariateStatistic51);
        double double53 = descriptiveStatistics43.getSumsq();
        double double54 = descriptiveStatistics43.getMean();
        double double55 = descriptiveStatistics43.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics56 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str57 = descriptiveStatistics56.toString();
        descriptiveStatistics56.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic59 = descriptiveStatistics56.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic60 = descriptiveStatistics56.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics61 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic62 = descriptiveStatistics61.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic63 = descriptiveStatistics61.getKurtosisImpl();
        long long64 = descriptiveStatistics61.getN();
        double double65 = descriptiveStatistics61.getMax();
        double double66 = descriptiveStatistics61.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics67 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double68 = descriptiveStatistics67.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic69 = descriptiveStatistics67.getMinImpl();
        descriptiveStatistics61.setSumImpl(univariateStatistic69);
        descriptiveStatistics56.setSumImpl(univariateStatistic69);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics72 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic73 = descriptiveStatistics72.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics74 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic75 = descriptiveStatistics74.getSumsqImpl();
        descriptiveStatistics72.setKurtosisImpl(univariateStatistic75);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics77 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic78 = descriptiveStatistics77.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics79 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic80 = descriptiveStatistics79.getSumsqImpl();
        descriptiveStatistics77.setKurtosisImpl(univariateStatistic80);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic82 = descriptiveStatistics77.getKurtosisImpl();
        descriptiveStatistics72.setMaxImpl(univariateStatistic82);
        double double84 = descriptiveStatistics56.apply(univariateStatistic82);
        double double85 = descriptiveStatistics43.apply(univariateStatistic82);
        double double86 = descriptiveStatistics43.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic87 = descriptiveStatistics43.getPercentileImpl();
        double double88 = descriptiveStatistics31.apply(univariateStatistic87);
        descriptiveStatistics20.setGeometricMeanImpl(univariateStatistic87);
        double double90 = descriptiveStatistics0.apply(univariateStatistic87);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(descriptiveStatistics20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str44, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(descriptiveStatistics46);
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertNotNull(descriptiveStatistics48);
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(descriptiveStatistics56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str57, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic59);
        org.junit.Assert.assertNotNull(univariateStatistic60);
        org.junit.Assert.assertNotNull(descriptiveStatistics61);
        org.junit.Assert.assertNotNull(univariateStatistic62);
        org.junit.Assert.assertNotNull(univariateStatistic63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(descriptiveStatistics67);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertNotNull(univariateStatistic69);
        org.junit.Assert.assertNotNull(descriptiveStatistics72);
        org.junit.Assert.assertNotNull(univariateStatistic73);
        org.junit.Assert.assertNotNull(descriptiveStatistics74);
        org.junit.Assert.assertNotNull(univariateStatistic75);
        org.junit.Assert.assertNotNull(descriptiveStatistics77);
        org.junit.Assert.assertNotNull(univariateStatistic78);
        org.junit.Assert.assertNotNull(descriptiveStatistics79);
        org.junit.Assert.assertNotNull(univariateStatistic80);
        org.junit.Assert.assertNotNull(univariateStatistic82);
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertNotNull(univariateStatistic87);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 1.0d + "'", double88 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double90));
    }

    @Test
    public void test01519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01519");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) 10);
        double double2 = descriptiveStatistics1.getMin();
        descriptiveStatistics1.addValue((double) (byte) 0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 1);
        double double7 = descriptiveStatistics6.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        descriptiveStatistics8.setWindowSize((int) (byte) -1);
        long long11 = descriptiveStatistics8.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics8.getKurtosisImpl();
        descriptiveStatistics6.setKurtosisImpl(univariateStatistic12);
        double double14 = descriptiveStatistics6.getSkewness();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics6.getVarianceImpl();
        descriptiveStatistics1.setSumsqImpl(univariateStatistic15);
        double[] doubleArray17 = descriptiveStatistics1.getValues();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
    }

    @Test
    public void test01520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01520");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics3.getKurtosisImpl();
        double double9 = descriptiveStatistics0.apply(univariateStatistic8);
        double double10 = descriptiveStatistics0.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics0.getSumImpl();
        double double12 = descriptiveStatistics0.getMin();
        double[] doubleArray13 = descriptiveStatistics0.getSortedValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics14.getKurtosisImpl();
        long long17 = descriptiveStatistics14.getN();
        double[] doubleArray18 = descriptiveStatistics14.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics14.getMinImpl();
        descriptiveStatistics0.setSumsqImpl(univariateStatistic19);
        descriptiveStatistics0.addValue((double) 32);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics24 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double25 = descriptiveStatistics24.getStandardDeviation();
        double double26 = descriptiveStatistics24.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics24.getSumImpl();
        double double28 = descriptiveStatistics24.getVariance();
        double double29 = descriptiveStatistics24.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics24.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics24.getMeanImpl();
        descriptiveStatistics0.setSumsqImpl(univariateStatistic31);
        descriptiveStatistics0.addValue((double) 1L);
        // The following exception was thrown during execution in test generation
        try {
            descriptiveStatistics0.setWindowSize(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: window size must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
    }

    @Test
    public void test01521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01521");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        double double5 = resizableDoubleArray0.addElementRolling((double) 0.0f);
        resizableDoubleArray0.clear();
        resizableDoubleArray0.setNumElements((int) '4');
        double double10 = resizableDoubleArray0.addElementRolling((double) (byte) -1);
        double double12 = resizableDoubleArray0.getElement((int) (short) 0);
        resizableDoubleArray0.clear();
        resizableDoubleArray0.addElement(0.0d);
        java.lang.Class<?> wildcardClass16 = resizableDoubleArray0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test01522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01522");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray1 = new org.apache.commons.math.util.ResizableDoubleArray(11);
        double[] doubleArray2 = resizableDoubleArray1.getElements();
        resizableDoubleArray1.clear();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
    }

    @Test
    public void test01523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01523");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics1.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        descriptiveStatistics1.setKurtosisImpl(univariateStatistic4);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics1.getKurtosisImpl();
        double[] doubleArray10 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double11 = univariateStatistic6.evaluate(doubleArray10);
        descriptiveStatistics0.setMaxImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics13.getKurtosisImpl();
        long long16 = descriptiveStatistics13.getN();
        double double17 = descriptiveStatistics13.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics20.getSumsqImpl();
        descriptiveStatistics18.setKurtosisImpl(univariateStatistic21);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics25.getSumsqImpl();
        descriptiveStatistics23.setKurtosisImpl(univariateStatistic26);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics23.getKurtosisImpl();
        descriptiveStatistics18.setMaxImpl(univariateStatistic28);
        descriptiveStatistics13.setSumImpl(univariateStatistic28);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics32 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics32.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics34 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics34.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics36.getSumsqImpl();
        descriptiveStatistics34.setKurtosisImpl(univariateStatistic37);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics39 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics39.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics41.getSumsqImpl();
        descriptiveStatistics39.setKurtosisImpl(univariateStatistic42);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics39.getKurtosisImpl();
        descriptiveStatistics34.setMaxImpl(univariateStatistic44);
        double double46 = descriptiveStatistics34.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics34.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics34.getVarianceImpl();
        descriptiveStatistics32.setMinImpl(univariateStatistic48);
        descriptiveStatistics13.setMeanImpl(univariateStatistic48);
        descriptiveStatistics0.setSumImpl(univariateStatistic48);
        double double52 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics54 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double55 = descriptiveStatistics54.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic56 = descriptiveStatistics54.getGeometricMeanImpl();
        descriptiveStatistics54.setWindowSize(100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic59 = descriptiveStatistics54.getMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic60 = descriptiveStatistics54.getSkewnessImpl();
        // The following exception was thrown during execution in test generation
        try {
            descriptiveStatistics0.setPercentileImpl(univariateStatistic60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Percentile implementation does not support setQuantile");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(descriptiveStatistics1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 2.0d + "'", double11 == 2.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(descriptiveStatistics20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(descriptiveStatistics34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(descriptiveStatistics39);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertNotNull(descriptiveStatistics41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(univariateStatistic56);
        org.junit.Assert.assertNotNull(univariateStatistic59);
        org.junit.Assert.assertNotNull(univariateStatistic60);
    }

    @Test
    public void test01524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01524");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        double double5 = descriptiveStatistics0.getMean();
        descriptiveStatistics0.addValue((double) (byte) 10);
        double double8 = descriptiveStatistics0.getMean();
        double double9 = descriptiveStatistics0.getMean();
        double double10 = descriptiveStatistics0.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics0.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        descriptiveStatistics12.setKurtosisImpl(univariateStatistic15);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics17.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        descriptiveStatistics17.setKurtosisImpl(univariateStatistic20);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics17.getKurtosisImpl();
        descriptiveStatistics12.setMaxImpl(univariateStatistic22);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics24 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics24.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics26.getSumsqImpl();
        descriptiveStatistics24.setKurtosisImpl(univariateStatistic27);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics24.getKurtosisImpl();
        descriptiveStatistics12.setGeometricMeanImpl(univariateStatistic29);
        double double31 = descriptiveStatistics12.getMin();
        double[] doubleArray32 = descriptiveStatistics12.getValues();
        // The following exception was thrown during execution in test generation
        try {
            double double35 = univariateStatistic11.evaluate(doubleArray32, 101, 102);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.000000000000002d + "'", double10 == 10.000000000000002d);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
    }

    @Test
    public void test01525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01525");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) 10);
        int int4 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.clear();
        int int6 = resizableDoubleArray0.getNumElements();
        int int7 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 100.0f);
        int int10 = resizableDoubleArray0.getNumElements();
        // The following exception was thrown during execution in test generation
        try {
            double double12 = resizableDoubleArray0.getElement((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 32 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test01526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01526");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement(0.0d);
        int int4 = resizableDoubleArray0.getExpansionMode();
        float float5 = resizableDoubleArray0.getContractionCriteria();
        resizableDoubleArray0.clear();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 2.5f + "'", float5 == 2.5f);
    }

    @Test
    public void test01527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01527");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics3.getKurtosisImpl();
        double double9 = descriptiveStatistics0.apply(univariateStatistic8);
        double double10 = descriptiveStatistics0.getSumsq();
        double double11 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        descriptiveStatistics12.setKurtosisImpl(univariateStatistic15);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics12.getKurtosisImpl();
        descriptiveStatistics0.setSumsqImpl(univariateStatistic17);
        double double19 = descriptiveStatistics0.getMean();
        long long20 = descriptiveStatistics0.getN();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test01528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01528");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray1 = new org.apache.commons.math.util.ResizableDoubleArray((int) (byte) 10);
        int int2 = resizableDoubleArray1.getExpansionMode();
        int int3 = resizableDoubleArray1.start();
        resizableDoubleArray1.clear();
        double double6 = resizableDoubleArray1.addElementRolling(10.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double8 = resizableDoubleArray1.getElement((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 0 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    }

    @Test
    public void test01529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01529");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getKurtosisImpl();
        double double6 = descriptiveStatistics0.getStandardDeviation();
        double double7 = descriptiveStatistics0.getSum();
        int int8 = descriptiveStatistics0.getWindowSize();
        int int9 = descriptiveStatistics0.getWindowSize();
        double double10 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str12 = descriptiveStatistics11.toString();
        double double13 = descriptiveStatistics11.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        descriptiveStatistics14.setKurtosisImpl(univariateStatistic17);
        descriptiveStatistics11.setSkewnessImpl(univariateStatistic17);
        double double20 = descriptiveStatistics11.getStandardDeviation();
        descriptiveStatistics11.clear();
        descriptiveStatistics11.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics24 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics24.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics24.getKurtosisImpl();
        long long27 = descriptiveStatistics24.getN();
        descriptiveStatistics24.addValue((double) 0);
        int int30 = descriptiveStatistics24.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics24.getGeometricMeanImpl();
        descriptiveStatistics11.setVarianceImpl(univariateStatistic31);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics34 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double35 = descriptiveStatistics34.getStandardDeviation();
        long long36 = descriptiveStatistics34.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics34.getSkewnessImpl();
        double double38 = descriptiveStatistics11.apply(univariateStatistic37);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics39 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics39.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics39.getKurtosisImpl();
        double[] doubleArray42 = descriptiveStatistics39.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic43 = descriptiveStatistics39.getVarianceImpl();
        double double44 = descriptiveStatistics39.getGeometricMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics45 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str46 = descriptiveStatistics45.toString();
        double double47 = descriptiveStatistics45.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics48 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics48.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics50 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics50.getSumsqImpl();
        descriptiveStatistics48.setKurtosisImpl(univariateStatistic51);
        descriptiveStatistics45.setSkewnessImpl(univariateStatistic51);
        double double54 = descriptiveStatistics45.getStandardDeviation();
        descriptiveStatistics45.clear();
        double double56 = descriptiveStatistics45.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics57 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic58 = descriptiveStatistics57.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics59 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic60 = descriptiveStatistics59.getSumsqImpl();
        descriptiveStatistics57.setKurtosisImpl(univariateStatistic60);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics62 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic63 = descriptiveStatistics62.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics64 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic65 = descriptiveStatistics64.getSumsqImpl();
        descriptiveStatistics62.setKurtosisImpl(univariateStatistic65);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic67 = descriptiveStatistics62.getKurtosisImpl();
        descriptiveStatistics57.setMaxImpl(univariateStatistic67);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics69 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic70 = descriptiveStatistics69.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics71 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic72 = descriptiveStatistics71.getSumsqImpl();
        descriptiveStatistics69.setKurtosisImpl(univariateStatistic72);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic74 = descriptiveStatistics69.getKurtosisImpl();
        descriptiveStatistics57.setGeometricMeanImpl(univariateStatistic74);
        descriptiveStatistics45.setSumImpl(univariateStatistic74);
        descriptiveStatistics39.setMinImpl(univariateStatistic74);
        double double78 = descriptiveStatistics11.apply(univariateStatistic74);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic79 = descriptiveStatistics11.getKurtosisImpl();
        descriptiveStatistics0.setSumImpl(univariateStatistic79);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str12, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(descriptiveStatistics24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(descriptiveStatistics39);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic43);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(descriptiveStatistics45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str46, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(descriptiveStatistics48);
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertNotNull(descriptiveStatistics50);
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(descriptiveStatistics57);
        org.junit.Assert.assertNotNull(univariateStatistic58);
        org.junit.Assert.assertNotNull(descriptiveStatistics59);
        org.junit.Assert.assertNotNull(univariateStatistic60);
        org.junit.Assert.assertNotNull(descriptiveStatistics62);
        org.junit.Assert.assertNotNull(univariateStatistic63);
        org.junit.Assert.assertNotNull(descriptiveStatistics64);
        org.junit.Assert.assertNotNull(univariateStatistic65);
        org.junit.Assert.assertNotNull(univariateStatistic67);
        org.junit.Assert.assertNotNull(descriptiveStatistics69);
        org.junit.Assert.assertNotNull(univariateStatistic70);
        org.junit.Assert.assertNotNull(descriptiveStatistics71);
        org.junit.Assert.assertNotNull(univariateStatistic72);
        org.junit.Assert.assertNotNull(univariateStatistic74);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertNotNull(univariateStatistic79);
    }

    @Test
    public void test01530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01530");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics(1);
        long long2 = descriptiveStatistics1.getN();
        double double3 = descriptiveStatistics1.getMax();
        double double4 = descriptiveStatistics1.getSum();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
    }

    @Test
    public void test01531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01531");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        double double5 = resizableDoubleArray0.addElementRolling((double) 0.0f);
        resizableDoubleArray0.setElement((int) (byte) 10, (double) (short) -1);
        double[] doubleArray9 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.setElement((int) '4', (double) '4');
        double[] doubleArray13 = resizableDoubleArray0.getElements();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setExpansionMode((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal expansionMode setting.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 52.0]");
    }

    @Test
    public void test01532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01532");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((-1));
        double double2 = descriptiveStatistics1.getMean();
        double double3 = descriptiveStatistics1.getSumsq();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getPercentileImpl();
        double[] doubleArray5 = descriptiveStatistics1.getValues();
        descriptiveStatistics1.addValue(16.0d);
        java.lang.String str8 = descriptiveStatistics1.toString();
        descriptiveStatistics1.addValue((double) (byte) 100);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "DescriptiveStatistics:\nn: 1\nmin: 16.0\nmax: 16.0\nmean: 16.0\nstd dev: 0.0\nmedian: 16.0\nskewness: NaN\nkurtosis: NaN\n" + "'", str8, "DescriptiveStatistics:\nn: 1\nmin: 16.0\nmax: 16.0\nmean: 16.0\nstd dev: 0.0\nmedian: 16.0\nskewness: NaN\nkurtosis: NaN\n");
    }

    @Test
    public void test01533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01533");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 1);
        double double2 = descriptiveStatistics1.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str4 = descriptiveStatistics3.toString();
        double double5 = descriptiveStatistics3.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics6.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        descriptiveStatistics6.setKurtosisImpl(univariateStatistic9);
        descriptiveStatistics3.setSkewnessImpl(univariateStatistic9);
        double double12 = descriptiveStatistics3.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        descriptiveStatistics13.setKurtosisImpl(univariateStatistic16);
        descriptiveStatistics13.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics13.getPercentileImpl();
        double double20 = descriptiveStatistics13.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics21.getKurtosisImpl();
        double[] doubleArray24 = descriptiveStatistics21.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics21.getVarianceImpl();
        double double26 = descriptiveStatistics13.apply(univariateStatistic25);
        double double27 = descriptiveStatistics3.apply(univariateStatistic25);
        descriptiveStatistics1.setKurtosisImpl(univariateStatistic25);
        double double29 = descriptiveStatistics1.getMax();
        double double30 = descriptiveStatistics1.getStandardDeviation();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str4, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
    }

    @Test
    public void test01534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01534");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        int int6 = descriptiveStatistics0.getWindowSize();
        double double7 = descriptiveStatistics0.getSkewness();
        double double8 = descriptiveStatistics0.getVariance();
        double double9 = descriptiveStatistics0.getSkewness();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test01535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01535");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray1 = new org.apache.commons.math.util.ResizableDoubleArray((int) (short) 10);
        double[] doubleArray2 = resizableDoubleArray1.getElements();
        double[] doubleArray3 = resizableDoubleArray1.getElements();
        resizableDoubleArray1.clear();
        resizableDoubleArray1.setElement(0, 4.5d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
    }

    @Test
    public void test01536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01536");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        double[] doubleArray3 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics0.getVarianceImpl();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics6.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics6.getKurtosisImpl();
        double[] doubleArray9 = descriptiveStatistics6.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics6.getVarianceImpl();
        double double11 = descriptiveStatistics6.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics6.getGeometricMeanImpl();
        descriptiveStatistics0.setSumsqImpl(univariateStatistic12);
        double[] doubleArray14 = descriptiveStatistics0.getSortedValues();
        double double15 = descriptiveStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic19);
        descriptiveStatistics16.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics16.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics16.getSumsqImpl();
        double double24 = descriptiveStatistics16.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics16.getPercentileImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic25);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics27.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics27.getKurtosisImpl();
        long long30 = descriptiveStatistics27.getN();
        double[] doubleArray31 = descriptiveStatistics27.getValues();
        double double32 = descriptiveStatistics27.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics34 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double35 = descriptiveStatistics34.getStandardDeviation();
        long long36 = descriptiveStatistics34.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics34.getKurtosisImpl();
        descriptiveStatistics27.setSumImpl(univariateStatistic37);
        double double39 = descriptiveStatistics27.getMin();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics41.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics43.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics45 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics45.getSumsqImpl();
        descriptiveStatistics43.setKurtosisImpl(univariateStatistic46);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics48 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics48.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics50 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics50.getSumsqImpl();
        descriptiveStatistics48.setKurtosisImpl(univariateStatistic51);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics48.getKurtosisImpl();
        descriptiveStatistics43.setMaxImpl(univariateStatistic53);
        double double55 = descriptiveStatistics43.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic56 = descriptiveStatistics43.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics43.getVarianceImpl();
        descriptiveStatistics41.setMinImpl(univariateStatistic57);
        double double59 = descriptiveStatistics41.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic60 = descriptiveStatistics41.getSumImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics61 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic62 = descriptiveStatistics61.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic63 = descriptiveStatistics61.getKurtosisImpl();
        long long64 = descriptiveStatistics61.getN();
        double[] doubleArray65 = descriptiveStatistics61.getValues();
        double double66 = descriptiveStatistics61.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics68 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double69 = descriptiveStatistics68.getStandardDeviation();
        long long70 = descriptiveStatistics68.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic71 = descriptiveStatistics68.getKurtosisImpl();
        descriptiveStatistics61.setSumImpl(univariateStatistic71);
        descriptiveStatistics41.setSumImpl(univariateStatistic71);
        descriptiveStatistics27.setSumImpl(univariateStatistic71);
        double[] doubleArray75 = descriptiveStatistics27.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic76 = descriptiveStatistics27.getSkewnessImpl();
        double[] doubleArray77 = descriptiveStatistics27.getValues();
        // The following exception was thrown during execution in test generation
        try {
            double double80 = univariateStatistic25.evaluate(doubleArray77, (int) ' ', (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(descriptiveStatistics43);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(descriptiveStatistics45);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertNotNull(descriptiveStatistics48);
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertNotNull(descriptiveStatistics50);
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(univariateStatistic56);
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(univariateStatistic60);
        org.junit.Assert.assertNotNull(descriptiveStatistics61);
        org.junit.Assert.assertNotNull(univariateStatistic62);
        org.junit.Assert.assertNotNull(univariateStatistic63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic71);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[]");
    }

    @Test
    public void test01537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01537");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics0.getSumsqImpl();
        double double8 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str10 = descriptiveStatistics9.toString();
        double double11 = descriptiveStatistics9.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        descriptiveStatistics12.setKurtosisImpl(univariateStatistic15);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics12.getKurtosisImpl();
        double double18 = descriptiveStatistics9.apply(univariateStatistic17);
        double double19 = descriptiveStatistics9.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics9.getSumImpl();
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic20);
        double double22 = descriptiveStatistics0.getSkewness();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str24 = descriptiveStatistics23.toString();
        double double25 = descriptiveStatistics23.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics26.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics28.getSumsqImpl();
        descriptiveStatistics26.setKurtosisImpl(univariateStatistic29);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics26.getKurtosisImpl();
        double double32 = descriptiveStatistics23.apply(univariateStatistic31);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics33 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics33.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics33.getKurtosisImpl();
        long long36 = descriptiveStatistics33.getN();
        double[] doubleArray37 = descriptiveStatistics33.getValues();
        double double38 = descriptiveStatistics33.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics33.getVarianceImpl();
        double double40 = descriptiveStatistics23.apply(univariateStatistic39);
        descriptiveStatistics0.setSumImpl(univariateStatistic39);
        double double42 = descriptiveStatistics0.getKurtosis();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str10, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str24, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(descriptiveStatistics33);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
    }

    @Test
    public void test01538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01538");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        int int3 = resizableDoubleArray0.start();
        resizableDoubleArray0.contract();
        resizableDoubleArray0.setElement((int) (short) 1, (double) 32.0f);
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.discardFrontElements((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot discard more elements than arecontained in this array.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test01539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01539");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        double[] doubleArray3 = resizableDoubleArray0.getElements();
        double[] doubleArray4 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.setNumElements((int) (byte) 100);
        resizableDoubleArray0.discardFrontElements((int) (byte) 100);
        resizableDoubleArray0.clear();
        resizableDoubleArray0.setExpansionMode(0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
    }

    @Test
    public void test01540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01540");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getGeometricMeanImpl();
        double double4 = descriptiveStatistics0.getMax();
        double double5 = descriptiveStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics0.getPercentileImpl();
        descriptiveStatistics0.addValue((double) (short) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        descriptiveStatistics10.setKurtosisImpl(univariateStatistic13);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics17.getSumsqImpl();
        descriptiveStatistics15.setKurtosisImpl(univariateStatistic18);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics15.getKurtosisImpl();
        descriptiveStatistics10.setMaxImpl(univariateStatistic20);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics22.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics24 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics24.getSumsqImpl();
        descriptiveStatistics22.setKurtosisImpl(univariateStatistic25);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics22.getKurtosisImpl();
        descriptiveStatistics10.setGeometricMeanImpl(univariateStatistic27);
        descriptiveStatistics0.setSumsqImpl(univariateStatistic27);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        descriptiveStatistics30.setWindowSize((int) (byte) -1);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics33 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str34 = descriptiveStatistics33.toString();
        descriptiveStatistics33.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics33.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics33.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics38 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics38.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics38.getKurtosisImpl();
        long long41 = descriptiveStatistics38.getN();
        double double42 = descriptiveStatistics38.getMax();
        double double43 = descriptiveStatistics38.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics44 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double45 = descriptiveStatistics44.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics44.getMinImpl();
        descriptiveStatistics38.setSumImpl(univariateStatistic46);
        descriptiveStatistics33.setSumImpl(univariateStatistic46);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics49 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic50 = descriptiveStatistics49.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics51 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics51.getSumsqImpl();
        descriptiveStatistics49.setKurtosisImpl(univariateStatistic52);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics54 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics54.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics56 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics56.getSumsqImpl();
        descriptiveStatistics54.setKurtosisImpl(univariateStatistic57);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic59 = descriptiveStatistics54.getKurtosisImpl();
        descriptiveStatistics49.setMaxImpl(univariateStatistic59);
        double double61 = descriptiveStatistics33.apply(univariateStatistic59);
        double double62 = descriptiveStatistics30.apply(univariateStatistic59);
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray63 = new org.apache.commons.math.util.ResizableDoubleArray();
        float float64 = resizableDoubleArray63.getExpansionFactor();
        resizableDoubleArray63.clear();
        resizableDoubleArray63.setNumElements((int) ' ');
        float float68 = resizableDoubleArray63.getContractionCriteria();
        double[] doubleArray69 = resizableDoubleArray63.getValues();
        double double70 = univariateStatistic59.evaluate(doubleArray69);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic59);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(descriptiveStatistics22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(descriptiveStatistics24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(descriptiveStatistics30);
        org.junit.Assert.assertNotNull(descriptiveStatistics33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str34, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(descriptiveStatistics38);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(descriptiveStatistics44);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertNotNull(descriptiveStatistics49);
        org.junit.Assert.assertNotNull(univariateStatistic50);
        org.junit.Assert.assertNotNull(descriptiveStatistics51);
        org.junit.Assert.assertNotNull(univariateStatistic52);
        org.junit.Assert.assertNotNull(descriptiveStatistics54);
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertNotNull(descriptiveStatistics56);
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertNotNull(univariateStatistic59);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + float64 + "' != '" + 2.0f + "'", float64 == 2.0f);
        org.junit.Assert.assertTrue("'" + float68 + "' != '" + 2.5f + "'", float68 == 2.5f);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
    }

    @Test
    public void test01541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01541");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        double[] doubleArray1 = resizableDoubleArray0.getElements();
        double[] doubleArray2 = resizableDoubleArray0.getElements();
        double[] doubleArray3 = resizableDoubleArray0.getValues();
        double[] doubleArray4 = resizableDoubleArray0.getValues();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test01542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01542");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getMinImpl();
        int int7 = descriptiveStatistics0.getWindowSize();
        double double8 = descriptiveStatistics0.getSumsq();
        double double9 = descriptiveStatistics0.getStandardDeviation();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test01543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01543");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        descriptiveStatistics1.setWindowSize((int) ' ');
        double double4 = descriptiveStatistics1.getStandardDeviation();
        double double5 = descriptiveStatistics1.getSkewness();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics6.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics6.getKurtosisImpl();
        long long9 = descriptiveStatistics6.getN();
        descriptiveStatistics6.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics6.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics6.getPercentileImpl();
        descriptiveStatistics1.setPercentileImpl(univariateStatistic13);
        double double15 = descriptiveStatistics1.getVariance();
        double double16 = descriptiveStatistics1.getMax();
        double double17 = descriptiveStatistics1.getMax();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test01544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01544");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getSkewnessImpl();
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray3 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int4 = resizableDoubleArray3.getExpansionMode();
        resizableDoubleArray3.addElement(0.0d);
        int int7 = resizableDoubleArray3.getNumElements();
        int int8 = resizableDoubleArray3.getExpansionMode();
        resizableDoubleArray3.discardFrontElements((int) (byte) 1);
        float float11 = resizableDoubleArray3.getContractionCriteria();
        double double13 = resizableDoubleArray3.addElementRolling((double) (byte) 1);
        double[] doubleArray14 = resizableDoubleArray3.getElements();
        double double15 = univariateStatistic2.evaluate(doubleArray14);
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray16 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int17 = resizableDoubleArray16.getExpansionMode();
        resizableDoubleArray16.addElement(0.0d);
        int int20 = resizableDoubleArray16.getNumElements();
        int int21 = resizableDoubleArray16.getExpansionMode();
        resizableDoubleArray16.discardFrontElements((int) (byte) 1);
        float float24 = resizableDoubleArray16.getContractionCriteria();
        double double26 = resizableDoubleArray16.addElementRolling((double) (byte) 1);
        double double28 = resizableDoubleArray16.addElementRolling(2.0d);
        double[] doubleArray29 = resizableDoubleArray16.getValues();
        // The following exception was thrown during execution in test generation
        try {
            double double32 = univariateStatistic2.evaluate(doubleArray29, 10, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + float11 + "' != '" + 2.5f + "'", float11 == 2.5f);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + 2.5f + "'", float24 == 2.5f);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0]");
    }

    @Test
    public void test01545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01545");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray3 = new org.apache.commons.math.util.ResizableDoubleArray(102, 35.0f, (float) 'a');
        resizableDoubleArray3.clear();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray3.discardFrontElements(1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot discard more elements than arecontained in this array.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01546");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getMinImpl();
        double double5 = descriptiveStatistics1.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics9.getSumsqImpl();
        descriptiveStatistics7.setKurtosisImpl(univariateStatistic10);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics7.getKurtosisImpl();
        double[] doubleArray16 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double17 = univariateStatistic12.evaluate(doubleArray16);
        descriptiveStatistics6.setMaxImpl(univariateStatistic12);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics19.getKurtosisImpl();
        long long22 = descriptiveStatistics19.getN();
        double[] doubleArray23 = descriptiveStatistics19.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics19.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics19.getMeanImpl();
        descriptiveStatistics6.setGeometricMeanImpl(univariateStatistic25);
        descriptiveStatistics1.setGeometricMeanImpl(univariateStatistic25);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double29 = descriptiveStatistics28.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics30.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics30.getKurtosisImpl();
        long long33 = descriptiveStatistics30.getN();
        descriptiveStatistics30.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics36.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics38 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics38.getSumsqImpl();
        descriptiveStatistics36.setKurtosisImpl(univariateStatistic39);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics41.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics43.getSumsqImpl();
        descriptiveStatistics41.setKurtosisImpl(univariateStatistic44);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics41.getKurtosisImpl();
        descriptiveStatistics36.setMaxImpl(univariateStatistic46);
        double double48 = descriptiveStatistics36.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics36.getMinImpl();
        descriptiveStatistics30.setMinImpl(univariateStatistic49);
        descriptiveStatistics28.setMeanImpl(univariateStatistic49);
        descriptiveStatistics1.setMinImpl(univariateStatistic49);
        double double53 = descriptiveStatistics1.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics55 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double56 = descriptiveStatistics55.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics55.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics59 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double60 = descriptiveStatistics59.getStandardDeviation();
        long long61 = descriptiveStatistics59.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic62 = descriptiveStatistics59.getMinImpl();
        descriptiveStatistics55.setMaxImpl(univariateStatistic62);
        double double64 = descriptiveStatistics55.getMax();
        double double66 = descriptiveStatistics55.getPercentile(Double.NaN);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics67 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str68 = descriptiveStatistics67.toString();
        double double69 = descriptiveStatistics67.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics70 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic71 = descriptiveStatistics70.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics72 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic73 = descriptiveStatistics72.getSumsqImpl();
        descriptiveStatistics70.setKurtosisImpl(univariateStatistic73);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic75 = descriptiveStatistics70.getKurtosisImpl();
        double double76 = descriptiveStatistics67.apply(univariateStatistic75);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics77 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str78 = descriptiveStatistics77.toString();
        descriptiveStatistics77.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic80 = descriptiveStatistics77.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic81 = descriptiveStatistics77.getSumsqImpl();
        descriptiveStatistics67.setMeanImpl(univariateStatistic81);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic83 = descriptiveStatistics67.getSkewnessImpl();
        descriptiveStatistics55.setSumsqImpl(univariateStatistic83);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic85 = descriptiveStatistics55.getKurtosisImpl();
        descriptiveStatistics1.setGeometricMeanImpl(univariateStatistic85);
        double double87 = descriptiveStatistics1.getGeometricMean();
        double double88 = descriptiveStatistics1.getKurtosis();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 2.0d + "'", double17 == 2.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(descriptiveStatistics30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(descriptiveStatistics38);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(descriptiveStatistics41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(descriptiveStatistics43);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic62);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(descriptiveStatistics67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str68, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertNotNull(descriptiveStatistics70);
        org.junit.Assert.assertNotNull(univariateStatistic71);
        org.junit.Assert.assertNotNull(descriptiveStatistics72);
        org.junit.Assert.assertNotNull(univariateStatistic73);
        org.junit.Assert.assertNotNull(univariateStatistic75);
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertNotNull(descriptiveStatistics77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str78, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic80);
        org.junit.Assert.assertNotNull(univariateStatistic81);
        org.junit.Assert.assertNotNull(univariateStatistic83);
        org.junit.Assert.assertNotNull(univariateStatistic85);
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertTrue(Double.isNaN(double88));
    }

    @Test
    public void test01547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01547");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray4 = new org.apache.commons.math.util.ResizableDoubleArray((int) (byte) -1, (float) (short) 0, 10.5f, 101);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The expansion factor must be a number greater than 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01548");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics1.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        descriptiveStatistics1.setKurtosisImpl(univariateStatistic4);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics1.getKurtosisImpl();
        double[] doubleArray10 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double11 = univariateStatistic6.evaluate(doubleArray10);
        descriptiveStatistics0.setMaxImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics13.getKurtosisImpl();
        long long16 = descriptiveStatistics13.getN();
        double double17 = descriptiveStatistics13.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics20.getSumsqImpl();
        descriptiveStatistics18.setKurtosisImpl(univariateStatistic21);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics25.getSumsqImpl();
        descriptiveStatistics23.setKurtosisImpl(univariateStatistic26);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics23.getKurtosisImpl();
        descriptiveStatistics18.setMaxImpl(univariateStatistic28);
        descriptiveStatistics13.setSumImpl(univariateStatistic28);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics32 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics32.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics34 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics34.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics36.getSumsqImpl();
        descriptiveStatistics34.setKurtosisImpl(univariateStatistic37);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics39 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics39.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics41.getSumsqImpl();
        descriptiveStatistics39.setKurtosisImpl(univariateStatistic42);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics39.getKurtosisImpl();
        descriptiveStatistics34.setMaxImpl(univariateStatistic44);
        double double46 = descriptiveStatistics34.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics34.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics34.getVarianceImpl();
        descriptiveStatistics32.setMinImpl(univariateStatistic48);
        descriptiveStatistics13.setMeanImpl(univariateStatistic48);
        descriptiveStatistics0.setSumImpl(univariateStatistic48);
        descriptiveStatistics0.setWindowSize((int) (byte) 1);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics54 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics54.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics56 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics56.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic58 = descriptiveStatistics56.getKurtosisImpl();
        long long59 = descriptiveStatistics56.getN();
        double[] doubleArray60 = descriptiveStatistics56.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic61 = descriptiveStatistics56.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic62 = descriptiveStatistics56.getMinImpl();
        double double63 = descriptiveStatistics54.apply(univariateStatistic62);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics64 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic65 = descriptiveStatistics64.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics66 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic67 = descriptiveStatistics66.getSumsqImpl();
        descriptiveStatistics64.setKurtosisImpl(univariateStatistic67);
        descriptiveStatistics64.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic70 = descriptiveStatistics64.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics71 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic72 = descriptiveStatistics71.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic73 = descriptiveStatistics71.getKurtosisImpl();
        long long74 = descriptiveStatistics71.getN();
        descriptiveStatistics71.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic77 = descriptiveStatistics71.getSkewnessImpl();
        descriptiveStatistics64.setSumsqImpl(univariateStatistic77);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic79 = descriptiveStatistics64.getVarianceImpl();
        descriptiveStatistics54.setVarianceImpl(univariateStatistic79);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic81 = descriptiveStatistics54.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic82 = descriptiveStatistics54.getMinImpl();
        descriptiveStatistics0.setSumImpl(univariateStatistic82);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics85 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics86 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic87 = descriptiveStatistics86.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic88 = descriptiveStatistics86.getKurtosisImpl();
        long long89 = descriptiveStatistics86.getN();
        double[] doubleArray90 = descriptiveStatistics86.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic91 = descriptiveStatistics86.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic92 = descriptiveStatistics86.getMeanImpl();
        descriptiveStatistics85.setSumsqImpl(univariateStatistic92);
        double double94 = descriptiveStatistics85.getMax();
        java.lang.String str95 = descriptiveStatistics85.toString();
        double double96 = descriptiveStatistics85.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic97 = descriptiveStatistics85.getKurtosisImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic98 = descriptiveStatistics85.getPercentileImpl();
        descriptiveStatistics0.setMinImpl(univariateStatistic98);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(descriptiveStatistics1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 2.0d + "'", double11 == 2.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(descriptiveStatistics20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(descriptiveStatistics34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(descriptiveStatistics39);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertNotNull(descriptiveStatistics41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertNotNull(descriptiveStatistics54);
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertNotNull(descriptiveStatistics56);
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertNotNull(univariateStatistic58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic61);
        org.junit.Assert.assertNotNull(univariateStatistic62);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertNotNull(descriptiveStatistics64);
        org.junit.Assert.assertNotNull(univariateStatistic65);
        org.junit.Assert.assertNotNull(descriptiveStatistics66);
        org.junit.Assert.assertNotNull(univariateStatistic67);
        org.junit.Assert.assertNotNull(univariateStatistic70);
        org.junit.Assert.assertNotNull(descriptiveStatistics71);
        org.junit.Assert.assertNotNull(univariateStatistic72);
        org.junit.Assert.assertNotNull(univariateStatistic73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic77);
        org.junit.Assert.assertNotNull(univariateStatistic79);
        org.junit.Assert.assertNotNull(univariateStatistic81);
        org.junit.Assert.assertNotNull(univariateStatistic82);
        org.junit.Assert.assertNotNull(descriptiveStatistics86);
        org.junit.Assert.assertNotNull(univariateStatistic87);
        org.junit.Assert.assertNotNull(univariateStatistic88);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 0L + "'", long89 == 0L);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic91);
        org.junit.Assert.assertNotNull(univariateStatistic92);
        org.junit.Assert.assertTrue(Double.isNaN(double94));
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str95, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double96));
        org.junit.Assert.assertNotNull(univariateStatistic97);
        org.junit.Assert.assertNotNull(univariateStatistic98);
    }

    @Test
    public void test01549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01549");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        int int5 = descriptiveStatistics0.getWindowSize();
        double double6 = descriptiveStatistics0.getMax();
        double[] doubleArray7 = descriptiveStatistics0.getValues();
        double double8 = descriptiveStatistics0.getSkewness();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test01550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01550");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        descriptiveStatistics3.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics3.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics10.getKurtosisImpl();
        long long13 = descriptiveStatistics10.getN();
        double[] doubleArray14 = descriptiveStatistics10.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics10.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics10.getMinImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic16);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic16);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str20 = descriptiveStatistics19.toString();
        descriptiveStatistics19.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str23 = descriptiveStatistics22.toString();
        double double24 = descriptiveStatistics22.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics25.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics27.getSumsqImpl();
        descriptiveStatistics25.setKurtosisImpl(univariateStatistic28);
        descriptiveStatistics22.setSkewnessImpl(univariateStatistic28);
        double double31 = descriptiveStatistics22.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics33 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double34 = descriptiveStatistics33.getStandardDeviation();
        long long35 = descriptiveStatistics33.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics33.getMinImpl();
        descriptiveStatistics22.setVarianceImpl(univariateStatistic36);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics22.getMeanImpl();
        descriptiveStatistics19.setMeanImpl(univariateStatistic38);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic38);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics43.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics45 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics45.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics47 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics47.getSumsqImpl();
        descriptiveStatistics45.setKurtosisImpl(univariateStatistic48);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics50 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics50.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics52 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics52.getSumsqImpl();
        descriptiveStatistics50.setKurtosisImpl(univariateStatistic53);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics50.getKurtosisImpl();
        descriptiveStatistics45.setMaxImpl(univariateStatistic55);
        double double57 = descriptiveStatistics45.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic58 = descriptiveStatistics45.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic59 = descriptiveStatistics45.getVarianceImpl();
        descriptiveStatistics43.setMinImpl(univariateStatistic59);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic61 = descriptiveStatistics43.getMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic62 = descriptiveStatistics43.getPercentileImpl();
        descriptiveStatistics0.setMinImpl(univariateStatistic62);
        double double64 = descriptiveStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic65 = descriptiveStatistics0.getPercentileImpl();
        double double66 = descriptiveStatistics0.getMean();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str20, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str23, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(descriptiveStatistics45);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertNotNull(descriptiveStatistics47);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertNotNull(descriptiveStatistics50);
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertNotNull(descriptiveStatistics52);
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(univariateStatistic58);
        org.junit.Assert.assertNotNull(univariateStatistic59);
        org.junit.Assert.assertNotNull(univariateStatistic61);
        org.junit.Assert.assertNotNull(univariateStatistic62);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertNotNull(univariateStatistic65);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
    }

    @Test
    public void test01551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01551");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.setElement(100, (double) (byte) 100);
        resizableDoubleArray0.addElement(2.0d);
        float float7 = resizableDoubleArray0.getContractionCriteria();
        double double9 = resizableDoubleArray0.addElementRolling((double) 10);
        resizableDoubleArray0.addElement((double) ' ');
        double double13 = resizableDoubleArray0.getElement(0);
        int int14 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.addElement((double) 1L);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + float7 + "' != '" + 2.5f + "'", float7 == 2.5f);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 103 + "'", int14 == 103);
    }

    @Test
    public void test01552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01552");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        double double5 = resizableDoubleArray0.addElementRolling((double) 0.0f);
        resizableDoubleArray0.setElement((int) (byte) 10, (double) (short) -1);
        int int9 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.clear();
        int int11 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.discardFrontElements(0);
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.discardFrontElements(102);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot discard more elements than arecontained in this array.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 11 + "'", int9 == 11);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test01553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01553");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray1 = new org.apache.commons.math.util.ResizableDoubleArray(11);
        double[] doubleArray2 = resizableDoubleArray1.getElements();
        // The following exception was thrown during execution in test generation
        try {
            double double4 = resizableDoubleArray1.getElement((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 10 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
    }

    @Test
    public void test01554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01554");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double1 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str4 = descriptiveStatistics3.toString();
        descriptiveStatistics3.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics3.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray8 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int9 = resizableDoubleArray8.start();
        resizableDoubleArray8.addElement((double) 10);
        int int12 = resizableDoubleArray8.getExpansionMode();
        resizableDoubleArray8.addElement((double) (-1L));
        double[] doubleArray15 = resizableDoubleArray8.getElements();
        double double18 = univariateStatistic7.evaluate(doubleArray15, (int) (byte) 1, 1);
        double double19 = descriptiveStatistics0.apply(univariateStatistic7);
        double double20 = descriptiveStatistics0.getSum();
        double double21 = descriptiveStatistics0.getMax();
        double[] doubleArray22 = descriptiveStatistics0.getValues();
        java.lang.String str23 = descriptiveStatistics0.toString();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = null;
        descriptiveStatistics0.setVarianceImpl(univariateStatistic24);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str4, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str23, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
    }

    @Test
    public void test01555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01555");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray2 = new org.apache.commons.math.util.ResizableDoubleArray(32, (float) (short) 100);
        resizableDoubleArray2.contract();
        float float4 = resizableDoubleArray2.getExpansionFactor();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray2.setContractionCriteria((float) 35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 100.0f + "'", float4 == 100.0f);
    }

    @Test
    public void test01556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01556");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) (byte) 0);
        resizableDoubleArray0.contract();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setExpansionMode(101);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal expansionMode setting.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    }

    @Test
    public void test01557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01557");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        double[] doubleArray4 = descriptiveStatistics1.getSortedValues();
        double[] doubleArray5 = descriptiveStatistics1.getSortedValues();
        double double6 = descriptiveStatistics1.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double9 = descriptiveStatistics8.getStandardDeviation();
        long long10 = descriptiveStatistics8.getN();
        double double11 = descriptiveStatistics8.getMin();
        double double12 = descriptiveStatistics8.getMax();
        double double13 = descriptiveStatistics8.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getKurtosisImpl();
        descriptiveStatistics8.setSkewnessImpl(univariateStatistic16);
        double[] doubleArray18 = descriptiveStatistics8.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics8.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics8.getMaxImpl();
        descriptiveStatistics1.setSumImpl(univariateStatistic20);
        double double22 = descriptiveStatistics1.getVariance();
        double double23 = descriptiveStatistics1.getSkewness();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
    }

    @Test
    public void test01558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01558");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        int int3 = resizableDoubleArray0.start();
        resizableDoubleArray0.setElement((int) (short) 10, (double) 100L);
        double[] doubleArray7 = resizableDoubleArray0.getValues();
        double double9 = resizableDoubleArray0.addElementRolling(0.0d);
        resizableDoubleArray0.discardFrontElements((int) (short) 0);
        int int12 = resizableDoubleArray0.getNumElements();
        double double14 = resizableDoubleArray0.addElementRolling((double) (short) 1);
        resizableDoubleArray0.setNumElements(10);
        int int17 = resizableDoubleArray0.start();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0, 0.0, 1.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 11 + "'", int12 == 11);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
    }

    @Test
    public void test01559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01559");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics0.getSumsqImpl();
        double double8 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics0.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        descriptiveStatistics11.setKurtosisImpl(univariateStatistic14);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics11.getKurtosisImpl();
        double[] doubleArray20 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double21 = univariateStatistic16.evaluate(doubleArray20);
        descriptiveStatistics10.setMaxImpl(univariateStatistic16);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics23.getKurtosisImpl();
        long long26 = descriptiveStatistics23.getN();
        double[] doubleArray27 = descriptiveStatistics23.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics23.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics23.getMeanImpl();
        descriptiveStatistics10.setGeometricMeanImpl(univariateStatistic29);
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic29);
        // The following exception was thrown during execution in test generation
        try {
            descriptiveStatistics0.setWindowSize((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: window size must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2.0d + "'", double21 == 2.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
    }

    @Test
    public void test01560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01560");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray1 = new org.apache.commons.math.util.ResizableDoubleArray((int) (byte) 10);
        int int2 = resizableDoubleArray1.getNumElements();
        float float3 = resizableDoubleArray1.getContractionCriteria();
        double[] doubleArray4 = resizableDoubleArray1.getElements();
        resizableDoubleArray1.setExpansionMode(1);
        int int7 = resizableDoubleArray1.start();
        // The following exception was thrown during execution in test generation
        try {
            double double9 = resizableDoubleArray1.getElement(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 100 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 2.5f + "'", float3 == 2.5f);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test01561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01561");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics7.getKurtosisImpl();
        long long10 = descriptiveStatistics7.getN();
        descriptiveStatistics7.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics7.getSkewnessImpl();
        descriptiveStatistics0.setSumsqImpl(univariateStatistic13);
        double double15 = descriptiveStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics16.getKurtosisImpl();
        long long19 = descriptiveStatistics16.getN();
        descriptiveStatistics16.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics16.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics25.getSumsqImpl();
        descriptiveStatistics23.setKurtosisImpl(univariateStatistic26);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics23.getKurtosisImpl();
        double[] doubleArray32 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double33 = univariateStatistic28.evaluate(doubleArray32);
        descriptiveStatistics16.setSkewnessImpl(univariateStatistic28);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics16.getSkewnessImpl();
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic35);
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray37 = new org.apache.commons.math.util.ResizableDoubleArray();
        float float38 = resizableDoubleArray37.getExpansionFactor();
        resizableDoubleArray37.clear();
        resizableDoubleArray37.setNumElements((int) ' ');
        int int42 = resizableDoubleArray37.getNumElements();
        int int43 = resizableDoubleArray37.start();
        resizableDoubleArray37.setElement((int) 'a', 0.0d);
        double[] doubleArray47 = resizableDoubleArray37.getElements();
        double double48 = univariateStatistic35.evaluate(doubleArray47);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 2.0d + "'", double33 == 2.0d);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertTrue("'" + float38 + "' != '" + 2.0f + "'", float38 == 2.0f);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 32 + "'", int42 == 32);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
    }

    @Test
    public void test01562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01562");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        descriptiveStatistics0.addValue((double) 0);
        int int6 = descriptiveStatistics0.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics0.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics0.getSumImpl();
        double double9 = descriptiveStatistics0.getVariance();
        double double10 = descriptiveStatistics0.getMax();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    }

    @Test
    public void test01563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01563");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) (byte) 0);
        resizableDoubleArray0.contract();
        float float5 = resizableDoubleArray0.getContractionCriteria();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setExpansionFactor((float) 102);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 2.5f + "'", float5 == 2.5f);
    }

    @Test
    public void test01564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01564");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray3 = new org.apache.commons.math.util.ResizableDoubleArray(102, 2.0f, (float) 101);
        float float4 = resizableDoubleArray3.getExpansionFactor();
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 2.0f + "'", float4 == 2.0f);
    }

    @Test
    public void test01565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01565");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray4 = new org.apache.commons.math.util.ResizableDoubleArray((int) (byte) 0, (float) (short) -1, (float) 35, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The expansion factor must be a number greater than 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01566");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray2 = new org.apache.commons.math.util.ResizableDoubleArray((int) (byte) 1, (float) 11);
        // The following exception was thrown during execution in test generation
        try {
            double double4 = resizableDoubleArray2.getElement(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 10 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01567");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        double[] doubleArray3 = resizableDoubleArray0.getElements();
        float float4 = resizableDoubleArray0.getExpansionFactor();
        int int5 = resizableDoubleArray0.getNumElements();
        int int6 = resizableDoubleArray0.getExpansionMode();
        double[] doubleArray7 = resizableDoubleArray0.getElements();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 2.0f + "'", float4 == 2.0f);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
    }

    @Test
    public void test01568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01568");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic6);
        double double9 = descriptiveStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double12 = descriptiveStatistics11.getStandardDeviation();
        long long13 = descriptiveStatistics11.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics11.getMinImpl();
        descriptiveStatistics0.setVarianceImpl(univariateStatistic14);
        int int16 = descriptiveStatistics0.getWindowSize();
        java.lang.String str17 = descriptiveStatistics0.toString();
        double double18 = descriptiveStatistics0.getKurtosis();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 1);
        double double21 = descriptiveStatistics20.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str23 = descriptiveStatistics22.toString();
        double double24 = descriptiveStatistics22.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics25.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics27.getSumsqImpl();
        descriptiveStatistics25.setKurtosisImpl(univariateStatistic28);
        descriptiveStatistics22.setSkewnessImpl(univariateStatistic28);
        double double31 = descriptiveStatistics22.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics32 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics32.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics34 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics34.getSumsqImpl();
        descriptiveStatistics32.setKurtosisImpl(univariateStatistic35);
        descriptiveStatistics32.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics32.getPercentileImpl();
        double double39 = descriptiveStatistics32.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics40 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics40.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics40.getKurtosisImpl();
        double[] doubleArray43 = descriptiveStatistics40.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics40.getVarianceImpl();
        double double45 = descriptiveStatistics32.apply(univariateStatistic44);
        double double46 = descriptiveStatistics22.apply(univariateStatistic44);
        descriptiveStatistics20.setKurtosisImpl(univariateStatistic44);
        double double48 = descriptiveStatistics20.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics20.getMinImpl();
        double double50 = descriptiveStatistics20.getKurtosis();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics20.getPercentileImpl();
        descriptiveStatistics0.setMinImpl(univariateStatistic51);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str17, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(descriptiveStatistics22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str23, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(descriptiveStatistics32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(descriptiveStatistics34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(descriptiveStatistics40);
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNotNull(univariateStatistic51);
    }

    @Test
    public void test01569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01569");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray4 = new org.apache.commons.math.util.ResizableDoubleArray(3, (float) 0, (float) 1L, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The expansion factor must be a number greater than 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01570");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        double double5 = resizableDoubleArray0.addElementRolling((double) 0.0f);
        resizableDoubleArray0.setElement((int) (byte) 10, (double) (short) -1);
        int int9 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.setContractionCriteria((float) 10);
        resizableDoubleArray0.clear();
        // The following exception was thrown during execution in test generation
        try {
            double double16 = resizableDoubleArray0.getElement((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 0 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 11 + "'", int9 == 11);
    }

    @Test
    public void test01571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01571");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.setExpansionMode((int) (short) 1);
        int int4 = resizableDoubleArray0.getNumElements();
        float float5 = resizableDoubleArray0.getContractionCriteria();
        double double7 = resizableDoubleArray0.addElementRolling((-1.0d));
        double double9 = resizableDoubleArray0.addElementRolling((double) 2);
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setElement((int) (byte) -1, (double) 32);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Cannot set an element at a negative index");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 2.5f + "'", float5 == 2.5f);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    }

    @Test
    public void test01572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01572");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) 10);
        int int4 = resizableDoubleArray0.getNumElements();
        double[] doubleArray5 = resizableDoubleArray0.getValues();
        int int6 = resizableDoubleArray0.getNumElements();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test01573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01573");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray2 = new org.apache.commons.math.util.ResizableDoubleArray((-1), (float) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The initial capacity supplied: -1must be a positive integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01574");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray2 = new org.apache.commons.math.util.ResizableDoubleArray((int) '#', (float) (byte) 10);
        int int3 = resizableDoubleArray2.start();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray2.discardFrontElements(53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot discard more elements than arecontained in this array.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test01575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01575");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        double[] doubleArray1 = resizableDoubleArray0.getElements();
        double[] doubleArray2 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.addElement((double) 32);
        int int6 = resizableDoubleArray0.getExpansionMode();
        int int7 = resizableDoubleArray0.getExpansionMode();
        int int8 = resizableDoubleArray0.getExpansionMode();
        double[] doubleArray9 = resizableDoubleArray0.getValues();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.discardFrontElements((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot discard more elements than arecontained in this array.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[32.0, 0.0]");
    }

    @Test
    public void test01576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01576");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        double double5 = resizableDoubleArray0.getElement(0);
        int int6 = resizableDoubleArray0.getNumElements();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setExpansionFactor((float) 103);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test01577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01577");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        descriptiveStatistics0.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics7.getKurtosisImpl();
        long long10 = descriptiveStatistics7.getN();
        double[] doubleArray11 = descriptiveStatistics7.getValues();
        descriptiveStatistics7.addValue(1.0d);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics7.getSumImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics15.getKurtosisImpl();
        long long18 = descriptiveStatistics15.getN();
        descriptiveStatistics15.addValue((double) 0);
        int int21 = descriptiveStatistics15.getWindowSize();
        double double22 = descriptiveStatistics15.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics15.getMeanImpl();
        double double24 = descriptiveStatistics15.getKurtosis();
        double double26 = descriptiveStatistics15.getPercentile((double) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics27.getSumsqImpl();
        double double29 = descriptiveStatistics27.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics27.getSkewnessImpl();
        descriptiveStatistics15.setMaxImpl(univariateStatistic30);
        descriptiveStatistics7.setSkewnessImpl(univariateStatistic30);
        descriptiveStatistics0.setMaxImpl(univariateStatistic30);
        double double34 = descriptiveStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics35 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics35.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics35.getKurtosisImpl();
        double[] doubleArray38 = descriptiveStatistics35.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics35.getVarianceImpl();
        double double40 = descriptiveStatistics35.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics35.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double44 = descriptiveStatistics43.getStandardDeviation();
        long long45 = descriptiveStatistics43.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics43.getSkewnessImpl();
        java.lang.String str47 = descriptiveStatistics43.toString();
        double double48 = descriptiveStatistics43.getVariance();
        descriptiveStatistics43.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics43.getGeometricMeanImpl();
        descriptiveStatistics35.setMeanImpl(univariateStatistic51);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics35.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic54 = descriptiveStatistics35.getGeometricMeanImpl();
        descriptiveStatistics0.setSumsqImpl(univariateStatistic54);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(descriptiveStatistics35);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str47, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertNotNull(univariateStatistic54);
    }

    @Test
    public void test01578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01578");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        double[] doubleArray1 = resizableDoubleArray0.getElements();
        double[] doubleArray2 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.setNumElements((int) (byte) 1);
        double double7 = resizableDoubleArray0.addElementRolling((double) (byte) -1);
        resizableDoubleArray0.setNumElements((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setElement((-1), 32.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Cannot set an element at a negative index");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    }

    @Test
    public void test01579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01579");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getMinImpl();
        double double7 = descriptiveStatistics0.getGeometricMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str9 = descriptiveStatistics8.toString();
        descriptiveStatistics8.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics8.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics8.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics13.getKurtosisImpl();
        long long16 = descriptiveStatistics13.getN();
        double double17 = descriptiveStatistics13.getMax();
        double double18 = descriptiveStatistics13.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double20 = descriptiveStatistics19.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics19.getMinImpl();
        descriptiveStatistics13.setSumImpl(univariateStatistic21);
        descriptiveStatistics8.setSumImpl(univariateStatistic21);
        double double24 = descriptiveStatistics8.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics8.getVarianceImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic25);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str28 = descriptiveStatistics27.toString();
        double double29 = descriptiveStatistics27.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics30.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics32 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics32.getSumsqImpl();
        descriptiveStatistics30.setKurtosisImpl(univariateStatistic33);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics30.getKurtosisImpl();
        double double36 = descriptiveStatistics27.apply(univariateStatistic35);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics38 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double39 = descriptiveStatistics38.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics38.getGeometricMeanImpl();
        descriptiveStatistics27.setMeanImpl(univariateStatistic40);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics27.getSumImpl();
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic42);
        java.lang.String str44 = descriptiveStatistics0.toString();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str9, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str28, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(descriptiveStatistics30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(descriptiveStatistics32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str44, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
    }

    @Test
    public void test01580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01580");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics0.getSumsqImpl();
        double double8 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics0.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double11 = descriptiveStatistics10.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics10.getMinImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double15 = descriptiveStatistics14.getStandardDeviation();
        long long16 = descriptiveStatistics14.getN();
        double[] doubleArray17 = descriptiveStatistics14.getSortedValues();
        double double18 = univariateStatistic12.evaluate(doubleArray17);
        descriptiveStatistics0.setMeanImpl(univariateStatistic12);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double22 = descriptiveStatistics21.getStandardDeviation();
        long long23 = descriptiveStatistics21.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics21.getSkewnessImpl();
        java.lang.String str25 = descriptiveStatistics21.toString();
        double double26 = descriptiveStatistics21.getVariance();
        descriptiveStatistics21.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics29.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics31.getSumsqImpl();
        descriptiveStatistics29.setKurtosisImpl(univariateStatistic32);
        descriptiveStatistics21.setSkewnessImpl(univariateStatistic32);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics21.getPercentileImpl();
        descriptiveStatistics0.setSumsqImpl(univariateStatistic35);
        double double37 = descriptiveStatistics0.getSum();
        double double38 = descriptiveStatistics0.getSumsq();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics0.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics0.getMaxImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str25, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(descriptiveStatistics29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(descriptiveStatistics31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(univariateStatistic40);
    }

    @Test
    public void test01581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01581");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getGeometricMeanImpl();
        java.lang.String str7 = descriptiveStatistics0.toString();
        double double8 = descriptiveStatistics0.getSum();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str7, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test01582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01582");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray3 = new org.apache.commons.math.util.ResizableDoubleArray((int) '4', 2.0f, (float) 100);
        int int4 = resizableDoubleArray3.getExpansionMode();
        double[] doubleArray5 = resizableDoubleArray3.getElements();
        resizableDoubleArray3.contract();
        double double8 = resizableDoubleArray3.addElementRolling((double) 0.0f);
        int int9 = resizableDoubleArray3.start();
        // The following exception was thrown during execution in test generation
        try {
            double double11 = resizableDoubleArray3.getElement((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 52 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test01583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01583");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.clear();
        double[] doubleArray3 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.addElement((double) 'a');
        resizableDoubleArray0.setElement(10, (double) (byte) 0);
        int int9 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.setElement(10, 0.0d);
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setExpansionMode((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal expansionMode setting.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test01584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01584");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        descriptiveStatistics0.addValue((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = null;
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic8);
        double[] doubleArray10 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics0.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics0.getVarianceImpl();
        descriptiveStatistics0.setWindowSize((int) (short) 100);
        int int15 = descriptiveStatistics0.getWindowSize();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        descriptiveStatistics17.setWindowSize((int) ' ');
        double double20 = descriptiveStatistics17.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics21.getKurtosisImpl();
        long long24 = descriptiveStatistics21.getN();
        descriptiveStatistics21.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics21.getVarianceImpl();
        descriptiveStatistics17.setMeanImpl(univariateStatistic27);
        double double29 = descriptiveStatistics17.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics30.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics30.getKurtosisImpl();
        long long33 = descriptiveStatistics30.getN();
        double[] doubleArray34 = descriptiveStatistics30.getValues();
        double double35 = descriptiveStatistics30.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics30.getVarianceImpl();
        double double37 = descriptiveStatistics30.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics30.getMaxImpl();
        descriptiveStatistics17.setGeometricMeanImpl(univariateStatistic38);
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic38);
        double double41 = descriptiveStatistics0.getSum();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(descriptiveStatistics30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
    }

    @Test
    public void test01585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01585");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        int int1 = descriptiveStatistics0.getWindowSize();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str4 = descriptiveStatistics3.toString();
        double double5 = descriptiveStatistics3.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics6.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        descriptiveStatistics6.setKurtosisImpl(univariateStatistic9);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics6.getKurtosisImpl();
        double double12 = descriptiveStatistics3.apply(univariateStatistic11);
        double double13 = descriptiveStatistics3.getSumsq();
        double double14 = descriptiveStatistics3.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics17.getSumsqImpl();
        descriptiveStatistics15.setKurtosisImpl(univariateStatistic18);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics15.getKurtosisImpl();
        descriptiveStatistics3.setSumsqImpl(univariateStatistic20);
        descriptiveStatistics0.setVarianceImpl(univariateStatistic20);
        double double23 = descriptiveStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics24 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics24.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics24.getKurtosisImpl();
        long long27 = descriptiveStatistics24.getN();
        double[] doubleArray28 = descriptiveStatistics24.getValues();
        double double29 = descriptiveStatistics24.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics24.getVarianceImpl();
        descriptiveStatistics0.setMinImpl(univariateStatistic30);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str4, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(descriptiveStatistics24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(univariateStatistic30);
    }

    @Test
    public void test01586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01586");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement(0.0d);
        int int4 = resizableDoubleArray0.getNumElements();
        int int5 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.discardFrontElements((int) (byte) 1);
        float float8 = resizableDoubleArray0.getContractionCriteria();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.setExpansionFactor(2.5f);
        int int12 = resizableDoubleArray0.start();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 2.5f + "'", float8 == 2.5f);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test01587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01587");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        float float1 = resizableDoubleArray0.getExpansionFactor();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.setNumElements((int) ' ');
        int int5 = resizableDoubleArray0.getNumElements();
        float float6 = resizableDoubleArray0.getExpansionFactor();
        int int7 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) ' ');
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setContractionCriteria((float) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float1 + "' != '" + 2.0f + "'", float1 == 2.0f);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 32 + "'", int5 == 32);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + 2.0f + "'", float6 == 2.0f);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test01588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01588");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) (byte) 0);
        resizableDoubleArray0.contract();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.addElement((double) 'a');
        int int8 = resizableDoubleArray0.start();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test01589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01589");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = null;
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = null;
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic8);
        double double10 = descriptiveStatistics0.getSumsq();
        double double11 = descriptiveStatistics0.getSumsq();
        descriptiveStatistics0.addValue(32.0d);
        descriptiveStatistics0.clear();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        descriptiveStatistics21.setKurtosisImpl(univariateStatistic24);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics21.getKurtosisImpl();
        descriptiveStatistics16.setMaxImpl(univariateStatistic26);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics28.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics30.getSumsqImpl();
        descriptiveStatistics28.setKurtosisImpl(univariateStatistic31);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics28.getKurtosisImpl();
        descriptiveStatistics16.setGeometricMeanImpl(univariateStatistic33);
        double double35 = descriptiveStatistics16.getMin();
        double[] doubleArray36 = descriptiveStatistics16.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics16.getKurtosisImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics16.getMeanImpl();
        descriptiveStatistics0.setSumsqImpl(univariateStatistic38);
        double[] doubleArray40 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double41 = univariateStatistic38.evaluate(doubleArray40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(descriptiveStatistics30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(univariateStatistic38);
    }

    @Test
    public void test01590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01590");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics0.getSumsqImpl();
        double double6 = descriptiveStatistics0.getPercentile(Double.NaN);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics0.getGeometricMeanImpl();
        double double8 = descriptiveStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double10 = descriptiveStatistics9.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics9.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str13 = descriptiveStatistics12.toString();
        descriptiveStatistics12.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics12.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics12.getSumsqImpl();
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray17 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int18 = resizableDoubleArray17.start();
        resizableDoubleArray17.addElement((double) 10);
        int int21 = resizableDoubleArray17.getExpansionMode();
        resizableDoubleArray17.addElement((double) (-1L));
        double[] doubleArray24 = resizableDoubleArray17.getElements();
        double double27 = univariateStatistic16.evaluate(doubleArray24, (int) (byte) 1, 1);
        double double28 = descriptiveStatistics9.apply(univariateStatistic16);
        double double29 = descriptiveStatistics9.getSum();
        long long30 = descriptiveStatistics9.getN();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics32 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics32.getVarianceImpl();
        descriptiveStatistics9.setKurtosisImpl(univariateStatistic33);
        double[] doubleArray35 = descriptiveStatistics9.getValues();
        double double36 = descriptiveStatistics9.getSkewness();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics9.getMeanImpl();
        descriptiveStatistics0.setSumsqImpl(univariateStatistic37);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str13, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(univariateStatistic37);
    }

    @Test
    public void test01591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01591");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double double4 = descriptiveStatistics0.getMax();
        double double5 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double7 = descriptiveStatistics6.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics6.getMinImpl();
        descriptiveStatistics0.setSumImpl(univariateStatistic8);
        descriptiveStatistics0.addValue((double) 0);
        double double12 = descriptiveStatistics0.getKurtosis();
        double double13 = descriptiveStatistics0.getMax();
        double double15 = descriptiveStatistics0.getPercentile(1.0d);
        double[] doubleArray16 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics0.getSumImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics20.getSumsqImpl();
        descriptiveStatistics18.setKurtosisImpl(univariateStatistic21);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics25.getSumsqImpl();
        descriptiveStatistics23.setKurtosisImpl(univariateStatistic26);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics23.getKurtosisImpl();
        descriptiveStatistics18.setMaxImpl(univariateStatistic28);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics30.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics32 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics32.getSumsqImpl();
        descriptiveStatistics30.setKurtosisImpl(univariateStatistic33);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics30.getKurtosisImpl();
        descriptiveStatistics18.setGeometricMeanImpl(univariateStatistic35);
        double double37 = descriptiveStatistics18.getMin();
        double double38 = descriptiveStatistics18.getGeometricMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics39 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str40 = descriptiveStatistics39.toString();
        descriptiveStatistics39.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics39.getGeometricMeanImpl();
        double double43 = descriptiveStatistics39.getMax();
        double double44 = descriptiveStatistics39.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics39.getVarianceImpl();
        double double46 = descriptiveStatistics39.getSkewness();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics48 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 1);
        double double49 = descriptiveStatistics48.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics50 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str51 = descriptiveStatistics50.toString();
        double double52 = descriptiveStatistics50.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics53 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic54 = descriptiveStatistics53.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics55 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic56 = descriptiveStatistics55.getSumsqImpl();
        descriptiveStatistics53.setKurtosisImpl(univariateStatistic56);
        descriptiveStatistics50.setSkewnessImpl(univariateStatistic56);
        double double59 = descriptiveStatistics50.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics60 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic61 = descriptiveStatistics60.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics62 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic63 = descriptiveStatistics62.getSumsqImpl();
        descriptiveStatistics60.setKurtosisImpl(univariateStatistic63);
        descriptiveStatistics60.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic66 = descriptiveStatistics60.getPercentileImpl();
        double double67 = descriptiveStatistics60.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics68 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic69 = descriptiveStatistics68.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic70 = descriptiveStatistics68.getKurtosisImpl();
        double[] doubleArray71 = descriptiveStatistics68.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic72 = descriptiveStatistics68.getVarianceImpl();
        double double73 = descriptiveStatistics60.apply(univariateStatistic72);
        double double74 = descriptiveStatistics50.apply(univariateStatistic72);
        descriptiveStatistics48.setKurtosisImpl(univariateStatistic72);
        descriptiveStatistics39.setMeanImpl(univariateStatistic72);
        double double77 = descriptiveStatistics18.apply(univariateStatistic72);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic78 = descriptiveStatistics18.getSumImpl();
        double[] doubleArray79 = descriptiveStatistics18.getValues();
        // The following exception was thrown during execution in test generation
        try {
            double double82 = univariateStatistic17.evaluate(doubleArray79, (int) '#', 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(descriptiveStatistics20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(descriptiveStatistics30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(descriptiveStatistics32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(descriptiveStatistics39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str40, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(descriptiveStatistics50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str51, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertNotNull(descriptiveStatistics53);
        org.junit.Assert.assertNotNull(univariateStatistic54);
        org.junit.Assert.assertNotNull(descriptiveStatistics55);
        org.junit.Assert.assertNotNull(univariateStatistic56);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(descriptiveStatistics60);
        org.junit.Assert.assertNotNull(univariateStatistic61);
        org.junit.Assert.assertNotNull(descriptiveStatistics62);
        org.junit.Assert.assertNotNull(univariateStatistic63);
        org.junit.Assert.assertNotNull(univariateStatistic66);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(descriptiveStatistics68);
        org.junit.Assert.assertNotNull(univariateStatistic69);
        org.junit.Assert.assertNotNull(univariateStatistic70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic72);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertNotNull(univariateStatistic78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[]");
    }

    @Test
    public void test01592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01592");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        double double4 = descriptiveStatistics1.getMin();
        double double5 = descriptiveStatistics1.getMax();
        double double6 = descriptiveStatistics1.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getKurtosisImpl();
        descriptiveStatistics1.setSkewnessImpl(univariateStatistic9);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics1.getGeometricMeanImpl();
        double double12 = descriptiveStatistics1.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str14 = descriptiveStatistics13.toString();
        double double15 = descriptiveStatistics13.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic19);
        descriptiveStatistics13.setSkewnessImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics22.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics24 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics24.getSumsqImpl();
        descriptiveStatistics22.setKurtosisImpl(univariateStatistic25);
        descriptiveStatistics22.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics22.getSkewnessImpl();
        descriptiveStatistics13.setSkewnessImpl(univariateStatistic28);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics13.getPercentileImpl();
        descriptiveStatistics1.setSumsqImpl(univariateStatistic30);
        // The following exception was thrown during execution in test generation
        try {
            descriptiveStatistics1.setWindowSize((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: window size must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str14, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(descriptiveStatistics22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(descriptiveStatistics24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(univariateStatistic30);
    }

    @Test
    public void test01593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01593");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        double double5 = resizableDoubleArray0.addElementRolling((double) 0.0f);
        resizableDoubleArray0.setElement((int) (byte) 10, (double) (short) -1);
        int int9 = resizableDoubleArray0.getNumElements();
        int int10 = resizableDoubleArray0.start();
        double[] doubleArray11 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.discardFrontElements((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setExpansionFactor((float) 102);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 11 + "'", int9 == 11);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0]");
    }

    @Test
    public void test01594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01594");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double6 = descriptiveStatistics5.getStandardDeviation();
        long long7 = descriptiveStatistics5.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics5.getSkewnessImpl();
        java.lang.String str9 = descriptiveStatistics5.toString();
        double double10 = descriptiveStatistics5.getVariance();
        descriptiveStatistics5.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        descriptiveStatistics13.setKurtosisImpl(univariateStatistic16);
        descriptiveStatistics5.setSkewnessImpl(univariateStatistic16);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics5.getPercentileImpl();
        descriptiveStatistics1.setMinImpl(univariateStatistic19);
        long long21 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics1.getSumsqImpl();
        double double23 = descriptiveStatistics1.getGeometricMean();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str9, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
    }

    @Test
    public void test01595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01595");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray4 = new org.apache.commons.math.util.ResizableDoubleArray(2, (float) '#', (float) 103, 0);
        float float5 = resizableDoubleArray4.getExpansionFactor();
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 35.0f + "'", float5 == 35.0f);
    }

    @Test
    public void test01596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01596");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getGeometricMeanImpl();
        double double4 = descriptiveStatistics0.getMax();
        double[] doubleArray5 = descriptiveStatistics0.getSortedValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getMaxImpl();
        java.lang.String str7 = descriptiveStatistics0.toString();
        java.lang.String str8 = descriptiveStatistics0.toString();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics0.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics0.getMaxImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics11.getKurtosisImpl();
        double[] doubleArray14 = descriptiveStatistics11.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics11.getVarianceImpl();
        descriptiveStatistics11.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics11.getGeometricMeanImpl();
        double double18 = descriptiveStatistics11.getSkewness();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics11.getMinImpl();
        // The following exception was thrown during execution in test generation
        try {
            descriptiveStatistics0.setPercentileImpl(univariateStatistic19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Percentile implementation does not support setQuantile");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str7, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str8, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(univariateStatistic19);
    }

    @Test
    public void test01597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01597");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        double[] doubleArray1 = resizableDoubleArray0.getElements();
        float float2 = resizableDoubleArray0.getContractionCriteria();
        int int3 = resizableDoubleArray0.getExpansionMode();
        float float4 = resizableDoubleArray0.getContractionCriteria();
        resizableDoubleArray0.addElement((double) 0.0f);
        resizableDoubleArray0.addElement((double) 100);
        float float9 = resizableDoubleArray0.getExpansionFactor();
        double double11 = resizableDoubleArray0.addElementRolling((double) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.discardFrontElements((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot discard more elements than arecontained in this array.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertTrue("'" + float2 + "' != '" + 2.5f + "'", float2 == 2.5f);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 2.5f + "'", float4 == 2.5f);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 2.0f + "'", float9 == 2.0f);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    }

    @Test
    public void test01598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01598");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        float float1 = resizableDoubleArray0.getExpansionFactor();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.setNumElements((int) ' ');
        float float5 = resizableDoubleArray0.getContractionCriteria();
        float float6 = resizableDoubleArray0.getContractionCriteria();
        resizableDoubleArray0.addElement((double) 0L);
        resizableDoubleArray0.setContractionCriteria((float) 10);
        org.junit.Assert.assertTrue("'" + float1 + "' != '" + 2.0f + "'", float1 == 2.0f);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 2.5f + "'", float5 == 2.5f);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + 2.5f + "'", float6 == 2.5f);
    }

    @Test
    public void test01599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01599");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        double double3 = descriptiveStatistics1.getVariance();
        double double4 = descriptiveStatistics1.getSkewness();
        double double5 = descriptiveStatistics1.getMin();
        double double6 = descriptiveStatistics1.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics1.getSumsqImpl();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(univariateStatistic7);
    }

    @Test
    public void test01600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01600");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.clear();
        double[] doubleArray3 = resizableDoubleArray0.getElements();
        double[] doubleArray4 = resizableDoubleArray0.getElements();
        float float5 = resizableDoubleArray0.getContractionCriteria();
        int int6 = resizableDoubleArray0.start();
        int int7 = resizableDoubleArray0.getNumElements();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.discardFrontElements(12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot discard more elements than arecontained in this array.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 2.5f + "'", float5 == 2.5f);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test01601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01601");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        double[] doubleArray3 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics4 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics4.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics4.getKurtosisImpl();
        long long7 = descriptiveStatistics4.getN();
        double[] doubleArray8 = descriptiveStatistics4.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics4.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics4.getMinImpl();
        double double11 = descriptiveStatistics4.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str13 = descriptiveStatistics12.toString();
        double double14 = descriptiveStatistics12.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics17.getSumsqImpl();
        descriptiveStatistics15.setKurtosisImpl(univariateStatistic18);
        descriptiveStatistics12.setSkewnessImpl(univariateStatistic18);
        double double21 = descriptiveStatistics12.getStandardDeviation();
        descriptiveStatistics12.clear();
        double double23 = descriptiveStatistics12.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics12.getGeometricMeanImpl();
        descriptiveStatistics4.setGeometricMeanImpl(univariateStatistic24);
        descriptiveStatistics0.setSumsqImpl(univariateStatistic24);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str29 = descriptiveStatistics28.toString();
        double double30 = descriptiveStatistics28.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics31.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics33 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics33.getSumsqImpl();
        descriptiveStatistics31.setKurtosisImpl(univariateStatistic34);
        descriptiveStatistics28.setSkewnessImpl(univariateStatistic34);
        double double37 = descriptiveStatistics28.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics39 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double40 = descriptiveStatistics39.getStandardDeviation();
        long long41 = descriptiveStatistics39.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics39.getMinImpl();
        descriptiveStatistics28.setVarianceImpl(univariateStatistic42);
        int int44 = descriptiveStatistics28.getWindowSize();
        java.lang.String str45 = descriptiveStatistics28.toString();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics47 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double48 = descriptiveStatistics47.getStandardDeviation();
        long long49 = descriptiveStatistics47.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic50 = descriptiveStatistics47.getMinImpl();
        double double51 = descriptiveStatistics47.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics52 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics53 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic54 = descriptiveStatistics53.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics55 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic56 = descriptiveStatistics55.getSumsqImpl();
        descriptiveStatistics53.setKurtosisImpl(univariateStatistic56);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic58 = descriptiveStatistics53.getKurtosisImpl();
        double[] doubleArray62 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double63 = univariateStatistic58.evaluate(doubleArray62);
        descriptiveStatistics52.setMaxImpl(univariateStatistic58);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics65 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic66 = descriptiveStatistics65.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic67 = descriptiveStatistics65.getKurtosisImpl();
        long long68 = descriptiveStatistics65.getN();
        double[] doubleArray69 = descriptiveStatistics65.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic70 = descriptiveStatistics65.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic71 = descriptiveStatistics65.getMeanImpl();
        descriptiveStatistics52.setGeometricMeanImpl(univariateStatistic71);
        descriptiveStatistics47.setGeometricMeanImpl(univariateStatistic71);
        descriptiveStatistics28.setSumImpl(univariateStatistic71);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic75 = descriptiveStatistics28.getSumsqImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic75);
        double double77 = descriptiveStatistics0.getSum();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(descriptiveStatistics4);
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str13, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str29, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(descriptiveStatistics31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(descriptiveStatistics33);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str45, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic50);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(descriptiveStatistics52);
        org.junit.Assert.assertNotNull(descriptiveStatistics53);
        org.junit.Assert.assertNotNull(univariateStatistic54);
        org.junit.Assert.assertNotNull(descriptiveStatistics55);
        org.junit.Assert.assertNotNull(univariateStatistic56);
        org.junit.Assert.assertNotNull(univariateStatistic58);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 2.0d + "'", double63 == 2.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics65);
        org.junit.Assert.assertNotNull(univariateStatistic66);
        org.junit.Assert.assertNotNull(univariateStatistic67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic70);
        org.junit.Assert.assertNotNull(univariateStatistic71);
        org.junit.Assert.assertNotNull(univariateStatistic75);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
    }

    @Test
    public void test01602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01602");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        double double3 = descriptiveStatistics0.getMax();
        double double4 = descriptiveStatistics0.getGeometricMean();
        double double5 = descriptiveStatistics0.getMean();
        descriptiveStatistics0.addValue(10.000000000000002d);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test01603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01603");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getMinImpl();
        long long7 = descriptiveStatistics0.getN();
        double double8 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str10 = descriptiveStatistics9.toString();
        descriptiveStatistics9.addValue((double) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics9.getPercentileImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str10, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic13);
    }

    @Test
    public void test01604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01604");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray4 = new org.apache.commons.math.util.ResizableDoubleArray(102, (float) (-1L), (float) (-1L), 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The expansion factor must be a number greater than 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01605");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics0.getMeanImpl();
        int int8 = descriptiveStatistics0.getWindowSize();
        double double9 = descriptiveStatistics0.getMean();
        descriptiveStatistics0.clear();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test01606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01606");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        descriptiveStatistics0.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics9.getSumsqImpl();
        descriptiveStatistics7.setKurtosisImpl(univariateStatistic10);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics7.getKurtosisImpl();
        double[] doubleArray16 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double17 = univariateStatistic12.evaluate(doubleArray16);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic12);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics0.getSkewnessImpl();
        double double20 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str22 = descriptiveStatistics21.toString();
        descriptiveStatistics21.addValue((double) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics21.getKurtosisImpl();
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic25);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        descriptiveStatistics27.setWindowSize((int) (byte) -1);
        long long30 = descriptiveStatistics27.getN();
        double double31 = descriptiveStatistics27.getMean();
        double double32 = descriptiveStatistics27.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics34 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 1);
        double double35 = descriptiveStatistics34.getMax();
        long long36 = descriptiveStatistics34.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics34.getVarianceImpl();
        descriptiveStatistics27.setGeometricMeanImpl(univariateStatistic37);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics27.getMaxImpl();
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic39);
        double double41 = descriptiveStatistics0.getSum();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 2.0d + "'", double17 == 2.0d);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str22, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
    }

    @Test
    public void test01607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01607");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        double double3 = descriptiveStatistics1.getVariance();
        double double4 = descriptiveStatistics1.getVariance();
        double double5 = descriptiveStatistics1.getMin();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test01608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01608");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) 10);
        int int4 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.clear();
        int int6 = resizableDoubleArray0.getNumElements();
        double double8 = resizableDoubleArray0.addElementRolling(Double.NaN);
        // The following exception was thrown during execution in test generation
        try {
            double double10 = resizableDoubleArray0.getElement(102);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 102 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    }

    @Test
    public void test01609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01609");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics1.getPercentileImpl();
        long long3 = descriptiveStatistics1.getN();
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
    }

    @Test
    public void test01610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01610");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray3 = new org.apache.commons.math.util.ResizableDoubleArray((int) (byte) 100, 10.5f, 2.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01611");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        double[] doubleArray3 = descriptiveStatistics0.getValues();
        double double4 = descriptiveStatistics0.getVariance();
        double double5 = descriptiveStatistics0.getMax();
        double double6 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str8 = descriptiveStatistics7.toString();
        double double9 = descriptiveStatistics7.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        descriptiveStatistics10.setKurtosisImpl(univariateStatistic13);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics10.getKurtosisImpl();
        double double16 = descriptiveStatistics7.apply(univariateStatistic15);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str18 = descriptiveStatistics17.toString();
        descriptiveStatistics17.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics17.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics17.getSumsqImpl();
        descriptiveStatistics7.setMeanImpl(univariateStatistic21);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics7.getSkewnessImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic23);
        double double25 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str27 = descriptiveStatistics26.toString();
        descriptiveStatistics26.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics26.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics26.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics31.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics31.getKurtosisImpl();
        long long34 = descriptiveStatistics31.getN();
        double double35 = descriptiveStatistics31.getMax();
        double double36 = descriptiveStatistics31.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics37 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double38 = descriptiveStatistics37.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics37.getMinImpl();
        descriptiveStatistics31.setSumImpl(univariateStatistic39);
        descriptiveStatistics26.setSumImpl(univariateStatistic39);
        double double42 = descriptiveStatistics26.getVariance();
        double double43 = descriptiveStatistics26.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics44 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics44.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics44.getKurtosisImpl();
        long long47 = descriptiveStatistics44.getN();
        double[] doubleArray48 = descriptiveStatistics44.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics44.getSumImpl();
        double double50 = descriptiveStatistics44.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics44.getSumImpl();
        descriptiveStatistics26.setKurtosisImpl(univariateStatistic51);
        descriptiveStatistics0.setSumImpl(univariateStatistic51);
        double double54 = descriptiveStatistics0.getVariance();
        double double55 = descriptiveStatistics0.getSumsq();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str8, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str18, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str27, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(descriptiveStatistics31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(descriptiveStatistics37);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(descriptiveStatistics44);
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
    }

    @Test
    public void test01612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01612");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray2 = new org.apache.commons.math.util.ResizableDoubleArray(35, (float) (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The expansion factor must be a number greater than 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01613");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.setExpansionMode((int) (short) 1);
        int int4 = resizableDoubleArray0.getNumElements();
        float float5 = resizableDoubleArray0.getContractionCriteria();
        double double7 = resizableDoubleArray0.addElementRolling((-1.0d));
        int int8 = resizableDoubleArray0.start();
        resizableDoubleArray0.clear();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setExpansionFactor((float) 31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 2.5f + "'", float5 == 2.5f);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test01614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01614");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics5.getKurtosisImpl();
        long long8 = descriptiveStatistics5.getN();
        double double9 = descriptiveStatistics5.getMax();
        double double10 = descriptiveStatistics5.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double12 = descriptiveStatistics11.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics11.getMinImpl();
        descriptiveStatistics5.setSumImpl(univariateStatistic13);
        descriptiveStatistics0.setSumImpl(univariateStatistic13);
        double double16 = descriptiveStatistics0.getVariance();
        double double17 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics18.getKurtosisImpl();
        long long21 = descriptiveStatistics18.getN();
        double[] doubleArray22 = descriptiveStatistics18.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics18.getSumImpl();
        double double24 = descriptiveStatistics18.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics18.getSumImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic25);
        double[] doubleArray27 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics0.getGeometricMeanImpl();
        double double29 = descriptiveStatistics0.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics31.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics31.getKurtosisImpl();
        double[] doubleArray34 = descriptiveStatistics31.getValues();
        double double35 = descriptiveStatistics31.getVariance();
        double double36 = descriptiveStatistics31.getMax();
        double double37 = descriptiveStatistics31.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics38 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str39 = descriptiveStatistics38.toString();
        double double40 = descriptiveStatistics38.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics41.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics43.getSumsqImpl();
        descriptiveStatistics41.setKurtosisImpl(univariateStatistic44);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics41.getKurtosisImpl();
        double double47 = descriptiveStatistics38.apply(univariateStatistic46);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics48 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str49 = descriptiveStatistics48.toString();
        descriptiveStatistics48.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics48.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics48.getSumsqImpl();
        descriptiveStatistics38.setMeanImpl(univariateStatistic52);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic54 = descriptiveStatistics38.getSkewnessImpl();
        descriptiveStatistics31.setMaxImpl(univariateStatistic54);
        double double56 = descriptiveStatistics31.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics57 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str58 = descriptiveStatistics57.toString();
        descriptiveStatistics57.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic60 = descriptiveStatistics57.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic61 = descriptiveStatistics57.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics62 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic63 = descriptiveStatistics62.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic64 = descriptiveStatistics62.getKurtosisImpl();
        long long65 = descriptiveStatistics62.getN();
        double double66 = descriptiveStatistics62.getMax();
        double double67 = descriptiveStatistics62.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics68 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double69 = descriptiveStatistics68.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic70 = descriptiveStatistics68.getMinImpl();
        descriptiveStatistics62.setSumImpl(univariateStatistic70);
        descriptiveStatistics57.setSumImpl(univariateStatistic70);
        double double73 = descriptiveStatistics57.getVariance();
        double double74 = descriptiveStatistics57.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics75 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic76 = descriptiveStatistics75.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic77 = descriptiveStatistics75.getKurtosisImpl();
        long long78 = descriptiveStatistics75.getN();
        double[] doubleArray79 = descriptiveStatistics75.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic80 = descriptiveStatistics75.getSumImpl();
        double double81 = descriptiveStatistics75.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic82 = descriptiveStatistics75.getSumImpl();
        descriptiveStatistics57.setKurtosisImpl(univariateStatistic82);
        descriptiveStatistics31.setSumImpl(univariateStatistic82);
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray85 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int86 = resizableDoubleArray85.getExpansionMode();
        resizableDoubleArray85.addElement(0.0d);
        int int89 = resizableDoubleArray85.getNumElements();
        int int90 = resizableDoubleArray85.getExpansionMode();
        resizableDoubleArray85.discardFrontElements((int) (byte) 1);
        float float93 = resizableDoubleArray85.getContractionCriteria();
        double[] doubleArray94 = resizableDoubleArray85.getElements();
        double double95 = univariateStatistic82.evaluate(doubleArray94);
        double double96 = univariateStatistic30.evaluate(doubleArray94);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(descriptiveStatistics31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(descriptiveStatistics38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str39, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(descriptiveStatistics41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(descriptiveStatistics43);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(descriptiveStatistics48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str49, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertNotNull(univariateStatistic52);
        org.junit.Assert.assertNotNull(univariateStatistic54);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(descriptiveStatistics57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str58, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic60);
        org.junit.Assert.assertNotNull(univariateStatistic61);
        org.junit.Assert.assertNotNull(descriptiveStatistics62);
        org.junit.Assert.assertNotNull(univariateStatistic63);
        org.junit.Assert.assertNotNull(univariateStatistic64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(descriptiveStatistics68);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertNotNull(univariateStatistic70);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertNotNull(descriptiveStatistics75);
        org.junit.Assert.assertNotNull(univariateStatistic76);
        org.junit.Assert.assertNotNull(univariateStatistic77);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic80);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertNotNull(univariateStatistic82);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + float93 + "' != '" + 2.5f + "'", float93 == 2.5f);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double95));
        org.junit.Assert.assertTrue(Double.isNaN(double96));
    }

    @Test
    public void test01615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01615");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics1.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        descriptiveStatistics1.setKurtosisImpl(univariateStatistic4);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics1.getKurtosisImpl();
        double[] doubleArray10 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double11 = univariateStatistic6.evaluate(doubleArray10);
        descriptiveStatistics0.setMaxImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics13.getKurtosisImpl();
        long long16 = descriptiveStatistics13.getN();
        double[] doubleArray17 = descriptiveStatistics13.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics13.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics13.getMeanImpl();
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics22.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics24 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics24.getSumsqImpl();
        descriptiveStatistics22.setKurtosisImpl(univariateStatistic25);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics22.getKurtosisImpl();
        double double28 = descriptiveStatistics22.getStandardDeviation();
        double double29 = descriptiveStatistics22.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics22.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics32 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double33 = descriptiveStatistics32.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics32.getGeometricMeanImpl();
        double double35 = descriptiveStatistics32.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics36.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics36.getKurtosisImpl();
        double[] doubleArray39 = descriptiveStatistics36.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics36.getVarianceImpl();
        descriptiveStatistics32.setSumsqImpl(univariateStatistic40);
        double double42 = descriptiveStatistics22.apply(univariateStatistic40);
        descriptiveStatistics0.setVarianceImpl(univariateStatistic40);
        double double44 = descriptiveStatistics0.getGeometricMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics46 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double47 = descriptiveStatistics46.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics46.getGeometricMeanImpl();
        double double49 = descriptiveStatistics46.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics50 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics50.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics50.getKurtosisImpl();
        double[] doubleArray53 = descriptiveStatistics50.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic54 = descriptiveStatistics50.getVarianceImpl();
        descriptiveStatistics46.setSumsqImpl(univariateStatistic54);
        double double56 = descriptiveStatistics0.apply(univariateStatistic54);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics0.getMeanImpl();
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray58 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int59 = resizableDoubleArray58.getExpansionMode();
        resizableDoubleArray58.addElement(0.0d);
        int int62 = resizableDoubleArray58.getExpansionMode();
        float float63 = resizableDoubleArray58.getContractionCriteria();
        resizableDoubleArray58.setElement((int) (short) 1, (double) '4');
        resizableDoubleArray58.setContractionCriteria(10.0f);
        double[] doubleArray69 = resizableDoubleArray58.getValues();
        double double72 = univariateStatistic57.evaluate(doubleArray69, 0, 0);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(descriptiveStatistics1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 2.0d + "'", double11 == 2.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(descriptiveStatistics22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(descriptiveStatistics24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(descriptiveStatistics50);
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertNotNull(univariateStatistic52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic54);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + 2.5f + "'", float63 == 2.5f);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[0.0, 52.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double72));
    }

    @Test
    public void test01616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01616");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        java.lang.String str2 = descriptiveStatistics0.toString();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics3.getKurtosisImpl();
        long long6 = descriptiveStatistics3.getN();
        descriptiveStatistics3.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics3.getSkewnessImpl();
        descriptiveStatistics0.setSumsqImpl(univariateStatistic9);
        double double11 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics0.getSkewnessImpl();
        double double13 = descriptiveStatistics0.getMean();
        descriptiveStatistics0.clear();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str2, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test01617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01617");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        double double5 = resizableDoubleArray0.addElementRolling((double) 0.0f);
        resizableDoubleArray0.setElement((int) (byte) 10, (double) (short) -1);
        int int9 = resizableDoubleArray0.getNumElements();
        double[] doubleArray10 = resizableDoubleArray0.getElements();
        // The following exception was thrown during execution in test generation
        try {
            double double12 = resizableDoubleArray0.getElement(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 100 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 11 + "'", int9 == 11);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0]");
    }

    @Test
    public void test01618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01618");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) (byte) 0);
        resizableDoubleArray0.contract();
        float float5 = resizableDoubleArray0.getContractionCriteria();
        double double7 = resizableDoubleArray0.addElementRolling((double) 10L);
        float float8 = resizableDoubleArray0.getExpansionFactor();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 2.5f + "'", float5 == 2.5f);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 2.0f + "'", float8 == 2.0f);
    }

    @Test
    public void test01619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01619");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray1 = new org.apache.commons.math.util.ResizableDoubleArray((int) (byte) 10);
        double[] doubleArray2 = resizableDoubleArray1.getValues();
        int int3 = resizableDoubleArray1.getNumElements();
        resizableDoubleArray1.addElement(10.0d);
        double double7 = resizableDoubleArray1.addElementRolling((double) 101);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10.0d + "'", double7 == 10.0d);
    }

    @Test
    public void test01620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01620");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        int int3 = resizableDoubleArray0.start();
        resizableDoubleArray0.setElement((int) (short) 10, (double) 100L);
        double[] doubleArray7 = resizableDoubleArray0.getValues();
        float float8 = resizableDoubleArray0.getContractionCriteria();
        // The following exception was thrown during execution in test generation
        try {
            double double10 = resizableDoubleArray0.getElement((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 100 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 2.5f + "'", float8 == 2.5f);
    }

    @Test
    public void test01621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01621");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray1 = new org.apache.commons.math.util.ResizableDoubleArray(102);
        double double3 = resizableDoubleArray1.addElementRolling((double) '4');
        int int4 = resizableDoubleArray1.getNumElements();
        int int5 = resizableDoubleArray1.getNumElements();
        float float6 = resizableDoubleArray1.getExpansionFactor();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray1.setExpansionFactor(0.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The expansion factor must be a number greater than 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + 2.0f + "'", float6 == 2.0f);
    }

    @Test
    public void test01622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01622");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        double double5 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getMeanImpl();
        double double7 = descriptiveStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double9 = descriptiveStatistics8.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics8.getSumImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double13 = descriptiveStatistics12.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics12.getGeometricMeanImpl();
        double double15 = descriptiveStatistics12.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics12.getMinImpl();
        descriptiveStatistics8.setGeometricMeanImpl(univariateStatistic16);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic16);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics0.getSumsqImpl();
        // The following exception was thrown during execution in test generation
        try {
            double double21 = descriptiveStatistics0.getElement(0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 0 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(univariateStatistic19);
    }

    @Test
    public void test01623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01623");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        int int3 = resizableDoubleArray0.start();
        resizableDoubleArray0.setElement((int) (short) 10, (double) 100L);
        double[] doubleArray7 = resizableDoubleArray0.getValues();
        resizableDoubleArray0.contract();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.discardFrontElements((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot discard a negative number of elements.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test01624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01624");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        double double5 = resizableDoubleArray0.addElementRolling((double) 0.0f);
        resizableDoubleArray0.setElement((int) (byte) 10, (double) (short) -1);
        int int9 = resizableDoubleArray0.getNumElements();
        int int10 = resizableDoubleArray0.start();
        double[] doubleArray11 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.contract();
        double[] doubleArray13 = resizableDoubleArray0.getElements();
        int int14 = resizableDoubleArray0.start();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setExpansionFactor(10.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 11 + "'", int9 == 11);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test01625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01625");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        int int3 = resizableDoubleArray0.start();
        resizableDoubleArray0.setElement((int) (short) 10, (double) 100L);
        double[] doubleArray7 = resizableDoubleArray0.getValues();
        double double9 = resizableDoubleArray0.addElementRolling(0.0d);
        resizableDoubleArray0.discardFrontElements((int) (short) 0);
        float float12 = resizableDoubleArray0.getExpansionFactor();
        double[] doubleArray13 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.contract();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setExpansionMode((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal expansionMode setting.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 2.0f + "'", float12 == 2.0f);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0, 0.0]");
    }

    @Test
    public void test01626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01626");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) (byte) 0);
        resizableDoubleArray0.contract();
        double[] doubleArray5 = resizableDoubleArray0.getElements();
        int int6 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.setElement(11, 2704.0d);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test01627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01627");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        descriptiveStatistics0.setWindowSize((int) (byte) -1);
        long long3 = descriptiveStatistics0.getN();
        double double4 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getVarianceImpl();
        long long7 = descriptiveStatistics0.getN();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test01628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01628");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getMinImpl();
        descriptiveStatistics0.clear();
        double double8 = descriptiveStatistics0.getMax();
        double double9 = descriptiveStatistics0.getVariance();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test01629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01629");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics5.getKurtosisImpl();
        long long8 = descriptiveStatistics5.getN();
        double double9 = descriptiveStatistics5.getMax();
        double double10 = descriptiveStatistics5.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double12 = descriptiveStatistics11.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics11.getMinImpl();
        descriptiveStatistics5.setSumImpl(univariateStatistic13);
        descriptiveStatistics0.setSumImpl(univariateStatistic13);
        double double16 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double18 = descriptiveStatistics17.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics19.getKurtosisImpl();
        long long22 = descriptiveStatistics19.getN();
        descriptiveStatistics19.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics25.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics27.getSumsqImpl();
        descriptiveStatistics25.setKurtosisImpl(univariateStatistic28);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics30.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics32 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics32.getSumsqImpl();
        descriptiveStatistics30.setKurtosisImpl(univariateStatistic33);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics30.getKurtosisImpl();
        descriptiveStatistics25.setMaxImpl(univariateStatistic35);
        double double37 = descriptiveStatistics25.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics25.getMinImpl();
        descriptiveStatistics19.setMinImpl(univariateStatistic38);
        descriptiveStatistics17.setMeanImpl(univariateStatistic38);
        double double41 = descriptiveStatistics17.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics42 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic43 = descriptiveStatistics42.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics44 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics44.getSumsqImpl();
        descriptiveStatistics42.setKurtosisImpl(univariateStatistic45);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics42.getKurtosisImpl();
        descriptiveStatistics17.setKurtosisImpl(univariateStatistic47);
        descriptiveStatistics0.setSumsqImpl(univariateStatistic47);
        long long50 = descriptiveStatistics0.getN();
        double double51 = descriptiveStatistics0.getGeometricMean();
        double double52 = descriptiveStatistics0.getMax();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(descriptiveStatistics30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(descriptiveStatistics32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(descriptiveStatistics42);
        org.junit.Assert.assertNotNull(univariateStatistic43);
        org.junit.Assert.assertNotNull(descriptiveStatistics44);
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
    }

    @Test
    public void test01630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01630");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double double4 = descriptiveStatistics0.getGeometricMean();
        double double5 = descriptiveStatistics0.getSum();
        double double6 = descriptiveStatistics0.getVariance();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test01631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01631");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        double[] doubleArray3 = resizableDoubleArray0.getValues();
        double double5 = resizableDoubleArray0.addElementRolling((double) (-1));
        resizableDoubleArray0.clear();
        int int7 = resizableDoubleArray0.start();
        resizableDoubleArray0.setContractionCriteria(35.5f);
        resizableDoubleArray0.addElement((double) 35.0f);
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setElement((-1), 99.00990099009901d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Cannot set an element at a negative index");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test01632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01632");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) 10);
        int int4 = resizableDoubleArray0.getNumElements();
        int int5 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 35.5f);
        // The following exception was thrown during execution in test generation
        try {
            double double9 = resizableDoubleArray0.getElement((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 10 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test01633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01633");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray4 = new org.apache.commons.math.util.ResizableDoubleArray(33, (float) 103, (float) 100, 31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01634");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics6.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics6.getKurtosisImpl();
        long long9 = descriptiveStatistics6.getN();
        double double10 = descriptiveStatistics6.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        descriptiveStatistics11.setKurtosisImpl(univariateStatistic14);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics16.getKurtosisImpl();
        descriptiveStatistics11.setMaxImpl(univariateStatistic21);
        descriptiveStatistics6.setSumImpl(univariateStatistic21);
        descriptiveStatistics0.setSumsqImpl(univariateStatistic21);
        double[] doubleArray25 = descriptiveStatistics0.getSortedValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double28 = descriptiveStatistics27.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics27.getGeometricMeanImpl();
        double double30 = descriptiveStatistics27.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics31.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics31.getKurtosisImpl();
        double[] doubleArray34 = descriptiveStatistics31.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics31.getVarianceImpl();
        descriptiveStatistics27.setSumsqImpl(univariateStatistic35);
        descriptiveStatistics0.setMeanImpl(univariateStatistic35);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics0.getPercentileImpl();
        // The following exception was thrown during execution in test generation
        try {
            double double40 = descriptiveStatistics0.getElement(1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 1 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(descriptiveStatistics31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertNotNull(univariateStatistic38);
    }

    @Test
    public void test01635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01635");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        double double5 = descriptiveStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double8 = descriptiveStatistics7.getStandardDeviation();
        long long9 = descriptiveStatistics7.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics7.getKurtosisImpl();
        descriptiveStatistics0.setSumImpl(univariateStatistic10);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics0.getMaxImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        descriptiveStatistics13.setKurtosisImpl(univariateStatistic16);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics20.getSumsqImpl();
        descriptiveStatistics18.setKurtosisImpl(univariateStatistic21);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics18.getKurtosisImpl();
        descriptiveStatistics13.setMaxImpl(univariateStatistic23);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics25.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics27.getSumsqImpl();
        descriptiveStatistics25.setKurtosisImpl(univariateStatistic28);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics25.getKurtosisImpl();
        descriptiveStatistics13.setGeometricMeanImpl(univariateStatistic30);
        double double32 = descriptiveStatistics13.getMin();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics33 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double34 = descriptiveStatistics33.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics35 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics35.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics35.getKurtosisImpl();
        long long38 = descriptiveStatistics35.getN();
        descriptiveStatistics35.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics41.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics43.getSumsqImpl();
        descriptiveStatistics41.setKurtosisImpl(univariateStatistic44);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics46 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics46.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics48 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics48.getSumsqImpl();
        descriptiveStatistics46.setKurtosisImpl(univariateStatistic49);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics46.getKurtosisImpl();
        descriptiveStatistics41.setMaxImpl(univariateStatistic51);
        double double53 = descriptiveStatistics41.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic54 = descriptiveStatistics41.getMinImpl();
        descriptiveStatistics35.setMinImpl(univariateStatistic54);
        descriptiveStatistics33.setMeanImpl(univariateStatistic54);
        descriptiveStatistics13.setSumImpl(univariateStatistic54);
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray58 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int59 = resizableDoubleArray58.getExpansionMode();
        resizableDoubleArray58.addElement((double) 0);
        double double63 = resizableDoubleArray58.addElementRolling((double) 0.0f);
        resizableDoubleArray58.setElement((int) (byte) 10, (double) (short) -1);
        float float67 = resizableDoubleArray58.getExpansionFactor();
        double[] doubleArray68 = resizableDoubleArray58.getElements();
        double double69 = univariateStatistic54.evaluate(doubleArray68);
        descriptiveStatistics0.setSumsqImpl(univariateStatistic54);
        long long71 = descriptiveStatistics0.getN();
        double[] doubleArray72 = descriptiveStatistics0.getSortedValues();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(descriptiveStatistics20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(descriptiveStatistics33);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(descriptiveStatistics35);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(descriptiveStatistics43);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(descriptiveStatistics46);
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertNotNull(descriptiveStatistics48);
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(univariateStatistic54);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertTrue("'" + float67 + "' != '" + 2.0f + "'", float67 == 2.0f);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + (-1.0d) + "'", double69 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[]");
    }

    @Test
    public void test01636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01636");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics7.getKurtosisImpl();
        long long10 = descriptiveStatistics7.getN();
        descriptiveStatistics7.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics7.getSkewnessImpl();
        descriptiveStatistics0.setSumsqImpl(univariateStatistic13);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics0.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics17.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics17.getKurtosisImpl();
        long long20 = descriptiveStatistics17.getN();
        double[] doubleArray21 = descriptiveStatistics17.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics17.getSumImpl();
        double double23 = descriptiveStatistics17.getStandardDeviation();
        double double24 = descriptiveStatistics17.getVariance();
        descriptiveStatistics17.addValue(100.0d);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics17.getKurtosisImpl();
        descriptiveStatistics0.setSumsqImpl(univariateStatistic27);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str30 = descriptiveStatistics29.toString();
        descriptiveStatistics29.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics29.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics29.getSumsqImpl();
        double double34 = descriptiveStatistics0.apply(univariateStatistic33);
        // The following exception was thrown during execution in test generation
        try {
            double double36 = descriptiveStatistics0.getElement((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 0 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(descriptiveStatistics29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str30, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
    }

    @Test
    public void test01637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01637");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        double double5 = resizableDoubleArray0.addElementRolling((double) 10L);
        int int6 = resizableDoubleArray0.start();
        double[] doubleArray7 = resizableDoubleArray0.getValues();
        resizableDoubleArray0.addElement((double) 11);
        float float10 = resizableDoubleArray0.getExpansionFactor();
        resizableDoubleArray0.setContractionCriteria((float) 32);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 10.0]");
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 2.0f + "'", float10 == 2.0f);
    }

    @Test
    public void test01638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01638");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray3 = new org.apache.commons.math.util.ResizableDoubleArray((int) (byte) -1, (float) (-1L), (float) 32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The expansion factor must be a number greater than 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01639");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((-1));
        long long2 = descriptiveStatistics1.getN();
        double double3 = descriptiveStatistics1.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics4 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics4.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics6.getSumsqImpl();
        descriptiveStatistics4.setKurtosisImpl(univariateStatistic7);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics4.getKurtosisImpl();
        double double10 = descriptiveStatistics4.getStandardDeviation();
        double double11 = descriptiveStatistics4.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics4.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double15 = descriptiveStatistics14.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics14.getGeometricMeanImpl();
        double double17 = descriptiveStatistics14.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics18.getKurtosisImpl();
        double[] doubleArray21 = descriptiveStatistics18.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics18.getVarianceImpl();
        descriptiveStatistics14.setSumsqImpl(univariateStatistic22);
        double double24 = descriptiveStatistics4.apply(univariateStatistic22);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str26 = descriptiveStatistics25.toString();
        double double27 = descriptiveStatistics25.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics28.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics30.getSumsqImpl();
        descriptiveStatistics28.setKurtosisImpl(univariateStatistic31);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics28.getKurtosisImpl();
        double double34 = descriptiveStatistics25.apply(univariateStatistic33);
        double double35 = descriptiveStatistics25.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics25.getSumImpl();
        double double37 = descriptiveStatistics25.getMin();
        double[] doubleArray38 = descriptiveStatistics25.getSortedValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics39 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics39.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics39.getKurtosisImpl();
        long long42 = descriptiveStatistics39.getN();
        double[] doubleArray43 = descriptiveStatistics39.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics39.getMinImpl();
        descriptiveStatistics25.setSumsqImpl(univariateStatistic44);
        descriptiveStatistics4.setMaxImpl(univariateStatistic44);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics47 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics47.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics49 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic50 = descriptiveStatistics49.getSumsqImpl();
        descriptiveStatistics47.setKurtosisImpl(univariateStatistic50);
        descriptiveStatistics47.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics47.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics54 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics54.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics56 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics56.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic58 = descriptiveStatistics56.getKurtosisImpl();
        long long59 = descriptiveStatistics56.getN();
        double[] doubleArray60 = descriptiveStatistics56.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic61 = descriptiveStatistics56.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic62 = descriptiveStatistics56.getMinImpl();
        double double63 = descriptiveStatistics54.apply(univariateStatistic62);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics64 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic65 = descriptiveStatistics64.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics66 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic67 = descriptiveStatistics66.getSumsqImpl();
        descriptiveStatistics64.setKurtosisImpl(univariateStatistic67);
        descriptiveStatistics64.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic70 = descriptiveStatistics64.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics71 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic72 = descriptiveStatistics71.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic73 = descriptiveStatistics71.getKurtosisImpl();
        long long74 = descriptiveStatistics71.getN();
        descriptiveStatistics71.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic77 = descriptiveStatistics71.getSkewnessImpl();
        descriptiveStatistics64.setSumsqImpl(univariateStatistic77);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic79 = descriptiveStatistics64.getVarianceImpl();
        descriptiveStatistics54.setVarianceImpl(univariateStatistic79);
        double double81 = descriptiveStatistics47.apply(univariateStatistic79);
        descriptiveStatistics4.setKurtosisImpl(univariateStatistic79);
        descriptiveStatistics1.setSkewnessImpl(univariateStatistic79);
        double[] doubleArray84 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double85 = univariateStatistic79.evaluate(doubleArray84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input values array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(descriptiveStatistics4);
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str26, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(descriptiveStatistics30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertNotNull(descriptiveStatistics39);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(descriptiveStatistics47);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertNotNull(descriptiveStatistics49);
        org.junit.Assert.assertNotNull(univariateStatistic50);
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertNotNull(descriptiveStatistics54);
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertNotNull(descriptiveStatistics56);
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertNotNull(univariateStatistic58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic61);
        org.junit.Assert.assertNotNull(univariateStatistic62);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertNotNull(descriptiveStatistics64);
        org.junit.Assert.assertNotNull(univariateStatistic65);
        org.junit.Assert.assertNotNull(descriptiveStatistics66);
        org.junit.Assert.assertNotNull(univariateStatistic67);
        org.junit.Assert.assertNotNull(univariateStatistic70);
        org.junit.Assert.assertNotNull(descriptiveStatistics71);
        org.junit.Assert.assertNotNull(univariateStatistic72);
        org.junit.Assert.assertNotNull(univariateStatistic73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic77);
        org.junit.Assert.assertNotNull(univariateStatistic79);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
    }

    @Test
    public void test01640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01640");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        int int1 = descriptiveStatistics0.getWindowSize();
        double double2 = descriptiveStatistics0.getMean();
        long long3 = descriptiveStatistics0.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics0.getMeanImpl();
        double double5 = descriptiveStatistics0.getMin();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test01641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01641");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray4 = new org.apache.commons.math.util.ResizableDoubleArray(103, (float) (-1L), (float) 0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The expansion factor must be a number greater than 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01642");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics0.getSumsqImpl();
        double double8 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics0.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double11 = descriptiveStatistics10.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics10.getMinImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double15 = descriptiveStatistics14.getStandardDeviation();
        long long16 = descriptiveStatistics14.getN();
        double[] doubleArray17 = descriptiveStatistics14.getSortedValues();
        double double18 = univariateStatistic12.evaluate(doubleArray17);
        descriptiveStatistics0.setMeanImpl(univariateStatistic12);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double22 = descriptiveStatistics21.getStandardDeviation();
        long long23 = descriptiveStatistics21.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics21.getSkewnessImpl();
        java.lang.String str25 = descriptiveStatistics21.toString();
        double double26 = descriptiveStatistics21.getVariance();
        descriptiveStatistics21.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics29.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics31.getSumsqImpl();
        descriptiveStatistics29.setKurtosisImpl(univariateStatistic32);
        descriptiveStatistics21.setSkewnessImpl(univariateStatistic32);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics21.getPercentileImpl();
        descriptiveStatistics0.setSumsqImpl(univariateStatistic35);
        double double37 = descriptiveStatistics0.getSum();
        double double38 = descriptiveStatistics0.getSumsq();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics39 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        descriptiveStatistics39.setWindowSize((int) (byte) -1);
        long long42 = descriptiveStatistics39.getN();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics43.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics45 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics45.getSumsqImpl();
        descriptiveStatistics43.setKurtosisImpl(univariateStatistic46);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics48 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics48.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics50 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics50.getSumsqImpl();
        descriptiveStatistics48.setKurtosisImpl(univariateStatistic51);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics48.getKurtosisImpl();
        descriptiveStatistics43.setMaxImpl(univariateStatistic53);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics55 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic56 = descriptiveStatistics55.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics57 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic58 = descriptiveStatistics57.getSumsqImpl();
        descriptiveStatistics55.setKurtosisImpl(univariateStatistic58);
        double double60 = descriptiveStatistics43.apply(univariateStatistic58);
        descriptiveStatistics39.setSumsqImpl(univariateStatistic58);
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic58);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic63 = descriptiveStatistics0.getMaxImpl();
        double double64 = descriptiveStatistics0.getMean();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str25, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(descriptiveStatistics29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(descriptiveStatistics31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(descriptiveStatistics39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics43);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(descriptiveStatistics45);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertNotNull(descriptiveStatistics48);
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertNotNull(descriptiveStatistics50);
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertNotNull(descriptiveStatistics55);
        org.junit.Assert.assertNotNull(univariateStatistic56);
        org.junit.Assert.assertNotNull(descriptiveStatistics57);
        org.junit.Assert.assertNotNull(univariateStatistic58);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(univariateStatistic63);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
    }

    @Test
    public void test01643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01643");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics3.getKurtosisImpl();
        double double9 = descriptiveStatistics0.apply(univariateStatistic8);
        double double10 = descriptiveStatistics0.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics0.getSumImpl();
        double double12 = descriptiveStatistics0.getMin();
        double[] doubleArray13 = descriptiveStatistics0.getSortedValues();
        double double14 = descriptiveStatistics0.getSumsq();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics0.getSkewnessImpl();
        double double16 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics0.getPercentileImpl();
        // The following exception was thrown during execution in test generation
        try {
            descriptiveStatistics0.setWindowSize(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: window size must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(univariateStatistic17);
    }

    @Test
    public void test01644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01644");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics5.getKurtosisImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic10);
        double double12 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics0.getVarianceImpl();
        double[] doubleArray15 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics0.getSumImpl();
        double[] doubleArray17 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        descriptiveStatistics21.setKurtosisImpl(univariateStatistic24);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics26.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics28.getSumsqImpl();
        descriptiveStatistics26.setKurtosisImpl(univariateStatistic29);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics26.getKurtosisImpl();
        descriptiveStatistics21.setMaxImpl(univariateStatistic31);
        double double33 = descriptiveStatistics21.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics21.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics21.getVarianceImpl();
        descriptiveStatistics19.setMinImpl(univariateStatistic35);
        double double37 = descriptiveStatistics19.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics19.getSumImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics39 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics39.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics39.getKurtosisImpl();
        long long42 = descriptiveStatistics39.getN();
        double[] doubleArray43 = descriptiveStatistics39.getValues();
        double double44 = descriptiveStatistics39.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics46 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double47 = descriptiveStatistics46.getStandardDeviation();
        long long48 = descriptiveStatistics46.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics46.getKurtosisImpl();
        descriptiveStatistics39.setSumImpl(univariateStatistic49);
        descriptiveStatistics19.setSumImpl(univariateStatistic49);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics52 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str53 = descriptiveStatistics52.toString();
        double double54 = descriptiveStatistics52.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics55 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic56 = descriptiveStatistics55.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics57 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic58 = descriptiveStatistics57.getSumsqImpl();
        descriptiveStatistics55.setKurtosisImpl(univariateStatistic58);
        descriptiveStatistics52.setSkewnessImpl(univariateStatistic58);
        double double61 = descriptiveStatistics52.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics63 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double64 = descriptiveStatistics63.getStandardDeviation();
        long long65 = descriptiveStatistics63.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic66 = descriptiveStatistics63.getMinImpl();
        descriptiveStatistics52.setVarianceImpl(univariateStatistic66);
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray68 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int69 = resizableDoubleArray68.start();
        resizableDoubleArray68.addElement((double) (byte) 0);
        resizableDoubleArray68.contract();
        resizableDoubleArray68.clear();
        int int74 = resizableDoubleArray68.getExpansionMode();
        resizableDoubleArray68.clear();
        resizableDoubleArray68.addElement(1.0d);
        double[] doubleArray78 = resizableDoubleArray68.getValues();
        double double79 = univariateStatistic66.evaluate(doubleArray78);
        descriptiveStatistics19.setVarianceImpl(univariateStatistic66);
        descriptiveStatistics0.setMinImpl(univariateStatistic66);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertNotNull(descriptiveStatistics39);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertNotNull(descriptiveStatistics52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str53, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(descriptiveStatistics55);
        org.junit.Assert.assertNotNull(univariateStatistic56);
        org.junit.Assert.assertNotNull(descriptiveStatistics57);
        org.junit.Assert.assertNotNull(univariateStatistic58);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic66);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
    }

    @Test
    public void test01645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01645");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) 10);
        resizableDoubleArray0.setElement(1, (double) (short) 0);
        double double8 = resizableDoubleArray0.addElementRolling(97.0d);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
    }

    @Test
    public void test01646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01646");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics5.getKurtosisImpl();
        long long8 = descriptiveStatistics5.getN();
        double double9 = descriptiveStatistics5.getMax();
        double double10 = descriptiveStatistics5.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double12 = descriptiveStatistics11.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics11.getMinImpl();
        descriptiveStatistics5.setSumImpl(univariateStatistic13);
        descriptiveStatistics0.setSumImpl(univariateStatistic13);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        descriptiveStatistics21.setKurtosisImpl(univariateStatistic24);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics21.getKurtosisImpl();
        descriptiveStatistics16.setMaxImpl(univariateStatistic26);
        double double28 = descriptiveStatistics0.apply(univariateStatistic26);
        long long29 = descriptiveStatistics0.getN();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
    }

    @Test
    public void test01647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01647");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        float float1 = resizableDoubleArray0.getExpansionFactor();
        resizableDoubleArray0.clear();
        int int3 = resizableDoubleArray0.getNumElements();
        int int4 = resizableDoubleArray0.start();
        resizableDoubleArray0.setContractionCriteria((float) 11);
        double[] doubleArray7 = resizableDoubleArray0.getElements();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.discardFrontElements(33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot discard more elements than arecontained in this array.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float1 + "' != '" + 2.0f + "'", float1 == 2.0f);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
    }

    @Test
    public void test01648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01648");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        double double5 = resizableDoubleArray0.addElementRolling((double) 0.0f);
        resizableDoubleArray0.setElement((int) (byte) 10, (double) (short) -1);
        resizableDoubleArray0.setElement((int) (byte) 1, 0.0d);
        int int12 = resizableDoubleArray0.start();
        double double14 = resizableDoubleArray0.addElementRolling((double) (short) 1);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test01649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01649");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        double[] doubleArray4 = descriptiveStatistics1.getSortedValues();
        double[] doubleArray5 = descriptiveStatistics1.getSortedValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics6.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics6.getKurtosisImpl();
        double[] doubleArray9 = descriptiveStatistics6.getValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        descriptiveStatistics10.setKurtosisImpl(univariateStatistic13);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics10.getKurtosisImpl();
        double[] doubleArray19 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double20 = univariateStatistic15.evaluate(doubleArray19);
        descriptiveStatistics6.setMaxImpl(univariateStatistic15);
        descriptiveStatistics1.setSumImpl(univariateStatistic15);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 2.0d + "'", double20 == 2.0d);
    }

    @Test
    public void test01650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01650");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics(2);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
    }

    @Test
    public void test01651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01651");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.clear();
        double[] doubleArray3 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.addElement((double) 'a');
        double double7 = resizableDoubleArray0.addElementRolling(99.00990099009901d);
        resizableDoubleArray0.contract();
        // The following exception was thrown during execution in test generation
        try {
            double double10 = resizableDoubleArray0.getElement(12);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 12 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 97.0d + "'", double7 == 97.0d);
    }

    @Test
    public void test01652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01652");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics1.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        descriptiveStatistics8.setKurtosisImpl(univariateStatistic11);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics8.getKurtosisImpl();
        descriptiveStatistics3.setMaxImpl(univariateStatistic13);
        double double15 = descriptiveStatistics3.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics3.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics3.getVarianceImpl();
        descriptiveStatistics1.setMinImpl(univariateStatistic17);
        double double19 = descriptiveStatistics1.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics1.getSumImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics21.getKurtosisImpl();
        long long24 = descriptiveStatistics21.getN();
        double[] doubleArray25 = descriptiveStatistics21.getValues();
        double double26 = descriptiveStatistics21.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double29 = descriptiveStatistics28.getStandardDeviation();
        long long30 = descriptiveStatistics28.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics28.getKurtosisImpl();
        descriptiveStatistics21.setSumImpl(univariateStatistic31);
        descriptiveStatistics1.setSumImpl(univariateStatistic31);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics1.getSumsqImpl();
        double double35 = descriptiveStatistics1.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics1.getSkewnessImpl();
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(univariateStatistic36);
    }

    @Test
    public void test01653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01653");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray1 = new org.apache.commons.math.util.ResizableDoubleArray(32);
        resizableDoubleArray1.contract();
        resizableDoubleArray1.addElement((double) '#');
    }

    @Test
    public void test01654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01654");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics1.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        descriptiveStatistics1.setKurtosisImpl(univariateStatistic4);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics1.getKurtosisImpl();
        double[] doubleArray10 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double11 = univariateStatistic6.evaluate(doubleArray10);
        descriptiveStatistics0.setMaxImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics13.getKurtosisImpl();
        long long16 = descriptiveStatistics13.getN();
        double double17 = descriptiveStatistics13.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics20.getSumsqImpl();
        descriptiveStatistics18.setKurtosisImpl(univariateStatistic21);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics25.getSumsqImpl();
        descriptiveStatistics23.setKurtosisImpl(univariateStatistic26);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics23.getKurtosisImpl();
        descriptiveStatistics18.setMaxImpl(univariateStatistic28);
        descriptiveStatistics13.setSumImpl(univariateStatistic28);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics32 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics32.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics34 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics34.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics36.getSumsqImpl();
        descriptiveStatistics34.setKurtosisImpl(univariateStatistic37);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics39 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics39.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics41.getSumsqImpl();
        descriptiveStatistics39.setKurtosisImpl(univariateStatistic42);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics39.getKurtosisImpl();
        descriptiveStatistics34.setMaxImpl(univariateStatistic44);
        double double46 = descriptiveStatistics34.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics34.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics34.getVarianceImpl();
        descriptiveStatistics32.setMinImpl(univariateStatistic48);
        descriptiveStatistics13.setMeanImpl(univariateStatistic48);
        descriptiveStatistics0.setSumImpl(univariateStatistic48);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics53 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic54 = descriptiveStatistics53.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics55 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic56 = descriptiveStatistics55.getSumsqImpl();
        descriptiveStatistics53.setKurtosisImpl(univariateStatistic56);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics58 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic59 = descriptiveStatistics58.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics60 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic61 = descriptiveStatistics60.getSumsqImpl();
        descriptiveStatistics58.setKurtosisImpl(univariateStatistic61);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic63 = descriptiveStatistics58.getKurtosisImpl();
        descriptiveStatistics53.setMaxImpl(univariateStatistic63);
        double double65 = descriptiveStatistics53.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic66 = descriptiveStatistics53.getMinImpl();
        double[] doubleArray67 = descriptiveStatistics53.getValues();
        double double68 = univariateStatistic52.evaluate(doubleArray67);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(descriptiveStatistics1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 2.0d + "'", double11 == 2.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(descriptiveStatistics20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(descriptiveStatistics34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(descriptiveStatistics39);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertNotNull(descriptiveStatistics41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertNotNull(univariateStatistic52);
        org.junit.Assert.assertNotNull(descriptiveStatistics53);
        org.junit.Assert.assertNotNull(univariateStatistic54);
        org.junit.Assert.assertNotNull(descriptiveStatistics55);
        org.junit.Assert.assertNotNull(univariateStatistic56);
        org.junit.Assert.assertNotNull(descriptiveStatistics58);
        org.junit.Assert.assertNotNull(univariateStatistic59);
        org.junit.Assert.assertNotNull(descriptiveStatistics60);
        org.junit.Assert.assertNotNull(univariateStatistic61);
        org.junit.Assert.assertNotNull(univariateStatistic63);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(univariateStatistic66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double68));
    }

    @Test
    public void test01655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01655");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        descriptiveStatistics3.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics3.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics10.getKurtosisImpl();
        long long13 = descriptiveStatistics10.getN();
        double[] doubleArray14 = descriptiveStatistics10.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics10.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics10.getMinImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic16);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic16);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str20 = descriptiveStatistics19.toString();
        descriptiveStatistics19.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str23 = descriptiveStatistics22.toString();
        double double24 = descriptiveStatistics22.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics25.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics27.getSumsqImpl();
        descriptiveStatistics25.setKurtosisImpl(univariateStatistic28);
        descriptiveStatistics22.setSkewnessImpl(univariateStatistic28);
        double double31 = descriptiveStatistics22.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics33 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double34 = descriptiveStatistics33.getStandardDeviation();
        long long35 = descriptiveStatistics33.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics33.getMinImpl();
        descriptiveStatistics22.setVarianceImpl(univariateStatistic36);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics22.getMeanImpl();
        descriptiveStatistics19.setMeanImpl(univariateStatistic38);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic38);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics43.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics45 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics45.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics47 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics47.getSumsqImpl();
        descriptiveStatistics45.setKurtosisImpl(univariateStatistic48);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics50 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics50.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics52 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics52.getSumsqImpl();
        descriptiveStatistics50.setKurtosisImpl(univariateStatistic53);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics50.getKurtosisImpl();
        descriptiveStatistics45.setMaxImpl(univariateStatistic55);
        double double57 = descriptiveStatistics45.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic58 = descriptiveStatistics45.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic59 = descriptiveStatistics45.getVarianceImpl();
        descriptiveStatistics43.setMinImpl(univariateStatistic59);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic61 = descriptiveStatistics43.getMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic62 = descriptiveStatistics43.getPercentileImpl();
        descriptiveStatistics0.setMinImpl(univariateStatistic62);
        double double64 = descriptiveStatistics0.getMax();
        double double65 = descriptiveStatistics0.getSum();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str20, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str23, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(descriptiveStatistics45);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertNotNull(descriptiveStatistics47);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertNotNull(descriptiveStatistics50);
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertNotNull(descriptiveStatistics52);
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(univariateStatistic58);
        org.junit.Assert.assertNotNull(univariateStatistic59);
        org.junit.Assert.assertNotNull(univariateStatistic61);
        org.junit.Assert.assertNotNull(univariateStatistic62);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
    }

    @Test
    public void test01656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01656");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        int int5 = descriptiveStatistics0.getWindowSize();
        double double6 = descriptiveStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics9.getSumsqImpl();
        descriptiveStatistics7.setKurtosisImpl(univariateStatistic10);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        descriptiveStatistics12.setKurtosisImpl(univariateStatistic15);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics12.getKurtosisImpl();
        descriptiveStatistics7.setMaxImpl(univariateStatistic17);
        double double19 = descriptiveStatistics7.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics7.getMinImpl();
        descriptiveStatistics7.setWindowSize((int) (short) 100);
        java.lang.String str23 = descriptiveStatistics7.toString();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics7.getMeanImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic24);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str23, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic24);
    }

    @Test
    public void test01657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01657");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics0.getSumsqImpl();
        double double8 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics0.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double11 = descriptiveStatistics10.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics10.getMinImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double15 = descriptiveStatistics14.getStandardDeviation();
        long long16 = descriptiveStatistics14.getN();
        double[] doubleArray17 = descriptiveStatistics14.getSortedValues();
        double double18 = univariateStatistic12.evaluate(doubleArray17);
        descriptiveStatistics0.setMeanImpl(univariateStatistic12);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double22 = descriptiveStatistics21.getStandardDeviation();
        long long23 = descriptiveStatistics21.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics21.getSkewnessImpl();
        java.lang.String str25 = descriptiveStatistics21.toString();
        double double26 = descriptiveStatistics21.getVariance();
        descriptiveStatistics21.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics29.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics31.getSumsqImpl();
        descriptiveStatistics29.setKurtosisImpl(univariateStatistic32);
        descriptiveStatistics21.setSkewnessImpl(univariateStatistic32);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics21.getPercentileImpl();
        descriptiveStatistics0.setSumsqImpl(univariateStatistic35);
        long long37 = descriptiveStatistics0.getN();
        double double38 = descriptiveStatistics0.getMax();
        double double39 = descriptiveStatistics0.getKurtosis();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str25, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(descriptiveStatistics29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(descriptiveStatistics31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
    }

    @Test
    public void test01658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01658");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        double double3 = descriptiveStatistics1.getVariance();
        double double4 = descriptiveStatistics1.getSum();
        long long5 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics6.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics6.getKurtosisImpl();
        long long9 = descriptiveStatistics6.getN();
        double[] doubleArray10 = descriptiveStatistics6.getValues();
        int int11 = descriptiveStatistics6.getWindowSize();
        double double12 = descriptiveStatistics6.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics6.getKurtosisImpl();
        descriptiveStatistics1.setGeometricMeanImpl(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
    }

    @Test
    public void test01659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01659");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) (byte) 0);
        resizableDoubleArray0.contract();
        resizableDoubleArray0.clear();
        int int6 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.addElement(1.0d);
        int int10 = resizableDoubleArray0.getNumElements();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setExpansionMode(91);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal expansionMode setting.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test01660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01660");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray1 = new org.apache.commons.math.util.ResizableDoubleArray(10);
        // The following exception was thrown during execution in test generation
        try {
            double double3 = resizableDoubleArray1.getElement(11);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 11 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01661");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray1 = new org.apache.commons.math.util.ResizableDoubleArray((int) (byte) 10);
        int int2 = resizableDoubleArray1.getNumElements();
        float float3 = resizableDoubleArray1.getContractionCriteria();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray1.setExpansionFactor((float) 100L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 2.5f + "'", float3 == 2.5f);
    }

    @Test
    public void test01662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01662");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray2 = new org.apache.commons.math.util.ResizableDoubleArray((int) (byte) 0, (float) 10L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The initial capacity supplied: 0must be a positive integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01663");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        int int3 = resizableDoubleArray0.start();
        resizableDoubleArray0.setElement((int) (short) 10, (double) 100L);
        double[] doubleArray7 = resizableDoubleArray0.getValues();
        double double9 = resizableDoubleArray0.addElementRolling(0.0d);
        int int10 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.contract();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setElement((-1), 5.4999999999999964d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Cannot set an element at a negative index");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 11 + "'", int10 == 11);
    }

    @Test
    public void test01664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01664");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics3.getKurtosisImpl();
        double double9 = descriptiveStatistics0.apply(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double12 = descriptiveStatistics11.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics11.getGeometricMeanImpl();
        descriptiveStatistics0.setMeanImpl(univariateStatistic13);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics0.getSumImpl();
        double[] doubleArray16 = descriptiveStatistics0.getSortedValues();
        long long17 = descriptiveStatistics0.getN();
        double double18 = descriptiveStatistics0.getMax();
        double double19 = descriptiveStatistics0.getKurtosis();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics0.getMinImpl();
        double double22 = descriptiveStatistics0.getPercentile((double) 2.0f);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double24 = descriptiveStatistics23.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double27 = descriptiveStatistics26.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics26.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double31 = descriptiveStatistics30.getStandardDeviation();
        long long32 = descriptiveStatistics30.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics30.getMinImpl();
        descriptiveStatistics26.setMaxImpl(univariateStatistic33);
        descriptiveStatistics23.setMinImpl(univariateStatistic33);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics37 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double38 = descriptiveStatistics37.getStandardDeviation();
        long long39 = descriptiveStatistics37.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics37.getMinImpl();
        double double41 = descriptiveStatistics37.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics42 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics43.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics45 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics45.getSumsqImpl();
        descriptiveStatistics43.setKurtosisImpl(univariateStatistic46);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics43.getKurtosisImpl();
        double[] doubleArray52 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double53 = univariateStatistic48.evaluate(doubleArray52);
        descriptiveStatistics42.setMaxImpl(univariateStatistic48);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics55 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic56 = descriptiveStatistics55.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics55.getKurtosisImpl();
        long long58 = descriptiveStatistics55.getN();
        double[] doubleArray59 = descriptiveStatistics55.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic60 = descriptiveStatistics55.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic61 = descriptiveStatistics55.getMeanImpl();
        descriptiveStatistics42.setGeometricMeanImpl(univariateStatistic61);
        descriptiveStatistics37.setGeometricMeanImpl(univariateStatistic61);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics64 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double65 = descriptiveStatistics64.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics66 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic67 = descriptiveStatistics66.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic68 = descriptiveStatistics66.getKurtosisImpl();
        long long69 = descriptiveStatistics66.getN();
        descriptiveStatistics66.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics72 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic73 = descriptiveStatistics72.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics74 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic75 = descriptiveStatistics74.getSumsqImpl();
        descriptiveStatistics72.setKurtosisImpl(univariateStatistic75);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics77 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic78 = descriptiveStatistics77.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics79 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic80 = descriptiveStatistics79.getSumsqImpl();
        descriptiveStatistics77.setKurtosisImpl(univariateStatistic80);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic82 = descriptiveStatistics77.getKurtosisImpl();
        descriptiveStatistics72.setMaxImpl(univariateStatistic82);
        double double84 = descriptiveStatistics72.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic85 = descriptiveStatistics72.getMinImpl();
        descriptiveStatistics66.setMinImpl(univariateStatistic85);
        descriptiveStatistics64.setMeanImpl(univariateStatistic85);
        descriptiveStatistics37.setMinImpl(univariateStatistic85);
        double double89 = descriptiveStatistics37.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic90 = descriptiveStatistics37.getGeometricMeanImpl();
        double double91 = descriptiveStatistics23.apply(univariateStatistic90);
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic90);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(descriptiveStatistics42);
        org.junit.Assert.assertNotNull(descriptiveStatistics43);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(descriptiveStatistics45);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 2.0d + "'", double53 == 2.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics55);
        org.junit.Assert.assertNotNull(univariateStatistic56);
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic60);
        org.junit.Assert.assertNotNull(univariateStatistic61);
        org.junit.Assert.assertNotNull(descriptiveStatistics64);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(descriptiveStatistics66);
        org.junit.Assert.assertNotNull(univariateStatistic67);
        org.junit.Assert.assertNotNull(univariateStatistic68);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics72);
        org.junit.Assert.assertNotNull(univariateStatistic73);
        org.junit.Assert.assertNotNull(descriptiveStatistics74);
        org.junit.Assert.assertNotNull(univariateStatistic75);
        org.junit.Assert.assertNotNull(descriptiveStatistics77);
        org.junit.Assert.assertNotNull(univariateStatistic78);
        org.junit.Assert.assertNotNull(descriptiveStatistics79);
        org.junit.Assert.assertNotNull(univariateStatistic80);
        org.junit.Assert.assertNotNull(univariateStatistic82);
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertNotNull(univariateStatistic85);
        org.junit.Assert.assertTrue(Double.isNaN(double89));
        org.junit.Assert.assertNotNull(univariateStatistic90);
        org.junit.Assert.assertTrue(Double.isNaN(double91));
    }

    @Test
    public void test01665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01665");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray1 = new org.apache.commons.math.util.ResizableDoubleArray(2);
        double[] doubleArray2 = resizableDoubleArray1.getValues();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[0.0, 0.0]");
    }

    @Test
    public void test01666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01666");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics6.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics6.getKurtosisImpl();
        long long9 = descriptiveStatistics6.getN();
        double double10 = descriptiveStatistics6.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        descriptiveStatistics11.setKurtosisImpl(univariateStatistic14);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics16.getKurtosisImpl();
        descriptiveStatistics11.setMaxImpl(univariateStatistic21);
        descriptiveStatistics6.setSumImpl(univariateStatistic21);
        descriptiveStatistics0.setSumsqImpl(univariateStatistic21);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str26 = descriptiveStatistics25.toString();
        double double27 = descriptiveStatistics25.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics28.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics30.getSumsqImpl();
        descriptiveStatistics28.setKurtosisImpl(univariateStatistic31);
        descriptiveStatistics25.setSkewnessImpl(univariateStatistic31);
        double double34 = descriptiveStatistics25.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics35 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics35.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics37 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics37.getSumsqImpl();
        descriptiveStatistics35.setKurtosisImpl(univariateStatistic38);
        descriptiveStatistics35.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics35.getPercentileImpl();
        double double42 = descriptiveStatistics35.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics43.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics43.getKurtosisImpl();
        double[] doubleArray46 = descriptiveStatistics43.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics43.getVarianceImpl();
        double double48 = descriptiveStatistics35.apply(univariateStatistic47);
        double double49 = descriptiveStatistics25.apply(univariateStatistic47);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic47);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str26, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(descriptiveStatistics30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(descriptiveStatistics35);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertNotNull(descriptiveStatistics37);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(descriptiveStatistics43);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
    }

    @Test
    public void test01667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01667");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray1 = new org.apache.commons.math.util.ResizableDoubleArray((int) (byte) 10);
        resizableDoubleArray1.discardFrontElements(0);
    }

    @Test
    public void test01668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01668");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement(0.0d);
        int int4 = resizableDoubleArray0.getNumElements();
        int int5 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.discardFrontElements((int) (byte) 1);
        float float8 = resizableDoubleArray0.getContractionCriteria();
        int int9 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.contract();
        double double12 = resizableDoubleArray0.addElementRolling((double) (-1.0f));
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 2.5f + "'", float8 == 2.5f);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test01669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01669");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics5.getKurtosisImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic10);
        double double12 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        descriptiveStatistics14.setKurtosisImpl(univariateStatistic17);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics14.getKurtosisImpl();
        double[] doubleArray23 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double24 = univariateStatistic19.evaluate(doubleArray23);
        descriptiveStatistics13.setMaxImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics13.getSumsqImpl();
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic26);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str29 = descriptiveStatistics28.toString();
        double double30 = descriptiveStatistics28.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics31.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics33 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics33.getSumsqImpl();
        descriptiveStatistics31.setKurtosisImpl(univariateStatistic34);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics31.getKurtosisImpl();
        double double37 = descriptiveStatistics28.apply(univariateStatistic36);
        double double38 = descriptiveStatistics28.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics39 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics40 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics40.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics42 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic43 = descriptiveStatistics42.getSumsqImpl();
        descriptiveStatistics40.setKurtosisImpl(univariateStatistic43);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics40.getKurtosisImpl();
        double[] doubleArray49 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double50 = univariateStatistic45.evaluate(doubleArray49);
        descriptiveStatistics39.setMaxImpl(univariateStatistic45);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics52 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics52.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic54 = descriptiveStatistics52.getKurtosisImpl();
        long long55 = descriptiveStatistics52.getN();
        double[] doubleArray56 = descriptiveStatistics52.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics52.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic58 = descriptiveStatistics52.getMeanImpl();
        descriptiveStatistics39.setGeometricMeanImpl(univariateStatistic58);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic60 = descriptiveStatistics39.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics61 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic62 = descriptiveStatistics61.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic63 = descriptiveStatistics61.getKurtosisImpl();
        long long64 = descriptiveStatistics61.getN();
        descriptiveStatistics61.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic67 = descriptiveStatistics61.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic68 = descriptiveStatistics61.getPercentileImpl();
        descriptiveStatistics39.setSkewnessImpl(univariateStatistic68);
        descriptiveStatistics28.setMeanImpl(univariateStatistic68);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic68);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 2.0d + "'", double24 == 2.0d);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str29, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(descriptiveStatistics31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(descriptiveStatistics33);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(descriptiveStatistics39);
        org.junit.Assert.assertNotNull(descriptiveStatistics40);
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertNotNull(descriptiveStatistics42);
        org.junit.Assert.assertNotNull(univariateStatistic43);
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 2.0d + "'", double50 == 2.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics52);
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertNotNull(univariateStatistic54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertNotNull(univariateStatistic58);
        org.junit.Assert.assertNotNull(univariateStatistic60);
        org.junit.Assert.assertNotNull(descriptiveStatistics61);
        org.junit.Assert.assertNotNull(univariateStatistic62);
        org.junit.Assert.assertNotNull(univariateStatistic63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic67);
        org.junit.Assert.assertNotNull(univariateStatistic68);
    }

    @Test
    public void test01670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01670");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        double[] doubleArray3 = resizableDoubleArray0.getElements();
        double[] doubleArray4 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.setNumElements((int) (byte) 100);
        resizableDoubleArray0.discardFrontElements((int) (byte) 100);
        resizableDoubleArray0.contract();
        resizableDoubleArray0.setElement(2, (double) (-1));
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setContractionCriteria((float) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
    }

    @Test
    public void test01671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01671");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double1 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics2.getKurtosisImpl();
        long long5 = descriptiveStatistics2.getN();
        descriptiveStatistics2.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        descriptiveStatistics8.setKurtosisImpl(univariateStatistic11);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        descriptiveStatistics13.setKurtosisImpl(univariateStatistic16);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics13.getKurtosisImpl();
        descriptiveStatistics8.setMaxImpl(univariateStatistic18);
        double double20 = descriptiveStatistics8.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics8.getMinImpl();
        descriptiveStatistics2.setMinImpl(univariateStatistic21);
        descriptiveStatistics0.setMeanImpl(univariateStatistic21);
        double double24 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double27 = descriptiveStatistics26.getStandardDeviation();
        long long28 = descriptiveStatistics26.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics26.getSkewnessImpl();
        java.lang.String str30 = descriptiveStatistics26.toString();
        double double31 = descriptiveStatistics26.getVariance();
        descriptiveStatistics26.setWindowSize((int) '4');
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics26.getMaxImpl();
        descriptiveStatistics26.addValue((double) '4');
        double double37 = descriptiveStatistics26.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics38 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics38.getSumsqImpl();
        double double40 = descriptiveStatistics38.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics38.getVarianceImpl();
        double double42 = descriptiveStatistics26.apply(univariateStatistic41);
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic41);
        double double44 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics45 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics45.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics45.getKurtosisImpl();
        long long48 = descriptiveStatistics45.getN();
        double[] doubleArray49 = descriptiveStatistics45.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic50 = descriptiveStatistics45.getSumImpl();
        double double51 = descriptiveStatistics45.getVariance();
        double double52 = descriptiveStatistics45.getMax();
        double double53 = descriptiveStatistics45.getKurtosis();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics54 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str55 = descriptiveStatistics54.toString();
        descriptiveStatistics54.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics54.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic58 = descriptiveStatistics54.getSumsqImpl();
        double double60 = descriptiveStatistics54.getPercentile(Double.NaN);
        double double61 = descriptiveStatistics54.getKurtosis();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic62 = descriptiveStatistics54.getSumsqImpl();
        descriptiveStatistics45.setMaxImpl(univariateStatistic62);
        descriptiveStatistics0.setSumsqImpl(univariateStatistic62);
        double double65 = descriptiveStatistics0.getStandardDeviation();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str30, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 52.0d + "'", double37 == 52.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics38);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(descriptiveStatistics45);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic50);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(descriptiveStatistics54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str55, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertNotNull(univariateStatistic58);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertNotNull(univariateStatistic62);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
    }

    @Test
    public void test01672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01672");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray4 = new org.apache.commons.math.util.ResizableDoubleArray(3, (float) 31, (float) (short) -1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01673");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        double[] doubleArray3 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics0.getVarianceImpl();
        double double5 = descriptiveStatistics0.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double9 = descriptiveStatistics8.getStandardDeviation();
        long long10 = descriptiveStatistics8.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics8.getSkewnessImpl();
        java.lang.String str12 = descriptiveStatistics8.toString();
        double double13 = descriptiveStatistics8.getVariance();
        descriptiveStatistics8.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics8.getGeometricMeanImpl();
        descriptiveStatistics0.setMeanImpl(univariateStatistic16);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double20 = descriptiveStatistics19.getStandardDeviation();
        long long21 = descriptiveStatistics19.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics19.getSkewnessImpl();
        java.lang.String str23 = descriptiveStatistics19.toString();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics25.getKurtosisImpl();
        descriptiveStatistics19.setMeanImpl(univariateStatistic26);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics19.getMeanImpl();
        double double29 = descriptiveStatistics0.apply(univariateStatistic28);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str12, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str23, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
    }

    @Test
    public void test01674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01674");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray2 = new org.apache.commons.math.util.ResizableDoubleArray((int) (byte) 100, 0.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The expansion factor must be a number greater than 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01675");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getGeometricMeanImpl();
        double double4 = descriptiveStatistics0.getMax();
        double[] doubleArray5 = descriptiveStatistics0.getSortedValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getMaxImpl();
        java.lang.String str7 = descriptiveStatistics0.toString();
        java.lang.String str8 = descriptiveStatistics0.toString();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics0.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics0.getMaxImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics0.getMeanImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str7, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str8, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
    }

    @Test
    public void test01676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01676");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement(0.0d);
        int int4 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.discardFrontElements(0);
        resizableDoubleArray0.contract();
        resizableDoubleArray0.setNumElements(10);
        resizableDoubleArray0.clear();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test01677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01677");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray3 = new org.apache.commons.math.util.ResizableDoubleArray(101, 0.0f, (float) 1L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The expansion factor must be a number greater than 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01678");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) 10);
        int int4 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) (-1L));
        double[] doubleArray7 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.addElement((double) 0L);
        resizableDoubleArray0.contract();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setExpansionFactor((float) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0]");
    }

    @Test
    public void test01679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01679");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic6);
        double double9 = descriptiveStatistics0.getStandardDeviation();
        double double10 = descriptiveStatistics0.getMean();
        descriptiveStatistics0.setWindowSize(31);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test01680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01680");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.setElement(0, (double) 0.0f);
        int int5 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.contract();
        resizableDoubleArray0.setElement((int) (short) 100, (double) 101);
        float float10 = resizableDoubleArray0.getExpansionFactor();
        resizableDoubleArray0.setContractionCriteria((float) 35);
        resizableDoubleArray0.setNumElements((int) '4');
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 2.0f + "'", float10 == 2.0f);
    }

    @Test
    public void test01681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01681");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        int int3 = resizableDoubleArray0.start();
        resizableDoubleArray0.setElement((int) (short) 10, (double) 100L);
        double[] doubleArray7 = resizableDoubleArray0.getValues();
        double double9 = resizableDoubleArray0.addElementRolling(0.0d);
        resizableDoubleArray0.discardFrontElements((int) (short) 0);
        resizableDoubleArray0.setElement((int) (short) 10, (double) (byte) 10);
        int int15 = resizableDoubleArray0.start();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setExpansionFactor((float) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0, 10.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test01682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01682");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        java.lang.String str2 = descriptiveStatistics0.toString();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics3.getKurtosisImpl();
        long long6 = descriptiveStatistics3.getN();
        descriptiveStatistics3.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics3.getSkewnessImpl();
        descriptiveStatistics0.setSumsqImpl(univariateStatistic9);
        double double11 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics0.getSkewnessImpl();
        double double13 = descriptiveStatistics0.getMean();
        long long14 = descriptiveStatistics0.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics0.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics0.getPercentileImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str2, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
    }

    @Test
    public void test01683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01683");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray3 = new org.apache.commons.math.util.ResizableDoubleArray(32, (float) 10, (float) 32);
        float float4 = resizableDoubleArray3.getContractionCriteria();
        resizableDoubleArray3.clear();
        double[] doubleArray6 = resizableDoubleArray3.getElements();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray3.discardFrontElements(12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot discard more elements than arecontained in this array.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 32.0f + "'", float4 == 32.0f);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
    }

    @Test
    public void test01684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01684");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getSkewnessImpl();
        java.lang.String str5 = descriptiveStatistics1.toString();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getKurtosisImpl();
        descriptiveStatistics1.setMeanImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        descriptiveStatistics10.setKurtosisImpl(univariateStatistic13);
        descriptiveStatistics10.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics10.getGeometricMeanImpl();
        descriptiveStatistics1.setKurtosisImpl(univariateStatistic16);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics1.getPercentileImpl();
        double double19 = descriptiveStatistics1.getSumsq();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str5, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
    }

    @Test
    public void test01685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01685");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.setElement(0, (double) 0.0f);
        resizableDoubleArray0.clear();
        int int6 = resizableDoubleArray0.getNumElements();
        double[] doubleArray7 = resizableDoubleArray0.getElements();
        double double9 = resizableDoubleArray0.addElementRolling((double) 2);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    }

    @Test
    public void test01686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01686");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.setElement(100, (double) (byte) 100);
        resizableDoubleArray0.addElement(2.0d);
        resizableDoubleArray0.contract();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setExpansionMode((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal expansionMode setting.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    }

    @Test
    public void test01687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01687");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        double double3 = descriptiveStatistics1.getVariance();
        double double4 = descriptiveStatistics1.getSum();
        double double6 = descriptiveStatistics1.getPercentile(2.0d);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str8 = descriptiveStatistics7.toString();
        descriptiveStatistics7.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics7.getGeometricMeanImpl();
        double double11 = descriptiveStatistics7.getMax();
        double[] doubleArray12 = descriptiveStatistics7.getSortedValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics7.getMaxImpl();
        double double14 = descriptiveStatistics1.apply(univariateStatistic13);
        double[] doubleArray15 = descriptiveStatistics1.getSortedValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics1.getMinImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double19 = descriptiveStatistics18.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics18.getGeometricMeanImpl();
        double double21 = descriptiveStatistics18.getMean();
        double double22 = descriptiveStatistics18.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics18.getMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics18.getKurtosisImpl();
        descriptiveStatistics1.setSkewnessImpl(univariateStatistic24);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics26.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics28.getSumsqImpl();
        descriptiveStatistics26.setKurtosisImpl(univariateStatistic29);
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray31 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int32 = resizableDoubleArray31.getExpansionMode();
        resizableDoubleArray31.addElement(0.0d);
        int int35 = resizableDoubleArray31.getExpansionMode();
        double[] doubleArray36 = resizableDoubleArray31.getElements();
        double double37 = univariateStatistic29.evaluate(doubleArray36);
        double double38 = univariateStatistic24.evaluate(doubleArray36);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str8, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
    }

    @Test
    public void test01688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01688");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics5.getKurtosisImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic10);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        descriptiveStatistics12.setKurtosisImpl(univariateStatistic15);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics12.getKurtosisImpl();
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic17);
        double double19 = descriptiveStatistics0.getSum();
        double double20 = descriptiveStatistics0.getStandardDeviation();
        double double21 = descriptiveStatistics0.getMax();
        double double22 = descriptiveStatistics0.getStandardDeviation();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
    }

    @Test
    public void test01689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01689");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getKurtosisImpl();
        double double6 = descriptiveStatistics0.getStandardDeviation();
        double double7 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics0.getKurtosisImpl();
        long long9 = descriptiveStatistics0.getN();
        // The following exception was thrown during execution in test generation
        try {
            double double11 = descriptiveStatistics0.getElement((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 100 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test01690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01690");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray3 = new org.apache.commons.math.util.ResizableDoubleArray((int) (short) 1, (float) 10L, (float) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01691");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics1.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        descriptiveStatistics1.setKurtosisImpl(univariateStatistic4);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics1.getKurtosisImpl();
        double[] doubleArray10 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double11 = univariateStatistic6.evaluate(doubleArray10);
        descriptiveStatistics0.setMaxImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics0.getSumsqImpl();
        double double14 = descriptiveStatistics0.getSumsq();
        double double15 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics0.getSumImpl();
        double double17 = descriptiveStatistics0.getSumsq();
        double double18 = descriptiveStatistics0.getMax();
        double double19 = descriptiveStatistics0.getStandardDeviation();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(descriptiveStatistics1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 2.0d + "'", double11 == 2.0d);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
    }

    @Test
    public void test01692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01692");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getSkewnessImpl();
        java.lang.String str5 = descriptiveStatistics1.toString();
        double double6 = descriptiveStatistics1.getVariance();
        descriptiveStatistics1.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics9.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        descriptiveStatistics9.setKurtosisImpl(univariateStatistic12);
        descriptiveStatistics1.setSkewnessImpl(univariateStatistic12);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics17.getSumsqImpl();
        descriptiveStatistics15.setKurtosisImpl(univariateStatistic18);
        descriptiveStatistics15.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics15.getSkewnessImpl();
        descriptiveStatistics1.setVarianceImpl(univariateStatistic21);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics1.getSumImpl();
        double double24 = descriptiveStatistics1.getStandardDeviation();
        double double25 = descriptiveStatistics1.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics1.getSumImpl();
        java.lang.Class<?> wildcardClass27 = descriptiveStatistics1.getClass();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance((java.lang.Class) wildcardClass27);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double30 = descriptiveStatistics28.apply(univariateStatistic29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str5, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
    }

    @Test
    public void test01693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01693");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        descriptiveStatistics0.addValue((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = null;
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str11 = descriptiveStatistics10.toString();
        double double12 = descriptiveStatistics10.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        descriptiveStatistics13.setKurtosisImpl(univariateStatistic16);
        descriptiveStatistics10.setSkewnessImpl(univariateStatistic16);
        double double19 = descriptiveStatistics10.getStandardDeviation();
        double[] doubleArray20 = descriptiveStatistics10.getValues();
        descriptiveStatistics10.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str23 = descriptiveStatistics22.toString();
        descriptiveStatistics22.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics25.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics25.getKurtosisImpl();
        double[] doubleArray28 = descriptiveStatistics25.getValues();
        double double29 = descriptiveStatistics25.getVariance();
        double double30 = descriptiveStatistics25.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics25.getKurtosisImpl();
        descriptiveStatistics22.setMaxImpl(univariateStatistic31);
        descriptiveStatistics22.setWindowSize((int) (byte) 1);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics35 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double36 = descriptiveStatistics35.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics35.getSkewnessImpl();
        descriptiveStatistics22.setMaxImpl(univariateStatistic37);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics22.getGeometricMeanImpl();
        descriptiveStatistics10.setSkewnessImpl(univariateStatistic39);
        descriptiveStatistics0.setMaxImpl(univariateStatistic39);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics42 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic43 = descriptiveStatistics42.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics44 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics44.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics44.getKurtosisImpl();
        long long47 = descriptiveStatistics44.getN();
        double[] doubleArray48 = descriptiveStatistics44.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics44.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic50 = descriptiveStatistics44.getMinImpl();
        double double51 = descriptiveStatistics42.apply(univariateStatistic50);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics42.getPercentileImpl();
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic52);
        descriptiveStatistics0.setWindowSize((int) (byte) -1);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str11, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(descriptiveStatistics22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str23, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(descriptiveStatistics35);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(descriptiveStatistics42);
        org.junit.Assert.assertNotNull(univariateStatistic43);
        org.junit.Assert.assertNotNull(descriptiveStatistics44);
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertNotNull(univariateStatistic50);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(univariateStatistic52);
    }

    @Test
    public void test01694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01694");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics3.getKurtosisImpl();
        double double9 = descriptiveStatistics0.apply(univariateStatistic8);
        double double10 = descriptiveStatistics0.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics0.getSumImpl();
        double double12 = descriptiveStatistics0.getMin();
        double[] doubleArray13 = descriptiveStatistics0.getSortedValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics14.getKurtosisImpl();
        long long17 = descriptiveStatistics14.getN();
        double[] doubleArray18 = descriptiveStatistics14.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics14.getMinImpl();
        descriptiveStatistics0.setSumsqImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double23 = descriptiveStatistics22.getStandardDeviation();
        long long24 = descriptiveStatistics22.getN();
        double double25 = descriptiveStatistics22.getMin();
        double double26 = descriptiveStatistics22.getMax();
        double double27 = descriptiveStatistics22.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double30 = descriptiveStatistics29.getStandardDeviation();
        long long31 = descriptiveStatistics29.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics29.getSkewnessImpl();
        java.lang.String str33 = descriptiveStatistics29.toString();
        double double34 = descriptiveStatistics29.getVariance();
        descriptiveStatistics29.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics37 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics37.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics39 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics39.getSumsqImpl();
        descriptiveStatistics37.setKurtosisImpl(univariateStatistic40);
        descriptiveStatistics29.setSkewnessImpl(univariateStatistic40);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics43.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics45 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics45.getSumsqImpl();
        descriptiveStatistics43.setKurtosisImpl(univariateStatistic46);
        descriptiveStatistics43.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics43.getSkewnessImpl();
        descriptiveStatistics29.setVarianceImpl(univariateStatistic49);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics29.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics29.getSkewnessImpl();
        descriptiveStatistics22.setKurtosisImpl(univariateStatistic52);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic54 = descriptiveStatistics22.getVarianceImpl();
        double double55 = descriptiveStatistics22.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics56 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str57 = descriptiveStatistics56.toString();
        double double58 = descriptiveStatistics56.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics59 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic60 = descriptiveStatistics59.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics61 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic62 = descriptiveStatistics61.getSumsqImpl();
        descriptiveStatistics59.setKurtosisImpl(univariateStatistic62);
        descriptiveStatistics56.setSkewnessImpl(univariateStatistic62);
        double double65 = descriptiveStatistics56.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics66 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic67 = descriptiveStatistics66.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics68 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic69 = descriptiveStatistics68.getSumsqImpl();
        descriptiveStatistics66.setKurtosisImpl(univariateStatistic69);
        descriptiveStatistics66.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic72 = descriptiveStatistics66.getPercentileImpl();
        double double73 = descriptiveStatistics66.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics74 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic75 = descriptiveStatistics74.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic76 = descriptiveStatistics74.getKurtosisImpl();
        double[] doubleArray77 = descriptiveStatistics74.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic78 = descriptiveStatistics74.getVarianceImpl();
        double double79 = descriptiveStatistics66.apply(univariateStatistic78);
        double double80 = descriptiveStatistics56.apply(univariateStatistic78);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic81 = descriptiveStatistics56.getVarianceImpl();
        double double82 = descriptiveStatistics56.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics83 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic84 = descriptiveStatistics83.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic85 = descriptiveStatistics83.getKurtosisImpl();
        long long86 = descriptiveStatistics83.getN();
        descriptiveStatistics83.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic89 = descriptiveStatistics83.getVarianceImpl();
        int int90 = descriptiveStatistics83.getWindowSize();
        double double91 = descriptiveStatistics83.getMin();
        double[] doubleArray92 = descriptiveStatistics83.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic93 = descriptiveStatistics83.getSumImpl();
        descriptiveStatistics56.setMaxImpl(univariateStatistic93);
        double double95 = descriptiveStatistics22.apply(univariateStatistic93);
        descriptiveStatistics0.setSumImpl(univariateStatistic93);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str33, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(descriptiveStatistics37);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertNotNull(descriptiveStatistics39);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertNotNull(descriptiveStatistics43);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(descriptiveStatistics45);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertNotNull(univariateStatistic52);
        org.junit.Assert.assertNotNull(univariateStatistic54);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(descriptiveStatistics56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str57, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertNotNull(descriptiveStatistics59);
        org.junit.Assert.assertNotNull(univariateStatistic60);
        org.junit.Assert.assertNotNull(descriptiveStatistics61);
        org.junit.Assert.assertNotNull(univariateStatistic62);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(descriptiveStatistics66);
        org.junit.Assert.assertNotNull(univariateStatistic67);
        org.junit.Assert.assertNotNull(descriptiveStatistics68);
        org.junit.Assert.assertNotNull(univariateStatistic69);
        org.junit.Assert.assertNotNull(univariateStatistic72);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNotNull(descriptiveStatistics74);
        org.junit.Assert.assertNotNull(univariateStatistic75);
        org.junit.Assert.assertNotNull(univariateStatistic76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic78);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertNotNull(univariateStatistic81);
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertNotNull(descriptiveStatistics83);
        org.junit.Assert.assertNotNull(univariateStatistic84);
        org.junit.Assert.assertNotNull(univariateStatistic85);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[0.0]");
        org.junit.Assert.assertNotNull(univariateStatistic93);
        org.junit.Assert.assertTrue(Double.isNaN(double95));
    }

    @Test
    public void test01695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01695");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        double[] doubleArray3 = resizableDoubleArray0.getElements();
        double[] doubleArray4 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.setNumElements((int) (byte) 100);
        resizableDoubleArray0.discardFrontElements((int) (byte) 100);
        resizableDoubleArray0.contract();
        int int10 = resizableDoubleArray0.getNumElements();
        double[] doubleArray11 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.addElement((double) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double15 = resizableDoubleArray0.getElement(32);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 32 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
    }

    @Test
    public void test01696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01696");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) (byte) 0);
        resizableDoubleArray0.contract();
        double[] doubleArray5 = resizableDoubleArray0.getElements();
        double[] doubleArray6 = resizableDoubleArray0.getElements();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.discardFrontElements((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot discard more elements than arecontained in this array.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
    }

    @Test
    public void test01697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01697");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray2 = new org.apache.commons.math.util.ResizableDoubleArray(0, 2.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The initial capacity supplied: 0must be a positive integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01698");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic6);
        double double9 = descriptiveStatistics0.getStandardDeviation();
        descriptiveStatistics0.clear();
        double double11 = descriptiveStatistics0.getSum();
        double double12 = descriptiveStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str14 = descriptiveStatistics13.toString();
        double double15 = descriptiveStatistics13.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic19);
        descriptiveStatistics13.setSkewnessImpl(univariateStatistic19);
        double double22 = descriptiveStatistics13.getStandardDeviation();
        descriptiveStatistics13.clear();
        descriptiveStatistics13.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics26.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics26.getKurtosisImpl();
        long long29 = descriptiveStatistics26.getN();
        descriptiveStatistics26.addValue((double) 0);
        int int32 = descriptiveStatistics26.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics26.getGeometricMeanImpl();
        descriptiveStatistics13.setVarianceImpl(univariateStatistic33);
        descriptiveStatistics0.setSumImpl(univariateStatistic33);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics0.getMaxImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics37 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics37.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics39 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics39.getSumsqImpl();
        descriptiveStatistics37.setKurtosisImpl(univariateStatistic40);
        descriptiveStatistics37.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic43 = descriptiveStatistics37.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics37.getSumsqImpl();
        double double45 = descriptiveStatistics37.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics37.getSumsqImpl();
        double[] doubleArray47 = descriptiveStatistics37.getSortedValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics37.getSkewnessImpl();
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic48);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics50 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str51 = descriptiveStatistics50.toString();
        double double52 = descriptiveStatistics50.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics53 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic54 = descriptiveStatistics53.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics55 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic56 = descriptiveStatistics55.getSumsqImpl();
        descriptiveStatistics53.setKurtosisImpl(univariateStatistic56);
        descriptiveStatistics50.setSkewnessImpl(univariateStatistic56);
        double double59 = descriptiveStatistics50.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics61 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double62 = descriptiveStatistics61.getStandardDeviation();
        long long63 = descriptiveStatistics61.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic64 = descriptiveStatistics61.getMinImpl();
        descriptiveStatistics50.setVarianceImpl(univariateStatistic64);
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray66 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int67 = resizableDoubleArray66.start();
        resizableDoubleArray66.addElement((double) (byte) 0);
        resizableDoubleArray66.contract();
        resizableDoubleArray66.clear();
        int int72 = resizableDoubleArray66.getExpansionMode();
        resizableDoubleArray66.clear();
        resizableDoubleArray66.addElement(1.0d);
        double[] doubleArray76 = resizableDoubleArray66.getValues();
        double double77 = univariateStatistic64.evaluate(doubleArray76);
        double double78 = descriptiveStatistics0.apply(univariateStatistic64);
        double double80 = descriptiveStatistics0.getPercentile((double) 10);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str14, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertNotNull(descriptiveStatistics37);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertNotNull(descriptiveStatistics39);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertNotNull(univariateStatistic43);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertNotNull(descriptiveStatistics50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str51, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertNotNull(descriptiveStatistics53);
        org.junit.Assert.assertNotNull(univariateStatistic54);
        org.junit.Assert.assertNotNull(descriptiveStatistics55);
        org.junit.Assert.assertNotNull(univariateStatistic56);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic64);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertTrue(Double.isNaN(double80));
    }

    @Test
    public void test01699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01699");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        resizableDoubleArray0.addElement(1.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double7 = resizableDoubleArray0.getElement(12);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 12 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    }

    @Test
    public void test01700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01700");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 1);
        double double2 = descriptiveStatistics1.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        descriptiveStatistics3.setWindowSize((int) (byte) -1);
        long long6 = descriptiveStatistics3.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics3.getKurtosisImpl();
        descriptiveStatistics1.setKurtosisImpl(univariateStatistic7);
        double double9 = descriptiveStatistics1.getSkewness();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics1.getVarianceImpl();
        double double11 = descriptiveStatistics1.getGeometricMean();
        java.lang.String str12 = descriptiveStatistics1.toString();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str12, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
    }

    @Test
    public void test01701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01701");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getSkewnessImpl();
        java.lang.String str5 = descriptiveStatistics1.toString();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getKurtosisImpl();
        descriptiveStatistics1.setMeanImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        descriptiveStatistics10.setKurtosisImpl(univariateStatistic13);
        descriptiveStatistics10.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics10.getGeometricMeanImpl();
        descriptiveStatistics1.setKurtosisImpl(univariateStatistic16);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str19 = descriptiveStatistics18.toString();
        double double20 = descriptiveStatistics18.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        descriptiveStatistics21.setKurtosisImpl(univariateStatistic24);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics21.getKurtosisImpl();
        double double27 = descriptiveStatistics18.apply(univariateStatistic26);
        double double28 = descriptiveStatistics18.getSumsq();
        double double29 = descriptiveStatistics18.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics30.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics32 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics32.getSumsqImpl();
        descriptiveStatistics30.setKurtosisImpl(univariateStatistic33);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics30.getKurtosisImpl();
        descriptiveStatistics18.setSumsqImpl(univariateStatistic35);
        double double37 = descriptiveStatistics1.apply(univariateStatistic35);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics38 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics38.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics40 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics40.getSumsqImpl();
        descriptiveStatistics38.setKurtosisImpl(univariateStatistic41);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics43.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics45 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics45.getSumsqImpl();
        descriptiveStatistics43.setKurtosisImpl(univariateStatistic46);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics43.getKurtosisImpl();
        descriptiveStatistics38.setMaxImpl(univariateStatistic48);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics50 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics50.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics52 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics52.getSumsqImpl();
        descriptiveStatistics50.setKurtosisImpl(univariateStatistic53);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics50.getKurtosisImpl();
        descriptiveStatistics38.setGeometricMeanImpl(univariateStatistic55);
        double double57 = descriptiveStatistics38.getMin();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics58 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double59 = descriptiveStatistics58.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics60 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic61 = descriptiveStatistics60.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic62 = descriptiveStatistics60.getKurtosisImpl();
        long long63 = descriptiveStatistics60.getN();
        descriptiveStatistics60.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics66 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic67 = descriptiveStatistics66.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics68 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic69 = descriptiveStatistics68.getSumsqImpl();
        descriptiveStatistics66.setKurtosisImpl(univariateStatistic69);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics71 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic72 = descriptiveStatistics71.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics73 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic74 = descriptiveStatistics73.getSumsqImpl();
        descriptiveStatistics71.setKurtosisImpl(univariateStatistic74);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic76 = descriptiveStatistics71.getKurtosisImpl();
        descriptiveStatistics66.setMaxImpl(univariateStatistic76);
        double double78 = descriptiveStatistics66.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic79 = descriptiveStatistics66.getMinImpl();
        descriptiveStatistics60.setMinImpl(univariateStatistic79);
        descriptiveStatistics58.setMeanImpl(univariateStatistic79);
        descriptiveStatistics38.setSumImpl(univariateStatistic79);
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray83 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int84 = resizableDoubleArray83.getExpansionMode();
        int int85 = resizableDoubleArray83.getNumElements();
        double[] doubleArray86 = resizableDoubleArray83.getElements();
        resizableDoubleArray83.clear();
        double double89 = resizableDoubleArray83.addElementRolling((double) (short) 100);
        double[] doubleArray90 = resizableDoubleArray83.getElements();
        double double91 = univariateStatistic79.evaluate(doubleArray90);
        double double92 = univariateStatistic35.evaluate(doubleArray90);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str5, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str19, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(descriptiveStatistics30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(descriptiveStatistics32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(descriptiveStatistics38);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(descriptiveStatistics40);
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertNotNull(descriptiveStatistics43);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(descriptiveStatistics45);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertNotNull(descriptiveStatistics50);
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertNotNull(descriptiveStatistics52);
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(descriptiveStatistics58);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(descriptiveStatistics60);
        org.junit.Assert.assertNotNull(univariateStatistic61);
        org.junit.Assert.assertNotNull(univariateStatistic62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics66);
        org.junit.Assert.assertNotNull(univariateStatistic67);
        org.junit.Assert.assertNotNull(descriptiveStatistics68);
        org.junit.Assert.assertNotNull(univariateStatistic69);
        org.junit.Assert.assertNotNull(descriptiveStatistics71);
        org.junit.Assert.assertNotNull(univariateStatistic72);
        org.junit.Assert.assertNotNull(descriptiveStatistics73);
        org.junit.Assert.assertNotNull(univariateStatistic74);
        org.junit.Assert.assertNotNull(univariateStatistic76);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertNotNull(univariateStatistic79);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double91));
        org.junit.Assert.assertTrue(Double.isNaN(double92));
    }

    @Test
    public void test01702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01702");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double1 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getSkewnessImpl();
        descriptiveStatistics0.setWindowSize((int) (byte) 10);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics5.getKurtosisImpl();
        long long8 = descriptiveStatistics5.getN();
        descriptiveStatistics5.addValue((double) 0);
        int int11 = descriptiveStatistics5.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics5.getMinImpl();
        double double13 = descriptiveStatistics0.apply(univariateStatistic12);
        double double14 = descriptiveStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics0.getGeometricMeanImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(univariateStatistic15);
    }

    @Test
    public void test01703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01703");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics1.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        descriptiveStatistics1.setKurtosisImpl(univariateStatistic4);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics1.getKurtosisImpl();
        double[] doubleArray10 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double11 = univariateStatistic6.evaluate(doubleArray10);
        descriptiveStatistics0.setMaxImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics13.getKurtosisImpl();
        long long16 = descriptiveStatistics13.getN();
        double[] doubleArray17 = descriptiveStatistics13.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics13.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics13.getMeanImpl();
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics21.getKurtosisImpl();
        long long24 = descriptiveStatistics21.getN();
        double double25 = descriptiveStatistics21.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics26.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics28.getSumsqImpl();
        descriptiveStatistics26.setKurtosisImpl(univariateStatistic29);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics31.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics33 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics33.getSumsqImpl();
        descriptiveStatistics31.setKurtosisImpl(univariateStatistic34);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics31.getKurtosisImpl();
        descriptiveStatistics26.setMaxImpl(univariateStatistic36);
        descriptiveStatistics21.setSumImpl(univariateStatistic36);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic36);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics0.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics0.getPercentileImpl();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics43.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics43.getKurtosisImpl();
        long long46 = descriptiveStatistics43.getN();
        double double47 = descriptiveStatistics43.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics48 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics48.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics50 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics50.getSumsqImpl();
        descriptiveStatistics48.setKurtosisImpl(univariateStatistic51);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics53 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic54 = descriptiveStatistics53.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics55 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic56 = descriptiveStatistics55.getSumsqImpl();
        descriptiveStatistics53.setKurtosisImpl(univariateStatistic56);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic58 = descriptiveStatistics53.getKurtosisImpl();
        descriptiveStatistics48.setMaxImpl(univariateStatistic58);
        descriptiveStatistics43.setSumImpl(univariateStatistic58);
        double double61 = descriptiveStatistics43.getSkewness();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics62 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double63 = descriptiveStatistics62.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic64 = descriptiveStatistics62.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics65 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str66 = descriptiveStatistics65.toString();
        descriptiveStatistics65.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic68 = descriptiveStatistics65.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic69 = descriptiveStatistics65.getSumsqImpl();
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray70 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int71 = resizableDoubleArray70.start();
        resizableDoubleArray70.addElement((double) 10);
        int int74 = resizableDoubleArray70.getExpansionMode();
        resizableDoubleArray70.addElement((double) (-1L));
        double[] doubleArray77 = resizableDoubleArray70.getElements();
        double double80 = univariateStatistic69.evaluate(doubleArray77, (int) (byte) 1, 1);
        double double81 = descriptiveStatistics62.apply(univariateStatistic69);
        double double82 = descriptiveStatistics62.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics83 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic84 = descriptiveStatistics83.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic85 = descriptiveStatistics83.getKurtosisImpl();
        long long86 = descriptiveStatistics83.getN();
        descriptiveStatistics83.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic89 = descriptiveStatistics83.getVarianceImpl();
        int int90 = descriptiveStatistics83.getWindowSize();
        double double91 = descriptiveStatistics83.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic92 = descriptiveStatistics83.getMaxImpl();
        double double93 = descriptiveStatistics62.apply(univariateStatistic92);
        descriptiveStatistics43.setMeanImpl(univariateStatistic92);
        descriptiveStatistics0.setMaxImpl(univariateStatistic92);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(descriptiveStatistics1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 2.0d + "'", double11 == 2.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(descriptiveStatistics31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(descriptiveStatistics33);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertNotNull(descriptiveStatistics43);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(descriptiveStatistics48);
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertNotNull(descriptiveStatistics50);
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertNotNull(descriptiveStatistics53);
        org.junit.Assert.assertNotNull(univariateStatistic54);
        org.junit.Assert.assertNotNull(descriptiveStatistics55);
        org.junit.Assert.assertNotNull(univariateStatistic56);
        org.junit.Assert.assertNotNull(univariateStatistic58);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertNotNull(descriptiveStatistics62);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertNotNull(univariateStatistic64);
        org.junit.Assert.assertNotNull(descriptiveStatistics65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str66, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic68);
        org.junit.Assert.assertNotNull(univariateStatistic69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 1.0d + "'", double80 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertNotNull(descriptiveStatistics83);
        org.junit.Assert.assertNotNull(univariateStatistic84);
        org.junit.Assert.assertNotNull(univariateStatistic85);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertNotNull(univariateStatistic92);
        org.junit.Assert.assertTrue(Double.isNaN(double93));
    }

    @Test
    public void test01704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01704");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray4 = new org.apache.commons.math.util.ResizableDoubleArray((int) (byte) 10, 10.0f, (float) (short) 10, 0);
        int int5 = resizableDoubleArray4.getExpansionMode();
        double[] doubleArray6 = resizableDoubleArray4.getValues();
        resizableDoubleArray4.addElement((double) '#');
        double double10 = resizableDoubleArray4.addElementRolling(101.0d);
        resizableDoubleArray4.discardFrontElements((int) (short) 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 101.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
    }

    @Test
    public void test01705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01705");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        double[] doubleArray3 = descriptiveStatistics0.getValues();
        long long4 = descriptiveStatistics0.getN();
        double[] doubleArray5 = descriptiveStatistics0.getSortedValues();
        double double6 = descriptiveStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = null;
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic7);
        double double9 = descriptiveStatistics0.getMin();
        double double10 = descriptiveStatistics0.getMean();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test01706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01706");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 1);
        double double2 = descriptiveStatistics1.getMax();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str6 = descriptiveStatistics5.toString();
        descriptiveStatistics5.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics5.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics10.getKurtosisImpl();
        long long13 = descriptiveStatistics10.getN();
        double double14 = descriptiveStatistics10.getMax();
        double double15 = descriptiveStatistics10.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double17 = descriptiveStatistics16.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics16.getMinImpl();
        descriptiveStatistics10.setSumImpl(univariateStatistic18);
        descriptiveStatistics5.setSumImpl(univariateStatistic18);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        descriptiveStatistics21.setKurtosisImpl(univariateStatistic24);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics26.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics28.getSumsqImpl();
        descriptiveStatistics26.setKurtosisImpl(univariateStatistic29);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics26.getKurtosisImpl();
        descriptiveStatistics21.setMaxImpl(univariateStatistic31);
        double double33 = descriptiveStatistics5.apply(univariateStatistic31);
        descriptiveStatistics1.setSumsqImpl(univariateStatistic31);
        long long35 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics1.getVarianceImpl();
        double double37 = descriptiveStatistics1.getMax();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str6, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
    }

    @Test
    public void test01707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01707");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        double double4 = descriptiveStatistics1.getMin();
        double double5 = descriptiveStatistics1.getMax();
        double double6 = descriptiveStatistics1.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics1.getSkewnessImpl();
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray11 = new org.apache.commons.math.util.ResizableDoubleArray(32, (float) 10, (float) 32);
        float float12 = resizableDoubleArray11.getContractionCriteria();
        int int13 = resizableDoubleArray11.getExpansionMode();
        double[] doubleArray14 = resizableDoubleArray11.getValues();
        double[] doubleArray15 = resizableDoubleArray11.getValues();
        double[] doubleArray16 = resizableDoubleArray11.getValues();
        // The following exception was thrown during execution in test generation
        try {
            double double19 = univariateStatistic7.evaluate(doubleArray16, 2, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 32.0f + "'", float12 == 32.0f);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test01708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01708");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        double[] doubleArray3 = resizableDoubleArray0.getElements();
        float float4 = resizableDoubleArray0.getExpansionFactor();
        resizableDoubleArray0.setNumElements(2);
        // The following exception was thrown during execution in test generation
        try {
            double double8 = resizableDoubleArray0.getElement(11);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 11 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 2.0f + "'", float4 == 2.0f);
    }

    @Test
    public void test01709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01709");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.setElement(0, (double) 0.0f);
        resizableDoubleArray0.clear();
        resizableDoubleArray0.setExpansionFactor(2.5f);
        // The following exception was thrown during execution in test generation
        try {
            double double9 = resizableDoubleArray0.getElement((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Elements cannot be retrieved from a negative array index");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    }

    @Test
    public void test01710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01710");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) 10);
        resizableDoubleArray0.setElement(1, (double) (short) 0);
        double double8 = resizableDoubleArray0.addElementRolling(10.0d);
        double[] doubleArray9 = resizableDoubleArray0.getElements();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setExpansionFactor((float) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, 10.0]");
    }

    @Test
    public void test01711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01711");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) 10);
        int int4 = resizableDoubleArray0.getNumElements();
        double double6 = resizableDoubleArray0.addElementRolling(0.0d);
        resizableDoubleArray0.addElement((double) 2);
        float float9 = resizableDoubleArray0.getContractionCriteria();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 2.5f + "'", float9 == 2.5f);
    }

    @Test
    public void test01712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01712");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.clear();
        double[] doubleArray3 = resizableDoubleArray0.getElements();
        float float4 = resizableDoubleArray0.getContractionCriteria();
        int int5 = resizableDoubleArray0.getNumElements();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setExpansionMode((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal expansionMode setting.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 2.5f + "'", float4 == 2.5f);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test01713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01713");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        float float1 = resizableDoubleArray0.getExpansionFactor();
        resizableDoubleArray0.clear();
        int int3 = resizableDoubleArray0.getNumElements();
        org.junit.Assert.assertTrue("'" + float1 + "' != '" + 2.0f + "'", float1 == 2.0f);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test01714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01714");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray4 = new org.apache.commons.math.util.ResizableDoubleArray(33, (float) (short) 1, (float) 91, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The expansion factor must be a number greater than 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01715");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic6);
        double double9 = descriptiveStatistics0.getStandardDeviation();
        descriptiveStatistics0.clear();
        double double11 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        descriptiveStatistics12.setKurtosisImpl(univariateStatistic15);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics17.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        descriptiveStatistics17.setKurtosisImpl(univariateStatistic20);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics17.getKurtosisImpl();
        descriptiveStatistics12.setMaxImpl(univariateStatistic22);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics24 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics24.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics26.getSumsqImpl();
        descriptiveStatistics24.setKurtosisImpl(univariateStatistic27);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics24.getKurtosisImpl();
        descriptiveStatistics12.setGeometricMeanImpl(univariateStatistic29);
        descriptiveStatistics0.setSumImpl(univariateStatistic29);
        double double32 = descriptiveStatistics0.getSkewness();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics0.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics34 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double35 = descriptiveStatistics34.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics34.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics37 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str38 = descriptiveStatistics37.toString();
        descriptiveStatistics37.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics37.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics37.getSumsqImpl();
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray42 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int43 = resizableDoubleArray42.start();
        resizableDoubleArray42.addElement((double) 10);
        int int46 = resizableDoubleArray42.getExpansionMode();
        resizableDoubleArray42.addElement((double) (-1L));
        double[] doubleArray49 = resizableDoubleArray42.getElements();
        double double52 = univariateStatistic41.evaluate(doubleArray49, (int) (byte) 1, 1);
        double double53 = descriptiveStatistics34.apply(univariateStatistic41);
        double double54 = descriptiveStatistics34.getMean();
        java.lang.String str55 = descriptiveStatistics34.toString();
        double[] doubleArray56 = descriptiveStatistics34.getValues();
        double double57 = univariateStatistic33.evaluate(doubleArray56);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(descriptiveStatistics34);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertNotNull(descriptiveStatistics37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str38, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.0d + "'", double52 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str55, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double57));
    }

    @Test
    public void test01716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01716");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement(0.0d);
        int int4 = resizableDoubleArray0.getNumElements();
        double double6 = resizableDoubleArray0.addElementRolling(2.0d);
        resizableDoubleArray0.setElement((int) (short) 1, (double) 100L);
        int int10 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.addElement(2704.0d);
        double double14 = resizableDoubleArray0.getElement(0);
        double double16 = resizableDoubleArray0.addElementRolling((double) 12);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 2.0d + "'", double14 == 2.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 2.0d + "'", double16 == 2.0d);
    }

    @Test
    public void test01717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01717");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray4 = new org.apache.commons.math.util.ResizableDoubleArray(101, (float) (byte) 10, (float) 10L, 31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal expansionMode setting.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01718");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        double double3 = descriptiveStatistics1.getVariance();
        double double4 = descriptiveStatistics1.getSum();
        long long5 = descriptiveStatistics1.getN();
        int int6 = descriptiveStatistics1.getWindowSize();
        double double7 = descriptiveStatistics1.getMax();
        descriptiveStatistics1.addValue((double) 32.0f);
        double double11 = descriptiveStatistics1.getPercentile((double) 10L);
        double double12 = descriptiveStatistics1.getGeometricMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics13.getKurtosisImpl();
        long long16 = descriptiveStatistics13.getN();
        double double17 = descriptiveStatistics13.getMax();
        double double18 = descriptiveStatistics13.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics13.getKurtosisImpl();
        descriptiveStatistics1.setKurtosisImpl(univariateStatistic19);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 32.0d + "'", double11 == 32.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 32.0d + "'", double12 == 32.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(univariateStatistic19);
    }

    @Test
    public void test01719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01719");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray3 = new org.apache.commons.math.util.ResizableDoubleArray(32, (float) 10, (float) 32);
        float float4 = resizableDoubleArray3.getContractionCriteria();
        resizableDoubleArray3.clear();
        double[] doubleArray6 = resizableDoubleArray3.getElements();
        java.lang.Class<?> wildcardClass7 = resizableDoubleArray3.getClass();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance((java.lang.Class) wildcardClass7);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.util.ResizableDoubleArray cannot be cast to org.apache.commons.math.stat.descriptive.DescriptiveStatistics");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 32.0f + "'", float4 == 32.0f);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test01720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01720");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics5.getKurtosisImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic10);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        descriptiveStatistics12.setKurtosisImpl(univariateStatistic15);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics12.getKurtosisImpl();
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic17);
        double double19 = descriptiveStatistics0.getSum();
        double double20 = descriptiveStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics0.getSkewnessImpl();
        int int22 = descriptiveStatistics0.getWindowSize();
        double double23 = descriptiveStatistics0.getMin();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
    }

    @Test
    public void test01721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01721");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        double double1 = descriptiveStatistics0.getSum();
        double double2 = descriptiveStatistics0.getStandardDeviation();
        double double3 = descriptiveStatistics0.getGeometricMean();
        // The following exception was thrown during execution in test generation
        try {
            double double5 = descriptiveStatistics0.getPercentile(0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal quantile value: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
    }

    @Test
    public void test01722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01722");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.addValue((double) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics0.getKurtosisImpl();
        double double5 = descriptiveStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getSumImpl();
        double double7 = descriptiveStatistics0.getVariance();
        descriptiveStatistics0.addValue((double) (byte) 0);
        double double11 = descriptiveStatistics0.getElement(1);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    }

    @Test
    public void test01723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01723");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement(0.0d);
        resizableDoubleArray0.clear();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.discardFrontElements(53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot discard more elements than arecontained in this array.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    }

    @Test
    public void test01724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01724");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        double double3 = descriptiveStatistics1.getVariance();
        double double4 = descriptiveStatistics1.getSum();
        long long5 = descriptiveStatistics1.getN();
        int int6 = descriptiveStatistics1.getWindowSize();
        double double7 = descriptiveStatistics1.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics8.getKurtosisImpl();
        long long11 = descriptiveStatistics8.getN();
        double[] doubleArray12 = descriptiveStatistics8.getValues();
        double double13 = descriptiveStatistics8.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double16 = descriptiveStatistics15.getStandardDeviation();
        long long17 = descriptiveStatistics15.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics15.getKurtosisImpl();
        descriptiveStatistics8.setSumImpl(univariateStatistic18);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics8.getMaxImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics21.getKurtosisImpl();
        double[] doubleArray24 = descriptiveStatistics21.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics21.getVarianceImpl();
        double double26 = descriptiveStatistics21.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics21.getGeometricMeanImpl();
        descriptiveStatistics8.setKurtosisImpl(univariateStatistic27);
        descriptiveStatistics1.setSumImpl(univariateStatistic27);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics1.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        descriptiveStatistics31.setWindowSize((int) (byte) -1);
        long long34 = descriptiveStatistics31.getN();
        double double35 = descriptiveStatistics31.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str37 = descriptiveStatistics36.toString();
        double double38 = descriptiveStatistics36.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics39 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics39.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics41.getSumsqImpl();
        descriptiveStatistics39.setKurtosisImpl(univariateStatistic42);
        descriptiveStatistics36.setSkewnessImpl(univariateStatistic42);
        descriptiveStatistics31.setKurtosisImpl(univariateStatistic42);
        double double46 = descriptiveStatistics31.getGeometricMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics47 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str48 = descriptiveStatistics47.toString();
        double double49 = descriptiveStatistics47.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics50 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics50.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics52 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics52.getSumsqImpl();
        descriptiveStatistics50.setKurtosisImpl(univariateStatistic53);
        descriptiveStatistics47.setSkewnessImpl(univariateStatistic53);
        double double56 = descriptiveStatistics47.getStandardDeviation();
        descriptiveStatistics47.clear();
        descriptiveStatistics47.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics60 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic61 = descriptiveStatistics60.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic62 = descriptiveStatistics60.getKurtosisImpl();
        long long63 = descriptiveStatistics60.getN();
        descriptiveStatistics60.addValue((double) 0);
        int int66 = descriptiveStatistics60.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic67 = descriptiveStatistics60.getGeometricMeanImpl();
        descriptiveStatistics47.setVarianceImpl(univariateStatistic67);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics70 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double71 = descriptiveStatistics70.getStandardDeviation();
        long long72 = descriptiveStatistics70.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic73 = descriptiveStatistics70.getSkewnessImpl();
        double double74 = descriptiveStatistics47.apply(univariateStatistic73);
        descriptiveStatistics31.setVarianceImpl(univariateStatistic73);
        double[] doubleArray76 = descriptiveStatistics31.getValues();
        double double77 = univariateStatistic30.evaluate(doubleArray76);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(descriptiveStatistics31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str37, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(descriptiveStatistics39);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertNotNull(descriptiveStatistics41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(descriptiveStatistics47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str48, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(descriptiveStatistics50);
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertNotNull(descriptiveStatistics52);
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(descriptiveStatistics60);
        org.junit.Assert.assertNotNull(univariateStatistic61);
        org.junit.Assert.assertNotNull(univariateStatistic62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic67);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic73);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double77));
    }

    @Test
    public void test01725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01725");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics0.getMeanImpl();
        int int8 = descriptiveStatistics0.getWindowSize();
        double double9 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics0.getSumImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(univariateStatistic10);
    }

    @Test
    public void test01726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01726");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics1.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        descriptiveStatistics8.setKurtosisImpl(univariateStatistic11);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics8.getKurtosisImpl();
        descriptiveStatistics3.setMaxImpl(univariateStatistic13);
        double double15 = descriptiveStatistics3.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics3.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics3.getVarianceImpl();
        descriptiveStatistics1.setMinImpl(univariateStatistic17);
        double double19 = descriptiveStatistics1.getMin();
        double double20 = descriptiveStatistics1.getGeometricMean();
        double double21 = descriptiveStatistics1.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double23 = descriptiveStatistics1.apply(univariateStatistic22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
    }

    @Test
    public void test01727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01727");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) (byte) 0);
        resizableDoubleArray0.contract();
        resizableDoubleArray0.clear();
        int int6 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.setElement((int) (short) 1, (double) 1);
        resizableDoubleArray0.addElement((double) (short) 1);
        double double13 = resizableDoubleArray0.addElementRolling(97.0d);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test01728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01728");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray4 = new org.apache.commons.math.util.ResizableDoubleArray(2, (float) 33, 35.0f, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal expansionMode setting.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01729");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        descriptiveStatistics0.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics6.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        descriptiveStatistics6.setKurtosisImpl(univariateStatistic9);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        descriptiveStatistics11.setKurtosisImpl(univariateStatistic14);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics11.getKurtosisImpl();
        descriptiveStatistics6.setMaxImpl(univariateStatistic16);
        double double18 = descriptiveStatistics6.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics6.getMinImpl();
        descriptiveStatistics0.setMinImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics0.getKurtosisImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics0.getMaxImpl();
        double double23 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics24 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics24.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics26.getSumsqImpl();
        descriptiveStatistics24.setKurtosisImpl(univariateStatistic27);
        descriptiveStatistics24.clear();
        double double30 = descriptiveStatistics24.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics24.getVarianceImpl();
        descriptiveStatistics0.setVarianceImpl(univariateStatistic31);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = null;
        // The following exception was thrown during execution in test generation
        try {
            descriptiveStatistics0.setPercentileImpl(univariateStatistic33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(univariateStatistic31);
    }

    @Test
    public void test01730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01730");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        double[] doubleArray1 = resizableDoubleArray0.getElements();
        double[] doubleArray2 = resizableDoubleArray0.getElements();
        double[] doubleArray3 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.setElement(2, (double) 1.0f);
        resizableDoubleArray0.addElement(4.5d);
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setExpansionMode((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal expansionMode setting.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
    }

    @Test
    public void test01731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01731");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        descriptiveStatistics3.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics3.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics10.getKurtosisImpl();
        long long13 = descriptiveStatistics10.getN();
        double[] doubleArray14 = descriptiveStatistics10.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics10.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics10.getMinImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic16);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic16);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str20 = descriptiveStatistics19.toString();
        descriptiveStatistics19.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str23 = descriptiveStatistics22.toString();
        double double24 = descriptiveStatistics22.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics25.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics27.getSumsqImpl();
        descriptiveStatistics25.setKurtosisImpl(univariateStatistic28);
        descriptiveStatistics22.setSkewnessImpl(univariateStatistic28);
        double double31 = descriptiveStatistics22.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics33 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double34 = descriptiveStatistics33.getStandardDeviation();
        long long35 = descriptiveStatistics33.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics33.getMinImpl();
        descriptiveStatistics22.setVarianceImpl(univariateStatistic36);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics22.getMeanImpl();
        descriptiveStatistics19.setMeanImpl(univariateStatistic38);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic38);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics41.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics43.getSumsqImpl();
        descriptiveStatistics41.setKurtosisImpl(univariateStatistic44);
        descriptiveStatistics41.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics41.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics41.getSumsqImpl();
        double double49 = descriptiveStatistics41.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics50 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str51 = descriptiveStatistics50.toString();
        double double52 = descriptiveStatistics50.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics53 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic54 = descriptiveStatistics53.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics55 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic56 = descriptiveStatistics55.getSumsqImpl();
        descriptiveStatistics53.setKurtosisImpl(univariateStatistic56);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic58 = descriptiveStatistics53.getKurtosisImpl();
        double double59 = descriptiveStatistics50.apply(univariateStatistic58);
        double double60 = descriptiveStatistics50.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic61 = descriptiveStatistics50.getSumImpl();
        descriptiveStatistics41.setGeometricMeanImpl(univariateStatistic61);
        double[] doubleArray63 = descriptiveStatistics41.getSortedValues();
        // The following exception was thrown during execution in test generation
        try {
            double double66 = univariateStatistic38.evaluate(doubleArray63, 0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str20, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str23, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertNotNull(descriptiveStatistics41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(descriptiveStatistics43);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(descriptiveStatistics50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str51, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertNotNull(descriptiveStatistics53);
        org.junit.Assert.assertNotNull(univariateStatistic54);
        org.junit.Assert.assertNotNull(descriptiveStatistics55);
        org.junit.Assert.assertNotNull(univariateStatistic56);
        org.junit.Assert.assertNotNull(univariateStatistic58);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(univariateStatistic61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]");
    }

    @Test
    public void test01732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01732");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.setElement(0, (double) 0.0f);
        resizableDoubleArray0.clear();
        int int6 = resizableDoubleArray0.getExpansionMode();
        double[] doubleArray7 = resizableDoubleArray0.getElements();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setExpansionFactor((float) 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
    }

    @Test
    public void test01733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01733");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics7.getKurtosisImpl();
        long long10 = descriptiveStatistics7.getN();
        descriptiveStatistics7.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics7.getSkewnessImpl();
        descriptiveStatistics0.setSumsqImpl(univariateStatistic13);
        double double15 = descriptiveStatistics0.getStandardDeviation();
        descriptiveStatistics0.addValue(4.5d);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test01734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01734");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics5.getKurtosisImpl();
        long long8 = descriptiveStatistics5.getN();
        double double9 = descriptiveStatistics5.getMax();
        double double10 = descriptiveStatistics5.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double12 = descriptiveStatistics11.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics11.getMinImpl();
        descriptiveStatistics5.setSumImpl(univariateStatistic13);
        descriptiveStatistics0.setSumImpl(univariateStatistic13);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        descriptiveStatistics21.setKurtosisImpl(univariateStatistic24);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics21.getKurtosisImpl();
        descriptiveStatistics16.setMaxImpl(univariateStatistic26);
        double double28 = descriptiveStatistics0.apply(univariateStatistic26);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double31 = descriptiveStatistics30.getStandardDeviation();
        double double32 = descriptiveStatistics30.getVariance();
        double double33 = descriptiveStatistics30.getSum();
        long long34 = descriptiveStatistics30.getN();
        int int35 = descriptiveStatistics30.getWindowSize();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics36.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics38 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics38.getSumsqImpl();
        descriptiveStatistics36.setKurtosisImpl(univariateStatistic39);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics41.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics43.getSumsqImpl();
        descriptiveStatistics41.setKurtosisImpl(univariateStatistic44);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics41.getKurtosisImpl();
        descriptiveStatistics36.setMaxImpl(univariateStatistic46);
        double double48 = descriptiveStatistics36.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics49 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str50 = descriptiveStatistics49.toString();
        double double51 = descriptiveStatistics49.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics52 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics52.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics54 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics54.getSumsqImpl();
        descriptiveStatistics52.setKurtosisImpl(univariateStatistic55);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics52.getKurtosisImpl();
        double double58 = descriptiveStatistics49.apply(univariateStatistic57);
        descriptiveStatistics36.setGeometricMeanImpl(univariateStatistic57);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic60 = descriptiveStatistics36.getPercentileImpl();
        descriptiveStatistics30.setSumImpl(univariateStatistic60);
        descriptiveStatistics0.setPercentileImpl(univariateStatistic60);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics64 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double65 = descriptiveStatistics64.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic66 = descriptiveStatistics64.getGeometricMeanImpl();
        descriptiveStatistics0.setMeanImpl(univariateStatistic66);
        double[] doubleArray68 = descriptiveStatistics0.getValues();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(descriptiveStatistics38);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(descriptiveStatistics41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(descriptiveStatistics43);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(descriptiveStatistics49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str50, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(descriptiveStatistics52);
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertNotNull(descriptiveStatistics54);
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertNotNull(univariateStatistic60);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(univariateStatistic66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]");
    }

    @Test
    public void test01735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01735");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray3 = new org.apache.commons.math.util.ResizableDoubleArray(0, (float) 1, (float) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The expansion factor must be a number greater than 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01736");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) 10);
        int int4 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) (-1L));
        double[] doubleArray7 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.addElement((double) 0L);
        resizableDoubleArray0.contract();
        resizableDoubleArray0.clear();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, -1.0]");
    }

    @Test
    public void test01737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01737");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 1);
        double double2 = descriptiveStatistics1.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str4 = descriptiveStatistics3.toString();
        double double5 = descriptiveStatistics3.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics6.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        descriptiveStatistics6.setKurtosisImpl(univariateStatistic9);
        descriptiveStatistics3.setSkewnessImpl(univariateStatistic9);
        double double12 = descriptiveStatistics3.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        descriptiveStatistics13.setKurtosisImpl(univariateStatistic16);
        descriptiveStatistics13.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics13.getPercentileImpl();
        double double20 = descriptiveStatistics13.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics21.getKurtosisImpl();
        double[] doubleArray24 = descriptiveStatistics21.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics21.getVarianceImpl();
        double double26 = descriptiveStatistics13.apply(univariateStatistic25);
        double double27 = descriptiveStatistics3.apply(univariateStatistic25);
        descriptiveStatistics1.setKurtosisImpl(univariateStatistic25);
        double double29 = descriptiveStatistics1.getGeometricMean();
        double double30 = descriptiveStatistics1.getVariance();
        double double31 = descriptiveStatistics1.getMean();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str4, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
    }

    @Test
    public void test01738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01738");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getMinImpl();
        double double5 = descriptiveStatistics1.getMax();
        double double6 = descriptiveStatistics1.getMean();
        double double7 = descriptiveStatistics1.getStandardDeviation();
        descriptiveStatistics1.addValue((-1.0d));
        double double10 = descriptiveStatistics1.getSum();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-1.0d) + "'", double10 == (-1.0d));
    }

    @Test
    public void test01739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01739");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) 10);
        resizableDoubleArray0.setElement(1, (double) (short) 0);
        resizableDoubleArray0.contract();
        resizableDoubleArray0.addElement((double) 0.0f);
        resizableDoubleArray0.setNumElements((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.discardFrontElements((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot discard more elements than arecontained in this array.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    }

    @Test
    public void test01740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01740");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        int int3 = resizableDoubleArray0.start();
        resizableDoubleArray0.setElement((int) (short) 10, (double) 100L);
        double[] doubleArray7 = resizableDoubleArray0.getValues();
        double double9 = resizableDoubleArray0.addElementRolling(0.0d);
        int int10 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.contract();
        resizableDoubleArray0.addElement(97.0d);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 11 + "'", int10 == 11);
    }

    @Test
    public void test01741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01741");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics3.getKurtosisImpl();
        double double9 = descriptiveStatistics0.apply(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double12 = descriptiveStatistics11.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics11.getGeometricMeanImpl();
        descriptiveStatistics0.setMeanImpl(univariateStatistic13);
        double double15 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic19);
        descriptiveStatistics16.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics16.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics16.getSumsqImpl();
        double double24 = descriptiveStatistics16.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str26 = descriptiveStatistics25.toString();
        double double27 = descriptiveStatistics25.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics28.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics30.getSumsqImpl();
        descriptiveStatistics28.setKurtosisImpl(univariateStatistic31);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics28.getKurtosisImpl();
        double double34 = descriptiveStatistics25.apply(univariateStatistic33);
        double double35 = descriptiveStatistics25.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics25.getSumImpl();
        descriptiveStatistics16.setGeometricMeanImpl(univariateStatistic36);
        double[] doubleArray38 = descriptiveStatistics16.getSortedValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics40 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics40.getPercentileImpl();
        double double42 = descriptiveStatistics16.apply(univariateStatistic41);
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic41);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics45 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double46 = descriptiveStatistics45.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics45.getGeometricMeanImpl();
        descriptiveStatistics45.setWindowSize(100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic50 = descriptiveStatistics45.getMeanImpl();
        // The following exception was thrown during execution in test generation
        try {
            descriptiveStatistics0.setPercentileImpl(univariateStatistic50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Percentile implementation does not support setQuantile");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str26, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(descriptiveStatistics30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertNotNull(univariateStatistic50);
    }

    @Test
    public void test01742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01742");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) 10);
        int int4 = resizableDoubleArray0.getExpansionMode();
        double double6 = resizableDoubleArray0.addElementRolling(10000.0d);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
    }

    @Test
    public void test01743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01743");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        double[] doubleArray1 = resizableDoubleArray0.getElements();
        float float2 = resizableDoubleArray0.getContractionCriteria();
        int int3 = resizableDoubleArray0.getExpansionMode();
        float float4 = resizableDoubleArray0.getContractionCriteria();
        resizableDoubleArray0.addElement((double) 0.0f);
        float float7 = resizableDoubleArray0.getExpansionFactor();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertTrue("'" + float2 + "' != '" + 2.5f + "'", float2 == 2.5f);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 2.5f + "'", float4 == 2.5f);
        org.junit.Assert.assertTrue("'" + float7 + "' != '" + 2.0f + "'", float7 == 2.0f);
    }

    @Test
    public void test01744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01744");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        descriptiveStatistics0.setWindowSize((int) (byte) -1);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str4 = descriptiveStatistics3.toString();
        descriptiveStatistics3.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics3.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics8.getKurtosisImpl();
        long long11 = descriptiveStatistics8.getN();
        double double12 = descriptiveStatistics8.getMax();
        double double13 = descriptiveStatistics8.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double15 = descriptiveStatistics14.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics14.getMinImpl();
        descriptiveStatistics8.setSumImpl(univariateStatistic16);
        descriptiveStatistics3.setSumImpl(univariateStatistic16);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        descriptiveStatistics19.setKurtosisImpl(univariateStatistic22);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics24 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics24.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics26.getSumsqImpl();
        descriptiveStatistics24.setKurtosisImpl(univariateStatistic27);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics24.getKurtosisImpl();
        descriptiveStatistics19.setMaxImpl(univariateStatistic29);
        double double31 = descriptiveStatistics3.apply(univariateStatistic29);
        double double32 = descriptiveStatistics0.apply(univariateStatistic29);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics0.getMeanImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str4, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(univariateStatistic33);
    }

    @Test
    public void test01745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01745");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getKurtosisImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double6 = descriptiveStatistics5.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double9 = descriptiveStatistics8.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics8.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double13 = descriptiveStatistics12.getStandardDeviation();
        long long14 = descriptiveStatistics12.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics12.getMinImpl();
        descriptiveStatistics8.setMaxImpl(univariateStatistic15);
        descriptiveStatistics5.setMinImpl(univariateStatistic15);
        descriptiveStatistics1.setSumImpl(univariateStatistic15);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics1.getMaxImpl();
        double double20 = descriptiveStatistics1.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics1.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics1.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics25.getSumsqImpl();
        descriptiveStatistics23.setKurtosisImpl(univariateStatistic26);
        double double28 = descriptiveStatistics23.getMean();
        descriptiveStatistics23.addValue((double) (byte) 10);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics32 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double33 = descriptiveStatistics32.getStandardDeviation();
        long long34 = descriptiveStatistics32.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics32.getMinImpl();
        descriptiveStatistics23.setSkewnessImpl(univariateStatistic35);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics23.getMeanImpl();
        double[] doubleArray38 = descriptiveStatistics23.getValues();
        // The following exception was thrown during execution in test generation
        try {
            double double41 = univariateStatistic22.evaluate(doubleArray38, (int) (byte) 10, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0]");
    }

    @Test
    public void test01746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01746");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray1 = new org.apache.commons.math.util.ResizableDoubleArray((int) (byte) 10);
        double[] doubleArray2 = resizableDoubleArray1.getValues();
        int int3 = resizableDoubleArray1.getNumElements();
        int int4 = resizableDoubleArray1.getNumElements();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray1.setExpansionMode(101);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal expansionMode setting.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test01747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01747");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) 10);
        double[] doubleArray4 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.clear();
        double[] doubleArray6 = resizableDoubleArray0.getValues();
        int int7 = resizableDoubleArray0.getNumElements();
        int int8 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.addElement((double) 31);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[31.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test01748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01748");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray3 = new org.apache.commons.math.util.ResizableDoubleArray((int) '4', 1.0f, (-1.0f));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01749");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        double double3 = descriptiveStatistics1.getVariance();
        double double4 = descriptiveStatistics1.getSum();
        long long5 = descriptiveStatistics1.getN();
        int int6 = descriptiveStatistics1.getWindowSize();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics9.getSumsqImpl();
        descriptiveStatistics7.setKurtosisImpl(univariateStatistic10);
        descriptiveStatistics7.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics7.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics7.getSumsqImpl();
        double double15 = descriptiveStatistics7.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics7.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics20.getSumsqImpl();
        descriptiveStatistics18.setKurtosisImpl(univariateStatistic21);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics18.getKurtosisImpl();
        double[] doubleArray27 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double28 = univariateStatistic23.evaluate(doubleArray27);
        descriptiveStatistics17.setMaxImpl(univariateStatistic23);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics30.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics30.getKurtosisImpl();
        long long33 = descriptiveStatistics30.getN();
        double[] doubleArray34 = descriptiveStatistics30.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics30.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics30.getMeanImpl();
        descriptiveStatistics17.setGeometricMeanImpl(univariateStatistic36);
        descriptiveStatistics7.setGeometricMeanImpl(univariateStatistic36);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics39 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double40 = descriptiveStatistics39.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics41.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic43 = descriptiveStatistics41.getKurtosisImpl();
        long long44 = descriptiveStatistics41.getN();
        descriptiveStatistics41.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics47 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics47.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics49 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic50 = descriptiveStatistics49.getSumsqImpl();
        descriptiveStatistics47.setKurtosisImpl(univariateStatistic50);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics52 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics52.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics54 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics54.getSumsqImpl();
        descriptiveStatistics52.setKurtosisImpl(univariateStatistic55);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics52.getKurtosisImpl();
        descriptiveStatistics47.setMaxImpl(univariateStatistic57);
        double double59 = descriptiveStatistics47.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic60 = descriptiveStatistics47.getMinImpl();
        descriptiveStatistics41.setMinImpl(univariateStatistic60);
        descriptiveStatistics39.setMeanImpl(univariateStatistic60);
        double double63 = descriptiveStatistics39.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics64 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic65 = descriptiveStatistics64.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics66 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic67 = descriptiveStatistics66.getSumsqImpl();
        descriptiveStatistics64.setKurtosisImpl(univariateStatistic67);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic69 = descriptiveStatistics64.getKurtosisImpl();
        descriptiveStatistics39.setKurtosisImpl(univariateStatistic69);
        descriptiveStatistics7.setSumsqImpl(univariateStatistic69);
        double double72 = descriptiveStatistics1.apply(univariateStatistic69);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic73 = descriptiveStatistics1.getMaxImpl();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(descriptiveStatistics20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 2.0d + "'", double28 == 2.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertNotNull(descriptiveStatistics39);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(descriptiveStatistics41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(univariateStatistic43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics47);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertNotNull(descriptiveStatistics49);
        org.junit.Assert.assertNotNull(univariateStatistic50);
        org.junit.Assert.assertNotNull(descriptiveStatistics52);
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertNotNull(descriptiveStatistics54);
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(univariateStatistic60);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertNotNull(descriptiveStatistics64);
        org.junit.Assert.assertNotNull(univariateStatistic65);
        org.junit.Assert.assertNotNull(descriptiveStatistics66);
        org.junit.Assert.assertNotNull(univariateStatistic67);
        org.junit.Assert.assertNotNull(univariateStatistic69);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertNotNull(univariateStatistic73);
    }

    @Test
    public void test01750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01750");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        float float1 = resizableDoubleArray0.getExpansionFactor();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.setNumElements((int) ' ');
        int int5 = resizableDoubleArray0.getNumElements();
        float float6 = resizableDoubleArray0.getExpansionFactor();
        int int7 = resizableDoubleArray0.start();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.discardFrontElements(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot discard more elements than arecontained in this array.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float1 + "' != '" + 2.0f + "'", float1 == 2.0f);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 32 + "'", int5 == 32);
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + 2.0f + "'", float6 == 2.0f);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test01751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01751");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray2 = new org.apache.commons.math.util.ResizableDoubleArray(10, (float) '#');
        float float3 = resizableDoubleArray2.getExpansionFactor();
        float float4 = resizableDoubleArray2.getContractionCriteria();
        resizableDoubleArray2.clear();
        int int6 = resizableDoubleArray2.start();
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 35.0f + "'", float3 == 35.0f);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 35.5f + "'", float4 == 35.5f);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test01752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01752");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray4 = new org.apache.commons.math.util.ResizableDoubleArray(91, (float) 31, (float) (short) 1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01753");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getMinImpl();
        descriptiveStatistics0.clear();
        double double8 = descriptiveStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics0.getMinImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(univariateStatistic9);
    }

    @Test
    public void test01754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01754");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        descriptiveStatistics0.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics6.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        descriptiveStatistics6.setKurtosisImpl(univariateStatistic9);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        descriptiveStatistics11.setKurtosisImpl(univariateStatistic14);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics11.getKurtosisImpl();
        descriptiveStatistics6.setMaxImpl(univariateStatistic16);
        double double18 = descriptiveStatistics6.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics6.getMinImpl();
        descriptiveStatistics0.setMinImpl(univariateStatistic19);
        double double21 = descriptiveStatistics0.getMean();
        double double22 = descriptiveStatistics0.getSum();
        double double23 = descriptiveStatistics0.getKurtosis();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
    }

    @Test
    public void test01755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01755");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics(2);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double4 = descriptiveStatistics3.getStandardDeviation();
        double double5 = descriptiveStatistics3.getVariance();
        double double6 = descriptiveStatistics3.getSum();
        double double8 = descriptiveStatistics3.getPercentile(2.0d);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str10 = descriptiveStatistics9.toString();
        descriptiveStatistics9.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics9.getGeometricMeanImpl();
        double double13 = descriptiveStatistics9.getMax();
        double[] doubleArray14 = descriptiveStatistics9.getSortedValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics9.getMaxImpl();
        double double16 = descriptiveStatistics3.apply(univariateStatistic15);
        double double17 = descriptiveStatistics1.apply(univariateStatistic15);
        double double18 = descriptiveStatistics1.getStandardDeviation();
        double double19 = descriptiveStatistics1.getVariance();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str10, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
    }

    @Test
    public void test01756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01756");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        double[] doubleArray3 = descriptiveStatistics0.getValues();
        long long4 = descriptiveStatistics0.getN();
        double[] doubleArray5 = descriptiveStatistics0.getSortedValues();
        double double6 = descriptiveStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = null;
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic7);
        double double9 = descriptiveStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics10.getKurtosisImpl();
        long long13 = descriptiveStatistics10.getN();
        descriptiveStatistics10.addValue((double) 0);
        int int16 = descriptiveStatistics10.getWindowSize();
        double double17 = descriptiveStatistics10.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics10.getMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics20.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics22.getSumsqImpl();
        descriptiveStatistics20.setKurtosisImpl(univariateStatistic23);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics20.getKurtosisImpl();
        double[] doubleArray29 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double30 = univariateStatistic25.evaluate(doubleArray29);
        descriptiveStatistics19.setMaxImpl(univariateStatistic25);
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray32 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int33 = resizableDoubleArray32.getExpansionMode();
        resizableDoubleArray32.addElement(0.0d);
        int int36 = resizableDoubleArray32.getExpansionMode();
        float float37 = resizableDoubleArray32.getContractionCriteria();
        resizableDoubleArray32.setNumElements(10);
        double[] doubleArray40 = resizableDoubleArray32.getElements();
        double double41 = univariateStatistic25.evaluate(doubleArray40);
        double double42 = univariateStatistic18.evaluate(doubleArray40);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic18);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics0.getMinImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(descriptiveStatistics20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(descriptiveStatistics22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2.0d + "'", double30 == 2.0d);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + float37 + "' != '" + 2.5f + "'", float37 == 2.5f);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(univariateStatistic44);
    }

    @Test
    public void test01757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01757");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics5.getKurtosisImpl();
        long long8 = descriptiveStatistics5.getN();
        double double9 = descriptiveStatistics5.getMax();
        double double10 = descriptiveStatistics5.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double12 = descriptiveStatistics11.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics11.getMinImpl();
        descriptiveStatistics5.setSumImpl(univariateStatistic13);
        descriptiveStatistics0.setSumImpl(univariateStatistic13);
        double double16 = descriptiveStatistics0.getMin();
        java.lang.String str17 = descriptiveStatistics0.toString();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        descriptiveStatistics19.setKurtosisImpl(univariateStatistic22);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics19.getKurtosisImpl();
        double[] doubleArray28 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double29 = univariateStatistic24.evaluate(doubleArray28);
        descriptiveStatistics18.setMaxImpl(univariateStatistic24);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics31.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics31.getKurtosisImpl();
        long long34 = descriptiveStatistics31.getN();
        double double35 = descriptiveStatistics31.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics36.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics38 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics38.getSumsqImpl();
        descriptiveStatistics36.setKurtosisImpl(univariateStatistic39);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics41.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics43.getSumsqImpl();
        descriptiveStatistics41.setKurtosisImpl(univariateStatistic44);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics41.getKurtosisImpl();
        descriptiveStatistics36.setMaxImpl(univariateStatistic46);
        descriptiveStatistics31.setSumImpl(univariateStatistic46);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics50 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics50.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics52 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics52.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics54 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics54.getSumsqImpl();
        descriptiveStatistics52.setKurtosisImpl(univariateStatistic55);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics57 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic58 = descriptiveStatistics57.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics59 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic60 = descriptiveStatistics59.getSumsqImpl();
        descriptiveStatistics57.setKurtosisImpl(univariateStatistic60);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic62 = descriptiveStatistics57.getKurtosisImpl();
        descriptiveStatistics52.setMaxImpl(univariateStatistic62);
        double double64 = descriptiveStatistics52.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic65 = descriptiveStatistics52.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic66 = descriptiveStatistics52.getVarianceImpl();
        descriptiveStatistics50.setMinImpl(univariateStatistic66);
        descriptiveStatistics31.setMeanImpl(univariateStatistic66);
        descriptiveStatistics18.setSumImpl(univariateStatistic66);
        double double70 = descriptiveStatistics0.apply(univariateStatistic66);
        long long71 = descriptiveStatistics0.getN();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str17, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 2.0d + "'", double29 == 2.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(descriptiveStatistics38);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(descriptiveStatistics41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(descriptiveStatistics43);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertNotNull(descriptiveStatistics52);
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertNotNull(descriptiveStatistics54);
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertNotNull(descriptiveStatistics57);
        org.junit.Assert.assertNotNull(univariateStatistic58);
        org.junit.Assert.assertNotNull(descriptiveStatistics59);
        org.junit.Assert.assertNotNull(univariateStatistic60);
        org.junit.Assert.assertNotNull(univariateStatistic62);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertNotNull(univariateStatistic65);
        org.junit.Assert.assertNotNull(univariateStatistic66);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
    }

    @Test
    public void test01758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01758");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) 10);
        double double2 = descriptiveStatistics1.getSum();
        descriptiveStatistics1.clear();
        java.lang.Class<?> wildcardClass4 = descriptiveStatistics1.getClass();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance((java.lang.Class) wildcardClass4);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getMinImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics7.getKurtosisImpl();
        long long10 = descriptiveStatistics7.getN();
        descriptiveStatistics7.addValue((double) 0);
        int int13 = descriptiveStatistics7.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics7.getGeometricMeanImpl();
        descriptiveStatistics7.setWindowSize((int) (byte) 1);
        long long17 = descriptiveStatistics7.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics7.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        descriptiveStatistics19.setKurtosisImpl(univariateStatistic22);
        double double24 = descriptiveStatistics19.getMean();
        descriptiveStatistics19.addValue((double) (byte) 10);
        long long27 = descriptiveStatistics19.getN();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics28.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics28.getKurtosisImpl();
        long long31 = descriptiveStatistics28.getN();
        double[] doubleArray32 = descriptiveStatistics28.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics28.getSumImpl();
        descriptiveStatistics28.addValue((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = null;
        descriptiveStatistics28.setSkewnessImpl(univariateStatistic36);
        double[] doubleArray38 = descriptiveStatistics28.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics28.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics28.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics28.getSumImpl();
        double double42 = descriptiveStatistics19.apply(univariateStatistic41);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics43.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics43.getKurtosisImpl();
        long long46 = descriptiveStatistics43.getN();
        double[] doubleArray47 = descriptiveStatistics43.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics43.getSumImpl();
        descriptiveStatistics19.setMeanImpl(univariateStatistic48);
        double[] doubleArray50 = descriptiveStatistics19.getValues();
        double double51 = univariateStatistic18.evaluate(doubleArray50);
        // The following exception was thrown during execution in test generation
        try {
            double double54 = univariateStatistic6.evaluate(doubleArray50, 0, 12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0]");
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 10.0d + "'", double42 == 10.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics43);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 10.000000000000002d + "'", double51 == 10.000000000000002d);
    }

    @Test
    public void test01759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01759");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray2 = new org.apache.commons.math.util.ResizableDoubleArray((int) (short) 100, (float) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The expansion factor must be a number greater than 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01760");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        double[] doubleArray3 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.contract();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.discardFrontElements(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot discard more elements than arecontained in this array.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
    }

    @Test
    public void test01761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01761");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.setElement(0, (double) 0.0f);
        resizableDoubleArray0.clear();
        resizableDoubleArray0.setExpansionFactor(2.5f);
        double double9 = resizableDoubleArray0.addElementRolling((double) (byte) 1);
        int int10 = resizableDoubleArray0.getExpansionMode();
        double[] doubleArray11 = resizableDoubleArray0.getValues();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.discardFrontElements(12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot discard more elements than arecontained in this array.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0]");
    }

    @Test
    public void test01762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01762");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray2 = new org.apache.commons.math.util.ResizableDoubleArray((int) (short) 10, (float) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The expansion factor must be a number greater than 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01763");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics5.getKurtosisImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic10);
        double double12 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics0.getMinImpl();
        descriptiveStatistics0.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics16.getKurtosisImpl();
        double double22 = descriptiveStatistics16.getStandardDeviation();
        double double23 = descriptiveStatistics16.getSum();
        int int24 = descriptiveStatistics16.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics16.getMaxImpl();
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic25);
        java.lang.String str27 = descriptiveStatistics0.toString();
        double double28 = descriptiveStatistics0.getMean();
        double[] doubleArray29 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics0.getVarianceImpl();
        double double31 = descriptiveStatistics0.getSkewness();
        long long32 = descriptiveStatistics0.getN();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str27, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
    }

    @Test
    public void test01764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01764");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        double[] doubleArray4 = descriptiveStatistics1.getSortedValues();
        double[] doubleArray5 = descriptiveStatistics1.getSortedValues();
        double double6 = descriptiveStatistics1.getStandardDeviation();
        double double7 = descriptiveStatistics1.getGeometricMean();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test01765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01765");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double double4 = descriptiveStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        descriptiveStatistics10.setKurtosisImpl(univariateStatistic13);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics10.getKurtosisImpl();
        descriptiveStatistics5.setMaxImpl(univariateStatistic15);
        descriptiveStatistics0.setSumImpl(univariateStatistic15);
        double double18 = descriptiveStatistics0.getSkewness();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double20 = descriptiveStatistics19.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics19.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str23 = descriptiveStatistics22.toString();
        descriptiveStatistics22.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics22.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics22.getSumsqImpl();
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray27 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int28 = resizableDoubleArray27.start();
        resizableDoubleArray27.addElement((double) 10);
        int int31 = resizableDoubleArray27.getExpansionMode();
        resizableDoubleArray27.addElement((double) (-1L));
        double[] doubleArray34 = resizableDoubleArray27.getElements();
        double double37 = univariateStatistic26.evaluate(doubleArray34, (int) (byte) 1, 1);
        double double38 = descriptiveStatistics19.apply(univariateStatistic26);
        double double39 = descriptiveStatistics19.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics40 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics40.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics40.getKurtosisImpl();
        long long43 = descriptiveStatistics40.getN();
        descriptiveStatistics40.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics40.getVarianceImpl();
        int int47 = descriptiveStatistics40.getWindowSize();
        double double48 = descriptiveStatistics40.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics40.getMaxImpl();
        double double50 = descriptiveStatistics19.apply(univariateStatistic49);
        descriptiveStatistics0.setMeanImpl(univariateStatistic49);
        java.lang.String str52 = descriptiveStatistics0.toString();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(descriptiveStatistics22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str23, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(descriptiveStatistics40);
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str52, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
    }

    @Test
    public void test01766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01766");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics5.getKurtosisImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic10);
        double double12 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics0.getMinImpl();
        double double14 = descriptiveStatistics0.getMin();
        double double15 = descriptiveStatistics0.getMax();
        double double16 = descriptiveStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics17.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics17.getKurtosisImpl();
        long long20 = descriptiveStatistics17.getN();
        double[] doubleArray21 = descriptiveStatistics17.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics17.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics17.getMinImpl();
        double double24 = descriptiveStatistics17.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str26 = descriptiveStatistics25.toString();
        double double27 = descriptiveStatistics25.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics28.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics30.getSumsqImpl();
        descriptiveStatistics28.setKurtosisImpl(univariateStatistic31);
        descriptiveStatistics25.setSkewnessImpl(univariateStatistic31);
        double double34 = descriptiveStatistics25.getStandardDeviation();
        descriptiveStatistics25.clear();
        double double36 = descriptiveStatistics25.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics25.getGeometricMeanImpl();
        descriptiveStatistics17.setGeometricMeanImpl(univariateStatistic37);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics39 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str40 = descriptiveStatistics39.toString();
        descriptiveStatistics39.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics42 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str43 = descriptiveStatistics42.toString();
        double double44 = descriptiveStatistics42.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics45 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics45.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics47 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics47.getSumsqImpl();
        descriptiveStatistics45.setKurtosisImpl(univariateStatistic48);
        descriptiveStatistics42.setSkewnessImpl(univariateStatistic48);
        double double51 = descriptiveStatistics42.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics53 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double54 = descriptiveStatistics53.getStandardDeviation();
        long long55 = descriptiveStatistics53.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic56 = descriptiveStatistics53.getMinImpl();
        descriptiveStatistics42.setVarianceImpl(univariateStatistic56);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic58 = descriptiveStatistics42.getMeanImpl();
        descriptiveStatistics39.setMeanImpl(univariateStatistic58);
        int int60 = descriptiveStatistics39.getWindowSize();
        int int61 = descriptiveStatistics39.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic62 = descriptiveStatistics39.getPercentileImpl();
        descriptiveStatistics17.setMaxImpl(univariateStatistic62);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics64 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic65 = descriptiveStatistics64.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics66 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic67 = descriptiveStatistics66.getSumsqImpl();
        descriptiveStatistics64.setKurtosisImpl(univariateStatistic67);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics69 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic70 = descriptiveStatistics69.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics71 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic72 = descriptiveStatistics71.getSumsqImpl();
        descriptiveStatistics69.setKurtosisImpl(univariateStatistic72);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic74 = descriptiveStatistics69.getKurtosisImpl();
        descriptiveStatistics64.setMaxImpl(univariateStatistic74);
        double double76 = descriptiveStatistics64.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic77 = descriptiveStatistics64.getMinImpl();
        descriptiveStatistics64.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics80 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic81 = descriptiveStatistics80.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics82 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic83 = descriptiveStatistics82.getSumsqImpl();
        descriptiveStatistics80.setKurtosisImpl(univariateStatistic83);
        descriptiveStatistics80.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic86 = descriptiveStatistics80.getMinImpl();
        descriptiveStatistics64.setGeometricMeanImpl(univariateStatistic86);
        descriptiveStatistics17.setGeometricMeanImpl(univariateStatistic86);
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic86);
        double double90 = descriptiveStatistics0.getSum();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str26, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(descriptiveStatistics30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(descriptiveStatistics39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str40, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str43, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(descriptiveStatistics45);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertNotNull(descriptiveStatistics47);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic56);
        org.junit.Assert.assertNotNull(univariateStatistic58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic62);
        org.junit.Assert.assertNotNull(descriptiveStatistics64);
        org.junit.Assert.assertNotNull(univariateStatistic65);
        org.junit.Assert.assertNotNull(descriptiveStatistics66);
        org.junit.Assert.assertNotNull(univariateStatistic67);
        org.junit.Assert.assertNotNull(descriptiveStatistics69);
        org.junit.Assert.assertNotNull(univariateStatistic70);
        org.junit.Assert.assertNotNull(descriptiveStatistics71);
        org.junit.Assert.assertNotNull(univariateStatistic72);
        org.junit.Assert.assertNotNull(univariateStatistic74);
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertNotNull(univariateStatistic77);
        org.junit.Assert.assertNotNull(descriptiveStatistics80);
        org.junit.Assert.assertNotNull(univariateStatistic81);
        org.junit.Assert.assertNotNull(descriptiveStatistics82);
        org.junit.Assert.assertNotNull(univariateStatistic83);
        org.junit.Assert.assertNotNull(univariateStatistic86);
        org.junit.Assert.assertTrue(Double.isNaN(double90));
    }

    @Test
    public void test01767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01767");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        descriptiveStatistics0.setWindowSize((int) (byte) -1);
        long long3 = descriptiveStatistics0.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics0.getKurtosisImpl();
        double double5 = descriptiveStatistics0.getMean();
        // The following exception was thrown during execution in test generation
        try {
            descriptiveStatistics0.setWindowSize(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: window size must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test01768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01768");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        int int6 = descriptiveStatistics0.getWindowSize();
        double double7 = descriptiveStatistics0.getSkewness();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics0.getMeanImpl();
        double double10 = descriptiveStatistics0.getPercentile((double) 91);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test01769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01769");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        double[] doubleArray3 = resizableDoubleArray0.getValues();
        double double5 = resizableDoubleArray0.addElementRolling((double) (-1));
        double[] doubleArray6 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.discardFrontElements(0);
        double double10 = resizableDoubleArray0.addElementRolling((double) 1);
        resizableDoubleArray0.clear();
        resizableDoubleArray0.setContractionCriteria((float) 101);
        // The following exception was thrown during execution in test generation
        try {
            double double15 = resizableDoubleArray0.getElement((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Elements cannot be retrieved from a negative array index");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    }

    @Test
    public void test01770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01770");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getSkewnessImpl();
        double double3 = descriptiveStatistics0.getMin();
        double double4 = descriptiveStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = null;
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic5);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
    }

    @Test
    public void test01771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01771");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        float float1 = resizableDoubleArray0.getExpansionFactor();
        resizableDoubleArray0.clear();
        double[] doubleArray3 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.contract();
        float float5 = resizableDoubleArray0.getExpansionFactor();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.discardFrontElements((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot discard a negative number of elements.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float1 + "' != '" + 2.0f + "'", float1 == 2.0f);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 2.0f + "'", float5 == 2.0f);
    }

    @Test
    public void test01772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01772");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics5.getKurtosisImpl();
        long long8 = descriptiveStatistics5.getN();
        double double9 = descriptiveStatistics5.getMax();
        double double10 = descriptiveStatistics5.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double12 = descriptiveStatistics11.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics11.getMinImpl();
        descriptiveStatistics5.setSumImpl(univariateStatistic13);
        descriptiveStatistics0.setSumImpl(univariateStatistic13);
        double double16 = descriptiveStatistics0.getMin();
        java.lang.String str17 = descriptiveStatistics0.toString();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        descriptiveStatistics19.setKurtosisImpl(univariateStatistic22);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics19.getKurtosisImpl();
        double[] doubleArray28 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double29 = univariateStatistic24.evaluate(doubleArray28);
        descriptiveStatistics18.setMaxImpl(univariateStatistic24);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics31.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics31.getKurtosisImpl();
        long long34 = descriptiveStatistics31.getN();
        double double35 = descriptiveStatistics31.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics36.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics38 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics38.getSumsqImpl();
        descriptiveStatistics36.setKurtosisImpl(univariateStatistic39);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics41.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics43.getSumsqImpl();
        descriptiveStatistics41.setKurtosisImpl(univariateStatistic44);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics41.getKurtosisImpl();
        descriptiveStatistics36.setMaxImpl(univariateStatistic46);
        descriptiveStatistics31.setSumImpl(univariateStatistic46);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics50 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics50.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics52 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics52.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics54 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics54.getSumsqImpl();
        descriptiveStatistics52.setKurtosisImpl(univariateStatistic55);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics57 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic58 = descriptiveStatistics57.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics59 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic60 = descriptiveStatistics59.getSumsqImpl();
        descriptiveStatistics57.setKurtosisImpl(univariateStatistic60);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic62 = descriptiveStatistics57.getKurtosisImpl();
        descriptiveStatistics52.setMaxImpl(univariateStatistic62);
        double double64 = descriptiveStatistics52.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic65 = descriptiveStatistics52.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic66 = descriptiveStatistics52.getVarianceImpl();
        descriptiveStatistics50.setMinImpl(univariateStatistic66);
        descriptiveStatistics31.setMeanImpl(univariateStatistic66);
        descriptiveStatistics18.setSumImpl(univariateStatistic66);
        double double70 = descriptiveStatistics0.apply(univariateStatistic66);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic71 = descriptiveStatistics0.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics72 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic73 = descriptiveStatistics72.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics74 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic75 = descriptiveStatistics74.getSumsqImpl();
        descriptiveStatistics72.setKurtosisImpl(univariateStatistic75);
        descriptiveStatistics72.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic78 = descriptiveStatistics72.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic79 = descriptiveStatistics72.getSumsqImpl();
        double double81 = descriptiveStatistics72.getPercentile((double) (short) 10);
        double[] doubleArray82 = descriptiveStatistics72.getSortedValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic83 = descriptiveStatistics72.getMaxImpl();
        descriptiveStatistics0.setMeanImpl(univariateStatistic83);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str17, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 2.0d + "'", double29 == 2.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(descriptiveStatistics38);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(descriptiveStatistics41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(descriptiveStatistics43);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertNotNull(descriptiveStatistics52);
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertNotNull(descriptiveStatistics54);
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertNotNull(descriptiveStatistics57);
        org.junit.Assert.assertNotNull(univariateStatistic58);
        org.junit.Assert.assertNotNull(descriptiveStatistics59);
        org.junit.Assert.assertNotNull(univariateStatistic60);
        org.junit.Assert.assertNotNull(univariateStatistic62);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertNotNull(univariateStatistic65);
        org.junit.Assert.assertNotNull(univariateStatistic66);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertNotNull(univariateStatistic71);
        org.junit.Assert.assertNotNull(descriptiveStatistics72);
        org.junit.Assert.assertNotNull(univariateStatistic73);
        org.junit.Assert.assertNotNull(descriptiveStatistics74);
        org.junit.Assert.assertNotNull(univariateStatistic75);
        org.junit.Assert.assertNotNull(univariateStatistic78);
        org.junit.Assert.assertNotNull(univariateStatistic79);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic83);
    }

    @Test
    public void test01773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01773");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        double[] doubleArray3 = resizableDoubleArray0.getElements();
        double[] doubleArray4 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.setNumElements((int) (byte) 100);
        resizableDoubleArray0.discardFrontElements((int) (byte) 100);
        double[] doubleArray9 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.clear();
        double[] doubleArray11 = resizableDoubleArray0.getElements();
        int int12 = resizableDoubleArray0.getNumElements();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test01774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01774");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        double[] doubleArray3 = resizableDoubleArray0.getElements();
        float float4 = resizableDoubleArray0.getExpansionFactor();
        int int5 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.contract();
        float float7 = resizableDoubleArray0.getExpansionFactor();
        resizableDoubleArray0.setElement((int) (byte) 0, 625.0d);
        resizableDoubleArray0.contract();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 2.0f + "'", float4 == 2.0f);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + float7 + "' != '" + 2.0f + "'", float7 == 2.0f);
    }

    @Test
    public void test01775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01775");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        double double6 = descriptiveStatistics0.getVariance();
        double double7 = descriptiveStatistics0.getMin();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str10 = descriptiveStatistics9.toString();
        double double11 = descriptiveStatistics9.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        descriptiveStatistics12.setKurtosisImpl(univariateStatistic15);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics12.getKurtosisImpl();
        double double18 = descriptiveStatistics9.apply(univariateStatistic17);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double21 = descriptiveStatistics20.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics20.getGeometricMeanImpl();
        descriptiveStatistics9.setMeanImpl(univariateStatistic22);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic22);
        double double25 = descriptiveStatistics0.getVariance();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str10, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
    }

    @Test
    public void test01776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01776");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        int int3 = resizableDoubleArray0.start();
        resizableDoubleArray0.setElement((int) (short) 10, (double) 100L);
        double[] doubleArray7 = resizableDoubleArray0.getValues();
        float float8 = resizableDoubleArray0.getContractionCriteria();
        int int9 = resizableDoubleArray0.start();
        double double11 = resizableDoubleArray0.addElementRolling((double) 35.5f);
        double double13 = resizableDoubleArray0.addElementRolling((double) 0);
        int int14 = resizableDoubleArray0.getExpansionMode();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0, 35.5, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 2.5f + "'", float8 == 2.5f);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test01777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01777");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 1);
        double double2 = descriptiveStatistics1.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        descriptiveStatistics3.setWindowSize((int) (byte) -1);
        long long6 = descriptiveStatistics3.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics3.getKurtosisImpl();
        descriptiveStatistics1.setKurtosisImpl(univariateStatistic7);
        double double9 = descriptiveStatistics1.getSkewness();
        descriptiveStatistics1.addValue((double) (byte) 10);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test01778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01778");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray2 = new org.apache.commons.math.util.ResizableDoubleArray((int) 'a', (float) (short) 100);
        resizableDoubleArray2.clear();
        double double5 = resizableDoubleArray2.addElementRolling((double) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray2.discardFrontElements((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot discard more elements than arecontained in this array.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    }

    @Test
    public void test01779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01779");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getSkewnessImpl();
        java.lang.String str5 = descriptiveStatistics1.toString();
        double double6 = descriptiveStatistics1.getVariance();
        descriptiveStatistics1.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics9.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        descriptiveStatistics9.setKurtosisImpl(univariateStatistic12);
        descriptiveStatistics1.setSkewnessImpl(univariateStatistic12);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics17.getSumsqImpl();
        descriptiveStatistics15.setKurtosisImpl(univariateStatistic18);
        descriptiveStatistics15.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics15.getSkewnessImpl();
        descriptiveStatistics1.setVarianceImpl(univariateStatistic21);
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray23 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int24 = resizableDoubleArray23.start();
        resizableDoubleArray23.setElement(100, (double) (byte) 100);
        resizableDoubleArray23.addElement(2.0d);
        int int30 = resizableDoubleArray23.getNumElements();
        double[] doubleArray31 = resizableDoubleArray23.getElements();
        // The following exception was thrown during execution in test generation
        try {
            double double34 = univariateStatistic21.evaluate(doubleArray31, (int) '4', (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str5, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 102 + "'", int30 == 102);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0, 2.0]");
    }

    @Test
    public void test01780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01780");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        descriptiveStatistics0.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics6.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        descriptiveStatistics6.setKurtosisImpl(univariateStatistic9);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        descriptiveStatistics11.setKurtosisImpl(univariateStatistic14);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics11.getKurtosisImpl();
        descriptiveStatistics6.setMaxImpl(univariateStatistic16);
        double double18 = descriptiveStatistics6.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics6.getMinImpl();
        descriptiveStatistics0.setMinImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics0.getKurtosisImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics0.getMaxImpl();
        double double23 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics24 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics24.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics26.getSumsqImpl();
        descriptiveStatistics24.setKurtosisImpl(univariateStatistic27);
        descriptiveStatistics24.clear();
        double double30 = descriptiveStatistics24.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics24.getVarianceImpl();
        descriptiveStatistics0.setVarianceImpl(univariateStatistic31);
        double double33 = descriptiveStatistics0.getSumsq();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
    }

    @Test
    public void test01781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01781");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray4 = new org.apache.commons.math.util.ResizableDoubleArray(102, 52.0f, 0.0f, 53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01782");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.setElement(0, (double) 0.0f);
        resizableDoubleArray0.clear();
        double[] doubleArray6 = resizableDoubleArray0.getElements();
        double double8 = resizableDoubleArray0.addElementRolling(5.4999999999999964d);
        resizableDoubleArray0.clear();
        double[] doubleArray10 = resizableDoubleArray0.getElements();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
    }

    @Test
    public void test01783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01783");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        java.lang.String str2 = descriptiveStatistics0.toString();
        long long3 = descriptiveStatistics0.getN();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str2, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
    }

    @Test
    public void test01784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01784");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        double double5 = resizableDoubleArray0.addElementRolling((double) 0.0f);
        resizableDoubleArray0.clear();
        resizableDoubleArray0.setExpansionMode(1);
        java.lang.Class<?> wildcardClass9 = resizableDoubleArray0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test01785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01785");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double2 = descriptiveStatistics1.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics1.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double6 = descriptiveStatistics5.getStandardDeviation();
        long long7 = descriptiveStatistics5.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics5.getMinImpl();
        descriptiveStatistics1.setMaxImpl(univariateStatistic8);
        double double10 = descriptiveStatistics1.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics1.getKurtosisImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics1.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics1.getKurtosisImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        descriptiveStatistics14.setKurtosisImpl(univariateStatistic17);
        descriptiveStatistics14.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics14.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics23.getKurtosisImpl();
        long long26 = descriptiveStatistics23.getN();
        double[] doubleArray27 = descriptiveStatistics23.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics23.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics23.getMinImpl();
        double double30 = descriptiveStatistics21.apply(univariateStatistic29);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics31.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics33 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics33.getSumsqImpl();
        descriptiveStatistics31.setKurtosisImpl(univariateStatistic34);
        descriptiveStatistics31.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics31.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics38 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics38.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics38.getKurtosisImpl();
        long long41 = descriptiveStatistics38.getN();
        descriptiveStatistics38.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics38.getSkewnessImpl();
        descriptiveStatistics31.setSumsqImpl(univariateStatistic44);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics31.getVarianceImpl();
        descriptiveStatistics21.setVarianceImpl(univariateStatistic46);
        double double48 = descriptiveStatistics14.apply(univariateStatistic46);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics14.getGeometricMeanImpl();
        descriptiveStatistics1.setGeometricMeanImpl(univariateStatistic49);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(descriptiveStatistics31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(descriptiveStatistics33);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(descriptiveStatistics38);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(univariateStatistic49);
    }

    @Test
    public void test01786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01786");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray4 = new org.apache.commons.math.util.ResizableDoubleArray((int) (short) 1, (float) 0, (float) 2, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The expansion factor must be a number greater than 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01787");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics6.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics8.getKurtosisImpl();
        long long11 = descriptiveStatistics8.getN();
        double[] doubleArray12 = descriptiveStatistics8.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics8.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics8.getMinImpl();
        double double15 = descriptiveStatistics6.apply(univariateStatistic14);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic19);
        descriptiveStatistics16.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics16.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics23.getKurtosisImpl();
        long long26 = descriptiveStatistics23.getN();
        descriptiveStatistics23.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics23.getSkewnessImpl();
        descriptiveStatistics16.setSumsqImpl(univariateStatistic29);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics16.getVarianceImpl();
        descriptiveStatistics6.setVarianceImpl(univariateStatistic31);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics6.getSumsqImpl();
        descriptiveStatistics0.setMinImpl(univariateStatistic33);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics0.getMaxImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(univariateStatistic35);
    }

    @Test
    public void test01788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01788");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics5.getKurtosisImpl();
        long long8 = descriptiveStatistics5.getN();
        double double9 = descriptiveStatistics5.getMax();
        double double10 = descriptiveStatistics5.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double12 = descriptiveStatistics11.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics11.getMinImpl();
        descriptiveStatistics5.setSumImpl(univariateStatistic13);
        descriptiveStatistics0.setSumImpl(univariateStatistic13);
        double double16 = descriptiveStatistics0.getVariance();
        double double17 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics18.getKurtosisImpl();
        long long21 = descriptiveStatistics18.getN();
        double[] doubleArray22 = descriptiveStatistics18.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics18.getSumImpl();
        double double24 = descriptiveStatistics18.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics18.getSumImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic25);
        double[] doubleArray27 = descriptiveStatistics0.getValues();
        double double28 = descriptiveStatistics0.getMin();
        descriptiveStatistics0.addValue((double) 0.0f);
        // The following exception was thrown during execution in test generation
        try {
            double double32 = descriptiveStatistics0.getElement(91);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 91 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double28));
    }

    @Test
    public void test01789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01789");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics(12);
    }

    @Test
    public void test01790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01790");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getGeometricMeanImpl();
        double double4 = descriptiveStatistics0.getMax();
        double double5 = descriptiveStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getVarianceImpl();
        double double7 = descriptiveStatistics0.getSkewness();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 1);
        double double10 = descriptiveStatistics9.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str12 = descriptiveStatistics11.toString();
        double double13 = descriptiveStatistics11.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        descriptiveStatistics14.setKurtosisImpl(univariateStatistic17);
        descriptiveStatistics11.setSkewnessImpl(univariateStatistic17);
        double double20 = descriptiveStatistics11.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        descriptiveStatistics21.setKurtosisImpl(univariateStatistic24);
        descriptiveStatistics21.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics21.getPercentileImpl();
        double double28 = descriptiveStatistics21.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics29.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics29.getKurtosisImpl();
        double[] doubleArray32 = descriptiveStatistics29.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics29.getVarianceImpl();
        double double34 = descriptiveStatistics21.apply(univariateStatistic33);
        double double35 = descriptiveStatistics11.apply(univariateStatistic33);
        descriptiveStatistics9.setKurtosisImpl(univariateStatistic33);
        descriptiveStatistics0.setMeanImpl(univariateStatistic33);
        double[] doubleArray38 = descriptiveStatistics0.getSortedValues();
        double double39 = descriptiveStatistics0.getKurtosis();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str12, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(descriptiveStatistics29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double39));
    }

    @Test
    public void test01791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01791");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        double[] doubleArray3 = resizableDoubleArray0.getElements();
        double[] doubleArray4 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.setNumElements((int) (byte) 100);
        int int7 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.discardFrontElements((int) (byte) 10);
        resizableDoubleArray0.setExpansionMode(0);
        resizableDoubleArray0.setContractionCriteria((float) 32);
        double double15 = resizableDoubleArray0.getElement(1);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    }

    @Test
    public void test01792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01792");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double1 = descriptiveStatistics0.getMin();
        // The following exception was thrown during execution in test generation
        try {
            double double3 = descriptiveStatistics0.getElement((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 0 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
    }

    @Test
    public void test01793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01793");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        double double5 = resizableDoubleArray0.addElementRolling((double) 0.0f);
        resizableDoubleArray0.clear();
        resizableDoubleArray0.setNumElements((int) '4');
        float float9 = resizableDoubleArray0.getExpansionFactor();
        resizableDoubleArray0.contract();
        resizableDoubleArray0.setElement(1, 32.0d);
        double[] doubleArray14 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.addElement((double) (-1.0f));
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 2.0f + "'", float9 == 2.0f);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 32.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test01794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01794");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement(0.0d);
        int int4 = resizableDoubleArray0.getNumElements();
        int int5 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.discardFrontElements((int) (byte) 1);
        float float8 = resizableDoubleArray0.getContractionCriteria();
        resizableDoubleArray0.addElement((double) 32.0f);
        double[] doubleArray11 = resizableDoubleArray0.getElements();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 2.5f + "'", float8 == 2.5f);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[32.0]");
    }

    @Test
    public void test01795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01795");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray2 = new org.apache.commons.math.util.ResizableDoubleArray((int) (byte) 0, (float) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The initial capacity supplied: 0must be a positive integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01796");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray1 = new org.apache.commons.math.util.ResizableDoubleArray(102);
        double double3 = resizableDoubleArray1.addElementRolling((double) '4');
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray1.setExpansionFactor((float) 102);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
    }

    @Test
    public void test01797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01797");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray4 = new org.apache.commons.math.util.ResizableDoubleArray((int) (short) 1, (float) (byte) 10, 2.5f, 11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01798");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double double4 = descriptiveStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        descriptiveStatistics10.setKurtosisImpl(univariateStatistic13);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics10.getKurtosisImpl();
        descriptiveStatistics5.setMaxImpl(univariateStatistic15);
        descriptiveStatistics0.setSumImpl(univariateStatistic15);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        descriptiveStatistics21.setKurtosisImpl(univariateStatistic24);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics26.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics28.getSumsqImpl();
        descriptiveStatistics26.setKurtosisImpl(univariateStatistic29);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics26.getKurtosisImpl();
        descriptiveStatistics21.setMaxImpl(univariateStatistic31);
        double double33 = descriptiveStatistics21.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics21.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics21.getVarianceImpl();
        descriptiveStatistics19.setMinImpl(univariateStatistic35);
        descriptiveStatistics0.setMeanImpl(univariateStatistic35);
        descriptiveStatistics0.setWindowSize(101);
        double double40 = descriptiveStatistics0.getKurtosis();
        double double41 = descriptiveStatistics0.getMax();
        double double42 = descriptiveStatistics0.getKurtosis();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics44 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((-1));
        long long45 = descriptiveStatistics44.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics44.getSkewnessImpl();
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic46);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics0.getMaxImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = null;
        descriptiveStatistics0.setMaxImpl(univariateStatistic49);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertNotNull(univariateStatistic48);
    }

    @Test
    public void test01799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01799");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        int int3 = resizableDoubleArray0.start();
        resizableDoubleArray0.setElement((int) (short) 10, (double) 100L);
        double[] doubleArray7 = resizableDoubleArray0.getValues();
        double double9 = resizableDoubleArray0.addElementRolling(0.0d);
        int int10 = resizableDoubleArray0.getNumElements();
        double double12 = resizableDoubleArray0.addElementRolling((double) 1);
        resizableDoubleArray0.addElement((double) 31);
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setExpansionMode(101);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal expansionMode setting.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0, 0.0, 1.0, 31.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 11 + "'", int10 == 11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test01800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01800");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        double double4 = descriptiveStatistics1.getMin();
        double double5 = descriptiveStatistics1.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics1.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        descriptiveStatistics7.setWindowSize((int) (byte) -1);
        long long10 = descriptiveStatistics7.getN();
        double double11 = descriptiveStatistics7.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics7.getSumImpl();
        descriptiveStatistics1.setSumImpl(univariateStatistic12);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics14.getKurtosisImpl();
        long long17 = descriptiveStatistics14.getN();
        descriptiveStatistics14.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        descriptiveStatistics21.setKurtosisImpl(univariateStatistic24);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics21.getKurtosisImpl();
        double[] doubleArray30 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double31 = univariateStatistic26.evaluate(doubleArray30);
        descriptiveStatistics20.setMaxImpl(univariateStatistic26);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics20.getSumsqImpl();
        descriptiveStatistics14.setSumImpl(univariateStatistic33);
        descriptiveStatistics1.setSkewnessImpl(univariateStatistic33);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics36.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics36.getKurtosisImpl();
        long long39 = descriptiveStatistics36.getN();
        double[] doubleArray40 = descriptiveStatistics36.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics36.getSumImpl();
        double double42 = descriptiveStatistics36.getStandardDeviation();
        double double43 = descriptiveStatistics36.getSumsq();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics36.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics45 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics45.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics45.getKurtosisImpl();
        double[] doubleArray48 = descriptiveStatistics45.getValues();
        double double49 = descriptiveStatistics45.getVariance();
        double double50 = descriptiveStatistics45.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics51 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str52 = descriptiveStatistics51.toString();
        double double53 = descriptiveStatistics51.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics54 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics54.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics56 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics56.getSumsqImpl();
        descriptiveStatistics54.setKurtosisImpl(univariateStatistic57);
        descriptiveStatistics51.setSkewnessImpl(univariateStatistic57);
        double double60 = descriptiveStatistics51.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics61 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic62 = descriptiveStatistics61.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic63 = descriptiveStatistics61.getKurtosisImpl();
        long long64 = descriptiveStatistics61.getN();
        double[] doubleArray65 = descriptiveStatistics61.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic66 = descriptiveStatistics61.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic67 = descriptiveStatistics61.getMinImpl();
        descriptiveStatistics51.setMinImpl(univariateStatistic67);
        descriptiveStatistics45.setMeanImpl(univariateStatistic67);
        descriptiveStatistics36.setMinImpl(univariateStatistic67);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics71 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic72 = descriptiveStatistics71.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic73 = descriptiveStatistics71.getKurtosisImpl();
        long long74 = descriptiveStatistics71.getN();
        descriptiveStatistics71.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic77 = descriptiveStatistics71.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics78 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic79 = descriptiveStatistics78.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics80 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic81 = descriptiveStatistics80.getSumsqImpl();
        descriptiveStatistics78.setKurtosisImpl(univariateStatistic81);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic83 = descriptiveStatistics78.getKurtosisImpl();
        double[] doubleArray87 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double88 = univariateStatistic83.evaluate(doubleArray87);
        descriptiveStatistics71.setSkewnessImpl(univariateStatistic83);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic90 = descriptiveStatistics71.getSkewnessImpl();
        double double91 = descriptiveStatistics71.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics92 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str93 = descriptiveStatistics92.toString();
        descriptiveStatistics92.addValue((double) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic96 = descriptiveStatistics92.getKurtosisImpl();
        descriptiveStatistics71.setGeometricMeanImpl(univariateStatistic96);
        descriptiveStatistics36.setKurtosisImpl(univariateStatistic96);
        descriptiveStatistics1.setSumImpl(univariateStatistic96);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics20);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 2.0d + "'", double31 == 2.0d);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(descriptiveStatistics45);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNotNull(descriptiveStatistics51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str52, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(descriptiveStatistics54);
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertNotNull(descriptiveStatistics56);
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(descriptiveStatistics61);
        org.junit.Assert.assertNotNull(univariateStatistic62);
        org.junit.Assert.assertNotNull(univariateStatistic63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic66);
        org.junit.Assert.assertNotNull(univariateStatistic67);
        org.junit.Assert.assertNotNull(descriptiveStatistics71);
        org.junit.Assert.assertNotNull(univariateStatistic72);
        org.junit.Assert.assertNotNull(univariateStatistic73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic77);
        org.junit.Assert.assertNotNull(descriptiveStatistics78);
        org.junit.Assert.assertNotNull(univariateStatistic79);
        org.junit.Assert.assertNotNull(descriptiveStatistics80);
        org.junit.Assert.assertNotNull(univariateStatistic81);
        org.junit.Assert.assertNotNull(univariateStatistic83);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray87), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 2.0d + "'", double88 == 2.0d);
        org.junit.Assert.assertNotNull(univariateStatistic90);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str93, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic96);
    }

    @Test
    public void test01801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01801");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double2 = descriptiveStatistics1.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics1.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double6 = descriptiveStatistics5.getStandardDeviation();
        long long7 = descriptiveStatistics5.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics5.getMinImpl();
        descriptiveStatistics1.setMaxImpl(univariateStatistic8);
        double double10 = descriptiveStatistics1.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics1.getKurtosisImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics1.getMeanImpl();
        double double13 = descriptiveStatistics1.getMax();
        double[] doubleArray14 = descriptiveStatistics1.getValues();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
    }

    @Test
    public void test01802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01802");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray1 = new org.apache.commons.math.util.ResizableDoubleArray((int) (short) 10);
        resizableDoubleArray1.setElement((int) ' ', 31.0d);
        float float5 = resizableDoubleArray1.getContractionCriteria();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray1.setExpansionFactor(0.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The expansion factor must be a number greater than 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 2.5f + "'", float5 == 2.5f);
    }

    @Test
    public void test01803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01803");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray2 = new org.apache.commons.math.util.ResizableDoubleArray((int) (short) 10, (float) 32);
        double double4 = resizableDoubleArray2.addElementRolling(101.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double6 = resizableDoubleArray2.getElement(11);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 11 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
    }

    @Test
    public void test01804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01804");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic6);
        double double9 = descriptiveStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics0.getMinImpl();
        descriptiveStatistics0.clear();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(univariateStatistic10);
    }

    @Test
    public void test01805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01805");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        descriptiveStatistics0.setWindowSize((int) (byte) -1);
        long long3 = descriptiveStatistics0.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = null;
        descriptiveStatistics0.setMinImpl(univariateStatistic4);
        long long6 = descriptiveStatistics0.getN();
        // The following exception was thrown during execution in test generation
        try {
            double double7 = descriptiveStatistics0.getMin();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test01806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01806");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement(0.0d);
        float float4 = resizableDoubleArray0.getExpansionFactor();
        resizableDoubleArray0.addElement(101.0d);
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setExpansionFactor(52.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 2.0f + "'", float4 == 2.0f);
    }

    @Test
    public void test01807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01807");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str4 = descriptiveStatistics3.toString();
        double double5 = descriptiveStatistics3.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics6.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        descriptiveStatistics6.setKurtosisImpl(univariateStatistic9);
        descriptiveStatistics3.setSkewnessImpl(univariateStatistic9);
        double double12 = descriptiveStatistics3.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double15 = descriptiveStatistics14.getStandardDeviation();
        long long16 = descriptiveStatistics14.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics14.getMinImpl();
        descriptiveStatistics3.setVarianceImpl(univariateStatistic17);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics3.getMeanImpl();
        descriptiveStatistics0.setMeanImpl(univariateStatistic19);
        int int21 = descriptiveStatistics0.getWindowSize();
        double double22 = descriptiveStatistics0.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics0.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics25.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics25.getKurtosisImpl();
        long long28 = descriptiveStatistics25.getN();
        descriptiveStatistics25.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics25.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics25.getPercentileImpl();
        double double33 = descriptiveStatistics25.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics25.getMeanImpl();
        // The following exception was thrown during execution in test generation
        try {
            descriptiveStatistics0.setPercentileImpl(univariateStatistic34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Percentile implementation does not support setQuantile");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str4, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(univariateStatistic34);
    }

    @Test
    public void test01808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01808");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        double double5 = descriptiveStatistics0.getVariance();
        long long6 = descriptiveStatistics0.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics0.getMeanImpl();
        // The following exception was thrown during execution in test generation
        try {
            double double9 = descriptiveStatistics0.getPercentile((double) 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal quantile value: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic7);
    }

    @Test
    public void test01809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01809");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic6);
        double double9 = descriptiveStatistics0.getStandardDeviation();
        descriptiveStatistics0.clear();
        double double11 = descriptiveStatistics0.getSum();
        double double12 = descriptiveStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str14 = descriptiveStatistics13.toString();
        double double15 = descriptiveStatistics13.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic19);
        descriptiveStatistics13.setSkewnessImpl(univariateStatistic19);
        double double22 = descriptiveStatistics13.getStandardDeviation();
        descriptiveStatistics13.clear();
        descriptiveStatistics13.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics26.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics26.getKurtosisImpl();
        long long29 = descriptiveStatistics26.getN();
        descriptiveStatistics26.addValue((double) 0);
        int int32 = descriptiveStatistics26.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics26.getGeometricMeanImpl();
        descriptiveStatistics13.setVarianceImpl(univariateStatistic33);
        descriptiveStatistics0.setSumImpl(univariateStatistic33);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics36.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics36.getKurtosisImpl();
        long long39 = descriptiveStatistics36.getN();
        descriptiveStatistics36.addValue((double) 0);
        int int42 = descriptiveStatistics36.getWindowSize();
        double double43 = descriptiveStatistics36.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics36.getMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics45 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics46 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics46.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics48 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics48.getSumsqImpl();
        descriptiveStatistics46.setKurtosisImpl(univariateStatistic49);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics46.getKurtosisImpl();
        double[] doubleArray55 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double56 = univariateStatistic51.evaluate(doubleArray55);
        descriptiveStatistics45.setMaxImpl(univariateStatistic51);
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray58 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int59 = resizableDoubleArray58.getExpansionMode();
        resizableDoubleArray58.addElement(0.0d);
        int int62 = resizableDoubleArray58.getExpansionMode();
        float float63 = resizableDoubleArray58.getContractionCriteria();
        resizableDoubleArray58.setNumElements(10);
        double[] doubleArray66 = resizableDoubleArray58.getElements();
        double double67 = univariateStatistic51.evaluate(doubleArray66);
        double double68 = univariateStatistic44.evaluate(doubleArray66);
        double double69 = descriptiveStatistics0.apply(univariateStatistic44);
        double double70 = descriptiveStatistics0.getVariance();
        long long71 = descriptiveStatistics0.getN();
        descriptiveStatistics0.clear();
        // The following exception was thrown during execution in test generation
        try {
            double double74 = descriptiveStatistics0.getElement((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 100 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str14, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(descriptiveStatistics45);
        org.junit.Assert.assertNotNull(descriptiveStatistics46);
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertNotNull(descriptiveStatistics48);
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 2.0d + "'", double56 == 2.0d);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + float63 + "' != '" + 2.5f + "'", float63 == 2.5f);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
    }

    @Test
    public void test01810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01810");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) 10);
        double double2 = descriptiveStatistics1.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics3.getKurtosisImpl();
        long long6 = descriptiveStatistics3.getN();
        descriptiveStatistics3.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics3.getGeometricMeanImpl();
        descriptiveStatistics3.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        descriptiveStatistics10.setKurtosisImpl(univariateStatistic13);
        descriptiveStatistics10.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics16.getKurtosisImpl();
        long long19 = descriptiveStatistics16.getN();
        double double20 = descriptiveStatistics16.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        descriptiveStatistics21.setKurtosisImpl(univariateStatistic24);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics26.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics28.getSumsqImpl();
        descriptiveStatistics26.setKurtosisImpl(univariateStatistic29);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics26.getKurtosisImpl();
        descriptiveStatistics21.setMaxImpl(univariateStatistic31);
        descriptiveStatistics16.setSumImpl(univariateStatistic31);
        descriptiveStatistics10.setSumsqImpl(univariateStatistic31);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics35 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str36 = descriptiveStatistics35.toString();
        descriptiveStatistics35.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics35.getGeometricMeanImpl();
        double double39 = descriptiveStatistics35.getMax();
        double double40 = descriptiveStatistics35.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics35.getVarianceImpl();
        descriptiveStatistics10.setMeanImpl(univariateStatistic41);
        double double43 = descriptiveStatistics10.getMin();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics44 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str45 = descriptiveStatistics44.toString();
        double double46 = descriptiveStatistics44.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics47 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics47.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics49 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic50 = descriptiveStatistics49.getSumsqImpl();
        descriptiveStatistics47.setKurtosisImpl(univariateStatistic50);
        descriptiveStatistics44.setSkewnessImpl(univariateStatistic50);
        double double53 = descriptiveStatistics44.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics55 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double56 = descriptiveStatistics55.getStandardDeviation();
        long long57 = descriptiveStatistics55.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic58 = descriptiveStatistics55.getMinImpl();
        descriptiveStatistics44.setVarianceImpl(univariateStatistic58);
        int int60 = descriptiveStatistics44.getWindowSize();
        java.lang.String str61 = descriptiveStatistics44.toString();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics63 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double64 = descriptiveStatistics63.getStandardDeviation();
        long long65 = descriptiveStatistics63.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic66 = descriptiveStatistics63.getMinImpl();
        double double67 = descriptiveStatistics63.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics68 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics69 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic70 = descriptiveStatistics69.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics71 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic72 = descriptiveStatistics71.getSumsqImpl();
        descriptiveStatistics69.setKurtosisImpl(univariateStatistic72);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic74 = descriptiveStatistics69.getKurtosisImpl();
        double[] doubleArray78 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double79 = univariateStatistic74.evaluate(doubleArray78);
        descriptiveStatistics68.setMaxImpl(univariateStatistic74);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics81 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic82 = descriptiveStatistics81.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic83 = descriptiveStatistics81.getKurtosisImpl();
        long long84 = descriptiveStatistics81.getN();
        double[] doubleArray85 = descriptiveStatistics81.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic86 = descriptiveStatistics81.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic87 = descriptiveStatistics81.getMeanImpl();
        descriptiveStatistics68.setGeometricMeanImpl(univariateStatistic87);
        descriptiveStatistics63.setGeometricMeanImpl(univariateStatistic87);
        descriptiveStatistics44.setSumImpl(univariateStatistic87);
        descriptiveStatistics10.setSumsqImpl(univariateStatistic87);
        descriptiveStatistics3.setMeanImpl(univariateStatistic87);
        descriptiveStatistics1.setKurtosisImpl(univariateStatistic87);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(descriptiveStatistics35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str36, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(descriptiveStatistics44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str45, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(descriptiveStatistics47);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertNotNull(descriptiveStatistics49);
        org.junit.Assert.assertNotNull(univariateStatistic50);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str61, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic66);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(descriptiveStatistics68);
        org.junit.Assert.assertNotNull(descriptiveStatistics69);
        org.junit.Assert.assertNotNull(univariateStatistic70);
        org.junit.Assert.assertNotNull(descriptiveStatistics71);
        org.junit.Assert.assertNotNull(univariateStatistic72);
        org.junit.Assert.assertNotNull(univariateStatistic74);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 2.0d + "'", double79 == 2.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics81);
        org.junit.Assert.assertNotNull(univariateStatistic82);
        org.junit.Assert.assertNotNull(univariateStatistic83);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic86);
        org.junit.Assert.assertNotNull(univariateStatistic87);
    }

    @Test
    public void test01811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01811");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getMinImpl();
        long long7 = descriptiveStatistics0.getN();
        double double8 = descriptiveStatistics0.getStandardDeviation();
        long long9 = descriptiveStatistics0.getN();
        double double11 = descriptiveStatistics0.getPercentile((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics17.getSumsqImpl();
        descriptiveStatistics15.setKurtosisImpl(univariateStatistic18);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics20.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics22.getSumsqImpl();
        descriptiveStatistics20.setKurtosisImpl(univariateStatistic23);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics20.getKurtosisImpl();
        descriptiveStatistics15.setMaxImpl(univariateStatistic25);
        double double27 = descriptiveStatistics15.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics15.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics15.getVarianceImpl();
        descriptiveStatistics13.setMinImpl(univariateStatistic29);
        double double31 = descriptiveStatistics13.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics13.getSumImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics33 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics33.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics33.getKurtosisImpl();
        long long36 = descriptiveStatistics33.getN();
        double[] doubleArray37 = descriptiveStatistics33.getValues();
        double double38 = descriptiveStatistics33.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics40 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double41 = descriptiveStatistics40.getStandardDeviation();
        long long42 = descriptiveStatistics40.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic43 = descriptiveStatistics40.getKurtosisImpl();
        descriptiveStatistics33.setSumImpl(univariateStatistic43);
        descriptiveStatistics13.setSumImpl(univariateStatistic43);
        double double46 = descriptiveStatistics13.getMin();
        double double47 = descriptiveStatistics13.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics13.getVarianceImpl();
        // The following exception was thrown during execution in test generation
        try {
            descriptiveStatistics0.setPercentileImpl(univariateStatistic48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Percentile implementation does not support setQuantile");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(descriptiveStatistics20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(descriptiveStatistics22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(descriptiveStatistics33);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic43);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(univariateStatistic48);
    }

    @Test
    public void test01812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01812");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        double double3 = descriptiveStatistics1.getVariance();
        double double4 = descriptiveStatistics1.getSum();
        long long5 = descriptiveStatistics1.getN();
        int int6 = descriptiveStatistics1.getWindowSize();
        double double7 = descriptiveStatistics1.getMax();
        double double8 = descriptiveStatistics1.getSum();
        double double9 = descriptiveStatistics1.getSkewness();
        double double10 = descriptiveStatistics1.getMean();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test01813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01813");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.addValue((double) (short) -1);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics5.getKurtosisImpl();
        long long8 = descriptiveStatistics5.getN();
        double[] doubleArray9 = descriptiveStatistics5.getValues();
        double double10 = descriptiveStatistics5.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics5.getPercentileImpl();
        double double12 = descriptiveStatistics5.getSumsq();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics5.getMaxImpl();
        // The following exception was thrown during execution in test generation
        try {
            descriptiveStatistics0.setPercentileImpl(univariateStatistic13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Percentile implementation does not support setQuantile");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
    }

    @Test
    public void test01814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01814");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray2 = new org.apache.commons.math.util.ResizableDoubleArray(0, (float) 10L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The initial capacity supplied: 0must be a positive integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01815");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic6);
        double double9 = descriptiveStatistics0.getStandardDeviation();
        descriptiveStatistics0.setWindowSize((int) (short) 1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics0.getKurtosisImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics0.getKurtosisImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
    }

    @Test
    public void test01816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01816");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics3.getKurtosisImpl();
        double double9 = descriptiveStatistics0.apply(univariateStatistic8);
        double double10 = descriptiveStatistics0.getSumsq();
        double double11 = descriptiveStatistics0.getMean();
        java.lang.String str12 = descriptiveStatistics0.toString();
        long long13 = descriptiveStatistics0.getN();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str15 = descriptiveStatistics14.toString();
        double double16 = descriptiveStatistics14.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics17.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        descriptiveStatistics17.setKurtosisImpl(univariateStatistic20);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics17.getKurtosisImpl();
        double double23 = descriptiveStatistics14.apply(univariateStatistic22);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics24 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics24.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics24.getKurtosisImpl();
        long long27 = descriptiveStatistics24.getN();
        descriptiveStatistics24.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics24.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics31.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics33 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics33.getSumsqImpl();
        descriptiveStatistics31.setKurtosisImpl(univariateStatistic34);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics31.getKurtosisImpl();
        double[] doubleArray40 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double41 = univariateStatistic36.evaluate(doubleArray40);
        descriptiveStatistics24.setSkewnessImpl(univariateStatistic36);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic43 = descriptiveStatistics24.getGeometricMeanImpl();
        descriptiveStatistics14.setMinImpl(univariateStatistic43);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics14.getKurtosisImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics14.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics47 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics47.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics47.getKurtosisImpl();
        long long50 = descriptiveStatistics47.getN();
        double[] doubleArray51 = descriptiveStatistics47.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics47.getSumImpl();
        double double53 = descriptiveStatistics47.getVariance();
        double double54 = descriptiveStatistics47.getMin();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics55 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic56 = descriptiveStatistics55.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics57 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic58 = descriptiveStatistics57.getSumsqImpl();
        descriptiveStatistics55.setKurtosisImpl(univariateStatistic58);
        descriptiveStatistics55.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic61 = descriptiveStatistics55.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics62 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic63 = descriptiveStatistics62.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic64 = descriptiveStatistics62.getKurtosisImpl();
        long long65 = descriptiveStatistics62.getN();
        descriptiveStatistics62.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic68 = descriptiveStatistics62.getSkewnessImpl();
        descriptiveStatistics55.setSumsqImpl(univariateStatistic68);
        double double70 = descriptiveStatistics55.getStandardDeviation();
        double double71 = descriptiveStatistics55.getSum();
        double double72 = descriptiveStatistics55.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics73 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str74 = descriptiveStatistics73.toString();
        double double75 = descriptiveStatistics73.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics76 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic77 = descriptiveStatistics76.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics78 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic79 = descriptiveStatistics78.getSumsqImpl();
        descriptiveStatistics76.setKurtosisImpl(univariateStatistic79);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic81 = descriptiveStatistics76.getKurtosisImpl();
        double double82 = descriptiveStatistics73.apply(univariateStatistic81);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics84 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double85 = descriptiveStatistics84.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic86 = descriptiveStatistics84.getGeometricMeanImpl();
        descriptiveStatistics73.setMeanImpl(univariateStatistic86);
        descriptiveStatistics55.setSkewnessImpl(univariateStatistic86);
        descriptiveStatistics47.setSumImpl(univariateStatistic86);
        descriptiveStatistics14.setMeanImpl(univariateStatistic86);
        descriptiveStatistics0.setMeanImpl(univariateStatistic86);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str12, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str15, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(descriptiveStatistics24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(descriptiveStatistics31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(descriptiveStatistics33);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 2.0d + "'", double41 == 2.0d);
        org.junit.Assert.assertNotNull(univariateStatistic43);
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertNotNull(descriptiveStatistics47);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic52);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(descriptiveStatistics55);
        org.junit.Assert.assertNotNull(univariateStatistic56);
        org.junit.Assert.assertNotNull(descriptiveStatistics57);
        org.junit.Assert.assertNotNull(univariateStatistic58);
        org.junit.Assert.assertNotNull(univariateStatistic61);
        org.junit.Assert.assertNotNull(descriptiveStatistics62);
        org.junit.Assert.assertNotNull(univariateStatistic63);
        org.junit.Assert.assertNotNull(univariateStatistic64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic68);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertNotNull(descriptiveStatistics73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str74, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertNotNull(descriptiveStatistics76);
        org.junit.Assert.assertNotNull(univariateStatistic77);
        org.junit.Assert.assertNotNull(descriptiveStatistics78);
        org.junit.Assert.assertNotNull(univariateStatistic79);
        org.junit.Assert.assertNotNull(univariateStatistic81);
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertNotNull(univariateStatistic86);
    }

    @Test
    public void test01817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01817");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        double double4 = descriptiveStatistics1.getMin();
        double double5 = descriptiveStatistics1.getMax();
        double double6 = descriptiveStatistics1.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getKurtosisImpl();
        descriptiveStatistics1.setSkewnessImpl(univariateStatistic9);
        double[] doubleArray11 = descriptiveStatistics1.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics1.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics1.getMaxImpl();
        double double14 = descriptiveStatistics1.getSumsq();
        long long15 = descriptiveStatistics1.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test01818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01818");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray3 = new org.apache.commons.math.util.ResizableDoubleArray(53, (float) 33, 0.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01819");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray4 = new org.apache.commons.math.util.ResizableDoubleArray(32, (float) 1, (float) 91, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The expansion factor must be a number greater than 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01820");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getSkewnessImpl();
        java.lang.String str5 = descriptiveStatistics1.toString();
        double double6 = descriptiveStatistics1.getVariance();
        descriptiveStatistics1.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics9.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        descriptiveStatistics9.setKurtosisImpl(univariateStatistic12);
        descriptiveStatistics1.setSkewnessImpl(univariateStatistic12);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics17.getSumsqImpl();
        descriptiveStatistics15.setKurtosisImpl(univariateStatistic18);
        descriptiveStatistics15.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics15.getSkewnessImpl();
        descriptiveStatistics1.setVarianceImpl(univariateStatistic21);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics1.getSkewnessImpl();
        double double24 = descriptiveStatistics1.getVariance();
        double double25 = descriptiveStatistics1.getSum();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str5, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
    }

    @Test
    public void test01821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01821");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics3.getKurtosisImpl();
        double double9 = descriptiveStatistics0.apply(univariateStatistic8);
        double double10 = descriptiveStatistics0.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics0.getSumImpl();
        double double12 = descriptiveStatistics0.getMin();
        double[] doubleArray13 = descriptiveStatistics0.getSortedValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        descriptiveStatistics14.setKurtosisImpl(univariateStatistic17);
        descriptiveStatistics14.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics14.getPercentileImpl();
        double double21 = descriptiveStatistics14.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics22.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics22.getKurtosisImpl();
        double[] doubleArray25 = descriptiveStatistics22.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics22.getVarianceImpl();
        double double27 = descriptiveStatistics14.apply(univariateStatistic26);
        descriptiveStatistics0.setSumsqImpl(univariateStatistic26);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double31 = descriptiveStatistics30.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics30.getGeometricMeanImpl();
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic32);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics34 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics34.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics36.getSumsqImpl();
        descriptiveStatistics34.setKurtosisImpl(univariateStatistic37);
        double double39 = descriptiveStatistics0.apply(univariateStatistic37);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics0.getMinImpl();
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray44 = new org.apache.commons.math.util.ResizableDoubleArray(101, (float) 2, (float) 2);
        double[] doubleArray45 = resizableDoubleArray44.getElements();
        // The following exception was thrown during execution in test generation
        try {
            double double48 = univariateStatistic40.evaluate(doubleArray45, 102, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(descriptiveStatistics22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(descriptiveStatistics34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]");
    }

    @Test
    public void test01822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01822");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        double double3 = descriptiveStatistics1.getVariance();
        double double4 = descriptiveStatistics1.getSum();
        double double6 = descriptiveStatistics1.getPercentile(2.0d);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str8 = descriptiveStatistics7.toString();
        descriptiveStatistics7.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics7.getGeometricMeanImpl();
        double double11 = descriptiveStatistics7.getMax();
        double[] doubleArray12 = descriptiveStatistics7.getSortedValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics7.getMaxImpl();
        double double14 = descriptiveStatistics1.apply(univariateStatistic13);
        double double15 = descriptiveStatistics1.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics1.getGeometricMeanImpl();
        int int17 = descriptiveStatistics1.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics1.getSumsqImpl();
        double double19 = descriptiveStatistics1.getVariance();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str8, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
    }

    @Test
    public void test01823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01823");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray3 = new org.apache.commons.math.util.ResizableDoubleArray(102, 2.0f, (float) 101);
        resizableDoubleArray3.setNumElements((int) (short) 0);
    }

    @Test
    public void test01824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01824");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) 10);
        int int4 = resizableDoubleArray0.getNumElements();
        double double6 = resizableDoubleArray0.addElementRolling(0.0d);
        resizableDoubleArray0.addElement((double) 2);
        resizableDoubleArray0.setElement((int) '#', (double) 32.0f);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
    }

    @Test
    public void test01825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01825");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics5.getKurtosisImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic10);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        descriptiveStatistics12.setKurtosisImpl(univariateStatistic15);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics12.getKurtosisImpl();
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic17);
        double double19 = descriptiveStatistics0.getMin();
        double[] doubleArray20 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        descriptiveStatistics21.setWindowSize((int) (byte) -1);
        int int24 = descriptiveStatistics21.getWindowSize();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics25.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics27.getSumsqImpl();
        descriptiveStatistics25.setKurtosisImpl(univariateStatistic28);
        descriptiveStatistics21.setGeometricMeanImpl(univariateStatistic28);
        double double31 = descriptiveStatistics0.apply(univariateStatistic28);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = null;
        descriptiveStatistics0.setVarianceImpl(univariateStatistic32);
        // The following exception was thrown during execution in test generation
        try {
            double double35 = descriptiveStatistics0.getElement(35);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 35 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
    }

    @Test
    public void test01826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01826");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics(1);
        long long2 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics1.getMaxImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getPercentileImpl();
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray5 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int6 = resizableDoubleArray5.getExpansionMode();
        int int7 = resizableDoubleArray5.getNumElements();
        int int8 = resizableDoubleArray5.start();
        resizableDoubleArray5.setElement((int) (short) 10, (double) 100L);
        double[] doubleArray12 = resizableDoubleArray5.getValues();
        double double14 = resizableDoubleArray5.addElementRolling(0.0d);
        resizableDoubleArray5.discardFrontElements((int) (short) 0);
        float float17 = resizableDoubleArray5.getExpansionFactor();
        double[] doubleArray18 = resizableDoubleArray5.getElements();
        float float19 = resizableDoubleArray5.getContractionCriteria();
        resizableDoubleArray5.clear();
        double double22 = resizableDoubleArray5.addElementRolling(100.0d);
        int int23 = resizableDoubleArray5.getExpansionMode();
        double[] doubleArray24 = resizableDoubleArray5.getValues();
        double double25 = univariateStatistic4.evaluate(doubleArray24);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + 2.0f + "'", float17 == 2.0f);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 2.5f + "'", float19 == 2.5f);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
    }

    @Test
    public void test01827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01827");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics(2);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str3 = descriptiveStatistics2.toString();
        double double4 = descriptiveStatistics2.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        descriptiveStatistics2.setSkewnessImpl(univariateStatistic8);
        double double11 = descriptiveStatistics2.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double14 = descriptiveStatistics13.getStandardDeviation();
        long long15 = descriptiveStatistics13.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics13.getMinImpl();
        descriptiveStatistics2.setVarianceImpl(univariateStatistic16);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics2.getMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        descriptiveStatistics19.setKurtosisImpl(univariateStatistic22);
        descriptiveStatistics19.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics25.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics25.getKurtosisImpl();
        long long28 = descriptiveStatistics25.getN();
        double double29 = descriptiveStatistics25.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics30.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics32 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics32.getSumsqImpl();
        descriptiveStatistics30.setKurtosisImpl(univariateStatistic33);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics35 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics35.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics37 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics37.getSumsqImpl();
        descriptiveStatistics35.setKurtosisImpl(univariateStatistic38);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics35.getKurtosisImpl();
        descriptiveStatistics30.setMaxImpl(univariateStatistic40);
        descriptiveStatistics25.setSumImpl(univariateStatistic40);
        descriptiveStatistics19.setSumsqImpl(univariateStatistic40);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics44 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str45 = descriptiveStatistics44.toString();
        descriptiveStatistics44.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics44.getGeometricMeanImpl();
        double double48 = descriptiveStatistics44.getMax();
        double double49 = descriptiveStatistics44.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic50 = descriptiveStatistics44.getVarianceImpl();
        descriptiveStatistics19.setMeanImpl(univariateStatistic50);
        descriptiveStatistics2.setSumImpl(univariateStatistic50);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics2.getVarianceImpl();
        // The following exception was thrown during execution in test generation
        try {
            descriptiveStatistics1.setPercentileImpl(univariateStatistic53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Percentile implementation does not support setQuantile");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str3, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(descriptiveStatistics30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(descriptiveStatistics32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(descriptiveStatistics35);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertNotNull(descriptiveStatistics37);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertNotNull(descriptiveStatistics44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str45, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(univariateStatistic50);
        org.junit.Assert.assertNotNull(univariateStatistic53);
    }

    @Test
    public void test01828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01828");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        int int3 = resizableDoubleArray0.start();
        resizableDoubleArray0.setElement((int) (short) 10, (double) 100L);
        double[] doubleArray7 = resizableDoubleArray0.getValues();
        resizableDoubleArray0.setNumElements(0);
        double[] doubleArray10 = resizableDoubleArray0.getValues();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setExpansionFactor((float) 35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test01829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01829");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        java.lang.String str2 = descriptiveStatistics0.toString();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics3.getKurtosisImpl();
        long long6 = descriptiveStatistics3.getN();
        descriptiveStatistics3.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics3.getSkewnessImpl();
        descriptiveStatistics0.setSumsqImpl(univariateStatistic9);
        double double11 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics0.getSkewnessImpl();
        double double13 = descriptiveStatistics0.getSumsq();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics14.getKurtosisImpl();
        long long17 = descriptiveStatistics14.getN();
        descriptiveStatistics14.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics20.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics22.getSumsqImpl();
        descriptiveStatistics20.setKurtosisImpl(univariateStatistic23);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics25.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics27.getSumsqImpl();
        descriptiveStatistics25.setKurtosisImpl(univariateStatistic28);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics25.getKurtosisImpl();
        descriptiveStatistics20.setMaxImpl(univariateStatistic30);
        double double32 = descriptiveStatistics20.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics20.getMinImpl();
        descriptiveStatistics14.setMinImpl(univariateStatistic33);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics14.getKurtosisImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics14.getMaxImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics14.getGeometricMeanImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic37);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics39 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str40 = descriptiveStatistics39.toString();
        java.lang.String str41 = descriptiveStatistics39.toString();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics42 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic43 = descriptiveStatistics42.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics42.getKurtosisImpl();
        long long45 = descriptiveStatistics42.getN();
        descriptiveStatistics42.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics42.getSkewnessImpl();
        descriptiveStatistics39.setSumsqImpl(univariateStatistic48);
        double double50 = descriptiveStatistics39.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics39.getSkewnessImpl();
        double[] doubleArray52 = descriptiveStatistics39.getSortedValues();
        // The following exception was thrown during execution in test generation
        try {
            double double55 = univariateStatistic37.evaluate(doubleArray52, 32, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str2, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(descriptiveStatistics22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(descriptiveStatistics39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str40, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str41, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics42);
        org.junit.Assert.assertNotNull(univariateStatistic43);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
    }

    @Test
    public void test01830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01830");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray2 = new org.apache.commons.math.util.ResizableDoubleArray((int) (byte) 1, (float) '4');
        resizableDoubleArray2.addElement((double) 2.0f);
        // The following exception was thrown during execution in test generation
        try {
            double double6 = resizableDoubleArray2.getElement(35);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 35 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01831");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str3 = descriptiveStatistics2.toString();
        descriptiveStatistics2.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics2.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics2.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics7.getKurtosisImpl();
        long long10 = descriptiveStatistics7.getN();
        double double11 = descriptiveStatistics7.getMax();
        double double12 = descriptiveStatistics7.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double14 = descriptiveStatistics13.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics13.getMinImpl();
        descriptiveStatistics7.setSumImpl(univariateStatistic15);
        descriptiveStatistics2.setSumImpl(univariateStatistic15);
        double double18 = descriptiveStatistics2.getMin();
        java.lang.String str19 = descriptiveStatistics2.toString();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        descriptiveStatistics21.setKurtosisImpl(univariateStatistic24);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics21.getKurtosisImpl();
        double[] doubleArray30 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double31 = univariateStatistic26.evaluate(doubleArray30);
        descriptiveStatistics20.setMaxImpl(univariateStatistic26);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics33 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics33.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics33.getKurtosisImpl();
        long long36 = descriptiveStatistics33.getN();
        double double37 = descriptiveStatistics33.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics38 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics38.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics40 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics40.getSumsqImpl();
        descriptiveStatistics38.setKurtosisImpl(univariateStatistic41);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics43.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics45 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics45.getSumsqImpl();
        descriptiveStatistics43.setKurtosisImpl(univariateStatistic46);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics43.getKurtosisImpl();
        descriptiveStatistics38.setMaxImpl(univariateStatistic48);
        descriptiveStatistics33.setSumImpl(univariateStatistic48);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics52 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics52.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics54 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics54.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics56 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics56.getSumsqImpl();
        descriptiveStatistics54.setKurtosisImpl(univariateStatistic57);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics59 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic60 = descriptiveStatistics59.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics61 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic62 = descriptiveStatistics61.getSumsqImpl();
        descriptiveStatistics59.setKurtosisImpl(univariateStatistic62);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic64 = descriptiveStatistics59.getKurtosisImpl();
        descriptiveStatistics54.setMaxImpl(univariateStatistic64);
        double double66 = descriptiveStatistics54.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic67 = descriptiveStatistics54.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic68 = descriptiveStatistics54.getVarianceImpl();
        descriptiveStatistics52.setMinImpl(univariateStatistic68);
        descriptiveStatistics33.setMeanImpl(univariateStatistic68);
        descriptiveStatistics20.setSumImpl(univariateStatistic68);
        double double72 = descriptiveStatistics2.apply(univariateStatistic68);
        double double73 = descriptiveStatistics0.apply(univariateStatistic68);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic74 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double75 = descriptiveStatistics0.apply(univariateStatistic74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str3, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str19, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics20);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 2.0d + "'", double31 == 2.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics33);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(descriptiveStatistics38);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(descriptiveStatistics40);
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertNotNull(descriptiveStatistics43);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(descriptiveStatistics45);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertNotNull(descriptiveStatistics54);
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertNotNull(descriptiveStatistics56);
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertNotNull(descriptiveStatistics59);
        org.junit.Assert.assertNotNull(univariateStatistic60);
        org.junit.Assert.assertNotNull(descriptiveStatistics61);
        org.junit.Assert.assertNotNull(univariateStatistic62);
        org.junit.Assert.assertNotNull(univariateStatistic64);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(univariateStatistic67);
        org.junit.Assert.assertNotNull(univariateStatistic68);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue(Double.isNaN(double73));
    }

    @Test
    public void test01832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01832");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getPercentileImpl();
        double double7 = descriptiveStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics8.getKurtosisImpl();
        double[] doubleArray11 = descriptiveStatistics8.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics8.getVarianceImpl();
        double double13 = descriptiveStatistics0.apply(univariateStatistic12);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = null;
        descriptiveStatistics0.setMeanImpl(univariateStatistic14);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics0.getMeanImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNull(univariateStatistic16);
    }

    @Test
    public void test01833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01833");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic6);
        double double9 = descriptiveStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics10.getKurtosisImpl();
        long long13 = descriptiveStatistics10.getN();
        double[] doubleArray14 = descriptiveStatistics10.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics10.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics10.getMinImpl();
        descriptiveStatistics0.setMinImpl(univariateStatistic16);
        double double18 = descriptiveStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics0.getSumImpl();
        int int20 = descriptiveStatistics0.getWindowSize();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
    }

    @Test
    public void test01834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01834");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics3.getKurtosisImpl();
        double double9 = descriptiveStatistics0.apply(univariateStatistic8);
        double double10 = descriptiveStatistics0.getSumsq();
        double double11 = descriptiveStatistics0.getMean();
        java.lang.String str12 = descriptiveStatistics0.toString();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double15 = descriptiveStatistics14.getStandardDeviation();
        double double16 = descriptiveStatistics14.getVariance();
        double double17 = descriptiveStatistics14.getSum();
        long long18 = descriptiveStatistics14.getN();
        int int19 = descriptiveStatistics14.getWindowSize();
        double double20 = descriptiveStatistics14.getMax();
        descriptiveStatistics14.addValue((double) 32.0f);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics25.getSumsqImpl();
        descriptiveStatistics23.setKurtosisImpl(univariateStatistic26);
        descriptiveStatistics23.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics29.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics29.getKurtosisImpl();
        long long32 = descriptiveStatistics29.getN();
        double double33 = descriptiveStatistics29.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics34 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics34.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics36.getSumsqImpl();
        descriptiveStatistics34.setKurtosisImpl(univariateStatistic37);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics39 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics39.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics41.getSumsqImpl();
        descriptiveStatistics39.setKurtosisImpl(univariateStatistic42);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics39.getKurtosisImpl();
        descriptiveStatistics34.setMaxImpl(univariateStatistic44);
        descriptiveStatistics29.setSumImpl(univariateStatistic44);
        descriptiveStatistics23.setSumsqImpl(univariateStatistic44);
        double double48 = descriptiveStatistics23.getSumsq();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics49 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str50 = descriptiveStatistics49.toString();
        double double51 = descriptiveStatistics49.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics52 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics52.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics54 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics54.getSumsqImpl();
        descriptiveStatistics52.setKurtosisImpl(univariateStatistic55);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics52.getKurtosisImpl();
        double double58 = descriptiveStatistics49.apply(univariateStatistic57);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics59 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str60 = descriptiveStatistics59.toString();
        descriptiveStatistics59.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic62 = descriptiveStatistics59.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic63 = descriptiveStatistics59.getSumsqImpl();
        descriptiveStatistics49.setMeanImpl(univariateStatistic63);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics65 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic66 = descriptiveStatistics65.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics67 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic68 = descriptiveStatistics67.getSumsqImpl();
        descriptiveStatistics65.setKurtosisImpl(univariateStatistic68);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics70 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic71 = descriptiveStatistics70.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics72 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic73 = descriptiveStatistics72.getSumsqImpl();
        descriptiveStatistics70.setKurtosisImpl(univariateStatistic73);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic75 = descriptiveStatistics70.getKurtosisImpl();
        descriptiveStatistics65.setMaxImpl(univariateStatistic75);
        double double77 = descriptiveStatistics65.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic78 = descriptiveStatistics65.getMinImpl();
        descriptiveStatistics65.setWindowSize((int) (short) 100);
        java.lang.String str81 = descriptiveStatistics65.toString();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic82 = descriptiveStatistics65.getVarianceImpl();
        descriptiveStatistics49.setGeometricMeanImpl(univariateStatistic82);
        descriptiveStatistics23.setSumsqImpl(univariateStatistic82);
        descriptiveStatistics14.setSumImpl(univariateStatistic82);
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic82);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str12, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(descriptiveStatistics29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(descriptiveStatistics34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(descriptiveStatistics39);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertNotNull(descriptiveStatistics41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(descriptiveStatistics49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str50, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(descriptiveStatistics52);
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertNotNull(descriptiveStatistics54);
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertNotNull(descriptiveStatistics59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str60, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic62);
        org.junit.Assert.assertNotNull(univariateStatistic63);
        org.junit.Assert.assertNotNull(descriptiveStatistics65);
        org.junit.Assert.assertNotNull(univariateStatistic66);
        org.junit.Assert.assertNotNull(descriptiveStatistics67);
        org.junit.Assert.assertNotNull(univariateStatistic68);
        org.junit.Assert.assertNotNull(descriptiveStatistics70);
        org.junit.Assert.assertNotNull(univariateStatistic71);
        org.junit.Assert.assertNotNull(descriptiveStatistics72);
        org.junit.Assert.assertNotNull(univariateStatistic73);
        org.junit.Assert.assertNotNull(univariateStatistic75);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertNotNull(univariateStatistic78);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str81, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic82);
    }

    @Test
    public void test01835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01835");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics9.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        descriptiveStatistics9.setKurtosisImpl(univariateStatistic12);
        descriptiveStatistics9.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics9.getSkewnessImpl();
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic15);
        long long17 = descriptiveStatistics0.getN();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str19 = descriptiveStatistics18.toString();
        double double20 = descriptiveStatistics18.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        descriptiveStatistics21.setKurtosisImpl(univariateStatistic24);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics21.getKurtosisImpl();
        double double27 = descriptiveStatistics18.apply(univariateStatistic26);
        double double28 = descriptiveStatistics18.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics18.getSumImpl();
        double double30 = descriptiveStatistics18.getMin();
        double[] doubleArray31 = descriptiveStatistics18.getSortedValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics32 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics32.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics34 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics34.getSumsqImpl();
        descriptiveStatistics32.setKurtosisImpl(univariateStatistic35);
        descriptiveStatistics32.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics32.getPercentileImpl();
        double double39 = descriptiveStatistics32.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics40 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics40.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics40.getKurtosisImpl();
        double[] doubleArray43 = descriptiveStatistics40.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics40.getVarianceImpl();
        double double45 = descriptiveStatistics32.apply(univariateStatistic44);
        descriptiveStatistics18.setSumsqImpl(univariateStatistic44);
        long long47 = descriptiveStatistics18.getN();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics48 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double49 = descriptiveStatistics48.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic50 = descriptiveStatistics48.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics48.getKurtosisImpl();
        descriptiveStatistics18.setMeanImpl(univariateStatistic51);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics53 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic54 = descriptiveStatistics53.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics53.getKurtosisImpl();
        long long56 = descriptiveStatistics53.getN();
        double[] doubleArray57 = descriptiveStatistics53.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic58 = descriptiveStatistics53.getSumImpl();
        double double59 = descriptiveStatistics53.getVariance();
        double double60 = descriptiveStatistics53.getMax();
        double double61 = descriptiveStatistics53.getKurtosis();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic62 = descriptiveStatistics53.getSkewnessImpl();
        descriptiveStatistics18.setMaxImpl(univariateStatistic62);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics64 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic65 = descriptiveStatistics64.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic66 = descriptiveStatistics64.getKurtosisImpl();
        double[] doubleArray67 = descriptiveStatistics64.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic68 = descriptiveStatistics64.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic69 = null;
        descriptiveStatistics64.setMaxImpl(univariateStatistic69);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic71 = descriptiveStatistics64.getSumsqImpl();
        double double72 = descriptiveStatistics18.apply(univariateStatistic71);
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic71);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str19, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(descriptiveStatistics32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(descriptiveStatistics34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(descriptiveStatistics40);
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics48);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(univariateStatistic50);
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertNotNull(descriptiveStatistics53);
        org.junit.Assert.assertNotNull(univariateStatistic54);
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic58);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertNotNull(univariateStatistic62);
        org.junit.Assert.assertNotNull(descriptiveStatistics64);
        org.junit.Assert.assertNotNull(univariateStatistic65);
        org.junit.Assert.assertNotNull(univariateStatistic66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic68);
        org.junit.Assert.assertNotNull(univariateStatistic71);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
    }

    @Test
    public void test01836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01836");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement(0.0d);
        resizableDoubleArray0.setElement(1, (double) 100.0f);
        float float7 = resizableDoubleArray0.getExpansionFactor();
        double double9 = resizableDoubleArray0.getElement(1);
        int int10 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.contract();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + float7 + "' != '" + 2.0f + "'", float7 == 2.0f);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test01837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01837");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double double4 = descriptiveStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        descriptiveStatistics10.setKurtosisImpl(univariateStatistic13);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics10.getKurtosisImpl();
        descriptiveStatistics5.setMaxImpl(univariateStatistic15);
        descriptiveStatistics0.setSumImpl(univariateStatistic15);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics0.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = null;
        descriptiveStatistics0.setMeanImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics0.getMaxImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(univariateStatistic21);
    }

    @Test
    public void test01838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01838");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        float float1 = resizableDoubleArray0.getExpansionFactor();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.setNumElements((int) ' ');
        double double6 = resizableDoubleArray0.addElementRolling((double) (short) 1);
        int int7 = resizableDoubleArray0.start();
        int int8 = resizableDoubleArray0.getExpansionMode();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setExpansionFactor((float) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float1 + "' != '" + 2.0f + "'", float1 == 2.0f);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test01839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01839");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic6);
        double double9 = descriptiveStatistics0.getStandardDeviation();
        double[] doubleArray10 = descriptiveStatistics0.getValues();
        descriptiveStatistics0.clear();
        double double12 = descriptiveStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        descriptiveStatistics13.setKurtosisImpl(univariateStatistic16);
        descriptiveStatistics13.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics19.getKurtosisImpl();
        long long22 = descriptiveStatistics19.getN();
        double double23 = descriptiveStatistics19.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics24 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics24.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics26.getSumsqImpl();
        descriptiveStatistics24.setKurtosisImpl(univariateStatistic27);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics29.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics31.getSumsqImpl();
        descriptiveStatistics29.setKurtosisImpl(univariateStatistic32);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics29.getKurtosisImpl();
        descriptiveStatistics24.setMaxImpl(univariateStatistic34);
        descriptiveStatistics19.setSumImpl(univariateStatistic34);
        descriptiveStatistics13.setSumsqImpl(univariateStatistic34);
        double double38 = descriptiveStatistics13.getSumsq();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics39 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str40 = descriptiveStatistics39.toString();
        double double41 = descriptiveStatistics39.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics42 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic43 = descriptiveStatistics42.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics44 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics44.getSumsqImpl();
        descriptiveStatistics42.setKurtosisImpl(univariateStatistic45);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics42.getKurtosisImpl();
        double double48 = descriptiveStatistics39.apply(univariateStatistic47);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics49 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str50 = descriptiveStatistics49.toString();
        descriptiveStatistics49.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics49.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics49.getSumsqImpl();
        descriptiveStatistics39.setMeanImpl(univariateStatistic53);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics55 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic56 = descriptiveStatistics55.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics57 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic58 = descriptiveStatistics57.getSumsqImpl();
        descriptiveStatistics55.setKurtosisImpl(univariateStatistic58);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics60 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic61 = descriptiveStatistics60.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics62 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic63 = descriptiveStatistics62.getSumsqImpl();
        descriptiveStatistics60.setKurtosisImpl(univariateStatistic63);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic65 = descriptiveStatistics60.getKurtosisImpl();
        descriptiveStatistics55.setMaxImpl(univariateStatistic65);
        double double67 = descriptiveStatistics55.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic68 = descriptiveStatistics55.getMinImpl();
        descriptiveStatistics55.setWindowSize((int) (short) 100);
        java.lang.String str71 = descriptiveStatistics55.toString();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic72 = descriptiveStatistics55.getVarianceImpl();
        descriptiveStatistics39.setGeometricMeanImpl(univariateStatistic72);
        descriptiveStatistics13.setSumsqImpl(univariateStatistic72);
        descriptiveStatistics0.setVarianceImpl(univariateStatistic72);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(descriptiveStatistics24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(descriptiveStatistics29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(descriptiveStatistics31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(descriptiveStatistics39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str40, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(descriptiveStatistics42);
        org.junit.Assert.assertNotNull(univariateStatistic43);
        org.junit.Assert.assertNotNull(descriptiveStatistics44);
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(descriptiveStatistics49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str50, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic52);
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertNotNull(descriptiveStatistics55);
        org.junit.Assert.assertNotNull(univariateStatistic56);
        org.junit.Assert.assertNotNull(descriptiveStatistics57);
        org.junit.Assert.assertNotNull(univariateStatistic58);
        org.junit.Assert.assertNotNull(descriptiveStatistics60);
        org.junit.Assert.assertNotNull(univariateStatistic61);
        org.junit.Assert.assertNotNull(descriptiveStatistics62);
        org.junit.Assert.assertNotNull(univariateStatistic63);
        org.junit.Assert.assertNotNull(univariateStatistic65);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(univariateStatistic68);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str71, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic72);
    }

    @Test
    public void test01840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01840");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.setElement(100, (double) (byte) 100);
        resizableDoubleArray0.addElement(2.0d);
        float float7 = resizableDoubleArray0.getContractionCriteria();
        double double9 = resizableDoubleArray0.addElementRolling((double) 10);
        resizableDoubleArray0.addElement((double) ' ');
        double double13 = resizableDoubleArray0.getElement(0);
        resizableDoubleArray0.clear();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + float7 + "' != '" + 2.5f + "'", float7 == 2.5f);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test01841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01841");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics5.getKurtosisImpl();
        long long8 = descriptiveStatistics5.getN();
        double double9 = descriptiveStatistics5.getMax();
        double double10 = descriptiveStatistics5.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double12 = descriptiveStatistics11.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics11.getMinImpl();
        descriptiveStatistics5.setSumImpl(univariateStatistic13);
        descriptiveStatistics0.setSumImpl(univariateStatistic13);
        double double16 = descriptiveStatistics0.getVariance();
        double double17 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics18.getKurtosisImpl();
        long long21 = descriptiveStatistics18.getN();
        double[] doubleArray22 = descriptiveStatistics18.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics18.getSumImpl();
        double double24 = descriptiveStatistics18.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics18.getSumImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic25);
        double[] doubleArray27 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics28.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics28.getKurtosisImpl();
        double[] doubleArray31 = descriptiveStatistics28.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics28.getVarianceImpl();
        double double33 = descriptiveStatistics28.getGeometricMean();
        long long34 = descriptiveStatistics28.getN();
        double double35 = descriptiveStatistics28.getVariance();
        double double36 = descriptiveStatistics28.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics28.getMeanImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic37);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(univariateStatistic37);
    }

    @Test
    public void test01842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01842");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics1.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics1.getMeanImpl();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
    }

    @Test
    public void test01843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01843");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement(0.0d);
        int int4 = resizableDoubleArray0.getNumElements();
        int int5 = resizableDoubleArray0.getExpansionMode();
        int int6 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) 2.5f);
        resizableDoubleArray0.contract();
        resizableDoubleArray0.setElement((int) (byte) 10, 100.0d);
        resizableDoubleArray0.setElement((int) (short) 1, (double) (-1.0f));
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setExpansionMode(3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal expansionMode setting.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test01844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01844");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        float float1 = resizableDoubleArray0.getExpansionFactor();
        resizableDoubleArray0.setElement((int) (short) 0, (double) (byte) 100);
        int int5 = resizableDoubleArray0.getExpansionMode();
        // The following exception was thrown during execution in test generation
        try {
            double double7 = resizableDoubleArray0.getElement(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 100 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float1 + "' != '" + 2.0f + "'", float1 == 2.0f);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test01845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01845");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray3 = new org.apache.commons.math.util.ResizableDoubleArray((int) '4', 2.0f, (float) 100);
        int int4 = resizableDoubleArray3.getExpansionMode();
        double[] doubleArray5 = resizableDoubleArray3.getElements();
        // The following exception was thrown during execution in test generation
        try {
            double double7 = resizableDoubleArray3.getElement(103);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 103 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
    }

    @Test
    public void test01846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01846");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        double double5 = resizableDoubleArray0.addElementRolling((double) 10L);
        int int6 = resizableDoubleArray0.getNumElements();
        int int7 = resizableDoubleArray0.getNumElements();
        double double9 = resizableDoubleArray0.getElement((int) (byte) 0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
    }

    @Test
    public void test01847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01847");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double double4 = descriptiveStatistics0.getGeometricMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str6 = descriptiveStatistics5.toString();
        descriptiveStatistics5.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics5.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics10.getKurtosisImpl();
        long long13 = descriptiveStatistics10.getN();
        double double14 = descriptiveStatistics10.getMax();
        double double15 = descriptiveStatistics10.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double17 = descriptiveStatistics16.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics16.getMinImpl();
        descriptiveStatistics10.setSumImpl(univariateStatistic18);
        descriptiveStatistics5.setSumImpl(univariateStatistic18);
        double double21 = descriptiveStatistics5.getVariance();
        long long22 = descriptiveStatistics5.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics5.getPercentileImpl();
        descriptiveStatistics0.setMinImpl(univariateStatistic23);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double26 = descriptiveStatistics0.apply(univariateStatistic25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str6, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic23);
    }

    @Test
    public void test01848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01848");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        descriptiveStatistics0.setWindowSize((int) (byte) -1);
        long long3 = descriptiveStatistics0.getN();
        double double4 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str6 = descriptiveStatistics5.toString();
        double double7 = descriptiveStatistics5.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        descriptiveStatistics8.setKurtosisImpl(univariateStatistic11);
        descriptiveStatistics5.setSkewnessImpl(univariateStatistic11);
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic11);
        double[] doubleArray15 = descriptiveStatistics0.getSortedValues();
        descriptiveStatistics0.addValue(31.0d);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics0.getSumImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str6, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic18);
    }

    @Test
    public void test01849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01849");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 10);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        double double3 = descriptiveStatistics1.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics4 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics4.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics6.getSumsqImpl();
        descriptiveStatistics4.setKurtosisImpl(univariateStatistic7);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics9.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        descriptiveStatistics9.setKurtosisImpl(univariateStatistic12);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics9.getKurtosisImpl();
        descriptiveStatistics4.setMaxImpl(univariateStatistic14);
        double double16 = descriptiveStatistics4.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics4.getMinImpl();
        descriptiveStatistics4.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics20.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics22.getSumsqImpl();
        descriptiveStatistics20.setKurtosisImpl(univariateStatistic23);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics20.getKurtosisImpl();
        double double26 = descriptiveStatistics20.getStandardDeviation();
        double double27 = descriptiveStatistics20.getSum();
        int int28 = descriptiveStatistics20.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics20.getMaxImpl();
        descriptiveStatistics4.setSkewnessImpl(univariateStatistic29);
        descriptiveStatistics1.setSumImpl(univariateStatistic29);
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray32 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int33 = resizableDoubleArray32.start();
        resizableDoubleArray32.addElement((double) 10);
        resizableDoubleArray32.setElement(1, (double) (short) 0);
        resizableDoubleArray32.contract();
        int int40 = resizableDoubleArray32.getExpansionMode();
        resizableDoubleArray32.addElement((double) 35.0f);
        double[] doubleArray43 = resizableDoubleArray32.getElements();
        double[] doubleArray44 = resizableDoubleArray32.getElements();
        // The following exception was thrown during execution in test generation
        try {
            double double47 = univariateStatistic29.evaluate(doubleArray44, (int) (short) 100, 35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(descriptiveStatistics4);
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(descriptiveStatistics22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0, 0.0, 35.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0, 0.0, 35.0]");
    }

    @Test
    public void test01850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01850");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics3.getKurtosisImpl();
        double double9 = descriptiveStatistics0.apply(univariateStatistic8);
        double double10 = descriptiveStatistics0.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics0.getSumImpl();
        double double12 = descriptiveStatistics0.getMin();
        double[] doubleArray13 = descriptiveStatistics0.getSortedValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        descriptiveStatistics14.setKurtosisImpl(univariateStatistic17);
        descriptiveStatistics14.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics14.getPercentileImpl();
        double double21 = descriptiveStatistics14.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics22.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics22.getKurtosisImpl();
        double[] doubleArray25 = descriptiveStatistics22.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics22.getVarianceImpl();
        double double27 = descriptiveStatistics14.apply(univariateStatistic26);
        descriptiveStatistics0.setSumsqImpl(univariateStatistic26);
        long long29 = descriptiveStatistics0.getN();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double31 = descriptiveStatistics30.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics30.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics30.getKurtosisImpl();
        descriptiveStatistics0.setMeanImpl(univariateStatistic33);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics35 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics35.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics35.getKurtosisImpl();
        long long38 = descriptiveStatistics35.getN();
        double[] doubleArray39 = descriptiveStatistics35.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics35.getSumImpl();
        double double41 = descriptiveStatistics35.getVariance();
        double double42 = descriptiveStatistics35.getMax();
        double double43 = descriptiveStatistics35.getKurtosis();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics35.getSkewnessImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic44);
        double double46 = descriptiveStatistics0.getMin();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(descriptiveStatistics22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics30);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(descriptiveStatistics35);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
    }

    @Test
    public void test01851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01851");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double2 = descriptiveStatistics1.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics1.getGeometricMeanImpl();
        double double4 = descriptiveStatistics1.getMean();
        double double5 = descriptiveStatistics1.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str7 = descriptiveStatistics6.toString();
        double double8 = descriptiveStatistics6.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics9.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        descriptiveStatistics9.setKurtosisImpl(univariateStatistic12);
        descriptiveStatistics6.setSkewnessImpl(univariateStatistic12);
        double double15 = descriptiveStatistics6.getStandardDeviation();
        descriptiveStatistics6.clear();
        double double17 = descriptiveStatistics6.getSum();
        double double18 = descriptiveStatistics6.getMin();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str20 = descriptiveStatistics19.toString();
        double double21 = descriptiveStatistics19.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics22.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics24 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics24.getSumsqImpl();
        descriptiveStatistics22.setKurtosisImpl(univariateStatistic25);
        descriptiveStatistics19.setSkewnessImpl(univariateStatistic25);
        double double28 = descriptiveStatistics19.getStandardDeviation();
        descriptiveStatistics19.clear();
        descriptiveStatistics19.setWindowSize((int) (short) -1);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics32 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics32.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics32.getKurtosisImpl();
        long long35 = descriptiveStatistics32.getN();
        descriptiveStatistics32.addValue((double) 0);
        int int38 = descriptiveStatistics32.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics32.getGeometricMeanImpl();
        descriptiveStatistics19.setVarianceImpl(univariateStatistic39);
        descriptiveStatistics6.setSumImpl(univariateStatistic39);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics42 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic43 = descriptiveStatistics42.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics42.getKurtosisImpl();
        long long45 = descriptiveStatistics42.getN();
        descriptiveStatistics42.addValue((double) 0);
        int int48 = descriptiveStatistics42.getWindowSize();
        double double49 = descriptiveStatistics42.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic50 = descriptiveStatistics42.getMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics51 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics52 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics52.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics54 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics54.getSumsqImpl();
        descriptiveStatistics52.setKurtosisImpl(univariateStatistic55);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics52.getKurtosisImpl();
        double[] doubleArray61 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double62 = univariateStatistic57.evaluate(doubleArray61);
        descriptiveStatistics51.setMaxImpl(univariateStatistic57);
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray64 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int65 = resizableDoubleArray64.getExpansionMode();
        resizableDoubleArray64.addElement(0.0d);
        int int68 = resizableDoubleArray64.getExpansionMode();
        float float69 = resizableDoubleArray64.getContractionCriteria();
        resizableDoubleArray64.setNumElements(10);
        double[] doubleArray72 = resizableDoubleArray64.getElements();
        double double73 = univariateStatistic57.evaluate(doubleArray72);
        double double74 = univariateStatistic50.evaluate(doubleArray72);
        double double75 = descriptiveStatistics6.apply(univariateStatistic50);
        descriptiveStatistics1.setVarianceImpl(univariateStatistic50);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics78 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((-1));
        descriptiveStatistics78.addValue(0.0d);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics82 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 1);
        double double83 = descriptiveStatistics82.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics84 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        descriptiveStatistics84.setWindowSize((int) (byte) -1);
        long long87 = descriptiveStatistics84.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic88 = descriptiveStatistics84.getKurtosisImpl();
        descriptiveStatistics82.setKurtosisImpl(univariateStatistic88);
        double double90 = descriptiveStatistics82.getSkewness();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic91 = descriptiveStatistics82.getVarianceImpl();
        double double92 = descriptiveStatistics82.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic93 = descriptiveStatistics82.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic94 = descriptiveStatistics82.getMaxImpl();
        descriptiveStatistics78.setMaxImpl(univariateStatistic94);
        descriptiveStatistics1.setMaxImpl(univariateStatistic94);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str7, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str20, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(descriptiveStatistics22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(descriptiveStatistics24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(descriptiveStatistics32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(descriptiveStatistics42);
        org.junit.Assert.assertNotNull(univariateStatistic43);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(univariateStatistic50);
        org.junit.Assert.assertNotNull(descriptiveStatistics51);
        org.junit.Assert.assertNotNull(descriptiveStatistics52);
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertNotNull(descriptiveStatistics54);
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 2.0d + "'", double62 == 2.0d);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + float69 + "' != '" + 2.5f + "'", float69 == 2.5f);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertNotNull(descriptiveStatistics84);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 0L + "'", long87 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic88);
        org.junit.Assert.assertTrue(Double.isNaN(double90));
        org.junit.Assert.assertNotNull(univariateStatistic91);
        org.junit.Assert.assertTrue(Double.isNaN(double92));
        org.junit.Assert.assertNotNull(univariateStatistic93);
        org.junit.Assert.assertNotNull(univariateStatistic94);
    }

    @Test
    public void test01852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01852");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) 10);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double3 = descriptiveStatistics2.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics2.getSkewnessImpl();
        descriptiveStatistics1.setMaxImpl(univariateStatistic4);
        java.lang.String str6 = descriptiveStatistics1.toString();
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str6, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
    }

    @Test
    public void test01853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01853");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        descriptiveStatistics0.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics6.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        descriptiveStatistics6.setKurtosisImpl(univariateStatistic9);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        descriptiveStatistics11.setKurtosisImpl(univariateStatistic14);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics11.getKurtosisImpl();
        descriptiveStatistics6.setMaxImpl(univariateStatistic16);
        double double18 = descriptiveStatistics6.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics6.getMinImpl();
        descriptiveStatistics0.setMinImpl(univariateStatistic19);
        double double21 = descriptiveStatistics0.getMean();
        double double22 = descriptiveStatistics0.getGeometricMean();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
    }

    @Test
    public void test01854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01854");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray3 = new org.apache.commons.math.util.ResizableDoubleArray((int) (short) 100, (float) (short) 10, 10.0f);
        resizableDoubleArray3.addElement((double) 33);
        double double7 = resizableDoubleArray3.getElement(0);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 33.0d + "'", double7 == 33.0d);
    }

    @Test
    public void test01855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01855");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getKurtosisImpl();
        double double6 = descriptiveStatistics0.getMean();
        double double7 = descriptiveStatistics0.getSum();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test01856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01856");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        double[] doubleArray3 = resizableDoubleArray0.getElements();
        float float4 = resizableDoubleArray0.getExpansionFactor();
        int int5 = resizableDoubleArray0.getNumElements();
        int int6 = resizableDoubleArray0.getExpansionMode();
        int int7 = resizableDoubleArray0.getExpansionMode();
        float float8 = resizableDoubleArray0.getExpansionFactor();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 2.0f + "'", float4 == 2.0f);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 2.0f + "'", float8 == 2.0f);
    }

    @Test
    public void test01857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01857");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray3 = new org.apache.commons.math.util.ResizableDoubleArray((int) (byte) 1, (float) (byte) 10, (float) 'a');
    }

    @Test
    public void test01858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01858");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray4 = new org.apache.commons.math.util.ResizableDoubleArray(1, 0.0f, (float) 0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The expansion factor must be a number greater than 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01859");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray2 = new org.apache.commons.math.util.ResizableDoubleArray(0, (float) 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The initial capacity supplied: 0must be a positive integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01860");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        double double6 = descriptiveStatistics0.getVariance();
        double double7 = descriptiveStatistics0.getMax();
        double double8 = descriptiveStatistics0.getKurtosis();
        double double9 = descriptiveStatistics0.getSum();
        double[] doubleArray10 = descriptiveStatistics0.getValues();
        // The following exception was thrown during execution in test generation
        try {
            double double12 = descriptiveStatistics0.getPercentile(0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal quantile value: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
    }

    @Test
    public void test01861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01861");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double double4 = descriptiveStatistics0.getMax();
        descriptiveStatistics0.clear();
        double double6 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str8 = descriptiveStatistics7.toString();
        descriptiveStatistics7.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str11 = descriptiveStatistics10.toString();
        double double12 = descriptiveStatistics10.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        descriptiveStatistics13.setKurtosisImpl(univariateStatistic16);
        descriptiveStatistics10.setSkewnessImpl(univariateStatistic16);
        double double19 = descriptiveStatistics10.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double22 = descriptiveStatistics21.getStandardDeviation();
        long long23 = descriptiveStatistics21.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics21.getMinImpl();
        descriptiveStatistics10.setVarianceImpl(univariateStatistic24);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics10.getMeanImpl();
        descriptiveStatistics7.setMeanImpl(univariateStatistic26);
        int int28 = descriptiveStatistics7.getWindowSize();
        int int29 = descriptiveStatistics7.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics7.getPercentileImpl();
        descriptiveStatistics0.setMinImpl(univariateStatistic30);
        double double32 = descriptiveStatistics0.getVariance();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str8, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str11, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
    }

    @Test
    public void test01862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01862");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.setElement(0, (double) 0.0f);
        resizableDoubleArray0.addElement(10000.0d);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    }

    @Test
    public void test01863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01863");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        descriptiveStatistics0.addValue((double) 0);
        int int6 = descriptiveStatistics0.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics0.getGeometricMeanImpl();
        descriptiveStatistics0.setWindowSize((int) (byte) 1);
        long long10 = descriptiveStatistics0.getN();
        double double11 = descriptiveStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double14 = descriptiveStatistics13.getStandardDeviation();
        long long15 = descriptiveStatistics13.getN();
        double double16 = descriptiveStatistics13.getMin();
        double double17 = descriptiveStatistics13.getMax();
        double double18 = descriptiveStatistics13.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double21 = descriptiveStatistics20.getStandardDeviation();
        long long22 = descriptiveStatistics20.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics20.getSkewnessImpl();
        java.lang.String str24 = descriptiveStatistics20.toString();
        double double25 = descriptiveStatistics20.getVariance();
        descriptiveStatistics20.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics28.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics30.getSumsqImpl();
        descriptiveStatistics28.setKurtosisImpl(univariateStatistic31);
        descriptiveStatistics20.setSkewnessImpl(univariateStatistic31);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics34 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics34.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics36.getSumsqImpl();
        descriptiveStatistics34.setKurtosisImpl(univariateStatistic37);
        descriptiveStatistics34.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics34.getSkewnessImpl();
        descriptiveStatistics20.setVarianceImpl(univariateStatistic40);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics20.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic43 = descriptiveStatistics20.getSkewnessImpl();
        descriptiveStatistics13.setKurtosisImpl(univariateStatistic43);
        descriptiveStatistics0.setMeanImpl(univariateStatistic43);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = null;
        descriptiveStatistics0.setSumsqImpl(univariateStatistic46);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str24, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(descriptiveStatistics30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(descriptiveStatistics34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(univariateStatistic43);
    }

    @Test
    public void test01864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01864");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        double[] doubleArray3 = descriptiveStatistics0.getValues();
        long long4 = descriptiveStatistics0.getN();
        double[] doubleArray5 = descriptiveStatistics0.getSortedValues();
        double double6 = descriptiveStatistics0.getMin();
        double double7 = descriptiveStatistics0.getSum();
        double double8 = descriptiveStatistics0.getMin();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test01865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01865");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double1 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getSkewnessImpl();
        descriptiveStatistics0.addValue((double) (short) 1);
        double double5 = descriptiveStatistics0.getStandardDeviation();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
    }

    @Test
    public void test01866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01866");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray4 = new org.apache.commons.math.util.ResizableDoubleArray((int) (byte) 100, (float) (short) 100, (float) 100, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal expansionMode setting.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01867");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        descriptiveStatistics0.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics6.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        descriptiveStatistics6.setKurtosisImpl(univariateStatistic9);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        descriptiveStatistics11.setKurtosisImpl(univariateStatistic14);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics11.getKurtosisImpl();
        descriptiveStatistics6.setMaxImpl(univariateStatistic16);
        double double18 = descriptiveStatistics6.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics6.getMinImpl();
        descriptiveStatistics0.setMinImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics0.getKurtosisImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics0.getMaxImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics0.getGeometricMeanImpl();
        double double24 = descriptiveStatistics0.getGeometricMean();
        int int25 = descriptiveStatistics0.getWindowSize();
        double double26 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics27.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics27.getKurtosisImpl();
        long long30 = descriptiveStatistics27.getN();
        double[] doubleArray31 = descriptiveStatistics27.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics27.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics27.getMinImpl();
        double double34 = descriptiveStatistics27.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics35 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str36 = descriptiveStatistics35.toString();
        double double37 = descriptiveStatistics35.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics38 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics38.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics40 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics40.getSumsqImpl();
        descriptiveStatistics38.setKurtosisImpl(univariateStatistic41);
        descriptiveStatistics35.setSkewnessImpl(univariateStatistic41);
        double double44 = descriptiveStatistics35.getStandardDeviation();
        descriptiveStatistics35.clear();
        double double46 = descriptiveStatistics35.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics35.getGeometricMeanImpl();
        descriptiveStatistics27.setGeometricMeanImpl(univariateStatistic47);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics49 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str50 = descriptiveStatistics49.toString();
        descriptiveStatistics49.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics52 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str53 = descriptiveStatistics52.toString();
        double double54 = descriptiveStatistics52.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics55 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic56 = descriptiveStatistics55.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics57 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic58 = descriptiveStatistics57.getSumsqImpl();
        descriptiveStatistics55.setKurtosisImpl(univariateStatistic58);
        descriptiveStatistics52.setSkewnessImpl(univariateStatistic58);
        double double61 = descriptiveStatistics52.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics63 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double64 = descriptiveStatistics63.getStandardDeviation();
        long long65 = descriptiveStatistics63.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic66 = descriptiveStatistics63.getMinImpl();
        descriptiveStatistics52.setVarianceImpl(univariateStatistic66);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic68 = descriptiveStatistics52.getMeanImpl();
        descriptiveStatistics49.setMeanImpl(univariateStatistic68);
        int int70 = descriptiveStatistics49.getWindowSize();
        int int71 = descriptiveStatistics49.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic72 = descriptiveStatistics49.getPercentileImpl();
        descriptiveStatistics27.setMaxImpl(univariateStatistic72);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics74 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic75 = descriptiveStatistics74.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics76 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic77 = descriptiveStatistics76.getSumsqImpl();
        descriptiveStatistics74.setKurtosisImpl(univariateStatistic77);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics79 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic80 = descriptiveStatistics79.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics81 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic82 = descriptiveStatistics81.getSumsqImpl();
        descriptiveStatistics79.setKurtosisImpl(univariateStatistic82);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic84 = descriptiveStatistics79.getKurtosisImpl();
        descriptiveStatistics74.setMaxImpl(univariateStatistic84);
        double double86 = descriptiveStatistics74.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic87 = descriptiveStatistics74.getMinImpl();
        descriptiveStatistics74.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics90 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic91 = descriptiveStatistics90.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics92 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic93 = descriptiveStatistics92.getSumsqImpl();
        descriptiveStatistics90.setKurtosisImpl(univariateStatistic93);
        descriptiveStatistics90.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic96 = descriptiveStatistics90.getMinImpl();
        descriptiveStatistics74.setGeometricMeanImpl(univariateStatistic96);
        descriptiveStatistics27.setGeometricMeanImpl(univariateStatistic96);
        descriptiveStatistics0.setMeanImpl(univariateStatistic96);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(descriptiveStatistics35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str36, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(descriptiveStatistics38);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(descriptiveStatistics40);
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertNotNull(descriptiveStatistics49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str50, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str53, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(descriptiveStatistics55);
        org.junit.Assert.assertNotNull(univariateStatistic56);
        org.junit.Assert.assertNotNull(descriptiveStatistics57);
        org.junit.Assert.assertNotNull(univariateStatistic58);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic66);
        org.junit.Assert.assertNotNull(univariateStatistic68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic72);
        org.junit.Assert.assertNotNull(descriptiveStatistics74);
        org.junit.Assert.assertNotNull(univariateStatistic75);
        org.junit.Assert.assertNotNull(descriptiveStatistics76);
        org.junit.Assert.assertNotNull(univariateStatistic77);
        org.junit.Assert.assertNotNull(descriptiveStatistics79);
        org.junit.Assert.assertNotNull(univariateStatistic80);
        org.junit.Assert.assertNotNull(descriptiveStatistics81);
        org.junit.Assert.assertNotNull(univariateStatistic82);
        org.junit.Assert.assertNotNull(univariateStatistic84);
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertNotNull(univariateStatistic87);
        org.junit.Assert.assertNotNull(descriptiveStatistics90);
        org.junit.Assert.assertNotNull(univariateStatistic91);
        org.junit.Assert.assertNotNull(descriptiveStatistics92);
        org.junit.Assert.assertNotNull(univariateStatistic93);
        org.junit.Assert.assertNotNull(univariateStatistic96);
    }

    @Test
    public void test01868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01868");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getSkewnessImpl();
        java.lang.String str5 = descriptiveStatistics1.toString();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getKurtosisImpl();
        descriptiveStatistics1.setMeanImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics1.getGeometricMeanImpl();
        double double11 = descriptiveStatistics1.getSumsq();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics1.getSumImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str14 = descriptiveStatistics13.toString();
        descriptiveStatistics13.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics13.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics13.getSumsqImpl();
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray18 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int19 = resizableDoubleArray18.start();
        resizableDoubleArray18.addElement((double) 10);
        int int22 = resizableDoubleArray18.getExpansionMode();
        resizableDoubleArray18.addElement((double) (-1L));
        double[] doubleArray25 = resizableDoubleArray18.getElements();
        double double28 = univariateStatistic17.evaluate(doubleArray25, (int) (byte) 1, 1);
        descriptiveStatistics1.setMeanImpl(univariateStatistic17);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics1.getVarianceImpl();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str5, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str14, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d);
        org.junit.Assert.assertNotNull(univariateStatistic30);
    }

    @Test
    public void test01869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01869");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double2 = descriptiveStatistics1.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics1.getGeometricMeanImpl();
        double double4 = descriptiveStatistics1.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics5.getKurtosisImpl();
        long long8 = descriptiveStatistics5.getN();
        double[] doubleArray9 = descriptiveStatistics5.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics5.getSumImpl();
        descriptiveStatistics1.setSkewnessImpl(univariateStatistic10);
        double double12 = descriptiveStatistics1.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double14 = descriptiveStatistics1.apply(univariateStatistic13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test01870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01870");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getGeometricMeanImpl();
        double double4 = descriptiveStatistics0.getMax();
        double double5 = descriptiveStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getVarianceImpl();
        double double7 = descriptiveStatistics0.getSkewness();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 1);
        double double10 = descriptiveStatistics9.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str12 = descriptiveStatistics11.toString();
        double double13 = descriptiveStatistics11.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        descriptiveStatistics14.setKurtosisImpl(univariateStatistic17);
        descriptiveStatistics11.setSkewnessImpl(univariateStatistic17);
        double double20 = descriptiveStatistics11.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        descriptiveStatistics21.setKurtosisImpl(univariateStatistic24);
        descriptiveStatistics21.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics21.getPercentileImpl();
        double double28 = descriptiveStatistics21.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics29.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics29.getKurtosisImpl();
        double[] doubleArray32 = descriptiveStatistics29.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics29.getVarianceImpl();
        double double34 = descriptiveStatistics21.apply(univariateStatistic33);
        double double35 = descriptiveStatistics11.apply(univariateStatistic33);
        descriptiveStatistics9.setKurtosisImpl(univariateStatistic33);
        descriptiveStatistics0.setMeanImpl(univariateStatistic33);
        double[] doubleArray38 = descriptiveStatistics0.getSortedValues();
        double double39 = descriptiveStatistics0.getStandardDeviation();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str12, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(descriptiveStatistics29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double39));
    }

    @Test
    public void test01871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01871");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray4 = new org.apache.commons.math.util.ResizableDoubleArray(3, (float) 'a', (float) (byte) -1, 97);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01872");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics6.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics6.getKurtosisImpl();
        long long9 = descriptiveStatistics6.getN();
        double double10 = descriptiveStatistics6.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        descriptiveStatistics11.setKurtosisImpl(univariateStatistic14);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics16.getKurtosisImpl();
        descriptiveStatistics11.setMaxImpl(univariateStatistic21);
        descriptiveStatistics6.setSumImpl(univariateStatistic21);
        descriptiveStatistics0.setSumsqImpl(univariateStatistic21);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str26 = descriptiveStatistics25.toString();
        descriptiveStatistics25.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics25.getGeometricMeanImpl();
        double double29 = descriptiveStatistics25.getMax();
        double double30 = descriptiveStatistics25.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics25.getVarianceImpl();
        descriptiveStatistics0.setMeanImpl(univariateStatistic31);
        double double33 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics0.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics37 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) 1);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics38 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics38.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics40 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics40.getSumsqImpl();
        descriptiveStatistics38.setKurtosisImpl(univariateStatistic41);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics43.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics45 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics45.getSumsqImpl();
        descriptiveStatistics43.setKurtosisImpl(univariateStatistic46);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics43.getKurtosisImpl();
        descriptiveStatistics38.setMaxImpl(univariateStatistic48);
        descriptiveStatistics37.setSkewnessImpl(univariateStatistic48);
        double double51 = descriptiveStatistics37.getMean();
        double double52 = descriptiveStatistics37.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics37.getSumsqImpl();
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray54 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int55 = resizableDoubleArray54.getExpansionMode();
        resizableDoubleArray54.clear();
        double[] doubleArray57 = resizableDoubleArray54.getElements();
        double double58 = univariateStatistic53.evaluate(doubleArray57);
        // The following exception was thrown during execution in test generation
        try {
            double double61 = univariateStatistic35.evaluate(doubleArray57, (int) (byte) -1, 35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str26, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertNotNull(descriptiveStatistics38);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(descriptiveStatistics40);
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertNotNull(descriptiveStatistics43);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(descriptiveStatistics45);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double58));
    }

    @Test
    public void test01873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01873");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str4 = descriptiveStatistics3.toString();
        double double5 = descriptiveStatistics3.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics6.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        descriptiveStatistics6.setKurtosisImpl(univariateStatistic9);
        descriptiveStatistics3.setSkewnessImpl(univariateStatistic9);
        double double12 = descriptiveStatistics3.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double15 = descriptiveStatistics14.getStandardDeviation();
        long long16 = descriptiveStatistics14.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics14.getMinImpl();
        descriptiveStatistics3.setVarianceImpl(univariateStatistic17);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics3.getMeanImpl();
        descriptiveStatistics0.setMeanImpl(univariateStatistic19);
        int int21 = descriptiveStatistics0.getWindowSize();
        int int22 = descriptiveStatistics0.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics0.getSumImpl();
        double double24 = descriptiveStatistics0.getMax();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str4, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
    }

    @Test
    public void test01874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01874");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) 10);
        resizableDoubleArray0.setElement(1, (double) (short) 0);
        resizableDoubleArray0.contract();
        java.lang.Class<?> wildcardClass8 = resizableDoubleArray0.getClass();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance((java.lang.Class) wildcardClass8);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.util.ResizableDoubleArray cannot be cast to org.apache.commons.math.stat.descriptive.DescriptiveStatistics");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test01875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01875");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        descriptiveStatistics0.setWindowSize((int) (byte) -1);
        long long3 = descriptiveStatistics0.getN();
        double double4 = descriptiveStatistics0.getMean();
        double double5 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 1);
        double double8 = descriptiveStatistics7.getMax();
        long long9 = descriptiveStatistics7.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics7.getVarianceImpl();
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic10);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics0.getMaxImpl();
        double[] doubleArray13 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double14 = univariateStatistic12.evaluate(doubleArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(univariateStatistic12);
    }

    @Test
    public void test01876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01876");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray4 = new org.apache.commons.math.util.ResizableDoubleArray((int) (short) -1, (-1.0f), 35.0f, 31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The expansion factor must be a number greater than 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01877");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double1 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str4 = descriptiveStatistics3.toString();
        descriptiveStatistics3.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics3.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray8 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int9 = resizableDoubleArray8.start();
        resizableDoubleArray8.addElement((double) 10);
        int int12 = resizableDoubleArray8.getExpansionMode();
        resizableDoubleArray8.addElement((double) (-1L));
        double[] doubleArray15 = resizableDoubleArray8.getElements();
        double double18 = univariateStatistic7.evaluate(doubleArray15, (int) (byte) 1, 1);
        double double19 = descriptiveStatistics0.apply(univariateStatistic7);
        double double20 = descriptiveStatistics0.getMean();
        java.lang.String str21 = descriptiveStatistics0.toString();
        long long22 = descriptiveStatistics0.getN();
        double double23 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics0.getKurtosisImpl();
        double double25 = descriptiveStatistics0.getStandardDeviation();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str4, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str21, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
    }

    @Test
    public void test01878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01878");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray4 = new org.apache.commons.math.util.ResizableDoubleArray((int) (byte) 100, 0.0f, 32.0f, 33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The expansion factor must be a number greater than 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01879");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray3 = new org.apache.commons.math.util.ResizableDoubleArray(1, 0.0f, (float) 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The expansion factor must be a number greater than 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01880");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        java.lang.String str2 = descriptiveStatistics0.toString();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics3.getKurtosisImpl();
        long long6 = descriptiveStatistics3.getN();
        descriptiveStatistics3.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics3.getSkewnessImpl();
        descriptiveStatistics0.setSumsqImpl(univariateStatistic9);
        double double11 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics0.getSkewnessImpl();
        double double13 = descriptiveStatistics0.getMean();
        long long14 = descriptiveStatistics0.getN();
        double double15 = descriptiveStatistics0.getMin();
        double double16 = descriptiveStatistics0.getSum();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str2, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
    }

    @Test
    public void test01881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01881");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        int int3 = resizableDoubleArray0.start();
        resizableDoubleArray0.setElement((int) (short) 10, (double) 100L);
        double[] doubleArray7 = resizableDoubleArray0.getValues();
        double double9 = resizableDoubleArray0.addElementRolling(0.0d);
        double double11 = resizableDoubleArray0.getElement((int) (byte) 10);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    }

    @Test
    public void test01882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01882");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double double4 = descriptiveStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        descriptiveStatistics10.setKurtosisImpl(univariateStatistic13);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics10.getKurtosisImpl();
        descriptiveStatistics5.setMaxImpl(univariateStatistic15);
        descriptiveStatistics0.setSumImpl(univariateStatistic15);
        descriptiveStatistics0.setWindowSize(100);
        // The following exception was thrown during execution in test generation
        try {
            double double21 = descriptiveStatistics0.getElement((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Elements cannot be retrieved from a negative array index");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(univariateStatistic15);
    }

    @Test
    public void test01883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01883");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics3.getKurtosisImpl();
        double double9 = descriptiveStatistics0.apply(univariateStatistic8);
        double double10 = descriptiveStatistics0.getSumsq();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        descriptiveStatistics12.setKurtosisImpl(univariateStatistic15);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics12.getKurtosisImpl();
        double[] doubleArray21 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double22 = univariateStatistic17.evaluate(doubleArray21);
        descriptiveStatistics11.setMaxImpl(univariateStatistic17);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics24 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics24.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics24.getKurtosisImpl();
        long long27 = descriptiveStatistics24.getN();
        double double28 = descriptiveStatistics24.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics29.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics31.getSumsqImpl();
        descriptiveStatistics29.setKurtosisImpl(univariateStatistic32);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics34 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics34.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics36.getSumsqImpl();
        descriptiveStatistics34.setKurtosisImpl(univariateStatistic37);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics34.getKurtosisImpl();
        descriptiveStatistics29.setMaxImpl(univariateStatistic39);
        descriptiveStatistics24.setSumImpl(univariateStatistic39);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics43.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics45 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics45.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics47 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics47.getSumsqImpl();
        descriptiveStatistics45.setKurtosisImpl(univariateStatistic48);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics50 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics50.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics52 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics52.getSumsqImpl();
        descriptiveStatistics50.setKurtosisImpl(univariateStatistic53);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics50.getKurtosisImpl();
        descriptiveStatistics45.setMaxImpl(univariateStatistic55);
        double double57 = descriptiveStatistics45.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic58 = descriptiveStatistics45.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic59 = descriptiveStatistics45.getVarianceImpl();
        descriptiveStatistics43.setMinImpl(univariateStatistic59);
        descriptiveStatistics24.setMeanImpl(univariateStatistic59);
        descriptiveStatistics11.setSumImpl(univariateStatistic59);
        descriptiveStatistics0.setVarianceImpl(univariateStatistic59);
        double double64 = descriptiveStatistics0.getStandardDeviation();
        double double65 = descriptiveStatistics0.getSumsq();
        java.lang.Class<?> wildcardClass66 = descriptiveStatistics0.getClass();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics67 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance((java.lang.Class) wildcardClass66);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics68 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance((java.lang.Class) wildcardClass66);
        descriptiveStatistics68.clear();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2.0d + "'", double22 == 2.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(descriptiveStatistics29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(descriptiveStatistics31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(descriptiveStatistics34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(descriptiveStatistics45);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertNotNull(descriptiveStatistics47);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertNotNull(descriptiveStatistics50);
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertNotNull(descriptiveStatistics52);
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(univariateStatistic58);
        org.junit.Assert.assertNotNull(univariateStatistic59);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(descriptiveStatistics67);
        org.junit.Assert.assertNotNull(descriptiveStatistics68);
    }

    @Test
    public void test01884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01884");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        double[] doubleArray1 = resizableDoubleArray0.getElements();
        double[] doubleArray2 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.addElement((double) 32);
        int int6 = resizableDoubleArray0.getExpansionMode();
        double[] doubleArray7 = resizableDoubleArray0.getValues();
        double[] doubleArray8 = resizableDoubleArray0.getValues();
        float float9 = resizableDoubleArray0.getContractionCriteria();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[32.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[32.0, 0.0]");
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 2.5f + "'", float9 == 2.5f);
    }

    @Test
    public void test01885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01885");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = null;
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic9);
        double double11 = descriptiveStatistics0.getSumsq();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics0.getSumImpl();
        double double13 = descriptiveStatistics0.getSkewness();
        double double14 = descriptiveStatistics0.getVariance();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test01886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01886");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        double[] doubleArray3 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.addElement((double) 0);
        int int7 = resizableDoubleArray0.start();
        double double9 = resizableDoubleArray0.addElementRolling((double) 100L);
        float float10 = resizableDoubleArray0.getContractionCriteria();
        int int11 = resizableDoubleArray0.start();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 2.5f + "'", float10 == 2.5f);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test01887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01887");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        double[] doubleArray3 = resizableDoubleArray0.getElements();
        double[] doubleArray4 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.setNumElements((int) (byte) 100);
        resizableDoubleArray0.discardFrontElements((int) (byte) 100);
        double[] doubleArray9 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.clear();
        int int11 = resizableDoubleArray0.getNumElements();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = resizableDoubleArray0.getElement((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Elements cannot be retrieved from a negative array index");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test01888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01888");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        double[] doubleArray3 = descriptiveStatistics0.getValues();
        double double4 = descriptiveStatistics0.getVariance();
        double double5 = descriptiveStatistics0.getMax();
        double double6 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str8 = descriptiveStatistics7.toString();
        double double9 = descriptiveStatistics7.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        descriptiveStatistics10.setKurtosisImpl(univariateStatistic13);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics10.getKurtosisImpl();
        double double16 = descriptiveStatistics7.apply(univariateStatistic15);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str18 = descriptiveStatistics17.toString();
        descriptiveStatistics17.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics17.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics17.getSumsqImpl();
        descriptiveStatistics7.setMeanImpl(univariateStatistic21);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics7.getSkewnessImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic23);
        double double25 = descriptiveStatistics0.getVariance();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str8, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str18, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
    }

    @Test
    public void test01889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01889");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.setExpansionMode((int) (short) 1);
        int int4 = resizableDoubleArray0.getNumElements();
        float float5 = resizableDoubleArray0.getContractionCriteria();
        double double7 = resizableDoubleArray0.addElementRolling((-1.0d));
        double double9 = resizableDoubleArray0.addElementRolling((double) 2);
        float float10 = resizableDoubleArray0.getContractionCriteria();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.discardFrontElements((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot discard more elements than arecontained in this array.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 2.5f + "'", float5 == 2.5f);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 2.5f + "'", float10 == 2.5f);
    }

    @Test
    public void test01890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01890");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        double double1 = descriptiveStatistics0.getSum();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics3.getSkewnessImpl();
        descriptiveStatistics0.setMinImpl(univariateStatistic5);
        double double7 = descriptiveStatistics0.getSum();
        double[] doubleArray8 = descriptiveStatistics0.getValues();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
    }

    @Test
    public void test01891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01891");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray3 = new org.apache.commons.math.util.ResizableDoubleArray(0, 2.5f, (float) 101);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The initial capacity supplied: 0must be a positive integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01892");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement(0.0d);
        int int4 = resizableDoubleArray0.getNumElements();
        int int5 = resizableDoubleArray0.getExpansionMode();
        int int6 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) 2.5f);
        int int9 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.setContractionCriteria((float) 12);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test01893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01893");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double1 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str4 = descriptiveStatistics3.toString();
        descriptiveStatistics3.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics3.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray8 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int9 = resizableDoubleArray8.start();
        resizableDoubleArray8.addElement((double) 10);
        int int12 = resizableDoubleArray8.getExpansionMode();
        resizableDoubleArray8.addElement((double) (-1L));
        double[] doubleArray15 = resizableDoubleArray8.getElements();
        double double18 = univariateStatistic7.evaluate(doubleArray15, (int) (byte) 1, 1);
        double double19 = descriptiveStatistics0.apply(univariateStatistic7);
        double double20 = descriptiveStatistics0.getMean();
        java.lang.String str21 = descriptiveStatistics0.toString();
        double[] doubleArray22 = descriptiveStatistics0.getSortedValues();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str4, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str21, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
    }

    @Test
    public void test01894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01894");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double double4 = descriptiveStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        descriptiveStatistics10.setKurtosisImpl(univariateStatistic13);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics10.getKurtosisImpl();
        descriptiveStatistics5.setMaxImpl(univariateStatistic15);
        descriptiveStatistics0.setSumImpl(univariateStatistic15);
        descriptiveStatistics0.setWindowSize(100);
        double double20 = descriptiveStatistics0.getKurtosis();
        long long21 = descriptiveStatistics0.getN();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
    }

    @Test
    public void test01895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01895");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getGeometricMeanImpl();
        descriptiveStatistics0.clear();
        double double7 = descriptiveStatistics0.getVariance();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test01896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01896");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) (byte) 0);
        int int4 = resizableDoubleArray0.getExpansionMode();
        int int5 = resizableDoubleArray0.start();
        resizableDoubleArray0.clear();
        // The following exception was thrown during execution in test generation
        try {
            double double8 = resizableDoubleArray0.getElement(53);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 53 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test01897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01897");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.clear();
        double[] doubleArray3 = resizableDoubleArray0.getElements();
        double[] doubleArray4 = resizableDoubleArray0.getElements();
        double[] doubleArray5 = resizableDoubleArray0.getElements();
        double[] doubleArray6 = resizableDoubleArray0.getValues();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.discardFrontElements(53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot discard more elements than arecontained in this array.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test01898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01898");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        double double5 = resizableDoubleArray0.addElementRolling((double) 0.0f);
        resizableDoubleArray0.clear();
        resizableDoubleArray0.setNumElements((int) '4');
        float float9 = resizableDoubleArray0.getExpansionFactor();
        int int10 = resizableDoubleArray0.getExpansionMode();
        int int11 = resizableDoubleArray0.start();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setExpansionFactor(35.5f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 2.0f + "'", float9 == 2.0f);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test01899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01899");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        double[] doubleArray3 = resizableDoubleArray0.getValues();
        int int4 = resizableDoubleArray0.start();
        resizableDoubleArray0.clear();
        double double7 = resizableDoubleArray0.addElementRolling(0.0d);
        double double9 = resizableDoubleArray0.addElementRolling((double) (short) 100);
        resizableDoubleArray0.setNumElements((int) (short) 0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    }

    @Test
    public void test01900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01900");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray1 = new org.apache.commons.math.util.ResizableDoubleArray((int) (byte) 10);
        float float2 = resizableDoubleArray1.getExpansionFactor();
        float float3 = resizableDoubleArray1.getExpansionFactor();
        org.junit.Assert.assertTrue("'" + float2 + "' != '" + 2.0f + "'", float2 == 2.0f);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 2.0f + "'", float3 == 2.0f);
    }

    @Test
    public void test01901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01901");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        double double3 = descriptiveStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics4 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double5 = descriptiveStatistics4.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics4.getSumImpl();
        descriptiveStatistics0.setMinImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = null;
        descriptiveStatistics0.setSumImpl(univariateStatistic8);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(descriptiveStatistics4);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(univariateStatistic6);
    }

    @Test
    public void test01902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01902");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic6);
        double double9 = descriptiveStatistics0.getStandardDeviation();
        descriptiveStatistics0.setWindowSize((int) (short) 1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics0.getKurtosisImpl();
        double double14 = descriptiveStatistics0.getPercentile((double) 10);
        double double15 = descriptiveStatistics0.getKurtosis();
        int int16 = descriptiveStatistics0.getWindowSize();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test01903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01903");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray4 = new org.apache.commons.math.util.ResizableDoubleArray(91, 52.5f, (float) 1, 12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01904");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        double[] doubleArray3 = descriptiveStatistics0.getValues();
        double double4 = descriptiveStatistics0.getVariance();
        double double5 = descriptiveStatistics0.getMax();
        double double6 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) 10);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double10 = descriptiveStatistics9.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics9.getSkewnessImpl();
        descriptiveStatistics8.setMaxImpl(univariateStatistic11);
        descriptiveStatistics0.setMeanImpl(univariateStatistic11);
        double double14 = descriptiveStatistics0.getMean();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test01905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01905");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray2 = new org.apache.commons.math.util.ResizableDoubleArray((int) (byte) 100, 1.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The expansion factor must be a number greater than 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01906");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics0.getSumsqImpl();
        double double8 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics0.getSumsqImpl();
        double[] doubleArray10 = descriptiveStatistics0.getSortedValues();
        double double11 = descriptiveStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics12.getKurtosisImpl();
        long long15 = descriptiveStatistics12.getN();
        double[] doubleArray16 = descriptiveStatistics12.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics12.getKurtosisImpl();
        descriptiveStatistics0.setVarianceImpl(univariateStatistic17);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double22 = descriptiveStatistics21.getStandardDeviation();
        long long23 = descriptiveStatistics21.getN();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double26 = descriptiveStatistics25.getStandardDeviation();
        long long27 = descriptiveStatistics25.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics25.getSkewnessImpl();
        java.lang.String str29 = descriptiveStatistics25.toString();
        double double30 = descriptiveStatistics25.getVariance();
        descriptiveStatistics25.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics33 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics33.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics35 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics35.getSumsqImpl();
        descriptiveStatistics33.setKurtosisImpl(univariateStatistic36);
        descriptiveStatistics25.setSkewnessImpl(univariateStatistic36);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics25.getPercentileImpl();
        descriptiveStatistics21.setMinImpl(univariateStatistic39);
        long long41 = descriptiveStatistics21.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic43 = descriptiveStatistics21.getSkewnessImpl();
        descriptiveStatistics0.setMeanImpl(univariateStatistic43);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str29, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(descriptiveStatistics33);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(descriptiveStatistics35);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(univariateStatistic43);
    }

    @Test
    public void test01907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01907");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.clear();
        int int3 = resizableDoubleArray0.getNumElements();
        int int4 = resizableDoubleArray0.getNumElements();
        double double6 = resizableDoubleArray0.addElementRolling(961.0d);
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setExpansionMode(2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal expansionMode setting.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    }

    @Test
    public void test01908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01908");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) 10);
        double[] doubleArray4 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.clear();
        double double7 = resizableDoubleArray0.addElementRolling((double) 2.0f);
        resizableDoubleArray0.clear();
        resizableDoubleArray0.setElement(103, 4.5d);
        resizableDoubleArray0.addElement((double) (-1L));
        resizableDoubleArray0.setContractionCriteria((float) 35);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    }

    @Test
    public void test01909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01909");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) 10);
        int int4 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) (-1L));
        int int7 = resizableDoubleArray0.start();
        float float8 = resizableDoubleArray0.getExpansionFactor();
        int int9 = resizableDoubleArray0.getExpansionMode();
        int int10 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement(625.0d);
        resizableDoubleArray0.setNumElements((int) (short) 1);
        int int15 = resizableDoubleArray0.getExpansionMode();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 2.0f + "'", float8 == 2.0f);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test01910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01910");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray3 = new org.apache.commons.math.util.ResizableDoubleArray(35, (float) 97, 10.5f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01911");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        double[] doubleArray3 = resizableDoubleArray0.getElements();
        double[] doubleArray4 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.setNumElements((int) (byte) 100);
        resizableDoubleArray0.discardFrontElements((int) (byte) 100);
        double[] doubleArray9 = resizableDoubleArray0.getValues();
        float float10 = resizableDoubleArray0.getExpansionFactor();
        resizableDoubleArray0.setContractionCriteria((float) 100L);
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setContractionCriteria((float) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 2.0f + "'", float10 == 2.0f);
    }

    @Test
    public void test01912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01912");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic6);
        double double9 = descriptiveStatistics0.getStandardDeviation();
        descriptiveStatistics0.clear();
        double double11 = descriptiveStatistics0.getSum();
        double double12 = descriptiveStatistics0.getMax();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test01913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01913");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double6 = descriptiveStatistics5.getStandardDeviation();
        long long7 = descriptiveStatistics5.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics5.getSkewnessImpl();
        java.lang.String str9 = descriptiveStatistics5.toString();
        double double10 = descriptiveStatistics5.getVariance();
        descriptiveStatistics5.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        descriptiveStatistics13.setKurtosisImpl(univariateStatistic16);
        descriptiveStatistics5.setSkewnessImpl(univariateStatistic16);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics5.getPercentileImpl();
        descriptiveStatistics1.setMinImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics1.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics1.getSumImpl();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str9, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
    }

    @Test
    public void test01914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01914");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        double[] doubleArray3 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics0.getVarianceImpl();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getGeometricMeanImpl();
        double[] doubleArray7 = descriptiveStatistics0.getValues();
        // The following exception was thrown during execution in test generation
        try {
            double double9 = descriptiveStatistics0.getElement(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 10 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
    }

    @Test
    public void test01915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01915");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double double4 = descriptiveStatistics0.getMin();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double8 = descriptiveStatistics7.getStandardDeviation();
        long long9 = descriptiveStatistics7.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics7.getSkewnessImpl();
        java.lang.String str11 = descriptiveStatistics7.toString();
        double double12 = descriptiveStatistics7.getVariance();
        double double14 = descriptiveStatistics7.getPercentile(1.0d);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str16 = descriptiveStatistics15.toString();
        descriptiveStatistics15.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics15.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics15.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics20.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics20.getKurtosisImpl();
        long long23 = descriptiveStatistics20.getN();
        double double24 = descriptiveStatistics20.getMax();
        double double25 = descriptiveStatistics20.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double27 = descriptiveStatistics26.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics26.getMinImpl();
        descriptiveStatistics20.setSumImpl(univariateStatistic28);
        descriptiveStatistics15.setSumImpl(univariateStatistic28);
        double double31 = descriptiveStatistics15.getVariance();
        double double32 = descriptiveStatistics15.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics33 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics33.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics33.getKurtosisImpl();
        long long36 = descriptiveStatistics33.getN();
        double[] doubleArray37 = descriptiveStatistics33.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics33.getSumImpl();
        double double39 = descriptiveStatistics33.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics33.getSumImpl();
        descriptiveStatistics15.setKurtosisImpl(univariateStatistic40);
        double[] doubleArray42 = descriptiveStatistics15.getValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics43.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics43.getKurtosisImpl();
        long long46 = descriptiveStatistics43.getN();
        double[] doubleArray47 = descriptiveStatistics43.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics43.getSumImpl();
        descriptiveStatistics43.addValue((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = null;
        descriptiveStatistics43.setSkewnessImpl(univariateStatistic51);
        double[] doubleArray53 = descriptiveStatistics43.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic54 = descriptiveStatistics43.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics43.getVarianceImpl();
        descriptiveStatistics15.setGeometricMeanImpl(univariateStatistic55);
        descriptiveStatistics7.setMaxImpl(univariateStatistic55);
        double double58 = descriptiveStatistics0.apply(univariateStatistic55);
        double[] doubleArray59 = descriptiveStatistics0.getValues();
        double double60 = descriptiveStatistics0.getMax();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str11, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str16, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(descriptiveStatistics20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(descriptiveStatistics33);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]");
        org.junit.Assert.assertNotNull(descriptiveStatistics43);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0]");
        org.junit.Assert.assertNotNull(univariateStatistic54);
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double60));
    }

    @Test
    public void test01916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01916");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray1 = new org.apache.commons.math.util.ResizableDoubleArray(2);
        double double3 = resizableDoubleArray1.addElementRolling(0.0d);
        double[] doubleArray4 = resizableDoubleArray1.getElements();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
    }

    @Test
    public void test01917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01917");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics3.getKurtosisImpl();
        double double9 = descriptiveStatistics0.apply(univariateStatistic8);
        double double10 = descriptiveStatistics0.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics0.getSumImpl();
        double double12 = descriptiveStatistics0.getMin();
        double[] doubleArray13 = descriptiveStatistics0.getSortedValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        descriptiveStatistics14.setKurtosisImpl(univariateStatistic17);
        descriptiveStatistics14.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics14.getPercentileImpl();
        double double21 = descriptiveStatistics14.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics22.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics22.getKurtosisImpl();
        double[] doubleArray25 = descriptiveStatistics22.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics22.getVarianceImpl();
        double double27 = descriptiveStatistics14.apply(univariateStatistic26);
        descriptiveStatistics0.setSumsqImpl(univariateStatistic26);
        double double29 = descriptiveStatistics0.getKurtosis();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(descriptiveStatistics22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
    }

    @Test
    public void test01918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01918");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        descriptiveStatistics1.setWindowSize((int) ' ');
        java.lang.String str4 = descriptiveStatistics1.toString();
        double double5 = descriptiveStatistics1.getMax();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str4, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test01919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01919");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 1);
        double double2 = descriptiveStatistics1.getMax();
        double double3 = descriptiveStatistics1.getSumsq();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getMaxImpl();
        // The following exception was thrown during execution in test generation
        try {
            double double6 = descriptiveStatistics1.getElement(97);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 97 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(univariateStatistic4);
    }

    @Test
    public void test01920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01920");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        double[] doubleArray3 = resizableDoubleArray0.getElements();
        int int4 = resizableDoubleArray0.getNumElements();
        float float5 = resizableDoubleArray0.getExpansionFactor();
        double double7 = resizableDoubleArray0.addElementRolling((double) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setExpansionFactor((float) 97);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 2.0f + "'", float5 == 2.0f);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    }

    @Test
    public void test01921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01921");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        double[] doubleArray3 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics4 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics4.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics4.getKurtosisImpl();
        long long7 = descriptiveStatistics4.getN();
        double[] doubleArray8 = descriptiveStatistics4.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics4.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics4.getMinImpl();
        double double11 = descriptiveStatistics4.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str13 = descriptiveStatistics12.toString();
        double double14 = descriptiveStatistics12.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics17.getSumsqImpl();
        descriptiveStatistics15.setKurtosisImpl(univariateStatistic18);
        descriptiveStatistics12.setSkewnessImpl(univariateStatistic18);
        double double21 = descriptiveStatistics12.getStandardDeviation();
        descriptiveStatistics12.clear();
        double double23 = descriptiveStatistics12.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics12.getGeometricMeanImpl();
        descriptiveStatistics4.setGeometricMeanImpl(univariateStatistic24);
        descriptiveStatistics0.setSumsqImpl(univariateStatistic24);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics0.getMaxImpl();
        double double30 = descriptiveStatistics0.getVariance();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(descriptiveStatistics4);
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str13, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
    }

    @Test
    public void test01922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01922");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double double4 = descriptiveStatistics0.getMax();
        double double5 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double7 = descriptiveStatistics6.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics6.getMinImpl();
        descriptiveStatistics0.setSumImpl(univariateStatistic8);
        descriptiveStatistics0.addValue((double) 0);
        double double12 = descriptiveStatistics0.getKurtosis();
        double double13 = descriptiveStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics0.getPercentileImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(univariateStatistic14);
    }

    @Test
    public void test01923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01923");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray4 = new org.apache.commons.math.util.ResizableDoubleArray(53, (float) 97, 10.0f, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01924");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.setElement(0, (double) 0.0f);
        resizableDoubleArray0.clear();
        int int6 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement(961.0d);
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setExpansionMode(101);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal expansionMode setting.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test01925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01925");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray3 = new org.apache.commons.math.util.ResizableDoubleArray(0, 10.5f, 0.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01926");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics0.getSumsqImpl();
        double double8 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics0.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str11 = descriptiveStatistics10.toString();
        descriptiveStatistics10.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics10.getGeometricMeanImpl();
        double double14 = descriptiveStatistics10.getMax();
        double[] doubleArray15 = descriptiveStatistics10.getSortedValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics10.getVarianceImpl();
        descriptiveStatistics0.setSumImpl(univariateStatistic16);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str11, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic16);
    }

    @Test
    public void test01927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01927");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics5.getKurtosisImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic10);
        double double12 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics0.getMinImpl();
        double double14 = descriptiveStatistics0.getMin();
        long long15 = descriptiveStatistics0.getN();
        double[] doubleArray16 = descriptiveStatistics0.getValues();
        double double18 = descriptiveStatistics0.getPercentile((double) 32);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics0.getSumsqImpl();
        // The following exception was thrown during execution in test generation
        try {
            double double21 = descriptiveStatistics0.getPercentile(10000.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal quantile value: 10000.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(univariateStatistic19);
    }

    @Test
    public void test01928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01928");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        int int3 = resizableDoubleArray0.start();
        resizableDoubleArray0.setElement((int) (short) 10, (double) 100L);
        double[] doubleArray7 = resizableDoubleArray0.getValues();
        double double9 = resizableDoubleArray0.addElementRolling(0.0d);
        resizableDoubleArray0.discardFrontElements((int) (short) 0);
        float float12 = resizableDoubleArray0.getExpansionFactor();
        double[] doubleArray13 = resizableDoubleArray0.getElements();
        float float14 = resizableDoubleArray0.getContractionCriteria();
        resizableDoubleArray0.clear();
        double double17 = resizableDoubleArray0.addElementRolling(100.0d);
        int int18 = resizableDoubleArray0.getExpansionMode();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.discardFrontElements(3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot discard more elements than arecontained in this array.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + float12 + "' != '" + 2.0f + "'", float12 == 2.0f);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 2.5f + "'", float14 == 2.5f);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test01929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01929");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray4 = new org.apache.commons.math.util.ResizableDoubleArray(3, 0.0f, (float) 35, 12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The expansion factor must be a number greater than 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01930");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.clear();
        int int3 = resizableDoubleArray0.getNumElements();
        int int4 = resizableDoubleArray0.getNumElements();
        int int5 = resizableDoubleArray0.start();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setExpansionMode(12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal expansionMode setting.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test01931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01931");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray4 = new org.apache.commons.math.util.ResizableDoubleArray(31, (-1.0f), 0.0f, 97);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The expansion factor must be a number greater than 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01932");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.setElement(0, (double) 0.0f);
        int int5 = resizableDoubleArray0.getNumElements();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setExpansionFactor((float) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test01933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01933");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics1.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        descriptiveStatistics8.setKurtosisImpl(univariateStatistic11);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics8.getKurtosisImpl();
        descriptiveStatistics3.setMaxImpl(univariateStatistic13);
        double double15 = descriptiveStatistics3.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics3.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics3.getVarianceImpl();
        descriptiveStatistics1.setMinImpl(univariateStatistic17);
        double double19 = descriptiveStatistics1.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics1.getSumImpl();
        descriptiveStatistics1.clear();
        double double22 = descriptiveStatistics1.getVariance();
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
    }

    @Test
    public void test01934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01934");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics3.getKurtosisImpl();
        double double9 = descriptiveStatistics0.apply(univariateStatistic8);
        double double10 = descriptiveStatistics0.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics0.getSumImpl();
        double double12 = descriptiveStatistics0.getMin();
        double[] doubleArray13 = descriptiveStatistics0.getSortedValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        descriptiveStatistics14.setKurtosisImpl(univariateStatistic17);
        descriptiveStatistics14.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics14.getPercentileImpl();
        double double21 = descriptiveStatistics14.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics22.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics22.getKurtosisImpl();
        double[] doubleArray25 = descriptiveStatistics22.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics22.getVarianceImpl();
        double double27 = descriptiveStatistics14.apply(univariateStatistic26);
        descriptiveStatistics0.setSumsqImpl(univariateStatistic26);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double31 = descriptiveStatistics30.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics30.getGeometricMeanImpl();
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic32);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics35 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double36 = descriptiveStatistics35.getStandardDeviation();
        long long37 = descriptiveStatistics35.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics35.getSkewnessImpl();
        double double40 = descriptiveStatistics35.getPercentile((double) 100L);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics35.getMinImpl();
        descriptiveStatistics0.setVarianceImpl(univariateStatistic41);
        double double43 = descriptiveStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics44 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics44.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics46 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics46.getSumsqImpl();
        descriptiveStatistics44.setKurtosisImpl(univariateStatistic47);
        descriptiveStatistics44.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic50 = descriptiveStatistics44.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics51 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics51.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics53 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic54 = descriptiveStatistics53.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics53.getKurtosisImpl();
        long long56 = descriptiveStatistics53.getN();
        double[] doubleArray57 = descriptiveStatistics53.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic58 = descriptiveStatistics53.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic59 = descriptiveStatistics53.getMinImpl();
        double double60 = descriptiveStatistics51.apply(univariateStatistic59);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics61 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic62 = descriptiveStatistics61.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics63 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic64 = descriptiveStatistics63.getSumsqImpl();
        descriptiveStatistics61.setKurtosisImpl(univariateStatistic64);
        descriptiveStatistics61.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic67 = descriptiveStatistics61.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics68 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic69 = descriptiveStatistics68.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic70 = descriptiveStatistics68.getKurtosisImpl();
        long long71 = descriptiveStatistics68.getN();
        descriptiveStatistics68.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic74 = descriptiveStatistics68.getSkewnessImpl();
        descriptiveStatistics61.setSumsqImpl(univariateStatistic74);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic76 = descriptiveStatistics61.getVarianceImpl();
        descriptiveStatistics51.setVarianceImpl(univariateStatistic76);
        double double78 = descriptiveStatistics44.apply(univariateStatistic76);
        double double79 = descriptiveStatistics44.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic80 = descriptiveStatistics44.getSumImpl();
        descriptiveStatistics0.setMeanImpl(univariateStatistic80);
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray83 = new org.apache.commons.math.util.ResizableDoubleArray((int) (byte) 10);
        double[] doubleArray84 = resizableDoubleArray83.getValues();
        double double85 = univariateStatistic80.evaluate(doubleArray84);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(descriptiveStatistics22);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(descriptiveStatistics44);
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertNotNull(descriptiveStatistics46);
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertNotNull(univariateStatistic50);
        org.junit.Assert.assertNotNull(descriptiveStatistics51);
        org.junit.Assert.assertNotNull(univariateStatistic52);
        org.junit.Assert.assertNotNull(descriptiveStatistics53);
        org.junit.Assert.assertNotNull(univariateStatistic54);
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic58);
        org.junit.Assert.assertNotNull(univariateStatistic59);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(descriptiveStatistics61);
        org.junit.Assert.assertNotNull(univariateStatistic62);
        org.junit.Assert.assertNotNull(descriptiveStatistics63);
        org.junit.Assert.assertNotNull(univariateStatistic64);
        org.junit.Assert.assertNotNull(univariateStatistic67);
        org.junit.Assert.assertNotNull(descriptiveStatistics68);
        org.junit.Assert.assertNotNull(univariateStatistic69);
        org.junit.Assert.assertNotNull(univariateStatistic70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic74);
        org.junit.Assert.assertNotNull(univariateStatistic76);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertNotNull(univariateStatistic80);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
    }

    @Test
    public void test01935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01935");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) 10);
        double double2 = descriptiveStatistics1.getMin();
        descriptiveStatistics1.addValue((double) (byte) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics1.getSkewnessImpl();
        double double6 = descriptiveStatistics1.getMax();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    }

    @Test
    public void test01936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01936");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray2 = new org.apache.commons.math.util.ResizableDoubleArray(11, 2.0f);
        int int3 = resizableDoubleArray2.getNumElements();
        // The following exception was thrown during execution in test generation
        try {
            double double5 = resizableDoubleArray2.getElement(11);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 11 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test01937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01937");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) 10);
        double double2 = descriptiveStatistics1.getMin();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics4 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double5 = descriptiveStatistics4.getStandardDeviation();
        long long6 = descriptiveStatistics4.getN();
        double double7 = descriptiveStatistics4.getMin();
        double double8 = descriptiveStatistics4.getMax();
        double double9 = descriptiveStatistics4.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double12 = descriptiveStatistics11.getStandardDeviation();
        long long13 = descriptiveStatistics11.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics11.getSkewnessImpl();
        java.lang.String str15 = descriptiveStatistics11.toString();
        double double16 = descriptiveStatistics11.getVariance();
        descriptiveStatistics11.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        descriptiveStatistics19.setKurtosisImpl(univariateStatistic22);
        descriptiveStatistics11.setSkewnessImpl(univariateStatistic22);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics25.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics27.getSumsqImpl();
        descriptiveStatistics25.setKurtosisImpl(univariateStatistic28);
        descriptiveStatistics25.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics25.getSkewnessImpl();
        descriptiveStatistics11.setVarianceImpl(univariateStatistic31);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics11.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics11.getSkewnessImpl();
        descriptiveStatistics4.setKurtosisImpl(univariateStatistic34);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics4.getVarianceImpl();
        double double37 = descriptiveStatistics4.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics38 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str39 = descriptiveStatistics38.toString();
        double double40 = descriptiveStatistics38.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics41.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics43.getSumsqImpl();
        descriptiveStatistics41.setKurtosisImpl(univariateStatistic44);
        descriptiveStatistics38.setSkewnessImpl(univariateStatistic44);
        double double47 = descriptiveStatistics38.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics48 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics48.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics50 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics50.getSumsqImpl();
        descriptiveStatistics48.setKurtosisImpl(univariateStatistic51);
        descriptiveStatistics48.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic54 = descriptiveStatistics48.getPercentileImpl();
        double double55 = descriptiveStatistics48.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics56 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics56.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic58 = descriptiveStatistics56.getKurtosisImpl();
        double[] doubleArray59 = descriptiveStatistics56.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic60 = descriptiveStatistics56.getVarianceImpl();
        double double61 = descriptiveStatistics48.apply(univariateStatistic60);
        double double62 = descriptiveStatistics38.apply(univariateStatistic60);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic63 = descriptiveStatistics38.getVarianceImpl();
        double double64 = descriptiveStatistics38.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics65 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic66 = descriptiveStatistics65.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic67 = descriptiveStatistics65.getKurtosisImpl();
        long long68 = descriptiveStatistics65.getN();
        descriptiveStatistics65.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic71 = descriptiveStatistics65.getVarianceImpl();
        int int72 = descriptiveStatistics65.getWindowSize();
        double double73 = descriptiveStatistics65.getMin();
        double[] doubleArray74 = descriptiveStatistics65.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic75 = descriptiveStatistics65.getSumImpl();
        descriptiveStatistics38.setMaxImpl(univariateStatistic75);
        double double77 = descriptiveStatistics4.apply(univariateStatistic75);
        descriptiveStatistics1.setVarianceImpl(univariateStatistic75);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str15, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(descriptiveStatistics38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str39, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(descriptiveStatistics41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(descriptiveStatistics43);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(descriptiveStatistics48);
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertNotNull(descriptiveStatistics50);
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertNotNull(univariateStatistic54);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(descriptiveStatistics56);
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertNotNull(univariateStatistic58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic60);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(univariateStatistic63);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertNotNull(descriptiveStatistics65);
        org.junit.Assert.assertNotNull(univariateStatistic66);
        org.junit.Assert.assertNotNull(univariateStatistic67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.0d + "'", double73 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.0]");
        org.junit.Assert.assertNotNull(univariateStatistic75);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
    }

    @Test
    public void test01938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01938");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getKurtosisImpl();
        double double6 = descriptiveStatistics0.getStandardDeviation();
        double double7 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics0.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double11 = descriptiveStatistics10.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics10.getGeometricMeanImpl();
        double double13 = descriptiveStatistics10.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics14.getKurtosisImpl();
        double[] doubleArray17 = descriptiveStatistics14.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics14.getVarianceImpl();
        descriptiveStatistics10.setSumsqImpl(univariateStatistic18);
        double double20 = descriptiveStatistics0.apply(univariateStatistic18);
        long long21 = descriptiveStatistics0.getN();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics22 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics25.getSumsqImpl();
        descriptiveStatistics23.setKurtosisImpl(univariateStatistic26);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics23.getKurtosisImpl();
        double[] doubleArray32 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double33 = univariateStatistic28.evaluate(doubleArray32);
        descriptiveStatistics22.setMaxImpl(univariateStatistic28);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        descriptiveStatistics36.setWindowSize((int) ' ');
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics39 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics39.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics41.getSumsqImpl();
        descriptiveStatistics39.setKurtosisImpl(univariateStatistic42);
        descriptiveStatistics39.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics39.getSkewnessImpl();
        descriptiveStatistics36.setSumsqImpl(univariateStatistic45);
        descriptiveStatistics22.setMeanImpl(univariateStatistic45);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics49 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double50 = descriptiveStatistics49.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics49.getGeometricMeanImpl();
        descriptiveStatistics22.setMinImpl(univariateStatistic51);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic51);
        java.lang.Class<?> wildcardClass54 = descriptiveStatistics0.getClass();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics22);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 2.0d + "'", double33 == 2.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics39);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertNotNull(descriptiveStatistics41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test01939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01939");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics1.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        descriptiveStatistics8.setKurtosisImpl(univariateStatistic11);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics8.getKurtosisImpl();
        descriptiveStatistics3.setMaxImpl(univariateStatistic13);
        double double15 = descriptiveStatistics3.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics3.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics3.getVarianceImpl();
        descriptiveStatistics1.setMinImpl(univariateStatistic17);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics1.getMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double22 = descriptiveStatistics21.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics21.getGeometricMeanImpl();
        double double24 = descriptiveStatistics21.getMean();
        double double25 = descriptiveStatistics21.getMean();
        double[] doubleArray26 = descriptiveStatistics21.getSortedValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics21.getPercentileImpl();
        descriptiveStatistics1.setSkewnessImpl(univariateStatistic27);
        long long29 = descriptiveStatistics1.getN();
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
    }

    @Test
    public void test01940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01940");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str3 = descriptiveStatistics2.toString();
        descriptiveStatistics2.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics2.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics2.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics7.getKurtosisImpl();
        long long10 = descriptiveStatistics7.getN();
        double double11 = descriptiveStatistics7.getMax();
        double double12 = descriptiveStatistics7.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double14 = descriptiveStatistics13.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics13.getMinImpl();
        descriptiveStatistics7.setSumImpl(univariateStatistic15);
        descriptiveStatistics2.setSumImpl(univariateStatistic15);
        double double18 = descriptiveStatistics2.getMin();
        java.lang.String str19 = descriptiveStatistics2.toString();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        descriptiveStatistics21.setKurtosisImpl(univariateStatistic24);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics21.getKurtosisImpl();
        double[] doubleArray30 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double31 = univariateStatistic26.evaluate(doubleArray30);
        descriptiveStatistics20.setMaxImpl(univariateStatistic26);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics33 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics33.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics33.getKurtosisImpl();
        long long36 = descriptiveStatistics33.getN();
        double double37 = descriptiveStatistics33.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics38 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics38.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics40 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics40.getSumsqImpl();
        descriptiveStatistics38.setKurtosisImpl(univariateStatistic41);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics43.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics45 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics45.getSumsqImpl();
        descriptiveStatistics43.setKurtosisImpl(univariateStatistic46);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics43.getKurtosisImpl();
        descriptiveStatistics38.setMaxImpl(univariateStatistic48);
        descriptiveStatistics33.setSumImpl(univariateStatistic48);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics52 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics52.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics54 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics54.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics56 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics56.getSumsqImpl();
        descriptiveStatistics54.setKurtosisImpl(univariateStatistic57);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics59 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic60 = descriptiveStatistics59.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics61 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic62 = descriptiveStatistics61.getSumsqImpl();
        descriptiveStatistics59.setKurtosisImpl(univariateStatistic62);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic64 = descriptiveStatistics59.getKurtosisImpl();
        descriptiveStatistics54.setMaxImpl(univariateStatistic64);
        double double66 = descriptiveStatistics54.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic67 = descriptiveStatistics54.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic68 = descriptiveStatistics54.getVarianceImpl();
        descriptiveStatistics52.setMinImpl(univariateStatistic68);
        descriptiveStatistics33.setMeanImpl(univariateStatistic68);
        descriptiveStatistics20.setSumImpl(univariateStatistic68);
        double double72 = descriptiveStatistics2.apply(univariateStatistic68);
        double double73 = descriptiveStatistics0.apply(univariateStatistic68);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic75 = descriptiveStatistics0.getMinImpl();
        // The following exception was thrown during execution in test generation
        try {
            double double77 = descriptiveStatistics0.getPercentile((double) 0.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal quantile value: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str3, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str19, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics20);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 2.0d + "'", double31 == 2.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics33);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(descriptiveStatistics38);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(descriptiveStatistics40);
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertNotNull(descriptiveStatistics43);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(descriptiveStatistics45);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertNotNull(descriptiveStatistics54);
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertNotNull(descriptiveStatistics56);
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertNotNull(descriptiveStatistics59);
        org.junit.Assert.assertNotNull(univariateStatistic60);
        org.junit.Assert.assertNotNull(descriptiveStatistics61);
        org.junit.Assert.assertNotNull(univariateStatistic62);
        org.junit.Assert.assertNotNull(univariateStatistic64);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(univariateStatistic67);
        org.junit.Assert.assertNotNull(univariateStatistic68);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNotNull(univariateStatistic75);
    }

    @Test
    public void test01941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01941");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        double double4 = resizableDoubleArray0.addElementRolling((double) 32.0f);
        double double6 = resizableDoubleArray0.addElementRolling((double) '4');
        resizableDoubleArray0.addElement((double) (byte) 1);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    }

    @Test
    public void test01942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01942");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        double double5 = resizableDoubleArray0.addElementRolling((double) 10L);
        int int6 = resizableDoubleArray0.getNumElements();
        double double8 = resizableDoubleArray0.addElementRolling((double) 101);
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setExpansionFactor((float) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
    }

    @Test
    public void test01943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01943");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics3.getKurtosisImpl();
        double double9 = descriptiveStatistics0.apply(univariateStatistic8);
        double double10 = descriptiveStatistics0.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics0.getSumImpl();
        double double12 = descriptiveStatistics0.getMin();
        double[] doubleArray13 = descriptiveStatistics0.getSortedValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics14.getKurtosisImpl();
        long long17 = descriptiveStatistics14.getN();
        double[] doubleArray18 = descriptiveStatistics14.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics14.getMinImpl();
        descriptiveStatistics0.setSumsqImpl(univariateStatistic19);
        double double21 = descriptiveStatistics0.getSkewness();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
    }

    @Test
    public void test01944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01944");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement((double) 0);
        double double5 = resizableDoubleArray0.addElementRolling((double) 0.0f);
        resizableDoubleArray0.setElement((int) (byte) 10, (double) (short) -1);
        double double10 = resizableDoubleArray0.addElementRolling((double) (short) 0);
        double[] doubleArray11 = resizableDoubleArray0.getValues();
        resizableDoubleArray0.clear();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test01945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01945");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        float float1 = resizableDoubleArray0.getExpansionFactor();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.setNumElements((int) ' ');
        double double6 = resizableDoubleArray0.addElementRolling((double) (short) 1);
        resizableDoubleArray0.clear();
        resizableDoubleArray0.setContractionCriteria((float) ' ');
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.discardFrontElements((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot discard more elements than arecontained in this array.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float1 + "' != '" + 2.0f + "'", float1 == 2.0f);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    }

    @Test
    public void test01946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01946");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray3 = new org.apache.commons.math.util.ResizableDoubleArray(32, (float) 10, (float) 32);
        resizableDoubleArray3.addElement((double) (-1L));
        resizableDoubleArray3.contract();
        // The following exception was thrown during execution in test generation
        try {
            double double8 = resizableDoubleArray3.getElement(33);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 33 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01947");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray4 = new org.apache.commons.math.util.ResizableDoubleArray(10, (float) 100, 32.0f, 35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01948");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getKurtosisImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics5.getKurtosisImpl();
        long long8 = descriptiveStatistics5.getN();
        descriptiveStatistics5.addValue((double) 0);
        int int11 = descriptiveStatistics5.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics5.getGeometricMeanImpl();
        descriptiveStatistics5.setWindowSize((int) (byte) 1);
        long long15 = descriptiveStatistics5.getN();
        double[] doubleArray16 = descriptiveStatistics5.getSortedValues();
        double double17 = univariateStatistic4.evaluate(doubleArray16);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test01949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01949");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.setElement(100, (double) (byte) 100);
        resizableDoubleArray0.addElement(2.0d);
        float float7 = resizableDoubleArray0.getContractionCriteria();
        double double9 = resizableDoubleArray0.addElementRolling((double) 10);
        resizableDoubleArray0.addElement((double) 10.0f);
        resizableDoubleArray0.addElement((double) 1L);
        resizableDoubleArray0.setNumElements((int) (byte) 100);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + float7 + "' != '" + 2.5f + "'", float7 == 2.5f);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    }

    @Test
    public void test01950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01950");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        double double6 = descriptiveStatistics0.getStandardDeviation();
        double double7 = descriptiveStatistics0.getSumsq();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics0.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics9.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics9.getKurtosisImpl();
        double[] doubleArray12 = descriptiveStatistics9.getValues();
        double double13 = descriptiveStatistics9.getVariance();
        double double14 = descriptiveStatistics9.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str16 = descriptiveStatistics15.toString();
        double double17 = descriptiveStatistics15.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics20.getSumsqImpl();
        descriptiveStatistics18.setKurtosisImpl(univariateStatistic21);
        descriptiveStatistics15.setSkewnessImpl(univariateStatistic21);
        double double24 = descriptiveStatistics15.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics25.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics25.getKurtosisImpl();
        long long28 = descriptiveStatistics25.getN();
        double[] doubleArray29 = descriptiveStatistics25.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics25.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics25.getMinImpl();
        descriptiveStatistics15.setMinImpl(univariateStatistic31);
        descriptiveStatistics9.setMeanImpl(univariateStatistic31);
        descriptiveStatistics0.setMinImpl(univariateStatistic31);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics37 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((-1));
        double double38 = descriptiveStatistics37.getMean();
        double double39 = descriptiveStatistics37.getSumsq();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics37.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics42 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double43 = descriptiveStatistics42.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics42.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics46 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double47 = descriptiveStatistics46.getStandardDeviation();
        long long48 = descriptiveStatistics46.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic49 = descriptiveStatistics46.getMinImpl();
        descriptiveStatistics42.setMaxImpl(univariateStatistic49);
        double double51 = descriptiveStatistics42.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics42.getKurtosisImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics42.getMeanImpl();
        descriptiveStatistics37.setSumsqImpl(univariateStatistic53);
        // The following exception was thrown during execution in test generation
        try {
            descriptiveStatistics0.setPercentileImpl(univariateStatistic53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Percentile implementation does not support setQuantile");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str16, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(descriptiveStatistics20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic49);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(univariateStatistic52);
        org.junit.Assert.assertNotNull(univariateStatistic53);
    }

    @Test
    public void test01951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01951");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double[] doubleArray1 = descriptiveStatistics0.getSortedValues();
        double double2 = descriptiveStatistics0.getMin();
        double double3 = descriptiveStatistics0.getSumsq();
        double[] doubleArray4 = descriptiveStatistics0.getSortedValues();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
    }

    @Test
    public void test01952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01952");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        descriptiveStatistics0.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics9 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics9.getSumsqImpl();
        descriptiveStatistics7.setKurtosisImpl(univariateStatistic10);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics7.getKurtosisImpl();
        double[] doubleArray16 = new double[] { (short) 1, (byte) 0, (-1.0f) };
        double double17 = univariateStatistic12.evaluate(doubleArray16);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic12);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics0.getSkewnessImpl();
        double double20 = descriptiveStatistics0.getSum();
        descriptiveStatistics0.clear();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(descriptiveStatistics9);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 2.0d + "'", double17 == 2.0d);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    }

    @Test
    public void test01953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01953");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double1 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str4 = descriptiveStatistics3.toString();
        descriptiveStatistics3.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics3.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray8 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int9 = resizableDoubleArray8.start();
        resizableDoubleArray8.addElement((double) 10);
        int int12 = resizableDoubleArray8.getExpansionMode();
        resizableDoubleArray8.addElement((double) (-1L));
        double[] doubleArray15 = resizableDoubleArray8.getElements();
        double double18 = univariateStatistic7.evaluate(doubleArray15, (int) (byte) 1, 1);
        double double19 = descriptiveStatistics0.apply(univariateStatistic7);
        double double20 = descriptiveStatistics0.getMean();
        java.lang.String str21 = descriptiveStatistics0.toString();
        long long22 = descriptiveStatistics0.getN();
        double double23 = descriptiveStatistics0.getSum();
        double double24 = descriptiveStatistics0.getMax();
        double double25 = descriptiveStatistics0.getSumsq();
        descriptiveStatistics0.setWindowSize(10);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics0.getMinImpl();
        double double29 = descriptiveStatistics0.getSum();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str4, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str21, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
    }

    @Test
    public void test01954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01954");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        double[] doubleArray4 = descriptiveStatistics1.getSortedValues();
        double[] doubleArray5 = descriptiveStatistics1.getSortedValues();
        double double6 = descriptiveStatistics1.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics1.getVarianceImpl();
        double double8 = descriptiveStatistics1.getSum();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test01955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01955");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.clear();
        double[] doubleArray3 = resizableDoubleArray0.getElements();
        double double5 = resizableDoubleArray0.addElementRolling((double) (byte) 10);
        int int6 = resizableDoubleArray0.getNumElements();
        double[] doubleArray7 = resizableDoubleArray0.getElements();
        double[] doubleArray8 = resizableDoubleArray0.getElements();
        java.lang.Class<?> wildcardClass9 = doubleArray8.getClass();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance((java.lang.Class) wildcardClass9);
            org.junit.Assert.fail("Expected exception of type java.lang.InstantiationException; message: [D");
        } catch (java.lang.InstantiationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test01956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01956");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) (byte) 0);
        resizableDoubleArray0.contract();
        resizableDoubleArray0.clear();
        int int6 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.addElement(1.0d);
        int int10 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.addElement((double) 1);
        float float13 = resizableDoubleArray0.getExpansionFactor();
        resizableDoubleArray0.setExpansionFactor((float) 2);
        resizableDoubleArray0.clear();
        // The following exception was thrown during execution in test generation
        try {
            double double18 = resizableDoubleArray0.getElement(2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 2 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + 2.0f + "'", float13 == 2.0f);
    }

    @Test
    public void test01957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01957");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getKurtosisImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double6 = descriptiveStatistics5.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double9 = descriptiveStatistics8.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics8.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double13 = descriptiveStatistics12.getStandardDeviation();
        long long14 = descriptiveStatistics12.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics12.getMinImpl();
        descriptiveStatistics8.setMaxImpl(univariateStatistic15);
        descriptiveStatistics5.setMinImpl(univariateStatistic15);
        descriptiveStatistics1.setSumImpl(univariateStatistic15);
        double double19 = descriptiveStatistics1.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics1.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        descriptiveStatistics21.setKurtosisImpl(univariateStatistic24);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics26.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics28.getSumsqImpl();
        descriptiveStatistics26.setKurtosisImpl(univariateStatistic29);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics26.getKurtosisImpl();
        descriptiveStatistics21.setMaxImpl(univariateStatistic31);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics33 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics33.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics35 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics35.getSumsqImpl();
        descriptiveStatistics33.setKurtosisImpl(univariateStatistic36);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics33.getKurtosisImpl();
        descriptiveStatistics21.setGeometricMeanImpl(univariateStatistic38);
        double double40 = descriptiveStatistics21.getMin();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics41 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double42 = descriptiveStatistics41.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics43.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics43.getKurtosisImpl();
        long long46 = descriptiveStatistics43.getN();
        descriptiveStatistics43.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics49 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic50 = descriptiveStatistics49.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics51 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics51.getSumsqImpl();
        descriptiveStatistics49.setKurtosisImpl(univariateStatistic52);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics54 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics54.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics56 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics56.getSumsqImpl();
        descriptiveStatistics54.setKurtosisImpl(univariateStatistic57);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic59 = descriptiveStatistics54.getKurtosisImpl();
        descriptiveStatistics49.setMaxImpl(univariateStatistic59);
        double double61 = descriptiveStatistics49.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic62 = descriptiveStatistics49.getMinImpl();
        descriptiveStatistics43.setMinImpl(univariateStatistic62);
        descriptiveStatistics41.setMeanImpl(univariateStatistic62);
        descriptiveStatistics21.setSumImpl(univariateStatistic62);
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray66 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int67 = resizableDoubleArray66.getExpansionMode();
        resizableDoubleArray66.addElement((double) 0);
        double double71 = resizableDoubleArray66.addElementRolling((double) 0.0f);
        resizableDoubleArray66.setElement((int) (byte) 10, (double) (short) -1);
        float float75 = resizableDoubleArray66.getExpansionFactor();
        double[] doubleArray76 = resizableDoubleArray66.getElements();
        double double77 = univariateStatistic62.evaluate(doubleArray76);
        // The following exception was thrown during execution in test generation
        try {
            double double80 = univariateStatistic20.evaluate(doubleArray76, (int) ' ', (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(descriptiveStatistics33);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(descriptiveStatistics35);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(descriptiveStatistics41);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(descriptiveStatistics43);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics49);
        org.junit.Assert.assertNotNull(univariateStatistic50);
        org.junit.Assert.assertNotNull(descriptiveStatistics51);
        org.junit.Assert.assertNotNull(univariateStatistic52);
        org.junit.Assert.assertNotNull(descriptiveStatistics54);
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertNotNull(descriptiveStatistics56);
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertNotNull(univariateStatistic59);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertNotNull(univariateStatistic62);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertTrue("'" + float75 + "' != '" + 2.0f + "'", float75 == 2.0f);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + (-1.0d) + "'", double77 == (-1.0d));
    }

    @Test
    public void test01958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01958");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray3 = new org.apache.commons.math.util.ResizableDoubleArray(12, (float) 3, (float) 103);
    }

    @Test
    public void test01959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01959");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray3 = new org.apache.commons.math.util.ResizableDoubleArray((int) ' ', (float) '4', 0.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01960");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        java.lang.String str6 = descriptiveStatistics0.toString();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str8 = descriptiveStatistics7.toString();
        descriptiveStatistics7.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics7.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics7.getSumsqImpl();
        double double13 = descriptiveStatistics7.getPercentile(Double.NaN);
        double double14 = descriptiveStatistics7.getKurtosis();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics0.setMeanImpl(univariateStatistic15);
        java.lang.Class<?> wildcardClass17 = univariateStatistic15.getClass();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance((java.lang.Class) wildcardClass17);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.descriptive.summary.SumOfSquares cannot be cast to org.apache.commons.math.stat.descriptive.DescriptiveStatistics");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str6, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str8, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test01961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01961");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics0.getSumsqImpl();
        double double5 = descriptiveStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double8 = descriptiveStatistics7.getStandardDeviation();
        long long9 = descriptiveStatistics7.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics7.getSkewnessImpl();
        long long11 = descriptiveStatistics7.getN();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics12.getKurtosisImpl();
        double double15 = descriptiveStatistics12.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double17 = descriptiveStatistics16.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics16.getSumImpl();
        descriptiveStatistics12.setMinImpl(univariateStatistic18);
        descriptiveStatistics7.setKurtosisImpl(univariateStatistic18);
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic18);
        // The following exception was thrown during execution in test generation
        try {
            double double23 = descriptiveStatistics0.getElement(91);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 91 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(univariateStatistic18);
    }

    @Test
    public void test01962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01962");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getSkewnessImpl();
        java.lang.String str5 = descriptiveStatistics1.toString();
        double double6 = descriptiveStatistics1.getVariance();
        descriptiveStatistics1.setWindowSize((int) '4');
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics1.getMaxImpl();
        double[] doubleArray10 = descriptiveStatistics1.getValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        descriptiveStatistics11.setKurtosisImpl(univariateStatistic14);
        descriptiveStatistics11.clear();
        double double17 = descriptiveStatistics11.getSum();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics11.getVarianceImpl();
        double double19 = descriptiveStatistics11.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics11.getMaxImpl();
        double double21 = descriptiveStatistics1.apply(univariateStatistic20);
        double double22 = descriptiveStatistics1.getMin();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str5, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
    }

    @Test
    public void test01963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01963");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray4 = new org.apache.commons.math.util.ResizableDoubleArray((int) (byte) 1, (float) 102, (float) 100L, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01964");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics3.getKurtosisImpl();
        double double9 = descriptiveStatistics0.apply(univariateStatistic8);
        double double10 = descriptiveStatistics0.getSumsq();
        double double11 = descriptiveStatistics0.getMean();
        double double12 = descriptiveStatistics0.getSkewness();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        descriptiveStatistics13.setKurtosisImpl(univariateStatistic16);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics20 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics20.getSumsqImpl();
        descriptiveStatistics18.setKurtosisImpl(univariateStatistic21);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics18.getKurtosisImpl();
        descriptiveStatistics13.setMaxImpl(univariateStatistic23);
        double double25 = descriptiveStatistics13.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics13.getMinImpl();
        descriptiveStatistics13.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics29.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics31.getSumsqImpl();
        descriptiveStatistics29.setKurtosisImpl(univariateStatistic32);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics29.getKurtosisImpl();
        double double35 = descriptiveStatistics29.getStandardDeviation();
        double double36 = descriptiveStatistics29.getSum();
        int int37 = descriptiveStatistics29.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics29.getMaxImpl();
        descriptiveStatistics13.setSkewnessImpl(univariateStatistic38);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics40 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics40.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics42 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic43 = descriptiveStatistics42.getSumsqImpl();
        descriptiveStatistics40.setKurtosisImpl(univariateStatistic43);
        descriptiveStatistics40.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics40.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics40.getSumsqImpl();
        double double48 = descriptiveStatistics40.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics49 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str50 = descriptiveStatistics49.toString();
        double double51 = descriptiveStatistics49.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics52 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics52.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics54 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics54.getSumsqImpl();
        descriptiveStatistics52.setKurtosisImpl(univariateStatistic55);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics52.getKurtosisImpl();
        double double58 = descriptiveStatistics49.apply(univariateStatistic57);
        double double59 = descriptiveStatistics49.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic60 = descriptiveStatistics49.getSumImpl();
        descriptiveStatistics40.setGeometricMeanImpl(univariateStatistic60);
        descriptiveStatistics13.setKurtosisImpl(univariateStatistic60);
        descriptiveStatistics0.setMeanImpl(univariateStatistic60);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic64 = descriptiveStatistics0.getMinImpl();
        descriptiveStatistics0.clear();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(descriptiveStatistics20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(descriptiveStatistics29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(descriptiveStatistics31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertNotNull(descriptiveStatistics40);
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertNotNull(descriptiveStatistics42);
        org.junit.Assert.assertNotNull(univariateStatistic43);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(descriptiveStatistics49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str50, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(descriptiveStatistics52);
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertNotNull(descriptiveStatistics54);
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(univariateStatistic60);
        org.junit.Assert.assertNotNull(univariateStatistic64);
    }

    @Test
    public void test01965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01965");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.addElement((double) (byte) 0);
        resizableDoubleArray0.contract();
        resizableDoubleArray0.clear();
        int int6 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.setElement((int) (short) 1, (double) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double11 = resizableDoubleArray0.getElement(11);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 11 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test01966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01966");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics5.getKurtosisImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic10);
        double double12 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics0.getMinImpl();
        descriptiveStatistics0.setWindowSize((int) (short) 100);
        double double17 = descriptiveStatistics0.getPercentile((double) ' ');
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics0.getMaxImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics0.getMinImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
    }

    @Test
    public void test01967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01967");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics3.getKurtosisImpl();
        double double9 = descriptiveStatistics0.apply(univariateStatistic8);
        double double10 = descriptiveStatistics0.getSumsq();
        double double11 = descriptiveStatistics0.getMean();
        double double12 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics0.getSumImpl();
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray14 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int15 = resizableDoubleArray14.getExpansionMode();
        int int16 = resizableDoubleArray14.getNumElements();
        int int17 = resizableDoubleArray14.start();
        resizableDoubleArray14.setElement((int) (short) 10, (double) 100L);
        double[] doubleArray21 = resizableDoubleArray14.getValues();
        float float22 = resizableDoubleArray14.getContractionCriteria();
        int int23 = resizableDoubleArray14.start();
        float float24 = resizableDoubleArray14.getExpansionFactor();
        double[] doubleArray25 = resizableDoubleArray14.getElements();
        double[] doubleArray26 = resizableDoubleArray14.getElements();
        double[] doubleArray27 = resizableDoubleArray14.getValues();
        // The following exception was thrown during execution in test generation
        try {
            double double30 = univariateStatistic13.evaluate(doubleArray27, 103, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + float22 + "' != '" + 2.5f + "'", float22 == 2.5f);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + 2.0f + "'", float24 == 2.0f);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test01968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01968");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 1);
        double double2 = descriptiveStatistics1.getMax();
        long long3 = descriptiveStatistics1.getN();
        double double4 = descriptiveStatistics1.getMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = null;
        descriptiveStatistics1.setSkewnessImpl(univariateStatistic5);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics1.getMeanImpl();
        double[] doubleArray8 = descriptiveStatistics1.getSortedValues();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
    }

    @Test
    public void test01969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01969");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        double double6 = descriptiveStatistics0.getStandardDeviation();
        double double7 = descriptiveStatistics0.getSumsq();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics0.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics0.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = null;
        descriptiveStatistics0.setSumsqImpl(univariateStatistic10);
        double[] doubleArray12 = descriptiveStatistics0.getValues();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
    }

    @Test
    public void test01970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01970");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics2.getKurtosisImpl();
        long long5 = descriptiveStatistics2.getN();
        double[] doubleArray6 = descriptiveStatistics2.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics2.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics2.getMinImpl();
        double double9 = descriptiveStatistics0.apply(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        descriptiveStatistics10.setKurtosisImpl(univariateStatistic13);
        descriptiveStatistics10.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics10.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics17.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics17.getKurtosisImpl();
        long long20 = descriptiveStatistics17.getN();
        descriptiveStatistics17.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics17.getSkewnessImpl();
        descriptiveStatistics10.setSumsqImpl(univariateStatistic23);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics10.getVarianceImpl();
        descriptiveStatistics0.setVarianceImpl(univariateStatistic25);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics0.getSumsqImpl();
        long long28 = descriptiveStatistics0.getN();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
    }

    @Test
    public void test01971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01971");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str4 = descriptiveStatistics3.toString();
        double double5 = descriptiveStatistics3.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics6 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics6.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        descriptiveStatistics6.setKurtosisImpl(univariateStatistic9);
        descriptiveStatistics3.setSkewnessImpl(univariateStatistic9);
        double double12 = descriptiveStatistics3.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double15 = descriptiveStatistics14.getStandardDeviation();
        long long16 = descriptiveStatistics14.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics14.getMinImpl();
        descriptiveStatistics3.setVarianceImpl(univariateStatistic17);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics3.getMeanImpl();
        descriptiveStatistics0.setMeanImpl(univariateStatistic19);
        int int21 = descriptiveStatistics0.getWindowSize();
        int int22 = descriptiveStatistics0.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic23 = descriptiveStatistics0.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics24 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str25 = descriptiveStatistics24.toString();
        double double26 = descriptiveStatistics24.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics27.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics29.getSumsqImpl();
        descriptiveStatistics27.setKurtosisImpl(univariateStatistic30);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics27.getKurtosisImpl();
        double double33 = descriptiveStatistics24.apply(univariateStatistic32);
        double double34 = descriptiveStatistics24.getSumsq();
        double double35 = descriptiveStatistics24.getMean();
        double double36 = descriptiveStatistics24.getSkewness();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics37 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics37.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics39 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics39.getSumsqImpl();
        descriptiveStatistics37.setKurtosisImpl(univariateStatistic40);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics42 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic43 = descriptiveStatistics42.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics44 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics44.getSumsqImpl();
        descriptiveStatistics42.setKurtosisImpl(univariateStatistic45);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics42.getKurtosisImpl();
        descriptiveStatistics37.setMaxImpl(univariateStatistic47);
        double double49 = descriptiveStatistics37.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic50 = descriptiveStatistics37.getMinImpl();
        descriptiveStatistics37.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics53 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic54 = descriptiveStatistics53.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics55 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic56 = descriptiveStatistics55.getSumsqImpl();
        descriptiveStatistics53.setKurtosisImpl(univariateStatistic56);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic58 = descriptiveStatistics53.getKurtosisImpl();
        double double59 = descriptiveStatistics53.getStandardDeviation();
        double double60 = descriptiveStatistics53.getSum();
        int int61 = descriptiveStatistics53.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic62 = descriptiveStatistics53.getMaxImpl();
        descriptiveStatistics37.setSkewnessImpl(univariateStatistic62);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics64 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic65 = descriptiveStatistics64.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics66 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic67 = descriptiveStatistics66.getSumsqImpl();
        descriptiveStatistics64.setKurtosisImpl(univariateStatistic67);
        descriptiveStatistics64.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic70 = descriptiveStatistics64.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic71 = descriptiveStatistics64.getSumsqImpl();
        double double72 = descriptiveStatistics64.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics73 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str74 = descriptiveStatistics73.toString();
        double double75 = descriptiveStatistics73.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics76 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic77 = descriptiveStatistics76.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics78 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic79 = descriptiveStatistics78.getSumsqImpl();
        descriptiveStatistics76.setKurtosisImpl(univariateStatistic79);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic81 = descriptiveStatistics76.getKurtosisImpl();
        double double82 = descriptiveStatistics73.apply(univariateStatistic81);
        double double83 = descriptiveStatistics73.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic84 = descriptiveStatistics73.getSumImpl();
        descriptiveStatistics64.setGeometricMeanImpl(univariateStatistic84);
        descriptiveStatistics37.setKurtosisImpl(univariateStatistic84);
        descriptiveStatistics24.setMeanImpl(univariateStatistic84);
        double double88 = descriptiveStatistics0.apply(univariateStatistic84);
        descriptiveStatistics0.clear();
        double double90 = descriptiveStatistics0.getMean();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str4, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(descriptiveStatistics6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic23);
        org.junit.Assert.assertNotNull(descriptiveStatistics24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str25, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(descriptiveStatistics29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(descriptiveStatistics37);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertNotNull(descriptiveStatistics39);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertNotNull(descriptiveStatistics42);
        org.junit.Assert.assertNotNull(univariateStatistic43);
        org.junit.Assert.assertNotNull(descriptiveStatistics44);
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(univariateStatistic50);
        org.junit.Assert.assertNotNull(descriptiveStatistics53);
        org.junit.Assert.assertNotNull(univariateStatistic54);
        org.junit.Assert.assertNotNull(descriptiveStatistics55);
        org.junit.Assert.assertNotNull(univariateStatistic56);
        org.junit.Assert.assertNotNull(univariateStatistic58);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic62);
        org.junit.Assert.assertNotNull(descriptiveStatistics64);
        org.junit.Assert.assertNotNull(univariateStatistic65);
        org.junit.Assert.assertNotNull(descriptiveStatistics66);
        org.junit.Assert.assertNotNull(univariateStatistic67);
        org.junit.Assert.assertNotNull(univariateStatistic70);
        org.junit.Assert.assertNotNull(univariateStatistic71);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertNotNull(descriptiveStatistics73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str74, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertNotNull(descriptiveStatistics76);
        org.junit.Assert.assertNotNull(univariateStatistic77);
        org.junit.Assert.assertNotNull(descriptiveStatistics78);
        org.junit.Assert.assertNotNull(univariateStatistic79);
        org.junit.Assert.assertNotNull(univariateStatistic81);
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertNotNull(univariateStatistic84);
        org.junit.Assert.assertTrue(Double.isNaN(double88));
        org.junit.Assert.assertTrue(Double.isNaN(double90));
    }

    @Test
    public void test01972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01972");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic6);
        double double9 = descriptiveStatistics0.getStandardDeviation();
        descriptiveStatistics0.clear();
        double double11 = descriptiveStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        descriptiveStatistics12.setKurtosisImpl(univariateStatistic15);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics17.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        descriptiveStatistics17.setKurtosisImpl(univariateStatistic20);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics17.getKurtosisImpl();
        descriptiveStatistics12.setMaxImpl(univariateStatistic22);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics24 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic25 = descriptiveStatistics24.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics26 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics26.getSumsqImpl();
        descriptiveStatistics24.setKurtosisImpl(univariateStatistic27);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics24.getKurtosisImpl();
        descriptiveStatistics12.setGeometricMeanImpl(univariateStatistic29);
        descriptiveStatistics0.setSumImpl(univariateStatistic29);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics33 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics33.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics35 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics35.getSumsqImpl();
        descriptiveStatistics33.setKurtosisImpl(univariateStatistic36);
        descriptiveStatistics33.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics33.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic40 = descriptiveStatistics33.getSumsqImpl();
        double double41 = descriptiveStatistics33.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics33.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics43 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double44 = descriptiveStatistics43.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics45 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics45.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics45.getKurtosisImpl();
        long long48 = descriptiveStatistics45.getN();
        descriptiveStatistics45.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics51 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics51.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics53 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic54 = descriptiveStatistics53.getSumsqImpl();
        descriptiveStatistics51.setKurtosisImpl(univariateStatistic54);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics56 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics56.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics58 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic59 = descriptiveStatistics58.getSumsqImpl();
        descriptiveStatistics56.setKurtosisImpl(univariateStatistic59);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic61 = descriptiveStatistics56.getKurtosisImpl();
        descriptiveStatistics51.setMaxImpl(univariateStatistic61);
        double double63 = descriptiveStatistics51.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic64 = descriptiveStatistics51.getMinImpl();
        descriptiveStatistics45.setMinImpl(univariateStatistic64);
        descriptiveStatistics43.setMeanImpl(univariateStatistic64);
        double double67 = descriptiveStatistics43.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics68 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic69 = descriptiveStatistics68.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics70 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic71 = descriptiveStatistics70.getSumsqImpl();
        descriptiveStatistics68.setKurtosisImpl(univariateStatistic71);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic73 = descriptiveStatistics68.getKurtosisImpl();
        descriptiveStatistics43.setKurtosisImpl(univariateStatistic73);
        descriptiveStatistics33.setSumsqImpl(univariateStatistic73);
        descriptiveStatistics0.setMinImpl(univariateStatistic73);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics77 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic78 = descriptiveStatistics77.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic79 = descriptiveStatistics77.getKurtosisImpl();
        double[] doubleArray80 = descriptiveStatistics77.getValues();
        long long81 = descriptiveStatistics77.getN();
        double[] doubleArray82 = descriptiveStatistics77.getSortedValues();
        // The following exception was thrown during execution in test generation
        try {
            double double85 = univariateStatistic73.evaluate(doubleArray82, (-1), (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics24);
        org.junit.Assert.assertNotNull(univariateStatistic25);
        org.junit.Assert.assertNotNull(descriptiveStatistics26);
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(descriptiveStatistics33);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(descriptiveStatistics35);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(univariateStatistic40);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(descriptiveStatistics43);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(descriptiveStatistics45);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics51);
        org.junit.Assert.assertNotNull(univariateStatistic52);
        org.junit.Assert.assertNotNull(descriptiveStatistics53);
        org.junit.Assert.assertNotNull(univariateStatistic54);
        org.junit.Assert.assertNotNull(descriptiveStatistics56);
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertNotNull(descriptiveStatistics58);
        org.junit.Assert.assertNotNull(univariateStatistic59);
        org.junit.Assert.assertNotNull(univariateStatistic61);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertNotNull(univariateStatistic64);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(descriptiveStatistics68);
        org.junit.Assert.assertNotNull(univariateStatistic69);
        org.junit.Assert.assertNotNull(descriptiveStatistics70);
        org.junit.Assert.assertNotNull(univariateStatistic71);
        org.junit.Assert.assertNotNull(univariateStatistic73);
        org.junit.Assert.assertNotNull(descriptiveStatistics77);
        org.junit.Assert.assertNotNull(univariateStatistic78);
        org.junit.Assert.assertNotNull(univariateStatistic79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[]");
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[]");
    }

    @Test
    public void test01973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01973");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((-1));
        double double2 = descriptiveStatistics1.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics4 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double5 = descriptiveStatistics4.getStandardDeviation();
        long long6 = descriptiveStatistics4.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics4.getMinImpl();
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray8 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int9 = resizableDoubleArray8.getExpansionMode();
        resizableDoubleArray8.addElement(0.0d);
        int int12 = resizableDoubleArray8.getExpansionMode();
        double[] doubleArray13 = resizableDoubleArray8.getElements();
        double double14 = univariateStatistic7.evaluate(doubleArray13);
        descriptiveStatistics1.setMinImpl(univariateStatistic7);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        descriptiveStatistics21.setKurtosisImpl(univariateStatistic24);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics21.getKurtosisImpl();
        descriptiveStatistics16.setMaxImpl(univariateStatistic26);
        double double28 = descriptiveStatistics16.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics16.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics16.getKurtosisImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics16.getPercentileImpl();
        descriptiveStatistics1.setVarianceImpl(univariateStatistic31);
        double double33 = descriptiveStatistics1.getSkewness();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
    }

    @Test
    public void test01974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01974");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        int int6 = descriptiveStatistics0.getWindowSize();
        double double7 = descriptiveStatistics0.getSkewness();
        double double8 = descriptiveStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 10);
        double double11 = descriptiveStatistics10.getStandardDeviation();
        double[] doubleArray12 = descriptiveStatistics10.getValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics13.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics15.getKurtosisImpl();
        long long18 = descriptiveStatistics15.getN();
        double[] doubleArray19 = descriptiveStatistics15.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics15.getSumImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics15.getMinImpl();
        double double22 = descriptiveStatistics13.apply(univariateStatistic21);
        descriptiveStatistics10.setSumsqImpl(univariateStatistic21);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics10.getMinImpl();
        double double25 = descriptiveStatistics10.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double28 = descriptiveStatistics27.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics27.getGeometricMeanImpl();
        double double30 = descriptiveStatistics27.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics31.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics31.getKurtosisImpl();
        long long34 = descriptiveStatistics31.getN();
        double[] doubleArray35 = descriptiveStatistics31.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics31.getSumImpl();
        descriptiveStatistics27.setSkewnessImpl(univariateStatistic36);
        descriptiveStatistics27.clear();
        double double39 = descriptiveStatistics27.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics40 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics40.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics40.getKurtosisImpl();
        long long43 = descriptiveStatistics40.getN();
        descriptiveStatistics40.addValue((double) 0);
        int int46 = descriptiveStatistics40.getWindowSize();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics47 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics47.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics49 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic50 = descriptiveStatistics49.getSumsqImpl();
        descriptiveStatistics47.setKurtosisImpl(univariateStatistic50);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics52 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic53 = descriptiveStatistics52.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics54 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic55 = descriptiveStatistics54.getSumsqImpl();
        descriptiveStatistics52.setKurtosisImpl(univariateStatistic55);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic57 = descriptiveStatistics52.getKurtosisImpl();
        descriptiveStatistics47.setMaxImpl(univariateStatistic57);
        double double59 = descriptiveStatistics47.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic60 = descriptiveStatistics47.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic61 = descriptiveStatistics47.getVarianceImpl();
        descriptiveStatistics40.setMeanImpl(univariateStatistic61);
        descriptiveStatistics27.setMaxImpl(univariateStatistic61);
        double double64 = descriptiveStatistics27.getSumsq();
        long long65 = descriptiveStatistics27.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic66 = descriptiveStatistics27.getMaxImpl();
        descriptiveStatistics10.setSumsqImpl(univariateStatistic66);
        double double68 = descriptiveStatistics0.apply(univariateStatistic66);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(descriptiveStatistics31);
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(descriptiveStatistics40);
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(descriptiveStatistics47);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertNotNull(descriptiveStatistics49);
        org.junit.Assert.assertNotNull(univariateStatistic50);
        org.junit.Assert.assertNotNull(descriptiveStatistics52);
        org.junit.Assert.assertNotNull(univariateStatistic53);
        org.junit.Assert.assertNotNull(descriptiveStatistics54);
        org.junit.Assert.assertNotNull(univariateStatistic55);
        org.junit.Assert.assertNotNull(univariateStatistic57);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(univariateStatistic60);
        org.junit.Assert.assertNotNull(univariateStatistic61);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic66);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
    }

    @Test
    public void test01975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01975");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray3 = new org.apache.commons.math.util.ResizableDoubleArray((int) (short) -1, (float) (byte) 100, (float) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01976");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        double double2 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        descriptiveStatistics0.setSkewnessImpl(univariateStatistic6);
        double double9 = descriptiveStatistics0.getStandardDeviation();
        descriptiveStatistics0.setWindowSize((int) (short) 1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics0.getKurtosisImpl();
        double double14 = descriptiveStatistics0.getPercentile((double) 10);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics0.getPercentileImpl();
        double[] doubleArray16 = descriptiveStatistics0.getSortedValues();
        double double17 = descriptiveStatistics0.getGeometricMean();
        double double18 = descriptiveStatistics0.getKurtosis();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test01977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01977");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray1 = new org.apache.commons.math.util.ResizableDoubleArray((int) (byte) 10);
        double[] doubleArray2 = resizableDoubleArray1.getValues();
        int int3 = resizableDoubleArray1.getNumElements();
        int int4 = resizableDoubleArray1.getNumElements();
        resizableDoubleArray1.setElement((int) (short) 0, 625.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double9 = resizableDoubleArray1.getElement((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Elements cannot be retrieved from a negative array index");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[625.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test01978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01978");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) 1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics1.getKurtosisImpl();
        double double3 = descriptiveStatistics1.getMin();
        double double4 = descriptiveStatistics1.getVariance();
        int int5 = descriptiveStatistics1.getWindowSize();
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test01979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01979");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray1 = new org.apache.commons.math.util.ResizableDoubleArray(11);
        double[] doubleArray2 = resizableDoubleArray1.getElements();
        float float3 = resizableDoubleArray1.getContractionCriteria();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray1.setExpansionMode((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal expansionMode setting.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 2.5f + "'", float3 == 2.5f);
    }

    @Test
    public void test01980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01980");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        descriptiveStatistics0.setWindowSize((int) (byte) -1);
        long long3 = descriptiveStatistics0.getN();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics4 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str5 = descriptiveStatistics4.toString();
        descriptiveStatistics4.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics4.getGeometricMeanImpl();
        double double8 = descriptiveStatistics4.getMax();
        double double9 = descriptiveStatistics4.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getKurtosisImpl();
        descriptiveStatistics4.setVarianceImpl(univariateStatistic12);
        descriptiveStatistics0.setVarianceImpl(univariateStatistic12);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics15 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics15.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics15.getKurtosisImpl();
        long long18 = descriptiveStatistics15.getN();
        double[] doubleArray19 = descriptiveStatistics15.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics15.getSumImpl();
        double double21 = descriptiveStatistics15.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics15.getSkewnessImpl();
        double double23 = descriptiveStatistics15.getSum();
        double[] doubleArray24 = descriptiveStatistics15.getSortedValues();
        // The following exception was thrown during execution in test generation
        try {
            double double27 = univariateStatistic12.evaluate(doubleArray24, 2, 97);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(descriptiveStatistics4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str5, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(descriptiveStatistics15);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
    }

    @Test
    public void test01981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01981");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        double[] doubleArray4 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic5 = descriptiveStatistics0.getSumImpl();
        double double6 = descriptiveStatistics0.getVariance();
        double double7 = descriptiveStatistics0.getMax();
        double double8 = descriptiveStatistics0.getKurtosis();
        double[] doubleArray9 = descriptiveStatistics0.getValues();
        double double10 = descriptiveStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double13 = descriptiveStatistics12.getStandardDeviation();
        long long14 = descriptiveStatistics12.getN();
        double double15 = descriptiveStatistics12.getMin();
        double double16 = descriptiveStatistics12.getMax();
        double double17 = descriptiveStatistics12.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double20 = descriptiveStatistics19.getStandardDeviation();
        long long21 = descriptiveStatistics19.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics19.getSkewnessImpl();
        java.lang.String str23 = descriptiveStatistics19.toString();
        double double24 = descriptiveStatistics19.getVariance();
        descriptiveStatistics19.setWindowSize((int) (short) 100);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics27 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic28 = descriptiveStatistics27.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics29 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics29.getSumsqImpl();
        descriptiveStatistics27.setKurtosisImpl(univariateStatistic30);
        descriptiveStatistics19.setSkewnessImpl(univariateStatistic30);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics33 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic34 = descriptiveStatistics33.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics35 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics35.getSumsqImpl();
        descriptiveStatistics33.setKurtosisImpl(univariateStatistic36);
        descriptiveStatistics33.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic39 = descriptiveStatistics33.getSkewnessImpl();
        descriptiveStatistics19.setVarianceImpl(univariateStatistic39);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics19.getSkewnessImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic42 = descriptiveStatistics19.getSkewnessImpl();
        descriptiveStatistics12.setKurtosisImpl(univariateStatistic42);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic44 = descriptiveStatistics12.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics45 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic46 = descriptiveStatistics45.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic47 = descriptiveStatistics45.getKurtosisImpl();
        long long48 = descriptiveStatistics45.getN();
        descriptiveStatistics45.addValue((double) 0);
        int int51 = descriptiveStatistics45.getWindowSize();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics45.getGeometricMeanImpl();
        descriptiveStatistics45.setWindowSize((int) (byte) 1);
        long long55 = descriptiveStatistics45.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic56 = descriptiveStatistics45.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics57 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic58 = descriptiveStatistics57.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics59 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic60 = descriptiveStatistics59.getSumsqImpl();
        descriptiveStatistics57.setKurtosisImpl(univariateStatistic60);
        double double62 = descriptiveStatistics57.getMean();
        descriptiveStatistics57.addValue((double) (byte) 10);
        long long65 = descriptiveStatistics57.getN();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics66 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic67 = descriptiveStatistics66.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic68 = descriptiveStatistics66.getKurtosisImpl();
        long long69 = descriptiveStatistics66.getN();
        double[] doubleArray70 = descriptiveStatistics66.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic71 = descriptiveStatistics66.getSumImpl();
        descriptiveStatistics66.addValue((double) (byte) 1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic74 = null;
        descriptiveStatistics66.setSkewnessImpl(univariateStatistic74);
        double[] doubleArray76 = descriptiveStatistics66.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic77 = descriptiveStatistics66.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic78 = descriptiveStatistics66.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic79 = descriptiveStatistics66.getSumImpl();
        double double80 = descriptiveStatistics57.apply(univariateStatistic79);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics81 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic82 = descriptiveStatistics81.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic83 = descriptiveStatistics81.getKurtosisImpl();
        long long84 = descriptiveStatistics81.getN();
        double[] doubleArray85 = descriptiveStatistics81.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic86 = descriptiveStatistics81.getSumImpl();
        descriptiveStatistics57.setMeanImpl(univariateStatistic86);
        double[] doubleArray88 = descriptiveStatistics57.getValues();
        double double89 = univariateStatistic56.evaluate(doubleArray88);
        descriptiveStatistics12.setKurtosisImpl(univariateStatistic56);
        descriptiveStatistics0.setSumImpl(univariateStatistic56);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str23, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(descriptiveStatistics27);
        org.junit.Assert.assertNotNull(univariateStatistic28);
        org.junit.Assert.assertNotNull(descriptiveStatistics29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(descriptiveStatistics33);
        org.junit.Assert.assertNotNull(univariateStatistic34);
        org.junit.Assert.assertNotNull(descriptiveStatistics35);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertNotNull(univariateStatistic39);
        org.junit.Assert.assertNotNull(univariateStatistic41);
        org.junit.Assert.assertNotNull(univariateStatistic42);
        org.junit.Assert.assertNotNull(univariateStatistic44);
        org.junit.Assert.assertNotNull(descriptiveStatistics45);
        org.junit.Assert.assertNotNull(univariateStatistic46);
        org.junit.Assert.assertNotNull(univariateStatistic47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(univariateStatistic52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1L + "'", long55 == 1L);
        org.junit.Assert.assertNotNull(univariateStatistic56);
        org.junit.Assert.assertNotNull(descriptiveStatistics57);
        org.junit.Assert.assertNotNull(univariateStatistic58);
        org.junit.Assert.assertNotNull(descriptiveStatistics59);
        org.junit.Assert.assertNotNull(univariateStatistic60);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1L + "'", long65 == 1L);
        org.junit.Assert.assertNotNull(descriptiveStatistics66);
        org.junit.Assert.assertNotNull(univariateStatistic67);
        org.junit.Assert.assertNotNull(univariateStatistic68);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic71);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0]");
        org.junit.Assert.assertNotNull(univariateStatistic77);
        org.junit.Assert.assertNotNull(univariateStatistic78);
        org.junit.Assert.assertNotNull(univariateStatistic79);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 10.0d + "'", double80 == 10.0d);
        org.junit.Assert.assertNotNull(descriptiveStatistics81);
        org.junit.Assert.assertNotNull(univariateStatistic82);
        org.junit.Assert.assertNotNull(univariateStatistic83);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic86);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[10.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 10.000000000000002d + "'", double89 == 10.000000000000002d);
    }

    @Test
    public void test01982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01982");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics5.getKurtosisImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic10);
        double double12 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic14 = descriptiveStatistics0.getVarianceImpl();
        double[] doubleArray15 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics0.getSumImpl();
        double[] doubleArray17 = descriptiveStatistics0.getValues();
        int int18 = descriptiveStatistics0.getWindowSize();
        descriptiveStatistics0.setWindowSize(103);
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(univariateStatistic14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test01983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01983");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        long long3 = descriptiveStatistics1.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics1.getSkewnessImpl();
        java.lang.String str5 = descriptiveStatistics1.toString();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getKurtosisImpl();
        descriptiveStatistics1.setMeanImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        descriptiveStatistics10.setKurtosisImpl(univariateStatistic13);
        descriptiveStatistics10.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics10.getGeometricMeanImpl();
        descriptiveStatistics1.setKurtosisImpl(univariateStatistic16);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str19 = descriptiveStatistics18.toString();
        double double20 = descriptiveStatistics18.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        descriptiveStatistics21.setKurtosisImpl(univariateStatistic24);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics21.getKurtosisImpl();
        double double27 = descriptiveStatistics18.apply(univariateStatistic26);
        double double28 = descriptiveStatistics18.getSumsq();
        double double29 = descriptiveStatistics18.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic31 = descriptiveStatistics30.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics32 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic33 = descriptiveStatistics32.getSumsqImpl();
        descriptiveStatistics30.setKurtosisImpl(univariateStatistic33);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics30.getKurtosisImpl();
        descriptiveStatistics18.setSumsqImpl(univariateStatistic35);
        double double37 = descriptiveStatistics1.apply(univariateStatistic35);
        double double38 = descriptiveStatistics1.getSkewness();
        double double39 = descriptiveStatistics1.getVariance();
        double double40 = descriptiveStatistics1.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics42 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 10);
        double double43 = descriptiveStatistics42.getStandardDeviation();
        double[] doubleArray44 = descriptiveStatistics42.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics42.getSumsqImpl();
        descriptiveStatistics1.setSkewnessImpl(univariateStatistic45);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str5, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str19, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(descriptiveStatistics30);
        org.junit.Assert.assertNotNull(univariateStatistic31);
        org.junit.Assert.assertNotNull(descriptiveStatistics32);
        org.junit.Assert.assertNotNull(univariateStatistic33);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic45);
    }

    @Test
    public void test01984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01984");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray1 = new org.apache.commons.math.util.ResizableDoubleArray(103);
    }

    @Test
    public void test01985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01985");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        descriptiveStatistics0.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getVarianceImpl();
        int int7 = descriptiveStatistics0.getWindowSize();
        double double8 = descriptiveStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics0.getMaxImpl();
        double double10 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics0.getSumsqImpl();
        double double13 = descriptiveStatistics0.getElement((int) (byte) 0);
        double double14 = descriptiveStatistics0.getMean();
        double double15 = descriptiveStatistics0.getKurtosis();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test01986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01986");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str1 = descriptiveStatistics0.toString();
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics0.getGeometricMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics5.getKurtosisImpl();
        long long8 = descriptiveStatistics5.getN();
        double double9 = descriptiveStatistics5.getMax();
        double double10 = descriptiveStatistics5.getVariance();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        double double12 = descriptiveStatistics11.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics11.getMinImpl();
        descriptiveStatistics5.setSumImpl(univariateStatistic13);
        descriptiveStatistics0.setSumImpl(univariateStatistic13);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics21.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        descriptiveStatistics21.setKurtosisImpl(univariateStatistic24);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics21.getKurtosisImpl();
        descriptiveStatistics16.setMaxImpl(univariateStatistic26);
        double double28 = descriptiveStatistics0.apply(univariateStatistic26);
        double double29 = descriptiveStatistics0.getSkewness();
        double double30 = descriptiveStatistics0.getSumsq();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics31 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str32 = descriptiveStatistics31.toString();
        double double33 = descriptiveStatistics31.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics34 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics34.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics36 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics36.getSumsqImpl();
        descriptiveStatistics34.setKurtosisImpl(univariateStatistic37);
        descriptiveStatistics31.setSkewnessImpl(univariateStatistic37);
        double double40 = descriptiveStatistics31.getStandardDeviation();
        descriptiveStatistics31.clear();
        descriptiveStatistics31.addValue((double) (short) 10);
        double double44 = descriptiveStatistics31.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics31.getMaxImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic45);
        double double47 = descriptiveStatistics0.getSum();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str1, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(descriptiveStatistics31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str32, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(descriptiveStatistics34);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertNotNull(descriptiveStatistics36);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 10.0d + "'", double44 == 10.0d);
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
    }

    @Test
    public void test01987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01987");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics0.getKurtosisImpl();
        long long3 = descriptiveStatistics0.getN();
        descriptiveStatistics0.addValue((double) 0);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getVarianceImpl();
        int int7 = descriptiveStatistics0.getWindowSize();
        double double8 = descriptiveStatistics0.getMin();
        double[] doubleArray9 = descriptiveStatistics0.getValues();
        double[] doubleArray10 = descriptiveStatistics0.getValues();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics11 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic12 = descriptiveStatistics11.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics11.getKurtosisImpl();
        long long14 = descriptiveStatistics11.getN();
        double[] doubleArray15 = descriptiveStatistics11.getValues();
        double double16 = descriptiveStatistics11.getMax();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics11.getVarianceImpl();
        descriptiveStatistics0.setVarianceImpl(univariateStatistic17);
        double double19 = descriptiveStatistics0.getSumsq();
        double double20 = descriptiveStatistics0.getStandardDeviation();
        double double21 = descriptiveStatistics0.getMin();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[0.0]");
        org.junit.Assert.assertNotNull(descriptiveStatistics11);
        org.junit.Assert.assertNotNull(univariateStatistic12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    }

    @Test
    public void test01988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01988");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        int int2 = resizableDoubleArray0.getNumElements();
        int int3 = resizableDoubleArray0.start();
        resizableDoubleArray0.setElement((int) (short) 10, (double) 100L);
        double[] doubleArray7 = resizableDoubleArray0.getValues();
        double double9 = resizableDoubleArray0.addElementRolling(0.0d);
        int int10 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.contract();
        double[] doubleArray12 = resizableDoubleArray0.getElements();
        resizableDoubleArray0.clear();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.discardFrontElements(35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot discard more elements than arecontained in this array.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 11 + "'", int10 == 11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100.0, 0.0]");
    }

    @Test
    public void test01989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01989");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.start();
        resizableDoubleArray0.setElement(100, (double) (byte) 100);
        resizableDoubleArray0.addElement(2.0d);
        float float7 = resizableDoubleArray0.getContractionCriteria();
        double double9 = resizableDoubleArray0.addElementRolling((double) 10);
        resizableDoubleArray0.clear();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray0.setContractionCriteria(0.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Contraction criteria can never be smaller than the expansion factor.  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + float7 + "' != '" + 2.5f + "'", float7 == 2.5f);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
    }

    @Test
    public void test01990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01990");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 100);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic2 = descriptiveStatistics1.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics3 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic4 = descriptiveStatistics3.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        descriptiveStatistics3.setKurtosisImpl(univariateStatistic6);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics8 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics8.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics10 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics10.getSumsqImpl();
        descriptiveStatistics8.setKurtosisImpl(univariateStatistic11);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics8.getKurtosisImpl();
        descriptiveStatistics3.setMaxImpl(univariateStatistic13);
        double double15 = descriptiveStatistics3.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics3.getMinImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics3.getVarianceImpl();
        descriptiveStatistics1.setMinImpl(univariateStatistic17);
        double double19 = descriptiveStatistics1.getMin();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics1.getSumImpl();
        descriptiveStatistics1.clear();
        long long22 = descriptiveStatistics1.getN();
        double double23 = descriptiveStatistics1.getSumsq();
        double double24 = descriptiveStatistics1.getStandardDeviation();
        org.junit.Assert.assertNotNull(univariateStatistic2);
        org.junit.Assert.assertNotNull(descriptiveStatistics3);
        org.junit.Assert.assertNotNull(univariateStatistic4);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics8);
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertNotNull(descriptiveStatistics10);
        org.junit.Assert.assertNotNull(univariateStatistic11);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
    }

    @Test
    public void test01991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01991");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (byte) -1);
        double double2 = descriptiveStatistics1.getGeometricMean();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics1.getGeometricMeanImpl();
        double double4 = descriptiveStatistics1.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics5.getKurtosisImpl();
        double[] doubleArray8 = descriptiveStatistics5.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic9 = descriptiveStatistics5.getVarianceImpl();
        descriptiveStatistics1.setSumsqImpl(univariateStatistic9);
        long long11 = descriptiveStatistics1.getN();
        double double12 = descriptiveStatistics1.getSum();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics13 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str14 = descriptiveStatistics13.toString();
        double double15 = descriptiveStatistics13.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics16 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics16.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics18 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic19 = descriptiveStatistics18.getSumsqImpl();
        descriptiveStatistics16.setKurtosisImpl(univariateStatistic19);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic21 = descriptiveStatistics16.getKurtosisImpl();
        double double22 = descriptiveStatistics13.apply(univariateStatistic21);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics23 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics23.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics25 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics25.getSumsqImpl();
        descriptiveStatistics23.setKurtosisImpl(univariateStatistic26);
        double double28 = descriptiveStatistics23.getMean();
        descriptiveStatistics23.addValue((double) (byte) 10);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics32 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double33 = descriptiveStatistics32.getStandardDeviation();
        long long34 = descriptiveStatistics32.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic35 = descriptiveStatistics32.getMinImpl();
        descriptiveStatistics23.setSkewnessImpl(univariateStatistic35);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic37 = descriptiveStatistics23.getMeanImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics23.getSumsqImpl();
        descriptiveStatistics13.setKurtosisImpl(univariateStatistic38);
        descriptiveStatistics1.setGeometricMeanImpl(univariateStatistic38);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic41 = descriptiveStatistics1.getKurtosisImpl();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(descriptiveStatistics13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str14, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(descriptiveStatistics16);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertNotNull(descriptiveStatistics18);
        org.junit.Assert.assertNotNull(univariateStatistic19);
        org.junit.Assert.assertNotNull(univariateStatistic21);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(descriptiveStatistics23);
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertNotNull(descriptiveStatistics25);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic35);
        org.junit.Assert.assertNotNull(univariateStatistic37);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertNotNull(univariateStatistic41);
    }

    @Test
    public void test01992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01992");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement(0.0d);
        int int4 = resizableDoubleArray0.getNumElements();
        int int5 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.discardFrontElements((int) (byte) 1);
        float float8 = resizableDoubleArray0.getContractionCriteria();
        resizableDoubleArray0.addElement((double) 32.0f);
        int int11 = resizableDoubleArray0.getNumElements();
        resizableDoubleArray0.clear();
        double double14 = resizableDoubleArray0.addElementRolling((double) 97);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 2.5f + "'", float8 == 2.5f);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test01993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01993");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics5 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics5.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic8 = descriptiveStatistics7.getSumsqImpl();
        descriptiveStatistics5.setKurtosisImpl(univariateStatistic8);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics5.getKurtosisImpl();
        descriptiveStatistics0.setMaxImpl(univariateStatistic10);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics12 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics12.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics14 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic15 = descriptiveStatistics14.getSumsqImpl();
        descriptiveStatistics12.setKurtosisImpl(univariateStatistic15);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic17 = descriptiveStatistics12.getKurtosisImpl();
        descriptiveStatistics0.setGeometricMeanImpl(univariateStatistic17);
        double double19 = descriptiveStatistics0.getMin();
        double double20 = descriptiveStatistics0.getGeometricMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics21 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str22 = descriptiveStatistics21.toString();
        descriptiveStatistics21.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic24 = descriptiveStatistics21.getGeometricMeanImpl();
        double double25 = descriptiveStatistics21.getMax();
        double double26 = descriptiveStatistics21.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic27 = descriptiveStatistics21.getVarianceImpl();
        double double28 = descriptiveStatistics21.getSkewness();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics30 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) 1);
        double double31 = descriptiveStatistics30.getMax();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics32 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str33 = descriptiveStatistics32.toString();
        double double34 = descriptiveStatistics32.getMean();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics35 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic36 = descriptiveStatistics35.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics37 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic38 = descriptiveStatistics37.getSumsqImpl();
        descriptiveStatistics35.setKurtosisImpl(univariateStatistic38);
        descriptiveStatistics32.setSkewnessImpl(univariateStatistic38);
        double double41 = descriptiveStatistics32.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics42 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic43 = descriptiveStatistics42.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics44 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic45 = descriptiveStatistics44.getSumsqImpl();
        descriptiveStatistics42.setKurtosisImpl(univariateStatistic45);
        descriptiveStatistics42.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic48 = descriptiveStatistics42.getPercentileImpl();
        double double49 = descriptiveStatistics42.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics50 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic51 = descriptiveStatistics50.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic52 = descriptiveStatistics50.getKurtosisImpl();
        double[] doubleArray53 = descriptiveStatistics50.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic54 = descriptiveStatistics50.getVarianceImpl();
        double double55 = descriptiveStatistics42.apply(univariateStatistic54);
        double double56 = descriptiveStatistics32.apply(univariateStatistic54);
        descriptiveStatistics30.setKurtosisImpl(univariateStatistic54);
        descriptiveStatistics21.setMeanImpl(univariateStatistic54);
        double double59 = descriptiveStatistics0.apply(univariateStatistic54);
        double double60 = descriptiveStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic61 = descriptiveStatistics0.getKurtosisImpl();
        double double62 = descriptiveStatistics0.getSum();
        double double63 = descriptiveStatistics0.getKurtosis();
        double double64 = descriptiveStatistics0.getKurtosis();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(descriptiveStatistics5);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertNotNull(univariateStatistic8);
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertNotNull(descriptiveStatistics12);
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertNotNull(descriptiveStatistics14);
        org.junit.Assert.assertNotNull(univariateStatistic15);
        org.junit.Assert.assertNotNull(univariateStatistic17);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(descriptiveStatistics21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str22, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic24);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(univariateStatistic27);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(descriptiveStatistics32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str33, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(descriptiveStatistics35);
        org.junit.Assert.assertNotNull(univariateStatistic36);
        org.junit.Assert.assertNotNull(descriptiveStatistics37);
        org.junit.Assert.assertNotNull(univariateStatistic38);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(descriptiveStatistics42);
        org.junit.Assert.assertNotNull(univariateStatistic43);
        org.junit.Assert.assertNotNull(descriptiveStatistics44);
        org.junit.Assert.assertNotNull(univariateStatistic45);
        org.junit.Assert.assertNotNull(univariateStatistic48);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(descriptiveStatistics50);
        org.junit.Assert.assertNotNull(univariateStatistic51);
        org.junit.Assert.assertNotNull(univariateStatistic52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic54);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(univariateStatistic61);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
    }

    @Test
    public void test01994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01994");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray1 = new org.apache.commons.math.util.ResizableDoubleArray((int) (byte) 10);
        double[] doubleArray2 = resizableDoubleArray1.getValues();
        int int3 = resizableDoubleArray1.getNumElements();
        int int4 = resizableDoubleArray1.getNumElements();
        double[] doubleArray5 = resizableDoubleArray1.getElements();
        // The following exception was thrown during execution in test generation
        try {
            resizableDoubleArray1.setElement((-1), (double) 91);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Cannot set an element at a negative index");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
    }

    @Test
    public void test01995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01995");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        float float1 = resizableDoubleArray0.getExpansionFactor();
        resizableDoubleArray0.clear();
        resizableDoubleArray0.setNumElements((int) ' ');
        float float5 = resizableDoubleArray0.getContractionCriteria();
        resizableDoubleArray0.discardFrontElements(1);
        resizableDoubleArray0.setElement((int) (short) 0, (double) 100);
        double double12 = resizableDoubleArray0.getElement(11);
        int int13 = resizableDoubleArray0.getNumElements();
        org.junit.Assert.assertTrue("'" + float1 + "' != '" + 2.0f + "'", float1 == 2.0f);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 2.5f + "'", float5 == 2.5f);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 31 + "'", int13 == 31);
    }

    @Test
    public void test01996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01996");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray3 = new org.apache.commons.math.util.ResizableDoubleArray((int) (short) 100, (float) (short) 10, 10.0f);
        double[] doubleArray4 = resizableDoubleArray3.getValues();
        resizableDoubleArray3.addElement((double) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double8 = resizableDoubleArray3.getElement(91);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: The index specified: 91 is larger than the current number of elements");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test01997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01997");
        org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray0 = new org.apache.commons.math.util.ResizableDoubleArray();
        int int1 = resizableDoubleArray0.getExpansionMode();
        resizableDoubleArray0.addElement(0.0d);
        float float4 = resizableDoubleArray0.getExpansionFactor();
        double[] doubleArray5 = resizableDoubleArray0.getValues();
        float float6 = resizableDoubleArray0.getExpansionFactor();
        // The following exception was thrown during execution in test generation
        try {
            double double8 = resizableDoubleArray0.getElement((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Elements cannot be retrieved from a negative array index");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 2.0f + "'", float4 == 2.0f);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + float6 + "' != '" + 2.0f + "'", float6 == 2.0f);
    }

    @Test
    public void test01998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01998");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics1 = new org.apache.commons.math.stat.descriptive.DescriptiveStatistics((int) (short) -1);
        double double2 = descriptiveStatistics1.getStandardDeviation();
        double double3 = descriptiveStatistics1.getVariance();
        double double4 = descriptiveStatistics1.getSum();
        double double6 = descriptiveStatistics1.getPercentile(2.0d);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics7 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        java.lang.String str8 = descriptiveStatistics7.toString();
        descriptiveStatistics7.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic10 = descriptiveStatistics7.getGeometricMeanImpl();
        double double11 = descriptiveStatistics7.getMax();
        double[] doubleArray12 = descriptiveStatistics7.getSortedValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic13 = descriptiveStatistics7.getMaxImpl();
        double double14 = descriptiveStatistics1.apply(univariateStatistic13);
        double[] doubleArray15 = descriptiveStatistics1.getSortedValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic16 = descriptiveStatistics1.getMinImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics17 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic18 = descriptiveStatistics17.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics19 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic20 = descriptiveStatistics19.getSumsqImpl();
        descriptiveStatistics17.setKurtosisImpl(univariateStatistic20);
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic22 = descriptiveStatistics17.getKurtosisImpl();
        double double23 = descriptiveStatistics17.getStandardDeviation();
        double double24 = descriptiveStatistics17.getSum();
        long long25 = descriptiveStatistics17.getN();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic26 = descriptiveStatistics17.getSumsqImpl();
        descriptiveStatistics1.setVarianceImpl(univariateStatistic26);
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics28 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic29 = descriptiveStatistics28.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic30 = descriptiveStatistics28.getKurtosisImpl();
        double[] doubleArray31 = descriptiveStatistics28.getValues();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic32 = descriptiveStatistics28.getVarianceImpl();
        double double33 = descriptiveStatistics28.getGeometricMean();
        long long34 = descriptiveStatistics28.getN();
        descriptiveStatistics28.clear();
        descriptiveStatistics28.clear();
        double[] doubleArray37 = descriptiveStatistics28.getSortedValues();
        // The following exception was thrown during execution in test generation
        try {
            double double40 = univariateStatistic26.evaluate(doubleArray37, 101, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(descriptiveStatistics7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n" + "'", str8, "DescriptiveStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\nstd dev: NaN\nmedian: NaN\nskewness: NaN\nkurtosis: NaN\n");
        org.junit.Assert.assertNotNull(univariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic16);
        org.junit.Assert.assertNotNull(descriptiveStatistics17);
        org.junit.Assert.assertNotNull(univariateStatistic18);
        org.junit.Assert.assertNotNull(descriptiveStatistics19);
        org.junit.Assert.assertNotNull(univariateStatistic20);
        org.junit.Assert.assertNotNull(univariateStatistic22);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(univariateStatistic26);
        org.junit.Assert.assertNotNull(descriptiveStatistics28);
        org.junit.Assert.assertNotNull(univariateStatistic29);
        org.junit.Assert.assertNotNull(univariateStatistic30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(univariateStatistic32);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
    }

    @Test
    public void test01999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01999");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.util.ResizableDoubleArray resizableDoubleArray4 = new org.apache.commons.math.util.ResizableDoubleArray(100, (float) (-1L), (float) 1L, 91);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The expansion factor must be a number greater than 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test02000");
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics0 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic1 = descriptiveStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.DescriptiveStatistics descriptiveStatistics2 = org.apache.commons.math.stat.descriptive.DescriptiveStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic3 = descriptiveStatistics2.getSumsqImpl();
        descriptiveStatistics0.setKurtosisImpl(univariateStatistic3);
        descriptiveStatistics0.clear();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic6 = descriptiveStatistics0.getPercentileImpl();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic7 = descriptiveStatistics0.getMeanImpl();
        int int8 = descriptiveStatistics0.getWindowSize();
        double double9 = descriptiveStatistics0.getMean();
        double double10 = descriptiveStatistics0.getSumsq();
        org.apache.commons.math.stat.descriptive.UnivariateStatistic univariateStatistic11 = descriptiveStatistics0.getMeanImpl();
        org.junit.Assert.assertNotNull(descriptiveStatistics0);
        org.junit.Assert.assertNotNull(univariateStatistic1);
        org.junit.Assert.assertNotNull(descriptiveStatistics2);
        org.junit.Assert.assertNotNull(univariateStatistic3);
        org.junit.Assert.assertNotNull(univariateStatistic6);
        org.junit.Assert.assertNotNull(univariateStatistic7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(univariateStatistic11);
    }
}


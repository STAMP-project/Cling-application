import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest19 {

    public static boolean debug = false;

    @Test
    public void test09501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09501");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        enhancer8.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        enhancer12.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        enhancer16.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer16.setClassLoader(classLoader21);
        enhancer16.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer25.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer25.setClassLoader(classLoader30);
        enhancer25.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = enhancer25.getNamingPolicy();
        enhancer16.setNamingPolicy(namingPolicy34);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        enhancer36.setUseCache(true);
        boolean boolean40 = enhancer36.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader42 = enhancer41.getClassLoader();
        enhancer41.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader45 = enhancer41.getClassLoader();
        java.lang.Class class46 = null;
        enhancer41.setSuperclass(class46);
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        enhancer48.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer52 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader53 = enhancer52.getClassLoader();
        enhancer48.setClassLoader(classLoader53);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = enhancer48.getStrategy();
        java.lang.Class<?> wildcardClass56 = enhancer48.getClass();
        enhancer41.setSuperclass((java.lang.Class) wildcardClass56);
        enhancer36.setSuperclass((java.lang.Class) wildcardClass56);
        boolean boolean59 = namingPolicy34.equals((java.lang.Object) enhancer36);
        enhancer12.setNamingPolicy(namingPolicy34);
        enhancer8.setNamingPolicy(namingPolicy34);
        enhancer0.setNamingPolicy(namingPolicy34);
        org.mockito.cglib.proxy.Enhancer enhancer63 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader64 = enhancer63.getClassLoader();
        enhancer63.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer67 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader68 = enhancer67.getClassLoader();
        enhancer63.setClassLoader(classLoader68);
        enhancer63.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer72 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader73 = enhancer72.getClassLoader();
        enhancer72.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer76 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader77 = enhancer76.getClassLoader();
        enhancer72.setClassLoader(classLoader77);
        enhancer72.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy81 = enhancer72.getNamingPolicy();
        enhancer63.setNamingPolicy(namingPolicy81);
        org.mockito.cglib.proxy.Enhancer enhancer83 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader84 = enhancer83.getClassLoader();
        enhancer83.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader87 = enhancer83.getClassLoader();
        org.mockito.cglib.proxy.Callback callback88 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray89 = new org.mockito.cglib.proxy.Callback[] { callback88 };
        enhancer83.setCallbacks(callbackArray89);
        enhancer63.setCallbacks(callbackArray89);
        enhancer0.setCallbacks(callbackArray89);
        enhancer0.setInterceptDuringConstruction(true);
        boolean boolean95 = enhancer0.getAttemptLoad();
        java.lang.ClassLoader classLoader96 = enhancer0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy97 = enhancer0.getNamingPolicy();
        java.lang.Class<?> wildcardClass98 = enhancer0.getClass();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertNotNull(classLoader68);
        org.junit.Assert.assertNotNull(classLoader73);
        org.junit.Assert.assertNotNull(classLoader77);
        org.junit.Assert.assertNotNull(namingPolicy81);
        org.junit.Assert.assertNotNull(classLoader84);
        org.junit.Assert.assertNotNull(classLoader87);
        org.junit.Assert.assertNotNull(callbackArray89);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(classLoader96);
        org.junit.Assert.assertNotNull(namingPolicy97);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test09502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09502");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader9 = enhancer0.getClassLoader();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Callback callback12 = null;
        enhancer0.setCallback(callback12);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter14 = null;
        enhancer0.setCallbackFilter(callbackFilter14);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        enhancer16.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer16.setClassLoader(classLoader21);
        enhancer16.setUseCache(false);
        java.lang.ClassLoader classLoader25 = enhancer16.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = enhancer16.getNamingPolicy();
        java.lang.Class<?> wildcardClass27 = enhancer16.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass27);
        enhancer0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        boolean boolean33 = enhancer31.getAttemptLoad();
        enhancer31.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        enhancer36.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader40 = enhancer36.getClassLoader();
        org.mockito.cglib.proxy.Callback callback41 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray42 = new org.mockito.cglib.proxy.Callback[] { callback41 };
        enhancer36.setCallbacks(callbackArray42);
        enhancer36.setSerialVersionUID((java.lang.Long) 0L);
        boolean boolean46 = enhancer36.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer47 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader48 = enhancer47.getClassLoader();
        enhancer47.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer51 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader52 = enhancer51.getClassLoader();
        enhancer47.setClassLoader(classLoader52);
        enhancer47.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader57 = enhancer56.getClassLoader();
        enhancer56.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer60 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader61 = enhancer60.getClassLoader();
        enhancer56.setClassLoader(classLoader61);
        enhancer56.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = enhancer56.getNamingPolicy();
        enhancer47.setNamingPolicy(namingPolicy65);
        org.mockito.cglib.proxy.Enhancer enhancer67 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader68 = enhancer67.getClassLoader();
        enhancer67.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader71 = enhancer67.getClassLoader();
        java.lang.Class class72 = null;
        enhancer67.setSuperclass(class72);
        org.mockito.cglib.proxy.Enhancer enhancer74 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader75 = enhancer74.getClassLoader();
        enhancer74.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer78 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader79 = enhancer78.getClassLoader();
        enhancer74.setClassLoader(classLoader79);
        enhancer74.setUseCache(false);
        java.lang.ClassLoader classLoader83 = enhancer74.getClassLoader();
        enhancer67.setClassLoader(classLoader83);
        boolean boolean85 = namingPolicy65.equals((java.lang.Object) enhancer67);
        enhancer36.setNamingPolicy(namingPolicy65);
        enhancer31.setNamingPolicy(namingPolicy65);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy88 = enhancer31.getStrategy();
        enhancer0.setStrategy(generatorStrategy88);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy92 = enhancer0.getStrategy();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter95 = null;
        enhancer0.setCallbackFilter(callbackFilter95);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj97 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(callbackArray42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertNotNull(classLoader68);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertNotNull(classLoader75);
        org.junit.Assert.assertNotNull(classLoader79);
        org.junit.Assert.assertNotNull(classLoader83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(generatorStrategy88);
        org.junit.Assert.assertNotNull(generatorStrategy92);
    }

    @Test
    public void test09503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09503");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        boolean boolean11 = enhancer7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer7.getStrategy();
        enhancer0.setStrategy(generatorStrategy12);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader18 = enhancer14.getClassLoader();
        java.lang.Class class19 = null;
        enhancer14.setSuperclass(class19);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer21.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer21.setClassLoader(classLoader26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = enhancer21.getStrategy();
        java.lang.Class<?> wildcardClass29 = enhancer21.getClass();
        enhancer14.setSuperclass((java.lang.Class) wildcardClass29);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass29);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        enhancer32.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        enhancer32.setClassLoader(classLoader37);
        enhancer32.setUseCache(false);
        java.lang.ClassLoader classLoader41 = enhancer32.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = enhancer32.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy42);
        enhancer0.setInterceptDuringConstruction(true);
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter48 = null;
        enhancer0.setCallbackFilter(callbackFilter48);
        org.mockito.cglib.proxy.Enhancer enhancer50 = new org.mockito.cglib.proxy.Enhancer();
        enhancer50.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = enhancer50.getStrategy();
        enhancer0.setStrategy(generatorStrategy53);
        enhancer0.setSerialVersionUID((java.lang.Long) (-1L));
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = enhancer0.getNamingPolicy();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(namingPolicy59);
    }

    @Test
    public void test09504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09504");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = enhancer0.getStrategy();
        enhancer0.setInterceptDuringConstruction(true);
        enhancer0.setAttemptLoad(false);
        enhancer0.setSerialVersionUID((java.lang.Long) 1L);
        enhancer0.setAttemptLoad(true);
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = enhancer0.getStrategy();
        enhancer0.setUseFactory(true);
        java.lang.Class class22 = null;
        enhancer0.setSuperclass(class22);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        enhancer24.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader29 = enhancer28.getClassLoader();
        enhancer24.setClassLoader(classLoader29);
        enhancer24.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader34 = enhancer33.getClassLoader();
        enhancer33.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        enhancer33.setClassLoader(classLoader38);
        enhancer33.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = enhancer33.getNamingPolicy();
        enhancer24.setNamingPolicy(namingPolicy42);
        enhancer24.setInterceptDuringConstruction(true);
        enhancer24.setUseCache(false);
        enhancer24.setAttemptLoad(true);
        enhancer24.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = enhancer24.getStrategy();
        java.lang.Object obj53 = null;
        boolean boolean54 = generatorStrategy52.equals(obj53);
        enhancer0.setStrategy(generatorStrategy52);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj56 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test09505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09505");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        java.lang.ClassLoader classLoader7 = enhancer0.getClassLoader();
        boolean boolean8 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader13 = enhancer9.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader18 = enhancer14.getClassLoader();
        org.mockito.cglib.proxy.Callback callback19 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray20 = new org.mockito.cglib.proxy.Callback[] { callback19 };
        enhancer14.setCallbacks(callbackArray20);
        enhancer9.setCallbacks(callbackArray20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer9.getStrategy();
        enhancer0.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer25.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer25.setClassLoader(classLoader30);
        enhancer25.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        enhancer34.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader39 = enhancer38.getClassLoader();
        enhancer34.setClassLoader(classLoader39);
        enhancer34.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = enhancer34.getNamingPolicy();
        enhancer25.setNamingPolicy(namingPolicy43);
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader46 = enhancer45.getClassLoader();
        enhancer45.setInterceptDuringConstruction(true);
        boolean boolean49 = namingPolicy43.equals((java.lang.Object) enhancer45);
        java.lang.ClassLoader classLoader50 = enhancer45.getClassLoader();
        enhancer0.setClassLoader(classLoader50);
        org.mockito.cglib.proxy.Enhancer enhancer52 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer53 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader54 = enhancer53.getClassLoader();
        enhancer53.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader58 = enhancer57.getClassLoader();
        enhancer53.setClassLoader(classLoader58);
        enhancer52.setClassLoader(classLoader58);
        org.mockito.cglib.proxy.Enhancer enhancer61 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader62 = enhancer61.getClassLoader();
        enhancer61.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader65 = enhancer61.getClassLoader();
        enhancer52.setClassLoader(classLoader65);
        enhancer0.setClassLoader(classLoader65);
        org.mockito.cglib.proxy.Enhancer enhancer68 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader69 = enhancer68.getClassLoader();
        enhancer68.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer72 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader73 = enhancer72.getClassLoader();
        enhancer68.setClassLoader(classLoader73);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = enhancer68.getStrategy();
        enhancer0.setStrategy(generatorStrategy75);
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.proxy.Callback callback79 = null;
        enhancer0.setCallback(callback79);
        enhancer0.setInterceptDuringConstruction(true);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(callbackArray20);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(classLoader69);
        org.junit.Assert.assertNotNull(classLoader73);
        org.junit.Assert.assertNotNull(generatorStrategy75);
    }

    @Test
    public void test09506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09506");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter7 = null;
        enhancer0.setCallbackFilter(callbackFilter7);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer11.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        enhancer11.setClassLoader(classLoader16);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter18 = null;
        enhancer11.setCallbackFilter(callbackFilter18);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer20.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        enhancer20.setClassLoader(classLoader25);
        enhancer20.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer29.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader34 = enhancer33.getClassLoader();
        enhancer29.setClassLoader(classLoader34);
        enhancer29.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = enhancer29.getNamingPolicy();
        enhancer20.setNamingPolicy(namingPolicy38);
        enhancer11.setNamingPolicy(namingPolicy38);
        enhancer0.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = enhancer0.getNamingPolicy();
        enhancer0.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader46 = enhancer45.getClassLoader();
        enhancer45.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader50 = enhancer49.getClassLoader();
        enhancer45.setClassLoader(classLoader50);
        enhancer45.setUseCache(false);
        boolean boolean54 = enhancer45.getAttemptLoad();
        java.lang.ClassLoader classLoader55 = enhancer45.getClassLoader();
        enhancer45.setInterceptDuringConstruction(false);
        enhancer45.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer60 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader61 = enhancer60.getClassLoader();
        enhancer60.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer64 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader65 = enhancer64.getClassLoader();
        enhancer60.setClassLoader(classLoader65);
        org.mockito.cglib.proxy.Enhancer enhancer67 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader68 = enhancer67.getClassLoader();
        enhancer67.setInterceptDuringConstruction(true);
        boolean boolean71 = enhancer67.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = enhancer67.getStrategy();
        java.lang.Class[] classArray73 = new java.lang.Class[] {};
        enhancer67.setInterfaces(classArray73);
        enhancer60.setInterfaces(classArray73);
        enhancer45.setInterfaces(classArray73);
        enhancer0.setInterfaces(classArray73);
        enhancer0.setAttemptLoad(false);
        enhancer0.setUseFactory(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = enhancer0.getStrategy();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(classLoader68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(generatorStrategy82);
    }

    @Test
    public void test09507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09507");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader13 = enhancer9.getClassLoader();
        java.lang.Class class14 = null;
        enhancer9.setSuperclass(class14);
        enhancer9.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        enhancer18.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer18.setClassLoader(classLoader23);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = enhancer18.getStrategy();
        enhancer9.setStrategy(generatorStrategy25);
        enhancer0.setStrategy(generatorStrategy25);
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader29 = enhancer28.getClassLoader();
        enhancer28.setInterceptDuringConstruction(true);
        boolean boolean32 = enhancer28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = enhancer28.getStrategy();
        boolean boolean34 = enhancer28.getUseCache();
        boolean boolean35 = generatorStrategy25.equals((java.lang.Object) enhancer28);
        java.lang.ClassLoader classLoader36 = enhancer28.getClassLoader();
        enhancer28.setInterceptDuringConstruction(true);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(classLoader36);
    }

    @Test
    public void test09508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09508");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = enhancer0.getNamingPolicy();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        enhancer12.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader16 = enhancer12.getClassLoader();
        java.lang.Class class17 = null;
        enhancer12.setSuperclass(class17);
        enhancer12.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer21.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer21.setClassLoader(classLoader26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = enhancer21.getStrategy();
        enhancer12.setStrategy(generatorStrategy28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = enhancer12.getStrategy();
        enhancer0.setStrategy(generatorStrategy30);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = enhancer0.getNamingPolicy();
        enhancer0.setUseFactory(false);
        enhancer0.setUseCache(true);
        enhancer0.setAttemptLoad(false);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(namingPolicy32);
    }

    @Test
    public void test09509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09509");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader9 = enhancer0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = enhancer0.getNamingPolicy();
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer13.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        enhancer13.setClassLoader(classLoader18);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = enhancer13.getStrategy();
        enhancer13.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        enhancer23.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = enhancer23.getStrategy();
        enhancer13.setStrategy(generatorStrategy26);
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader29 = enhancer28.getClassLoader();
        enhancer28.setInterceptDuringConstruction(true);
        boolean boolean32 = enhancer28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = enhancer28.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        enhancer34.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader38 = enhancer34.getClassLoader();
        org.mockito.cglib.proxy.Callback callback39 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray40 = new org.mockito.cglib.proxy.Callback[] { callback39 };
        enhancer34.setCallbacks(callbackArray40);
        enhancer28.setCallbacks(callbackArray40);
        enhancer13.setCallbacks(callbackArray40);
        enhancer0.setCallbacks(callbackArray40);
        enhancer0.setUseCache(true);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(callbackArray40);
    }

    @Test
    public void test09510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09510");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Object obj6 = null;
        boolean boolean7 = generatorStrategy5.equals(obj6);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        enhancer8.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader12 = enhancer8.getClassLoader();
        org.mockito.cglib.proxy.Callback callback13 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray14 = new org.mockito.cglib.proxy.Callback[] { callback13 };
        enhancer8.setCallbacks(callbackArray14);
        enhancer8.setSerialVersionUID((java.lang.Long) 0L);
        enhancer8.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer20.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader24 = enhancer20.getClassLoader();
        org.mockito.cglib.proxy.Callback callback25 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray26 = new org.mockito.cglib.proxy.Callback[] { callback25 };
        enhancer20.setCallbacks(callbackArray26);
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader29 = enhancer28.getClassLoader();
        enhancer28.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader32 = enhancer28.getClassLoader();
        java.lang.Class class33 = null;
        enhancer28.setSuperclass(class33);
        java.lang.Class<?> wildcardClass35 = enhancer28.getClass();
        boolean boolean36 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass35);
        enhancer20.setSuperclass((java.lang.Class) wildcardClass35);
        enhancer8.setSuperclass((java.lang.Class) wildcardClass35);
        boolean boolean39 = generatorStrategy5.equals((java.lang.Object) enhancer8);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter40 = null;
        enhancer8.setCallbackFilter(callbackFilter40);
        org.mockito.asm.ClassVisitor classVisitor42 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer8.generateClass(classVisitor42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(callbackArray14);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(callbackArray26);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test09511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09511");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        boolean boolean4 = enhancer0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader7 = enhancer6.getClassLoader();
        enhancer6.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader10 = enhancer6.getClassLoader();
        org.mockito.cglib.proxy.Callback callback11 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray12 = new org.mockito.cglib.proxy.Callback[] { callback11 };
        enhancer6.setCallbacks(callbackArray12);
        enhancer0.setCallbacks(callbackArray12);
        java.lang.ClassLoader classLoader15 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer0.getNamingPolicy();
        enhancer0.setInterceptDuringConstruction(false);
        enhancer0.setAttemptLoad(true);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(callbackArray12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(namingPolicy18);
    }

    @Test
    public void test09512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09512");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        boolean boolean11 = enhancer7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer7.getStrategy();
        enhancer0.setStrategy(generatorStrategy12);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        enhancer0.setStrategy(generatorStrategy14);
        org.mockito.cglib.proxy.Callback callback16 = null;
        enhancer0.setCallback(callback16);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader20 = enhancer19.getClassLoader();
        enhancer19.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader23 = enhancer19.getClassLoader();
        java.lang.Class class24 = null;
        enhancer19.setSuperclass(class24);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        enhancer26.setInterceptDuringConstruction(true);
        boolean boolean30 = enhancer26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = enhancer26.getStrategy();
        enhancer19.setStrategy(generatorStrategy31);
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader34 = enhancer33.getClassLoader();
        enhancer33.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader37 = enhancer33.getClassLoader();
        java.lang.Class class38 = null;
        enhancer33.setSuperclass(class38);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        enhancer40.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader45 = enhancer44.getClassLoader();
        enhancer40.setClassLoader(classLoader45);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = enhancer40.getStrategy();
        java.lang.Class<?> wildcardClass48 = enhancer40.getClass();
        enhancer33.setSuperclass((java.lang.Class) wildcardClass48);
        enhancer19.setSuperclass((java.lang.Class) wildcardClass48);
        boolean boolean51 = enhancer19.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer52 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer53 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader54 = enhancer53.getClassLoader();
        enhancer53.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader58 = enhancer57.getClassLoader();
        enhancer53.setClassLoader(classLoader58);
        enhancer52.setClassLoader(classLoader58);
        org.mockito.cglib.proxy.Enhancer enhancer61 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader62 = enhancer61.getClassLoader();
        enhancer61.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader65 = enhancer61.getClassLoader();
        enhancer52.setClassLoader(classLoader65);
        boolean boolean67 = enhancer52.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer68 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader69 = enhancer68.getClassLoader();
        enhancer68.setInterceptDuringConstruction(true);
        boolean boolean72 = enhancer68.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = enhancer68.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer74 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader75 = enhancer74.getClassLoader();
        enhancer74.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader78 = enhancer74.getClassLoader();
        org.mockito.cglib.proxy.Callback callback79 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray80 = new org.mockito.cglib.proxy.Callback[] { callback79 };
        enhancer74.setCallbacks(callbackArray80);
        enhancer68.setCallbacks(callbackArray80);
        enhancer52.setCallbacks(callbackArray80);
        enhancer19.setCallbacks(callbackArray80);
        enhancer0.setCallbacks(callbackArray80);
        enhancer0.setUseFactory(true);
        org.mockito.asm.ClassVisitor classVisitor88 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(classLoader69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(generatorStrategy73);
        org.junit.Assert.assertNotNull(classLoader75);
        org.junit.Assert.assertNotNull(classLoader78);
        org.junit.Assert.assertNotNull(callbackArray80);
    }

    @Test
    public void test09513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09513");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader9 = enhancer0.getClassLoader();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Callback callback12 = null;
        enhancer0.setCallback(callback12);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter14 = null;
        enhancer0.setCallbackFilter(callbackFilter14);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        enhancer16.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer16.setClassLoader(classLoader21);
        enhancer16.setUseCache(false);
        java.lang.ClassLoader classLoader25 = enhancer16.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = enhancer16.getNamingPolicy();
        java.lang.Class<?> wildcardClass27 = enhancer16.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass27);
        enhancer0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        boolean boolean33 = enhancer31.getAttemptLoad();
        enhancer31.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        enhancer36.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader40 = enhancer36.getClassLoader();
        org.mockito.cglib.proxy.Callback callback41 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray42 = new org.mockito.cglib.proxy.Callback[] { callback41 };
        enhancer36.setCallbacks(callbackArray42);
        enhancer36.setSerialVersionUID((java.lang.Long) 0L);
        boolean boolean46 = enhancer36.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer47 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader48 = enhancer47.getClassLoader();
        enhancer47.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer51 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader52 = enhancer51.getClassLoader();
        enhancer47.setClassLoader(classLoader52);
        enhancer47.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader57 = enhancer56.getClassLoader();
        enhancer56.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer60 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader61 = enhancer60.getClassLoader();
        enhancer56.setClassLoader(classLoader61);
        enhancer56.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = enhancer56.getNamingPolicy();
        enhancer47.setNamingPolicy(namingPolicy65);
        org.mockito.cglib.proxy.Enhancer enhancer67 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader68 = enhancer67.getClassLoader();
        enhancer67.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader71 = enhancer67.getClassLoader();
        java.lang.Class class72 = null;
        enhancer67.setSuperclass(class72);
        org.mockito.cglib.proxy.Enhancer enhancer74 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader75 = enhancer74.getClassLoader();
        enhancer74.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer78 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader79 = enhancer78.getClassLoader();
        enhancer74.setClassLoader(classLoader79);
        enhancer74.setUseCache(false);
        java.lang.ClassLoader classLoader83 = enhancer74.getClassLoader();
        enhancer67.setClassLoader(classLoader83);
        boolean boolean85 = namingPolicy65.equals((java.lang.Object) enhancer67);
        enhancer36.setNamingPolicy(namingPolicy65);
        enhancer31.setNamingPolicy(namingPolicy65);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy88 = enhancer31.getStrategy();
        enhancer0.setStrategy(generatorStrategy88);
        enhancer0.setAttemptLoad(true);
        boolean boolean92 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Callback callback93 = null;
        enhancer0.setCallback(callback93);
        org.mockito.cglib.core.NamingPolicy namingPolicy95 = enhancer0.getNamingPolicy();
        enhancer0.setUseCache(false);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(callbackArray42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertNotNull(classLoader68);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertNotNull(classLoader75);
        org.junit.Assert.assertNotNull(classLoader79);
        org.junit.Assert.assertNotNull(classLoader83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(generatorStrategy88);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(namingPolicy95);
    }

    @Test
    public void test09514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09514");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer9.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer9.getStrategy();
        enhancer0.setStrategy(generatorStrategy16);
        enhancer0.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer20.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        enhancer20.setClassLoader(classLoader25);
        enhancer20.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer29.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader34 = enhancer33.getClassLoader();
        enhancer29.setClassLoader(classLoader34);
        enhancer29.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = enhancer29.getNamingPolicy();
        enhancer20.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        enhancer40.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader44 = enhancer40.getClassLoader();
        java.lang.Class class45 = null;
        enhancer40.setSuperclass(class45);
        org.mockito.cglib.proxy.Enhancer enhancer47 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader48 = enhancer47.getClassLoader();
        enhancer47.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer51 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader52 = enhancer51.getClassLoader();
        enhancer47.setClassLoader(classLoader52);
        enhancer47.setUseCache(false);
        java.lang.ClassLoader classLoader56 = enhancer47.getClassLoader();
        enhancer40.setClassLoader(classLoader56);
        boolean boolean58 = namingPolicy38.equals((java.lang.Object) enhancer40);
        org.mockito.cglib.proxy.Enhancer enhancer59 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader60 = enhancer59.getClassLoader();
        enhancer59.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer63 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader64 = enhancer63.getClassLoader();
        enhancer59.setClassLoader(classLoader64);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = enhancer59.getStrategy();
        enhancer59.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer69 = new org.mockito.cglib.proxy.Enhancer();
        enhancer69.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = enhancer69.getStrategy();
        enhancer59.setStrategy(generatorStrategy72);
        enhancer40.setStrategy(generatorStrategy72);
        org.mockito.cglib.proxy.Enhancer enhancer75 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader76 = enhancer75.getClassLoader();
        enhancer75.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader79 = enhancer75.getClassLoader();
        org.mockito.cglib.proxy.Callback callback80 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray81 = new org.mockito.cglib.proxy.Callback[] { callback80 };
        enhancer75.setCallbacks(callbackArray81);
        enhancer40.setCallbacks(callbackArray81);
        enhancer0.setCallbacks(callbackArray81);
        enhancer0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = enhancer0.getStrategy();
        java.lang.ClassLoader classLoader88 = enhancer0.getClassLoader();
        enhancer0.setAttemptLoad(false);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter91 = null;
        enhancer0.setCallbackFilter(callbackFilter91);
        enhancer0.setInterceptDuringConstruction(true);
        enhancer0.setUseCache(true);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(classLoader60);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertNotNull(classLoader79);
        org.junit.Assert.assertNotNull(callbackArray81);
        org.junit.Assert.assertNotNull(generatorStrategy87);
        org.junit.Assert.assertNotNull(classLoader88);
    }

    @Test
    public void test09515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09515");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter2 = null;
        enhancer0.setCallbackFilter(callbackFilter2);
        boolean boolean4 = enhancer0.getAttemptLoad();
        enhancer0.setUseCache(true);
        java.lang.Class<?> wildcardClass7 = enhancer0.getClass();
        boolean boolean8 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass7);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader13 = enhancer9.getClassLoader();
        org.mockito.cglib.proxy.Callback callback14 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray15 = new org.mockito.cglib.proxy.Callback[] { callback14 };
        enhancer9.setCallbacks(callbackArray15);
        enhancer9.setSerialVersionUID((java.lang.Long) 0L);
        boolean boolean19 = enhancer9.getUseCache();
        enhancer9.setSerialVersionUID((java.lang.Long) (-1L));
        enhancer9.setAttemptLoad(true);
        org.mockito.cglib.proxy.Callback[] callbackArray24 = null;
        enhancer9.setCallbacks(callbackArray24);
        enhancer9.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader29 = enhancer28.getClassLoader();
        enhancer28.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader32 = enhancer28.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader34 = enhancer33.getClassLoader();
        enhancer33.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader37 = enhancer33.getClassLoader();
        org.mockito.cglib.proxy.Callback callback38 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray39 = new org.mockito.cglib.proxy.Callback[] { callback38 };
        enhancer33.setCallbacks(callbackArray39);
        enhancer28.setCallbacks(callbackArray39);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = enhancer28.getStrategy();
        org.mockito.cglib.proxy.Callback callback43 = null;
        enhancer28.setCallback(callback43);
        java.lang.Class[] classArray45 = null;
        enhancer28.setInterfaces(classArray45);
        enhancer28.setSerialVersionUID((java.lang.Long) 100L);
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader50 = enhancer49.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = enhancer49.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer52 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader53 = enhancer52.getClassLoader();
        enhancer52.setUseCache(true);
        boolean boolean56 = enhancer52.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader58 = enhancer57.getClassLoader();
        enhancer57.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader61 = enhancer57.getClassLoader();
        java.lang.Class class62 = null;
        enhancer57.setSuperclass(class62);
        org.mockito.cglib.proxy.Enhancer enhancer64 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader65 = enhancer64.getClassLoader();
        enhancer64.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer68 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader69 = enhancer68.getClassLoader();
        enhancer64.setClassLoader(classLoader69);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = enhancer64.getStrategy();
        java.lang.Class<?> wildcardClass72 = enhancer64.getClass();
        enhancer57.setSuperclass((java.lang.Class) wildcardClass72);
        enhancer52.setSuperclass((java.lang.Class) wildcardClass72);
        enhancer49.setSuperclass((java.lang.Class) wildcardClass72);
        org.mockito.cglib.proxy.Callback callback76 = null;
        enhancer49.setCallback(callback76);
        org.mockito.cglib.proxy.Enhancer enhancer78 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader79 = enhancer78.getClassLoader();
        enhancer78.setInterceptDuringConstruction(true);
        boolean boolean82 = enhancer78.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = enhancer78.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer84 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader85 = enhancer84.getClassLoader();
        enhancer84.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader88 = enhancer84.getClassLoader();
        org.mockito.cglib.proxy.Callback callback89 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray90 = new org.mockito.cglib.proxy.Callback[] { callback89 };
        enhancer84.setCallbacks(callbackArray90);
        enhancer78.setCallbacks(callbackArray90);
        enhancer49.setCallbacks(callbackArray90);
        enhancer28.setCallbacks(callbackArray90);
        enhancer9.setCallbacks(callbackArray90);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerStaticCallbacks((java.lang.Class) wildcardClass7, callbackArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.proxy.Enhancer is not an enhanced class");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(callbackArray15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(callbackArray39);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(classLoader69);
        org.junit.Assert.assertNotNull(generatorStrategy71);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertNotNull(classLoader79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(generatorStrategy83);
        org.junit.Assert.assertNotNull(classLoader85);
        org.junit.Assert.assertNotNull(classLoader88);
        org.junit.Assert.assertNotNull(callbackArray90);
    }

    @Test
    public void test09516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09516");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        boolean boolean4 = enhancer0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        boolean boolean6 = enhancer0.getUseCache();
        boolean boolean7 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        enhancer8.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader12 = enhancer8.getClassLoader();
        java.lang.Class class13 = null;
        enhancer8.setSuperclass(class13);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        enhancer15.setInterceptDuringConstruction(true);
        boolean boolean19 = enhancer15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = enhancer15.getStrategy();
        enhancer8.setStrategy(generatorStrategy20);
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer22.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader26 = enhancer22.getClassLoader();
        java.lang.Class class27 = null;
        enhancer22.setSuperclass(class27);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer29.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader34 = enhancer33.getClassLoader();
        enhancer29.setClassLoader(classLoader34);
        enhancer29.setUseCache(false);
        java.lang.ClassLoader classLoader38 = enhancer29.getClassLoader();
        enhancer22.setClassLoader(classLoader38);
        boolean boolean40 = generatorStrategy20.equals((java.lang.Object) enhancer22);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = enhancer22.getNamingPolicy();
        boolean boolean42 = enhancer22.getAttemptLoad();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter43 = null;
        enhancer22.setCallbackFilter(callbackFilter43);
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader46 = enhancer45.getClassLoader();
        enhancer45.setUseCache(true);
        boolean boolean49 = enhancer45.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer50 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader51 = enhancer50.getClassLoader();
        enhancer50.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader54 = enhancer50.getClassLoader();
        java.lang.Class class55 = null;
        enhancer50.setSuperclass(class55);
        java.lang.Class<?> wildcardClass57 = enhancer50.getClass();
        enhancer45.setSuperclass((java.lang.Class) wildcardClass57);
        enhancer22.setSuperclass((java.lang.Class) wildcardClass57);
        enhancer22.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = enhancer22.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer63 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader64 = enhancer63.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter65 = null;
        enhancer63.setCallbackFilter(callbackFilter65);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = enhancer63.getStrategy();
        boolean boolean68 = generatorStrategy62.equals((java.lang.Object) generatorStrategy67);
        enhancer0.setStrategy(generatorStrategy62);
        enhancer0.setUseCache(true);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer78 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader79 = enhancer78.getClassLoader();
        enhancer78.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader82 = enhancer78.getClassLoader();
        java.lang.Class class83 = null;
        enhancer78.setSuperclass(class83);
        java.lang.ClassLoader classLoader85 = enhancer78.getClassLoader();
        boolean boolean86 = enhancer78.getUseCache();
        enhancer78.setSerialVersionUID((java.lang.Long) 100L);
        java.lang.ClassLoader classLoader89 = enhancer78.getClassLoader();
        java.lang.ClassLoader classLoader90 = null;
        enhancer78.setClassLoader(classLoader90);
        org.mockito.cglib.core.Predicate predicate92 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str93 = namingPolicy75.getClassName("", "", (java.lang.Object) enhancer78, predicate92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(generatorStrategy74);
        org.junit.Assert.assertNotNull(namingPolicy75);
        org.junit.Assert.assertNotNull(classLoader79);
        org.junit.Assert.assertNotNull(classLoader82);
        org.junit.Assert.assertNotNull(classLoader85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(classLoader89);
    }

    @Test
    public void test09517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09517");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        boolean boolean2 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        enhancer5.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader9 = enhancer5.getClassLoader();
        java.lang.Class class10 = null;
        enhancer5.setSuperclass(class10);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        enhancer12.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        enhancer12.setClassLoader(classLoader17);
        enhancer12.setUseCache(false);
        java.lang.ClassLoader classLoader21 = enhancer12.getClassLoader();
        enhancer5.setClassLoader(classLoader21);
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader24 = enhancer23.getClassLoader();
        enhancer23.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader27 = enhancer23.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = enhancer23.getStrategy();
        enhancer5.setStrategy(generatorStrategy28);
        boolean boolean30 = enhancer5.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = enhancer31.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        enhancer34.setUseCache(true);
        boolean boolean38 = enhancer34.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader40 = enhancer39.getClassLoader();
        enhancer39.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader43 = enhancer39.getClassLoader();
        java.lang.Class class44 = null;
        enhancer39.setSuperclass(class44);
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader47 = enhancer46.getClassLoader();
        enhancer46.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer50 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader51 = enhancer50.getClassLoader();
        enhancer46.setClassLoader(classLoader51);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = enhancer46.getStrategy();
        java.lang.Class<?> wildcardClass54 = enhancer46.getClass();
        enhancer39.setSuperclass((java.lang.Class) wildcardClass54);
        enhancer34.setSuperclass((java.lang.Class) wildcardClass54);
        enhancer31.setSuperclass((java.lang.Class) wildcardClass54);
        enhancer5.setSuperclass((java.lang.Class) wildcardClass54);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass54);
        enhancer0.setAttemptLoad(true);
        boolean boolean62 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer63 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader64 = enhancer63.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = enhancer63.getStrategy();
        enhancer63.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader68 = enhancer63.getClassLoader();
        enhancer0.setClassLoader(classLoader68);
        enhancer0.setUseCache(false);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertNotNull(classLoader68);
    }

    @Test
    public void test09518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09518");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        boolean boolean9 = enhancer0.getAttemptLoad();
        java.lang.ClassLoader classLoader10 = enhancer0.getClassLoader();
        java.lang.ClassLoader classLoader11 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        enhancer12.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader16 = enhancer12.getClassLoader();
        java.lang.Class class17 = null;
        enhancer12.setSuperclass(class17);
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader20 = enhancer19.getClassLoader();
        enhancer19.setInterceptDuringConstruction(true);
        boolean boolean23 = enhancer19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = enhancer19.getStrategy();
        enhancer12.setStrategy(generatorStrategy24);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        enhancer26.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader30 = enhancer26.getClassLoader();
        java.lang.Class class31 = null;
        enhancer26.setSuperclass(class31);
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader34 = enhancer33.getClassLoader();
        enhancer33.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        enhancer33.setClassLoader(classLoader38);
        enhancer33.setUseCache(false);
        java.lang.ClassLoader classLoader42 = enhancer33.getClassLoader();
        enhancer26.setClassLoader(classLoader42);
        boolean boolean44 = generatorStrategy24.equals((java.lang.Object) enhancer26);
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader46 = enhancer45.getClassLoader();
        enhancer45.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader49 = enhancer45.getClassLoader();
        java.lang.Class<?> wildcardClass50 = classLoader49.getClass();
        enhancer26.setSuperclass((java.lang.Class) wildcardClass50);
        java.lang.ClassLoader classLoader52 = enhancer26.getClassLoader();
        enhancer26.setSerialVersionUID((java.lang.Long) (-1L));
        java.lang.ClassLoader classLoader55 = enhancer26.getClassLoader();
        enhancer0.setClassLoader(classLoader55);
        org.mockito.asm.ClassVisitor classVisitor57 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(classLoader55);
    }

    @Test
    public void test09519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09519");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = enhancer0.getNamingPolicy();
        boolean boolean10 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer11.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader15 = enhancer11.getClassLoader();
        java.lang.Class class16 = null;
        enhancer11.setSuperclass(class16);
        java.lang.ClassLoader classLoader18 = enhancer11.getClassLoader();
        enhancer0.setClassLoader(classLoader18);
        enhancer0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter23 = null;
        enhancer0.setCallbackFilter(callbackFilter23);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = enhancer0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor28 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(namingPolicy27);
    }

    @Test
    public void test09520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09520");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Callback callback5 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray6 = new org.mockito.cglib.proxy.Callback[] { callback5 };
        enhancer0.setCallbacks(callbackArray6);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        enhancer8.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader12 = enhancer8.getClassLoader();
        java.lang.Class class13 = null;
        enhancer8.setSuperclass(class13);
        java.lang.Class<?> wildcardClass15 = enhancer8.getClass();
        boolean boolean16 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass15);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass15);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        enhancer18.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer18.setClassLoader(classLoader23);
        enhancer18.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader28 = enhancer27.getClassLoader();
        enhancer27.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer27.setClassLoader(classLoader32);
        enhancer27.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = enhancer27.getNamingPolicy();
        enhancer18.setNamingPolicy(namingPolicy36);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader39 = enhancer38.getClassLoader();
        enhancer38.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader42 = enhancer38.getClassLoader();
        java.lang.Class class43 = null;
        enhancer38.setSuperclass(class43);
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader46 = enhancer45.getClassLoader();
        enhancer45.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader50 = enhancer49.getClassLoader();
        enhancer45.setClassLoader(classLoader50);
        enhancer45.setUseCache(false);
        java.lang.ClassLoader classLoader54 = enhancer45.getClassLoader();
        enhancer38.setClassLoader(classLoader54);
        boolean boolean56 = namingPolicy36.equals((java.lang.Object) enhancer38);
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader58 = enhancer57.getClassLoader();
        enhancer57.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer61 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader62 = enhancer61.getClassLoader();
        enhancer57.setClassLoader(classLoader62);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = enhancer57.getStrategy();
        enhancer57.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer67 = new org.mockito.cglib.proxy.Enhancer();
        enhancer67.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = enhancer67.getStrategy();
        enhancer57.setStrategy(generatorStrategy70);
        enhancer38.setStrategy(generatorStrategy70);
        enhancer0.setStrategy(generatorStrategy70);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer75 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader76 = enhancer75.getClassLoader();
        enhancer75.setUseCache(true);
        boolean boolean79 = enhancer75.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = null;
        enhancer75.setNamingPolicy(namingPolicy80);
        java.lang.ClassLoader classLoader82 = enhancer75.getClassLoader();
        boolean boolean83 = enhancer75.getAttemptLoad();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter84 = null;
        enhancer75.setCallbackFilter(callbackFilter84);
        boolean boolean86 = generatorStrategy74.equals((java.lang.Object) enhancer75);
        java.lang.ClassLoader classLoader87 = enhancer75.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor88 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer75.generateClass(classVisitor88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(callbackArray6);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertNotNull(generatorStrategy74);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(classLoader82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(classLoader87);
    }

    @Test
    public void test09521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09521");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        enhancer0.setStrategy(generatorStrategy9);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer11.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        enhancer11.setClassLoader(classLoader16);
        enhancer11.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer20.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        enhancer20.setClassLoader(classLoader25);
        enhancer20.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = enhancer20.getNamingPolicy();
        enhancer11.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer31.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader35 = enhancer31.getClassLoader();
        java.lang.Class class36 = null;
        enhancer31.setSuperclass(class36);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader39 = enhancer38.getClassLoader();
        enhancer38.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader43 = enhancer42.getClassLoader();
        enhancer38.setClassLoader(classLoader43);
        enhancer38.setUseCache(false);
        java.lang.ClassLoader classLoader47 = enhancer38.getClassLoader();
        enhancer31.setClassLoader(classLoader47);
        boolean boolean49 = namingPolicy29.equals((java.lang.Object) enhancer31);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = enhancer31.getStrategy();
        enhancer0.setStrategy(generatorStrategy50);
        org.mockito.cglib.proxy.Enhancer enhancer52 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader53 = enhancer52.getClassLoader();
        enhancer52.setInterceptDuringConstruction(true);
        boolean boolean56 = enhancer52.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = enhancer52.getStrategy();
        java.lang.Class[] classArray58 = new java.lang.Class[] {};
        enhancer52.setInterfaces(classArray58);
        enhancer0.setInterfaces(classArray58);
        enhancer0.setInterceptDuringConstruction(true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class63 = enhancer0.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback types are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertNotNull(classArray58);
    }

    @Test
    public void test09522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09522");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter2 = null;
        enhancer0.setCallbackFilter(callbackFilter2);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = enhancer0.getStrategy();
        java.lang.ClassLoader classLoader5 = enhancer0.getClassLoader();
        java.lang.Class<?> wildcardClass6 = classLoader5.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader11 = enhancer7.getClassLoader();
        org.mockito.cglib.proxy.Callback callback12 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray13 = new org.mockito.cglib.proxy.Callback[] { callback12 };
        enhancer7.setCallbacks(callbackArray13);
        enhancer7.setSerialVersionUID((java.lang.Long) 0L);
        boolean boolean17 = enhancer7.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        enhancer18.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer18.setClassLoader(classLoader23);
        enhancer18.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader28 = enhancer27.getClassLoader();
        enhancer27.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer27.setClassLoader(classLoader32);
        enhancer27.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = enhancer27.getNamingPolicy();
        enhancer18.setNamingPolicy(namingPolicy36);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader39 = enhancer38.getClassLoader();
        enhancer38.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader42 = enhancer38.getClassLoader();
        java.lang.Class class43 = null;
        enhancer38.setSuperclass(class43);
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader46 = enhancer45.getClassLoader();
        enhancer45.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader50 = enhancer49.getClassLoader();
        enhancer45.setClassLoader(classLoader50);
        enhancer45.setUseCache(false);
        java.lang.ClassLoader classLoader54 = enhancer45.getClassLoader();
        enhancer38.setClassLoader(classLoader54);
        boolean boolean56 = namingPolicy36.equals((java.lang.Object) enhancer38);
        enhancer7.setNamingPolicy(namingPolicy36);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = enhancer7.getStrategy();
        enhancer7.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer61 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader62 = enhancer61.getClassLoader();
        enhancer61.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer65 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader66 = enhancer65.getClassLoader();
        enhancer61.setClassLoader(classLoader66);
        enhancer61.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer70 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader71 = enhancer70.getClassLoader();
        enhancer70.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer74 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader75 = enhancer74.getClassLoader();
        enhancer70.setClassLoader(classLoader75);
        enhancer70.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy79 = enhancer70.getNamingPolicy();
        enhancer61.setNamingPolicy(namingPolicy79);
        org.mockito.cglib.proxy.Enhancer enhancer81 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader82 = enhancer81.getClassLoader();
        enhancer81.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader85 = enhancer81.getClassLoader();
        org.mockito.cglib.proxy.Callback callback86 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray87 = new org.mockito.cglib.proxy.Callback[] { callback86 };
        enhancer81.setCallbacks(callbackArray87);
        enhancer61.setCallbacks(callbackArray87);
        enhancer7.setCallbacks(callbackArray87);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerStaticCallbacks((java.lang.Class) wildcardClass6, callbackArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class sun.misc.Launcher$AppClassLoader is not an enhanced class");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(callbackArray13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertNotNull(classLoader75);
        org.junit.Assert.assertNotNull(namingPolicy79);
        org.junit.Assert.assertNotNull(classLoader82);
        org.junit.Assert.assertNotNull(classLoader85);
        org.junit.Assert.assertNotNull(callbackArray87);
    }

    @Test
    public void test09523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09523");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader9 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter10 = null;
        enhancer0.setCallbackFilter(callbackFilter10);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = enhancer0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj13 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(namingPolicy12);
    }

    @Test
    public void test09524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09524");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setUseFactory(false);
        org.mockito.cglib.proxy.Callback callback3 = null;
        enhancer0.setCallback(callback3);
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = enhancer0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj8 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy7);
    }

    @Test
    public void test09525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09525");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Object obj6 = null;
        boolean boolean7 = generatorStrategy5.equals(obj6);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer9.setClassLoader(classLoader14);
        enhancer8.setClassLoader(classLoader14);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        enhancer17.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader21 = enhancer17.getClassLoader();
        enhancer8.setClassLoader(classLoader21);
        boolean boolean23 = enhancer8.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        enhancer24.setInterceptDuringConstruction(true);
        boolean boolean28 = enhancer24.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = enhancer24.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader31 = enhancer30.getClassLoader();
        enhancer30.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader34 = enhancer30.getClassLoader();
        org.mockito.cglib.proxy.Callback callback35 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray36 = new org.mockito.cglib.proxy.Callback[] { callback35 };
        enhancer30.setCallbacks(callbackArray36);
        enhancer24.setCallbacks(callbackArray36);
        enhancer8.setCallbacks(callbackArray36);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        enhancer40.setInterceptDuringConstruction(true);
        boolean boolean44 = enhancer40.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = enhancer40.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader47 = enhancer46.getClassLoader();
        enhancer46.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader50 = enhancer46.getClassLoader();
        org.mockito.cglib.proxy.Callback callback51 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray52 = new org.mockito.cglib.proxy.Callback[] { callback51 };
        enhancer46.setCallbacks(callbackArray52);
        enhancer40.setCallbacks(callbackArray52);
        enhancer8.setCallbacks(callbackArray52);
        boolean boolean56 = generatorStrategy5.equals((java.lang.Object) enhancer8);
        java.lang.ClassLoader classLoader57 = enhancer8.getClassLoader();
        enhancer8.setSerialVersionUID((java.lang.Long) 100L);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(callbackArray36);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(callbackArray52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(classLoader57);
    }

    @Test
    public void test09526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09526");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer9.setClassLoader(classLoader14);
        enhancer9.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer9.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer20.setInterceptDuringConstruction(true);
        boolean boolean24 = namingPolicy18.equals((java.lang.Object) enhancer20);
        java.lang.ClassLoader classLoader25 = enhancer20.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        enhancer26.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader31 = enhancer30.getClassLoader();
        enhancer26.setClassLoader(classLoader31);
        enhancer26.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = enhancer26.getNamingPolicy();
        boolean boolean36 = enhancer26.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        enhancer37.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader41 = enhancer37.getClassLoader();
        java.lang.Class class42 = null;
        enhancer37.setSuperclass(class42);
        java.lang.ClassLoader classLoader44 = enhancer37.getClassLoader();
        enhancer26.setClassLoader(classLoader44);
        enhancer26.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        enhancer48.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer52 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader53 = enhancer52.getClassLoader();
        enhancer48.setClassLoader(classLoader53);
        enhancer48.setUseCache(false);
        java.lang.ClassLoader classLoader57 = enhancer48.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = enhancer48.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = enhancer48.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = enhancer48.getNamingPolicy();
        enhancer26.setNamingPolicy(namingPolicy60);
        enhancer20.setNamingPolicy(namingPolicy60);
        enhancer20.setInterceptDuringConstruction(true);
        enhancer20.setUseCache(false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj67 = enhancer20.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertNotNull(namingPolicy60);
    }

    @Test
    public void test09527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09527");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        boolean boolean6 = enhancer0.getUseCache();
        enhancer0.setUseFactory(false);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer11.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = enhancer11.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        enhancer16.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer16.setClassLoader(classLoader21);
        enhancer16.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer25.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer25.setClassLoader(classLoader30);
        enhancer25.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = enhancer25.getNamingPolicy();
        enhancer16.setNamingPolicy(namingPolicy34);
        enhancer16.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader39 = enhancer38.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = enhancer38.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader42 = enhancer41.getClassLoader();
        enhancer41.setUseCache(true);
        boolean boolean45 = enhancer41.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader47 = enhancer46.getClassLoader();
        enhancer46.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader50 = enhancer46.getClassLoader();
        java.lang.Class class51 = null;
        enhancer46.setSuperclass(class51);
        org.mockito.cglib.proxy.Enhancer enhancer53 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader54 = enhancer53.getClassLoader();
        enhancer53.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader58 = enhancer57.getClassLoader();
        enhancer53.setClassLoader(classLoader58);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = enhancer53.getStrategy();
        java.lang.Class<?> wildcardClass61 = enhancer53.getClass();
        enhancer46.setSuperclass((java.lang.Class) wildcardClass61);
        enhancer41.setSuperclass((java.lang.Class) wildcardClass61);
        enhancer38.setSuperclass((java.lang.Class) wildcardClass61);
        org.mockito.cglib.proxy.Callback callback65 = null;
        enhancer38.setCallback(callback65);
        org.mockito.cglib.proxy.Enhancer enhancer67 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader68 = enhancer67.getClassLoader();
        enhancer67.setInterceptDuringConstruction(true);
        boolean boolean71 = enhancer67.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = enhancer67.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer73 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader74 = enhancer73.getClassLoader();
        enhancer73.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader77 = enhancer73.getClassLoader();
        org.mockito.cglib.proxy.Callback callback78 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray79 = new org.mockito.cglib.proxy.Callback[] { callback78 };
        enhancer73.setCallbacks(callbackArray79);
        enhancer67.setCallbacks(callbackArray79);
        enhancer38.setCallbacks(callbackArray79);
        enhancer16.setCallbacks(callbackArray79);
        enhancer11.setCallbacks(callbackArray79);
        enhancer0.setCallbacks(callbackArray79);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(classLoader68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(classLoader77);
        org.junit.Assert.assertNotNull(callbackArray79);
    }

    @Test
    public void test09528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09528");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        enhancer0.setSerialVersionUID((java.lang.Long) (-1L));
        enhancer0.setUseFactory(true);
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Callback[] callbackArray10 = null;
        enhancer0.setCallbacks(callbackArray10);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        enhancer15.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader19 = enhancer15.getClassLoader();
        java.lang.Class class20 = null;
        enhancer15.setSuperclass(class20);
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer22.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        enhancer22.setClassLoader(classLoader27);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = enhancer22.getStrategy();
        java.lang.Class<?> wildcardClass30 = enhancer22.getClass();
        enhancer15.setSuperclass((java.lang.Class) wildcardClass30);
        enhancer15.setAttemptLoad(false);
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        enhancer15.setClassLoader(classLoader35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = enhancer15.getStrategy();
        org.mockito.cglib.core.Predicate predicate38 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str39 = namingPolicy12.getClassName("hi!", "hi!", (java.lang.Object) generatorStrategy37, predicate38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(generatorStrategy37);
    }

    @Test
    public void test09529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09529");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        enhancer5.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader9 = enhancer5.getClassLoader();
        org.mockito.cglib.proxy.Callback callback10 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray11 = new org.mockito.cglib.proxy.Callback[] { callback10 };
        enhancer5.setCallbacks(callbackArray11);
        enhancer0.setCallbacks(callbackArray11);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Callback callback15 = null;
        enhancer0.setCallback(callback15);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        enhancer17.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer17.setClassLoader(classLoader22);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        enhancer24.setInterceptDuringConstruction(true);
        boolean boolean28 = enhancer24.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = enhancer24.getStrategy();
        java.lang.Class[] classArray30 = new java.lang.Class[] {};
        enhancer24.setInterfaces(classArray30);
        enhancer17.setInterfaces(classArray30);
        enhancer0.setInterfaces(classArray30);
        boolean boolean34 = enhancer0.getUseCache();
        boolean boolean35 = enhancer0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class36 = enhancer0.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: createClass does not accept callbacks");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(callbackArray11);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test09530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09530");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        boolean boolean4 = enhancer0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        boolean boolean6 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter7 = null;
        enhancer0.setCallbackFilter(callbackFilter7);
        enhancer0.setInterceptDuringConstruction(false);
        boolean boolean11 = enhancer0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class12 = enhancer0.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback types are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test09531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09531");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer7.setClassLoader(classLoader12);
        enhancer7.setUseCache(false);
        java.lang.ClassLoader classLoader16 = enhancer7.getClassLoader();
        enhancer0.setClassLoader(classLoader16);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        enhancer18.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader22 = enhancer18.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer18.getStrategy();
        enhancer0.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer25.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer25.setClassLoader(classLoader30);
        enhancer25.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = enhancer25.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy34);
        enhancer0.setUseFactory(true);
        boolean boolean38 = enhancer0.getUseCache();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test09532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09532");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        boolean boolean2 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        enhancer8.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        enhancer8.setClassLoader(classLoader13);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter15 = null;
        enhancer8.setCallbackFilter(callbackFilter15);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        enhancer17.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer17.setClassLoader(classLoader22);
        enhancer17.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        enhancer26.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader31 = enhancer30.getClassLoader();
        enhancer26.setClassLoader(classLoader31);
        enhancer26.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = enhancer26.getNamingPolicy();
        enhancer17.setNamingPolicy(namingPolicy35);
        enhancer8.setNamingPolicy(namingPolicy35);
        enhancer0.setNamingPolicy(namingPolicy35);
        enhancer0.setUseFactory(false);
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader42 = enhancer41.getClassLoader();
        enhancer41.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader46 = enhancer45.getClassLoader();
        enhancer41.setClassLoader(classLoader46);
        enhancer41.setUseCache(false);
        enhancer41.setSerialVersionUID((java.lang.Long) 0L);
        enhancer41.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer54 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader55 = enhancer54.getClassLoader();
        enhancer54.setUseCache(true);
        boolean boolean58 = enhancer54.getAttemptLoad();
        org.mockito.cglib.proxy.Callback callback59 = null;
        enhancer54.setCallback(callback59);
        java.lang.ClassLoader classLoader61 = enhancer54.getClassLoader();
        enhancer41.setClassLoader(classLoader61);
        enhancer0.setClassLoader(classLoader61);
        boolean boolean64 = enhancer0.getUseCache();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test09533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09533");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        boolean boolean2 = enhancer0.getAttemptLoad();
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.proxy.Callback callback5 = null;
        enhancer0.setCallback(callback5);
        boolean boolean7 = enhancer0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter11 = null;
        enhancer9.setCallbackFilter(callbackFilter11);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter13 = null;
        enhancer9.setCallbackFilter(callbackFilter13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = enhancer9.getStrategy();
        enhancer9.setUseFactory(false);
        java.lang.ClassLoader classLoader18 = enhancer9.getClassLoader();
        enhancer9.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = enhancer9.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = enhancer9.getStrategy();
        boolean boolean23 = namingPolicy8.equals((java.lang.Object) enhancer9);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        boolean boolean26 = enhancer24.getAttemptLoad();
        enhancer24.setInterceptDuringConstruction(false);
        enhancer24.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = enhancer24.getStrategy();
        boolean boolean32 = enhancer24.getAttemptLoad();
        enhancer24.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = enhancer24.getStrategy();
        enhancer24.setAttemptLoad(false);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter38 = null;
        enhancer24.setCallbackFilter(callbackFilter38);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        enhancer40.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback43 = null;
        enhancer40.setCallback(callback43);
        enhancer40.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = enhancer40.getNamingPolicy();
        org.mockito.cglib.proxy.Callback callback48 = null;
        enhancer40.setCallback(callback48);
        enhancer40.setInterceptDuringConstruction(false);
        enhancer40.setUseFactory(false);
        enhancer40.setSerialVersionUID((java.lang.Long) 100L);
        boolean boolean56 = enhancer40.getAttemptLoad();
        java.lang.ClassLoader classLoader57 = enhancer40.getClassLoader();
        enhancer24.setClassLoader(classLoader57);
        enhancer9.setClassLoader(classLoader57);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(classLoader57);
    }

    @Test
    public void test09534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09534");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        enhancer8.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        enhancer12.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        enhancer16.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer16.setClassLoader(classLoader21);
        enhancer16.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer25.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer25.setClassLoader(classLoader30);
        enhancer25.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = enhancer25.getNamingPolicy();
        enhancer16.setNamingPolicy(namingPolicy34);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        enhancer36.setUseCache(true);
        boolean boolean40 = enhancer36.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader42 = enhancer41.getClassLoader();
        enhancer41.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader45 = enhancer41.getClassLoader();
        java.lang.Class class46 = null;
        enhancer41.setSuperclass(class46);
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        enhancer48.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer52 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader53 = enhancer52.getClassLoader();
        enhancer48.setClassLoader(classLoader53);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = enhancer48.getStrategy();
        java.lang.Class<?> wildcardClass56 = enhancer48.getClass();
        enhancer41.setSuperclass((java.lang.Class) wildcardClass56);
        enhancer36.setSuperclass((java.lang.Class) wildcardClass56);
        boolean boolean59 = namingPolicy34.equals((java.lang.Object) enhancer36);
        enhancer12.setNamingPolicy(namingPolicy34);
        enhancer8.setNamingPolicy(namingPolicy34);
        enhancer0.setNamingPolicy(namingPolicy34);
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = enhancer0.getNamingPolicy();
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        enhancer0.setUseCache(false);
        enhancer0.setUseFactory(false);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(namingPolicy63);
    }

    @Test
    public void test09535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09535");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        boolean boolean2 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        enhancer5.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader9 = enhancer5.getClassLoader();
        java.lang.Class class10 = null;
        enhancer5.setSuperclass(class10);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        enhancer12.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        enhancer12.setClassLoader(classLoader17);
        enhancer12.setUseCache(false);
        java.lang.ClassLoader classLoader21 = enhancer12.getClassLoader();
        enhancer5.setClassLoader(classLoader21);
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader24 = enhancer23.getClassLoader();
        enhancer23.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader27 = enhancer23.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = enhancer23.getStrategy();
        enhancer5.setStrategy(generatorStrategy28);
        boolean boolean30 = enhancer5.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = enhancer31.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        enhancer34.setUseCache(true);
        boolean boolean38 = enhancer34.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader40 = enhancer39.getClassLoader();
        enhancer39.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader43 = enhancer39.getClassLoader();
        java.lang.Class class44 = null;
        enhancer39.setSuperclass(class44);
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader47 = enhancer46.getClassLoader();
        enhancer46.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer50 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader51 = enhancer50.getClassLoader();
        enhancer46.setClassLoader(classLoader51);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = enhancer46.getStrategy();
        java.lang.Class<?> wildcardClass54 = enhancer46.getClass();
        enhancer39.setSuperclass((java.lang.Class) wildcardClass54);
        enhancer34.setSuperclass((java.lang.Class) wildcardClass54);
        enhancer31.setSuperclass((java.lang.Class) wildcardClass54);
        enhancer5.setSuperclass((java.lang.Class) wildcardClass54);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass54);
        org.mockito.cglib.proxy.Enhancer enhancer60 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader61 = enhancer60.getClassLoader();
        enhancer60.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader64 = enhancer60.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer65 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader66 = enhancer65.getClassLoader();
        enhancer65.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader69 = enhancer65.getClassLoader();
        org.mockito.cglib.proxy.Callback callback70 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray71 = new org.mockito.cglib.proxy.Callback[] { callback70 };
        enhancer65.setCallbacks(callbackArray71);
        enhancer60.setCallbacks(callbackArray71);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = enhancer60.getStrategy();
        org.mockito.cglib.proxy.Callback callback75 = null;
        enhancer60.setCallback(callback75);
        org.mockito.cglib.proxy.Enhancer enhancer77 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader78 = enhancer77.getClassLoader();
        enhancer77.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer81 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader82 = enhancer81.getClassLoader();
        enhancer77.setClassLoader(classLoader82);
        org.mockito.cglib.proxy.Enhancer enhancer84 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader85 = enhancer84.getClassLoader();
        enhancer84.setInterceptDuringConstruction(true);
        boolean boolean88 = enhancer84.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy89 = enhancer84.getStrategy();
        java.lang.Class[] classArray90 = new java.lang.Class[] {};
        enhancer84.setInterfaces(classArray90);
        enhancer77.setInterfaces(classArray90);
        enhancer60.setInterfaces(classArray90);
        java.util.List list94 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.getMethods((java.lang.Class) wildcardClass54, classArray90, list94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertNotNull(classLoader69);
        org.junit.Assert.assertNotNull(callbackArray71);
        org.junit.Assert.assertNotNull(generatorStrategy74);
        org.junit.Assert.assertNotNull(classLoader78);
        org.junit.Assert.assertNotNull(classLoader82);
        org.junit.Assert.assertNotNull(classLoader85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(generatorStrategy89);
        org.junit.Assert.assertNotNull(classArray90);
    }

    @Test
    public void test09536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09536");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer9.setClassLoader(classLoader14);
        enhancer9.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer9.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer20.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader24 = enhancer20.getClassLoader();
        java.lang.Class class25 = null;
        enhancer20.setSuperclass(class25);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader28 = enhancer27.getClassLoader();
        enhancer27.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer27.setClassLoader(classLoader32);
        enhancer27.setUseCache(false);
        java.lang.ClassLoader classLoader36 = enhancer27.getClassLoader();
        enhancer20.setClassLoader(classLoader36);
        boolean boolean38 = namingPolicy18.equals((java.lang.Object) enhancer20);
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader40 = enhancer39.getClassLoader();
        enhancer39.setInterceptDuringConstruction(true);
        enhancer39.setSerialVersionUID((java.lang.Long) (-1L));
        boolean boolean45 = namingPolicy18.equals((java.lang.Object) enhancer39);
        enhancer39.setUseCache(false);
        java.lang.ClassLoader classLoader48 = enhancer39.getClassLoader();
        org.mockito.cglib.proxy.Callback callback49 = null;
        enhancer39.setCallback(callback49);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(classLoader48);
    }

    @Test
    public void test09537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09537");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        boolean boolean11 = enhancer7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer7.getStrategy();
        enhancer0.setStrategy(generatorStrategy12);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        enhancer0.setStrategy(generatorStrategy14);
        org.mockito.cglib.proxy.Callback callback16 = null;
        enhancer0.setCallback(callback16);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter18 = null;
        enhancer0.setCallbackFilter(callbackFilter18);
        enhancer0.setUseFactory(true);
        java.lang.Class<?> wildcardClass22 = enhancer0.getClass();
        boolean boolean23 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass22);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        boolean boolean26 = enhancer24.getAttemptLoad();
        enhancer24.setInterceptDuringConstruction(false);
        enhancer24.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = enhancer24.getStrategy();
        boolean boolean32 = enhancer24.getAttemptLoad();
        enhancer24.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = enhancer24.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = enhancer24.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        enhancer37.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader42 = enhancer41.getClassLoader();
        enhancer37.setClassLoader(classLoader42);
        enhancer37.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader47 = enhancer46.getClassLoader();
        enhancer46.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader50 = enhancer46.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer51 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader52 = enhancer51.getClassLoader();
        enhancer51.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader55 = enhancer51.getClassLoader();
        org.mockito.cglib.proxy.Callback callback56 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray57 = new org.mockito.cglib.proxy.Callback[] { callback56 };
        enhancer51.setCallbacks(callbackArray57);
        enhancer46.setCallbacks(callbackArray57);
        enhancer37.setCallbacks(callbackArray57);
        enhancer24.setCallbacks(callbackArray57);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerStaticCallbacks((java.lang.Class) wildcardClass22, callbackArray57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.proxy.Enhancer is not an enhanced class");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertNotNull(callbackArray57);
    }

    @Test
    public void test09538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09538");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Callback callback5 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray6 = new org.mockito.cglib.proxy.Callback[] { callback5 };
        enhancer0.setCallbacks(callbackArray6);
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer11.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader15 = enhancer11.getClassLoader();
        java.lang.Class class16 = null;
        enhancer11.setSuperclass(class16);
        java.lang.Class<?> wildcardClass18 = enhancer11.getClass();
        boolean boolean19 = generatorStrategy10.equals((java.lang.Object) wildcardClass18);
        boolean boolean21 = generatorStrategy10.equals((java.lang.Object) '4');
        boolean boolean23 = generatorStrategy10.equals((java.lang.Object) "");
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        enhancer24.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader28 = enhancer24.getClassLoader();
        java.lang.Class class29 = null;
        enhancer24.setSuperclass(class29);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer31.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        enhancer31.setClassLoader(classLoader36);
        enhancer31.setUseCache(false);
        java.lang.ClassLoader classLoader40 = enhancer31.getClassLoader();
        enhancer24.setClassLoader(classLoader40);
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader43 = enhancer42.getClassLoader();
        enhancer42.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader46 = enhancer42.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = enhancer42.getStrategy();
        enhancer24.setStrategy(generatorStrategy47);
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader50 = enhancer49.getClassLoader();
        enhancer49.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer53 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader54 = enhancer53.getClassLoader();
        enhancer49.setClassLoader(classLoader54);
        enhancer49.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = enhancer49.getNamingPolicy();
        enhancer24.setNamingPolicy(namingPolicy58);
        org.mockito.cglib.proxy.Enhancer enhancer60 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader61 = enhancer60.getClassLoader();
        enhancer60.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader64 = enhancer60.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer65 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader66 = enhancer65.getClassLoader();
        enhancer65.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader69 = enhancer65.getClassLoader();
        org.mockito.cglib.proxy.Callback callback70 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray71 = new org.mockito.cglib.proxy.Callback[] { callback70 };
        enhancer65.setCallbacks(callbackArray71);
        enhancer60.setCallbacks(callbackArray71);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = enhancer60.getStrategy();
        enhancer24.setStrategy(generatorStrategy74);
        boolean boolean76 = generatorStrategy10.equals((java.lang.Object) enhancer24);
        org.mockito.cglib.proxy.Enhancer enhancer77 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader78 = enhancer77.getClassLoader();
        enhancer77.setInterceptDuringConstruction(true);
        boolean boolean81 = enhancer77.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = enhancer77.getStrategy();
        java.lang.Class[] classArray83 = new java.lang.Class[] {};
        enhancer77.setInterfaces(classArray83);
        enhancer24.setInterfaces(classArray83);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy86 = enhancer24.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class87 = enhancer24.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback types are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(callbackArray6);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertNotNull(classLoader69);
        org.junit.Assert.assertNotNull(callbackArray71);
        org.junit.Assert.assertNotNull(generatorStrategy74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(classLoader78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(generatorStrategy82);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(generatorStrategy86);
    }

    @Test
    public void test09539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09539");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        boolean boolean4 = enhancer0.getUseCache();
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        boolean boolean8 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader13 = enhancer9.getClassLoader();
        java.lang.Class class14 = null;
        enhancer9.setSuperclass(class14);
        java.lang.ClassLoader classLoader16 = enhancer9.getClassLoader();
        boolean boolean17 = enhancer9.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        enhancer18.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader22 = enhancer18.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader24 = enhancer23.getClassLoader();
        enhancer23.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader27 = enhancer23.getClassLoader();
        org.mockito.cglib.proxy.Callback callback28 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray29 = new org.mockito.cglib.proxy.Callback[] { callback28 };
        enhancer23.setCallbacks(callbackArray29);
        enhancer18.setCallbacks(callbackArray29);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = enhancer18.getStrategy();
        enhancer9.setStrategy(generatorStrategy32);
        enhancer0.setStrategy(generatorStrategy32);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = enhancer0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        enhancer37.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader42 = enhancer41.getClassLoader();
        enhancer37.setClassLoader(classLoader42);
        enhancer37.setUseCache(false);
        java.lang.ClassLoader classLoader46 = enhancer37.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = enhancer37.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = enhancer37.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = enhancer37.getNamingPolicy();
        enhancer37.setAttemptLoad(false);
        boolean boolean52 = enhancer37.getAttemptLoad();
        enhancer37.setAttemptLoad(true);
        enhancer37.setUseFactory(true);
        boolean boolean57 = generatorStrategy36.equals((java.lang.Object) enhancer37);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(callbackArray29);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test09540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09540");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        boolean boolean11 = enhancer7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer7.getStrategy();
        enhancer0.setStrategy(generatorStrategy12);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader18 = enhancer14.getClassLoader();
        java.lang.Class class19 = null;
        enhancer14.setSuperclass(class19);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer21.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer21.setClassLoader(classLoader26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = enhancer21.getStrategy();
        java.lang.Class<?> wildcardClass29 = enhancer21.getClass();
        enhancer14.setSuperclass((java.lang.Class) wildcardClass29);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass29);
        boolean boolean32 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Callback callback33 = null;
        enhancer0.setCallback(callback33);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        enhancer35.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback38 = null;
        enhancer35.setCallback(callback38);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter40 = null;
        enhancer35.setCallbackFilter(callbackFilter40);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = enhancer35.getStrategy();
        java.lang.Object obj43 = null;
        boolean boolean44 = generatorStrategy42.equals(obj43);
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader46 = enhancer45.getClassLoader();
        enhancer45.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader49 = enhancer45.getClassLoader();
        java.lang.Class class50 = null;
        enhancer45.setSuperclass(class50);
        org.mockito.cglib.proxy.Enhancer enhancer52 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader53 = enhancer52.getClassLoader();
        enhancer52.setInterceptDuringConstruction(true);
        boolean boolean56 = enhancer52.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = enhancer52.getStrategy();
        enhancer45.setStrategy(generatorStrategy57);
        boolean boolean59 = generatorStrategy42.equals((java.lang.Object) generatorStrategy57);
        enhancer0.setStrategy(generatorStrategy57);
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = enhancer0.getNamingPolicy();
        enhancer0.setUseFactory(false);
        boolean boolean66 = enhancer0.getUseCache();
        enhancer0.setSerialVersionUID((java.lang.Long) 100L);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test09541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09541");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = enhancer0.getNamingPolicy();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer13.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader17 = enhancer13.getClassLoader();
        java.lang.Class class18 = null;
        enhancer13.setSuperclass(class18);
        java.lang.ClassLoader classLoader20 = enhancer13.getClassLoader();
        boolean boolean21 = enhancer13.getAttemptLoad();
        boolean boolean22 = enhancer13.getUseCache();
        boolean boolean23 = namingPolicy12.equals((java.lang.Object) enhancer13);
        java.lang.ClassLoader classLoader24 = enhancer13.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer25.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer25.setClassLoader(classLoader30);
        enhancer25.setUseCache(false);
        java.lang.ClassLoader classLoader34 = enhancer25.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter35 = null;
        enhancer25.setCallbackFilter(callbackFilter35);
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = enhancer25.getNamingPolicy();
        java.lang.Class<?> wildcardClass38 = namingPolicy37.getClass();
        // The following exception was thrown during execution in test generation
        try {
            enhancer13.setCallbackType((java.lang.Class) wildcardClass38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Unknown callback type class org.mockito.cglib.core.DefaultNamingPolicy");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test09542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09542");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback3 = null;
        enhancer0.setCallback(callback3);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        enhancer8.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        enhancer8.setClassLoader(classLoader13);
        enhancer8.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        enhancer17.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer17.setClassLoader(classLoader22);
        enhancer17.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = enhancer17.getNamingPolicy();
        enhancer8.setNamingPolicy(namingPolicy26);
        enhancer8.setInterceptDuringConstruction(true);
        boolean boolean30 = enhancer8.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer31.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader35 = enhancer31.getClassLoader();
        java.lang.Class class36 = null;
        enhancer31.setSuperclass(class36);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader39 = enhancer38.getClassLoader();
        enhancer38.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader43 = enhancer42.getClassLoader();
        enhancer38.setClassLoader(classLoader43);
        enhancer38.setUseCache(false);
        java.lang.ClassLoader classLoader47 = enhancer38.getClassLoader();
        enhancer31.setClassLoader(classLoader47);
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader50 = enhancer49.getClassLoader();
        enhancer49.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader53 = enhancer49.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = enhancer49.getStrategy();
        enhancer31.setStrategy(generatorStrategy54);
        boolean boolean56 = enhancer31.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader58 = enhancer57.getClassLoader();
        enhancer57.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer61 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader62 = enhancer61.getClassLoader();
        enhancer57.setClassLoader(classLoader62);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = enhancer57.getStrategy();
        java.lang.Class<?> wildcardClass65 = enhancer57.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer66 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader67 = enhancer66.getClassLoader();
        enhancer66.setUseCache(true);
        boolean boolean70 = enhancer66.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer71 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader72 = enhancer71.getClassLoader();
        enhancer71.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader75 = enhancer71.getClassLoader();
        java.lang.Class class76 = null;
        enhancer71.setSuperclass(class76);
        org.mockito.cglib.proxy.Enhancer enhancer78 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader79 = enhancer78.getClassLoader();
        enhancer78.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer82 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader83 = enhancer82.getClassLoader();
        enhancer78.setClassLoader(classLoader83);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy85 = enhancer78.getStrategy();
        java.lang.Class<?> wildcardClass86 = enhancer78.getClass();
        enhancer71.setSuperclass((java.lang.Class) wildcardClass86);
        enhancer66.setSuperclass((java.lang.Class) wildcardClass86);
        java.lang.Class[] classArray89 = new java.lang.Class[] { wildcardClass65, wildcardClass86 };
        enhancer31.setInterfaces(classArray89);
        enhancer8.setInterfaces(classArray89);
        enhancer0.setInterfaces(classArray89);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy95 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Callback callback96 = null;
        enhancer0.setCallback(callback96);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(classLoader67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(classLoader72);
        org.junit.Assert.assertNotNull(classLoader75);
        org.junit.Assert.assertNotNull(classLoader79);
        org.junit.Assert.assertNotNull(classLoader83);
        org.junit.Assert.assertNotNull(generatorStrategy85);
        org.junit.Assert.assertNotNull(wildcardClass86);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(generatorStrategy95);
    }

    @Test
    public void test09543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09543");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        java.lang.ClassLoader classLoader7 = enhancer0.getClassLoader();
        enhancer0.setUseFactory(false);
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        boolean boolean12 = enhancer0.getUseCache();
        enhancer0.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = null;
        enhancer0.setStrategy(generatorStrategy15);
        org.mockito.asm.ClassVisitor classVisitor17 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test09544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09544");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        enhancer5.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader9 = enhancer5.getClassLoader();
        org.mockito.cglib.proxy.Callback callback10 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray11 = new org.mockito.cglib.proxy.Callback[] { callback10 };
        enhancer5.setCallbacks(callbackArray11);
        enhancer0.setCallbacks(callbackArray11);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Callback callback15 = null;
        enhancer0.setCallback(callback15);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        enhancer17.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer17.setClassLoader(classLoader22);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        enhancer24.setInterceptDuringConstruction(true);
        boolean boolean28 = enhancer24.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = enhancer24.getStrategy();
        java.lang.Class[] classArray30 = new java.lang.Class[] {};
        enhancer24.setInterfaces(classArray30);
        enhancer17.setInterfaces(classArray30);
        enhancer0.setInterfaces(classArray30);
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        enhancer34.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader38 = enhancer34.getClassLoader();
        java.lang.Class class39 = null;
        enhancer34.setSuperclass(class39);
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader42 = enhancer41.getClassLoader();
        enhancer41.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader45 = enhancer41.getClassLoader();
        java.lang.Class class46 = null;
        enhancer41.setSuperclass(class46);
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        enhancer48.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer52 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader53 = enhancer52.getClassLoader();
        enhancer48.setClassLoader(classLoader53);
        enhancer48.setUseCache(false);
        java.lang.ClassLoader classLoader57 = enhancer48.getClassLoader();
        enhancer41.setClassLoader(classLoader57);
        enhancer34.setClassLoader(classLoader57);
        org.mockito.cglib.proxy.Enhancer enhancer60 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader61 = enhancer60.getClassLoader();
        enhancer60.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer64 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader65 = enhancer64.getClassLoader();
        enhancer60.setClassLoader(classLoader65);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = enhancer60.getStrategy();
        java.lang.Class<?> wildcardClass68 = enhancer60.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer69 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader70 = enhancer69.getClassLoader();
        enhancer69.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader73 = enhancer69.getClassLoader();
        java.lang.Class class74 = null;
        enhancer69.setSuperclass(class74);
        org.mockito.cglib.proxy.Enhancer enhancer76 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader77 = enhancer76.getClassLoader();
        enhancer76.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer80 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader81 = enhancer80.getClassLoader();
        enhancer76.setClassLoader(classLoader81);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = enhancer76.getStrategy();
        java.lang.Class<?> wildcardClass84 = enhancer76.getClass();
        enhancer69.setSuperclass((java.lang.Class) wildcardClass84);
        java.lang.Class[] classArray86 = new java.lang.Class[] { wildcardClass68, wildcardClass84 };
        enhancer34.setInterfaces(classArray86);
        enhancer0.setInterfaces(classArray86);
        enhancer0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader91 = enhancer0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy92 = enhancer0.getNamingPolicy();
        enhancer0.setUseCache(true);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter95 = null;
        enhancer0.setCallbackFilter(callbackFilter95);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(callbackArray11);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(classLoader73);
        org.junit.Assert.assertNotNull(classLoader77);
        org.junit.Assert.assertNotNull(classLoader81);
        org.junit.Assert.assertNotNull(generatorStrategy83);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(classLoader91);
        org.junit.Assert.assertNotNull(namingPolicy92);
    }

    @Test
    public void test09545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09545");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        enhancer0.setStrategy(generatorStrategy9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer13.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader17 = enhancer13.getClassLoader();
        java.lang.Class class18 = null;
        enhancer13.setSuperclass(class18);
        java.lang.ClassLoader classLoader20 = enhancer13.getClassLoader();
        enhancer13.setUseFactory(false);
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        enhancer24.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader29 = enhancer28.getClassLoader();
        enhancer24.setClassLoader(classLoader29);
        enhancer23.setClassLoader(classLoader29);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        enhancer32.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader36 = enhancer32.getClassLoader();
        enhancer23.setClassLoader(classLoader36);
        boolean boolean38 = enhancer23.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader40 = enhancer39.getClassLoader();
        enhancer39.setInterceptDuringConstruction(true);
        boolean boolean43 = enhancer39.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = enhancer39.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader46 = enhancer45.getClassLoader();
        enhancer45.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader49 = enhancer45.getClassLoader();
        org.mockito.cglib.proxy.Callback callback50 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray51 = new org.mockito.cglib.proxy.Callback[] { callback50 };
        enhancer45.setCallbacks(callbackArray51);
        enhancer39.setCallbacks(callbackArray51);
        enhancer23.setCallbacks(callbackArray51);
        java.lang.Class<?> wildcardClass55 = callbackArray51.getClass();
        enhancer13.setSuperclass((java.lang.Class) wildcardClass55);
        boolean boolean57 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass55);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass55);
        boolean boolean59 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(callbackArray51);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test09546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09546");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        boolean boolean11 = enhancer7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer7.getStrategy();
        enhancer0.setStrategy(generatorStrategy12);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader18 = enhancer14.getClassLoader();
        java.lang.Class class19 = null;
        enhancer14.setSuperclass(class19);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer21.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer21.setClassLoader(classLoader26);
        enhancer21.setUseCache(false);
        java.lang.ClassLoader classLoader30 = enhancer21.getClassLoader();
        enhancer14.setClassLoader(classLoader30);
        boolean boolean32 = generatorStrategy12.equals((java.lang.Object) enhancer14);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = enhancer14.getNamingPolicy();
        boolean boolean34 = enhancer14.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = null;
        enhancer14.setNamingPolicy(namingPolicy35);
        boolean boolean37 = enhancer14.getAttemptLoad();
        boolean boolean38 = enhancer14.getAttemptLoad();
        enhancer14.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader43 = enhancer42.getClassLoader();
        enhancer42.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader47 = enhancer46.getClassLoader();
        enhancer42.setClassLoader(classLoader47);
        enhancer41.setClassLoader(classLoader47);
        org.mockito.cglib.proxy.Enhancer enhancer50 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader51 = enhancer50.getClassLoader();
        enhancer50.setUseCache(true);
        boolean boolean54 = enhancer50.getAttemptLoad();
        org.mockito.cglib.proxy.Callback callback55 = null;
        enhancer50.setCallback(callback55);
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer58 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader59 = enhancer58.getClassLoader();
        enhancer58.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer62 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader63 = enhancer62.getClassLoader();
        enhancer58.setClassLoader(classLoader63);
        enhancer57.setClassLoader(classLoader63);
        org.mockito.cglib.proxy.Enhancer enhancer66 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader67 = enhancer66.getClassLoader();
        enhancer66.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader70 = enhancer66.getClassLoader();
        enhancer57.setClassLoader(classLoader70);
        boolean boolean72 = enhancer57.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer73 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader74 = enhancer73.getClassLoader();
        enhancer73.setInterceptDuringConstruction(true);
        boolean boolean77 = enhancer73.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = enhancer73.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer79 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader80 = enhancer79.getClassLoader();
        enhancer79.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader83 = enhancer79.getClassLoader();
        org.mockito.cglib.proxy.Callback callback84 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray85 = new org.mockito.cglib.proxy.Callback[] { callback84 };
        enhancer79.setCallbacks(callbackArray85);
        enhancer73.setCallbacks(callbackArray85);
        enhancer57.setCallbacks(callbackArray85);
        enhancer50.setCallbacks(callbackArray85);
        enhancer41.setCallbacks(callbackArray85);
        java.lang.Class<?> wildcardClass91 = enhancer41.getClass();
        boolean boolean92 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass91);
        enhancer14.setSuperclass((java.lang.Class) wildcardClass91);
        boolean boolean94 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass91);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(classLoader63);
        org.junit.Assert.assertNotNull(classLoader67);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertNotNull(classLoader80);
        org.junit.Assert.assertNotNull(classLoader83);
        org.junit.Assert.assertNotNull(callbackArray85);
        org.junit.Assert.assertNotNull(wildcardClass91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test09547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09547");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer9.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer9.getStrategy();
        enhancer0.setStrategy(generatorStrategy16);
        java.lang.Object obj18 = null;
        boolean boolean19 = generatorStrategy16.equals(obj18);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer20.setInterceptDuringConstruction(true);
        enhancer20.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback26 = null;
        enhancer20.setCallback(callback26);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter28 = null;
        enhancer20.setCallbackFilter(callbackFilter28);
        enhancer20.setInterceptDuringConstruction(true);
        enhancer20.setUseCache(false);
        enhancer20.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        enhancer36.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader40 = enhancer36.getClassLoader();
        java.lang.Class class41 = null;
        enhancer36.setSuperclass(class41);
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader44 = enhancer43.getClassLoader();
        enhancer43.setInterceptDuringConstruction(true);
        boolean boolean47 = enhancer43.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = enhancer43.getStrategy();
        enhancer36.setStrategy(generatorStrategy48);
        org.mockito.cglib.proxy.Enhancer enhancer50 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader51 = enhancer50.getClassLoader();
        enhancer50.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader54 = enhancer50.getClassLoader();
        java.lang.Class class55 = null;
        enhancer50.setSuperclass(class55);
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader58 = enhancer57.getClassLoader();
        enhancer57.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer61 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader62 = enhancer61.getClassLoader();
        enhancer57.setClassLoader(classLoader62);
        enhancer57.setUseCache(false);
        java.lang.ClassLoader classLoader66 = enhancer57.getClassLoader();
        enhancer50.setClassLoader(classLoader66);
        boolean boolean68 = generatorStrategy48.equals((java.lang.Object) enhancer50);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = enhancer50.getNamingPolicy();
        boolean boolean70 = enhancer50.getAttemptLoad();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter71 = null;
        enhancer50.setCallbackFilter(callbackFilter71);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = enhancer50.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer74 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader75 = enhancer74.getClassLoader();
        enhancer74.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader78 = enhancer74.getClassLoader();
        java.lang.Class class79 = null;
        enhancer74.setSuperclass(class79);
        enhancer74.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer83 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader84 = enhancer83.getClassLoader();
        enhancer83.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer87 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader88 = enhancer87.getClassLoader();
        enhancer83.setClassLoader(classLoader88);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy90 = enhancer83.getStrategy();
        enhancer74.setStrategy(generatorStrategy90);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy92 = enhancer74.getStrategy();
        boolean boolean93 = enhancer74.getUseCache();
        boolean boolean94 = generatorStrategy73.equals((java.lang.Object) enhancer74);
        org.mockito.cglib.core.NamingPolicy namingPolicy95 = enhancer74.getNamingPolicy();
        enhancer20.setNamingPolicy(namingPolicy95);
        java.lang.Class<?> wildcardClass97 = enhancer20.getClass();
        boolean boolean98 = generatorStrategy16.equals((java.lang.Object) enhancer20);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(generatorStrategy73);
        org.junit.Assert.assertNotNull(classLoader75);
        org.junit.Assert.assertNotNull(classLoader78);
        org.junit.Assert.assertNotNull(classLoader84);
        org.junit.Assert.assertNotNull(classLoader88);
        org.junit.Assert.assertNotNull(generatorStrategy90);
        org.junit.Assert.assertNotNull(generatorStrategy92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(namingPolicy95);
        org.junit.Assert.assertNotNull(wildcardClass97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test09548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09548");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = enhancer0.getNamingPolicy();
        boolean boolean10 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer11.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader15 = enhancer11.getClassLoader();
        java.lang.Class class16 = null;
        enhancer11.setSuperclass(class16);
        java.lang.ClassLoader classLoader18 = enhancer11.getClassLoader();
        enhancer0.setClassLoader(classLoader18);
        enhancer0.setAttemptLoad(false);
        enhancer0.setUseCache(false);
        boolean boolean24 = enhancer0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj25 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test09549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09549");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader3 = enhancer2.getClassLoader();
        enhancer2.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader7 = enhancer6.getClassLoader();
        enhancer2.setClassLoader(classLoader7);
        enhancer2.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer11.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        enhancer11.setClassLoader(classLoader16);
        enhancer11.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = enhancer11.getNamingPolicy();
        enhancer2.setNamingPolicy(namingPolicy20);
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer22.setInterceptDuringConstruction(true);
        boolean boolean26 = namingPolicy20.equals((java.lang.Object) enhancer22);
        enhancer0.setNamingPolicy(namingPolicy20);
        java.lang.ClassLoader classLoader28 = enhancer0.getClassLoader();
        boolean boolean29 = enhancer0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter33 = null;
        enhancer31.setCallbackFilter(callbackFilter33);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter35 = null;
        enhancer31.setCallbackFilter(callbackFilter35);
        boolean boolean37 = enhancer31.getUseCache();
        enhancer31.setSerialVersionUID((java.lang.Long) 100L);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray40 = generatorStrategy30.generate((org.mockito.cglib.core.ClassGenerator) enhancer31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test09550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09550");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader2 = enhancer1.getClassLoader();
        enhancer1.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        enhancer1.setClassLoader(classLoader6);
        enhancer0.setClassLoader(classLoader6);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader13 = enhancer9.getClassLoader();
        enhancer0.setClassLoader(classLoader13);
        boolean boolean15 = enhancer0.getUseCache();
        enhancer0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        enhancer18.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer18.setClassLoader(classLoader23);
        enhancer18.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = enhancer18.getNamingPolicy();
        boolean boolean28 = enhancer18.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer29.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader33 = enhancer29.getClassLoader();
        java.lang.Class class34 = null;
        enhancer29.setSuperclass(class34);
        java.lang.ClassLoader classLoader36 = enhancer29.getClassLoader();
        enhancer18.setClassLoader(classLoader36);
        boolean boolean38 = enhancer18.getUseCache();
        enhancer18.setInterceptDuringConstruction(true);
        java.lang.Class<?> wildcardClass41 = enhancer18.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass41);
        org.mockito.cglib.proxy.Callback callback43 = null;
        enhancer0.setCallback(callback43);
        org.mockito.asm.ClassVisitor classVisitor45 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test09551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09551");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer9.setClassLoader(classLoader14);
        enhancer9.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer9.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer20.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader24 = enhancer20.getClassLoader();
        java.lang.Class class25 = null;
        enhancer20.setSuperclass(class25);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader28 = enhancer27.getClassLoader();
        enhancer27.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer27.setClassLoader(classLoader32);
        enhancer27.setUseCache(false);
        java.lang.ClassLoader classLoader36 = enhancer27.getClassLoader();
        enhancer20.setClassLoader(classLoader36);
        boolean boolean38 = namingPolicy18.equals((java.lang.Object) enhancer20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = enhancer20.getStrategy();
        boolean boolean40 = enhancer20.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader42 = enhancer41.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader45 = enhancer44.getClassLoader();
        enhancer44.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        enhancer44.setClassLoader(classLoader49);
        enhancer43.setClassLoader(classLoader49);
        enhancer41.setClassLoader(classLoader49);
        enhancer20.setClassLoader(classLoader49);
        enhancer20.setSerialVersionUID((java.lang.Long) 100L);
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader57 = enhancer56.getClassLoader();
        enhancer56.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader60 = enhancer56.getClassLoader();
        java.lang.Class class61 = null;
        enhancer56.setSuperclass(class61);
        org.mockito.cglib.proxy.Enhancer enhancer63 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader64 = enhancer63.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = enhancer63.getStrategy();
        enhancer56.setStrategy(generatorStrategy65);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = enhancer56.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = enhancer56.getNamingPolicy();
        enhancer20.setNamingPolicy(namingPolicy68);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter70 = null;
        enhancer20.setCallbackFilter(callbackFilter70);
        java.lang.ClassLoader classLoader72 = enhancer20.getClassLoader();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertNotNull(classLoader60);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertNotNull(classLoader72);
    }

    @Test
    public void test09552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09552");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Callback callback5 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray6 = new org.mockito.cglib.proxy.Callback[] { callback5 };
        enhancer0.setCallbacks(callbackArray6);
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader11 = enhancer10.getClassLoader();
        enhancer10.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer10.setClassLoader(classLoader15);
        enhancer10.setUseCache(false);
        java.lang.ClassLoader classLoader19 = enhancer10.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = enhancer10.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        boolean boolean23 = enhancer21.getAttemptLoad();
        enhancer21.setSerialVersionUID((java.lang.Long) 10L);
        boolean boolean26 = namingPolicy20.equals((java.lang.Object) 10L);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader28 = enhancer27.getClassLoader();
        enhancer27.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer27.setClassLoader(classLoader32);
        enhancer27.setUseCache(false);
        java.lang.ClassLoader classLoader36 = enhancer27.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = enhancer27.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = enhancer27.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = enhancer27.getNamingPolicy();
        boolean boolean40 = namingPolicy20.equals((java.lang.Object) namingPolicy39);
        enhancer0.setNamingPolicy(namingPolicy39);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader44 = enhancer43.getClassLoader();
        enhancer43.setUseCache(true);
        boolean boolean47 = enhancer43.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        enhancer48.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback51 = null;
        enhancer48.setCallback(callback51);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter53 = null;
        enhancer48.setCallbackFilter(callbackFilter53);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = enhancer48.getStrategy();
        boolean boolean56 = enhancer48.getUseCache();
        org.mockito.cglib.proxy.Callback callback57 = null;
        enhancer48.setCallback(callback57);
        org.mockito.cglib.proxy.Enhancer enhancer59 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader60 = enhancer59.getClassLoader();
        boolean boolean61 = enhancer59.getAttemptLoad();
        java.lang.ClassLoader classLoader62 = enhancer59.getClassLoader();
        enhancer48.setClassLoader(classLoader62);
        org.mockito.cglib.proxy.Enhancer enhancer64 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader65 = enhancer64.getClassLoader();
        enhancer64.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer68 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader69 = enhancer68.getClassLoader();
        enhancer64.setClassLoader(classLoader69);
        enhancer64.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = enhancer64.getNamingPolicy();
        enhancer48.setNamingPolicy(namingPolicy73);
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = enhancer48.getNamingPolicy();
        enhancer43.setNamingPolicy(namingPolicy75);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter77 = null;
        enhancer43.setCallbackFilter(callbackFilter77);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy79 = enhancer43.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray80 = generatorStrategy42.generate((org.mockito.cglib.core.ClassGenerator) enhancer43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(callbackArray6);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(classLoader60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(classLoader69);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertNotNull(namingPolicy75);
        org.junit.Assert.assertNotNull(generatorStrategy79);
    }

    @Test
    public void test09553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09553");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader2 = enhancer1.getClassLoader();
        enhancer1.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        enhancer1.setClassLoader(classLoader6);
        enhancer0.setClassLoader(classLoader6);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader13 = enhancer9.getClassLoader();
        enhancer0.setClassLoader(classLoader13);
        boolean boolean15 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        enhancer16.setInterceptDuringConstruction(true);
        boolean boolean20 = enhancer16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = enhancer16.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer22.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader26 = enhancer22.getClassLoader();
        org.mockito.cglib.proxy.Callback callback27 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray28 = new org.mockito.cglib.proxy.Callback[] { callback27 };
        enhancer22.setCallbacks(callbackArray28);
        enhancer16.setCallbacks(callbackArray28);
        enhancer0.setCallbacks(callbackArray28);
        enhancer0.setUseFactory(false);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Callback callback36 = null;
        enhancer0.setCallback(callback36);
        boolean boolean38 = enhancer0.getUseCache();
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(callbackArray28);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test09554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09554");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader2 = enhancer1.getClassLoader();
        enhancer1.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        enhancer1.setClassLoader(classLoader6);
        enhancer0.setClassLoader(classLoader6);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader13 = enhancer9.getClassLoader();
        enhancer0.setClassLoader(classLoader13);
        boolean boolean15 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        enhancer16.setInterceptDuringConstruction(true);
        boolean boolean20 = enhancer16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = enhancer16.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer22.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader26 = enhancer22.getClassLoader();
        org.mockito.cglib.proxy.Callback callback27 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray28 = new org.mockito.cglib.proxy.Callback[] { callback27 };
        enhancer22.setCallbacks(callbackArray28);
        enhancer16.setCallbacks(callbackArray28);
        enhancer0.setCallbacks(callbackArray28);
        enhancer0.setUseFactory(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = enhancer0.getStrategy();
        boolean boolean35 = enhancer0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj36 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(callbackArray28);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test09555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09555");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer9.setClassLoader(classLoader14);
        enhancer9.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer9.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer20.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader24 = enhancer20.getClassLoader();
        java.lang.Class class25 = null;
        enhancer20.setSuperclass(class25);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader28 = enhancer27.getClassLoader();
        enhancer27.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer27.setClassLoader(classLoader32);
        enhancer27.setUseCache(false);
        java.lang.ClassLoader classLoader36 = enhancer27.getClassLoader();
        enhancer20.setClassLoader(classLoader36);
        boolean boolean38 = namingPolicy18.equals((java.lang.Object) enhancer20);
        boolean boolean39 = enhancer20.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        enhancer40.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader44 = enhancer40.getClassLoader();
        org.mockito.cglib.proxy.Callback callback45 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray46 = new org.mockito.cglib.proxy.Callback[] { callback45 };
        enhancer40.setCallbacks(callbackArray46);
        enhancer40.setSerialVersionUID((java.lang.Long) 0L);
        boolean boolean50 = enhancer40.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer51 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader52 = enhancer51.getClassLoader();
        enhancer51.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        enhancer51.setClassLoader(classLoader56);
        enhancer51.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer60 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader61 = enhancer60.getClassLoader();
        enhancer60.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer64 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader65 = enhancer64.getClassLoader();
        enhancer60.setClassLoader(classLoader65);
        enhancer60.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = enhancer60.getNamingPolicy();
        enhancer51.setNamingPolicy(namingPolicy69);
        org.mockito.cglib.proxy.Enhancer enhancer71 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader72 = enhancer71.getClassLoader();
        enhancer71.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader75 = enhancer71.getClassLoader();
        java.lang.Class class76 = null;
        enhancer71.setSuperclass(class76);
        org.mockito.cglib.proxy.Enhancer enhancer78 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader79 = enhancer78.getClassLoader();
        enhancer78.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer82 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader83 = enhancer82.getClassLoader();
        enhancer78.setClassLoader(classLoader83);
        enhancer78.setUseCache(false);
        java.lang.ClassLoader classLoader87 = enhancer78.getClassLoader();
        enhancer71.setClassLoader(classLoader87);
        boolean boolean89 = namingPolicy69.equals((java.lang.Object) enhancer71);
        enhancer40.setNamingPolicy(namingPolicy69);
        java.lang.Class<?> wildcardClass91 = namingPolicy69.getClass();
        // The following exception was thrown during execution in test generation
        try {
            enhancer20.setCallbackType((java.lang.Class) wildcardClass91);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Unknown callback type class org.mockito.cglib.core.DefaultNamingPolicy");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(callbackArray46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(classLoader72);
        org.junit.Assert.assertNotNull(classLoader75);
        org.junit.Assert.assertNotNull(classLoader79);
        org.junit.Assert.assertNotNull(classLoader83);
        org.junit.Assert.assertNotNull(classLoader87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test09556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09556");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader9 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter10 = null;
        enhancer0.setCallbackFilter(callbackFilter10);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        enhancer12.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader16 = enhancer12.getClassLoader();
        java.lang.Class class17 = null;
        enhancer12.setSuperclass(class17);
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader20 = enhancer19.getClassLoader();
        enhancer19.setInterceptDuringConstruction(true);
        boolean boolean23 = enhancer19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = enhancer19.getStrategy();
        enhancer12.setStrategy(generatorStrategy24);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        enhancer26.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader30 = enhancer26.getClassLoader();
        java.lang.Class class31 = null;
        enhancer26.setSuperclass(class31);
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader34 = enhancer33.getClassLoader();
        enhancer33.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        enhancer33.setClassLoader(classLoader38);
        enhancer33.setUseCache(false);
        java.lang.ClassLoader classLoader42 = enhancer33.getClassLoader();
        enhancer26.setClassLoader(classLoader42);
        boolean boolean44 = generatorStrategy24.equals((java.lang.Object) enhancer26);
        enhancer0.setStrategy(generatorStrategy24);
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader47 = enhancer46.getClassLoader();
        enhancer46.setUseCache(true);
        boolean boolean50 = enhancer46.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer51 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader52 = enhancer51.getClassLoader();
        enhancer51.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader55 = enhancer51.getClassLoader();
        java.lang.Class class56 = null;
        enhancer51.setSuperclass(class56);
        org.mockito.cglib.proxy.Enhancer enhancer58 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader59 = enhancer58.getClassLoader();
        enhancer58.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer62 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader63 = enhancer62.getClassLoader();
        enhancer58.setClassLoader(classLoader63);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = enhancer58.getStrategy();
        java.lang.Class<?> wildcardClass66 = enhancer58.getClass();
        enhancer51.setSuperclass((java.lang.Class) wildcardClass66);
        enhancer46.setSuperclass((java.lang.Class) wildcardClass66);
        boolean boolean69 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass66);
        boolean boolean70 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass66);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass66);
        enhancer0.setUseCache(true);
        enhancer0.setSerialVersionUID((java.lang.Long) 100L);
        enhancer0.setAttemptLoad(false);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(classLoader63);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test09557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09557");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        enhancer0.setStrategy(generatorStrategy9);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer11.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        enhancer11.setClassLoader(classLoader16);
        enhancer11.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer20.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        enhancer20.setClassLoader(classLoader25);
        enhancer20.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = enhancer20.getNamingPolicy();
        enhancer11.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer31.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader35 = enhancer31.getClassLoader();
        java.lang.Class class36 = null;
        enhancer31.setSuperclass(class36);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader39 = enhancer38.getClassLoader();
        enhancer38.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader43 = enhancer42.getClassLoader();
        enhancer38.setClassLoader(classLoader43);
        enhancer38.setUseCache(false);
        java.lang.ClassLoader classLoader47 = enhancer38.getClassLoader();
        enhancer31.setClassLoader(classLoader47);
        boolean boolean49 = namingPolicy29.equals((java.lang.Object) enhancer31);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = enhancer31.getStrategy();
        enhancer0.setStrategy(generatorStrategy50);
        org.mockito.cglib.proxy.Enhancer enhancer52 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader53 = enhancer52.getClassLoader();
        enhancer52.setInterceptDuringConstruction(true);
        boolean boolean56 = enhancer52.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = enhancer52.getStrategy();
        java.lang.Class[] classArray58 = new java.lang.Class[] {};
        enhancer52.setInterfaces(classArray58);
        enhancer0.setInterfaces(classArray58);
        enhancer0.setUseFactory(false);
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer65 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader66 = enhancer65.getClassLoader();
        enhancer65.setUseCache(true);
        boolean boolean69 = enhancer65.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer70 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader71 = enhancer70.getClassLoader();
        enhancer70.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader74 = enhancer70.getClassLoader();
        java.lang.Class class75 = null;
        enhancer70.setSuperclass(class75);
        java.lang.Class<?> wildcardClass77 = enhancer70.getClass();
        enhancer65.setSuperclass((java.lang.Class) wildcardClass77);
        boolean boolean79 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass77);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass77);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy83 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer84 = new org.mockito.cglib.proxy.Enhancer();
        enhancer84.setSerialVersionUID((java.lang.Long) (-1L));
        enhancer84.setAttemptLoad(false);
        enhancer84.setUseCache(false);
        enhancer84.setInterceptDuringConstruction(false);
        enhancer84.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader95 = enhancer84.getClassLoader();
        boolean boolean96 = namingPolicy83.equals((java.lang.Object) classLoader95);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(namingPolicy83);
        org.junit.Assert.assertNotNull(classLoader95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test09558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09558");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        enhancer0.setStrategy(generatorStrategy9);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = enhancer11.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setUseCache(true);
        boolean boolean18 = enhancer14.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader20 = enhancer19.getClassLoader();
        enhancer19.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader23 = enhancer19.getClassLoader();
        java.lang.Class class24 = null;
        enhancer19.setSuperclass(class24);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        enhancer26.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader31 = enhancer30.getClassLoader();
        enhancer26.setClassLoader(classLoader31);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = enhancer26.getStrategy();
        java.lang.Class<?> wildcardClass34 = enhancer26.getClass();
        enhancer19.setSuperclass((java.lang.Class) wildcardClass34);
        enhancer14.setSuperclass((java.lang.Class) wildcardClass34);
        enhancer11.setSuperclass((java.lang.Class) wildcardClass34);
        org.mockito.cglib.proxy.Callback callback38 = null;
        enhancer11.setCallback(callback38);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        enhancer40.setInterceptDuringConstruction(true);
        boolean boolean44 = enhancer40.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = enhancer40.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader47 = enhancer46.getClassLoader();
        enhancer46.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader50 = enhancer46.getClassLoader();
        org.mockito.cglib.proxy.Callback callback51 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray52 = new org.mockito.cglib.proxy.Callback[] { callback51 };
        enhancer46.setCallbacks(callbackArray52);
        enhancer40.setCallbacks(callbackArray52);
        enhancer11.setCallbacks(callbackArray52);
        enhancer0.setCallbacks(callbackArray52);
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader58 = enhancer57.getClassLoader();
        enhancer57.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader61 = enhancer57.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer62 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader63 = enhancer62.getClassLoader();
        enhancer62.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader66 = enhancer62.getClassLoader();
        org.mockito.cglib.proxy.Callback callback67 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray68 = new org.mockito.cglib.proxy.Callback[] { callback67 };
        enhancer62.setCallbacks(callbackArray68);
        enhancer57.setCallbacks(callbackArray68);
        org.mockito.cglib.proxy.Enhancer enhancer71 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader72 = enhancer71.getClassLoader();
        enhancer71.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader75 = enhancer71.getClassLoader();
        enhancer57.setClassLoader(classLoader75);
        enhancer0.setClassLoader(classLoader75);
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter79 = null;
        enhancer0.setCallbackFilter(callbackFilter79);
        enhancer0.setUseFactory(false);
        boolean boolean83 = enhancer0.getAttemptLoad();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(callbackArray52);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertNotNull(classLoader63);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertNotNull(callbackArray68);
        org.junit.Assert.assertNotNull(classLoader72);
        org.junit.Assert.assertNotNull(classLoader75);
        org.junit.Assert.assertNotNull(namingPolicy78);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test09559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09559");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = enhancer0.getNamingPolicy();
        boolean boolean10 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer11.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader15 = enhancer11.getClassLoader();
        java.lang.Class class16 = null;
        enhancer11.setSuperclass(class16);
        java.lang.ClassLoader classLoader18 = enhancer11.getClassLoader();
        enhancer0.setClassLoader(classLoader18);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        enhancer20.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback23 = null;
        enhancer20.setCallback(callback23);
        enhancer20.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = enhancer20.getNamingPolicy();
        org.mockito.cglib.proxy.Callback callback28 = null;
        enhancer20.setCallback(callback28);
        boolean boolean30 = enhancer20.getUseCache();
        enhancer20.setAttemptLoad(true);
        java.lang.ClassLoader classLoader33 = enhancer20.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        enhancer36.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        enhancer36.setClassLoader(classLoader41);
        enhancer36.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader46 = enhancer45.getClassLoader();
        enhancer45.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader50 = enhancer49.getClassLoader();
        enhancer45.setClassLoader(classLoader50);
        enhancer45.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = enhancer45.getNamingPolicy();
        enhancer36.setNamingPolicy(namingPolicy54);
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader57 = enhancer56.getClassLoader();
        enhancer56.setInterceptDuringConstruction(true);
        boolean boolean60 = namingPolicy54.equals((java.lang.Object) enhancer56);
        enhancer34.setNamingPolicy(namingPolicy54);
        enhancer34.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer64 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader65 = enhancer64.getClassLoader();
        enhancer64.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader68 = enhancer64.getClassLoader();
        java.lang.Class class69 = null;
        enhancer64.setSuperclass(class69);
        enhancer64.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer73 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader74 = enhancer73.getClassLoader();
        enhancer73.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer77 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader78 = enhancer77.getClassLoader();
        enhancer73.setClassLoader(classLoader78);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = enhancer73.getStrategy();
        enhancer64.setStrategy(generatorStrategy80);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = enhancer64.getStrategy();
        enhancer34.setStrategy(generatorStrategy82);
        org.mockito.cglib.proxy.Enhancer enhancer84 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader85 = enhancer84.getClassLoader();
        enhancer84.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer88 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader89 = enhancer88.getClassLoader();
        enhancer84.setClassLoader(classLoader89);
        enhancer84.setUseCache(false);
        enhancer84.setSerialVersionUID((java.lang.Long) 0L);
        boolean boolean95 = generatorStrategy82.equals((java.lang.Object) 0L);
        enhancer20.setStrategy(generatorStrategy82);
        enhancer0.setStrategy(generatorStrategy82);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy98 = enhancer0.getStrategy();
        boolean boolean99 = enhancer0.getUseCache();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(classLoader68);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(classLoader78);
        org.junit.Assert.assertNotNull(generatorStrategy80);
        org.junit.Assert.assertNotNull(generatorStrategy82);
        org.junit.Assert.assertNotNull(classLoader85);
        org.junit.Assert.assertNotNull(classLoader89);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(generatorStrategy98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test09560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09560");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader9 = enhancer0.getClassLoader();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Callback callback12 = null;
        enhancer0.setCallback(callback12);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = enhancer15.getStrategy();
        enhancer15.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader20 = enhancer15.getClassLoader();
        java.lang.Class<?> wildcardClass21 = enhancer15.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass21);
        boolean boolean23 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass21);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        enhancer24.setUseCache(true);
        boolean boolean28 = enhancer24.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = enhancer24.getStrategy();
        boolean boolean30 = enhancer24.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = enhancer24.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        enhancer32.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader36 = enhancer32.getClassLoader();
        java.lang.Class class37 = null;
        enhancer32.setSuperclass(class37);
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader40 = enhancer39.getClassLoader();
        enhancer39.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader44 = enhancer43.getClassLoader();
        enhancer39.setClassLoader(classLoader44);
        enhancer39.setUseCache(false);
        java.lang.ClassLoader classLoader48 = enhancer39.getClassLoader();
        enhancer32.setClassLoader(classLoader48);
        java.lang.ClassLoader classLoader50 = enhancer32.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer51 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader52 = enhancer51.getClassLoader();
        boolean boolean53 = enhancer51.getAttemptLoad();
        enhancer51.setInterceptDuringConstruction(false);
        enhancer51.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = enhancer51.getStrategy();
        enhancer32.setStrategy(generatorStrategy58);
        enhancer32.setInterceptDuringConstruction(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = enhancer32.getNamingPolicy();
        boolean boolean63 = enhancer32.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer64 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader65 = enhancer64.getClassLoader();
        enhancer64.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer68 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader69 = enhancer68.getClassLoader();
        enhancer64.setClassLoader(classLoader69);
        enhancer64.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer73 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader74 = enhancer73.getClassLoader();
        enhancer73.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader77 = enhancer73.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer78 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader79 = enhancer78.getClassLoader();
        enhancer78.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader82 = enhancer78.getClassLoader();
        org.mockito.cglib.proxy.Callback callback83 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray84 = new org.mockito.cglib.proxy.Callback[] { callback83 };
        enhancer78.setCallbacks(callbackArray84);
        enhancer73.setCallbacks(callbackArray84);
        enhancer64.setCallbacks(callbackArray84);
        enhancer32.setCallbacks(callbackArray84);
        enhancer24.setCallbacks(callbackArray84);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerStaticCallbacks((java.lang.Class) wildcardClass21, callbackArray84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.proxy.Enhancer is not an enhanced class");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(classLoader69);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(classLoader77);
        org.junit.Assert.assertNotNull(classLoader79);
        org.junit.Assert.assertNotNull(classLoader82);
        org.junit.Assert.assertNotNull(callbackArray84);
    }

    @Test
    public void test09561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09561");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        enhancer0.setStrategy(generatorStrategy9);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = enhancer11.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setUseCache(true);
        boolean boolean18 = enhancer14.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader20 = enhancer19.getClassLoader();
        enhancer19.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader23 = enhancer19.getClassLoader();
        java.lang.Class class24 = null;
        enhancer19.setSuperclass(class24);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        enhancer26.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader31 = enhancer30.getClassLoader();
        enhancer26.setClassLoader(classLoader31);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = enhancer26.getStrategy();
        java.lang.Class<?> wildcardClass34 = enhancer26.getClass();
        enhancer19.setSuperclass((java.lang.Class) wildcardClass34);
        enhancer14.setSuperclass((java.lang.Class) wildcardClass34);
        enhancer11.setSuperclass((java.lang.Class) wildcardClass34);
        org.mockito.cglib.proxy.Callback callback38 = null;
        enhancer11.setCallback(callback38);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        enhancer40.setInterceptDuringConstruction(true);
        boolean boolean44 = enhancer40.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = enhancer40.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader47 = enhancer46.getClassLoader();
        enhancer46.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader50 = enhancer46.getClassLoader();
        org.mockito.cglib.proxy.Callback callback51 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray52 = new org.mockito.cglib.proxy.Callback[] { callback51 };
        enhancer46.setCallbacks(callbackArray52);
        enhancer40.setCallbacks(callbackArray52);
        enhancer11.setCallbacks(callbackArray52);
        enhancer0.setCallbacks(callbackArray52);
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader58 = enhancer57.getClassLoader();
        enhancer57.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader61 = enhancer57.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer62 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader63 = enhancer62.getClassLoader();
        enhancer62.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader66 = enhancer62.getClassLoader();
        org.mockito.cglib.proxy.Callback callback67 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray68 = new org.mockito.cglib.proxy.Callback[] { callback67 };
        enhancer62.setCallbacks(callbackArray68);
        enhancer57.setCallbacks(callbackArray68);
        org.mockito.cglib.proxy.Enhancer enhancer71 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader72 = enhancer71.getClassLoader();
        enhancer71.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader75 = enhancer71.getClassLoader();
        enhancer57.setClassLoader(classLoader75);
        enhancer0.setClassLoader(classLoader75);
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter79 = null;
        enhancer0.setCallbackFilter(callbackFilter79);
        enhancer0.setInterceptDuringConstruction(false);
        boolean boolean83 = enhancer0.getAttemptLoad();
        enhancer0.setUseFactory(false);
        boolean boolean86 = enhancer0.getUseCache();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(callbackArray52);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertNotNull(classLoader63);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertNotNull(callbackArray68);
        org.junit.Assert.assertNotNull(classLoader72);
        org.junit.Assert.assertNotNull(classLoader75);
        org.junit.Assert.assertNotNull(namingPolicy78);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test09562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09562");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader2 = enhancer1.getClassLoader();
        enhancer1.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        enhancer1.setClassLoader(classLoader6);
        enhancer0.setClassLoader(classLoader6);
        java.lang.ClassLoader classLoader9 = enhancer0.getClassLoader();
        enhancer0.setUseFactory(true);
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        enhancer14.setClassLoader(classLoader19);
        enhancer14.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader24 = enhancer23.getClassLoader();
        enhancer23.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader28 = enhancer27.getClassLoader();
        enhancer23.setClassLoader(classLoader28);
        enhancer23.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = enhancer23.getNamingPolicy();
        enhancer14.setNamingPolicy(namingPolicy32);
        java.lang.Class<?> wildcardClass34 = namingPolicy32.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass34);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = enhancer0.getStrategy();
        enhancer0.setInterceptDuringConstruction(false);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(generatorStrategy36);
    }

    @Test
    public void test09563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09563");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer9.setClassLoader(classLoader14);
        enhancer9.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer9.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer20.setUseCache(true);
        boolean boolean24 = enhancer20.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer25.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader29 = enhancer25.getClassLoader();
        java.lang.Class class30 = null;
        enhancer25.setSuperclass(class30);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        enhancer32.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        enhancer32.setClassLoader(classLoader37);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = enhancer32.getStrategy();
        java.lang.Class<?> wildcardClass40 = enhancer32.getClass();
        enhancer25.setSuperclass((java.lang.Class) wildcardClass40);
        enhancer20.setSuperclass((java.lang.Class) wildcardClass40);
        boolean boolean43 = namingPolicy18.equals((java.lang.Object) enhancer20);
        enhancer20.setUseFactory(false);
        java.lang.ClassLoader classLoader46 = enhancer20.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = enhancer20.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        enhancer48.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer52 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader53 = enhancer52.getClassLoader();
        enhancer48.setClassLoader(classLoader53);
        enhancer48.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader58 = enhancer57.getClassLoader();
        enhancer57.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer61 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader62 = enhancer61.getClassLoader();
        enhancer57.setClassLoader(classLoader62);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter64 = null;
        enhancer57.setCallbackFilter(callbackFilter64);
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = enhancer57.getNamingPolicy();
        enhancer48.setNamingPolicy(namingPolicy66);
        boolean boolean68 = generatorStrategy47.equals((java.lang.Object) namingPolicy66);
        org.mockito.cglib.proxy.Enhancer enhancer69 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader70 = enhancer69.getClassLoader();
        enhancer69.setInterceptDuringConstruction(true);
        enhancer69.setSerialVersionUID((java.lang.Long) (-1L));
        java.lang.ClassLoader classLoader75 = enhancer69.getClassLoader();
        java.lang.ClassLoader classLoader76 = enhancer69.getClassLoader();
        enhancer69.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer79 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader80 = enhancer79.getClassLoader();
        enhancer79.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader83 = enhancer79.getClassLoader();
        java.lang.Class class84 = null;
        enhancer79.setSuperclass(class84);
        org.mockito.cglib.proxy.Enhancer enhancer86 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader87 = enhancer86.getClassLoader();
        enhancer86.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer90 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader91 = enhancer90.getClassLoader();
        enhancer86.setClassLoader(classLoader91);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy93 = enhancer86.getStrategy();
        java.lang.Class<?> wildcardClass94 = enhancer86.getClass();
        enhancer79.setSuperclass((java.lang.Class) wildcardClass94);
        boolean boolean96 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass94);
        boolean boolean97 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass94);
        enhancer69.setSuperclass((java.lang.Class) wildcardClass94);
        boolean boolean99 = namingPolicy66.equals((java.lang.Object) enhancer69);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(classLoader75);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertNotNull(classLoader80);
        org.junit.Assert.assertNotNull(classLoader83);
        org.junit.Assert.assertNotNull(classLoader87);
        org.junit.Assert.assertNotNull(classLoader91);
        org.junit.Assert.assertNotNull(generatorStrategy93);
        org.junit.Assert.assertNotNull(wildcardClass94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test09564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09564");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader9 = enhancer0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        enhancer12.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader16 = enhancer12.getClassLoader();
        java.lang.Class class17 = null;
        enhancer12.setSuperclass(class17);
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader20 = enhancer19.getClassLoader();
        enhancer19.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader24 = enhancer23.getClassLoader();
        enhancer19.setClassLoader(classLoader24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = enhancer19.getStrategy();
        java.lang.Class<?> wildcardClass27 = enhancer19.getClass();
        enhancer12.setSuperclass((java.lang.Class) wildcardClass27);
        enhancer12.setAttemptLoad(false);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer12.setClassLoader(classLoader32);
        enhancer12.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        enhancer36.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        enhancer36.setClassLoader(classLoader41);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = enhancer36.getStrategy();
        enhancer36.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        enhancer46.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = enhancer46.getStrategy();
        enhancer36.setStrategy(generatorStrategy49);
        org.mockito.cglib.proxy.Enhancer enhancer51 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader52 = enhancer51.getClassLoader();
        enhancer51.setInterceptDuringConstruction(true);
        boolean boolean55 = enhancer51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = enhancer51.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader58 = enhancer57.getClassLoader();
        enhancer57.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader61 = enhancer57.getClassLoader();
        org.mockito.cglib.proxy.Callback callback62 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray63 = new org.mockito.cglib.proxy.Callback[] { callback62 };
        enhancer57.setCallbacks(callbackArray63);
        enhancer51.setCallbacks(callbackArray63);
        enhancer36.setCallbacks(callbackArray63);
        enhancer12.setCallbacks(callbackArray63);
        enhancer0.setCallbacks(callbackArray63);
        org.mockito.cglib.proxy.Callback callback69 = null;
        enhancer0.setCallback(callback69);
        enhancer0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader73 = enhancer0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = enhancer0.getNamingPolicy();
        enhancer0.setAttemptLoad(false);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertNotNull(callbackArray63);
        org.junit.Assert.assertNotNull(classLoader73);
        org.junit.Assert.assertNotNull(namingPolicy74);
    }

    @Test
    public void test09565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09565");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter2 = null;
        enhancer0.setCallbackFilter(callbackFilter2);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter4 = null;
        enhancer0.setCallbackFilter(callbackFilter4);
        boolean boolean6 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter9 = null;
        enhancer7.setCallbackFilter(callbackFilter9);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter11 = null;
        enhancer7.setCallbackFilter(callbackFilter11);
        enhancer7.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = enhancer7.getStrategy();
        java.lang.Class<?> wildcardClass16 = enhancer7.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass16);
        enhancer0.setInterceptDuringConstruction(true);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test09566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09566");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader5 = enhancer0.getClassLoader();
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader8 = enhancer0.getClassLoader();
        enhancer0.setSerialVersionUID((java.lang.Long) (-1L));
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter13 = null;
        enhancer0.setCallbackFilter(callbackFilter13);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        enhancer15.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback18 = null;
        enhancer15.setCallback(callback18);
        enhancer15.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = enhancer15.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader24 = enhancer23.getClassLoader();
        enhancer23.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader27 = enhancer23.getClassLoader();
        org.mockito.cglib.proxy.Callback callback28 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray29 = new org.mockito.cglib.proxy.Callback[] { callback28 };
        enhancer23.setCallbacks(callbackArray29);
        enhancer23.setSerialVersionUID((java.lang.Long) 0L);
        boolean boolean33 = enhancer23.getUseCache();
        enhancer23.setSerialVersionUID((java.lang.Long) (-1L));
        enhancer23.setAttemptLoad(true);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter38 = null;
        enhancer23.setCallbackFilter(callbackFilter38);
        java.lang.ClassLoader classLoader40 = enhancer23.getClassLoader();
        boolean boolean41 = namingPolicy22.equals((java.lang.Object) classLoader40);
        enhancer0.setNamingPolicy(namingPolicy22);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(callbackArray29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test09567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09567");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        boolean boolean11 = enhancer7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer7.getStrategy();
        enhancer0.setStrategy(generatorStrategy12);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader18 = enhancer14.getClassLoader();
        java.lang.Class class19 = null;
        enhancer14.setSuperclass(class19);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer21.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer21.setClassLoader(classLoader26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = enhancer21.getStrategy();
        java.lang.Class<?> wildcardClass29 = enhancer21.getClass();
        enhancer14.setSuperclass((java.lang.Class) wildcardClass29);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass29);
        boolean boolean32 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        enhancer34.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader39 = enhancer38.getClassLoader();
        enhancer34.setClassLoader(classLoader39);
        enhancer33.setClassLoader(classLoader39);
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader43 = enhancer42.getClassLoader();
        enhancer42.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader46 = enhancer42.getClassLoader();
        enhancer33.setClassLoader(classLoader46);
        boolean boolean48 = enhancer33.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader50 = enhancer49.getClassLoader();
        enhancer49.setInterceptDuringConstruction(true);
        boolean boolean53 = enhancer49.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = enhancer49.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        enhancer55.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader59 = enhancer55.getClassLoader();
        org.mockito.cglib.proxy.Callback callback60 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray61 = new org.mockito.cglib.proxy.Callback[] { callback60 };
        enhancer55.setCallbacks(callbackArray61);
        enhancer49.setCallbacks(callbackArray61);
        enhancer33.setCallbacks(callbackArray61);
        enhancer0.setCallbacks(callbackArray61);
        enhancer0.setSerialVersionUID((java.lang.Long) 100L);
        enhancer0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = enhancer0.getStrategy();
        boolean boolean71 = enhancer0.getAttemptLoad();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(callbackArray61);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test09568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09568");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        boolean boolean2 = enhancer0.getAttemptLoad();
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.proxy.Callback callback5 = null;
        enhancer0.setCallback(callback5);
        boolean boolean7 = enhancer0.getUseCache();
        boolean boolean8 = enhancer0.getUseCache();
        enhancer0.setUseFactory(false);
        enhancer0.setAttemptLoad(true);
        enhancer0.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        enhancer15.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader19 = enhancer15.getClassLoader();
        java.lang.Class class20 = null;
        enhancer15.setSuperclass(class20);
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer22.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        enhancer22.setClassLoader(classLoader27);
        enhancer22.setUseCache(false);
        java.lang.ClassLoader classLoader31 = enhancer22.getClassLoader();
        enhancer15.setClassLoader(classLoader31);
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader34 = enhancer33.getClassLoader();
        enhancer33.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader37 = enhancer33.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = enhancer33.getStrategy();
        enhancer15.setStrategy(generatorStrategy38);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        enhancer40.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader45 = enhancer44.getClassLoader();
        enhancer40.setClassLoader(classLoader45);
        enhancer40.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = enhancer40.getNamingPolicy();
        enhancer15.setNamingPolicy(namingPolicy49);
        java.lang.Class[] classArray51 = null;
        enhancer15.setInterfaces(classArray51);
        enhancer15.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        enhancer55.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer59 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader60 = enhancer59.getClassLoader();
        enhancer55.setClassLoader(classLoader60);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = enhancer55.getStrategy();
        enhancer55.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer65 = new org.mockito.cglib.proxy.Enhancer();
        enhancer65.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = enhancer65.getStrategy();
        enhancer55.setStrategy(generatorStrategy68);
        java.lang.Class<?> wildcardClass70 = enhancer55.getClass();
        enhancer15.setSuperclass((java.lang.Class) wildcardClass70);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass70);
        java.lang.ClassLoader classLoader73 = enhancer0.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class74 = enhancer0.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: createClass does not accept callbacks");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(classLoader60);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertNotNull(classLoader73);
    }

    @Test
    public void test09569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09569");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer7.setClassLoader(classLoader12);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = enhancer7.getStrategy();
        java.lang.Class<?> wildcardClass15 = enhancer7.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass15);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        enhancer17.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer17.setClassLoader(classLoader22);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = enhancer17.getStrategy();
        enhancer0.setStrategy(generatorStrategy24);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        enhancer26.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback29 = null;
        enhancer26.setCallback(callback29);
        enhancer26.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = enhancer26.getNamingPolicy();
        org.mockito.cglib.proxy.Callback callback34 = null;
        enhancer26.setCallback(callback34);
        boolean boolean36 = enhancer26.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        enhancer26.setClassLoader(classLoader38);
        enhancer0.setClassLoader(classLoader38);
        boolean boolean41 = enhancer0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class42 = enhancer0.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback types are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test09570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09570");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer7.setClassLoader(classLoader12);
        enhancer7.setUseCache(false);
        java.lang.ClassLoader classLoader16 = enhancer7.getClassLoader();
        enhancer0.setClassLoader(classLoader16);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        enhancer18.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader22 = enhancer18.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer18.getStrategy();
        enhancer0.setStrategy(generatorStrategy23);
        boolean boolean25 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        enhancer26.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader31 = enhancer30.getClassLoader();
        enhancer26.setClassLoader(classLoader31);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = enhancer26.getStrategy();
        java.lang.Class<?> wildcardClass34 = enhancer26.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        enhancer35.setUseCache(true);
        boolean boolean39 = enhancer35.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        enhancer40.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader44 = enhancer40.getClassLoader();
        java.lang.Class class45 = null;
        enhancer40.setSuperclass(class45);
        org.mockito.cglib.proxy.Enhancer enhancer47 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader48 = enhancer47.getClassLoader();
        enhancer47.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer51 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader52 = enhancer51.getClassLoader();
        enhancer47.setClassLoader(classLoader52);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = enhancer47.getStrategy();
        java.lang.Class<?> wildcardClass55 = enhancer47.getClass();
        enhancer40.setSuperclass((java.lang.Class) wildcardClass55);
        enhancer35.setSuperclass((java.lang.Class) wildcardClass55);
        java.lang.Class[] classArray58 = new java.lang.Class[] { wildcardClass34, wildcardClass55 };
        enhancer0.setInterfaces(classArray58);
        enhancer0.setInterceptDuringConstruction(true);
        enhancer0.setInterceptDuringConstruction(false);
        enhancer0.setUseCache(false);
        enhancer0.setUseFactory(true);
        java.lang.ClassLoader classLoader68 = enhancer0.getClassLoader();
        enhancer0.setUseCache(false);
        enhancer0.setUseFactory(false);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(classLoader68);
    }

    @Test
    public void test09571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09571");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer7.setClassLoader(classLoader12);
        enhancer7.setUseCache(false);
        java.lang.ClassLoader classLoader16 = enhancer7.getClassLoader();
        enhancer0.setClassLoader(classLoader16);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        enhancer18.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader22 = enhancer18.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer18.getStrategy();
        enhancer0.setStrategy(generatorStrategy23);
        boolean boolean25 = enhancer0.getAttemptLoad();
        boolean boolean26 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader31 = enhancer30.getClassLoader();
        enhancer30.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader34 = enhancer30.getClassLoader();
        java.lang.Class class35 = null;
        enhancer30.setSuperclass(class35);
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        enhancer37.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader42 = enhancer41.getClassLoader();
        enhancer37.setClassLoader(classLoader42);
        enhancer37.setUseCache(false);
        java.lang.ClassLoader classLoader46 = enhancer37.getClassLoader();
        enhancer30.setClassLoader(classLoader46);
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        enhancer48.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader52 = enhancer48.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = enhancer48.getStrategy();
        enhancer30.setStrategy(generatorStrategy53);
        boolean boolean55 = enhancer30.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader57 = enhancer56.getClassLoader();
        enhancer56.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer60 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader61 = enhancer60.getClassLoader();
        enhancer56.setClassLoader(classLoader61);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = enhancer56.getStrategy();
        java.lang.Class<?> wildcardClass64 = enhancer56.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer65 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader66 = enhancer65.getClassLoader();
        enhancer65.setUseCache(true);
        boolean boolean69 = enhancer65.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer70 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader71 = enhancer70.getClassLoader();
        enhancer70.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader74 = enhancer70.getClassLoader();
        java.lang.Class class75 = null;
        enhancer70.setSuperclass(class75);
        org.mockito.cglib.proxy.Enhancer enhancer77 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader78 = enhancer77.getClassLoader();
        enhancer77.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer81 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader82 = enhancer81.getClassLoader();
        enhancer77.setClassLoader(classLoader82);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy84 = enhancer77.getStrategy();
        java.lang.Class<?> wildcardClass85 = enhancer77.getClass();
        enhancer70.setSuperclass((java.lang.Class) wildcardClass85);
        enhancer65.setSuperclass((java.lang.Class) wildcardClass85);
        java.lang.Class[] classArray88 = new java.lang.Class[] { wildcardClass64, wildcardClass85 };
        enhancer30.setInterfaces(classArray88);
        enhancer30.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter92 = null;
        enhancer30.setCallbackFilter(callbackFilter92);
        org.mockito.cglib.core.NamingPolicy namingPolicy94 = enhancer30.getNamingPolicy();
        boolean boolean95 = generatorStrategy29.equals((java.lang.Object) namingPolicy94);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(classLoader78);
        org.junit.Assert.assertNotNull(classLoader82);
        org.junit.Assert.assertNotNull(generatorStrategy84);
        org.junit.Assert.assertNotNull(wildcardClass85);
        org.junit.Assert.assertNotNull(classArray88);
        org.junit.Assert.assertNotNull(namingPolicy94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test09572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09572");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        enhancer0.setInterceptDuringConstruction(true);
        boolean boolean5 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter6 = null;
        enhancer0.setCallbackFilter(callbackFilter6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        enhancer9.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback12 = null;
        enhancer9.setCallback(callback12);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter14 = null;
        enhancer9.setCallbackFilter(callbackFilter14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer9.getStrategy();
        java.lang.Class class17 = null;
        enhancer9.setSuperclass(class17);
        java.lang.ClassLoader classLoader19 = enhancer9.getClassLoader();
        org.mockito.cglib.proxy.Callback callback20 = null;
        enhancer9.setCallback(callback20);
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer22.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader26 = enhancer22.getClassLoader();
        java.lang.Class class27 = null;
        enhancer22.setSuperclass(class27);
        enhancer22.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer31.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        enhancer35.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader40 = enhancer39.getClassLoader();
        enhancer39.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader44 = enhancer43.getClassLoader();
        enhancer39.setClassLoader(classLoader44);
        enhancer39.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        enhancer48.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer52 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader53 = enhancer52.getClassLoader();
        enhancer48.setClassLoader(classLoader53);
        enhancer48.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = enhancer48.getNamingPolicy();
        enhancer39.setNamingPolicy(namingPolicy57);
        org.mockito.cglib.proxy.Enhancer enhancer59 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader60 = enhancer59.getClassLoader();
        enhancer59.setUseCache(true);
        boolean boolean63 = enhancer59.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer64 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader65 = enhancer64.getClassLoader();
        enhancer64.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader68 = enhancer64.getClassLoader();
        java.lang.Class class69 = null;
        enhancer64.setSuperclass(class69);
        org.mockito.cglib.proxy.Enhancer enhancer71 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader72 = enhancer71.getClassLoader();
        enhancer71.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer75 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader76 = enhancer75.getClassLoader();
        enhancer71.setClassLoader(classLoader76);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = enhancer71.getStrategy();
        java.lang.Class<?> wildcardClass79 = enhancer71.getClass();
        enhancer64.setSuperclass((java.lang.Class) wildcardClass79);
        enhancer59.setSuperclass((java.lang.Class) wildcardClass79);
        boolean boolean82 = namingPolicy57.equals((java.lang.Object) enhancer59);
        enhancer35.setNamingPolicy(namingPolicy57);
        enhancer31.setNamingPolicy(namingPolicy57);
        enhancer22.setNamingPolicy(namingPolicy57);
        enhancer9.setNamingPolicy(namingPolicy57);
        org.mockito.cglib.proxy.Enhancer enhancer87 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader88 = enhancer87.getClassLoader();
        boolean boolean89 = enhancer87.getAttemptLoad();
        enhancer87.setSerialVersionUID((java.lang.Long) 10L);
        enhancer87.setUseFactory(true);
        enhancer87.setInterceptDuringConstruction(true);
        boolean boolean96 = namingPolicy57.equals((java.lang.Object) enhancer87);
        enhancer0.setNamingPolicy(namingPolicy57);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertNotNull(classLoader60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(classLoader68);
        org.junit.Assert.assertNotNull(classLoader72);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(classLoader88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test09573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09573");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        boolean boolean2 = enhancer0.getAttemptLoad();
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.proxy.Callback callback5 = null;
        enhancer0.setCallback(callback5);
        boolean boolean7 = enhancer0.getUseCache();
        boolean boolean8 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter9 = null;
        enhancer0.setCallbackFilter(callbackFilter9);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = null;
        enhancer0.setNamingPolicy(namingPolicy11);
        enhancer0.setUseFactory(true);
        org.mockito.asm.ClassVisitor classVisitor15 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test09574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09574");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer9.setClassLoader(classLoader14);
        enhancer9.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer9.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy18);
        enhancer0.setInterceptDuringConstruction(true);
        enhancer0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = enhancer0.getNamingPolicy();
        boolean boolean25 = enhancer0.getAttemptLoad();
        enhancer0.setUseCache(true);
        enhancer0.setUseFactory(false);
        boolean boolean30 = enhancer0.getAttemptLoad();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test09575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09575");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = enhancer0.getNamingPolicy();
        boolean boolean10 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer11.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader15 = enhancer11.getClassLoader();
        java.lang.Class class16 = null;
        enhancer11.setSuperclass(class16);
        java.lang.ClassLoader classLoader18 = enhancer11.getClassLoader();
        enhancer0.setClassLoader(classLoader18);
        enhancer0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = enhancer0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = null;
        enhancer0.setNamingPolicy(namingPolicy24);
        java.lang.ClassLoader classLoader26 = enhancer0.getClassLoader();
        java.lang.ClassLoader classLoader27 = enhancer0.getClassLoader();
        java.lang.Class<?> wildcardClass28 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer29.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader34 = enhancer33.getClassLoader();
        enhancer29.setClassLoader(classLoader34);
        enhancer29.setUseCache(false);
        java.lang.ClassLoader classLoader38 = enhancer29.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = enhancer29.getNamingPolicy();
        boolean boolean40 = enhancer29.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader42 = enhancer41.getClassLoader();
        enhancer41.setInterceptDuringConstruction(true);
        boolean boolean45 = enhancer41.getUseCache();
        boolean boolean46 = enhancer41.getAttemptLoad();
        enhancer41.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader50 = enhancer49.getClassLoader();
        enhancer49.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer53 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader54 = enhancer53.getClassLoader();
        enhancer49.setClassLoader(classLoader54);
        enhancer49.setUseCache(false);
        java.lang.ClassLoader classLoader58 = enhancer49.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer59 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader60 = enhancer59.getClassLoader();
        enhancer59.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader63 = enhancer59.getClassLoader();
        org.mockito.cglib.proxy.Callback callback64 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray65 = new org.mockito.cglib.proxy.Callback[] { callback64 };
        enhancer59.setCallbacks(callbackArray65);
        enhancer59.setSerialVersionUID((java.lang.Long) 0L);
        enhancer59.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.proxy.Enhancer enhancer71 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader72 = enhancer71.getClassLoader();
        enhancer71.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader75 = enhancer71.getClassLoader();
        org.mockito.cglib.proxy.Callback callback76 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray77 = new org.mockito.cglib.proxy.Callback[] { callback76 };
        enhancer71.setCallbacks(callbackArray77);
        org.mockito.cglib.proxy.Enhancer enhancer79 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader80 = enhancer79.getClassLoader();
        enhancer79.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader83 = enhancer79.getClassLoader();
        java.lang.Class class84 = null;
        enhancer79.setSuperclass(class84);
        java.lang.Class<?> wildcardClass86 = enhancer79.getClass();
        boolean boolean87 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass86);
        enhancer71.setSuperclass((java.lang.Class) wildcardClass86);
        enhancer59.setSuperclass((java.lang.Class) wildcardClass86);
        java.lang.Class[] classArray90 = new java.lang.Class[] { wildcardClass86 };
        enhancer49.setInterfaces(classArray90);
        enhancer41.setInterfaces(classArray90);
        enhancer29.setInterfaces(classArray90);
        java.util.List list94 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.getMethods((java.lang.Class) wildcardClass28, classArray90, list94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(classLoader60);
        org.junit.Assert.assertNotNull(classLoader63);
        org.junit.Assert.assertNotNull(callbackArray65);
        org.junit.Assert.assertNotNull(classLoader72);
        org.junit.Assert.assertNotNull(classLoader75);
        org.junit.Assert.assertNotNull(callbackArray77);
        org.junit.Assert.assertNotNull(classLoader80);
        org.junit.Assert.assertNotNull(classLoader83);
        org.junit.Assert.assertNotNull(wildcardClass86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(classArray90);
    }

    @Test
    public void test09576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09576");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader2 = enhancer1.getClassLoader();
        enhancer1.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        enhancer1.setClassLoader(classLoader6);
        enhancer0.setClassLoader(classLoader6);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader13 = enhancer9.getClassLoader();
        enhancer0.setClassLoader(classLoader13);
        boolean boolean15 = enhancer0.getUseCache();
        enhancer0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        enhancer18.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = enhancer18.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer22.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader26 = enhancer22.getClassLoader();
        java.lang.Class class27 = null;
        enhancer22.setSuperclass(class27);
        java.lang.Class<?> wildcardClass29 = enhancer22.getClass();
        enhancer18.setSuperclass((java.lang.Class) wildcardClass29);
        boolean boolean31 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass29);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass29);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Callback callback35 = null;
        enhancer0.setCallback(callback35);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter37 = null;
        enhancer0.setCallbackFilter(callbackFilter37);
        boolean boolean39 = enhancer0.getAttemptLoad();
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test09577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09577");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader11 = enhancer7.getClassLoader();
        java.lang.Class class12 = null;
        enhancer7.setSuperclass(class12);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        enhancer14.setClassLoader(classLoader19);
        enhancer14.setUseCache(false);
        java.lang.ClassLoader classLoader23 = enhancer14.getClassLoader();
        enhancer7.setClassLoader(classLoader23);
        enhancer0.setClassLoader(classLoader23);
        enhancer0.setUseFactory(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer29.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader33 = enhancer29.getClassLoader();
        java.lang.Class class34 = null;
        enhancer29.setSuperclass(class34);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = enhancer29.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        enhancer37.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader41 = enhancer37.getClassLoader();
        org.mockito.cglib.proxy.Callback callback42 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray43 = new org.mockito.cglib.proxy.Callback[] { callback42 };
        enhancer37.setCallbacks(callbackArray43);
        enhancer37.setSerialVersionUID((java.lang.Long) 0L);
        java.lang.ClassLoader classLoader47 = enhancer37.getClassLoader();
        enhancer29.setClassLoader(classLoader47);
        boolean boolean49 = namingPolicy28.equals((java.lang.Object) enhancer29);
        org.mockito.cglib.proxy.Callback callback50 = null;
        enhancer29.setCallback(callback50);
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = enhancer29.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = enhancer29.getStrategy();
        java.lang.Class<?> wildcardClass54 = generatorStrategy53.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        enhancer55.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback58 = null;
        enhancer55.setCallback(callback58);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter60 = null;
        enhancer55.setCallbackFilter(callbackFilter60);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = enhancer55.getStrategy();
        boolean boolean63 = enhancer55.getUseCache();
        org.mockito.cglib.proxy.Callback callback64 = null;
        enhancer55.setCallback(callback64);
        org.mockito.cglib.proxy.Enhancer enhancer66 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader67 = enhancer66.getClassLoader();
        boolean boolean68 = enhancer66.getAttemptLoad();
        java.lang.ClassLoader classLoader69 = enhancer66.getClassLoader();
        enhancer55.setClassLoader(classLoader69);
        org.mockito.cglib.proxy.Enhancer enhancer71 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader72 = enhancer71.getClassLoader();
        enhancer71.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer75 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader76 = enhancer75.getClassLoader();
        enhancer71.setClassLoader(classLoader76);
        org.mockito.cglib.proxy.Enhancer enhancer78 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader79 = enhancer78.getClassLoader();
        enhancer78.setInterceptDuringConstruction(true);
        boolean boolean82 = enhancer78.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = enhancer78.getStrategy();
        java.lang.Class[] classArray84 = new java.lang.Class[] {};
        enhancer78.setInterfaces(classArray84);
        enhancer71.setInterfaces(classArray84);
        org.mockito.cglib.proxy.Enhancer enhancer87 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader88 = enhancer87.getClassLoader();
        enhancer87.setInterceptDuringConstruction(true);
        boolean boolean91 = enhancer87.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy92 = enhancer87.getStrategy();
        java.lang.Class[] classArray93 = new java.lang.Class[] {};
        enhancer87.setInterfaces(classArray93);
        enhancer71.setInterfaces(classArray93);
        enhancer55.setInterfaces(classArray93);
        java.util.List list97 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.getMethods((java.lang.Class) wildcardClass54, classArray93, list97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(callbackArray43);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(classLoader67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(classLoader69);
        org.junit.Assert.assertNotNull(classLoader72);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertNotNull(classLoader79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(generatorStrategy83);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(classLoader88);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(generatorStrategy92);
        org.junit.Assert.assertNotNull(classArray93);
    }

    @Test
    public void test09578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09578");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader9 = enhancer0.getClassLoader();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Callback[] callbackArray12 = null;
        enhancer0.setCallbacks(callbackArray12);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        enhancer16.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer16.setClassLoader(classLoader21);
        enhancer16.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer25.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer25.setClassLoader(classLoader30);
        enhancer25.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = enhancer25.getNamingPolicy();
        enhancer16.setNamingPolicy(namingPolicy34);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        enhancer36.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader40 = enhancer36.getClassLoader();
        java.lang.Class class41 = null;
        enhancer36.setSuperclass(class41);
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader44 = enhancer43.getClassLoader();
        enhancer43.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer47 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader48 = enhancer47.getClassLoader();
        enhancer43.setClassLoader(classLoader48);
        enhancer43.setUseCache(false);
        java.lang.ClassLoader classLoader52 = enhancer43.getClassLoader();
        enhancer36.setClassLoader(classLoader52);
        boolean boolean54 = namingPolicy34.equals((java.lang.Object) enhancer36);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = enhancer36.getStrategy();
        boolean boolean56 = enhancer36.getUseCache();
        java.lang.ClassLoader classLoader57 = enhancer36.getClassLoader();
        enhancer36.setUseFactory(true);
        boolean boolean60 = enhancer36.getAttemptLoad();
        java.lang.Class<?> wildcardClass61 = enhancer36.getClass();
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackType((java.lang.Class) wildcardClass61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Unknown callback type class org.mockito.cglib.proxy.Enhancer");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test09579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09579");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer4.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        enhancer4.setClassLoader(classLoader9);
        enhancer4.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer13.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        enhancer13.setClassLoader(classLoader18);
        enhancer13.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = enhancer13.getNamingPolicy();
        enhancer4.setNamingPolicy(namingPolicy22);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        enhancer24.setUseCache(true);
        boolean boolean28 = enhancer24.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer29.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader33 = enhancer29.getClassLoader();
        java.lang.Class class34 = null;
        enhancer29.setSuperclass(class34);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        enhancer36.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        enhancer36.setClassLoader(classLoader41);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = enhancer36.getStrategy();
        java.lang.Class<?> wildcardClass44 = enhancer36.getClass();
        enhancer29.setSuperclass((java.lang.Class) wildcardClass44);
        enhancer24.setSuperclass((java.lang.Class) wildcardClass44);
        boolean boolean47 = namingPolicy22.equals((java.lang.Object) enhancer24);
        enhancer0.setNamingPolicy(namingPolicy22);
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader50 = enhancer49.getClassLoader();
        enhancer49.setInterceptDuringConstruction(true);
        boolean boolean53 = enhancer49.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = enhancer49.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        enhancer55.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader59 = enhancer55.getClassLoader();
        org.mockito.cglib.proxy.Callback callback60 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray61 = new org.mockito.cglib.proxy.Callback[] { callback60 };
        enhancer55.setCallbacks(callbackArray61);
        enhancer49.setCallbacks(callbackArray61);
        enhancer0.setCallbacks(callbackArray61);
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer66 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader67 = enhancer66.getClassLoader();
        enhancer66.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader70 = enhancer66.getClassLoader();
        java.lang.Class class71 = null;
        enhancer66.setSuperclass(class71);
        org.mockito.cglib.proxy.Enhancer enhancer73 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader74 = enhancer73.getClassLoader();
        enhancer73.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer77 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader78 = enhancer77.getClassLoader();
        enhancer73.setClassLoader(classLoader78);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = enhancer73.getStrategy();
        java.lang.Class<?> wildcardClass81 = enhancer73.getClass();
        enhancer66.setSuperclass((java.lang.Class) wildcardClass81);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = enhancer66.getStrategy();
        boolean boolean84 = namingPolicy65.equals((java.lang.Object) enhancer66);
        enhancer66.setInterceptDuringConstruction(true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class87 = enhancer66.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback types are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(callbackArray61);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertNotNull(classLoader67);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(classLoader78);
        org.junit.Assert.assertNotNull(generatorStrategy80);
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertNotNull(generatorStrategy83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test09580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09580");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Callback callback5 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray6 = new org.mockito.cglib.proxy.Callback[] { callback5 };
        enhancer0.setCallbacks(callbackArray6);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        enhancer8.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader12 = enhancer8.getClassLoader();
        java.lang.Class class13 = null;
        enhancer8.setSuperclass(class13);
        java.lang.Class<?> wildcardClass15 = enhancer8.getClass();
        boolean boolean16 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass15);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass15);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        enhancer18.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader22 = enhancer18.getClassLoader();
        java.lang.Class class23 = null;
        enhancer18.setSuperclass(class23);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer25.setInterceptDuringConstruction(true);
        boolean boolean29 = enhancer25.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = enhancer25.getStrategy();
        enhancer18.setStrategy(generatorStrategy30);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        enhancer32.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader36 = enhancer32.getClassLoader();
        java.lang.Class class37 = null;
        enhancer32.setSuperclass(class37);
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader40 = enhancer39.getClassLoader();
        enhancer39.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader44 = enhancer43.getClassLoader();
        enhancer39.setClassLoader(classLoader44);
        enhancer39.setUseCache(false);
        java.lang.ClassLoader classLoader48 = enhancer39.getClassLoader();
        enhancer32.setClassLoader(classLoader48);
        boolean boolean50 = generatorStrategy30.equals((java.lang.Object) enhancer32);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = enhancer32.getNamingPolicy();
        boolean boolean52 = enhancer32.getAttemptLoad();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter53 = null;
        enhancer32.setCallbackFilter(callbackFilter53);
        org.mockito.cglib.proxy.Callback callback55 = null;
        enhancer32.setCallback(callback55);
        java.lang.Class<?> wildcardClass57 = enhancer32.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass57);
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = enhancer0.getNamingPolicy();
        enhancer0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader62 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer63 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader64 = enhancer63.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter65 = null;
        enhancer63.setCallbackFilter(callbackFilter65);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter67 = null;
        enhancer63.setCallbackFilter(callbackFilter67);
        boolean boolean69 = enhancer63.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = enhancer63.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy70);
        org.mockito.cglib.proxy.Enhancer enhancer74 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader75 = enhancer74.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter76 = null;
        enhancer74.setCallbackFilter(callbackFilter76);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter78 = null;
        enhancer74.setCallbackFilter(callbackFilter78);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = enhancer74.getStrategy();
        enhancer74.setInterceptDuringConstruction(true);
        enhancer74.setUseCache(true);
        enhancer74.setUseCache(true);
        org.mockito.cglib.core.Predicate predicate87 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str88 = namingPolicy70.getClassName("", "hi!", (java.lang.Object) true, predicate87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(callbackArray6);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertNotNull(classLoader75);
        org.junit.Assert.assertNotNull(generatorStrategy80);
    }

    @Test
    public void test09581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09581");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer7.setClassLoader(classLoader12);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = enhancer7.getStrategy();
        java.lang.Class<?> wildcardClass15 = enhancer7.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass15);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = enhancer0.getStrategy();
        enhancer0.setUseCache(true);
        org.mockito.cglib.proxy.Callback callback20 = null;
        enhancer0.setCallback(callback20);
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer22.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        enhancer22.setClassLoader(classLoader27);
        enhancer22.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = enhancer22.getNamingPolicy();
        boolean boolean32 = enhancer22.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader34 = enhancer33.getClassLoader();
        enhancer33.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader37 = enhancer33.getClassLoader();
        java.lang.Class class38 = null;
        enhancer33.setSuperclass(class38);
        java.lang.ClassLoader classLoader40 = enhancer33.getClassLoader();
        enhancer22.setClassLoader(classLoader40);
        enhancer22.setAttemptLoad(false);
        enhancer22.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader46 = enhancer22.getClassLoader();
        enhancer0.setClassLoader(classLoader46);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj48 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(classLoader46);
    }

    @Test
    public void test09582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09582");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer7.setClassLoader(classLoader12);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = enhancer7.getStrategy();
        java.lang.Class<?> wildcardClass15 = enhancer7.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass15);
        enhancer0.setAttemptLoad(false);
        enhancer0.setInterceptDuringConstruction(true);
        enhancer0.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = enhancer0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = enhancer0.getNamingPolicy();
        enhancer0.setAttemptLoad(true);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(namingPolicy24);
    }

    @Test
    public void test09583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09583");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer7.setClassLoader(classLoader12);
        enhancer7.setUseCache(false);
        java.lang.ClassLoader classLoader16 = enhancer7.getClassLoader();
        enhancer0.setClassLoader(classLoader16);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        enhancer18.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader22 = enhancer18.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer18.getStrategy();
        enhancer0.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer25.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer25.setClassLoader(classLoader30);
        enhancer25.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = enhancer25.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy34);
        java.lang.Class[] classArray36 = null;
        enhancer0.setInterfaces(classArray36);
        org.mockito.cglib.proxy.Callback callback38 = null;
        enhancer0.setCallback(callback38);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        enhancer40.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader45 = enhancer44.getClassLoader();
        enhancer40.setClassLoader(classLoader45);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = enhancer40.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        enhancer48.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer52 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader53 = enhancer52.getClassLoader();
        enhancer48.setClassLoader(classLoader53);
        enhancer48.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader58 = enhancer57.getClassLoader();
        enhancer57.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader61 = enhancer57.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer62 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader63 = enhancer62.getClassLoader();
        enhancer62.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader66 = enhancer62.getClassLoader();
        org.mockito.cglib.proxy.Callback callback67 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray68 = new org.mockito.cglib.proxy.Callback[] { callback67 };
        enhancer62.setCallbacks(callbackArray68);
        enhancer57.setCallbacks(callbackArray68);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = enhancer57.getStrategy();
        org.mockito.cglib.proxy.Callback callback72 = null;
        enhancer57.setCallback(callback72);
        org.mockito.cglib.proxy.Enhancer enhancer74 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader75 = enhancer74.getClassLoader();
        enhancer74.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer78 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader79 = enhancer78.getClassLoader();
        enhancer74.setClassLoader(classLoader79);
        org.mockito.cglib.proxy.Enhancer enhancer81 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader82 = enhancer81.getClassLoader();
        enhancer81.setInterceptDuringConstruction(true);
        boolean boolean85 = enhancer81.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy86 = enhancer81.getStrategy();
        java.lang.Class[] classArray87 = new java.lang.Class[] {};
        enhancer81.setInterfaces(classArray87);
        enhancer74.setInterfaces(classArray87);
        enhancer57.setInterfaces(classArray87);
        enhancer48.setInterfaces(classArray87);
        enhancer40.setInterfaces(classArray87);
        enhancer0.setInterfaces(classArray87);
        enhancer0.setAttemptLoad(false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj96 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertNotNull(classLoader63);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertNotNull(callbackArray68);
        org.junit.Assert.assertNotNull(generatorStrategy71);
        org.junit.Assert.assertNotNull(classLoader75);
        org.junit.Assert.assertNotNull(classLoader79);
        org.junit.Assert.assertNotNull(classLoader82);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(generatorStrategy86);
        org.junit.Assert.assertNotNull(classArray87);
    }

    @Test
    public void test09584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09584");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        boolean boolean7 = enhancer0.getAttemptLoad();
        enhancer0.setAttemptLoad(true);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader14 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        enhancer18.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer18.setClassLoader(classLoader23);
        enhancer17.setClassLoader(classLoader23);
        enhancer15.setClassLoader(classLoader23);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = enhancer15.getStrategy();
        java.lang.ClassLoader classLoader28 = enhancer15.getClassLoader();
        enhancer15.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer31.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        enhancer31.setClassLoader(classLoader36);
        boolean boolean38 = enhancer31.getAttemptLoad();
        enhancer31.setUseFactory(false);
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader42 = enhancer41.getClassLoader();
        enhancer41.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader46 = enhancer45.getClassLoader();
        enhancer41.setClassLoader(classLoader46);
        enhancer41.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer50 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader51 = enhancer50.getClassLoader();
        enhancer50.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader54 = enhancer50.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        enhancer55.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader59 = enhancer55.getClassLoader();
        org.mockito.cglib.proxy.Callback callback60 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray61 = new org.mockito.cglib.proxy.Callback[] { callback60 };
        enhancer55.setCallbacks(callbackArray61);
        enhancer50.setCallbacks(callbackArray61);
        enhancer41.setCallbacks(callbackArray61);
        enhancer31.setCallbacks(callbackArray61);
        enhancer15.setCallbacks(callbackArray61);
        java.lang.Class<?> wildcardClass67 = enhancer15.getClass();
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackType((java.lang.Class) wildcardClass67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Unknown callback type class org.mockito.cglib.proxy.Enhancer");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(callbackArray61);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test09585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09585");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        boolean boolean9 = enhancer0.getAttemptLoad();
        java.lang.ClassLoader classLoader10 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = enhancer0.getStrategy();
        boolean boolean12 = enhancer0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = enhancer0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor15 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(generatorStrategy14);
    }

    @Test
    public void test09586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09586");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = enhancer0.getNamingPolicy();
        boolean boolean10 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer11.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader15 = enhancer11.getClassLoader();
        java.lang.Class class16 = null;
        enhancer11.setSuperclass(class16);
        java.lang.ClassLoader classLoader18 = enhancer11.getClassLoader();
        enhancer0.setClassLoader(classLoader18);
        enhancer0.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer22.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader26 = enhancer22.getClassLoader();
        org.mockito.cglib.proxy.Callback callback27 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray28 = new org.mockito.cglib.proxy.Callback[] { callback27 };
        enhancer22.setCallbacks(callbackArray28);
        enhancer22.setSerialVersionUID((java.lang.Long) 0L);
        enhancer22.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        enhancer34.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader38 = enhancer34.getClassLoader();
        org.mockito.cglib.proxy.Callback callback39 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray40 = new org.mockito.cglib.proxy.Callback[] { callback39 };
        enhancer34.setCallbacks(callbackArray40);
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader43 = enhancer42.getClassLoader();
        enhancer42.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader46 = enhancer42.getClassLoader();
        java.lang.Class class47 = null;
        enhancer42.setSuperclass(class47);
        java.lang.Class<?> wildcardClass49 = enhancer42.getClass();
        boolean boolean50 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass49);
        enhancer34.setSuperclass((java.lang.Class) wildcardClass49);
        enhancer22.setSuperclass((java.lang.Class) wildcardClass49);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass49);
        enhancer0.setUseCache(true);
        enhancer0.setUseFactory(true);
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback60 = null;
        enhancer0.setCallback(callback60);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(callbackArray28);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(callbackArray40);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test09587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09587");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer7.setClassLoader(classLoader12);
        enhancer7.setUseCache(false);
        java.lang.ClassLoader classLoader16 = enhancer7.getClassLoader();
        enhancer0.setClassLoader(classLoader16);
        java.lang.ClassLoader classLoader18 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader20 = enhancer19.getClassLoader();
        boolean boolean21 = enhancer19.getAttemptLoad();
        enhancer19.setInterceptDuringConstruction(false);
        enhancer19.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = enhancer19.getStrategy();
        enhancer0.setStrategy(generatorStrategy26);
        enhancer0.setInterceptDuringConstruction(false);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter32 = null;
        enhancer0.setCallbackFilter(callbackFilter32);
        enhancer0.setSerialVersionUID((java.lang.Long) (-1L));
        enhancer0.setUseCache(false);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(generatorStrategy26);
    }

    @Test
    public void test09588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09588");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        boolean boolean4 = enhancer0.getUseCache();
        boolean boolean5 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader7 = enhancer6.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer6.setCallbackFilter(callbackFilter8);
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader11 = enhancer10.getClassLoader();
        enhancer10.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer10.setClassLoader(classLoader15);
        enhancer10.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = enhancer10.getNamingPolicy();
        boolean boolean20 = enhancer10.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer21.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader25 = enhancer21.getClassLoader();
        java.lang.Class class26 = null;
        enhancer21.setSuperclass(class26);
        java.lang.ClassLoader classLoader28 = enhancer21.getClassLoader();
        enhancer10.setClassLoader(classLoader28);
        enhancer6.setClassLoader(classLoader28);
        enhancer0.setClassLoader(classLoader28);
        enhancer0.setUseCache(false);
        boolean boolean34 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        enhancer35.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader39 = enhancer35.getClassLoader();
        java.lang.Class class40 = null;
        enhancer35.setSuperclass(class40);
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader43 = enhancer42.getClassLoader();
        enhancer42.setInterceptDuringConstruction(true);
        boolean boolean46 = enhancer42.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = enhancer42.getStrategy();
        enhancer35.setStrategy(generatorStrategy47);
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader50 = enhancer49.getClassLoader();
        enhancer49.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader53 = enhancer49.getClassLoader();
        java.lang.Class class54 = null;
        enhancer49.setSuperclass(class54);
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader57 = enhancer56.getClassLoader();
        enhancer56.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer60 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader61 = enhancer60.getClassLoader();
        enhancer56.setClassLoader(classLoader61);
        enhancer56.setUseCache(false);
        java.lang.ClassLoader classLoader65 = enhancer56.getClassLoader();
        enhancer49.setClassLoader(classLoader65);
        boolean boolean67 = generatorStrategy47.equals((java.lang.Object) enhancer49);
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = enhancer49.getNamingPolicy();
        boolean boolean69 = enhancer49.getAttemptLoad();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter70 = null;
        enhancer49.setCallbackFilter(callbackFilter70);
        org.mockito.cglib.proxy.Enhancer enhancer72 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader73 = enhancer72.getClassLoader();
        enhancer72.setUseCache(true);
        boolean boolean76 = enhancer72.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer77 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader78 = enhancer77.getClassLoader();
        enhancer77.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader81 = enhancer77.getClassLoader();
        java.lang.Class class82 = null;
        enhancer77.setSuperclass(class82);
        java.lang.Class<?> wildcardClass84 = enhancer77.getClass();
        enhancer72.setSuperclass((java.lang.Class) wildcardClass84);
        enhancer49.setSuperclass((java.lang.Class) wildcardClass84);
        enhancer49.setUseCache(false);
        java.lang.Class<?> wildcardClass89 = enhancer49.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass89);
        boolean boolean91 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass89);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(classLoader73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(classLoader78);
        org.junit.Assert.assertNotNull(classLoader81);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test09589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09589");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        boolean boolean4 = enhancer0.getUseCache();
        boolean boolean5 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader7 = enhancer6.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer6.setCallbackFilter(callbackFilter8);
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader11 = enhancer10.getClassLoader();
        enhancer10.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer10.setClassLoader(classLoader15);
        enhancer10.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = enhancer10.getNamingPolicy();
        boolean boolean20 = enhancer10.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer21.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader25 = enhancer21.getClassLoader();
        java.lang.Class class26 = null;
        enhancer21.setSuperclass(class26);
        java.lang.ClassLoader classLoader28 = enhancer21.getClassLoader();
        enhancer10.setClassLoader(classLoader28);
        enhancer6.setClassLoader(classLoader28);
        enhancer0.setClassLoader(classLoader28);
        enhancer0.setUseCache(false);
        enhancer0.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter38 = null;
        enhancer36.setCallbackFilter(callbackFilter38);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        enhancer40.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader45 = enhancer44.getClassLoader();
        enhancer40.setClassLoader(classLoader45);
        enhancer40.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = enhancer40.getNamingPolicy();
        boolean boolean50 = enhancer40.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer51 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader52 = enhancer51.getClassLoader();
        enhancer51.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader55 = enhancer51.getClassLoader();
        java.lang.Class class56 = null;
        enhancer51.setSuperclass(class56);
        java.lang.ClassLoader classLoader58 = enhancer51.getClassLoader();
        enhancer40.setClassLoader(classLoader58);
        enhancer36.setClassLoader(classLoader58);
        java.lang.ClassLoader classLoader61 = enhancer36.getClassLoader();
        enhancer0.setClassLoader(classLoader61);
        boolean boolean63 = enhancer0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer65 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader66 = enhancer65.getClassLoader();
        enhancer65.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer69 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader70 = enhancer69.getClassLoader();
        enhancer65.setClassLoader(classLoader70);
        enhancer65.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = enhancer65.getNamingPolicy();
        boolean boolean75 = enhancer65.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer76 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader77 = enhancer76.getClassLoader();
        enhancer76.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader80 = enhancer76.getClassLoader();
        java.lang.Class class81 = null;
        enhancer76.setSuperclass(class81);
        java.lang.ClassLoader classLoader83 = enhancer76.getClassLoader();
        enhancer65.setClassLoader(classLoader83);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter85 = null;
        enhancer65.setCallbackFilter(callbackFilter85);
        java.lang.Class class87 = null;
        enhancer65.setSuperclass(class87);
        boolean boolean89 = generatorStrategy64.equals((java.lang.Object) enhancer65);
        java.lang.Class[] classArray90 = null;
        enhancer65.setInterfaces(classArray90);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(classLoader77);
        org.junit.Assert.assertNotNull(classLoader80);
        org.junit.Assert.assertNotNull(classLoader83);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test09590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09590");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter2 = null;
        enhancer0.setCallbackFilter(callbackFilter2);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer4.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        enhancer4.setClassLoader(classLoader9);
        enhancer4.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer4.getNamingPolicy();
        boolean boolean14 = enhancer4.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        enhancer15.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader19 = enhancer15.getClassLoader();
        java.lang.Class class20 = null;
        enhancer15.setSuperclass(class20);
        java.lang.ClassLoader classLoader22 = enhancer15.getClassLoader();
        enhancer4.setClassLoader(classLoader22);
        enhancer0.setClassLoader(classLoader22);
        java.lang.ClassLoader classLoader25 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Callback callback26 = null;
        enhancer0.setCallback(callback26);
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader29 = enhancer28.getClassLoader();
        enhancer28.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader32 = enhancer28.getClassLoader();
        java.lang.Class class33 = null;
        enhancer28.setSuperclass(class33);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        enhancer35.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader40 = enhancer39.getClassLoader();
        enhancer35.setClassLoader(classLoader40);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = enhancer35.getStrategy();
        java.lang.Class<?> wildcardClass43 = enhancer35.getClass();
        enhancer28.setSuperclass((java.lang.Class) wildcardClass43);
        enhancer28.setAttemptLoad(false);
        org.mockito.cglib.proxy.Enhancer enhancer47 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader48 = enhancer47.getClassLoader();
        enhancer28.setClassLoader(classLoader48);
        enhancer28.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer52 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader53 = enhancer52.getClassLoader();
        enhancer52.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader57 = enhancer56.getClassLoader();
        enhancer52.setClassLoader(classLoader57);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = enhancer52.getStrategy();
        enhancer52.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer62 = new org.mockito.cglib.proxy.Enhancer();
        enhancer62.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = enhancer62.getStrategy();
        enhancer52.setStrategy(generatorStrategy65);
        org.mockito.cglib.proxy.Enhancer enhancer67 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader68 = enhancer67.getClassLoader();
        enhancer67.setInterceptDuringConstruction(true);
        boolean boolean71 = enhancer67.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = enhancer67.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer73 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader74 = enhancer73.getClassLoader();
        enhancer73.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader77 = enhancer73.getClassLoader();
        org.mockito.cglib.proxy.Callback callback78 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray79 = new org.mockito.cglib.proxy.Callback[] { callback78 };
        enhancer73.setCallbacks(callbackArray79);
        enhancer67.setCallbacks(callbackArray79);
        enhancer52.setCallbacks(callbackArray79);
        enhancer28.setCallbacks(callbackArray79);
        enhancer0.setCallbacks(callbackArray79);
        org.mockito.asm.ClassVisitor classVisitor85 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertNotNull(classLoader68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(classLoader77);
        org.junit.Assert.assertNotNull(callbackArray79);
    }

    @Test
    public void test09591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09591");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        boolean boolean9 = enhancer0.getAttemptLoad();
        java.lang.ClassLoader classLoader10 = enhancer0.getClassLoader();
        java.lang.ClassLoader classLoader11 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Callback callback12 = null;
        enhancer0.setCallback(callback12);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter16 = null;
        enhancer14.setCallbackFilter(callbackFilter16);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter18 = null;
        enhancer14.setCallbackFilter(callbackFilter18);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = enhancer14.getStrategy();
        enhancer14.setUseFactory(false);
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        enhancer24.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader29 = enhancer28.getClassLoader();
        enhancer24.setClassLoader(classLoader29);
        enhancer23.setClassLoader(classLoader29);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        enhancer32.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader36 = enhancer32.getClassLoader();
        enhancer23.setClassLoader(classLoader36);
        boolean boolean38 = enhancer23.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader40 = enhancer39.getClassLoader();
        enhancer39.setInterceptDuringConstruction(true);
        boolean boolean43 = enhancer39.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = enhancer39.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader46 = enhancer45.getClassLoader();
        enhancer45.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader49 = enhancer45.getClassLoader();
        org.mockito.cglib.proxy.Callback callback50 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray51 = new org.mockito.cglib.proxy.Callback[] { callback50 };
        enhancer45.setCallbacks(callbackArray51);
        enhancer39.setCallbacks(callbackArray51);
        enhancer23.setCallbacks(callbackArray51);
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        enhancer55.setInterceptDuringConstruction(true);
        boolean boolean59 = enhancer55.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = enhancer55.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer61 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader62 = enhancer61.getClassLoader();
        enhancer61.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader65 = enhancer61.getClassLoader();
        org.mockito.cglib.proxy.Callback callback66 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray67 = new org.mockito.cglib.proxy.Callback[] { callback66 };
        enhancer61.setCallbacks(callbackArray67);
        enhancer55.setCallbacks(callbackArray67);
        enhancer23.setCallbacks(callbackArray67);
        enhancer14.setCallbacks(callbackArray67);
        enhancer0.setCallbacks(callbackArray67);
        enhancer0.setInterceptDuringConstruction(true);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(callbackArray51);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(callbackArray67);
    }

    @Test
    public void test09592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09592");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = enhancer0.getNamingPolicy();
        boolean boolean10 = enhancer0.getUseCache();
        boolean boolean11 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        enhancer12.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        enhancer16.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer20.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        enhancer20.setClassLoader(classLoader25);
        enhancer20.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer29.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader34 = enhancer33.getClassLoader();
        enhancer29.setClassLoader(classLoader34);
        enhancer29.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = enhancer29.getNamingPolicy();
        enhancer20.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        enhancer40.setUseCache(true);
        boolean boolean44 = enhancer40.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader46 = enhancer45.getClassLoader();
        enhancer45.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader49 = enhancer45.getClassLoader();
        java.lang.Class class50 = null;
        enhancer45.setSuperclass(class50);
        org.mockito.cglib.proxy.Enhancer enhancer52 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader53 = enhancer52.getClassLoader();
        enhancer52.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader57 = enhancer56.getClassLoader();
        enhancer52.setClassLoader(classLoader57);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = enhancer52.getStrategy();
        java.lang.Class<?> wildcardClass60 = enhancer52.getClass();
        enhancer45.setSuperclass((java.lang.Class) wildcardClass60);
        enhancer40.setSuperclass((java.lang.Class) wildcardClass60);
        boolean boolean63 = namingPolicy38.equals((java.lang.Object) enhancer40);
        enhancer16.setNamingPolicy(namingPolicy38);
        enhancer12.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.proxy.Callback callback66 = null;
        enhancer12.setCallback(callback66);
        org.mockito.cglib.proxy.Enhancer enhancer68 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader69 = enhancer68.getClassLoader();
        enhancer68.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader72 = enhancer68.getClassLoader();
        java.lang.Class class73 = null;
        enhancer68.setSuperclass(class73);
        enhancer68.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer77 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader78 = enhancer77.getClassLoader();
        enhancer77.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer81 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader82 = enhancer81.getClassLoader();
        enhancer77.setClassLoader(classLoader82);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy84 = enhancer77.getStrategy();
        enhancer68.setStrategy(generatorStrategy84);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy86 = enhancer68.getStrategy();
        enhancer12.setStrategy(generatorStrategy86);
        enhancer0.setStrategy(generatorStrategy86);
        org.mockito.cglib.core.NamingPolicy namingPolicy89 = enhancer0.getNamingPolicy();
        boolean boolean90 = enhancer0.getUseCache();
        java.lang.Class<?> wildcardClass91 = enhancer0.getClass();
        org.mockito.cglib.proxy.Callback callback92 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj93 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass91, callback92);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(classLoader69);
        org.junit.Assert.assertNotNull(classLoader72);
        org.junit.Assert.assertNotNull(classLoader78);
        org.junit.Assert.assertNotNull(classLoader82);
        org.junit.Assert.assertNotNull(generatorStrategy84);
        org.junit.Assert.assertNotNull(generatorStrategy86);
        org.junit.Assert.assertNotNull(namingPolicy89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test09593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09593");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback3 = null;
        enhancer0.setCallback(callback3);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Callback callback8 = null;
        enhancer0.setCallback(callback8);
        boolean boolean10 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer0.setClassLoader(classLoader12);
        enhancer0.setUseFactory(true);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(classLoader12);
    }

    @Test
    public void test09594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09594");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer4.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        enhancer4.setClassLoader(classLoader9);
        enhancer4.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer13.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        enhancer13.setClassLoader(classLoader18);
        enhancer13.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = enhancer13.getNamingPolicy();
        enhancer4.setNamingPolicy(namingPolicy22);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        enhancer24.setUseCache(true);
        boolean boolean28 = enhancer24.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer29.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader33 = enhancer29.getClassLoader();
        java.lang.Class class34 = null;
        enhancer29.setSuperclass(class34);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        enhancer36.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        enhancer36.setClassLoader(classLoader41);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = enhancer36.getStrategy();
        java.lang.Class<?> wildcardClass44 = enhancer36.getClass();
        enhancer29.setSuperclass((java.lang.Class) wildcardClass44);
        enhancer24.setSuperclass((java.lang.Class) wildcardClass44);
        boolean boolean47 = namingPolicy22.equals((java.lang.Object) enhancer24);
        enhancer0.setNamingPolicy(namingPolicy22);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter49 = null;
        enhancer0.setCallbackFilter(callbackFilter49);
        enhancer0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = enhancer0.getNamingPolicy();
        java.lang.ClassLoader classLoader54 = enhancer0.getClassLoader();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(classLoader54);
    }

    @Test
    public void test09595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09595");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer9.setClassLoader(classLoader14);
        enhancer9.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer9.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy18);
        enhancer0.setInterceptDuringConstruction(true);
        boolean boolean22 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader24 = enhancer23.getClassLoader();
        enhancer23.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader27 = enhancer23.getClassLoader();
        java.lang.Class class28 = null;
        enhancer23.setSuperclass(class28);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader31 = enhancer30.getClassLoader();
        enhancer30.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        enhancer30.setClassLoader(classLoader35);
        enhancer30.setUseCache(false);
        java.lang.ClassLoader classLoader39 = enhancer30.getClassLoader();
        enhancer23.setClassLoader(classLoader39);
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader42 = enhancer41.getClassLoader();
        enhancer41.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader45 = enhancer41.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = enhancer41.getStrategy();
        enhancer23.setStrategy(generatorStrategy46);
        boolean boolean48 = enhancer23.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader50 = enhancer49.getClassLoader();
        enhancer49.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer53 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader54 = enhancer53.getClassLoader();
        enhancer49.setClassLoader(classLoader54);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = enhancer49.getStrategy();
        java.lang.Class<?> wildcardClass57 = enhancer49.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer58 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader59 = enhancer58.getClassLoader();
        enhancer58.setUseCache(true);
        boolean boolean62 = enhancer58.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer63 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader64 = enhancer63.getClassLoader();
        enhancer63.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader67 = enhancer63.getClassLoader();
        java.lang.Class class68 = null;
        enhancer63.setSuperclass(class68);
        org.mockito.cglib.proxy.Enhancer enhancer70 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader71 = enhancer70.getClassLoader();
        enhancer70.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer74 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader75 = enhancer74.getClassLoader();
        enhancer70.setClassLoader(classLoader75);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = enhancer70.getStrategy();
        java.lang.Class<?> wildcardClass78 = enhancer70.getClass();
        enhancer63.setSuperclass((java.lang.Class) wildcardClass78);
        enhancer58.setSuperclass((java.lang.Class) wildcardClass78);
        java.lang.Class[] classArray81 = new java.lang.Class[] { wildcardClass57, wildcardClass78 };
        enhancer23.setInterfaces(classArray81);
        enhancer0.setInterfaces(classArray81);
        enhancer0.setInterceptDuringConstruction(true);
        enhancer0.setAttemptLoad(false);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter88 = null;
        enhancer0.setCallbackFilter(callbackFilter88);
        org.mockito.cglib.proxy.Callback callback90 = null;
        enhancer0.setCallback(callback90);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy92 = enhancer0.getStrategy();
        java.lang.Class[] classArray93 = null;
        enhancer0.setInterfaces(classArray93);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertNotNull(classLoader67);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertNotNull(classLoader75);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(generatorStrategy92);
    }

    @Test
    public void test09596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09596");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseCache(true);
        boolean boolean4 = enhancer0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        enhancer0.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Callback callback8 = null;
        enhancer0.setCallback(callback8);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(classLoader7);
    }

    @Test
    public void test09597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09597");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseCache(true);
        boolean boolean4 = enhancer0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        enhancer0.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        enhancer8.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        enhancer8.setClassLoader(classLoader13);
        enhancer8.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        enhancer17.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader21 = enhancer17.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer22.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader26 = enhancer22.getClassLoader();
        org.mockito.cglib.proxy.Callback callback27 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray28 = new org.mockito.cglib.proxy.Callback[] { callback27 };
        enhancer22.setCallbacks(callbackArray28);
        enhancer17.setCallbacks(callbackArray28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = enhancer17.getStrategy();
        org.mockito.cglib.proxy.Callback callback32 = null;
        enhancer17.setCallback(callback32);
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        enhancer34.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader39 = enhancer38.getClassLoader();
        enhancer34.setClassLoader(classLoader39);
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader42 = enhancer41.getClassLoader();
        enhancer41.setInterceptDuringConstruction(true);
        boolean boolean45 = enhancer41.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = enhancer41.getStrategy();
        java.lang.Class[] classArray47 = new java.lang.Class[] {};
        enhancer41.setInterfaces(classArray47);
        enhancer34.setInterfaces(classArray47);
        enhancer17.setInterfaces(classArray47);
        enhancer8.setInterfaces(classArray47);
        enhancer0.setInterfaces(classArray47);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = enhancer0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        enhancer55.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader59 = enhancer55.getClassLoader();
        java.lang.Class class60 = null;
        enhancer55.setSuperclass(class60);
        enhancer55.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer64 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader65 = enhancer64.getClassLoader();
        enhancer64.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer68 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader69 = enhancer68.getClassLoader();
        enhancer64.setClassLoader(classLoader69);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = enhancer64.getStrategy();
        enhancer55.setStrategy(generatorStrategy71);
        boolean boolean73 = enhancer55.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer74 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer75 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader76 = enhancer75.getClassLoader();
        enhancer75.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer79 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader80 = enhancer79.getClassLoader();
        enhancer75.setClassLoader(classLoader80);
        enhancer74.setClassLoader(classLoader80);
        org.mockito.cglib.proxy.Enhancer enhancer83 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader84 = enhancer83.getClassLoader();
        enhancer83.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader87 = enhancer83.getClassLoader();
        enhancer74.setClassLoader(classLoader87);
        org.mockito.cglib.proxy.Callback callback89 = null;
        enhancer74.setCallback(callback89);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy91 = enhancer74.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer92 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader93 = enhancer92.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy94 = enhancer92.getStrategy();
        boolean boolean95 = generatorStrategy91.equals((java.lang.Object) enhancer92);
        enhancer55.setStrategy(generatorStrategy91);
        enhancer55.setUseCache(true);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray99 = generatorStrategy54.generate((org.mockito.cglib.core.ClassGenerator) enhancer55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(callbackArray28);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(classLoader69);
        org.junit.Assert.assertNotNull(generatorStrategy71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertNotNull(classLoader80);
        org.junit.Assert.assertNotNull(classLoader84);
        org.junit.Assert.assertNotNull(classLoader87);
        org.junit.Assert.assertNotNull(generatorStrategy91);
        org.junit.Assert.assertNotNull(classLoader93);
        org.junit.Assert.assertNotNull(generatorStrategy94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test09598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09598");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        boolean boolean2 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        enhancer5.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader9 = enhancer5.getClassLoader();
        java.lang.Class class10 = null;
        enhancer5.setSuperclass(class10);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        enhancer12.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        enhancer12.setClassLoader(classLoader17);
        enhancer12.setUseCache(false);
        java.lang.ClassLoader classLoader21 = enhancer12.getClassLoader();
        enhancer5.setClassLoader(classLoader21);
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader24 = enhancer23.getClassLoader();
        enhancer23.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader27 = enhancer23.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = enhancer23.getStrategy();
        enhancer5.setStrategy(generatorStrategy28);
        boolean boolean30 = enhancer5.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = enhancer31.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        enhancer34.setUseCache(true);
        boolean boolean38 = enhancer34.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader40 = enhancer39.getClassLoader();
        enhancer39.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader43 = enhancer39.getClassLoader();
        java.lang.Class class44 = null;
        enhancer39.setSuperclass(class44);
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader47 = enhancer46.getClassLoader();
        enhancer46.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer50 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader51 = enhancer50.getClassLoader();
        enhancer46.setClassLoader(classLoader51);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = enhancer46.getStrategy();
        java.lang.Class<?> wildcardClass54 = enhancer46.getClass();
        enhancer39.setSuperclass((java.lang.Class) wildcardClass54);
        enhancer34.setSuperclass((java.lang.Class) wildcardClass54);
        enhancer31.setSuperclass((java.lang.Class) wildcardClass54);
        enhancer5.setSuperclass((java.lang.Class) wildcardClass54);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass54);
        boolean boolean60 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter61 = null;
        enhancer0.setCallbackFilter(callbackFilter61);
        java.lang.Class<?> wildcardClass63 = enhancer0.getClass();
        boolean boolean64 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass63);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test09599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09599");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Callback callback5 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray6 = new org.mockito.cglib.proxy.Callback[] { callback5 };
        enhancer0.setCallbacks(callbackArray6);
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        java.lang.ClassLoader classLoader10 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter11 = null;
        enhancer0.setCallbackFilter(callbackFilter11);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(callbackArray6);
        org.junit.Assert.assertNotNull(classLoader10);
    }

    @Test
    public void test09600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09600");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = enhancer0.getNamingPolicy();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = enhancer0.getNamingPolicy();
        boolean boolean13 = enhancer0.getUseCache();
        enhancer0.setInterceptDuringConstruction(true);
        enhancer0.setSerialVersionUID((java.lang.Long) 100L);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test09601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09601");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer9.setClassLoader(classLoader14);
        enhancer9.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer9.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy18);
        enhancer0.setInterceptDuringConstruction(true);
        boolean boolean22 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader24 = enhancer23.getClassLoader();
        enhancer23.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader27 = enhancer23.getClassLoader();
        java.lang.Class class28 = null;
        enhancer23.setSuperclass(class28);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader31 = enhancer30.getClassLoader();
        enhancer30.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        enhancer30.setClassLoader(classLoader35);
        enhancer30.setUseCache(false);
        java.lang.ClassLoader classLoader39 = enhancer30.getClassLoader();
        enhancer23.setClassLoader(classLoader39);
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader42 = enhancer41.getClassLoader();
        enhancer41.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader45 = enhancer41.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = enhancer41.getStrategy();
        enhancer23.setStrategy(generatorStrategy46);
        boolean boolean48 = enhancer23.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader50 = enhancer49.getClassLoader();
        enhancer49.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer53 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader54 = enhancer53.getClassLoader();
        enhancer49.setClassLoader(classLoader54);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = enhancer49.getStrategy();
        java.lang.Class<?> wildcardClass57 = enhancer49.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer58 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader59 = enhancer58.getClassLoader();
        enhancer58.setUseCache(true);
        boolean boolean62 = enhancer58.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer63 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader64 = enhancer63.getClassLoader();
        enhancer63.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader67 = enhancer63.getClassLoader();
        java.lang.Class class68 = null;
        enhancer63.setSuperclass(class68);
        org.mockito.cglib.proxy.Enhancer enhancer70 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader71 = enhancer70.getClassLoader();
        enhancer70.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer74 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader75 = enhancer74.getClassLoader();
        enhancer70.setClassLoader(classLoader75);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = enhancer70.getStrategy();
        java.lang.Class<?> wildcardClass78 = enhancer70.getClass();
        enhancer63.setSuperclass((java.lang.Class) wildcardClass78);
        enhancer58.setSuperclass((java.lang.Class) wildcardClass78);
        java.lang.Class[] classArray81 = new java.lang.Class[] { wildcardClass57, wildcardClass78 };
        enhancer23.setInterfaces(classArray81);
        enhancer0.setInterfaces(classArray81);
        enhancer0.setUseFactory(true);
        boolean boolean86 = enhancer0.getUseCache();
        java.lang.ClassLoader classLoader87 = enhancer0.getClassLoader();
        enhancer0.setUseFactory(true);
        enhancer0.setUseFactory(true);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertNotNull(classLoader67);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertNotNull(classLoader75);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(classLoader87);
    }

    @Test
    public void test09602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09602");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer7.setClassLoader(classLoader12);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = enhancer7.getStrategy();
        java.lang.Class<?> wildcardClass15 = enhancer7.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass15);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        enhancer17.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer17.setClassLoader(classLoader22);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = enhancer17.getStrategy();
        enhancer0.setStrategy(generatorStrategy24);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        enhancer26.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback29 = null;
        enhancer26.setCallback(callback29);
        enhancer26.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = enhancer26.getNamingPolicy();
        org.mockito.cglib.proxy.Callback callback34 = null;
        enhancer26.setCallback(callback34);
        boolean boolean36 = enhancer26.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        enhancer26.setClassLoader(classLoader38);
        enhancer0.setClassLoader(classLoader38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter42 = null;
        enhancer0.setCallbackFilter(callbackFilter42);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(generatorStrategy41);
    }

    @Test
    public void test09603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09603");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer9.setClassLoader(classLoader14);
        enhancer9.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer9.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer20.setUseCache(true);
        boolean boolean24 = enhancer20.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer25.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader29 = enhancer25.getClassLoader();
        java.lang.Class class30 = null;
        enhancer25.setSuperclass(class30);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        enhancer32.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        enhancer32.setClassLoader(classLoader37);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = enhancer32.getStrategy();
        java.lang.Class<?> wildcardClass40 = enhancer32.getClass();
        enhancer25.setSuperclass((java.lang.Class) wildcardClass40);
        enhancer20.setSuperclass((java.lang.Class) wildcardClass40);
        boolean boolean43 = namingPolicy18.equals((java.lang.Object) enhancer20);
        enhancer20.setUseFactory(false);
        enhancer20.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter48 = null;
        enhancer20.setCallbackFilter(callbackFilter48);
        java.lang.ClassLoader classLoader50 = enhancer20.getClassLoader();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(classLoader50);
    }

    @Test
    public void test09604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09604");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer7.setClassLoader(classLoader12);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = enhancer7.getStrategy();
        java.lang.Class<?> wildcardClass15 = enhancer7.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass15);
        enhancer0.setAttemptLoad(false);
        enhancer0.setInterceptDuringConstruction(true);
        enhancer0.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = enhancer0.getNamingPolicy();
        java.lang.Class<?> wildcardClass24 = enhancer0.getClass();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test09605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09605");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Callback callback5 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray6 = new org.mockito.cglib.proxy.Callback[] { callback5 };
        enhancer0.setCallbacks(callbackArray6);
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        boolean boolean10 = enhancer0.getUseCache();
        enhancer0.setSerialVersionUID((java.lang.Long) (-1L));
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter15 = null;
        enhancer0.setCallbackFilter(callbackFilter15);
        java.lang.ClassLoader classLoader17 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        enhancer18.setUseCache(true);
        boolean boolean22 = enhancer18.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader24 = enhancer23.getClassLoader();
        enhancer23.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader27 = enhancer23.getClassLoader();
        java.lang.Class class28 = null;
        enhancer23.setSuperclass(class28);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader31 = enhancer30.getClassLoader();
        enhancer30.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        enhancer30.setClassLoader(classLoader35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = enhancer30.getStrategy();
        java.lang.Class<?> wildcardClass38 = enhancer30.getClass();
        enhancer23.setSuperclass((java.lang.Class) wildcardClass38);
        enhancer18.setSuperclass((java.lang.Class) wildcardClass38);
        enhancer18.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader44 = enhancer43.getClassLoader();
        enhancer43.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer47 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader48 = enhancer47.getClassLoader();
        enhancer43.setClassLoader(classLoader48);
        enhancer43.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = enhancer43.getNamingPolicy();
        boolean boolean53 = enhancer43.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer54 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader55 = enhancer54.getClassLoader();
        enhancer54.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader58 = enhancer54.getClassLoader();
        java.lang.Class class59 = null;
        enhancer54.setSuperclass(class59);
        java.lang.ClassLoader classLoader61 = enhancer54.getClassLoader();
        enhancer43.setClassLoader(classLoader61);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = enhancer43.getStrategy();
        enhancer18.setStrategy(generatorStrategy63);
        org.mockito.cglib.proxy.Enhancer enhancer65 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader66 = enhancer65.getClassLoader();
        enhancer65.setInterceptDuringConstruction(true);
        boolean boolean69 = enhancer65.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = enhancer65.getStrategy();
        java.lang.Class[] classArray71 = new java.lang.Class[] {};
        enhancer65.setInterfaces(classArray71);
        enhancer18.setInterfaces(classArray71);
        enhancer0.setInterfaces(classArray71);
        boolean boolean75 = enhancer0.getAttemptLoad();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(callbackArray6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
    }

    @Test
    public void test09606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09606");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer9.setClassLoader(classLoader14);
        enhancer9.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer9.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy18);
        enhancer0.setInterceptDuringConstruction(true);
        enhancer0.setSerialVersionUID((java.lang.Long) 100L);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        enhancer24.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader29 = enhancer28.getClassLoader();
        enhancer24.setClassLoader(classLoader29);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = enhancer24.getStrategy();
        enhancer24.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        enhancer34.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = enhancer34.getStrategy();
        enhancer24.setStrategy(generatorStrategy37);
        enhancer0.setStrategy(generatorStrategy37);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        enhancer40.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = enhancer40.getStrategy();
        enhancer0.setStrategy(generatorStrategy43);
        enhancer0.setUseCache(false);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(generatorStrategy43);
    }

    @Test
    public void test09607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09607");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter2 = null;
        enhancer0.setCallbackFilter(callbackFilter2);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter4 = null;
        enhancer0.setCallbackFilter(callbackFilter4);
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader7 = enhancer6.getClassLoader();
        enhancer6.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader11 = enhancer10.getClassLoader();
        enhancer6.setClassLoader(classLoader11);
        enhancer6.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        enhancer15.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader20 = enhancer19.getClassLoader();
        enhancer15.setClassLoader(classLoader20);
        enhancer15.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = enhancer15.getNamingPolicy();
        enhancer6.setNamingPolicy(namingPolicy24);
        enhancer6.setInterceptDuringConstruction(true);
        enhancer6.setUseCache(false);
        enhancer6.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        enhancer32.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader36 = enhancer32.getClassLoader();
        enhancer6.setClassLoader(classLoader36);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader39 = enhancer38.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = enhancer38.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader42 = enhancer41.getClassLoader();
        enhancer41.setUseCache(true);
        boolean boolean45 = enhancer41.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader47 = enhancer46.getClassLoader();
        enhancer46.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader50 = enhancer46.getClassLoader();
        java.lang.Class class51 = null;
        enhancer46.setSuperclass(class51);
        org.mockito.cglib.proxy.Enhancer enhancer53 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader54 = enhancer53.getClassLoader();
        enhancer53.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader58 = enhancer57.getClassLoader();
        enhancer53.setClassLoader(classLoader58);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = enhancer53.getStrategy();
        java.lang.Class<?> wildcardClass61 = enhancer53.getClass();
        enhancer46.setSuperclass((java.lang.Class) wildcardClass61);
        enhancer41.setSuperclass((java.lang.Class) wildcardClass61);
        enhancer38.setSuperclass((java.lang.Class) wildcardClass61);
        org.mockito.cglib.proxy.Callback callback65 = null;
        enhancer38.setCallback(callback65);
        org.mockito.cglib.proxy.Enhancer enhancer67 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader68 = enhancer67.getClassLoader();
        enhancer67.setInterceptDuringConstruction(true);
        boolean boolean71 = enhancer67.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = enhancer67.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer73 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader74 = enhancer73.getClassLoader();
        enhancer73.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader77 = enhancer73.getClassLoader();
        org.mockito.cglib.proxy.Callback callback78 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray79 = new org.mockito.cglib.proxy.Callback[] { callback78 };
        enhancer73.setCallbacks(callbackArray79);
        enhancer67.setCallbacks(callbackArray79);
        enhancer38.setCallbacks(callbackArray79);
        enhancer6.setCallbacks(callbackArray79);
        enhancer0.setCallbacks(callbackArray79);
        java.lang.ClassLoader classLoader85 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(classLoader68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(classLoader77);
        org.junit.Assert.assertNotNull(callbackArray79);
        org.junit.Assert.assertNotNull(classLoader85);
    }

    @Test
    public void test09608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09608");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader2 = enhancer1.getClassLoader();
        enhancer1.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        enhancer1.setClassLoader(classLoader6);
        enhancer0.setClassLoader(classLoader6);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader13 = enhancer9.getClassLoader();
        enhancer0.setClassLoader(classLoader13);
        org.mockito.cglib.proxy.Callback callback15 = null;
        enhancer0.setCallback(callback15);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter17 = null;
        enhancer0.setCallbackFilter(callbackFilter17);
        enhancer0.setUseFactory(false);
        enhancer0.setInterceptDuringConstruction(false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class23 = enhancer0.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: createClass does not accept callbacks");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader13);
    }

    @Test
    public void test09609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09609");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter7 = null;
        enhancer0.setCallbackFilter(callbackFilter7);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer11.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        enhancer11.setClassLoader(classLoader16);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter18 = null;
        enhancer11.setCallbackFilter(callbackFilter18);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer20.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        enhancer20.setClassLoader(classLoader25);
        enhancer20.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer29.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader34 = enhancer33.getClassLoader();
        enhancer29.setClassLoader(classLoader34);
        enhancer29.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = enhancer29.getNamingPolicy();
        enhancer20.setNamingPolicy(namingPolicy38);
        enhancer11.setNamingPolicy(namingPolicy38);
        enhancer0.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = enhancer0.getNamingPolicy();
        enhancer0.setUseCache(true);
        java.lang.Class class45 = null;
        enhancer0.setSuperclass(class45);
        enhancer0.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader50 = enhancer49.getClassLoader();
        enhancer49.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader53 = enhancer49.getClassLoader();
        java.lang.Class class54 = null;
        enhancer49.setSuperclass(class54);
        enhancer49.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer58 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer59 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader60 = enhancer59.getClassLoader();
        enhancer59.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer63 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader64 = enhancer63.getClassLoader();
        enhancer59.setClassLoader(classLoader64);
        enhancer58.setClassLoader(classLoader64);
        enhancer49.setClassLoader(classLoader64);
        boolean boolean68 = enhancer49.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer69 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader70 = enhancer69.getClassLoader();
        enhancer69.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer73 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader74 = enhancer73.getClassLoader();
        enhancer69.setClassLoader(classLoader74);
        org.mockito.cglib.proxy.Enhancer enhancer76 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader77 = enhancer76.getClassLoader();
        enhancer76.setInterceptDuringConstruction(true);
        boolean boolean80 = enhancer76.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = enhancer76.getStrategy();
        java.lang.Class[] classArray82 = new java.lang.Class[] {};
        enhancer76.setInterfaces(classArray82);
        enhancer69.setInterfaces(classArray82);
        org.mockito.cglib.proxy.Enhancer enhancer85 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader86 = enhancer85.getClassLoader();
        enhancer85.setInterceptDuringConstruction(true);
        boolean boolean89 = enhancer85.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy90 = enhancer85.getStrategy();
        java.lang.Class[] classArray91 = new java.lang.Class[] {};
        enhancer85.setInterfaces(classArray91);
        enhancer69.setInterfaces(classArray91);
        enhancer49.setInterfaces(classArray91);
        enhancer0.setInterfaces(classArray91);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertNotNull(classLoader60);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(classLoader77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(classLoader86);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(generatorStrategy90);
        org.junit.Assert.assertNotNull(classArray91);
    }

    @Test
    public void test09610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09610");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        enhancer0.setStrategy(generatorStrategy9);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer11.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        enhancer11.setClassLoader(classLoader16);
        enhancer11.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer20.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        enhancer20.setClassLoader(classLoader25);
        enhancer20.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = enhancer20.getNamingPolicy();
        enhancer11.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer31.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader35 = enhancer31.getClassLoader();
        java.lang.Class class36 = null;
        enhancer31.setSuperclass(class36);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader39 = enhancer38.getClassLoader();
        enhancer38.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader43 = enhancer42.getClassLoader();
        enhancer38.setClassLoader(classLoader43);
        enhancer38.setUseCache(false);
        java.lang.ClassLoader classLoader47 = enhancer38.getClassLoader();
        enhancer31.setClassLoader(classLoader47);
        boolean boolean49 = namingPolicy29.equals((java.lang.Object) enhancer31);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = enhancer31.getStrategy();
        enhancer0.setStrategy(generatorStrategy50);
        org.mockito.cglib.proxy.Enhancer enhancer52 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader53 = enhancer52.getClassLoader();
        enhancer52.setInterceptDuringConstruction(true);
        boolean boolean56 = enhancer52.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = enhancer52.getStrategy();
        java.lang.Class[] classArray58 = new java.lang.Class[] {};
        enhancer52.setInterfaces(classArray58);
        enhancer0.setInterfaces(classArray58);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter63 = null;
        enhancer0.setCallbackFilter(callbackFilter63);
        boolean boolean65 = enhancer0.getUseCache();
        boolean boolean66 = enhancer0.getUseCache();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test09611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09611");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader11 = enhancer10.getClassLoader();
        enhancer10.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer10.setClassLoader(classLoader15);
        enhancer9.setClassLoader(classLoader15);
        enhancer0.setClassLoader(classLoader15);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter19 = null;
        enhancer0.setCallbackFilter(callbackFilter19);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer21.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer21.setClassLoader(classLoader26);
        enhancer21.setUseCache(false);
        java.lang.ClassLoader classLoader30 = enhancer21.getClassLoader();
        enhancer21.setAttemptLoad(true);
        org.mockito.cglib.proxy.Callback[] callbackArray33 = null;
        enhancer21.setCallbacks(callbackArray33);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        enhancer35.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader39 = enhancer35.getClassLoader();
        java.lang.Class class40 = null;
        enhancer35.setSuperclass(class40);
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader43 = enhancer42.getClassLoader();
        enhancer42.setInterceptDuringConstruction(true);
        boolean boolean46 = enhancer42.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = enhancer42.getStrategy();
        enhancer35.setStrategy(generatorStrategy47);
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader50 = enhancer49.getClassLoader();
        enhancer49.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader53 = enhancer49.getClassLoader();
        java.lang.Class class54 = null;
        enhancer49.setSuperclass(class54);
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader57 = enhancer56.getClassLoader();
        enhancer56.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer60 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader61 = enhancer60.getClassLoader();
        enhancer56.setClassLoader(classLoader61);
        enhancer56.setUseCache(false);
        java.lang.ClassLoader classLoader65 = enhancer56.getClassLoader();
        enhancer49.setClassLoader(classLoader65);
        boolean boolean67 = generatorStrategy47.equals((java.lang.Object) enhancer49);
        org.mockito.cglib.proxy.Enhancer enhancer68 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader69 = enhancer68.getClassLoader();
        enhancer68.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader72 = enhancer68.getClassLoader();
        java.lang.Class<?> wildcardClass73 = classLoader72.getClass();
        enhancer49.setSuperclass((java.lang.Class) wildcardClass73);
        enhancer21.setSuperclass((java.lang.Class) wildcardClass73);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass73);
        java.lang.Class<?> wildcardClass77 = enhancer0.getClass();
        boolean boolean78 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass77);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(classLoader69);
        org.junit.Assert.assertNotNull(classLoader72);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test09612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09612");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        enhancer0.setInterceptDuringConstruction(true);
        boolean boolean9 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader11 = enhancer10.getClassLoader();
        enhancer10.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer10.setClassLoader(classLoader15);
        enhancer10.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader20 = enhancer19.getClassLoader();
        enhancer19.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader24 = enhancer23.getClassLoader();
        enhancer19.setClassLoader(classLoader24);
        enhancer19.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = enhancer19.getNamingPolicy();
        enhancer10.setNamingPolicy(namingPolicy28);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader31 = enhancer30.getClassLoader();
        enhancer30.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader34 = enhancer30.getClassLoader();
        java.lang.Class class35 = null;
        enhancer30.setSuperclass(class35);
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        enhancer37.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader42 = enhancer41.getClassLoader();
        enhancer37.setClassLoader(classLoader42);
        enhancer37.setUseCache(false);
        java.lang.ClassLoader classLoader46 = enhancer37.getClassLoader();
        enhancer30.setClassLoader(classLoader46);
        boolean boolean48 = namingPolicy28.equals((java.lang.Object) enhancer30);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = enhancer30.getStrategy();
        boolean boolean50 = enhancer30.getUseCache();
        java.lang.ClassLoader classLoader51 = enhancer30.getClassLoader();
        enhancer0.setClassLoader(classLoader51);
        enhancer0.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        enhancer55.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer59 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader60 = enhancer59.getClassLoader();
        enhancer55.setClassLoader(classLoader60);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = enhancer55.getStrategy();
        enhancer55.setInterceptDuringConstruction(true);
        enhancer55.setAttemptLoad(false);
        enhancer55.setSerialVersionUID((java.lang.Long) 1L);
        java.lang.ClassLoader classLoader69 = enhancer55.getClassLoader();
        boolean boolean70 = enhancer55.getUseCache();
        java.lang.ClassLoader classLoader71 = enhancer55.getClassLoader();
        enhancer0.setClassLoader(classLoader71);
        enhancer0.setAttemptLoad(true);
        enhancer0.setSerialVersionUID((java.lang.Long) (-1L));
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.asm.ClassVisitor classVisitor79 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(classLoader60);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertNotNull(classLoader69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(classLoader71);
    }

    @Test
    public void test09613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09613");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer9.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer9.getStrategy();
        enhancer0.setStrategy(generatorStrategy16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = enhancer0.getStrategy();
        enhancer0.setAttemptLoad(false);
        enhancer0.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader23 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Callback callback24 = null;
        enhancer0.setCallback(callback24);
        enhancer0.setUseFactory(false);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter28 = null;
        enhancer0.setCallbackFilter(callbackFilter28);
        enhancer0.setInterceptDuringConstruction(true);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(classLoader23);
    }

    @Test
    public void test09614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09614");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer9.setClassLoader(classLoader14);
        enhancer9.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer9.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy18);
        enhancer0.setInterceptDuringConstruction(true);
        enhancer0.setUseCache(false);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        enhancer26.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader30 = enhancer26.getClassLoader();
        enhancer0.setClassLoader(classLoader30);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = enhancer32.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        enhancer35.setUseCache(true);
        boolean boolean39 = enhancer35.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        enhancer40.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader44 = enhancer40.getClassLoader();
        java.lang.Class class45 = null;
        enhancer40.setSuperclass(class45);
        org.mockito.cglib.proxy.Enhancer enhancer47 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader48 = enhancer47.getClassLoader();
        enhancer47.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer51 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader52 = enhancer51.getClassLoader();
        enhancer47.setClassLoader(classLoader52);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = enhancer47.getStrategy();
        java.lang.Class<?> wildcardClass55 = enhancer47.getClass();
        enhancer40.setSuperclass((java.lang.Class) wildcardClass55);
        enhancer35.setSuperclass((java.lang.Class) wildcardClass55);
        enhancer32.setSuperclass((java.lang.Class) wildcardClass55);
        org.mockito.cglib.proxy.Callback callback59 = null;
        enhancer32.setCallback(callback59);
        org.mockito.cglib.proxy.Enhancer enhancer61 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader62 = enhancer61.getClassLoader();
        enhancer61.setInterceptDuringConstruction(true);
        boolean boolean65 = enhancer61.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = enhancer61.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer67 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader68 = enhancer67.getClassLoader();
        enhancer67.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader71 = enhancer67.getClassLoader();
        org.mockito.cglib.proxy.Callback callback72 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray73 = new org.mockito.cglib.proxy.Callback[] { callback72 };
        enhancer67.setCallbacks(callbackArray73);
        enhancer61.setCallbacks(callbackArray73);
        enhancer32.setCallbacks(callbackArray73);
        enhancer0.setCallbacks(callbackArray73);
        enhancer0.setUseFactory(false);
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        boolean boolean82 = enhancer0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj83 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertNotNull(classLoader68);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertNotNull(callbackArray73);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test09615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09615");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        boolean boolean9 = enhancer0.getAttemptLoad();
        java.lang.ClassLoader classLoader10 = enhancer0.getClassLoader();
        enhancer0.setUseCache(true);
        boolean boolean13 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Callback callback14 = null;
        enhancer0.setCallback(callback14);
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.Class<?> wildcardClass18 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer20.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        enhancer20.setClassLoader(classLoader25);
        enhancer19.setClassLoader(classLoader25);
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader29 = enhancer28.getClassLoader();
        enhancer28.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader32 = enhancer28.getClassLoader();
        enhancer19.setClassLoader(classLoader32);
        boolean boolean34 = enhancer19.getUseCache();
        enhancer19.setSerialVersionUID((java.lang.Long) 100L);
        enhancer19.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader40 = enhancer39.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader42 = enhancer41.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = enhancer41.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader45 = enhancer44.getClassLoader();
        enhancer44.setUseCache(true);
        boolean boolean48 = enhancer44.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader50 = enhancer49.getClassLoader();
        enhancer49.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader53 = enhancer49.getClassLoader();
        java.lang.Class class54 = null;
        enhancer49.setSuperclass(class54);
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader57 = enhancer56.getClassLoader();
        enhancer56.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer60 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader61 = enhancer60.getClassLoader();
        enhancer56.setClassLoader(classLoader61);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = enhancer56.getStrategy();
        java.lang.Class<?> wildcardClass64 = enhancer56.getClass();
        enhancer49.setSuperclass((java.lang.Class) wildcardClass64);
        enhancer44.setSuperclass((java.lang.Class) wildcardClass64);
        enhancer41.setSuperclass((java.lang.Class) wildcardClass64);
        org.mockito.cglib.proxy.Callback callback68 = null;
        enhancer41.setCallback(callback68);
        org.mockito.cglib.proxy.Enhancer enhancer70 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader71 = enhancer70.getClassLoader();
        enhancer70.setInterceptDuringConstruction(true);
        boolean boolean74 = enhancer70.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = enhancer70.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer76 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader77 = enhancer76.getClassLoader();
        enhancer76.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader80 = enhancer76.getClassLoader();
        org.mockito.cglib.proxy.Callback callback81 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray82 = new org.mockito.cglib.proxy.Callback[] { callback81 };
        enhancer76.setCallbacks(callbackArray82);
        enhancer70.setCallbacks(callbackArray82);
        enhancer41.setCallbacks(callbackArray82);
        enhancer39.setCallbacks(callbackArray82);
        enhancer19.setCallbacks(callbackArray82);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerCallbacks((java.lang.Class) wildcardClass18, callbackArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.proxy.Enhancer is not an enhanced class");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(generatorStrategy75);
        org.junit.Assert.assertNotNull(classLoader77);
        org.junit.Assert.assertNotNull(classLoader80);
        org.junit.Assert.assertNotNull(callbackArray82);
    }

    @Test
    public void test09616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09616");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader3 = enhancer2.getClassLoader();
        enhancer2.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader7 = enhancer6.getClassLoader();
        enhancer2.setClassLoader(classLoader7);
        enhancer2.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer11.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        enhancer11.setClassLoader(classLoader16);
        enhancer11.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = enhancer11.getNamingPolicy();
        enhancer2.setNamingPolicy(namingPolicy20);
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer22.setInterceptDuringConstruction(true);
        boolean boolean26 = namingPolicy20.equals((java.lang.Object) enhancer22);
        enhancer0.setNamingPolicy(namingPolicy20);
        enhancer0.setUseCache(false);
        enhancer0.setInterceptDuringConstruction(false);
        boolean boolean32 = enhancer0.getUseCache();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = enhancer0.getNamingPolicy();
        enhancer0.setUseCache(false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj38 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(namingPolicy35);
    }

    @Test
    public void test09617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09617");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        boolean boolean2 = enhancer0.getAttemptLoad();
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.proxy.Callback callback5 = null;
        enhancer0.setCallback(callback5);
        boolean boolean7 = enhancer0.getUseCache();
        boolean boolean8 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter9 = null;
        enhancer0.setCallbackFilter(callbackFilter9);
        enhancer0.setUseCache(true);
        enhancer0.setAttemptLoad(true);
        boolean boolean15 = enhancer0.getUseCache();
        boolean boolean16 = enhancer0.getAttemptLoad();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test09618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09618");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseCache(true);
        boolean boolean4 = enhancer0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        enhancer0.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer9.setClassLoader(classLoader14);
        enhancer8.setClassLoader(classLoader14);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        enhancer17.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader21 = enhancer17.getClassLoader();
        enhancer8.setClassLoader(classLoader21);
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader24 = enhancer23.getClassLoader();
        enhancer23.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader28 = enhancer27.getClassLoader();
        enhancer23.setClassLoader(classLoader28);
        enhancer23.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = enhancer23.getNamingPolicy();
        enhancer23.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        enhancer35.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader39 = enhancer35.getClassLoader();
        java.lang.Class class40 = null;
        enhancer35.setSuperclass(class40);
        enhancer35.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader45 = enhancer44.getClassLoader();
        enhancer44.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        enhancer44.setClassLoader(classLoader49);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = enhancer44.getStrategy();
        enhancer35.setStrategy(generatorStrategy51);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = enhancer35.getStrategy();
        enhancer23.setStrategy(generatorStrategy53);
        enhancer8.setStrategy(generatorStrategy53);
        enhancer0.setStrategy(generatorStrategy53);
        java.lang.ClassLoader classLoader57 = enhancer0.getClassLoader();
        boolean boolean58 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter59 = null;
        enhancer0.setCallbackFilter(callbackFilter59);
        org.mockito.asm.ClassVisitor classVisitor61 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test09619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09619");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        boolean boolean11 = enhancer7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer7.getStrategy();
        enhancer0.setStrategy(generatorStrategy12);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader18 = enhancer14.getClassLoader();
        java.lang.Class class19 = null;
        enhancer14.setSuperclass(class19);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer21.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer21.setClassLoader(classLoader26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = enhancer21.getStrategy();
        java.lang.Class<?> wildcardClass29 = enhancer21.getClass();
        enhancer14.setSuperclass((java.lang.Class) wildcardClass29);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass29);
        boolean boolean32 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        enhancer34.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader39 = enhancer38.getClassLoader();
        enhancer34.setClassLoader(classLoader39);
        enhancer33.setClassLoader(classLoader39);
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader43 = enhancer42.getClassLoader();
        enhancer42.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader46 = enhancer42.getClassLoader();
        enhancer33.setClassLoader(classLoader46);
        boolean boolean48 = enhancer33.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader50 = enhancer49.getClassLoader();
        enhancer49.setInterceptDuringConstruction(true);
        boolean boolean53 = enhancer49.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = enhancer49.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        enhancer55.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader59 = enhancer55.getClassLoader();
        org.mockito.cglib.proxy.Callback callback60 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray61 = new org.mockito.cglib.proxy.Callback[] { callback60 };
        enhancer55.setCallbacks(callbackArray61);
        enhancer49.setCallbacks(callbackArray61);
        enhancer33.setCallbacks(callbackArray61);
        enhancer0.setCallbacks(callbackArray61);
        java.lang.ClassLoader classLoader66 = enhancer0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer68 = new org.mockito.cglib.proxy.Enhancer();
        enhancer68.setSerialVersionUID((java.lang.Long) (-1L));
        enhancer68.setAttemptLoad(false);
        enhancer68.setInterceptDuringConstruction(true);
        boolean boolean75 = namingPolicy67.equals((java.lang.Object) enhancer68);
        org.mockito.cglib.proxy.Enhancer enhancer76 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader77 = enhancer76.getClassLoader();
        enhancer76.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer80 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader81 = enhancer80.getClassLoader();
        enhancer76.setClassLoader(classLoader81);
        enhancer76.setUseCache(false);
        enhancer76.setUseFactory(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = enhancer76.getStrategy();
        enhancer68.setStrategy(generatorStrategy87);
        enhancer68.setUseFactory(false);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(callbackArray61);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertNotNull(namingPolicy67);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(classLoader77);
        org.junit.Assert.assertNotNull(classLoader81);
        org.junit.Assert.assertNotNull(generatorStrategy87);
    }

    @Test
    public void test09620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09620");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter2 = null;
        enhancer0.setCallbackFilter(callbackFilter2);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter4 = null;
        enhancer0.setCallbackFilter(callbackFilter4);
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader7 = enhancer6.getClassLoader();
        enhancer6.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader11 = enhancer10.getClassLoader();
        enhancer6.setClassLoader(classLoader11);
        enhancer6.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        enhancer15.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader20 = enhancer19.getClassLoader();
        enhancer15.setClassLoader(classLoader20);
        enhancer15.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = enhancer15.getNamingPolicy();
        enhancer6.setNamingPolicy(namingPolicy24);
        enhancer6.setInterceptDuringConstruction(true);
        enhancer6.setUseCache(false);
        enhancer6.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        enhancer32.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader36 = enhancer32.getClassLoader();
        enhancer6.setClassLoader(classLoader36);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader39 = enhancer38.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = enhancer38.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader42 = enhancer41.getClassLoader();
        enhancer41.setUseCache(true);
        boolean boolean45 = enhancer41.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader47 = enhancer46.getClassLoader();
        enhancer46.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader50 = enhancer46.getClassLoader();
        java.lang.Class class51 = null;
        enhancer46.setSuperclass(class51);
        org.mockito.cglib.proxy.Enhancer enhancer53 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader54 = enhancer53.getClassLoader();
        enhancer53.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader58 = enhancer57.getClassLoader();
        enhancer53.setClassLoader(classLoader58);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = enhancer53.getStrategy();
        java.lang.Class<?> wildcardClass61 = enhancer53.getClass();
        enhancer46.setSuperclass((java.lang.Class) wildcardClass61);
        enhancer41.setSuperclass((java.lang.Class) wildcardClass61);
        enhancer38.setSuperclass((java.lang.Class) wildcardClass61);
        org.mockito.cglib.proxy.Callback callback65 = null;
        enhancer38.setCallback(callback65);
        org.mockito.cglib.proxy.Enhancer enhancer67 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader68 = enhancer67.getClassLoader();
        enhancer67.setInterceptDuringConstruction(true);
        boolean boolean71 = enhancer67.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = enhancer67.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer73 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader74 = enhancer73.getClassLoader();
        enhancer73.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader77 = enhancer73.getClassLoader();
        org.mockito.cglib.proxy.Callback callback78 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray79 = new org.mockito.cglib.proxy.Callback[] { callback78 };
        enhancer73.setCallbacks(callbackArray79);
        enhancer67.setCallbacks(callbackArray79);
        enhancer38.setCallbacks(callbackArray79);
        enhancer6.setCallbacks(callbackArray79);
        enhancer0.setCallbacks(callbackArray79);
        java.lang.ClassLoader classLoader85 = enhancer0.getClassLoader();
        boolean boolean86 = enhancer0.getAttemptLoad();
        enhancer0.setUseFactory(false);
        java.lang.ClassLoader classLoader89 = enhancer0.getClassLoader();
        enhancer0.setAttemptLoad(false);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(classLoader68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(classLoader77);
        org.junit.Assert.assertNotNull(callbackArray79);
        org.junit.Assert.assertNotNull(classLoader85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(classLoader89);
    }

    @Test
    public void test09621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09621");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer7.setClassLoader(classLoader12);
        enhancer7.setUseCache(false);
        java.lang.ClassLoader classLoader16 = enhancer7.getClassLoader();
        enhancer0.setClassLoader(classLoader16);
        java.lang.ClassLoader classLoader18 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader20 = enhancer19.getClassLoader();
        boolean boolean21 = enhancer19.getAttemptLoad();
        enhancer19.setInterceptDuringConstruction(false);
        enhancer19.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = enhancer19.getStrategy();
        enhancer0.setStrategy(generatorStrategy26);
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = enhancer0.getNamingPolicy();
        enhancer0.setSerialVersionUID((java.lang.Long) (-1L));
        enhancer0.setAttemptLoad(false);
        org.mockito.asm.ClassVisitor classVisitor35 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(namingPolicy30);
    }

    @Test
    public void test09622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09622");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback3 = null;
        enhancer0.setCallback(callback3);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = enhancer0.getNamingPolicy();
        boolean boolean8 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter11 = null;
        enhancer0.setCallbackFilter(callbackFilter11);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer13.setUseCache(true);
        boolean boolean17 = enhancer13.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer13.setNamingPolicy(namingPolicy18);
        java.lang.ClassLoader classLoader20 = enhancer13.getClassLoader();
        boolean boolean21 = enhancer13.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer22.setInterceptDuringConstruction(true);
        boolean boolean26 = enhancer22.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = enhancer22.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader29 = enhancer28.getClassLoader();
        enhancer28.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader32 = enhancer28.getClassLoader();
        org.mockito.cglib.proxy.Callback callback33 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray34 = new org.mockito.cglib.proxy.Callback[] { callback33 };
        enhancer28.setCallbacks(callbackArray34);
        enhancer22.setCallbacks(callbackArray34);
        org.mockito.cglib.proxy.Callback callback37 = null;
        enhancer22.setCallback(callback37);
        java.lang.Class<?> wildcardClass39 = enhancer22.getClass();
        enhancer13.setSuperclass((java.lang.Class) wildcardClass39);
        boolean boolean41 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass39);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass39);
        enhancer0.setAttemptLoad(false);
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(callbackArray34);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test09623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09623");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader11 = enhancer10.getClassLoader();
        enhancer10.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer10.setClassLoader(classLoader15);
        enhancer9.setClassLoader(classLoader15);
        enhancer0.setClassLoader(classLoader15);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter21 = null;
        enhancer0.setCallbackFilter(callbackFilter21);
        java.lang.Class<?> wildcardClass23 = enhancer0.getClass();
        org.mockito.cglib.proxy.Callback[] callbackArray24 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerCallbacks((java.lang.Class) wildcardClass23, callbackArray24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.proxy.Enhancer is not an enhanced class");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test09624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09624");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer9.setClassLoader(classLoader14);
        enhancer9.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer9.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy18);
        enhancer0.setInterceptDuringConstruction(true);
        enhancer0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = enhancer0.getStrategy();
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        enhancer27.setSerialVersionUID((java.lang.Long) (-1L));
        enhancer27.setAttemptLoad(false);
        enhancer27.setUseCache(false);
        enhancer27.setInterceptDuringConstruction(false);
        enhancer27.setInterceptDuringConstruction(true);
        enhancer27.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = enhancer27.getStrategy();
        enhancer0.setStrategy(generatorStrategy40);
        enhancer0.setUseCache(false);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(generatorStrategy40);
    }

    @Test
    public void test09625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09625");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback3 = null;
        enhancer0.setCallback(callback3);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter5 = null;
        enhancer0.setCallbackFilter(callbackFilter5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = enhancer0.getStrategy();
        boolean boolean8 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Callback callback9 = null;
        enhancer0.setCallback(callback9);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer11.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        enhancer11.setClassLoader(classLoader16);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter18 = null;
        enhancer11.setCallbackFilter(callbackFilter18);
        enhancer11.setUseCache(false);
        boolean boolean22 = enhancer11.getUseCache();
        enhancer11.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer25.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader29 = enhancer25.getClassLoader();
        java.lang.Class class30 = null;
        enhancer25.setSuperclass(class30);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = enhancer32.getStrategy();
        enhancer25.setStrategy(generatorStrategy34);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = enhancer36.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader40 = enhancer39.getClassLoader();
        enhancer39.setUseCache(true);
        boolean boolean43 = enhancer39.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader45 = enhancer44.getClassLoader();
        enhancer44.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader48 = enhancer44.getClassLoader();
        java.lang.Class class49 = null;
        enhancer44.setSuperclass(class49);
        org.mockito.cglib.proxy.Enhancer enhancer51 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader52 = enhancer51.getClassLoader();
        enhancer51.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        enhancer51.setClassLoader(classLoader56);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = enhancer51.getStrategy();
        java.lang.Class<?> wildcardClass59 = enhancer51.getClass();
        enhancer44.setSuperclass((java.lang.Class) wildcardClass59);
        enhancer39.setSuperclass((java.lang.Class) wildcardClass59);
        enhancer36.setSuperclass((java.lang.Class) wildcardClass59);
        org.mockito.cglib.proxy.Callback callback63 = null;
        enhancer36.setCallback(callback63);
        org.mockito.cglib.proxy.Enhancer enhancer65 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader66 = enhancer65.getClassLoader();
        enhancer65.setInterceptDuringConstruction(true);
        boolean boolean69 = enhancer65.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = enhancer65.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer71 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader72 = enhancer71.getClassLoader();
        enhancer71.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader75 = enhancer71.getClassLoader();
        org.mockito.cglib.proxy.Callback callback76 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray77 = new org.mockito.cglib.proxy.Callback[] { callback76 };
        enhancer71.setCallbacks(callbackArray77);
        enhancer65.setCallbacks(callbackArray77);
        enhancer36.setCallbacks(callbackArray77);
        enhancer25.setCallbacks(callbackArray77);
        enhancer11.setCallbacks(callbackArray77);
        enhancer0.setCallbacks(callbackArray77);
        boolean boolean84 = enhancer0.getAttemptLoad();
        enhancer0.setUseFactory(false);
        org.mockito.cglib.proxy.Callback callback87 = null;
        enhancer0.setCallback(callback87);
        boolean boolean89 = enhancer0.getUseCache();
        enhancer0.setSerialVersionUID((java.lang.Long) 1L);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertNotNull(classLoader72);
        org.junit.Assert.assertNotNull(classLoader75);
        org.junit.Assert.assertNotNull(callbackArray77);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test09626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09626");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer3 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader4 = enhancer3.getClassLoader();
        enhancer3.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer3.setClassLoader(classLoader8);
        enhancer2.setClassLoader(classLoader8);
        enhancer0.setClassLoader(classLoader8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer0.getStrategy();
        java.lang.ClassLoader classLoader13 = enhancer0.getClassLoader();
        enhancer0.setAttemptLoad(true);
        boolean boolean16 = enhancer0.getAttemptLoad();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test09627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09627");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Callback callback5 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray6 = new org.mockito.cglib.proxy.Callback[] { callback5 };
        enhancer0.setCallbacks(callbackArray6);
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        enhancer12.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader16 = enhancer12.getClassLoader();
        org.mockito.cglib.proxy.Callback callback17 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray18 = new org.mockito.cglib.proxy.Callback[] { callback17 };
        enhancer12.setCallbacks(callbackArray18);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer20.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader24 = enhancer20.getClassLoader();
        java.lang.Class class25 = null;
        enhancer20.setSuperclass(class25);
        java.lang.Class<?> wildcardClass27 = enhancer20.getClass();
        boolean boolean28 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass27);
        enhancer12.setSuperclass((java.lang.Class) wildcardClass27);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass27);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer31.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        enhancer31.setClassLoader(classLoader36);
        enhancer31.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        enhancer40.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader45 = enhancer44.getClassLoader();
        enhancer40.setClassLoader(classLoader45);
        enhancer40.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = enhancer40.getNamingPolicy();
        enhancer31.setNamingPolicy(namingPolicy49);
        enhancer31.setInterceptDuringConstruction(true);
        enhancer31.setSerialVersionUID((java.lang.Long) 100L);
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        enhancer55.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer59 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader60 = enhancer59.getClassLoader();
        enhancer55.setClassLoader(classLoader60);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = enhancer55.getStrategy();
        enhancer55.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer65 = new org.mockito.cglib.proxy.Enhancer();
        enhancer65.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = enhancer65.getStrategy();
        enhancer55.setStrategy(generatorStrategy68);
        enhancer31.setStrategy(generatorStrategy68);
        enhancer0.setStrategy(generatorStrategy68);
        org.mockito.cglib.proxy.Enhancer enhancer72 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader73 = enhancer72.getClassLoader();
        enhancer72.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader76 = enhancer72.getClassLoader();
        java.lang.Class class77 = null;
        enhancer72.setSuperclass(class77);
        org.mockito.cglib.proxy.Enhancer enhancer79 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader80 = enhancer79.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = enhancer79.getStrategy();
        enhancer72.setStrategy(generatorStrategy81);
        enhancer0.setStrategy(generatorStrategy81);
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter86 = null;
        enhancer0.setCallbackFilter(callbackFilter86);
        org.mockito.cglib.proxy.Callback callback88 = null;
        enhancer0.setCallback(callback88);
        enhancer0.setUseCache(false);
        enhancer0.setSerialVersionUID((java.lang.Long) 100L);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(callbackArray6);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(callbackArray18);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(classLoader60);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertNotNull(classLoader73);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertNotNull(classLoader80);
        org.junit.Assert.assertNotNull(generatorStrategy81);
    }

    @Test
    public void test09628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09628");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Callback callback5 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray6 = new org.mockito.cglib.proxy.Callback[] { callback5 };
        enhancer0.setCallbacks(callbackArray6);
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        enhancer12.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        enhancer12.setClassLoader(classLoader17);
        enhancer12.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer21.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer21.setClassLoader(classLoader26);
        enhancer21.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = enhancer21.getNamingPolicy();
        enhancer12.setNamingPolicy(namingPolicy30);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        enhancer32.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader36 = enhancer32.getClassLoader();
        java.lang.Class class37 = null;
        enhancer32.setSuperclass(class37);
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader40 = enhancer39.getClassLoader();
        enhancer39.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader44 = enhancer43.getClassLoader();
        enhancer39.setClassLoader(classLoader44);
        enhancer39.setUseCache(false);
        java.lang.ClassLoader classLoader48 = enhancer39.getClassLoader();
        enhancer32.setClassLoader(classLoader48);
        boolean boolean50 = namingPolicy30.equals((java.lang.Object) enhancer32);
        org.mockito.cglib.proxy.Enhancer enhancer51 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader52 = enhancer51.getClassLoader();
        enhancer51.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        enhancer51.setClassLoader(classLoader56);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = enhancer51.getStrategy();
        enhancer51.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer61 = new org.mockito.cglib.proxy.Enhancer();
        enhancer61.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = enhancer61.getStrategy();
        enhancer51.setStrategy(generatorStrategy64);
        enhancer32.setStrategy(generatorStrategy64);
        java.lang.ClassLoader classLoader67 = enhancer32.getClassLoader();
        enhancer0.setClassLoader(classLoader67);
        java.lang.Class<?> wildcardClass69 = classLoader67.getClass();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(callbackArray6);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertNotNull(classLoader67);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test09629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09629");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        boolean boolean11 = enhancer7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer7.getStrategy();
        enhancer0.setStrategy(generatorStrategy12);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader18 = enhancer14.getClassLoader();
        java.lang.Class class19 = null;
        enhancer14.setSuperclass(class19);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer21.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer21.setClassLoader(classLoader26);
        enhancer21.setUseCache(false);
        java.lang.ClassLoader classLoader30 = enhancer21.getClassLoader();
        enhancer14.setClassLoader(classLoader30);
        boolean boolean32 = generatorStrategy12.equals((java.lang.Object) enhancer14);
        org.mockito.cglib.proxy.Callback callback33 = null;
        enhancer14.setCallback(callback33);
        java.lang.ClassLoader classLoader35 = enhancer14.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = enhancer14.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        enhancer37.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader41 = enhancer37.getClassLoader();
        java.lang.Class class42 = null;
        enhancer37.setSuperclass(class42);
        enhancer37.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader47 = enhancer46.getClassLoader();
        enhancer46.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer50 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader51 = enhancer50.getClassLoader();
        enhancer46.setClassLoader(classLoader51);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = enhancer46.getStrategy();
        enhancer37.setStrategy(generatorStrategy53);
        boolean boolean55 = enhancer37.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader57 = enhancer56.getClassLoader();
        enhancer56.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader60 = enhancer56.getClassLoader();
        java.lang.Class class61 = null;
        enhancer56.setSuperclass(class61);
        enhancer56.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer65 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader66 = enhancer65.getClassLoader();
        enhancer65.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer69 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader70 = enhancer69.getClassLoader();
        enhancer65.setClassLoader(classLoader70);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = enhancer65.getStrategy();
        enhancer56.setStrategy(generatorStrategy72);
        org.mockito.cglib.proxy.Enhancer enhancer74 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader75 = enhancer74.getClassLoader();
        enhancer74.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer78 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader79 = enhancer78.getClassLoader();
        enhancer74.setClassLoader(classLoader79);
        org.mockito.cglib.proxy.Enhancer enhancer81 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader82 = enhancer81.getClassLoader();
        enhancer81.setInterceptDuringConstruction(true);
        boolean boolean85 = enhancer81.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy86 = enhancer81.getStrategy();
        java.lang.Class[] classArray87 = new java.lang.Class[] {};
        enhancer81.setInterfaces(classArray87);
        enhancer74.setInterfaces(classArray87);
        enhancer56.setInterfaces(classArray87);
        enhancer37.setInterfaces(classArray87);
        enhancer14.setInterfaces(classArray87);
        org.mockito.cglib.core.NamingPolicy namingPolicy93 = enhancer14.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy94 = enhancer14.getNamingPolicy();
        enhancer14.setSerialVersionUID((java.lang.Long) 10L);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertNotNull(classLoader60);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertNotNull(classLoader75);
        org.junit.Assert.assertNotNull(classLoader79);
        org.junit.Assert.assertNotNull(classLoader82);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(generatorStrategy86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(namingPolicy93);
        org.junit.Assert.assertNotNull(namingPolicy94);
    }

    @Test
    public void test09630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09630");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader2 = enhancer1.getClassLoader();
        enhancer1.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        enhancer1.setClassLoader(classLoader6);
        enhancer0.setClassLoader(classLoader6);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader13 = enhancer9.getClassLoader();
        enhancer0.setClassLoader(classLoader13);
        boolean boolean15 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        enhancer16.setInterceptDuringConstruction(true);
        boolean boolean20 = enhancer16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = enhancer16.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer22.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader26 = enhancer22.getClassLoader();
        org.mockito.cglib.proxy.Callback callback27 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray28 = new org.mockito.cglib.proxy.Callback[] { callback27 };
        enhancer22.setCallbacks(callbackArray28);
        enhancer16.setCallbacks(callbackArray28);
        enhancer0.setCallbacks(callbackArray28);
        enhancer0.setUseFactory(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = enhancer0.getStrategy();
        java.lang.ClassLoader classLoader35 = enhancer0.getClassLoader();
        java.lang.Class<?> wildcardClass36 = classLoader35.getClass();
        org.mockito.cglib.proxy.Callback callback37 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj38 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass36, callback37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(callbackArray28);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test09631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09631");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = enhancer0.getNamingPolicy();
        boolean boolean10 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer11.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader15 = enhancer11.getClassLoader();
        java.lang.Class class16 = null;
        enhancer11.setSuperclass(class16);
        java.lang.ClassLoader classLoader18 = enhancer11.getClassLoader();
        enhancer0.setClassLoader(classLoader18);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = enhancer0.getStrategy();
        boolean boolean21 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer22.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader26 = enhancer22.getClassLoader();
        java.lang.Class class27 = null;
        enhancer22.setSuperclass(class27);
        enhancer22.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer31.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        enhancer31.setClassLoader(classLoader36);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = enhancer31.getStrategy();
        enhancer22.setStrategy(generatorStrategy38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = enhancer22.getStrategy();
        enhancer0.setStrategy(generatorStrategy40);
        org.mockito.cglib.proxy.Callback callback42 = null;
        enhancer0.setCallback(callback42);
        enhancer0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader46 = enhancer0.getClassLoader();
        enhancer0.setUseFactory(false);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter49 = null;
        enhancer0.setCallbackFilter(callbackFilter49);
        boolean boolean51 = enhancer0.getUseCache();
        boolean boolean52 = enhancer0.getUseCache();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test09632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09632");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader3 = enhancer2.getClassLoader();
        enhancer2.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader7 = enhancer6.getClassLoader();
        enhancer2.setClassLoader(classLoader7);
        enhancer2.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer11.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        enhancer11.setClassLoader(classLoader16);
        enhancer11.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = enhancer11.getNamingPolicy();
        enhancer2.setNamingPolicy(namingPolicy20);
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer22.setInterceptDuringConstruction(true);
        boolean boolean26 = namingPolicy20.equals((java.lang.Object) enhancer22);
        enhancer0.setNamingPolicy(namingPolicy20);
        enhancer0.setUseCache(false);
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Callback callback33 = null;
        enhancer0.setCallback(callback33);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        enhancer35.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader40 = enhancer39.getClassLoader();
        enhancer35.setClassLoader(classLoader40);
        enhancer35.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader45 = enhancer44.getClassLoader();
        enhancer44.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        enhancer44.setClassLoader(classLoader49);
        enhancer44.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = enhancer44.getNamingPolicy();
        enhancer35.setNamingPolicy(namingPolicy53);
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        enhancer55.setInterceptDuringConstruction(true);
        boolean boolean59 = namingPolicy53.equals((java.lang.Object) enhancer55);
        java.lang.ClassLoader classLoader60 = enhancer55.getClassLoader();
        enhancer0.setClassLoader(classLoader60);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter62 = null;
        enhancer0.setCallbackFilter(callbackFilter62);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(classLoader60);
    }

    @Test
    public void test09633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09633");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Callback callback5 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray6 = new org.mockito.cglib.proxy.Callback[] { callback5 };
        enhancer0.setCallbacks(callbackArray6);
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        boolean boolean10 = enhancer0.getUseCache();
        enhancer0.setSerialVersionUID((java.lang.Long) (-1L));
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        enhancer15.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader19 = enhancer15.getClassLoader();
        java.lang.Class class20 = null;
        enhancer15.setSuperclass(class20);
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer22.setInterceptDuringConstruction(true);
        boolean boolean26 = enhancer22.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = enhancer22.getStrategy();
        enhancer15.setStrategy(generatorStrategy27);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = enhancer15.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        enhancer30.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback33 = null;
        enhancer30.setCallback(callback33);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter35 = null;
        enhancer30.setCallbackFilter(callbackFilter35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = enhancer30.getStrategy();
        java.lang.Class class38 = null;
        enhancer30.setSuperclass(class38);
        java.lang.ClassLoader classLoader40 = enhancer30.getClassLoader();
        boolean boolean41 = generatorStrategy29.equals((java.lang.Object) classLoader40);
        enhancer0.setStrategy(generatorStrategy29);
        java.lang.Class<?> wildcardClass43 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader46 = enhancer45.getClassLoader();
        enhancer45.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader50 = enhancer49.getClassLoader();
        enhancer45.setClassLoader(classLoader50);
        enhancer44.setClassLoader(classLoader50);
        org.mockito.cglib.proxy.Enhancer enhancer53 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader54 = enhancer53.getClassLoader();
        enhancer53.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader57 = enhancer53.getClassLoader();
        enhancer44.setClassLoader(classLoader57);
        boolean boolean59 = enhancer44.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer60 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader61 = enhancer60.getClassLoader();
        enhancer60.setInterceptDuringConstruction(true);
        boolean boolean64 = enhancer60.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = enhancer60.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer66 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader67 = enhancer66.getClassLoader();
        enhancer66.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader70 = enhancer66.getClassLoader();
        org.mockito.cglib.proxy.Callback callback71 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray72 = new org.mockito.cglib.proxy.Callback[] { callback71 };
        enhancer66.setCallbacks(callbackArray72);
        enhancer60.setCallbacks(callbackArray72);
        enhancer44.setCallbacks(callbackArray72);
        org.mockito.cglib.proxy.Enhancer enhancer76 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader77 = enhancer76.getClassLoader();
        enhancer76.setInterceptDuringConstruction(true);
        boolean boolean80 = enhancer76.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = enhancer76.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer82 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader83 = enhancer82.getClassLoader();
        enhancer82.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader86 = enhancer82.getClassLoader();
        org.mockito.cglib.proxy.Callback callback87 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray88 = new org.mockito.cglib.proxy.Callback[] { callback87 };
        enhancer82.setCallbacks(callbackArray88);
        enhancer76.setCallbacks(callbackArray88);
        enhancer44.setCallbacks(callbackArray88);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerStaticCallbacks((java.lang.Class) wildcardClass43, callbackArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.proxy.Enhancer is not an enhanced class");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(callbackArray6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertNotNull(classLoader67);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(callbackArray72);
        org.junit.Assert.assertNotNull(classLoader77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertNotNull(classLoader83);
        org.junit.Assert.assertNotNull(classLoader86);
        org.junit.Assert.assertNotNull(callbackArray88);
    }

    @Test
    public void test09634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09634");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Callback callback5 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray6 = new org.mockito.cglib.proxy.Callback[] { callback5 };
        enhancer0.setCallbacks(callbackArray6);
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer11.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader15 = enhancer11.getClassLoader();
        java.lang.Class class16 = null;
        enhancer11.setSuperclass(class16);
        java.lang.Class<?> wildcardClass18 = enhancer11.getClass();
        boolean boolean19 = generatorStrategy10.equals((java.lang.Object) wildcardClass18);
        boolean boolean21 = generatorStrategy10.equals((java.lang.Object) '4');
        boolean boolean23 = generatorStrategy10.equals((java.lang.Object) "");
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        enhancer24.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader28 = enhancer24.getClassLoader();
        java.lang.Class class29 = null;
        enhancer24.setSuperclass(class29);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer31.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        enhancer31.setClassLoader(classLoader36);
        enhancer31.setUseCache(false);
        java.lang.ClassLoader classLoader40 = enhancer31.getClassLoader();
        enhancer24.setClassLoader(classLoader40);
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader43 = enhancer42.getClassLoader();
        enhancer42.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader46 = enhancer42.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = enhancer42.getStrategy();
        enhancer24.setStrategy(generatorStrategy47);
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader50 = enhancer49.getClassLoader();
        enhancer49.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer53 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader54 = enhancer53.getClassLoader();
        enhancer49.setClassLoader(classLoader54);
        enhancer49.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = enhancer49.getNamingPolicy();
        enhancer24.setNamingPolicy(namingPolicy58);
        org.mockito.cglib.proxy.Enhancer enhancer60 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader61 = enhancer60.getClassLoader();
        enhancer60.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader64 = enhancer60.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer65 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader66 = enhancer65.getClassLoader();
        enhancer65.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader69 = enhancer65.getClassLoader();
        org.mockito.cglib.proxy.Callback callback70 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray71 = new org.mockito.cglib.proxy.Callback[] { callback70 };
        enhancer65.setCallbacks(callbackArray71);
        enhancer60.setCallbacks(callbackArray71);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = enhancer60.getStrategy();
        enhancer24.setStrategy(generatorStrategy74);
        boolean boolean76 = generatorStrategy10.equals((java.lang.Object) enhancer24);
        org.mockito.cglib.proxy.Enhancer enhancer77 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader78 = enhancer77.getClassLoader();
        enhancer77.setInterceptDuringConstruction(true);
        boolean boolean81 = enhancer77.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = enhancer77.getStrategy();
        java.lang.Class[] classArray83 = new java.lang.Class[] {};
        enhancer77.setInterfaces(classArray83);
        enhancer24.setInterfaces(classArray83);
        boolean boolean86 = enhancer24.getUseCache();
        org.mockito.cglib.proxy.Callback callback87 = null;
        enhancer24.setCallback(callback87);
        enhancer24.setAttemptLoad(false);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(callbackArray6);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertNotNull(classLoader69);
        org.junit.Assert.assertNotNull(callbackArray71);
        org.junit.Assert.assertNotNull(generatorStrategy74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(classLoader78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(generatorStrategy82);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test09635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09635");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader9 = enhancer0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = enhancer0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer13.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        enhancer13.setClassLoader(classLoader18);
        enhancer13.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = enhancer13.getNamingPolicy();
        boolean boolean23 = enhancer13.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        enhancer24.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader28 = enhancer24.getClassLoader();
        java.lang.Class class29 = null;
        enhancer24.setSuperclass(class29);
        java.lang.ClassLoader classLoader31 = enhancer24.getClassLoader();
        enhancer13.setClassLoader(classLoader31);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = enhancer13.getStrategy();
        enhancer0.setStrategy(generatorStrategy33);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        enhancer35.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader39 = enhancer35.getClassLoader();
        java.lang.Class class40 = null;
        enhancer35.setSuperclass(class40);
        enhancer35.setInterceptDuringConstruction(true);
        enhancer35.setSerialVersionUID((java.lang.Long) 10L);
        boolean boolean46 = generatorStrategy33.equals((java.lang.Object) enhancer35);
        enhancer35.setSerialVersionUID((java.lang.Long) 100L);
        java.lang.ClassLoader classLoader49 = enhancer35.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer50 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer51 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader52 = enhancer51.getClassLoader();
        enhancer51.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        enhancer51.setClassLoader(classLoader56);
        enhancer50.setClassLoader(classLoader56);
        java.lang.ClassLoader classLoader59 = enhancer50.getClassLoader();
        enhancer50.setUseFactory(true);
        enhancer50.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.proxy.Enhancer enhancer64 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader65 = enhancer64.getClassLoader();
        enhancer64.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer68 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader69 = enhancer68.getClassLoader();
        enhancer64.setClassLoader(classLoader69);
        enhancer64.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer73 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader74 = enhancer73.getClassLoader();
        enhancer73.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer77 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader78 = enhancer77.getClassLoader();
        enhancer73.setClassLoader(classLoader78);
        enhancer73.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy82 = enhancer73.getNamingPolicy();
        enhancer64.setNamingPolicy(namingPolicy82);
        java.lang.Class<?> wildcardClass84 = namingPolicy82.getClass();
        enhancer50.setSuperclass((java.lang.Class) wildcardClass84);
        enhancer35.setSuperclass((java.lang.Class) wildcardClass84);
        boolean boolean87 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass84);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(classLoader69);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(classLoader78);
        org.junit.Assert.assertNotNull(namingPolicy82);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test09636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09636");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback3 = null;
        enhancer0.setCallback(callback3);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter5 = null;
        enhancer0.setCallbackFilter(callbackFilter5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = enhancer0.getStrategy();
        boolean boolean8 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Callback callback9 = null;
        enhancer0.setCallback(callback9);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer11.setInterceptDuringConstruction(true);
        boolean boolean15 = enhancer11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer11.getStrategy();
        java.lang.Class[] classArray17 = new java.lang.Class[] {};
        enhancer11.setInterfaces(classArray17);
        enhancer0.setInterfaces(classArray17);
        enhancer0.setUseFactory(true);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        enhancer24.setUseCache(true);
        boolean boolean28 = enhancer24.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer29.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader33 = enhancer29.getClassLoader();
        java.lang.Class class34 = null;
        enhancer29.setSuperclass(class34);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        enhancer36.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        enhancer36.setClassLoader(classLoader41);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = enhancer36.getStrategy();
        java.lang.Class<?> wildcardClass44 = enhancer36.getClass();
        enhancer29.setSuperclass((java.lang.Class) wildcardClass44);
        enhancer24.setSuperclass((java.lang.Class) wildcardClass44);
        org.mockito.cglib.proxy.Callback callback47 = null;
        enhancer24.setCallback(callback47);
        org.mockito.cglib.proxy.Callback callback49 = null;
        enhancer24.setCallback(callback49);
        boolean boolean51 = enhancer24.getUseCache();
        java.lang.ClassLoader classLoader52 = enhancer24.getClassLoader();
        java.lang.ClassLoader classLoader53 = enhancer24.getClassLoader();
        enhancer0.setClassLoader(classLoader53);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(classLoader53);
    }

    @Test
    public void test09637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09637");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        java.lang.ClassLoader classLoader7 = enhancer0.getClassLoader();
        enhancer0.setUseFactory(false);
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        boolean boolean12 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer13.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader17 = enhancer13.getClassLoader();
        java.lang.Class class18 = null;
        enhancer13.setSuperclass(class18);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer20.setInterceptDuringConstruction(true);
        boolean boolean24 = enhancer20.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = enhancer20.getStrategy();
        enhancer13.setStrategy(generatorStrategy25);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader28 = enhancer27.getClassLoader();
        enhancer27.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader31 = enhancer27.getClassLoader();
        java.lang.Class class32 = null;
        enhancer27.setSuperclass(class32);
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        enhancer34.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader39 = enhancer38.getClassLoader();
        enhancer34.setClassLoader(classLoader39);
        enhancer34.setUseCache(false);
        java.lang.ClassLoader classLoader43 = enhancer34.getClassLoader();
        enhancer27.setClassLoader(classLoader43);
        boolean boolean45 = generatorStrategy25.equals((java.lang.Object) enhancer27);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = enhancer27.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = enhancer27.getNamingPolicy();
        java.lang.Class<?> wildcardClass48 = namingPolicy47.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass48);
        java.lang.ClassLoader classLoader50 = enhancer0.getClassLoader();
        enhancer0.setUseCache(false);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        boolean boolean55 = enhancer0.getUseCache();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test09638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09638");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        boolean boolean2 = enhancer0.getAttemptLoad();
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        enhancer5.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader9 = enhancer5.getClassLoader();
        java.lang.Class class10 = null;
        enhancer5.setSuperclass(class10);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        enhancer12.setInterceptDuringConstruction(true);
        boolean boolean16 = enhancer12.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = enhancer12.getStrategy();
        enhancer5.setStrategy(generatorStrategy17);
        enhancer0.setStrategy(generatorStrategy17);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer20.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader24 = enhancer20.getClassLoader();
        java.lang.Class class25 = null;
        enhancer20.setSuperclass(class25);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader28 = enhancer27.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = enhancer27.getStrategy();
        enhancer20.setStrategy(generatorStrategy29);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = enhancer31.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        enhancer34.setUseCache(true);
        boolean boolean38 = enhancer34.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader40 = enhancer39.getClassLoader();
        enhancer39.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader43 = enhancer39.getClassLoader();
        java.lang.Class class44 = null;
        enhancer39.setSuperclass(class44);
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader47 = enhancer46.getClassLoader();
        enhancer46.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer50 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader51 = enhancer50.getClassLoader();
        enhancer46.setClassLoader(classLoader51);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = enhancer46.getStrategy();
        java.lang.Class<?> wildcardClass54 = enhancer46.getClass();
        enhancer39.setSuperclass((java.lang.Class) wildcardClass54);
        enhancer34.setSuperclass((java.lang.Class) wildcardClass54);
        enhancer31.setSuperclass((java.lang.Class) wildcardClass54);
        org.mockito.cglib.proxy.Callback callback58 = null;
        enhancer31.setCallback(callback58);
        org.mockito.cglib.proxy.Enhancer enhancer60 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader61 = enhancer60.getClassLoader();
        enhancer60.setInterceptDuringConstruction(true);
        boolean boolean64 = enhancer60.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = enhancer60.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer66 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader67 = enhancer66.getClassLoader();
        enhancer66.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader70 = enhancer66.getClassLoader();
        org.mockito.cglib.proxy.Callback callback71 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray72 = new org.mockito.cglib.proxy.Callback[] { callback71 };
        enhancer66.setCallbacks(callbackArray72);
        enhancer60.setCallbacks(callbackArray72);
        enhancer31.setCallbacks(callbackArray72);
        enhancer20.setCallbacks(callbackArray72);
        enhancer0.setCallbacks(callbackArray72);
        java.lang.ClassLoader classLoader78 = enhancer0.getClassLoader();
        java.lang.ClassLoader classLoader79 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Callback[] callbackArray80 = null;
        enhancer0.setCallbacks(callbackArray80);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj82 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertNotNull(classLoader67);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(callbackArray72);
        org.junit.Assert.assertNotNull(classLoader78);
        org.junit.Assert.assertNotNull(classLoader79);
    }

    @Test
    public void test09639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09639");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer9.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer9.getStrategy();
        enhancer0.setStrategy(generatorStrategy16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = enhancer0.getStrategy();
        enhancer0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        enhancer0.setNamingPolicy(namingPolicy21);
        enhancer0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = enhancer0.getNamingPolicy();
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader29 = enhancer28.getClassLoader();
        enhancer28.setUseCache(true);
        boolean boolean32 = enhancer28.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader34 = enhancer33.getClassLoader();
        enhancer33.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader37 = enhancer33.getClassLoader();
        java.lang.Class class38 = null;
        enhancer33.setSuperclass(class38);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        enhancer40.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader45 = enhancer44.getClassLoader();
        enhancer40.setClassLoader(classLoader45);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = enhancer40.getStrategy();
        java.lang.Class<?> wildcardClass48 = enhancer40.getClass();
        enhancer33.setSuperclass((java.lang.Class) wildcardClass48);
        enhancer28.setSuperclass((java.lang.Class) wildcardClass48);
        org.mockito.cglib.proxy.Callback callback51 = null;
        enhancer28.setCallback(callback51);
        org.mockito.cglib.proxy.Callback callback53 = null;
        enhancer28.setCallback(callback53);
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        enhancer55.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader59 = enhancer55.getClassLoader();
        java.lang.Class class60 = null;
        enhancer55.setSuperclass(class60);
        java.lang.ClassLoader classLoader62 = enhancer55.getClassLoader();
        boolean boolean63 = enhancer55.getAttemptLoad();
        java.lang.Class<?> wildcardClass64 = enhancer55.getClass();
        enhancer28.setSuperclass((java.lang.Class) wildcardClass64);
        boolean boolean66 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass64);
        boolean boolean67 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass64);
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackType((java.lang.Class) wildcardClass64);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Unknown callback type class org.mockito.cglib.proxy.Enhancer");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test09640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09640");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        enhancer5.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader9 = enhancer5.getClassLoader();
        org.mockito.cglib.proxy.Callback callback10 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray11 = new org.mockito.cglib.proxy.Callback[] { callback10 };
        enhancer5.setCallbacks(callbackArray11);
        enhancer0.setCallbacks(callbackArray11);
        boolean boolean14 = enhancer0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = enhancer0.getStrategy();
        enhancer0.setUseCache(true);
        boolean boolean18 = enhancer0.getAttemptLoad();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(callbackArray11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test09641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09641");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader11 = enhancer7.getClassLoader();
        java.lang.Class class12 = null;
        enhancer7.setSuperclass(class12);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        enhancer14.setClassLoader(classLoader19);
        enhancer14.setUseCache(false);
        java.lang.ClassLoader classLoader23 = enhancer14.getClassLoader();
        enhancer7.setClassLoader(classLoader23);
        enhancer0.setClassLoader(classLoader23);
        java.lang.ClassLoader classLoader26 = enhancer0.getClassLoader();
        enhancer0.setUseCache(true);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer31.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        enhancer31.setClassLoader(classLoader36);
        enhancer31.setUseCache(false);
        java.lang.ClassLoader classLoader40 = enhancer31.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = enhancer31.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = enhancer31.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = enhancer31.getNamingPolicy();
        enhancer31.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = enhancer31.getStrategy();
        enhancer0.setStrategy(generatorStrategy46);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter48 = null;
        enhancer0.setCallbackFilter(callbackFilter48);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(generatorStrategy46);
    }

    @Test
    public void test09642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09642");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        boolean boolean4 = enhancer0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader7 = enhancer6.getClassLoader();
        enhancer6.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader10 = enhancer6.getClassLoader();
        org.mockito.cglib.proxy.Callback callback11 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray12 = new org.mockito.cglib.proxy.Callback[] { callback11 };
        enhancer6.setCallbacks(callbackArray12);
        enhancer0.setCallbacks(callbackArray12);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter15 = null;
        enhancer0.setCallbackFilter(callbackFilter15);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        enhancer17.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer17.setClassLoader(classLoader22);
        enhancer17.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        enhancer26.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader31 = enhancer30.getClassLoader();
        enhancer26.setClassLoader(classLoader31);
        enhancer26.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = enhancer26.getNamingPolicy();
        enhancer17.setNamingPolicy(namingPolicy35);
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        enhancer37.setUseCache(true);
        boolean boolean41 = enhancer37.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader43 = enhancer42.getClassLoader();
        enhancer42.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader46 = enhancer42.getClassLoader();
        java.lang.Class class47 = null;
        enhancer42.setSuperclass(class47);
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader50 = enhancer49.getClassLoader();
        enhancer49.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer53 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader54 = enhancer53.getClassLoader();
        enhancer49.setClassLoader(classLoader54);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = enhancer49.getStrategy();
        java.lang.Class<?> wildcardClass57 = enhancer49.getClass();
        enhancer42.setSuperclass((java.lang.Class) wildcardClass57);
        enhancer37.setSuperclass((java.lang.Class) wildcardClass57);
        boolean boolean60 = namingPolicy35.equals((java.lang.Object) enhancer37);
        boolean boolean62 = namingPolicy35.equals((java.lang.Object) 'a');
        enhancer0.setNamingPolicy(namingPolicy35);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter64 = null;
        enhancer0.setCallbackFilter(callbackFilter64);
        enhancer0.setUseFactory(false);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(callbackArray12);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test09643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09643");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseCache(true);
        boolean boolean4 = enhancer0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        enhancer0.setNamingPolicy(namingPolicy5);
        enhancer0.setSerialVersionUID((java.lang.Long) 100L);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        boolean boolean13 = enhancer9.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader18 = enhancer14.getClassLoader();
        org.mockito.cglib.proxy.Callback callback19 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray20 = new org.mockito.cglib.proxy.Callback[] { callback19 };
        enhancer14.setCallbacks(callbackArray20);
        enhancer14.setSerialVersionUID((java.lang.Long) 0L);
        boolean boolean24 = enhancer14.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer25.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer25.setClassLoader(classLoader30);
        enhancer25.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        enhancer34.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader39 = enhancer38.getClassLoader();
        enhancer34.setClassLoader(classLoader39);
        enhancer34.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = enhancer34.getNamingPolicy();
        enhancer25.setNamingPolicy(namingPolicy43);
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader46 = enhancer45.getClassLoader();
        enhancer45.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader49 = enhancer45.getClassLoader();
        java.lang.Class class50 = null;
        enhancer45.setSuperclass(class50);
        org.mockito.cglib.proxy.Enhancer enhancer52 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader53 = enhancer52.getClassLoader();
        enhancer52.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader57 = enhancer56.getClassLoader();
        enhancer52.setClassLoader(classLoader57);
        enhancer52.setUseCache(false);
        java.lang.ClassLoader classLoader61 = enhancer52.getClassLoader();
        enhancer45.setClassLoader(classLoader61);
        boolean boolean63 = namingPolicy43.equals((java.lang.Object) enhancer45);
        enhancer14.setNamingPolicy(namingPolicy43);
        enhancer9.setNamingPolicy(namingPolicy43);
        org.mockito.cglib.proxy.Enhancer enhancer66 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader67 = enhancer66.getClassLoader();
        enhancer66.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer70 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader71 = enhancer70.getClassLoader();
        enhancer66.setClassLoader(classLoader71);
        enhancer66.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer75 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader76 = enhancer75.getClassLoader();
        enhancer75.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer79 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader80 = enhancer79.getClassLoader();
        enhancer75.setClassLoader(classLoader80);
        enhancer75.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy84 = enhancer75.getNamingPolicy();
        enhancer66.setNamingPolicy(namingPolicy84);
        enhancer66.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy88 = enhancer66.getNamingPolicy();
        enhancer9.setNamingPolicy(namingPolicy88);
        enhancer0.setNamingPolicy(namingPolicy88);
        org.mockito.cglib.proxy.Callback callback91 = null;
        enhancer0.setCallback(callback91);
        java.lang.Class class93 = null;
        enhancer0.setSuperclass(class93);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(callbackArray20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(classLoader67);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertNotNull(classLoader80);
        org.junit.Assert.assertNotNull(namingPolicy84);
        org.junit.Assert.assertNotNull(namingPolicy88);
    }

    @Test
    public void test09644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09644");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader3 = enhancer2.getClassLoader();
        enhancer2.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader7 = enhancer6.getClassLoader();
        enhancer2.setClassLoader(classLoader7);
        enhancer2.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer11.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        enhancer11.setClassLoader(classLoader16);
        enhancer11.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = enhancer11.getNamingPolicy();
        enhancer2.setNamingPolicy(namingPolicy20);
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer22.setInterceptDuringConstruction(true);
        boolean boolean26 = namingPolicy20.equals((java.lang.Object) enhancer22);
        enhancer0.setNamingPolicy(namingPolicy20);
        enhancer0.setUseCache(false);
        enhancer0.setInterceptDuringConstruction(false);
        boolean boolean32 = enhancer0.getUseCache();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = enhancer0.getNamingPolicy();
        enhancer0.setAttemptLoad(false);
        boolean boolean38 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Callback callback39 = null;
        enhancer0.setCallback(callback39);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter41 = null;
        enhancer0.setCallbackFilter(callbackFilter41);
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.proxy.Callback callback47 = null;
        enhancer0.setCallback(callback47);
        org.mockito.cglib.proxy.Callback callback49 = null;
        enhancer0.setCallback(callback49);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test09645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09645");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback3 = null;
        enhancer0.setCallback(callback3);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        enhancer8.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        enhancer8.setClassLoader(classLoader13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = enhancer8.getStrategy();
        java.lang.Class<?> wildcardClass16 = enhancer8.getClass();
        boolean boolean17 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass16);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass16);
        boolean boolean19 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer20.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        enhancer20.setClassLoader(classLoader25);
        enhancer20.setUseCache(false);
        java.lang.ClassLoader classLoader29 = enhancer20.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader31 = enhancer30.getClassLoader();
        enhancer30.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader34 = enhancer30.getClassLoader();
        org.mockito.cglib.proxy.Callback callback35 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray36 = new org.mockito.cglib.proxy.Callback[] { callback35 };
        enhancer30.setCallbacks(callbackArray36);
        enhancer30.setSerialVersionUID((java.lang.Long) 0L);
        enhancer30.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader43 = enhancer42.getClassLoader();
        enhancer42.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader46 = enhancer42.getClassLoader();
        org.mockito.cglib.proxy.Callback callback47 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray48 = new org.mockito.cglib.proxy.Callback[] { callback47 };
        enhancer42.setCallbacks(callbackArray48);
        org.mockito.cglib.proxy.Enhancer enhancer50 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader51 = enhancer50.getClassLoader();
        enhancer50.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader54 = enhancer50.getClassLoader();
        java.lang.Class class55 = null;
        enhancer50.setSuperclass(class55);
        java.lang.Class<?> wildcardClass57 = enhancer50.getClass();
        boolean boolean58 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass57);
        enhancer42.setSuperclass((java.lang.Class) wildcardClass57);
        enhancer30.setSuperclass((java.lang.Class) wildcardClass57);
        java.lang.Class[] classArray61 = new java.lang.Class[] { wildcardClass57 };
        enhancer20.setInterfaces(classArray61);
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = enhancer20.getNamingPolicy();
        java.lang.Class<?> wildcardClass64 = namingPolicy63.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass64);
        org.mockito.cglib.proxy.Callback[] callbackArray66 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerCallbacks((java.lang.Class) wildcardClass64, callbackArray66);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.core.DefaultNamingPolicy is not an enhanced class");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(callbackArray36);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(callbackArray48);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test09646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09646");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        enhancer0.setInterceptDuringConstruction(true);
        boolean boolean5 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter6 = null;
        enhancer0.setCallbackFilter(callbackFilter6);
        enhancer0.setInterceptDuringConstruction(true);
        boolean boolean10 = enhancer0.getAttemptLoad();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test09647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09647");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Callback callback5 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray6 = new org.mockito.cglib.proxy.Callback[] { callback5 };
        enhancer0.setCallbacks(callbackArray6);
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        java.lang.ClassLoader classLoader10 = enhancer0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        enhancer12.setInterceptDuringConstruction(true);
        enhancer12.setSerialVersionUID((java.lang.Long) (-1L));
        enhancer12.setUseFactory(true);
        enhancer12.setInterceptDuringConstruction(false);
        boolean boolean22 = namingPolicy11.equals((java.lang.Object) enhancer12);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer25.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer25.setClassLoader(classLoader30);
        enhancer25.setUseCache(false);
        java.lang.ClassLoader classLoader34 = enhancer25.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = enhancer25.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = enhancer25.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        enhancer37.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader41 = enhancer37.getClassLoader();
        java.lang.Class class42 = null;
        enhancer37.setSuperclass(class42);
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader45 = enhancer44.getClassLoader();
        enhancer44.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        enhancer44.setClassLoader(classLoader49);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = enhancer44.getStrategy();
        java.lang.Class<?> wildcardClass52 = enhancer44.getClass();
        enhancer37.setSuperclass((java.lang.Class) wildcardClass52);
        enhancer37.setAttemptLoad(false);
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader57 = enhancer56.getClassLoader();
        enhancer37.setClassLoader(classLoader57);
        enhancer37.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer61 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader62 = enhancer61.getClassLoader();
        enhancer61.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer65 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader66 = enhancer65.getClassLoader();
        enhancer61.setClassLoader(classLoader66);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = enhancer61.getStrategy();
        enhancer61.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer71 = new org.mockito.cglib.proxy.Enhancer();
        enhancer71.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = enhancer71.getStrategy();
        enhancer61.setStrategy(generatorStrategy74);
        org.mockito.cglib.proxy.Enhancer enhancer76 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader77 = enhancer76.getClassLoader();
        enhancer76.setInterceptDuringConstruction(true);
        boolean boolean80 = enhancer76.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = enhancer76.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer82 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader83 = enhancer82.getClassLoader();
        enhancer82.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader86 = enhancer82.getClassLoader();
        org.mockito.cglib.proxy.Callback callback87 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray88 = new org.mockito.cglib.proxy.Callback[] { callback87 };
        enhancer82.setCallbacks(callbackArray88);
        enhancer76.setCallbacks(callbackArray88);
        enhancer61.setCallbacks(callbackArray88);
        enhancer37.setCallbacks(callbackArray88);
        enhancer25.setCallbacks(callbackArray88);
        org.mockito.cglib.proxy.Callback callback94 = null;
        enhancer25.setCallback(callback94);
        enhancer25.setAttemptLoad(true);
        org.mockito.cglib.core.Predicate predicate98 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str99 = namingPolicy11.getClassName("hi!", "hi!", (java.lang.Object) true, predicate98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(callbackArray6);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertNotNull(generatorStrategy74);
        org.junit.Assert.assertNotNull(classLoader77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertNotNull(classLoader83);
        org.junit.Assert.assertNotNull(classLoader86);
        org.junit.Assert.assertNotNull(callbackArray88);
    }

    @Test
    public void test09648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09648");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        boolean boolean11 = enhancer7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer7.getStrategy();
        enhancer0.setStrategy(generatorStrategy12);
        org.mockito.asm.ClassVisitor classVisitor14 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
    }

    @Test
    public void test09649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09649");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseCache(true);
        boolean boolean4 = enhancer0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        enhancer0.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = enhancer0.getClassLoader();
        boolean boolean8 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer9.setClassLoader(classLoader14);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        enhancer16.setInterceptDuringConstruction(true);
        boolean boolean20 = enhancer16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = enhancer16.getStrategy();
        java.lang.Class[] classArray22 = new java.lang.Class[] {};
        enhancer16.setInterfaces(classArray22);
        enhancer9.setInterfaces(classArray22);
        enhancer9.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader28 = enhancer27.getClassLoader();
        enhancer27.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer27.setClassLoader(classLoader32);
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        enhancer34.setInterceptDuringConstruction(true);
        boolean boolean38 = enhancer34.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = enhancer34.getStrategy();
        java.lang.Class[] classArray40 = new java.lang.Class[] {};
        enhancer34.setInterfaces(classArray40);
        enhancer27.setInterfaces(classArray40);
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader44 = enhancer43.getClassLoader();
        enhancer43.setInterceptDuringConstruction(true);
        boolean boolean47 = enhancer43.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = enhancer43.getStrategy();
        java.lang.Class[] classArray49 = new java.lang.Class[] {};
        enhancer43.setInterfaces(classArray49);
        enhancer27.setInterfaces(classArray49);
        enhancer9.setInterfaces(classArray49);
        enhancer0.setInterfaces(classArray49);
        org.mockito.asm.ClassVisitor classVisitor54 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor54);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertNotNull(classArray49);
    }

    @Test
    public void test09650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09650");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer9.setClassLoader(classLoader14);
        enhancer9.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer9.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy18);
        enhancer0.setInterceptDuringConstruction(true);
        enhancer0.setUseCache(false);
        enhancer0.setAttemptLoad(true);
        enhancer0.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader29 = enhancer28.getClassLoader();
        enhancer28.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        enhancer28.setClassLoader(classLoader33);
        enhancer28.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        enhancer37.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader42 = enhancer41.getClassLoader();
        enhancer37.setClassLoader(classLoader42);
        enhancer37.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = enhancer37.getNamingPolicy();
        enhancer28.setNamingPolicy(namingPolicy46);
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        enhancer48.setInterceptDuringConstruction(true);
        boolean boolean52 = namingPolicy46.equals((java.lang.Object) enhancer48);
        enhancer0.setNamingPolicy(namingPolicy46);
        org.mockito.cglib.proxy.Enhancer enhancer54 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader55 = enhancer54.getClassLoader();
        enhancer54.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer58 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader59 = enhancer58.getClassLoader();
        enhancer54.setClassLoader(classLoader59);
        org.mockito.cglib.proxy.Enhancer enhancer61 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader62 = enhancer61.getClassLoader();
        enhancer61.setInterceptDuringConstruction(true);
        boolean boolean65 = enhancer61.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = enhancer61.getStrategy();
        java.lang.Class[] classArray67 = new java.lang.Class[] {};
        enhancer61.setInterfaces(classArray67);
        enhancer54.setInterfaces(classArray67);
        enhancer0.setInterfaces(classArray67);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter71 = null;
        enhancer0.setCallbackFilter(callbackFilter71);
        java.lang.ClassLoader classLoader73 = enhancer0.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor74 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(classLoader73);
    }

    @Test
    public void test09651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09651");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter2 = null;
        enhancer0.setCallbackFilter(callbackFilter2);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter4 = null;
        enhancer0.setCallbackFilter(callbackFilter4);
        enhancer0.setUseCache(true);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter10 = null;
        enhancer0.setCallbackFilter(callbackFilter10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj12 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
    }

    @Test
    public void test09652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09652");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader11 = enhancer7.getClassLoader();
        java.lang.Class class12 = null;
        enhancer7.setSuperclass(class12);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        enhancer14.setClassLoader(classLoader19);
        enhancer14.setUseCache(false);
        java.lang.ClassLoader classLoader23 = enhancer14.getClassLoader();
        enhancer7.setClassLoader(classLoader23);
        enhancer0.setClassLoader(classLoader23);
        enhancer0.setUseFactory(true);
        java.lang.ClassLoader classLoader28 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer29.setInterceptDuringConstruction(true);
        boolean boolean33 = enhancer29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = enhancer29.getStrategy();
        java.lang.Class[] classArray35 = new java.lang.Class[] {};
        enhancer29.setInterfaces(classArray35);
        enhancer0.setInterfaces(classArray35);
        boolean boolean38 = enhancer0.getUseCache();
        enhancer0.setUseCache(true);
        java.lang.ClassLoader classLoader41 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter42 = null;
        enhancer0.setCallbackFilter(callbackFilter42);
        java.lang.ClassLoader classLoader44 = enhancer0.getClassLoader();
        enhancer0.setUseFactory(false);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(classLoader44);
    }

    @Test
    public void test09653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09653");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        enhancer8.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        enhancer12.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        enhancer16.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer16.setClassLoader(classLoader21);
        enhancer16.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer25.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer25.setClassLoader(classLoader30);
        enhancer25.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = enhancer25.getNamingPolicy();
        enhancer16.setNamingPolicy(namingPolicy34);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        enhancer36.setUseCache(true);
        boolean boolean40 = enhancer36.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader42 = enhancer41.getClassLoader();
        enhancer41.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader45 = enhancer41.getClassLoader();
        java.lang.Class class46 = null;
        enhancer41.setSuperclass(class46);
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        enhancer48.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer52 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader53 = enhancer52.getClassLoader();
        enhancer48.setClassLoader(classLoader53);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = enhancer48.getStrategy();
        java.lang.Class<?> wildcardClass56 = enhancer48.getClass();
        enhancer41.setSuperclass((java.lang.Class) wildcardClass56);
        enhancer36.setSuperclass((java.lang.Class) wildcardClass56);
        boolean boolean59 = namingPolicy34.equals((java.lang.Object) enhancer36);
        enhancer12.setNamingPolicy(namingPolicy34);
        enhancer8.setNamingPolicy(namingPolicy34);
        enhancer0.setNamingPolicy(namingPolicy34);
        java.lang.Object obj65 = null;
        org.mockito.cglib.core.Predicate predicate66 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str67 = namingPolicy34.getClassName("", "hi!", obj65, predicate66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test09654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09654");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer7.setClassLoader(classLoader12);
        enhancer7.setUseCache(false);
        java.lang.ClassLoader classLoader16 = enhancer7.getClassLoader();
        enhancer0.setClassLoader(classLoader16);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter18 = null;
        enhancer0.setCallbackFilter(callbackFilter18);
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer22.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader26 = enhancer22.getClassLoader();
        java.lang.Class class27 = null;
        enhancer22.setSuperclass(class27);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = enhancer29.getStrategy();
        enhancer22.setStrategy(generatorStrategy31);
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader34 = enhancer33.getClassLoader();
        enhancer33.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        enhancer33.setClassLoader(classLoader38);
        enhancer33.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader43 = enhancer42.getClassLoader();
        enhancer42.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader47 = enhancer46.getClassLoader();
        enhancer42.setClassLoader(classLoader47);
        enhancer42.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = enhancer42.getNamingPolicy();
        enhancer33.setNamingPolicy(namingPolicy51);
        org.mockito.cglib.proxy.Enhancer enhancer53 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader54 = enhancer53.getClassLoader();
        enhancer53.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader57 = enhancer53.getClassLoader();
        java.lang.Class class58 = null;
        enhancer53.setSuperclass(class58);
        org.mockito.cglib.proxy.Enhancer enhancer60 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader61 = enhancer60.getClassLoader();
        enhancer60.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer64 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader65 = enhancer64.getClassLoader();
        enhancer60.setClassLoader(classLoader65);
        enhancer60.setUseCache(false);
        java.lang.ClassLoader classLoader69 = enhancer60.getClassLoader();
        enhancer53.setClassLoader(classLoader69);
        boolean boolean71 = namingPolicy51.equals((java.lang.Object) enhancer53);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = enhancer53.getStrategy();
        enhancer22.setStrategy(generatorStrategy72);
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = enhancer22.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy74);
        org.mockito.cglib.proxy.Enhancer enhancer78 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader79 = enhancer78.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer80 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer81 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader82 = enhancer81.getClassLoader();
        enhancer81.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer85 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader86 = enhancer85.getClassLoader();
        enhancer81.setClassLoader(classLoader86);
        enhancer80.setClassLoader(classLoader86);
        enhancer78.setClassLoader(classLoader86);
        org.mockito.cglib.core.NamingPolicy namingPolicy90 = enhancer78.getNamingPolicy();
        org.mockito.cglib.core.Predicate predicate91 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str92 = namingPolicy74.getClassName("hi!", "", (java.lang.Object) enhancer78, predicate91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(classLoader69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertNotNull(classLoader79);
        org.junit.Assert.assertNotNull(classLoader82);
        org.junit.Assert.assertNotNull(classLoader86);
        org.junit.Assert.assertNotNull(namingPolicy90);
    }

    @Test
    public void test09655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09655");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = enhancer0.getStrategy();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        enhancer10.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = enhancer10.getStrategy();
        enhancer0.setStrategy(generatorStrategy13);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        enhancer15.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader19 = enhancer15.getClassLoader();
        java.lang.Class class20 = null;
        enhancer15.setSuperclass(class20);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = enhancer15.getNamingPolicy();
        enhancer15.setInterceptDuringConstruction(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = enhancer15.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = enhancer15.getNamingPolicy();
        boolean boolean27 = generatorStrategy13.equals((java.lang.Object) enhancer15);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test09656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09656");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer9.setClassLoader(classLoader14);
        enhancer9.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer9.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy18);
        enhancer0.setInterceptDuringConstruction(true);
        boolean boolean22 = enhancer0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        enhancer24.setInterceptDuringConstruction(true);
        enhancer24.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader31 = enhancer30.getClassLoader();
        enhancer30.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        enhancer30.setClassLoader(classLoader35);
        enhancer30.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = enhancer30.getNamingPolicy();
        boolean boolean40 = enhancer30.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader42 = enhancer41.getClassLoader();
        enhancer41.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader45 = enhancer41.getClassLoader();
        java.lang.Class class46 = null;
        enhancer41.setSuperclass(class46);
        java.lang.ClassLoader classLoader48 = enhancer41.getClassLoader();
        enhancer30.setClassLoader(classLoader48);
        enhancer30.setSerialVersionUID((java.lang.Long) (-1L));
        enhancer30.setSerialVersionUID((java.lang.Long) 1L);
        java.lang.ClassLoader classLoader54 = enhancer30.getClassLoader();
        enhancer24.setClassLoader(classLoader54);
        enhancer0.setClassLoader(classLoader54);
        java.lang.ClassLoader classLoader57 = enhancer0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Callback callback59 = null;
        enhancer0.setCallback(callback59);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertNotNull(namingPolicy58);
    }

    @Test
    public void test09657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09657");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        boolean boolean11 = enhancer7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer7.getStrategy();
        enhancer0.setStrategy(generatorStrategy12);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader18 = enhancer14.getClassLoader();
        java.lang.Class class19 = null;
        enhancer14.setSuperclass(class19);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer21.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer21.setClassLoader(classLoader26);
        enhancer21.setUseCache(false);
        java.lang.ClassLoader classLoader30 = enhancer21.getClassLoader();
        enhancer14.setClassLoader(classLoader30);
        boolean boolean32 = generatorStrategy12.equals((java.lang.Object) enhancer14);
        enhancer14.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = enhancer14.getNamingPolicy();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter36 = null;
        enhancer14.setCallbackFilter(callbackFilter36);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(namingPolicy35);
    }

    @Test
    public void test09658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09658");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer7.setClassLoader(classLoader12);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = enhancer7.getStrategy();
        java.lang.Class<?> wildcardClass15 = enhancer7.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass15);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        enhancer17.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer17.setClassLoader(classLoader22);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = enhancer17.getStrategy();
        enhancer0.setStrategy(generatorStrategy24);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter26 = null;
        enhancer0.setCallbackFilter(callbackFilter26);
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader31 = enhancer30.getClassLoader();
        boolean boolean32 = enhancer30.getAttemptLoad();
        enhancer30.setInterceptDuringConstruction(false);
        enhancer30.setSerialVersionUID((java.lang.Long) 10L);
        enhancer30.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader40 = enhancer39.getClassLoader();
        enhancer39.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader44 = enhancer43.getClassLoader();
        enhancer39.setClassLoader(classLoader44);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = enhancer39.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer47 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader48 = enhancer47.getClassLoader();
        enhancer47.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer51 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader52 = enhancer51.getClassLoader();
        enhancer47.setClassLoader(classLoader52);
        enhancer47.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader57 = enhancer56.getClassLoader();
        enhancer56.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader60 = enhancer56.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer61 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader62 = enhancer61.getClassLoader();
        enhancer61.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader65 = enhancer61.getClassLoader();
        org.mockito.cglib.proxy.Callback callback66 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray67 = new org.mockito.cglib.proxy.Callback[] { callback66 };
        enhancer61.setCallbacks(callbackArray67);
        enhancer56.setCallbacks(callbackArray67);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = enhancer56.getStrategy();
        org.mockito.cglib.proxy.Callback callback71 = null;
        enhancer56.setCallback(callback71);
        org.mockito.cglib.proxy.Enhancer enhancer73 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader74 = enhancer73.getClassLoader();
        enhancer73.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer77 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader78 = enhancer77.getClassLoader();
        enhancer73.setClassLoader(classLoader78);
        org.mockito.cglib.proxy.Enhancer enhancer80 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader81 = enhancer80.getClassLoader();
        enhancer80.setInterceptDuringConstruction(true);
        boolean boolean84 = enhancer80.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy85 = enhancer80.getStrategy();
        java.lang.Class[] classArray86 = new java.lang.Class[] {};
        enhancer80.setInterfaces(classArray86);
        enhancer73.setInterfaces(classArray86);
        enhancer56.setInterfaces(classArray86);
        enhancer47.setInterfaces(classArray86);
        enhancer39.setInterfaces(classArray86);
        enhancer30.setInterfaces(classArray86);
        java.lang.Object[] objArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj94 = enhancer0.create(classArray86, objArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Arguments must be non-null and of equal length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertNotNull(classLoader60);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(callbackArray67);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(classLoader78);
        org.junit.Assert.assertNotNull(classLoader81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(generatorStrategy85);
        org.junit.Assert.assertNotNull(classArray86);
    }

    @Test
    public void test09659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09659");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        boolean boolean4 = enhancer0.getUseCache();
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        enhancer8.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        enhancer8.setClassLoader(classLoader13);
        enhancer8.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = enhancer8.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        enhancer18.setInterceptDuringConstruction(true);
        boolean boolean22 = enhancer18.getUseCache();
        boolean boolean23 = enhancer18.getAttemptLoad();
        enhancer18.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        enhancer26.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader30 = enhancer26.getClassLoader();
        java.lang.Class class31 = null;
        enhancer26.setSuperclass(class31);
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader34 = enhancer33.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = enhancer33.getStrategy();
        enhancer26.setStrategy(generatorStrategy35);
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        enhancer37.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader42 = enhancer41.getClassLoader();
        enhancer37.setClassLoader(classLoader42);
        enhancer37.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader47 = enhancer46.getClassLoader();
        enhancer46.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer50 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader51 = enhancer50.getClassLoader();
        enhancer46.setClassLoader(classLoader51);
        enhancer46.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = enhancer46.getNamingPolicy();
        enhancer37.setNamingPolicy(namingPolicy55);
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader58 = enhancer57.getClassLoader();
        enhancer57.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader61 = enhancer57.getClassLoader();
        java.lang.Class class62 = null;
        enhancer57.setSuperclass(class62);
        org.mockito.cglib.proxy.Enhancer enhancer64 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader65 = enhancer64.getClassLoader();
        enhancer64.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer68 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader69 = enhancer68.getClassLoader();
        enhancer64.setClassLoader(classLoader69);
        enhancer64.setUseCache(false);
        java.lang.ClassLoader classLoader73 = enhancer64.getClassLoader();
        enhancer57.setClassLoader(classLoader73);
        boolean boolean75 = namingPolicy55.equals((java.lang.Object) enhancer57);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy76 = enhancer57.getStrategy();
        enhancer26.setStrategy(generatorStrategy76);
        org.mockito.cglib.proxy.Enhancer enhancer78 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader79 = enhancer78.getClassLoader();
        enhancer78.setInterceptDuringConstruction(true);
        boolean boolean82 = enhancer78.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = enhancer78.getStrategy();
        java.lang.Class[] classArray84 = new java.lang.Class[] {};
        enhancer78.setInterfaces(classArray84);
        enhancer26.setInterfaces(classArray84);
        enhancer18.setInterfaces(classArray84);
        enhancer8.setInterfaces(classArray84);
        enhancer0.setInterfaces(classArray84);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy92 = enhancer0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor93 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor93);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(classLoader69);
        org.junit.Assert.assertNotNull(classLoader73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(generatorStrategy76);
        org.junit.Assert.assertNotNull(classLoader79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(generatorStrategy83);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(generatorStrategy92);
    }

    @Test
    public void test09660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09660");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        boolean boolean4 = enhancer0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class[] classArray6 = new java.lang.Class[] {};
        enhancer0.setInterfaces(classArray6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer9.setClassLoader(classLoader14);
        enhancer9.setUseCache(false);
        enhancer9.setSerialVersionUID((java.lang.Long) 0L);
        enhancer9.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer22.setUseCache(true);
        boolean boolean26 = enhancer22.getAttemptLoad();
        org.mockito.cglib.proxy.Callback callback27 = null;
        enhancer22.setCallback(callback27);
        java.lang.ClassLoader classLoader29 = enhancer22.getClassLoader();
        enhancer9.setClassLoader(classLoader29);
        boolean boolean31 = enhancer9.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        enhancer32.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        enhancer32.setClassLoader(classLoader37);
        enhancer32.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader42 = enhancer41.getClassLoader();
        enhancer41.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader46 = enhancer45.getClassLoader();
        enhancer41.setClassLoader(classLoader46);
        enhancer41.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = enhancer41.getNamingPolicy();
        enhancer32.setNamingPolicy(namingPolicy50);
        enhancer32.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = enhancer32.getNamingPolicy();
        enhancer9.setNamingPolicy(namingPolicy54);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray56 = generatorStrategy8.generate((org.mockito.cglib.core.ClassGenerator) enhancer9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertNotNull(namingPolicy54);
    }

    @Test
    public void test09661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09661");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader9 = enhancer0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = enhancer0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = enhancer0.getNamingPolicy();
        boolean boolean13 = enhancer0.getUseCache();
        java.lang.ClassLoader classLoader14 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = enhancer0.getStrategy();
        enhancer0.setInterceptDuringConstruction(true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj18 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(generatorStrategy15);
    }

    @Test
    public void test09662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09662");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        enhancer5.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader9 = enhancer5.getClassLoader();
        org.mockito.cglib.proxy.Callback callback10 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray11 = new org.mockito.cglib.proxy.Callback[] { callback10 };
        enhancer5.setCallbacks(callbackArray11);
        enhancer0.setCallbacks(callbackArray11);
        boolean boolean14 = enhancer0.getAttemptLoad();
        java.lang.ClassLoader classLoader15 = enhancer0.getClassLoader();
        enhancer0.setUseFactory(false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class18 = enhancer0.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: createClass does not accept callbacks");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(callbackArray11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(classLoader15);
    }

    @Test
    public void test09663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09663");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader9 = enhancer0.getClassLoader();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Callback callback12 = null;
        enhancer0.setCallback(callback12);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Callback callback15 = null;
        enhancer0.setCallback(callback15);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter17 = null;
        enhancer0.setCallbackFilter(callbackFilter17);
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader20 = enhancer19.getClassLoader();
        enhancer19.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader23 = enhancer19.getClassLoader();
        java.lang.Class class24 = null;
        enhancer19.setSuperclass(class24);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        enhancer26.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader31 = enhancer30.getClassLoader();
        enhancer26.setClassLoader(classLoader31);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = enhancer26.getStrategy();
        java.lang.Class<?> wildcardClass34 = enhancer26.getClass();
        enhancer19.setSuperclass((java.lang.Class) wildcardClass34);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        enhancer36.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        enhancer36.setClassLoader(classLoader41);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = enhancer36.getStrategy();
        enhancer19.setStrategy(generatorStrategy43);
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        enhancer45.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback48 = null;
        enhancer45.setCallback(callback48);
        enhancer45.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = enhancer45.getNamingPolicy();
        org.mockito.cglib.proxy.Callback callback53 = null;
        enhancer45.setCallback(callback53);
        boolean boolean55 = enhancer45.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader57 = enhancer56.getClassLoader();
        enhancer45.setClassLoader(classLoader57);
        enhancer19.setClassLoader(classLoader57);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = enhancer19.getStrategy();
        org.mockito.cglib.proxy.Callback callback61 = null;
        enhancer19.setCallback(callback61);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = enhancer19.getStrategy();
        enhancer0.setStrategy(generatorStrategy63);
        org.mockito.cglib.proxy.Enhancer enhancer65 = new org.mockito.cglib.proxy.Enhancer();
        enhancer65.setSerialVersionUID((java.lang.Long) (-1L));
        enhancer65.setAttemptLoad(false);
        enhancer65.setInterceptDuringConstruction(true);
        boolean boolean72 = enhancer65.getUseCache();
        boolean boolean73 = generatorStrategy63.equals((java.lang.Object) enhancer65);
        enhancer65.setUseCache(false);
        org.mockito.cglib.proxy.Callback callback76 = null;
        enhancer65.setCallback(callback76);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test09664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09664");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseCache(true);
        boolean boolean4 = enhancer0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        enhancer0.setNamingPolicy(namingPolicy5);
        enhancer0.setInterceptDuringConstruction(false);
        enhancer0.setSerialVersionUID((java.lang.Long) 100L);
        enhancer0.setInterceptDuringConstruction(false);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test09665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09665");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader5 = enhancer0.getClassLoader();
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader8 = enhancer0.getClassLoader();
        enhancer0.setSerialVersionUID((java.lang.Long) (-1L));
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter13 = null;
        enhancer0.setCallbackFilter(callbackFilter13);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        enhancer16.setInterceptDuringConstruction(true);
        boolean boolean20 = enhancer16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = enhancer16.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer22.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader26 = enhancer22.getClassLoader();
        org.mockito.cglib.proxy.Callback callback27 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray28 = new org.mockito.cglib.proxy.Callback[] { callback27 };
        enhancer22.setCallbacks(callbackArray28);
        enhancer16.setCallbacks(callbackArray28);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer31.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        enhancer31.setClassLoader(classLoader36);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = enhancer31.getStrategy();
        enhancer31.setInterceptDuringConstruction(true);
        enhancer31.setAttemptLoad(false);
        boolean boolean43 = enhancer31.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader45 = enhancer44.getClassLoader();
        enhancer44.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        enhancer44.setClassLoader(classLoader49);
        enhancer44.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer53 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader54 = enhancer53.getClassLoader();
        enhancer53.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader57 = enhancer53.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer58 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader59 = enhancer58.getClassLoader();
        enhancer58.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader62 = enhancer58.getClassLoader();
        org.mockito.cglib.proxy.Callback callback63 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray64 = new org.mockito.cglib.proxy.Callback[] { callback63 };
        enhancer58.setCallbacks(callbackArray64);
        enhancer53.setCallbacks(callbackArray64);
        enhancer44.setCallbacks(callbackArray64);
        enhancer31.setCallbacks(callbackArray64);
        enhancer16.setCallbacks(callbackArray64);
        org.mockito.cglib.proxy.Callback callback70 = null;
        enhancer16.setCallback(callback70);
        java.lang.ClassLoader classLoader72 = enhancer16.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = enhancer16.getNamingPolicy();
        boolean boolean74 = namingPolicy15.equals((java.lang.Object) enhancer16);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(callbackArray28);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertNotNull(callbackArray64);
        org.junit.Assert.assertNotNull(classLoader72);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test09666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09666");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader13 = enhancer9.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader18 = enhancer14.getClassLoader();
        org.mockito.cglib.proxy.Callback callback19 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray20 = new org.mockito.cglib.proxy.Callback[] { callback19 };
        enhancer14.setCallbacks(callbackArray20);
        enhancer9.setCallbacks(callbackArray20);
        enhancer0.setCallbacks(callbackArray20);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        enhancer24.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback27 = null;
        enhancer24.setCallback(callback27);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter29 = null;
        enhancer24.setCallbackFilter(callbackFilter29);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = enhancer24.getStrategy();
        boolean boolean32 = enhancer24.getUseCache();
        org.mockito.cglib.proxy.Callback callback33 = null;
        enhancer24.setCallback(callback33);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        enhancer35.setInterceptDuringConstruction(true);
        boolean boolean39 = enhancer35.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = enhancer35.getStrategy();
        java.lang.Class[] classArray41 = new java.lang.Class[] {};
        enhancer35.setInterfaces(classArray41);
        enhancer24.setInterfaces(classArray41);
        enhancer0.setInterfaces(classArray41);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class45 = enhancer0.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: createClass does not accept callbacks");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(callbackArray20);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(classArray41);
    }

    @Test
    public void test09667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09667");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter2 = null;
        enhancer0.setCallbackFilter(callbackFilter2);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter4 = null;
        enhancer0.setCallbackFilter(callbackFilter4);
        enhancer0.setUseFactory(true);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Callback callback10 = null;
        enhancer0.setCallback(callback10);
        enhancer0.setInterceptDuringConstruction(true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj14 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
    }

    @Test
    public void test09668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09668");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        boolean boolean11 = enhancer7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer7.getStrategy();
        enhancer0.setStrategy(generatorStrategy12);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader18 = enhancer14.getClassLoader();
        java.lang.Class class19 = null;
        enhancer14.setSuperclass(class19);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer21.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer21.setClassLoader(classLoader26);
        enhancer21.setUseCache(false);
        java.lang.ClassLoader classLoader30 = enhancer21.getClassLoader();
        enhancer14.setClassLoader(classLoader30);
        boolean boolean32 = generatorStrategy12.equals((java.lang.Object) enhancer14);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = enhancer14.getNamingPolicy();
        boolean boolean34 = enhancer14.getAttemptLoad();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter35 = null;
        enhancer14.setCallbackFilter(callbackFilter35);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter37 = null;
        enhancer14.setCallbackFilter(callbackFilter37);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = enhancer14.getStrategy();
        java.lang.ClassLoader classLoader40 = enhancer14.getClassLoader();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(classLoader40);
    }

    @Test
    public void test09669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09669");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader9 = enhancer0.getClassLoader();
        enhancer0.setAttemptLoad(true);
        java.lang.Class class12 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackType(class12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader9);
    }

    @Test
    public void test09670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09670");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter2 = null;
        enhancer0.setCallbackFilter(callbackFilter2);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter4 = null;
        enhancer0.setCallbackFilter(callbackFilter4);
        boolean boolean6 = enhancer0.getUseCache();
        enhancer0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = enhancer0.getNamingPolicy();
        enhancer0.setSerialVersionUID((java.lang.Long) 100L);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        enhancer12.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader16 = enhancer12.getClassLoader();
        java.lang.Class class17 = null;
        enhancer12.setSuperclass(class17);
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader20 = enhancer19.getClassLoader();
        enhancer19.setInterceptDuringConstruction(true);
        boolean boolean23 = enhancer19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = enhancer19.getStrategy();
        enhancer12.setStrategy(generatorStrategy24);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        enhancer26.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader30 = enhancer26.getClassLoader();
        java.lang.Class class31 = null;
        enhancer26.setSuperclass(class31);
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader34 = enhancer33.getClassLoader();
        enhancer33.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        enhancer33.setClassLoader(classLoader38);
        enhancer33.setUseCache(false);
        java.lang.ClassLoader classLoader42 = enhancer33.getClassLoader();
        enhancer26.setClassLoader(classLoader42);
        boolean boolean44 = generatorStrategy24.equals((java.lang.Object) enhancer26);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = enhancer26.getNamingPolicy();
        boolean boolean46 = enhancer26.getAttemptLoad();
        enhancer26.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader50 = enhancer49.getClassLoader();
        enhancer49.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer53 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader54 = enhancer53.getClassLoader();
        enhancer49.setClassLoader(classLoader54);
        enhancer49.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = enhancer49.getNamingPolicy();
        boolean boolean59 = enhancer49.getUseCache();
        boolean boolean60 = enhancer49.getAttemptLoad();
        org.mockito.cglib.proxy.Callback callback61 = null;
        enhancer49.setCallback(callback61);
        java.lang.ClassLoader classLoader63 = enhancer49.getClassLoader();
        enhancer26.setClassLoader(classLoader63);
        enhancer0.setClassLoader(classLoader63);
        org.mockito.cglib.proxy.Enhancer enhancer66 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader67 = enhancer66.getClassLoader();
        enhancer66.setInterceptDuringConstruction(true);
        boolean boolean70 = enhancer66.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = enhancer66.getNamingPolicy();
        java.lang.ClassLoader classLoader72 = enhancer66.getClassLoader();
        enhancer66.setSerialVersionUID((java.lang.Long) 0L);
        boolean boolean75 = enhancer66.getUseCache();
        java.lang.ClassLoader classLoader76 = enhancer66.getClassLoader();
        enhancer0.setClassLoader(classLoader76);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(classLoader63);
        org.junit.Assert.assertNotNull(classLoader67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(namingPolicy71);
        org.junit.Assert.assertNotNull(classLoader72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(classLoader76);
    }

    @Test
    public void test09671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09671");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer7.setClassLoader(classLoader12);
        enhancer7.setUseCache(false);
        java.lang.ClassLoader classLoader16 = enhancer7.getClassLoader();
        enhancer0.setClassLoader(classLoader16);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter18 = null;
        enhancer0.setCallbackFilter(callbackFilter18);
        enhancer0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader22 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(false);
        enhancer0.setUseFactory(false);
        enhancer0.setUseFactory(false);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader22);
    }

    @Test
    public void test09672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09672");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        boolean boolean11 = enhancer7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer7.getStrategy();
        enhancer0.setStrategy(generatorStrategy12);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader18 = enhancer14.getClassLoader();
        java.lang.Class class19 = null;
        enhancer14.setSuperclass(class19);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer21.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer21.setClassLoader(classLoader26);
        enhancer21.setUseCache(false);
        java.lang.ClassLoader classLoader30 = enhancer21.getClassLoader();
        enhancer14.setClassLoader(classLoader30);
        boolean boolean32 = generatorStrategy12.equals((java.lang.Object) enhancer14);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = enhancer14.getNamingPolicy();
        boolean boolean34 = enhancer14.getAttemptLoad();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter35 = null;
        enhancer14.setCallbackFilter(callbackFilter35);
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        enhancer37.setUseCache(true);
        boolean boolean41 = enhancer37.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader43 = enhancer42.getClassLoader();
        enhancer42.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader46 = enhancer42.getClassLoader();
        java.lang.Class class47 = null;
        enhancer42.setSuperclass(class47);
        java.lang.Class<?> wildcardClass49 = enhancer42.getClass();
        enhancer37.setSuperclass((java.lang.Class) wildcardClass49);
        enhancer14.setSuperclass((java.lang.Class) wildcardClass49);
        enhancer14.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = enhancer14.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        enhancer55.setInterceptDuringConstruction(true);
        boolean boolean59 = enhancer55.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = enhancer55.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer61 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader62 = enhancer61.getClassLoader();
        enhancer61.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader65 = enhancer61.getClassLoader();
        org.mockito.cglib.proxy.Callback callback66 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray67 = new org.mockito.cglib.proxy.Callback[] { callback66 };
        enhancer61.setCallbacks(callbackArray67);
        enhancer55.setCallbacks(callbackArray67);
        org.mockito.cglib.proxy.Callback callback70 = null;
        enhancer55.setCallback(callback70);
        enhancer55.setInterceptDuringConstruction(true);
        boolean boolean74 = generatorStrategy54.equals((java.lang.Object) enhancer55);
        java.lang.ClassLoader classLoader75 = enhancer55.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = enhancer55.getNamingPolicy();
        enhancer55.setAttemptLoad(false);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(callbackArray67);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(classLoader75);
        org.junit.Assert.assertNotNull(namingPolicy76);
    }

    @Test
    public void test09673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09673");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        enhancer0.setInterceptDuringConstruction(true);
        boolean boolean5 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter6 = null;
        enhancer0.setCallbackFilter(callbackFilter6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer11.setUseCache(true);
        boolean boolean15 = enhancer11.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = null;
        enhancer11.setNamingPolicy(namingPolicy16);
        enhancer11.setInterceptDuringConstruction(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = enhancer11.getNamingPolicy();
        enhancer11.setAttemptLoad(false);
        enhancer11.setAttemptLoad(true);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter25 = null;
        enhancer11.setCallbackFilter(callbackFilter25);
        org.mockito.cglib.core.Predicate predicate27 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = namingPolicy8.getClassName("", "hi!", (java.lang.Object) enhancer11, predicate27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(namingPolicy20);
    }

    @Test
    public void test09674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09674");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        enhancer0.setStrategy(generatorStrategy9);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = enhancer0.getNamingPolicy();
        enhancer0.setInterceptDuringConstruction(true);
        boolean boolean15 = enhancer0.getUseCache();
        boolean boolean16 = enhancer0.getAttemptLoad();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test09675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09675");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Callback callback5 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray6 = new org.mockito.cglib.proxy.Callback[] { callback5 };
        enhancer0.setCallbacks(callbackArray6);
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        boolean boolean10 = enhancer0.getUseCache();
        enhancer0.setUseCache(true);
        enhancer0.setAttemptLoad(true);
        boolean boolean15 = enhancer0.getUseCache();
        enhancer0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        enhancer18.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader22 = enhancer18.getClassLoader();
        java.lang.Class class23 = null;
        enhancer18.setSuperclass(class23);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer25.setInterceptDuringConstruction(true);
        boolean boolean29 = enhancer25.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = enhancer25.getStrategy();
        enhancer18.setStrategy(generatorStrategy30);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        enhancer32.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader36 = enhancer32.getClassLoader();
        java.lang.Class class37 = null;
        enhancer32.setSuperclass(class37);
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader40 = enhancer39.getClassLoader();
        enhancer39.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader44 = enhancer43.getClassLoader();
        enhancer39.setClassLoader(classLoader44);
        enhancer39.setUseCache(false);
        java.lang.ClassLoader classLoader48 = enhancer39.getClassLoader();
        enhancer32.setClassLoader(classLoader48);
        boolean boolean50 = generatorStrategy30.equals((java.lang.Object) enhancer32);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = enhancer32.getNamingPolicy();
        boolean boolean52 = enhancer32.getAttemptLoad();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter53 = null;
        enhancer32.setCallbackFilter(callbackFilter53);
        org.mockito.cglib.proxy.Callback callback55 = null;
        enhancer32.setCallback(callback55);
        java.lang.Class<?> wildcardClass57 = enhancer32.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass57);
        org.mockito.cglib.proxy.Callback callback59 = null;
        enhancer0.setCallback(callback59);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(callbackArray6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test09676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09676");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = enhancer0.getStrategy();
        enhancer0.setInterceptDuringConstruction(true);
        enhancer0.setAttemptLoad(false);
        enhancer0.setSerialVersionUID((java.lang.Long) 1L);
        enhancer0.setAttemptLoad(true);
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = enhancer0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = enhancer0.getStrategy();
        java.lang.ClassLoader classLoader21 = enhancer0.getClassLoader();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(classLoader21);
    }

    @Test
    public void test09677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09677");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        boolean boolean4 = enhancer0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer0.getNamingPolicy();
        java.lang.Object obj6 = null;
        boolean boolean7 = namingPolicy5.equals(obj6);
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader11 = enhancer10.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer10.getStrategy();
        enhancer10.setInterceptDuringConstruction(true);
        boolean boolean15 = enhancer10.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = enhancer10.getNamingPolicy();
        org.mockito.cglib.core.Predicate predicate17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = namingPolicy5.getClassName("hi!", "hi!", (java.lang.Object) enhancer10, predicate17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(namingPolicy16);
    }

    @Test
    public void test09678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09678");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer9.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer9.getStrategy();
        enhancer0.setStrategy(generatorStrategy16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = enhancer0.getStrategy();
        enhancer0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        enhancer0.setNamingPolicy(namingPolicy21);
        enhancer0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter26 = null;
        enhancer0.setCallbackFilter(callbackFilter26);
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader29 = enhancer28.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter30 = null;
        enhancer28.setCallbackFilter(callbackFilter30);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter32 = null;
        enhancer28.setCallbackFilter(callbackFilter32);
        enhancer28.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = enhancer28.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        enhancer37.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader41 = enhancer37.getClassLoader();
        java.lang.Class class42 = null;
        enhancer37.setSuperclass(class42);
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader45 = enhancer44.getClassLoader();
        enhancer44.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader48 = enhancer44.getClassLoader();
        java.lang.Class class49 = null;
        enhancer44.setSuperclass(class49);
        org.mockito.cglib.proxy.Enhancer enhancer51 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader52 = enhancer51.getClassLoader();
        enhancer51.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        enhancer51.setClassLoader(classLoader56);
        enhancer51.setUseCache(false);
        java.lang.ClassLoader classLoader60 = enhancer51.getClassLoader();
        enhancer44.setClassLoader(classLoader60);
        enhancer37.setClassLoader(classLoader60);
        java.lang.ClassLoader classLoader63 = enhancer37.getClassLoader();
        enhancer37.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = enhancer37.getNamingPolicy();
        enhancer28.setNamingPolicy(namingPolicy66);
        enhancer0.setNamingPolicy(namingPolicy66);
        org.mockito.asm.ClassVisitor classVisitor69 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(classLoader60);
        org.junit.Assert.assertNotNull(classLoader63);
        org.junit.Assert.assertNotNull(namingPolicy66);
    }

    @Test
    public void test09679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09679");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        java.lang.ClassLoader classLoader7 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        enhancer8.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader12 = enhancer8.getClassLoader();
        java.lang.Class class13 = null;
        enhancer8.setSuperclass(class13);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        enhancer15.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader20 = enhancer19.getClassLoader();
        enhancer15.setClassLoader(classLoader20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = enhancer15.getStrategy();
        java.lang.Class<?> wildcardClass23 = enhancer15.getClass();
        enhancer8.setSuperclass((java.lang.Class) wildcardClass23);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer25.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer25.setClassLoader(classLoader30);
        enhancer25.setUseCache(false);
        java.lang.ClassLoader classLoader34 = enhancer25.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = enhancer25.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = enhancer25.getNamingPolicy();
        java.lang.ClassLoader classLoader37 = enhancer25.getClassLoader();
        enhancer8.setClassLoader(classLoader37);
        enhancer0.setClassLoader(classLoader37);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter40 = null;
        enhancer0.setCallbackFilter(callbackFilter40);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertNotNull(classLoader37);
    }

    @Test
    public void test09680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09680");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader9 = enhancer0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        enhancer12.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader16 = enhancer12.getClassLoader();
        java.lang.Class class17 = null;
        enhancer12.setSuperclass(class17);
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader20 = enhancer19.getClassLoader();
        enhancer19.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader24 = enhancer23.getClassLoader();
        enhancer19.setClassLoader(classLoader24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = enhancer19.getStrategy();
        java.lang.Class<?> wildcardClass27 = enhancer19.getClass();
        enhancer12.setSuperclass((java.lang.Class) wildcardClass27);
        enhancer12.setAttemptLoad(false);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer12.setClassLoader(classLoader32);
        enhancer12.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        enhancer36.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        enhancer36.setClassLoader(classLoader41);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = enhancer36.getStrategy();
        enhancer36.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        enhancer46.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = enhancer46.getStrategy();
        enhancer36.setStrategy(generatorStrategy49);
        org.mockito.cglib.proxy.Enhancer enhancer51 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader52 = enhancer51.getClassLoader();
        enhancer51.setInterceptDuringConstruction(true);
        boolean boolean55 = enhancer51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = enhancer51.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader58 = enhancer57.getClassLoader();
        enhancer57.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader61 = enhancer57.getClassLoader();
        org.mockito.cglib.proxy.Callback callback62 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray63 = new org.mockito.cglib.proxy.Callback[] { callback62 };
        enhancer57.setCallbacks(callbackArray63);
        enhancer51.setCallbacks(callbackArray63);
        enhancer36.setCallbacks(callbackArray63);
        enhancer12.setCallbacks(callbackArray63);
        enhancer0.setCallbacks(callbackArray63);
        org.mockito.cglib.proxy.Callback callback69 = null;
        enhancer0.setCallback(callback69);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter71 = null;
        enhancer0.setCallbackFilter(callbackFilter71);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter73 = null;
        enhancer0.setCallbackFilter(callbackFilter73);
        enhancer0.setAttemptLoad(false);
        boolean boolean77 = enhancer0.getUseCache();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertNotNull(callbackArray63);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test09681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09681");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader2 = enhancer1.getClassLoader();
        enhancer1.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        enhancer1.setClassLoader(classLoader6);
        enhancer0.setClassLoader(classLoader6);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader13 = enhancer9.getClassLoader();
        enhancer0.setClassLoader(classLoader13);
        boolean boolean15 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        enhancer16.setInterceptDuringConstruction(true);
        boolean boolean20 = enhancer16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = enhancer16.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer22.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader26 = enhancer22.getClassLoader();
        org.mockito.cglib.proxy.Callback callback27 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray28 = new org.mockito.cglib.proxy.Callback[] { callback27 };
        enhancer22.setCallbacks(callbackArray28);
        enhancer16.setCallbacks(callbackArray28);
        enhancer0.setCallbacks(callbackArray28);
        enhancer0.setUseFactory(false);
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        enhancer34.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader38 = enhancer34.getClassLoader();
        java.lang.Class class39 = null;
        enhancer34.setSuperclass(class39);
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader42 = enhancer41.getClassLoader();
        enhancer41.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader45 = enhancer41.getClassLoader();
        java.lang.Class class46 = null;
        enhancer41.setSuperclass(class46);
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        enhancer48.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer52 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader53 = enhancer52.getClassLoader();
        enhancer48.setClassLoader(classLoader53);
        enhancer48.setUseCache(false);
        java.lang.ClassLoader classLoader57 = enhancer48.getClassLoader();
        enhancer41.setClassLoader(classLoader57);
        enhancer34.setClassLoader(classLoader57);
        enhancer34.setUseFactory(true);
        java.lang.ClassLoader classLoader62 = enhancer34.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer63 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader64 = enhancer63.getClassLoader();
        enhancer63.setInterceptDuringConstruction(true);
        boolean boolean67 = enhancer63.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = enhancer63.getStrategy();
        java.lang.Class[] classArray69 = new java.lang.Class[] {};
        enhancer63.setInterfaces(classArray69);
        enhancer34.setInterfaces(classArray69);
        enhancer0.setInterfaces(classArray69);
        enhancer0.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Enhancer enhancer75 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader76 = enhancer75.getClassLoader();
        enhancer75.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader79 = enhancer75.getClassLoader();
        org.mockito.cglib.proxy.Callback callback80 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray81 = new org.mockito.cglib.proxy.Callback[] { callback80 };
        enhancer75.setCallbacks(callbackArray81);
        enhancer75.setSerialVersionUID((java.lang.Long) 0L);
        enhancer75.setSerialVersionUID((java.lang.Long) 0L);
        enhancer75.setUseFactory(true);
        enhancer75.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy91 = enhancer75.getStrategy();
        enhancer0.setStrategy(generatorStrategy91);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter93 = null;
        enhancer0.setCallbackFilter(callbackFilter93);
        boolean boolean95 = enhancer0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class96 = enhancer0.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: createClass does not accept callbacks");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(callbackArray28);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertNotNull(classLoader79);
        org.junit.Assert.assertNotNull(callbackArray81);
        org.junit.Assert.assertNotNull(generatorStrategy91);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test09682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09682");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader11 = enhancer10.getClassLoader();
        enhancer10.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer10.setClassLoader(classLoader15);
        enhancer9.setClassLoader(classLoader15);
        enhancer0.setClassLoader(classLoader15);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter21 = null;
        enhancer0.setCallbackFilter(callbackFilter21);
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader24 = enhancer23.getClassLoader();
        enhancer23.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader27 = enhancer23.getClassLoader();
        java.lang.Class class28 = null;
        enhancer23.setSuperclass(class28);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader31 = enhancer30.getClassLoader();
        enhancer30.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        enhancer30.setClassLoader(classLoader35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = enhancer30.getStrategy();
        java.lang.Class<?> wildcardClass38 = enhancer30.getClass();
        enhancer23.setSuperclass((java.lang.Class) wildcardClass38);
        boolean boolean40 = enhancer23.getAttemptLoad();
        java.lang.Class<?> wildcardClass41 = enhancer23.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass41);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader46 = enhancer45.getClassLoader();
        enhancer45.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader49 = enhancer45.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer50 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader51 = enhancer50.getClassLoader();
        enhancer50.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader54 = enhancer50.getClassLoader();
        org.mockito.cglib.proxy.Callback callback55 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray56 = new org.mockito.cglib.proxy.Callback[] { callback55 };
        enhancer50.setCallbacks(callbackArray56);
        enhancer45.setCallbacks(callbackArray56);
        boolean boolean59 = enhancer45.getAttemptLoad();
        java.lang.ClassLoader classLoader60 = enhancer45.getClassLoader();
        enhancer0.setClassLoader(classLoader60);
        org.mockito.cglib.proxy.Enhancer enhancer62 = new org.mockito.cglib.proxy.Enhancer();
        enhancer62.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback65 = null;
        enhancer62.setCallback(callback65);
        enhancer62.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = enhancer62.getNamingPolicy();
        org.mockito.cglib.proxy.Callback callback70 = null;
        enhancer62.setCallback(callback70);
        boolean boolean72 = enhancer62.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer73 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader74 = enhancer73.getClassLoader();
        enhancer62.setClassLoader(classLoader74);
        enhancer62.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader78 = enhancer62.getClassLoader();
        java.lang.Class<?> wildcardClass79 = enhancer62.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass79);
        org.mockito.cglib.proxy.Callback callback81 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj82 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass79, callback81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(callbackArray56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(classLoader60);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(classLoader78);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test09683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09683");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = enhancer0.getNamingPolicy();
        boolean boolean10 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer11.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader15 = enhancer11.getClassLoader();
        java.lang.Class class16 = null;
        enhancer11.setSuperclass(class16);
        java.lang.ClassLoader classLoader18 = enhancer11.getClassLoader();
        enhancer0.setClassLoader(classLoader18);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = enhancer0.getStrategy();
        boolean boolean21 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer22.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader26 = enhancer22.getClassLoader();
        java.lang.Class class27 = null;
        enhancer22.setSuperclass(class27);
        enhancer22.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer31.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        enhancer31.setClassLoader(classLoader36);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = enhancer31.getStrategy();
        enhancer22.setStrategy(generatorStrategy38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = enhancer22.getStrategy();
        enhancer0.setStrategy(generatorStrategy40);
        enhancer0.setUseFactory(true);
        java.lang.ClassLoader classLoader44 = enhancer0.getClassLoader();
        boolean boolean45 = enhancer0.getUseCache();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test09684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09684");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseCache(true);
        boolean boolean4 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        enhancer5.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader9 = enhancer5.getClassLoader();
        java.lang.Class class10 = null;
        enhancer5.setSuperclass(class10);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        enhancer12.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        enhancer12.setClassLoader(classLoader17);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = enhancer12.getStrategy();
        java.lang.Class<?> wildcardClass20 = enhancer12.getClass();
        enhancer5.setSuperclass((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        org.mockito.cglib.proxy.Callback callback23 = null;
        enhancer0.setCallback(callback23);
        org.mockito.cglib.proxy.Callback callback25 = null;
        enhancer0.setCallback(callback25);
        org.mockito.cglib.proxy.Callback callback27 = null;
        enhancer0.setCallback(callback27);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer29.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader34 = enhancer33.getClassLoader();
        enhancer29.setClassLoader(classLoader34);
        enhancer29.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader39 = enhancer38.getClassLoader();
        enhancer38.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader43 = enhancer42.getClassLoader();
        enhancer38.setClassLoader(classLoader43);
        enhancer38.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = enhancer38.getNamingPolicy();
        enhancer29.setNamingPolicy(namingPolicy47);
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader50 = enhancer49.getClassLoader();
        enhancer49.setInterceptDuringConstruction(true);
        boolean boolean53 = namingPolicy47.equals((java.lang.Object) enhancer49);
        java.lang.ClassLoader classLoader54 = enhancer49.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        enhancer55.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader59 = enhancer55.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer60 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader61 = enhancer60.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer62 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader63 = enhancer62.getClassLoader();
        enhancer62.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer66 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader67 = enhancer66.getClassLoader();
        enhancer62.setClassLoader(classLoader67);
        enhancer62.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer71 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader72 = enhancer71.getClassLoader();
        enhancer71.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer75 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader76 = enhancer75.getClassLoader();
        enhancer71.setClassLoader(classLoader76);
        enhancer71.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = enhancer71.getNamingPolicy();
        enhancer62.setNamingPolicy(namingPolicy80);
        org.mockito.cglib.proxy.Enhancer enhancer82 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader83 = enhancer82.getClassLoader();
        enhancer82.setInterceptDuringConstruction(true);
        boolean boolean86 = namingPolicy80.equals((java.lang.Object) enhancer82);
        enhancer60.setNamingPolicy(namingPolicy80);
        enhancer55.setNamingPolicy(namingPolicy80);
        enhancer49.setNamingPolicy(namingPolicy80);
        enhancer0.setNamingPolicy(namingPolicy80);
        org.mockito.cglib.core.NamingPolicy namingPolicy91 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter92 = null;
        enhancer0.setCallbackFilter(callbackFilter92);
        java.lang.ClassLoader classLoader94 = enhancer0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy95 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter96 = null;
        enhancer0.setCallbackFilter(callbackFilter96);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertNotNull(classLoader63);
        org.junit.Assert.assertNotNull(classLoader67);
        org.junit.Assert.assertNotNull(classLoader72);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertNotNull(namingPolicy80);
        org.junit.Assert.assertNotNull(classLoader83);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(namingPolicy91);
        org.junit.Assert.assertNotNull(classLoader94);
        org.junit.Assert.assertNotNull(namingPolicy95);
    }

    @Test
    public void test09685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09685");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        enhancer0.setAttemptLoad(true);
        enhancer0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        enhancer16.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback19 = null;
        enhancer16.setCallback(callback19);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter21 = null;
        enhancer16.setCallbackFilter(callbackFilter21);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer16.getStrategy();
        boolean boolean24 = enhancer16.getUseCache();
        org.mockito.cglib.proxy.Callback callback25 = null;
        enhancer16.setCallback(callback25);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader28 = enhancer27.getClassLoader();
        boolean boolean29 = enhancer27.getAttemptLoad();
        java.lang.ClassLoader classLoader30 = enhancer27.getClassLoader();
        enhancer16.setClassLoader(classLoader30);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        enhancer32.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        enhancer32.setClassLoader(classLoader37);
        enhancer32.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = enhancer32.getNamingPolicy();
        enhancer16.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = enhancer16.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = enhancer16.getStrategy();
        enhancer16.setUseCache(false);
        enhancer16.setUseFactory(false);
        enhancer16.setUseCache(false);
        org.mockito.cglib.core.Predicate predicate51 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str52 = namingPolicy13.getClassName("hi!", "", (java.lang.Object) enhancer16, predicate51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(generatorStrategy44);
    }

    @Test
    public void test09686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09686");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = enhancer0.getNamingPolicy();
        boolean boolean10 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer11.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader15 = enhancer11.getClassLoader();
        java.lang.Class class16 = null;
        enhancer11.setSuperclass(class16);
        java.lang.ClassLoader classLoader18 = enhancer11.getClassLoader();
        enhancer0.setClassLoader(classLoader18);
        enhancer0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        enhancer24.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader29 = enhancer28.getClassLoader();
        enhancer24.setClassLoader(classLoader29);
        enhancer23.setClassLoader(classLoader29);
        java.lang.ClassLoader classLoader32 = enhancer23.getClassLoader();
        enhancer23.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        enhancer35.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader39 = enhancer35.getClassLoader();
        java.lang.Class class40 = null;
        enhancer35.setSuperclass(class40);
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader43 = enhancer42.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = enhancer42.getStrategy();
        enhancer35.setStrategy(generatorStrategy44);
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader47 = enhancer46.getClassLoader();
        enhancer46.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer50 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader51 = enhancer50.getClassLoader();
        enhancer46.setClassLoader(classLoader51);
        enhancer46.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        enhancer55.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer59 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader60 = enhancer59.getClassLoader();
        enhancer55.setClassLoader(classLoader60);
        enhancer55.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = enhancer55.getNamingPolicy();
        enhancer46.setNamingPolicy(namingPolicy64);
        org.mockito.cglib.proxy.Enhancer enhancer66 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader67 = enhancer66.getClassLoader();
        enhancer66.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader70 = enhancer66.getClassLoader();
        java.lang.Class class71 = null;
        enhancer66.setSuperclass(class71);
        org.mockito.cglib.proxy.Enhancer enhancer73 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader74 = enhancer73.getClassLoader();
        enhancer73.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer77 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader78 = enhancer77.getClassLoader();
        enhancer73.setClassLoader(classLoader78);
        enhancer73.setUseCache(false);
        java.lang.ClassLoader classLoader82 = enhancer73.getClassLoader();
        enhancer66.setClassLoader(classLoader82);
        boolean boolean84 = namingPolicy64.equals((java.lang.Object) enhancer66);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy85 = enhancer66.getStrategy();
        enhancer35.setStrategy(generatorStrategy85);
        boolean boolean88 = generatorStrategy85.equals((java.lang.Object) (byte) 1);
        enhancer23.setStrategy(generatorStrategy85);
        enhancer23.setInterceptDuringConstruction(true);
        boolean boolean92 = enhancer23.getAttemptLoad();
        boolean boolean93 = generatorStrategy22.equals((java.lang.Object) enhancer23);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(classLoader60);
        org.junit.Assert.assertNotNull(namingPolicy64);
        org.junit.Assert.assertNotNull(classLoader67);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(classLoader78);
        org.junit.Assert.assertNotNull(classLoader82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(generatorStrategy85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test09687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09687");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setUseFactory(false);
        org.mockito.cglib.proxy.Enhancer enhancer3 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader4 = enhancer3.getClassLoader();
        enhancer3.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer3.setClassLoader(classLoader8);
        enhancer3.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        enhancer12.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        enhancer12.setClassLoader(classLoader17);
        enhancer12.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = enhancer12.getNamingPolicy();
        enhancer3.setNamingPolicy(namingPolicy21);
        enhancer3.setInterceptDuringConstruction(true);
        enhancer3.setSerialVersionUID((java.lang.Long) 100L);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader28 = enhancer27.getClassLoader();
        enhancer27.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer27.setClassLoader(classLoader32);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = enhancer27.getStrategy();
        enhancer27.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        enhancer37.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = enhancer37.getStrategy();
        enhancer27.setStrategy(generatorStrategy40);
        enhancer3.setStrategy(generatorStrategy40);
        enhancer0.setStrategy(generatorStrategy40);
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader45 = enhancer44.getClassLoader();
        enhancer44.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        enhancer44.setClassLoader(classLoader49);
        enhancer44.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = enhancer44.getNamingPolicy();
        boolean boolean54 = enhancer44.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        enhancer55.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader59 = enhancer55.getClassLoader();
        java.lang.Class class60 = null;
        enhancer55.setSuperclass(class60);
        java.lang.ClassLoader classLoader62 = enhancer55.getClassLoader();
        enhancer44.setClassLoader(classLoader62);
        enhancer44.setSerialVersionUID((java.lang.Long) (-1L));
        enhancer44.setSerialVersionUID((java.lang.Long) 1L);
        boolean boolean68 = enhancer44.getUseCache();
        boolean boolean69 = generatorStrategy40.equals((java.lang.Object) enhancer44);
        enhancer44.setSerialVersionUID((java.lang.Long) 10L);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test09688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09688");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        boolean boolean2 = enhancer0.getAttemptLoad();
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.proxy.Callback callback5 = null;
        enhancer0.setCallback(callback5);
        boolean boolean7 = enhancer0.getUseCache();
        boolean boolean8 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter9 = null;
        enhancer0.setCallbackFilter(callbackFilter9);
        java.lang.ClassLoader classLoader11 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        enhancer12.setInterceptDuringConstruction(true);
        boolean boolean16 = enhancer12.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = enhancer12.getStrategy();
        java.lang.Class[] classArray18 = new java.lang.Class[] {};
        enhancer12.setInterfaces(classArray18);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = enhancer12.getStrategy();
        enhancer0.setStrategy(generatorStrategy20);
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer22.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        enhancer22.setClassLoader(classLoader27);
        enhancer22.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer31.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        enhancer31.setClassLoader(classLoader36);
        enhancer31.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = enhancer31.getNamingPolicy();
        enhancer22.setNamingPolicy(namingPolicy40);
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader43 = enhancer42.getClassLoader();
        enhancer42.setInterceptDuringConstruction(true);
        boolean boolean46 = namingPolicy40.equals((java.lang.Object) enhancer42);
        org.mockito.cglib.proxy.Enhancer enhancer47 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader48 = enhancer47.getClassLoader();
        enhancer47.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader51 = enhancer47.getClassLoader();
        java.lang.Class class52 = null;
        enhancer47.setSuperclass(class52);
        org.mockito.cglib.proxy.Enhancer enhancer54 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader55 = enhancer54.getClassLoader();
        enhancer54.setInterceptDuringConstruction(true);
        boolean boolean58 = enhancer54.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = enhancer54.getStrategy();
        enhancer47.setStrategy(generatorStrategy59);
        org.mockito.cglib.proxy.Enhancer enhancer61 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader62 = enhancer61.getClassLoader();
        enhancer61.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader65 = enhancer61.getClassLoader();
        java.lang.Class class66 = null;
        enhancer61.setSuperclass(class66);
        org.mockito.cglib.proxy.Enhancer enhancer68 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader69 = enhancer68.getClassLoader();
        enhancer68.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer72 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader73 = enhancer72.getClassLoader();
        enhancer68.setClassLoader(classLoader73);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = enhancer68.getStrategy();
        java.lang.Class<?> wildcardClass76 = enhancer68.getClass();
        enhancer61.setSuperclass((java.lang.Class) wildcardClass76);
        enhancer47.setSuperclass((java.lang.Class) wildcardClass76);
        org.mockito.cglib.proxy.Enhancer enhancer79 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader80 = enhancer79.getClassLoader();
        enhancer79.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer83 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader84 = enhancer83.getClassLoader();
        enhancer79.setClassLoader(classLoader84);
        enhancer79.setUseCache(false);
        java.lang.ClassLoader classLoader88 = enhancer79.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy89 = enhancer79.getNamingPolicy();
        enhancer47.setNamingPolicy(namingPolicy89);
        boolean boolean91 = namingPolicy40.equals((java.lang.Object) namingPolicy89);
        enhancer0.setNamingPolicy(namingPolicy89);
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj95 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(classLoader69);
        org.junit.Assert.assertNotNull(classLoader73);
        org.junit.Assert.assertNotNull(generatorStrategy75);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertNotNull(classLoader80);
        org.junit.Assert.assertNotNull(classLoader84);
        org.junit.Assert.assertNotNull(classLoader88);
        org.junit.Assert.assertNotNull(namingPolicy89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test09689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09689");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter2 = null;
        enhancer0.setCallbackFilter(callbackFilter2);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter4 = null;
        enhancer0.setCallbackFilter(callbackFilter4);
        boolean boolean6 = enhancer0.getUseCache();
        enhancer0.setSerialVersionUID((java.lang.Long) 100L);
        java.lang.Class[] classArray9 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackTypes(classArray9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test09690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09690");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader9 = enhancer0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = enhancer0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer13.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        enhancer13.setClassLoader(classLoader18);
        enhancer13.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = enhancer13.getNamingPolicy();
        boolean boolean23 = enhancer13.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        enhancer24.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader28 = enhancer24.getClassLoader();
        java.lang.Class class29 = null;
        enhancer24.setSuperclass(class29);
        java.lang.ClassLoader classLoader31 = enhancer24.getClassLoader();
        enhancer13.setClassLoader(classLoader31);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = enhancer13.getStrategy();
        enhancer0.setStrategy(generatorStrategy33);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        enhancer35.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader39 = enhancer35.getClassLoader();
        java.lang.Class class40 = null;
        enhancer35.setSuperclass(class40);
        enhancer35.setInterceptDuringConstruction(true);
        enhancer35.setSerialVersionUID((java.lang.Long) 10L);
        boolean boolean46 = generatorStrategy33.equals((java.lang.Object) enhancer35);
        enhancer35.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Callback callback49 = null;
        enhancer35.setCallback(callback49);
        enhancer35.setInterceptDuringConstruction(false);
        org.mockito.asm.ClassVisitor classVisitor53 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer35.generateClass(classVisitor53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test09691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09691");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer7.setClassLoader(classLoader12);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = enhancer7.getStrategy();
        java.lang.Class<?> wildcardClass15 = enhancer7.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass15);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        enhancer17.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer17.setClassLoader(classLoader22);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = enhancer17.getStrategy();
        enhancer0.setStrategy(generatorStrategy24);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        enhancer26.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback29 = null;
        enhancer26.setCallback(callback29);
        enhancer26.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = enhancer26.getNamingPolicy();
        org.mockito.cglib.proxy.Callback callback34 = null;
        enhancer26.setCallback(callback34);
        boolean boolean36 = enhancer26.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        enhancer26.setClassLoader(classLoader38);
        enhancer0.setClassLoader(classLoader38);
        boolean boolean41 = enhancer0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj42 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test09692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09692");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        boolean boolean11 = enhancer7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer7.getStrategy();
        enhancer0.setStrategy(generatorStrategy12);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader18 = enhancer14.getClassLoader();
        org.mockito.cglib.proxy.Callback callback19 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray20 = new org.mockito.cglib.proxy.Callback[] { callback19 };
        enhancer14.setCallbacks(callbackArray20);
        enhancer14.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = enhancer14.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer25.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader29 = enhancer25.getClassLoader();
        java.lang.Class class30 = null;
        enhancer25.setSuperclass(class30);
        java.lang.Class<?> wildcardClass32 = enhancer25.getClass();
        boolean boolean33 = generatorStrategy24.equals((java.lang.Object) wildcardClass32);
        boolean boolean34 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass32);
        boolean boolean35 = generatorStrategy12.equals((java.lang.Object) wildcardClass32);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        enhancer36.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        enhancer36.setClassLoader(classLoader41);
        enhancer36.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = enhancer36.getNamingPolicy();
        boolean boolean46 = enhancer36.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer47 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader48 = enhancer47.getClassLoader();
        enhancer47.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader51 = enhancer47.getClassLoader();
        java.lang.Class class52 = null;
        enhancer47.setSuperclass(class52);
        java.lang.ClassLoader classLoader54 = enhancer47.getClassLoader();
        enhancer36.setClassLoader(classLoader54);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = enhancer36.getStrategy();
        boolean boolean57 = generatorStrategy12.equals((java.lang.Object) enhancer36);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = enhancer36.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer59 = new org.mockito.cglib.proxy.Enhancer();
        enhancer59.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback62 = null;
        enhancer59.setCallback(callback62);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter64 = null;
        enhancer59.setCallbackFilter(callbackFilter64);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = enhancer59.getStrategy();
        java.lang.Class class67 = null;
        enhancer59.setSuperclass(class67);
        java.lang.ClassLoader classLoader69 = enhancer59.getClassLoader();
        org.mockito.cglib.proxy.Callback callback70 = null;
        enhancer59.setCallback(callback70);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray72 = generatorStrategy58.generate((org.mockito.cglib.core.ClassGenerator) enhancer59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(callbackArray20);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertNotNull(classLoader69);
    }

    @Test
    public void test09693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09693");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback3 = null;
        enhancer0.setCallback(callback3);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter5 = null;
        enhancer0.setCallbackFilter(callbackFilter5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = enhancer0.getStrategy();
        boolean boolean8 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Callback callback9 = null;
        enhancer0.setCallback(callback9);
        boolean boolean11 = enhancer0.getUseCache();
        enhancer0.setAttemptLoad(false);
        enhancer0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer0.getStrategy();
        enhancer0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        enhancer19.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback22 = null;
        enhancer19.setCallback(callback22);
        enhancer19.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = enhancer19.getNamingPolicy();
        org.mockito.cglib.proxy.Callback callback27 = null;
        enhancer19.setCallback(callback27);
        enhancer19.setInterceptDuringConstruction(false);
        enhancer19.setUseFactory(false);
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader34 = enhancer33.getClassLoader();
        enhancer33.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        enhancer33.setClassLoader(classLoader38);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter40 = null;
        enhancer33.setCallbackFilter(callbackFilter40);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = enhancer33.getNamingPolicy();
        java.lang.ClassLoader classLoader43 = enhancer33.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader45 = enhancer44.getClassLoader();
        enhancer44.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader48 = enhancer44.getClassLoader();
        java.lang.Class class49 = null;
        enhancer44.setSuperclass(class49);
        org.mockito.cglib.proxy.Enhancer enhancer51 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader52 = enhancer51.getClassLoader();
        enhancer51.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader55 = enhancer51.getClassLoader();
        java.lang.Class class56 = null;
        enhancer51.setSuperclass(class56);
        org.mockito.cglib.proxy.Enhancer enhancer58 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader59 = enhancer58.getClassLoader();
        enhancer58.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer62 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader63 = enhancer62.getClassLoader();
        enhancer58.setClassLoader(classLoader63);
        enhancer58.setUseCache(false);
        java.lang.ClassLoader classLoader67 = enhancer58.getClassLoader();
        enhancer51.setClassLoader(classLoader67);
        enhancer44.setClassLoader(classLoader67);
        enhancer44.setUseFactory(true);
        java.lang.ClassLoader classLoader72 = enhancer44.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer73 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader74 = enhancer73.getClassLoader();
        enhancer73.setInterceptDuringConstruction(true);
        boolean boolean77 = enhancer73.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = enhancer73.getStrategy();
        java.lang.Class[] classArray79 = new java.lang.Class[] {};
        enhancer73.setInterfaces(classArray79);
        enhancer44.setInterfaces(classArray79);
        enhancer33.setInterfaces(classArray79);
        enhancer19.setInterfaces(classArray79);
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackTypes(classArray79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Array cannot be empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(classLoader63);
        org.junit.Assert.assertNotNull(classLoader67);
        org.junit.Assert.assertNotNull(classLoader72);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertNotNull(classArray79);
    }

    @Test
    public void test09694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09694");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter7 = null;
        enhancer0.setCallbackFilter(callbackFilter7);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer11.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        enhancer11.setClassLoader(classLoader16);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter18 = null;
        enhancer11.setCallbackFilter(callbackFilter18);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer20.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        enhancer20.setClassLoader(classLoader25);
        enhancer20.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer29.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader34 = enhancer33.getClassLoader();
        enhancer29.setClassLoader(classLoader34);
        enhancer29.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = enhancer29.getNamingPolicy();
        enhancer20.setNamingPolicy(namingPolicy38);
        enhancer11.setNamingPolicy(namingPolicy38);
        enhancer0.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.proxy.Callback callback42 = null;
        enhancer0.setCallback(callback42);
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = enhancer0.getNamingPolicy();
        java.lang.ClassLoader classLoader45 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter46 = null;
        enhancer0.setCallbackFilter(callbackFilter46);
        boolean boolean48 = enhancer0.getUseCache();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test09695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09695");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader2 = enhancer1.getClassLoader();
        enhancer1.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        enhancer1.setClassLoader(classLoader6);
        enhancer0.setClassLoader(classLoader6);
        java.lang.ClassLoader classLoader9 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader11 = enhancer10.getClassLoader();
        enhancer10.setInterceptDuringConstruction(true);
        boolean boolean14 = enhancer10.getUseCache();
        boolean boolean15 = enhancer10.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        enhancer17.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer17.setClassLoader(classLoader22);
        enhancer16.setClassLoader(classLoader22);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer25.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader29 = enhancer25.getClassLoader();
        enhancer16.setClassLoader(classLoader29);
        boolean boolean31 = enhancer16.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        enhancer32.setInterceptDuringConstruction(true);
        boolean boolean36 = enhancer32.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = enhancer32.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader39 = enhancer38.getClassLoader();
        enhancer38.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader42 = enhancer38.getClassLoader();
        org.mockito.cglib.proxy.Callback callback43 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray44 = new org.mockito.cglib.proxy.Callback[] { callback43 };
        enhancer38.setCallbacks(callbackArray44);
        enhancer32.setCallbacks(callbackArray44);
        enhancer16.setCallbacks(callbackArray44);
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        enhancer48.setInterceptDuringConstruction(true);
        boolean boolean52 = enhancer48.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = enhancer48.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer54 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader55 = enhancer54.getClassLoader();
        enhancer54.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader58 = enhancer54.getClassLoader();
        org.mockito.cglib.proxy.Callback callback59 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray60 = new org.mockito.cglib.proxy.Callback[] { callback59 };
        enhancer54.setCallbacks(callbackArray60);
        enhancer48.setCallbacks(callbackArray60);
        enhancer16.setCallbacks(callbackArray60);
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = enhancer16.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer65 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader66 = enhancer65.getClassLoader();
        enhancer65.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader69 = enhancer65.getClassLoader();
        java.lang.Class class70 = null;
        enhancer65.setSuperclass(class70);
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = enhancer65.getNamingPolicy();
        boolean boolean73 = namingPolicy64.equals((java.lang.Object) namingPolicy72);
        enhancer10.setNamingPolicy(namingPolicy64);
        enhancer0.setNamingPolicy(namingPolicy64);
        boolean boolean76 = enhancer0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer78 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader79 = enhancer78.getClassLoader();
        boolean boolean80 = enhancer78.getAttemptLoad();
        enhancer78.setInterceptDuringConstruction(false);
        enhancer78.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy85 = enhancer78.getStrategy();
        boolean boolean86 = enhancer78.getAttemptLoad();
        org.mockito.cglib.proxy.Callback callback87 = null;
        enhancer78.setCallback(callback87);
        boolean boolean89 = generatorStrategy77.equals((java.lang.Object) callback87);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(callbackArray44);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(callbackArray60);
        org.junit.Assert.assertNotNull(namingPolicy64);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertNotNull(classLoader69);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertNotNull(classLoader79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(generatorStrategy85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test09696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09696");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setSerialVersionUID((java.lang.Long) (-1L));
        enhancer0.setUseFactory(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass6 = enhancer0.getClass();
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test09697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09697");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        boolean boolean2 = enhancer0.getAttemptLoad();
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.proxy.Callback callback5 = null;
        enhancer0.setCallback(callback5);
        boolean boolean7 = enhancer0.getUseCache();
        boolean boolean8 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter9 = null;
        enhancer0.setCallbackFilter(callbackFilter9);
        java.lang.ClassLoader classLoader11 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        enhancer12.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader16 = enhancer12.getClassLoader();
        java.lang.Class class17 = null;
        enhancer12.setSuperclass(class17);
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader20 = enhancer19.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = enhancer19.getStrategy();
        enhancer12.setStrategy(generatorStrategy21);
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader24 = enhancer23.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = enhancer23.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        enhancer26.setUseCache(true);
        boolean boolean30 = enhancer26.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer31.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader35 = enhancer31.getClassLoader();
        java.lang.Class class36 = null;
        enhancer31.setSuperclass(class36);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader39 = enhancer38.getClassLoader();
        enhancer38.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader43 = enhancer42.getClassLoader();
        enhancer38.setClassLoader(classLoader43);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = enhancer38.getStrategy();
        java.lang.Class<?> wildcardClass46 = enhancer38.getClass();
        enhancer31.setSuperclass((java.lang.Class) wildcardClass46);
        enhancer26.setSuperclass((java.lang.Class) wildcardClass46);
        enhancer23.setSuperclass((java.lang.Class) wildcardClass46);
        org.mockito.cglib.proxy.Callback callback50 = null;
        enhancer23.setCallback(callback50);
        org.mockito.cglib.proxy.Enhancer enhancer52 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader53 = enhancer52.getClassLoader();
        enhancer52.setInterceptDuringConstruction(true);
        boolean boolean56 = enhancer52.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = enhancer52.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer58 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader59 = enhancer58.getClassLoader();
        enhancer58.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader62 = enhancer58.getClassLoader();
        org.mockito.cglib.proxy.Callback callback63 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray64 = new org.mockito.cglib.proxy.Callback[] { callback63 };
        enhancer58.setCallbacks(callbackArray64);
        enhancer52.setCallbacks(callbackArray64);
        enhancer23.setCallbacks(callbackArray64);
        enhancer12.setCallbacks(callbackArray64);
        org.mockito.cglib.proxy.Enhancer enhancer69 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader70 = enhancer69.getClassLoader();
        enhancer69.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader73 = enhancer69.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer74 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader75 = enhancer74.getClassLoader();
        enhancer74.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader78 = enhancer74.getClassLoader();
        org.mockito.cglib.proxy.Callback callback79 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray80 = new org.mockito.cglib.proxy.Callback[] { callback79 };
        enhancer74.setCallbacks(callbackArray80);
        enhancer69.setCallbacks(callbackArray80);
        org.mockito.cglib.proxy.Enhancer enhancer83 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader84 = enhancer83.getClassLoader();
        enhancer83.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader87 = enhancer83.getClassLoader();
        enhancer69.setClassLoader(classLoader87);
        enhancer12.setClassLoader(classLoader87);
        org.mockito.cglib.core.NamingPolicy namingPolicy90 = enhancer12.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy90);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter92 = null;
        enhancer0.setCallbackFilter(callbackFilter92);
        java.lang.ClassLoader classLoader94 = enhancer0.getClassLoader();
        java.lang.Class<?> wildcardClass95 = enhancer0.getClass();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertNotNull(callbackArray64);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(classLoader73);
        org.junit.Assert.assertNotNull(classLoader75);
        org.junit.Assert.assertNotNull(classLoader78);
        org.junit.Assert.assertNotNull(callbackArray80);
        org.junit.Assert.assertNotNull(classLoader84);
        org.junit.Assert.assertNotNull(classLoader87);
        org.junit.Assert.assertNotNull(namingPolicy90);
        org.junit.Assert.assertNotNull(classLoader94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test09698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09698");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader11 = enhancer7.getClassLoader();
        java.lang.Class class12 = null;
        enhancer7.setSuperclass(class12);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        enhancer14.setClassLoader(classLoader19);
        enhancer14.setUseCache(false);
        java.lang.ClassLoader classLoader23 = enhancer14.getClassLoader();
        enhancer7.setClassLoader(classLoader23);
        enhancer0.setClassLoader(classLoader23);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = enhancer0.getStrategy();
        enhancer0.setAttemptLoad(true);
        org.mockito.asm.ClassVisitor classVisitor29 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(generatorStrategy26);
    }

    @Test
    public void test09699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09699");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Callback callback5 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray6 = new org.mockito.cglib.proxy.Callback[] { callback5 };
        enhancer0.setCallbacks(callbackArray6);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        enhancer8.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader12 = enhancer8.getClassLoader();
        java.lang.Class class13 = null;
        enhancer8.setSuperclass(class13);
        java.lang.Class<?> wildcardClass15 = enhancer8.getClass();
        boolean boolean16 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass15);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass15);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        enhancer18.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer18.setClassLoader(classLoader23);
        enhancer18.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader28 = enhancer27.getClassLoader();
        enhancer27.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer27.setClassLoader(classLoader32);
        enhancer27.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = enhancer27.getNamingPolicy();
        enhancer18.setNamingPolicy(namingPolicy36);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader39 = enhancer38.getClassLoader();
        enhancer38.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader42 = enhancer38.getClassLoader();
        java.lang.Class class43 = null;
        enhancer38.setSuperclass(class43);
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader46 = enhancer45.getClassLoader();
        enhancer45.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader50 = enhancer49.getClassLoader();
        enhancer45.setClassLoader(classLoader50);
        enhancer45.setUseCache(false);
        java.lang.ClassLoader classLoader54 = enhancer45.getClassLoader();
        enhancer38.setClassLoader(classLoader54);
        boolean boolean56 = namingPolicy36.equals((java.lang.Object) enhancer38);
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader58 = enhancer57.getClassLoader();
        enhancer57.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer61 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader62 = enhancer61.getClassLoader();
        enhancer57.setClassLoader(classLoader62);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = enhancer57.getStrategy();
        enhancer57.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer67 = new org.mockito.cglib.proxy.Enhancer();
        enhancer67.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = enhancer67.getStrategy();
        enhancer57.setStrategy(generatorStrategy70);
        enhancer38.setStrategy(generatorStrategy70);
        enhancer0.setStrategy(generatorStrategy70);
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer77 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader78 = enhancer77.getClassLoader();
        enhancer77.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer81 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader82 = enhancer81.getClassLoader();
        enhancer77.setClassLoader(classLoader82);
        enhancer77.setSerialVersionUID((java.lang.Long) 100L);
        enhancer77.setUseCache(false);
        org.mockito.cglib.core.Predicate predicate88 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str89 = namingPolicy74.getClassName("hi!", "", (java.lang.Object) enhancer77, predicate88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(callbackArray6);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertNotNull(classLoader78);
        org.junit.Assert.assertNotNull(classLoader82);
    }

    @Test
    public void test09700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09700");
        java.lang.Class class0 = null;
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader2 = enhancer1.getClassLoader();
        enhancer1.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        enhancer1.setClassLoader(classLoader6);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        enhancer8.setInterceptDuringConstruction(true);
        boolean boolean12 = enhancer8.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = enhancer8.getStrategy();
        java.lang.Class[] classArray14 = new java.lang.Class[] {};
        enhancer8.setInterfaces(classArray14);
        enhancer1.setInterfaces(classArray14);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        enhancer17.setUseCache(true);
        boolean boolean21 = enhancer17.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = null;
        enhancer17.setNamingPolicy(namingPolicy22);
        java.lang.ClassLoader classLoader24 = enhancer17.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer25.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer25.setClassLoader(classLoader30);
        enhancer25.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        enhancer34.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader38 = enhancer34.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader40 = enhancer39.getClassLoader();
        enhancer39.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader43 = enhancer39.getClassLoader();
        org.mockito.cglib.proxy.Callback callback44 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray45 = new org.mockito.cglib.proxy.Callback[] { callback44 };
        enhancer39.setCallbacks(callbackArray45);
        enhancer34.setCallbacks(callbackArray45);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = enhancer34.getStrategy();
        org.mockito.cglib.proxy.Callback callback49 = null;
        enhancer34.setCallback(callback49);
        org.mockito.cglib.proxy.Enhancer enhancer51 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader52 = enhancer51.getClassLoader();
        enhancer51.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        enhancer51.setClassLoader(classLoader56);
        org.mockito.cglib.proxy.Enhancer enhancer58 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader59 = enhancer58.getClassLoader();
        enhancer58.setInterceptDuringConstruction(true);
        boolean boolean62 = enhancer58.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = enhancer58.getStrategy();
        java.lang.Class[] classArray64 = new java.lang.Class[] {};
        enhancer58.setInterfaces(classArray64);
        enhancer51.setInterfaces(classArray64);
        enhancer34.setInterfaces(classArray64);
        enhancer25.setInterfaces(classArray64);
        enhancer17.setInterfaces(classArray64);
        enhancer1.setInterfaces(classArray64);
        java.util.List list71 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.getMethods(class0, classArray64, list71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(callbackArray45);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertNotNull(classArray64);
    }

    @Test
    public void test09701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09701");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader3 = enhancer2.getClassLoader();
        enhancer2.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader7 = enhancer6.getClassLoader();
        enhancer2.setClassLoader(classLoader7);
        enhancer2.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer11.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        enhancer11.setClassLoader(classLoader16);
        enhancer11.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = enhancer11.getNamingPolicy();
        enhancer2.setNamingPolicy(namingPolicy20);
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer22.setInterceptDuringConstruction(true);
        boolean boolean26 = namingPolicy20.equals((java.lang.Object) enhancer22);
        enhancer0.setNamingPolicy(namingPolicy20);
        java.lang.ClassLoader classLoader28 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer29.setInterceptDuringConstruction(true);
        boolean boolean33 = enhancer29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = enhancer29.getStrategy();
        boolean boolean36 = generatorStrategy34.equals((java.lang.Object) (short) -1);
        enhancer0.setStrategy(generatorStrategy34);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = enhancer0.getStrategy();
        java.lang.ClassLoader classLoader39 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader42 = enhancer41.getClassLoader();
        enhancer41.setInterceptDuringConstruction(true);
        boolean boolean45 = enhancer41.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = enhancer41.getNamingPolicy();
        java.lang.Object obj47 = null;
        boolean boolean48 = namingPolicy46.equals(obj47);
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader50 = enhancer49.getClassLoader();
        boolean boolean51 = enhancer49.getAttemptLoad();
        enhancer49.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Callback callback54 = null;
        enhancer49.setCallback(callback54);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = enhancer49.getStrategy();
        org.mockito.cglib.proxy.Callback callback57 = null;
        enhancer49.setCallback(callback57);
        boolean boolean59 = namingPolicy46.equals((java.lang.Object) enhancer49);
        java.lang.ClassLoader classLoader60 = enhancer49.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray61 = generatorStrategy40.generate((org.mockito.cglib.core.ClassGenerator) enhancer49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(classLoader60);
    }

    @Test
    public void test09702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09702");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader2 = enhancer1.getClassLoader();
        enhancer1.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        enhancer1.setClassLoader(classLoader6);
        enhancer0.setClassLoader(classLoader6);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader13 = enhancer9.getClassLoader();
        enhancer0.setClassLoader(classLoader13);
        boolean boolean15 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        enhancer16.setInterceptDuringConstruction(true);
        boolean boolean20 = enhancer16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = enhancer16.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer22.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader26 = enhancer22.getClassLoader();
        org.mockito.cglib.proxy.Callback callback27 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray28 = new org.mockito.cglib.proxy.Callback[] { callback27 };
        enhancer22.setCallbacks(callbackArray28);
        enhancer16.setCallbacks(callbackArray28);
        enhancer0.setCallbacks(callbackArray28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader34 = enhancer33.getClassLoader();
        enhancer33.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        enhancer33.setClassLoader(classLoader38);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter40 = null;
        enhancer33.setCallbackFilter(callbackFilter40);
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader43 = enhancer42.getClassLoader();
        enhancer42.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader47 = enhancer46.getClassLoader();
        enhancer42.setClassLoader(classLoader47);
        enhancer42.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer51 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader52 = enhancer51.getClassLoader();
        enhancer51.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        enhancer51.setClassLoader(classLoader56);
        enhancer51.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = enhancer51.getNamingPolicy();
        enhancer42.setNamingPolicy(namingPolicy60);
        enhancer33.setNamingPolicy(namingPolicy60);
        org.mockito.cglib.proxy.Callback callback63 = null;
        enhancer33.setCallback(callback63);
        java.lang.ClassLoader classLoader65 = enhancer33.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer66 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader67 = enhancer66.getClassLoader();
        enhancer66.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader70 = enhancer66.getClassLoader();
        java.lang.Class class71 = null;
        enhancer66.setSuperclass(class71);
        java.lang.ClassLoader classLoader73 = enhancer66.getClassLoader();
        boolean boolean74 = enhancer66.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer75 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader76 = enhancer75.getClassLoader();
        enhancer75.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader79 = enhancer75.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer80 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader81 = enhancer80.getClassLoader();
        enhancer80.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader84 = enhancer80.getClassLoader();
        org.mockito.cglib.proxy.Callback callback85 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray86 = new org.mockito.cglib.proxy.Callback[] { callback85 };
        enhancer80.setCallbacks(callbackArray86);
        enhancer75.setCallbacks(callbackArray86);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy89 = enhancer75.getStrategy();
        enhancer66.setStrategy(generatorStrategy89);
        boolean boolean91 = enhancer66.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy92 = enhancer66.getStrategy();
        enhancer33.setStrategy(generatorStrategy92);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray94 = generatorStrategy32.generate((org.mockito.cglib.core.ClassGenerator) enhancer33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(callbackArray28);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(classLoader67);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(classLoader73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertNotNull(classLoader79);
        org.junit.Assert.assertNotNull(classLoader81);
        org.junit.Assert.assertNotNull(classLoader84);
        org.junit.Assert.assertNotNull(callbackArray86);
        org.junit.Assert.assertNotNull(generatorStrategy89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(generatorStrategy92);
    }

    @Test
    public void test09703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09703");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setUseFactory(false);
        org.mockito.cglib.proxy.Callback callback3 = null;
        enhancer0.setCallback(callback3);
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        enhancer8.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        enhancer8.setClassLoader(classLoader13);
        enhancer7.setClassLoader(classLoader13);
        enhancer5.setClassLoader(classLoader13);
        enhancer0.setClassLoader(classLoader13);
        java.lang.ClassLoader classLoader18 = enhancer0.getClassLoader();
        enhancer0.setUseFactory(true);
        enhancer0.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        enhancer26.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader31 = enhancer30.getClassLoader();
        enhancer26.setClassLoader(classLoader31);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = enhancer26.getStrategy();
        enhancer26.setInterceptDuringConstruction(true);
        enhancer26.setAttemptLoad(false);
        enhancer26.setSerialVersionUID((java.lang.Long) 1L);
        enhancer26.setAttemptLoad(true);
        enhancer26.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader45 = enhancer44.getClassLoader();
        enhancer44.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader48 = enhancer44.getClassLoader();
        java.lang.Class class49 = null;
        enhancer44.setSuperclass(class49);
        org.mockito.cglib.proxy.Enhancer enhancer51 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader52 = enhancer51.getClassLoader();
        enhancer51.setInterceptDuringConstruction(true);
        boolean boolean55 = enhancer51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = enhancer51.getStrategy();
        enhancer44.setStrategy(generatorStrategy56);
        org.mockito.cglib.proxy.Enhancer enhancer58 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader59 = enhancer58.getClassLoader();
        enhancer58.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader62 = enhancer58.getClassLoader();
        java.lang.Class class63 = null;
        enhancer58.setSuperclass(class63);
        org.mockito.cglib.proxy.Enhancer enhancer65 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader66 = enhancer65.getClassLoader();
        enhancer65.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer69 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader70 = enhancer69.getClassLoader();
        enhancer65.setClassLoader(classLoader70);
        enhancer65.setUseCache(false);
        java.lang.ClassLoader classLoader74 = enhancer65.getClassLoader();
        enhancer58.setClassLoader(classLoader74);
        boolean boolean76 = generatorStrategy56.equals((java.lang.Object) enhancer58);
        org.mockito.cglib.proxy.Callback callback77 = null;
        enhancer58.setCallback(callback77);
        java.lang.ClassLoader classLoader79 = enhancer58.getClassLoader();
        enhancer26.setClassLoader(classLoader79);
        enhancer26.setSerialVersionUID((java.lang.Long) 0L);
        enhancer26.setAttemptLoad(false);
        org.mockito.cglib.core.Predicate predicate85 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str86 = namingPolicy23.getClassName("hi!", "", (java.lang.Object) false, predicate85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(classLoader79);
    }

    @Test
    public void test09704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09704");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer7.setClassLoader(classLoader12);
        enhancer7.setUseCache(false);
        java.lang.ClassLoader classLoader16 = enhancer7.getClassLoader();
        enhancer0.setClassLoader(classLoader16);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        enhancer18.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader22 = enhancer18.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer18.getStrategy();
        enhancer0.setStrategy(generatorStrategy23);
        boolean boolean25 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = enhancer26.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer29.setUseCache(true);
        boolean boolean33 = enhancer29.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        enhancer34.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader38 = enhancer34.getClassLoader();
        java.lang.Class class39 = null;
        enhancer34.setSuperclass(class39);
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader42 = enhancer41.getClassLoader();
        enhancer41.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader46 = enhancer45.getClassLoader();
        enhancer41.setClassLoader(classLoader46);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = enhancer41.getStrategy();
        java.lang.Class<?> wildcardClass49 = enhancer41.getClass();
        enhancer34.setSuperclass((java.lang.Class) wildcardClass49);
        enhancer29.setSuperclass((java.lang.Class) wildcardClass49);
        enhancer26.setSuperclass((java.lang.Class) wildcardClass49);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass49);
        boolean boolean54 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter55 = null;
        enhancer0.setCallbackFilter(callbackFilter55);
        enhancer0.setAttemptLoad(true);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test09705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09705");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        java.lang.ClassLoader classLoader7 = enhancer0.getClassLoader();
        boolean boolean8 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader13 = enhancer9.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader18 = enhancer14.getClassLoader();
        org.mockito.cglib.proxy.Callback callback19 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray20 = new org.mockito.cglib.proxy.Callback[] { callback19 };
        enhancer14.setCallbacks(callbackArray20);
        enhancer9.setCallbacks(callbackArray20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer9.getStrategy();
        enhancer0.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer25.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer25.setClassLoader(classLoader30);
        enhancer25.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        enhancer34.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader39 = enhancer38.getClassLoader();
        enhancer34.setClassLoader(classLoader39);
        enhancer34.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = enhancer34.getNamingPolicy();
        enhancer25.setNamingPolicy(namingPolicy43);
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader46 = enhancer45.getClassLoader();
        enhancer45.setInterceptDuringConstruction(true);
        boolean boolean49 = namingPolicy43.equals((java.lang.Object) enhancer45);
        java.lang.ClassLoader classLoader50 = enhancer45.getClassLoader();
        enhancer0.setClassLoader(classLoader50);
        org.mockito.cglib.proxy.Enhancer enhancer52 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer53 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader54 = enhancer53.getClassLoader();
        enhancer53.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader58 = enhancer57.getClassLoader();
        enhancer53.setClassLoader(classLoader58);
        enhancer52.setClassLoader(classLoader58);
        org.mockito.cglib.proxy.Enhancer enhancer61 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader62 = enhancer61.getClassLoader();
        enhancer61.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader65 = enhancer61.getClassLoader();
        enhancer52.setClassLoader(classLoader65);
        enhancer0.setClassLoader(classLoader65);
        org.mockito.cglib.proxy.Callback callback68 = null;
        enhancer0.setCallback(callback68);
        enhancer0.setUseFactory(true);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer75 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader76 = enhancer75.getClassLoader();
        enhancer75.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader79 = enhancer75.getClassLoader();
        org.mockito.cglib.proxy.Callback callback80 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray81 = new org.mockito.cglib.proxy.Callback[] { callback80 };
        enhancer75.setCallbacks(callbackArray81);
        enhancer75.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy85 = enhancer75.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer86 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader87 = enhancer86.getClassLoader();
        enhancer86.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader90 = enhancer86.getClassLoader();
        java.lang.Class class91 = null;
        enhancer86.setSuperclass(class91);
        java.lang.Class<?> wildcardClass93 = enhancer86.getClass();
        boolean boolean94 = generatorStrategy85.equals((java.lang.Object) wildcardClass93);
        boolean boolean95 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass93);
        boolean boolean96 = generatorStrategy74.equals((java.lang.Object) boolean95);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(callbackArray20);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(generatorStrategy74);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertNotNull(classLoader79);
        org.junit.Assert.assertNotNull(callbackArray81);
        org.junit.Assert.assertNotNull(generatorStrategy85);
        org.junit.Assert.assertNotNull(classLoader87);
        org.junit.Assert.assertNotNull(classLoader90);
        org.junit.Assert.assertNotNull(wildcardClass93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test09706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09706");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback3 = null;
        enhancer0.setCallback(callback3);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        enhancer8.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        enhancer8.setClassLoader(classLoader13);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = enhancer8.getStrategy();
        java.lang.Class<?> wildcardClass16 = enhancer8.getClass();
        boolean boolean17 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass16);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass16);
        boolean boolean19 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer21.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer21.setClassLoader(classLoader26);
        enhancer20.setClassLoader(classLoader26);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer29.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader33 = enhancer29.getClassLoader();
        enhancer20.setClassLoader(classLoader33);
        boolean boolean35 = enhancer20.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        enhancer36.setInterceptDuringConstruction(true);
        boolean boolean40 = enhancer36.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = enhancer36.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader43 = enhancer42.getClassLoader();
        enhancer42.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader46 = enhancer42.getClassLoader();
        org.mockito.cglib.proxy.Callback callback47 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray48 = new org.mockito.cglib.proxy.Callback[] { callback47 };
        enhancer42.setCallbacks(callbackArray48);
        enhancer36.setCallbacks(callbackArray48);
        enhancer20.setCallbacks(callbackArray48);
        enhancer20.setUseFactory(false);
        java.lang.Class<?> wildcardClass54 = enhancer20.getClass();
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackType((java.lang.Class) wildcardClass54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Unknown callback type class org.mockito.cglib.proxy.Enhancer");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(callbackArray48);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test09707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09707");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        boolean boolean4 = enhancer0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader7 = enhancer6.getClassLoader();
        enhancer6.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader10 = enhancer6.getClassLoader();
        org.mockito.cglib.proxy.Callback callback11 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray12 = new org.mockito.cglib.proxy.Callback[] { callback11 };
        enhancer6.setCallbacks(callbackArray12);
        enhancer0.setCallbacks(callbackArray12);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter15 = null;
        enhancer0.setCallbackFilter(callbackFilter15);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        enhancer17.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer17.setClassLoader(classLoader22);
        enhancer17.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        enhancer26.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader31 = enhancer30.getClassLoader();
        enhancer26.setClassLoader(classLoader31);
        enhancer26.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = enhancer26.getNamingPolicy();
        enhancer17.setNamingPolicy(namingPolicy35);
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        enhancer37.setUseCache(true);
        boolean boolean41 = enhancer37.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader43 = enhancer42.getClassLoader();
        enhancer42.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader46 = enhancer42.getClassLoader();
        java.lang.Class class47 = null;
        enhancer42.setSuperclass(class47);
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader50 = enhancer49.getClassLoader();
        enhancer49.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer53 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader54 = enhancer53.getClassLoader();
        enhancer49.setClassLoader(classLoader54);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = enhancer49.getStrategy();
        java.lang.Class<?> wildcardClass57 = enhancer49.getClass();
        enhancer42.setSuperclass((java.lang.Class) wildcardClass57);
        enhancer37.setSuperclass((java.lang.Class) wildcardClass57);
        boolean boolean60 = namingPolicy35.equals((java.lang.Object) enhancer37);
        boolean boolean62 = namingPolicy35.equals((java.lang.Object) 'a');
        enhancer0.setNamingPolicy(namingPolicy35);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter64 = null;
        enhancer0.setCallbackFilter(callbackFilter64);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj66 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(callbackArray12);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test09708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09708");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        enhancer0.setSerialVersionUID((java.lang.Long) 1L);
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        enhancer8.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader12 = enhancer8.getClassLoader();
        java.lang.Class class13 = null;
        enhancer8.setSuperclass(class13);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        enhancer15.setInterceptDuringConstruction(true);
        boolean boolean19 = enhancer15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = enhancer15.getStrategy();
        enhancer8.setStrategy(generatorStrategy20);
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer22.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader26 = enhancer22.getClassLoader();
        java.lang.Class class27 = null;
        enhancer22.setSuperclass(class27);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer29.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader34 = enhancer33.getClassLoader();
        enhancer29.setClassLoader(classLoader34);
        enhancer29.setUseCache(false);
        java.lang.ClassLoader classLoader38 = enhancer29.getClassLoader();
        enhancer22.setClassLoader(classLoader38);
        boolean boolean40 = generatorStrategy20.equals((java.lang.Object) enhancer22);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = enhancer22.getNamingPolicy();
        boolean boolean42 = enhancer22.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = null;
        enhancer22.setNamingPolicy(namingPolicy43);
        boolean boolean45 = enhancer22.getAttemptLoad();
        enhancer22.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        enhancer48.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer52 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader53 = enhancer52.getClassLoader();
        enhancer48.setClassLoader(classLoader53);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = enhancer48.getStrategy();
        java.lang.Class<?> wildcardClass56 = enhancer48.getClass();
        boolean boolean57 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass56);
        boolean boolean58 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass56);
        boolean boolean59 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass56);
        enhancer22.setSuperclass((java.lang.Class) wildcardClass56);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass56);
        enhancer0.setAttemptLoad(true);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test09709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09709");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        enhancer0.setStrategy(generatorStrategy9);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer11.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        enhancer11.setClassLoader(classLoader16);
        enhancer11.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer20.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        enhancer20.setClassLoader(classLoader25);
        enhancer20.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = enhancer20.getNamingPolicy();
        enhancer11.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer31.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader35 = enhancer31.getClassLoader();
        java.lang.Class class36 = null;
        enhancer31.setSuperclass(class36);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader39 = enhancer38.getClassLoader();
        enhancer38.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader43 = enhancer42.getClassLoader();
        enhancer38.setClassLoader(classLoader43);
        enhancer38.setUseCache(false);
        java.lang.ClassLoader classLoader47 = enhancer38.getClassLoader();
        enhancer31.setClassLoader(classLoader47);
        boolean boolean49 = namingPolicy29.equals((java.lang.Object) enhancer31);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = enhancer31.getStrategy();
        enhancer0.setStrategy(generatorStrategy50);
        org.mockito.cglib.proxy.Enhancer enhancer52 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader53 = enhancer52.getClassLoader();
        enhancer52.setInterceptDuringConstruction(true);
        boolean boolean56 = enhancer52.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = enhancer52.getStrategy();
        java.lang.Class[] classArray58 = new java.lang.Class[] {};
        enhancer52.setInterfaces(classArray58);
        enhancer0.setInterfaces(classArray58);
        enhancer0.setUseFactory(false);
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer65 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader66 = enhancer65.getClassLoader();
        enhancer65.setUseCache(true);
        boolean boolean69 = enhancer65.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer70 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader71 = enhancer70.getClassLoader();
        enhancer70.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader74 = enhancer70.getClassLoader();
        java.lang.Class class75 = null;
        enhancer70.setSuperclass(class75);
        java.lang.Class<?> wildcardClass77 = enhancer70.getClass();
        enhancer65.setSuperclass((java.lang.Class) wildcardClass77);
        boolean boolean79 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass77);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass77);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy82 = enhancer0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy83 = enhancer0.getNamingPolicy();
        java.lang.ClassLoader classLoader84 = enhancer0.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class85 = enhancer0.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback types are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertNotNull(namingPolicy82);
        org.junit.Assert.assertNotNull(namingPolicy83);
        org.junit.Assert.assertNotNull(classLoader84);
    }

    @Test
    public void test09710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09710");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        java.lang.ClassLoader classLoader7 = enhancer0.getClassLoader();
        boolean boolean8 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader13 = enhancer9.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader18 = enhancer14.getClassLoader();
        org.mockito.cglib.proxy.Callback callback19 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray20 = new org.mockito.cglib.proxy.Callback[] { callback19 };
        enhancer14.setCallbacks(callbackArray20);
        enhancer9.setCallbacks(callbackArray20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer9.getStrategy();
        enhancer0.setStrategy(generatorStrategy23);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = enhancer0.getNamingPolicy();
        java.lang.ClassLoader classLoader26 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        enhancer27.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = enhancer27.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = enhancer27.getNamingPolicy();
        java.lang.Class<?> wildcardClass32 = namingPolicy31.getClass();
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackType((java.lang.Class) wildcardClass32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Unknown callback type class org.mockito.cglib.core.DefaultNamingPolicy");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(callbackArray20);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test09711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09711");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Object obj6 = null;
        boolean boolean7 = generatorStrategy5.equals(obj6);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        enhancer8.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader12 = enhancer8.getClassLoader();
        org.mockito.cglib.proxy.Callback callback13 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray14 = new org.mockito.cglib.proxy.Callback[] { callback13 };
        enhancer8.setCallbacks(callbackArray14);
        enhancer8.setSerialVersionUID((java.lang.Long) 0L);
        enhancer8.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer20.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader24 = enhancer20.getClassLoader();
        org.mockito.cglib.proxy.Callback callback25 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray26 = new org.mockito.cglib.proxy.Callback[] { callback25 };
        enhancer20.setCallbacks(callbackArray26);
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader29 = enhancer28.getClassLoader();
        enhancer28.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader32 = enhancer28.getClassLoader();
        java.lang.Class class33 = null;
        enhancer28.setSuperclass(class33);
        java.lang.Class<?> wildcardClass35 = enhancer28.getClass();
        boolean boolean36 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass35);
        enhancer20.setSuperclass((java.lang.Class) wildcardClass35);
        enhancer8.setSuperclass((java.lang.Class) wildcardClass35);
        boolean boolean39 = generatorStrategy5.equals((java.lang.Object) enhancer8);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter40 = null;
        enhancer8.setCallbackFilter(callbackFilter40);
        java.lang.Class<?> wildcardClass42 = enhancer8.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader44 = enhancer43.getClassLoader();
        boolean boolean45 = enhancer43.getAttemptLoad();
        enhancer43.setSerialVersionUID((java.lang.Long) 10L);
        enhancer43.setAttemptLoad(false);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter50 = null;
        enhancer43.setCallbackFilter(callbackFilter50);
        org.mockito.cglib.proxy.Enhancer enhancer52 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader53 = enhancer52.getClassLoader();
        enhancer52.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader57 = enhancer56.getClassLoader();
        enhancer52.setClassLoader(classLoader57);
        enhancer52.setUseCache(false);
        java.lang.ClassLoader classLoader61 = enhancer52.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer62 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader63 = enhancer62.getClassLoader();
        enhancer62.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader66 = enhancer62.getClassLoader();
        org.mockito.cglib.proxy.Callback callback67 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray68 = new org.mockito.cglib.proxy.Callback[] { callback67 };
        enhancer62.setCallbacks(callbackArray68);
        enhancer62.setSerialVersionUID((java.lang.Long) 0L);
        enhancer62.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.proxy.Enhancer enhancer74 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader75 = enhancer74.getClassLoader();
        enhancer74.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader78 = enhancer74.getClassLoader();
        org.mockito.cglib.proxy.Callback callback79 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray80 = new org.mockito.cglib.proxy.Callback[] { callback79 };
        enhancer74.setCallbacks(callbackArray80);
        org.mockito.cglib.proxy.Enhancer enhancer82 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader83 = enhancer82.getClassLoader();
        enhancer82.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader86 = enhancer82.getClassLoader();
        java.lang.Class class87 = null;
        enhancer82.setSuperclass(class87);
        java.lang.Class<?> wildcardClass89 = enhancer82.getClass();
        boolean boolean90 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass89);
        enhancer74.setSuperclass((java.lang.Class) wildcardClass89);
        enhancer62.setSuperclass((java.lang.Class) wildcardClass89);
        java.lang.Class[] classArray93 = new java.lang.Class[] { wildcardClass89 };
        enhancer52.setInterfaces(classArray93);
        enhancer43.setInterfaces(classArray93);
        org.mockito.cglib.proxy.Callback callback96 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj97 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass42, classArray93, callback96);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(callbackArray14);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(callbackArray26);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertNotNull(classLoader63);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertNotNull(callbackArray68);
        org.junit.Assert.assertNotNull(classLoader75);
        org.junit.Assert.assertNotNull(classLoader78);
        org.junit.Assert.assertNotNull(callbackArray80);
        org.junit.Assert.assertNotNull(classLoader83);
        org.junit.Assert.assertNotNull(classLoader86);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(classArray93);
    }

    @Test
    public void test09712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09712");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setUseFactory(false);
        org.mockito.cglib.proxy.Callback callback3 = null;
        enhancer0.setCallback(callback3);
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        enhancer8.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        enhancer8.setClassLoader(classLoader13);
        enhancer7.setClassLoader(classLoader13);
        enhancer5.setClassLoader(classLoader13);
        enhancer0.setClassLoader(classLoader13);
        java.lang.ClassLoader classLoader18 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter19 = null;
        enhancer0.setCallbackFilter(callbackFilter19);
        org.mockito.cglib.proxy.Callback callback21 = null;
        enhancer0.setCallback(callback21);
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader24 = enhancer23.getClassLoader();
        enhancer23.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader27 = enhancer23.getClassLoader();
        java.lang.Class class28 = null;
        enhancer23.setSuperclass(class28);
        enhancer23.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        enhancer32.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        enhancer32.setClassLoader(classLoader37);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = enhancer32.getStrategy();
        enhancer23.setStrategy(generatorStrategy39);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = enhancer23.getStrategy();
        enhancer0.setStrategy(generatorStrategy41);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(generatorStrategy41);
    }

    @Test
    public void test09713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09713");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader2 = enhancer1.getClassLoader();
        enhancer1.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        enhancer1.setClassLoader(classLoader6);
        enhancer0.setClassLoader(classLoader6);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader13 = enhancer9.getClassLoader();
        enhancer0.setClassLoader(classLoader13);
        boolean boolean15 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        enhancer16.setInterceptDuringConstruction(true);
        boolean boolean20 = enhancer16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = enhancer16.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer22.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader26 = enhancer22.getClassLoader();
        org.mockito.cglib.proxy.Callback callback27 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray28 = new org.mockito.cglib.proxy.Callback[] { callback27 };
        enhancer22.setCallbacks(callbackArray28);
        enhancer16.setCallbacks(callbackArray28);
        enhancer0.setCallbacks(callbackArray28);
        java.lang.Class<?> wildcardClass32 = callbackArray28.getClass();
        boolean boolean33 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass32);
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        enhancer34.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader38 = enhancer34.getClassLoader();
        org.mockito.cglib.proxy.Callback callback39 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray40 = new org.mockito.cglib.proxy.Callback[] { callback39 };
        enhancer34.setCallbacks(callbackArray40);
        enhancer34.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = enhancer34.getStrategy();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter45 = null;
        enhancer34.setCallbackFilter(callbackFilter45);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = enhancer34.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        enhancer48.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer52 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader53 = enhancer52.getClassLoader();
        enhancer48.setClassLoader(classLoader53);
        enhancer48.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = enhancer48.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer58 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader59 = enhancer58.getClassLoader();
        enhancer58.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader62 = enhancer58.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer63 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader64 = enhancer63.getClassLoader();
        enhancer63.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader67 = enhancer63.getClassLoader();
        org.mockito.cglib.proxy.Callback callback68 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray69 = new org.mockito.cglib.proxy.Callback[] { callback68 };
        enhancer63.setCallbacks(callbackArray69);
        enhancer58.setCallbacks(callbackArray69);
        enhancer48.setCallbacks(callbackArray69);
        enhancer34.setCallbacks(callbackArray69);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerStaticCallbacks((java.lang.Class) wildcardClass32, callbackArray69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class [Lorg.mockito.cglib.proxy.Callback; is not an enhanced class");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(callbackArray28);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(callbackArray40);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertNotNull(classLoader67);
        org.junit.Assert.assertNotNull(callbackArray69);
    }

    @Test
    public void test09714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09714");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer9.setClassLoader(classLoader14);
        enhancer9.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer9.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy18);
        enhancer0.setInterceptDuringConstruction(true);
        boolean boolean22 = enhancer0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        enhancer24.setInterceptDuringConstruction(true);
        enhancer24.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader31 = enhancer30.getClassLoader();
        enhancer30.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        enhancer30.setClassLoader(classLoader35);
        enhancer30.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = enhancer30.getNamingPolicy();
        boolean boolean40 = enhancer30.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader42 = enhancer41.getClassLoader();
        enhancer41.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader45 = enhancer41.getClassLoader();
        java.lang.Class class46 = null;
        enhancer41.setSuperclass(class46);
        java.lang.ClassLoader classLoader48 = enhancer41.getClassLoader();
        enhancer30.setClassLoader(classLoader48);
        enhancer30.setSerialVersionUID((java.lang.Long) (-1L));
        enhancer30.setSerialVersionUID((java.lang.Long) 1L);
        java.lang.ClassLoader classLoader54 = enhancer30.getClassLoader();
        enhancer24.setClassLoader(classLoader54);
        enhancer0.setClassLoader(classLoader54);
        java.lang.ClassLoader classLoader57 = enhancer0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = enhancer0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor59 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertNotNull(namingPolicy58);
    }

    @Test
    public void test09715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09715");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer9.setClassLoader(classLoader14);
        enhancer9.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer9.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer20.setUseCache(true);
        boolean boolean24 = enhancer20.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer25.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader29 = enhancer25.getClassLoader();
        java.lang.Class class30 = null;
        enhancer25.setSuperclass(class30);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        enhancer32.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        enhancer32.setClassLoader(classLoader37);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = enhancer32.getStrategy();
        java.lang.Class<?> wildcardClass40 = enhancer32.getClass();
        enhancer25.setSuperclass((java.lang.Class) wildcardClass40);
        enhancer20.setSuperclass((java.lang.Class) wildcardClass40);
        boolean boolean43 = namingPolicy18.equals((java.lang.Object) enhancer20);
        enhancer20.setUseFactory(false);
        java.lang.ClassLoader classLoader46 = enhancer20.getClassLoader();
        enhancer20.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader50 = enhancer49.getClassLoader();
        enhancer49.setInterceptDuringConstruction(true);
        boolean boolean53 = enhancer49.getUseCache();
        boolean boolean54 = enhancer49.getAttemptLoad();
        enhancer49.setUseCache(true);
        enhancer49.setUseCache(true);
        java.lang.ClassLoader classLoader59 = enhancer49.getClassLoader();
        enhancer20.setClassLoader(classLoader59);
        org.mockito.asm.ClassVisitor classVisitor61 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer20.generateClass(classVisitor61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(classLoader59);
    }

    @Test
    public void test09716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09716");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer9.setClassLoader(classLoader14);
        enhancer9.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer9.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer20.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader24 = enhancer20.getClassLoader();
        java.lang.Class class25 = null;
        enhancer20.setSuperclass(class25);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader28 = enhancer27.getClassLoader();
        enhancer27.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer27.setClassLoader(classLoader32);
        enhancer27.setUseCache(false);
        java.lang.ClassLoader classLoader36 = enhancer27.getClassLoader();
        enhancer20.setClassLoader(classLoader36);
        boolean boolean38 = namingPolicy18.equals((java.lang.Object) enhancer20);
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader40 = enhancer39.getClassLoader();
        enhancer39.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader43 = enhancer39.getClassLoader();
        java.lang.Class class44 = null;
        enhancer39.setSuperclass(class44);
        java.lang.ClassLoader classLoader46 = enhancer39.getClassLoader();
        boolean boolean47 = enhancer39.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        enhancer48.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader52 = enhancer48.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer53 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader54 = enhancer53.getClassLoader();
        enhancer53.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader57 = enhancer53.getClassLoader();
        org.mockito.cglib.proxy.Callback callback58 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray59 = new org.mockito.cglib.proxy.Callback[] { callback58 };
        enhancer53.setCallbacks(callbackArray59);
        enhancer48.setCallbacks(callbackArray59);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = enhancer48.getStrategy();
        enhancer39.setStrategy(generatorStrategy62);
        org.mockito.cglib.proxy.Enhancer enhancer64 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader65 = enhancer64.getClassLoader();
        enhancer64.setUseCache(true);
        boolean boolean68 = enhancer64.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer69 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader70 = enhancer69.getClassLoader();
        enhancer69.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader73 = enhancer69.getClassLoader();
        java.lang.Class class74 = null;
        enhancer69.setSuperclass(class74);
        org.mockito.cglib.proxy.Enhancer enhancer76 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader77 = enhancer76.getClassLoader();
        enhancer76.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer80 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader81 = enhancer80.getClassLoader();
        enhancer76.setClassLoader(classLoader81);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = enhancer76.getStrategy();
        java.lang.Class<?> wildcardClass84 = enhancer76.getClass();
        enhancer69.setSuperclass((java.lang.Class) wildcardClass84);
        enhancer64.setSuperclass((java.lang.Class) wildcardClass84);
        boolean boolean87 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass84);
        boolean boolean88 = generatorStrategy62.equals((java.lang.Object) wildcardClass84);
        enhancer20.setSuperclass((java.lang.Class) wildcardClass84);
        boolean boolean90 = enhancer20.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy91 = enhancer20.getNamingPolicy();
        enhancer20.setAttemptLoad(true);
        org.mockito.cglib.proxy.Callback callback94 = null;
        enhancer20.setCallback(callback94);
        enhancer20.setSerialVersionUID((java.lang.Long) 1L);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertNotNull(callbackArray59);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(classLoader73);
        org.junit.Assert.assertNotNull(classLoader77);
        org.junit.Assert.assertNotNull(classLoader81);
        org.junit.Assert.assertNotNull(generatorStrategy83);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(namingPolicy91);
    }

    @Test
    public void test09717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09717");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        boolean boolean11 = enhancer7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer7.getStrategy();
        enhancer0.setStrategy(generatorStrategy12);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader18 = enhancer14.getClassLoader();
        java.lang.Class class19 = null;
        enhancer14.setSuperclass(class19);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer21.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer21.setClassLoader(classLoader26);
        enhancer21.setUseCache(false);
        java.lang.ClassLoader classLoader30 = enhancer21.getClassLoader();
        enhancer14.setClassLoader(classLoader30);
        boolean boolean32 = generatorStrategy12.equals((java.lang.Object) enhancer14);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = enhancer14.getNamingPolicy();
        boolean boolean34 = enhancer14.getAttemptLoad();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter35 = null;
        enhancer14.setCallbackFilter(callbackFilter35);
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        enhancer37.setUseCache(true);
        boolean boolean41 = enhancer37.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader43 = enhancer42.getClassLoader();
        enhancer42.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader46 = enhancer42.getClassLoader();
        java.lang.Class class47 = null;
        enhancer42.setSuperclass(class47);
        java.lang.Class<?> wildcardClass49 = enhancer42.getClass();
        enhancer37.setSuperclass((java.lang.Class) wildcardClass49);
        enhancer14.setSuperclass((java.lang.Class) wildcardClass49);
        enhancer14.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = enhancer14.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter57 = null;
        enhancer55.setCallbackFilter(callbackFilter57);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = enhancer55.getStrategy();
        boolean boolean60 = generatorStrategy54.equals((java.lang.Object) generatorStrategy59);
        org.mockito.cglib.core.ClassGenerator classGenerator61 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray62 = generatorStrategy59.generate(classGenerator61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test09718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09718");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        boolean boolean4 = enhancer0.getUseCache();
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        boolean boolean8 = enhancer0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class9 = enhancer0.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback types are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test09719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09719");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader3 = enhancer2.getClassLoader();
        enhancer2.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader7 = enhancer6.getClassLoader();
        enhancer2.setClassLoader(classLoader7);
        enhancer2.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer11.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        enhancer11.setClassLoader(classLoader16);
        enhancer11.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = enhancer11.getNamingPolicy();
        enhancer2.setNamingPolicy(namingPolicy20);
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer22.setInterceptDuringConstruction(true);
        boolean boolean26 = namingPolicy20.equals((java.lang.Object) enhancer22);
        enhancer0.setNamingPolicy(namingPolicy20);
        enhancer0.setUseCache(false);
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader34 = enhancer33.getClassLoader();
        enhancer33.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader37 = enhancer33.getClassLoader();
        java.lang.Class class38 = null;
        enhancer33.setSuperclass(class38);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        enhancer40.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader45 = enhancer44.getClassLoader();
        enhancer40.setClassLoader(classLoader45);
        enhancer40.setUseCache(false);
        java.lang.ClassLoader classLoader49 = enhancer40.getClassLoader();
        enhancer33.setClassLoader(classLoader49);
        org.mockito.cglib.proxy.Enhancer enhancer51 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader52 = enhancer51.getClassLoader();
        enhancer51.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader55 = enhancer51.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = enhancer51.getStrategy();
        enhancer33.setStrategy(generatorStrategy56);
        org.mockito.cglib.proxy.Enhancer enhancer58 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader59 = enhancer58.getClassLoader();
        enhancer58.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer62 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader63 = enhancer62.getClassLoader();
        enhancer58.setClassLoader(classLoader63);
        enhancer58.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = enhancer58.getNamingPolicy();
        enhancer33.setNamingPolicy(namingPolicy67);
        java.lang.Class[] classArray69 = null;
        enhancer33.setInterfaces(classArray69);
        java.lang.Class<?> wildcardClass71 = enhancer33.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass71);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = enhancer0.getStrategy();
        enhancer0.setUseFactory(false);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter78 = null;
        enhancer0.setCallbackFilter(callbackFilter78);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = enhancer0.getStrategy();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(classLoader63);
        org.junit.Assert.assertNotNull(namingPolicy67);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertNotNull(generatorStrategy75);
        org.junit.Assert.assertNotNull(generatorStrategy80);
    }

    @Test
    public void test09720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09720");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer7.setClassLoader(classLoader12);
        enhancer7.setUseCache(false);
        java.lang.ClassLoader classLoader16 = enhancer7.getClassLoader();
        enhancer0.setClassLoader(classLoader16);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        enhancer18.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader22 = enhancer18.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer18.getStrategy();
        enhancer0.setStrategy(generatorStrategy23);
        boolean boolean25 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = enhancer26.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer29.setUseCache(true);
        boolean boolean33 = enhancer29.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        enhancer34.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader38 = enhancer34.getClassLoader();
        java.lang.Class class39 = null;
        enhancer34.setSuperclass(class39);
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader42 = enhancer41.getClassLoader();
        enhancer41.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader46 = enhancer45.getClassLoader();
        enhancer41.setClassLoader(classLoader46);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = enhancer41.getStrategy();
        java.lang.Class<?> wildcardClass49 = enhancer41.getClass();
        enhancer34.setSuperclass((java.lang.Class) wildcardClass49);
        enhancer29.setSuperclass((java.lang.Class) wildcardClass49);
        enhancer26.setSuperclass((java.lang.Class) wildcardClass49);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass49);
        boolean boolean54 = enhancer0.getUseCache();
        enhancer0.setUseFactory(false);
        enhancer0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader59 = enhancer0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = null;
        enhancer0.setNamingPolicy(namingPolicy60);
        java.lang.Class<?> wildcardClass62 = enhancer0.getClass();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test09721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09721");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Callback callback5 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray6 = new org.mockito.cglib.proxy.Callback[] { callback5 };
        enhancer0.setCallbacks(callbackArray6);
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        boolean boolean10 = enhancer0.getUseCache();
        enhancer0.setUseCache(true);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Callback callback16 = null;
        enhancer0.setCallback(callback16);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(callbackArray6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(namingPolicy15);
    }

    @Test
    public void test09722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09722");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = enhancer0.getStrategy();
        enhancer0.setInterceptDuringConstruction(true);
        enhancer0.setAttemptLoad(false);
        enhancer0.setSerialVersionUID((java.lang.Long) 1L);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Callback callback16 = null;
        enhancer0.setCallback(callback16);
        boolean boolean18 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader20 = enhancer19.getClassLoader();
        enhancer19.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader23 = enhancer19.getClassLoader();
        org.mockito.cglib.proxy.Callback callback24 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray25 = new org.mockito.cglib.proxy.Callback[] { callback24 };
        enhancer19.setCallbacks(callbackArray25);
        enhancer19.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = enhancer19.getStrategy();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter30 = null;
        enhancer19.setCallbackFilter(callbackFilter30);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = enhancer19.getStrategy();
        boolean boolean33 = enhancer19.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = enhancer19.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy34);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = enhancer0.getNamingPolicy();
        java.lang.Class<?> wildcardClass37 = enhancer0.getClass();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(callbackArray25);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test09723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09723");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader5 = enhancer0.getClassLoader();
        boolean boolean6 = enhancer0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class7 = enhancer0.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback types are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test09724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09724");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer9.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer9.getStrategy();
        enhancer0.setStrategy(generatorStrategy16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = enhancer0.getStrategy();
        enhancer0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        enhancer0.setNamingPolicy(namingPolicy21);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer25.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader29 = enhancer25.getClassLoader();
        java.lang.Class class30 = null;
        enhancer25.setSuperclass(class30);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        enhancer32.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader36 = enhancer32.getClassLoader();
        java.lang.Class class37 = null;
        enhancer32.setSuperclass(class37);
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader40 = enhancer39.getClassLoader();
        enhancer39.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader44 = enhancer43.getClassLoader();
        enhancer39.setClassLoader(classLoader44);
        enhancer39.setUseCache(false);
        java.lang.ClassLoader classLoader48 = enhancer39.getClassLoader();
        enhancer32.setClassLoader(classLoader48);
        enhancer25.setClassLoader(classLoader48);
        org.mockito.cglib.proxy.Enhancer enhancer51 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader52 = enhancer51.getClassLoader();
        enhancer51.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        enhancer51.setClassLoader(classLoader56);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = enhancer51.getStrategy();
        java.lang.Class<?> wildcardClass59 = enhancer51.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer60 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader61 = enhancer60.getClassLoader();
        enhancer60.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader64 = enhancer60.getClassLoader();
        java.lang.Class class65 = null;
        enhancer60.setSuperclass(class65);
        org.mockito.cglib.proxy.Enhancer enhancer67 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader68 = enhancer67.getClassLoader();
        enhancer67.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer71 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader72 = enhancer71.getClassLoader();
        enhancer67.setClassLoader(classLoader72);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = enhancer67.getStrategy();
        java.lang.Class<?> wildcardClass75 = enhancer67.getClass();
        enhancer60.setSuperclass((java.lang.Class) wildcardClass75);
        java.lang.Class[] classArray77 = new java.lang.Class[] { wildcardClass59, wildcardClass75 };
        enhancer25.setInterfaces(classArray77);
        enhancer0.setInterfaces(classArray77);
        java.lang.ClassLoader classLoader80 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter81 = null;
        enhancer0.setCallbackFilter(callbackFilter81);
        org.mockito.cglib.core.NamingPolicy namingPolicy83 = enhancer0.getNamingPolicy();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertNotNull(classLoader68);
        org.junit.Assert.assertNotNull(classLoader72);
        org.junit.Assert.assertNotNull(generatorStrategy74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(classLoader80);
        org.junit.Assert.assertNotNull(namingPolicy83);
    }

    @Test
    public void test09725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09725");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer7.setClassLoader(classLoader12);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = enhancer7.getStrategy();
        java.lang.Class<?> wildcardClass15 = enhancer7.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass15);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        enhancer17.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer17.setClassLoader(classLoader22);
        enhancer17.setUseCache(false);
        java.lang.ClassLoader classLoader26 = enhancer17.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = enhancer17.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = enhancer17.getNamingPolicy();
        java.lang.ClassLoader classLoader29 = enhancer17.getClassLoader();
        enhancer0.setClassLoader(classLoader29);
        org.mockito.cglib.proxy.Callback callback31 = null;
        enhancer0.setCallback(callback31);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = enhancer0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = enhancer0.getNamingPolicy();
        enhancer0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        enhancer37.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader41 = enhancer37.getClassLoader();
        java.lang.Class class42 = null;
        enhancer37.setSuperclass(class42);
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader45 = enhancer44.getClassLoader();
        enhancer44.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        enhancer44.setClassLoader(classLoader49);
        enhancer44.setUseCache(false);
        java.lang.ClassLoader classLoader53 = enhancer44.getClassLoader();
        enhancer37.setClassLoader(classLoader53);
        java.lang.ClassLoader classLoader55 = enhancer37.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader57 = enhancer56.getClassLoader();
        boolean boolean58 = enhancer56.getAttemptLoad();
        enhancer56.setInterceptDuringConstruction(false);
        enhancer56.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = enhancer56.getStrategy();
        enhancer37.setStrategy(generatorStrategy63);
        enhancer37.setInterceptDuringConstruction(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = enhancer37.getNamingPolicy();
        boolean boolean68 = enhancer37.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = enhancer37.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy69);
        org.mockito.cglib.proxy.Enhancer enhancer71 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader72 = enhancer71.getClassLoader();
        boolean boolean73 = enhancer71.getAttemptLoad();
        enhancer71.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.proxy.Enhancer enhancer76 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader77 = enhancer76.getClassLoader();
        enhancer76.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader80 = enhancer76.getClassLoader();
        java.lang.Class class81 = null;
        enhancer76.setSuperclass(class81);
        org.mockito.cglib.proxy.Enhancer enhancer83 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader84 = enhancer83.getClassLoader();
        enhancer83.setInterceptDuringConstruction(true);
        boolean boolean87 = enhancer83.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy88 = enhancer83.getStrategy();
        enhancer76.setStrategy(generatorStrategy88);
        enhancer71.setStrategy(generatorStrategy88);
        boolean boolean91 = namingPolicy69.equals((java.lang.Object) enhancer71);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertNotNull(namingPolicy67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(classLoader72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(classLoader77);
        org.junit.Assert.assertNotNull(classLoader80);
        org.junit.Assert.assertNotNull(classLoader84);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(generatorStrategy88);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test09726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09726");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Callback callback5 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray6 = new org.mockito.cglib.proxy.Callback[] { callback5 };
        enhancer0.setCallbacks(callbackArray6);
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer11.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader15 = enhancer11.getClassLoader();
        java.lang.Class class16 = null;
        enhancer11.setSuperclass(class16);
        java.lang.Class<?> wildcardClass18 = enhancer11.getClass();
        boolean boolean19 = generatorStrategy10.equals((java.lang.Object) wildcardClass18);
        boolean boolean21 = generatorStrategy10.equals((java.lang.Object) '4');
        boolean boolean23 = generatorStrategy10.equals((java.lang.Object) "");
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        enhancer24.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader28 = enhancer24.getClassLoader();
        java.lang.Class class29 = null;
        enhancer24.setSuperclass(class29);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer31.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        enhancer31.setClassLoader(classLoader36);
        enhancer31.setUseCache(false);
        java.lang.ClassLoader classLoader40 = enhancer31.getClassLoader();
        enhancer24.setClassLoader(classLoader40);
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader43 = enhancer42.getClassLoader();
        enhancer42.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader46 = enhancer42.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = enhancer42.getStrategy();
        enhancer24.setStrategy(generatorStrategy47);
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader50 = enhancer49.getClassLoader();
        enhancer49.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer53 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader54 = enhancer53.getClassLoader();
        enhancer49.setClassLoader(classLoader54);
        enhancer49.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = enhancer49.getNamingPolicy();
        enhancer24.setNamingPolicy(namingPolicy58);
        org.mockito.cglib.proxy.Enhancer enhancer60 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader61 = enhancer60.getClassLoader();
        enhancer60.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader64 = enhancer60.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer65 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader66 = enhancer65.getClassLoader();
        enhancer65.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader69 = enhancer65.getClassLoader();
        org.mockito.cglib.proxy.Callback callback70 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray71 = new org.mockito.cglib.proxy.Callback[] { callback70 };
        enhancer65.setCallbacks(callbackArray71);
        enhancer60.setCallbacks(callbackArray71);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = enhancer60.getStrategy();
        enhancer24.setStrategy(generatorStrategy74);
        boolean boolean76 = generatorStrategy10.equals((java.lang.Object) enhancer24);
        org.mockito.cglib.proxy.Enhancer enhancer77 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader78 = enhancer77.getClassLoader();
        enhancer77.setInterceptDuringConstruction(true);
        boolean boolean81 = enhancer77.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = enhancer77.getStrategy();
        java.lang.Class[] classArray83 = new java.lang.Class[] {};
        enhancer77.setInterfaces(classArray83);
        enhancer24.setInterfaces(classArray83);
        java.lang.ClassLoader classLoader86 = enhancer24.getClassLoader();
        boolean boolean87 = enhancer24.getUseCache();
        enhancer24.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy90 = enhancer24.getStrategy();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(callbackArray6);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertNotNull(classLoader69);
        org.junit.Assert.assertNotNull(callbackArray71);
        org.junit.Assert.assertNotNull(generatorStrategy74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(classLoader78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(generatorStrategy82);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(classLoader86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(generatorStrategy90);
    }

    @Test
    public void test09727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09727");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        enhancer0.setAttemptLoad(true);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter13 = null;
        enhancer0.setCallbackFilter(callbackFilter13);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        enhancer15.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader19 = enhancer15.getClassLoader();
        org.mockito.cglib.proxy.Callback callback20 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray21 = new org.mockito.cglib.proxy.Callback[] { callback20 };
        enhancer15.setCallbacks(callbackArray21);
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader24 = enhancer23.getClassLoader();
        enhancer23.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader27 = enhancer23.getClassLoader();
        java.lang.Class class28 = null;
        enhancer23.setSuperclass(class28);
        java.lang.Class<?> wildcardClass30 = enhancer23.getClass();
        boolean boolean31 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass30);
        enhancer15.setSuperclass((java.lang.Class) wildcardClass30);
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader34 = enhancer33.getClassLoader();
        enhancer33.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader37 = enhancer33.getClassLoader();
        java.lang.Class class38 = null;
        enhancer33.setSuperclass(class38);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        enhancer40.setInterceptDuringConstruction(true);
        boolean boolean44 = enhancer40.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = enhancer40.getStrategy();
        enhancer33.setStrategy(generatorStrategy45);
        org.mockito.cglib.proxy.Enhancer enhancer47 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader48 = enhancer47.getClassLoader();
        enhancer47.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader51 = enhancer47.getClassLoader();
        java.lang.Class class52 = null;
        enhancer47.setSuperclass(class52);
        org.mockito.cglib.proxy.Enhancer enhancer54 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader55 = enhancer54.getClassLoader();
        enhancer54.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer58 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader59 = enhancer58.getClassLoader();
        enhancer54.setClassLoader(classLoader59);
        enhancer54.setUseCache(false);
        java.lang.ClassLoader classLoader63 = enhancer54.getClassLoader();
        enhancer47.setClassLoader(classLoader63);
        boolean boolean65 = generatorStrategy45.equals((java.lang.Object) enhancer47);
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = enhancer47.getNamingPolicy();
        boolean boolean67 = enhancer47.getAttemptLoad();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter68 = null;
        enhancer47.setCallbackFilter(callbackFilter68);
        org.mockito.cglib.proxy.Callback callback70 = null;
        enhancer47.setCallback(callback70);
        java.lang.Class<?> wildcardClass72 = enhancer47.getClass();
        enhancer15.setSuperclass((java.lang.Class) wildcardClass72);
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = enhancer15.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = enhancer15.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer76 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader77 = enhancer76.getClassLoader();
        enhancer76.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader80 = enhancer76.getClassLoader();
        org.mockito.cglib.proxy.Callback callback81 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray82 = new org.mockito.cglib.proxy.Callback[] { callback81 };
        enhancer76.setCallbacks(callbackArray82);
        enhancer76.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy86 = enhancer76.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer87 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader88 = enhancer87.getClassLoader();
        enhancer87.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader91 = enhancer87.getClassLoader();
        java.lang.Class class92 = null;
        enhancer87.setSuperclass(class92);
        java.lang.Class<?> wildcardClass94 = enhancer87.getClass();
        boolean boolean95 = generatorStrategy86.equals((java.lang.Object) wildcardClass94);
        boolean boolean97 = generatorStrategy86.equals((java.lang.Object) '4');
        boolean boolean98 = generatorStrategy75.equals((java.lang.Object) '4');
        enhancer0.setStrategy(generatorStrategy75);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(callbackArray21);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(classLoader63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertNotNull(generatorStrategy75);
        org.junit.Assert.assertNotNull(classLoader77);
        org.junit.Assert.assertNotNull(classLoader80);
        org.junit.Assert.assertNotNull(callbackArray82);
        org.junit.Assert.assertNotNull(generatorStrategy86);
        org.junit.Assert.assertNotNull(classLoader88);
        org.junit.Assert.assertNotNull(classLoader91);
        org.junit.Assert.assertNotNull(wildcardClass94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test09728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09728");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer9.setClassLoader(classLoader14);
        enhancer9.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer9.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy18);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = enhancer0.getNamingPolicy();
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        boolean boolean27 = enhancer25.getAttemptLoad();
        enhancer25.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader31 = enhancer30.getClassLoader();
        enhancer30.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader34 = enhancer30.getClassLoader();
        java.lang.Class class35 = null;
        enhancer30.setSuperclass(class35);
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        enhancer37.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader42 = enhancer41.getClassLoader();
        enhancer37.setClassLoader(classLoader42);
        enhancer37.setUseCache(false);
        java.lang.ClassLoader classLoader46 = enhancer37.getClassLoader();
        enhancer30.setClassLoader(classLoader46);
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        enhancer48.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader52 = enhancer48.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = enhancer48.getStrategy();
        enhancer30.setStrategy(generatorStrategy53);
        boolean boolean55 = enhancer30.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader57 = enhancer56.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = enhancer56.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer59 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader60 = enhancer59.getClassLoader();
        enhancer59.setUseCache(true);
        boolean boolean63 = enhancer59.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer64 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader65 = enhancer64.getClassLoader();
        enhancer64.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader68 = enhancer64.getClassLoader();
        java.lang.Class class69 = null;
        enhancer64.setSuperclass(class69);
        org.mockito.cglib.proxy.Enhancer enhancer71 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader72 = enhancer71.getClassLoader();
        enhancer71.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer75 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader76 = enhancer75.getClassLoader();
        enhancer71.setClassLoader(classLoader76);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = enhancer71.getStrategy();
        java.lang.Class<?> wildcardClass79 = enhancer71.getClass();
        enhancer64.setSuperclass((java.lang.Class) wildcardClass79);
        enhancer59.setSuperclass((java.lang.Class) wildcardClass79);
        enhancer56.setSuperclass((java.lang.Class) wildcardClass79);
        enhancer30.setSuperclass((java.lang.Class) wildcardClass79);
        enhancer25.setSuperclass((java.lang.Class) wildcardClass79);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass79);
        enhancer0.setUseFactory(true);
        java.lang.ClassLoader classLoader88 = enhancer0.getClassLoader();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertNotNull(classLoader60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(classLoader68);
        org.junit.Assert.assertNotNull(classLoader72);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(classLoader88);
    }

    @Test
    public void test09729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09729");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        java.lang.ClassLoader classLoader7 = enhancer0.getClassLoader();
        boolean boolean8 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader13 = enhancer9.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader18 = enhancer14.getClassLoader();
        org.mockito.cglib.proxy.Callback callback19 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray20 = new org.mockito.cglib.proxy.Callback[] { callback19 };
        enhancer14.setCallbacks(callbackArray20);
        enhancer9.setCallbacks(callbackArray20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer9.getStrategy();
        enhancer0.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer25.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer25.setClassLoader(classLoader30);
        enhancer25.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        enhancer34.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader39 = enhancer38.getClassLoader();
        enhancer34.setClassLoader(classLoader39);
        enhancer34.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = enhancer34.getNamingPolicy();
        enhancer25.setNamingPolicy(namingPolicy43);
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader46 = enhancer45.getClassLoader();
        enhancer45.setInterceptDuringConstruction(true);
        boolean boolean49 = namingPolicy43.equals((java.lang.Object) enhancer45);
        java.lang.ClassLoader classLoader50 = enhancer45.getClassLoader();
        enhancer0.setClassLoader(classLoader50);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter52 = null;
        enhancer0.setCallbackFilter(callbackFilter52);
        java.lang.ClassLoader classLoader54 = enhancer0.getClassLoader();
        enhancer0.setSerialVersionUID((java.lang.Long) 1L);
        enhancer0.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Enhancer enhancer59 = new org.mockito.cglib.proxy.Enhancer();
        enhancer59.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback62 = null;
        enhancer59.setCallback(callback62);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter64 = null;
        enhancer59.setCallbackFilter(callbackFilter64);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = enhancer59.getStrategy();
        boolean boolean67 = enhancer59.getUseCache();
        org.mockito.cglib.proxy.Callback callback68 = null;
        enhancer59.setCallback(callback68);
        org.mockito.cglib.proxy.Enhancer enhancer70 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader71 = enhancer70.getClassLoader();
        enhancer70.setInterceptDuringConstruction(true);
        boolean boolean74 = enhancer70.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = enhancer70.getStrategy();
        java.lang.Class[] classArray76 = new java.lang.Class[] {};
        enhancer70.setInterfaces(classArray76);
        enhancer59.setInterfaces(classArray76);
        enhancer0.setInterfaces(classArray76);
        org.mockito.asm.ClassVisitor classVisitor80 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(callbackArray20);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(generatorStrategy75);
        org.junit.Assert.assertNotNull(classArray76);
    }

    @Test
    public void test09730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09730");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer9.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer9.getStrategy();
        enhancer0.setStrategy(generatorStrategy16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = enhancer0.getStrategy();
        enhancer0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer21.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader25 = enhancer21.getClassLoader();
        java.lang.Class class26 = null;
        enhancer21.setSuperclass(class26);
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader29 = enhancer28.getClassLoader();
        enhancer28.setInterceptDuringConstruction(true);
        boolean boolean32 = enhancer28.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = enhancer28.getStrategy();
        enhancer21.setStrategy(generatorStrategy33);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        enhancer35.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader39 = enhancer35.getClassLoader();
        java.lang.Class class40 = null;
        enhancer35.setSuperclass(class40);
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader43 = enhancer42.getClassLoader();
        enhancer42.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader47 = enhancer46.getClassLoader();
        enhancer42.setClassLoader(classLoader47);
        enhancer42.setUseCache(false);
        java.lang.ClassLoader classLoader51 = enhancer42.getClassLoader();
        enhancer35.setClassLoader(classLoader51);
        boolean boolean53 = generatorStrategy33.equals((java.lang.Object) enhancer35);
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = enhancer35.getNamingPolicy();
        boolean boolean55 = enhancer35.getAttemptLoad();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter56 = null;
        enhancer35.setCallbackFilter(callbackFilter56);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = enhancer35.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = enhancer35.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy59);
        enhancer0.setUseCache(true);
        java.lang.ClassLoader classLoader63 = enhancer0.getClassLoader();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertNotNull(classLoader63);
    }

    @Test
    public void test09731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09731");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer9.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer9.getStrategy();
        enhancer0.setStrategy(generatorStrategy16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = enhancer0.getStrategy();
        enhancer0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        enhancer0.setNamingPolicy(namingPolicy21);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer25.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader29 = enhancer25.getClassLoader();
        java.lang.Class class30 = null;
        enhancer25.setSuperclass(class30);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        enhancer32.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader36 = enhancer32.getClassLoader();
        java.lang.Class class37 = null;
        enhancer32.setSuperclass(class37);
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader40 = enhancer39.getClassLoader();
        enhancer39.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader44 = enhancer43.getClassLoader();
        enhancer39.setClassLoader(classLoader44);
        enhancer39.setUseCache(false);
        java.lang.ClassLoader classLoader48 = enhancer39.getClassLoader();
        enhancer32.setClassLoader(classLoader48);
        enhancer25.setClassLoader(classLoader48);
        org.mockito.cglib.proxy.Enhancer enhancer51 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader52 = enhancer51.getClassLoader();
        enhancer51.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        enhancer51.setClassLoader(classLoader56);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = enhancer51.getStrategy();
        java.lang.Class<?> wildcardClass59 = enhancer51.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer60 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader61 = enhancer60.getClassLoader();
        enhancer60.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader64 = enhancer60.getClassLoader();
        java.lang.Class class65 = null;
        enhancer60.setSuperclass(class65);
        org.mockito.cglib.proxy.Enhancer enhancer67 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader68 = enhancer67.getClassLoader();
        enhancer67.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer71 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader72 = enhancer71.getClassLoader();
        enhancer67.setClassLoader(classLoader72);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = enhancer67.getStrategy();
        java.lang.Class<?> wildcardClass75 = enhancer67.getClass();
        enhancer60.setSuperclass((java.lang.Class) wildcardClass75);
        java.lang.Class[] classArray77 = new java.lang.Class[] { wildcardClass59, wildcardClass75 };
        enhancer25.setInterfaces(classArray77);
        enhancer0.setInterfaces(classArray77);
        java.lang.ClassLoader classLoader80 = enhancer0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy81 = enhancer0.getNamingPolicy();
        java.lang.ClassLoader classLoader82 = enhancer0.getClassLoader();
        boolean boolean83 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(true);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertNotNull(classLoader68);
        org.junit.Assert.assertNotNull(classLoader72);
        org.junit.Assert.assertNotNull(generatorStrategy74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(classLoader80);
        org.junit.Assert.assertNotNull(namingPolicy81);
        org.junit.Assert.assertNotNull(classLoader82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test09732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09732");
        java.lang.Class class0 = null;
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader2 = enhancer1.getClassLoader();
        enhancer1.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        enhancer1.setClassLoader(classLoader6);
        enhancer1.setUseCache(false);
        java.lang.ClassLoader classLoader10 = enhancer1.getClassLoader();
        enhancer1.setAttemptLoad(true);
        org.mockito.cglib.proxy.Callback[] callbackArray13 = null;
        enhancer1.setCallbacks(callbackArray13);
        enhancer1.setAttemptLoad(true);
        boolean boolean17 = enhancer1.getAttemptLoad();
        enhancer1.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        boolean boolean22 = enhancer20.getAttemptLoad();
        enhancer20.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.proxy.Callback callback25 = null;
        enhancer20.setCallback(callback25);
        boolean boolean27 = enhancer20.getUseCache();
        boolean boolean28 = enhancer20.getUseCache();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter29 = null;
        enhancer20.setCallbackFilter(callbackFilter29);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer31.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        enhancer31.setClassLoader(classLoader36);
        enhancer31.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        enhancer40.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader44 = enhancer40.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader46 = enhancer45.getClassLoader();
        enhancer45.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader49 = enhancer45.getClassLoader();
        org.mockito.cglib.proxy.Callback callback50 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray51 = new org.mockito.cglib.proxy.Callback[] { callback50 };
        enhancer45.setCallbacks(callbackArray51);
        enhancer40.setCallbacks(callbackArray51);
        enhancer31.setCallbacks(callbackArray51);
        enhancer20.setCallbacks(callbackArray51);
        enhancer1.setCallbacks(callbackArray51);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerStaticCallbacks(class0, callbackArray51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(callbackArray51);
    }

    @Test
    public void test09733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09733");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer7.setClassLoader(classLoader12);
        enhancer7.setUseCache(false);
        java.lang.ClassLoader classLoader16 = enhancer7.getClassLoader();
        enhancer0.setClassLoader(classLoader16);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        enhancer18.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader22 = enhancer18.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer18.getStrategy();
        enhancer0.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer25.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer25.setClassLoader(classLoader30);
        enhancer25.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = enhancer25.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy34);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        enhancer36.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader40 = enhancer36.getClassLoader();
        java.lang.Class class41 = null;
        enhancer36.setSuperclass(class41);
        java.lang.ClassLoader classLoader43 = enhancer36.getClassLoader();
        enhancer36.setUseFactory(false);
        enhancer36.setSerialVersionUID((java.lang.Long) 0L);
        boolean boolean48 = enhancer36.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = enhancer36.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = enhancer36.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy50);
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        enhancer0.setUseFactory(false);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(namingPolicy50);
    }

    @Test
    public void test09734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09734");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader3 = enhancer2.getClassLoader();
        enhancer2.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader7 = enhancer6.getClassLoader();
        enhancer2.setClassLoader(classLoader7);
        enhancer2.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer11.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        enhancer11.setClassLoader(classLoader16);
        enhancer11.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = enhancer11.getNamingPolicy();
        enhancer2.setNamingPolicy(namingPolicy20);
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer22.setInterceptDuringConstruction(true);
        boolean boolean26 = namingPolicy20.equals((java.lang.Object) enhancer22);
        enhancer0.setNamingPolicy(namingPolicy20);
        java.lang.ClassLoader classLoader28 = enhancer0.getClassLoader();
        boolean boolean29 = enhancer0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = enhancer0.getStrategy();
        enhancer0.setUseFactory(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = enhancer0.getNamingPolicy();
        enhancer0.setUseFactory(true);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(namingPolicy33);
    }

    @Test
    public void test09735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09735");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback3 = null;
        enhancer0.setCallback(callback3);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter5 = null;
        enhancer0.setCallbackFilter(callbackFilter5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = enhancer0.getStrategy();
        boolean boolean8 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader13 = enhancer9.getClassLoader();
        java.lang.Class class14 = null;
        enhancer9.setSuperclass(class14);
        enhancer9.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        enhancer18.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer22.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        enhancer26.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader31 = enhancer30.getClassLoader();
        enhancer26.setClassLoader(classLoader31);
        enhancer26.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        enhancer35.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader40 = enhancer39.getClassLoader();
        enhancer35.setClassLoader(classLoader40);
        enhancer35.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = enhancer35.getNamingPolicy();
        enhancer26.setNamingPolicy(namingPolicy44);
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader47 = enhancer46.getClassLoader();
        enhancer46.setUseCache(true);
        boolean boolean50 = enhancer46.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer51 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader52 = enhancer51.getClassLoader();
        enhancer51.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader55 = enhancer51.getClassLoader();
        java.lang.Class class56 = null;
        enhancer51.setSuperclass(class56);
        org.mockito.cglib.proxy.Enhancer enhancer58 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader59 = enhancer58.getClassLoader();
        enhancer58.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer62 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader63 = enhancer62.getClassLoader();
        enhancer58.setClassLoader(classLoader63);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = enhancer58.getStrategy();
        java.lang.Class<?> wildcardClass66 = enhancer58.getClass();
        enhancer51.setSuperclass((java.lang.Class) wildcardClass66);
        enhancer46.setSuperclass((java.lang.Class) wildcardClass66);
        boolean boolean69 = namingPolicy44.equals((java.lang.Object) enhancer46);
        enhancer22.setNamingPolicy(namingPolicy44);
        enhancer18.setNamingPolicy(namingPolicy44);
        enhancer9.setNamingPolicy(namingPolicy44);
        enhancer0.setNamingPolicy(namingPolicy44);
        org.mockito.cglib.proxy.Callback callback74 = null;
        enhancer0.setCallback(callback74);
        enhancer0.setAttemptLoad(false);
        org.mockito.asm.ClassVisitor classVisitor78 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(classLoader63);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test09736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09736");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter7 = null;
        enhancer0.setCallbackFilter(callbackFilter7);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer11.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        enhancer11.setClassLoader(classLoader16);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter18 = null;
        enhancer11.setCallbackFilter(callbackFilter18);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer20.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        enhancer20.setClassLoader(classLoader25);
        enhancer20.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer29.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader34 = enhancer33.getClassLoader();
        enhancer29.setClassLoader(classLoader34);
        enhancer29.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = enhancer29.getNamingPolicy();
        enhancer20.setNamingPolicy(namingPolicy38);
        enhancer11.setNamingPolicy(namingPolicy38);
        enhancer0.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.proxy.Callback callback42 = null;
        enhancer0.setCallback(callback42);
        enhancer0.setAttemptLoad(false);
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter48 = null;
        enhancer0.setCallbackFilter(callbackFilter48);
        enhancer0.setAttemptLoad(false);
        org.mockito.asm.ClassVisitor classVisitor52 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(namingPolicy38);
    }

    @Test
    public void test09737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09737");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer9.setClassLoader(classLoader14);
        enhancer9.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer9.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy18);
        enhancer0.setInterceptDuringConstruction(true);
        enhancer0.setSerialVersionUID((java.lang.Long) 100L);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        enhancer24.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader29 = enhancer28.getClassLoader();
        enhancer24.setClassLoader(classLoader29);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = enhancer24.getStrategy();
        enhancer24.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        enhancer34.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = enhancer34.getStrategy();
        enhancer24.setStrategy(generatorStrategy37);
        enhancer0.setStrategy(generatorStrategy37);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        enhancer40.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = enhancer40.getStrategy();
        enhancer0.setStrategy(generatorStrategy43);
        enhancer0.setSerialVersionUID((java.lang.Long) 100L);
        enhancer0.setInterceptDuringConstruction(false);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(generatorStrategy43);
    }

    @Test
    public void test09738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09738");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseCache(true);
        boolean boolean4 = enhancer0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        enhancer0.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer9.setClassLoader(classLoader14);
        enhancer8.setClassLoader(classLoader14);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        enhancer17.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader21 = enhancer17.getClassLoader();
        enhancer8.setClassLoader(classLoader21);
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader24 = enhancer23.getClassLoader();
        enhancer23.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader28 = enhancer27.getClassLoader();
        enhancer23.setClassLoader(classLoader28);
        enhancer23.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = enhancer23.getNamingPolicy();
        enhancer23.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        enhancer35.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader39 = enhancer35.getClassLoader();
        java.lang.Class class40 = null;
        enhancer35.setSuperclass(class40);
        enhancer35.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader45 = enhancer44.getClassLoader();
        enhancer44.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        enhancer44.setClassLoader(classLoader49);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = enhancer44.getStrategy();
        enhancer35.setStrategy(generatorStrategy51);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = enhancer35.getStrategy();
        enhancer23.setStrategy(generatorStrategy53);
        enhancer8.setStrategy(generatorStrategy53);
        enhancer0.setStrategy(generatorStrategy53);
        org.mockito.cglib.proxy.Callback callback57 = null;
        enhancer0.setCallback(callback57);
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = enhancer0.getNamingPolicy();
        java.lang.ClassLoader classLoader60 = enhancer0.getClassLoader();
        boolean boolean61 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter62 = null;
        enhancer0.setCallbackFilter(callbackFilter62);
        org.mockito.asm.ClassVisitor classVisitor64 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertNotNull(classLoader60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test09739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09739");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        enhancer5.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader9 = enhancer5.getClassLoader();
        org.mockito.cglib.proxy.Callback callback10 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray11 = new org.mockito.cglib.proxy.Callback[] { callback10 };
        enhancer5.setCallbacks(callbackArray11);
        enhancer0.setCallbacks(callbackArray11);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        enhancer15.setInterceptDuringConstruction(true);
        boolean boolean19 = enhancer15.getUseCache();
        boolean boolean20 = enhancer15.getAttemptLoad();
        enhancer15.setUseCache(true);
        enhancer15.setAttemptLoad(true);
        org.mockito.cglib.proxy.Callback callback25 = null;
        enhancer15.setCallback(callback25);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = enhancer15.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy27);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader31 = enhancer30.getClassLoader();
        enhancer30.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        enhancer30.setClassLoader(classLoader35);
        enhancer29.setClassLoader(classLoader35);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader39 = enhancer38.getClassLoader();
        enhancer38.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader42 = enhancer38.getClassLoader();
        enhancer29.setClassLoader(classLoader42);
        org.mockito.cglib.proxy.Callback callback44 = null;
        enhancer29.setCallback(callback44);
        enhancer29.setUseCache(true);
        org.mockito.cglib.proxy.Callback callback48 = null;
        enhancer29.setCallback(callback48);
        org.mockito.cglib.proxy.Callback callback50 = null;
        enhancer29.setCallback(callback50);
        org.mockito.cglib.proxy.Enhancer enhancer52 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader53 = enhancer52.getClassLoader();
        enhancer52.setUseCache(true);
        enhancer52.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer58 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader59 = enhancer58.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter60 = null;
        enhancer58.setCallbackFilter(callbackFilter60);
        boolean boolean62 = enhancer58.getAttemptLoad();
        enhancer58.setAttemptLoad(true);
        java.lang.ClassLoader classLoader65 = enhancer58.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = enhancer58.getNamingPolicy();
        enhancer52.setNamingPolicy(namingPolicy66);
        enhancer29.setNamingPolicy(namingPolicy66);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = enhancer29.getStrategy();
        boolean boolean70 = namingPolicy27.equals((java.lang.Object) generatorStrategy69);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(callbackArray11);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertNotNull(generatorStrategy69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test09740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09740");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseCache(true);
        boolean boolean4 = enhancer0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        enhancer0.setNamingPolicy(namingPolicy5);
        enhancer0.setInterceptDuringConstruction(false);
        boolean boolean9 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader11 = enhancer10.getClassLoader();
        enhancer10.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader14 = enhancer10.getClassLoader();
        java.lang.Class class15 = null;
        enhancer10.setSuperclass(class15);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        enhancer17.setInterceptDuringConstruction(true);
        boolean boolean21 = enhancer17.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = enhancer17.getStrategy();
        enhancer10.setStrategy(generatorStrategy22);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        enhancer24.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader28 = enhancer24.getClassLoader();
        java.lang.Class class29 = null;
        enhancer24.setSuperclass(class29);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer31.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        enhancer31.setClassLoader(classLoader36);
        enhancer31.setUseCache(false);
        java.lang.ClassLoader classLoader40 = enhancer31.getClassLoader();
        enhancer24.setClassLoader(classLoader40);
        boolean boolean42 = generatorStrategy22.equals((java.lang.Object) enhancer24);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = enhancer24.getNamingPolicy();
        boolean boolean44 = enhancer24.getAttemptLoad();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter45 = null;
        enhancer24.setCallbackFilter(callbackFilter45);
        org.mockito.cglib.proxy.Enhancer enhancer47 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader48 = enhancer47.getClassLoader();
        enhancer47.setUseCache(true);
        boolean boolean51 = enhancer47.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer52 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader53 = enhancer52.getClassLoader();
        enhancer52.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader56 = enhancer52.getClassLoader();
        java.lang.Class class57 = null;
        enhancer52.setSuperclass(class57);
        java.lang.Class<?> wildcardClass59 = enhancer52.getClass();
        enhancer47.setSuperclass((java.lang.Class) wildcardClass59);
        enhancer24.setSuperclass((java.lang.Class) wildcardClass59);
        enhancer24.setUseCache(false);
        java.lang.Class<?> wildcardClass64 = enhancer24.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass64);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter66 = null;
        enhancer0.setCallbackFilter(callbackFilter66);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter70 = null;
        enhancer0.setCallbackFilter(callbackFilter70);
        java.lang.Class<?> wildcardClass72 = enhancer0.getClass();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test09741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09741");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        boolean boolean11 = enhancer7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer7.getStrategy();
        enhancer0.setStrategy(generatorStrategy12);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader18 = enhancer14.getClassLoader();
        java.lang.Class class19 = null;
        enhancer14.setSuperclass(class19);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer21.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer21.setClassLoader(classLoader26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = enhancer21.getStrategy();
        java.lang.Class<?> wildcardClass29 = enhancer21.getClass();
        enhancer14.setSuperclass((java.lang.Class) wildcardClass29);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass29);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        enhancer34.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader38 = enhancer34.getClassLoader();
        java.lang.Class class39 = null;
        enhancer34.setSuperclass(class39);
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader42 = enhancer41.getClassLoader();
        enhancer41.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader46 = enhancer45.getClassLoader();
        enhancer41.setClassLoader(classLoader46);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = enhancer41.getStrategy();
        java.lang.Class<?> wildcardClass49 = enhancer41.getClass();
        enhancer34.setSuperclass((java.lang.Class) wildcardClass49);
        enhancer34.setAttemptLoad(false);
        org.mockito.cglib.proxy.Enhancer enhancer53 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader54 = enhancer53.getClassLoader();
        enhancer34.setClassLoader(classLoader54);
        enhancer34.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer58 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader59 = enhancer58.getClassLoader();
        enhancer58.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer62 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader63 = enhancer62.getClassLoader();
        enhancer58.setClassLoader(classLoader63);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = enhancer58.getStrategy();
        enhancer58.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer68 = new org.mockito.cglib.proxy.Enhancer();
        enhancer68.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = enhancer68.getStrategy();
        enhancer58.setStrategy(generatorStrategy71);
        org.mockito.cglib.proxy.Enhancer enhancer73 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader74 = enhancer73.getClassLoader();
        enhancer73.setInterceptDuringConstruction(true);
        boolean boolean77 = enhancer73.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = enhancer73.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer79 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader80 = enhancer79.getClassLoader();
        enhancer79.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader83 = enhancer79.getClassLoader();
        org.mockito.cglib.proxy.Callback callback84 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray85 = new org.mockito.cglib.proxy.Callback[] { callback84 };
        enhancer79.setCallbacks(callbackArray85);
        enhancer73.setCallbacks(callbackArray85);
        enhancer58.setCallbacks(callbackArray85);
        enhancer34.setCallbacks(callbackArray85);
        java.lang.Class<?> wildcardClass90 = callbackArray85.getClass();
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackType((java.lang.Class) wildcardClass90);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Unknown callback type class [Lorg.mockito.cglib.proxy.Callback;");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(classLoader63);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertNotNull(generatorStrategy71);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertNotNull(classLoader80);
        org.junit.Assert.assertNotNull(classLoader83);
        org.junit.Assert.assertNotNull(callbackArray85);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test09742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09742");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        boolean boolean11 = enhancer7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer7.getStrategy();
        enhancer0.setStrategy(generatorStrategy12);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader18 = enhancer14.getClassLoader();
        java.lang.Class class19 = null;
        enhancer14.setSuperclass(class19);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer21.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer21.setClassLoader(classLoader26);
        enhancer21.setUseCache(false);
        java.lang.ClassLoader classLoader30 = enhancer21.getClassLoader();
        enhancer14.setClassLoader(classLoader30);
        boolean boolean32 = generatorStrategy12.equals((java.lang.Object) enhancer14);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = enhancer14.getNamingPolicy();
        boolean boolean34 = enhancer14.getAttemptLoad();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter35 = null;
        enhancer14.setCallbackFilter(callbackFilter35);
        java.lang.ClassLoader classLoader37 = enhancer14.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = enhancer14.getNamingPolicy();
        enhancer14.setUseFactory(true);
        enhancer14.setUseFactory(false);
        enhancer14.setSerialVersionUID((java.lang.Long) (-1L));
        enhancer14.setInterceptDuringConstruction(false);
        enhancer14.setAttemptLoad(false);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(namingPolicy38);
    }

    @Test
    public void test09743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09743");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer7.setClassLoader(classLoader12);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = enhancer7.getStrategy();
        java.lang.Class<?> wildcardClass15 = enhancer7.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass15);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        enhancer17.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer17.setClassLoader(classLoader22);
        enhancer17.setUseCache(false);
        java.lang.ClassLoader classLoader26 = enhancer17.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = enhancer17.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = enhancer17.getNamingPolicy();
        java.lang.ClassLoader classLoader29 = enhancer17.getClassLoader();
        enhancer0.setClassLoader(classLoader29);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer31.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        enhancer31.setClassLoader(classLoader36);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = enhancer31.getStrategy();
        java.lang.Class<?> wildcardClass39 = enhancer31.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass39);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader43 = enhancer42.getClassLoader();
        enhancer42.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader47 = enhancer46.getClassLoader();
        enhancer42.setClassLoader(classLoader47);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter49 = null;
        enhancer42.setCallbackFilter(callbackFilter49);
        enhancer42.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer53 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader54 = enhancer53.getClassLoader();
        enhancer53.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader58 = enhancer57.getClassLoader();
        enhancer53.setClassLoader(classLoader58);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter60 = null;
        enhancer53.setCallbackFilter(callbackFilter60);
        org.mockito.cglib.proxy.Enhancer enhancer62 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader63 = enhancer62.getClassLoader();
        enhancer62.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer66 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader67 = enhancer66.getClassLoader();
        enhancer62.setClassLoader(classLoader67);
        enhancer62.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer71 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader72 = enhancer71.getClassLoader();
        enhancer71.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer75 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader76 = enhancer75.getClassLoader();
        enhancer71.setClassLoader(classLoader76);
        enhancer71.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = enhancer71.getNamingPolicy();
        enhancer62.setNamingPolicy(namingPolicy80);
        enhancer53.setNamingPolicy(namingPolicy80);
        enhancer42.setNamingPolicy(namingPolicy80);
        org.mockito.cglib.core.NamingPolicy namingPolicy84 = enhancer42.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy84);
        boolean boolean86 = enhancer0.getUseCache();
        enhancer0.setUseCache(false);
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy91 = enhancer0.getStrategy();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(classLoader63);
        org.junit.Assert.assertNotNull(classLoader67);
        org.junit.Assert.assertNotNull(classLoader72);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertNotNull(namingPolicy80);
        org.junit.Assert.assertNotNull(namingPolicy84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(generatorStrategy91);
    }

    @Test
    public void test09744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09744");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer7.setClassLoader(classLoader12);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = enhancer7.getStrategy();
        java.lang.Class<?> wildcardClass15 = enhancer7.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass15);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = enhancer0.getStrategy();
        enhancer0.setUseCache(true);
        org.mockito.cglib.proxy.Callback callback20 = null;
        enhancer0.setCallback(callback20);
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer22.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        enhancer22.setClassLoader(classLoader27);
        enhancer22.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = enhancer22.getNamingPolicy();
        boolean boolean32 = enhancer22.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader34 = enhancer33.getClassLoader();
        enhancer33.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader37 = enhancer33.getClassLoader();
        java.lang.Class class38 = null;
        enhancer33.setSuperclass(class38);
        java.lang.ClassLoader classLoader40 = enhancer33.getClassLoader();
        enhancer22.setClassLoader(classLoader40);
        enhancer22.setAttemptLoad(false);
        enhancer22.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader46 = enhancer22.getClassLoader();
        enhancer0.setClassLoader(classLoader46);
        enhancer0.setInterceptDuringConstruction(false);
        boolean boolean50 = enhancer0.getUseCache();
        boolean boolean51 = enhancer0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = enhancer0.getStrategy();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(generatorStrategy52);
    }

    @Test
    public void test09745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09745");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseCache(true);
        boolean boolean4 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Callback callback5 = null;
        enhancer0.setCallback(callback5);
        java.lang.ClassLoader classLoader7 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader13 = enhancer9.getClassLoader();
        java.lang.Class class14 = null;
        enhancer9.setSuperclass(class14);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        enhancer16.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer16.setClassLoader(classLoader21);
        enhancer16.setUseCache(false);
        java.lang.ClassLoader classLoader25 = enhancer16.getClassLoader();
        enhancer9.setClassLoader(classLoader25);
        java.lang.ClassLoader classLoader27 = enhancer9.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter28 = null;
        enhancer9.setCallbackFilter(callbackFilter28);
        enhancer9.setUseFactory(true);
        enhancer9.setInterceptDuringConstruction(true);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray34 = generatorStrategy8.generate((org.mockito.cglib.core.ClassGenerator) enhancer9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(classLoader27);
    }

    @Test
    public void test09746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09746");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter7 = null;
        enhancer0.setCallbackFilter(callbackFilter7);
        enhancer0.setUseCache(false);
        boolean boolean11 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Callback callback12 = null;
        enhancer0.setCallback(callback12);
        boolean boolean14 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        enhancer16.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer16.setClassLoader(classLoader21);
        enhancer15.setClassLoader(classLoader21);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        enhancer24.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader28 = enhancer24.getClassLoader();
        enhancer15.setClassLoader(classLoader28);
        boolean boolean30 = enhancer15.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer31.setInterceptDuringConstruction(true);
        boolean boolean35 = enhancer31.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = enhancer31.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        enhancer37.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader41 = enhancer37.getClassLoader();
        org.mockito.cglib.proxy.Callback callback42 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray43 = new org.mockito.cglib.proxy.Callback[] { callback42 };
        enhancer37.setCallbacks(callbackArray43);
        enhancer31.setCallbacks(callbackArray43);
        enhancer15.setCallbacks(callbackArray43);
        enhancer15.setUseFactory(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = enhancer15.getStrategy();
        boolean boolean50 = enhancer15.getUseCache();
        java.lang.Class<?> wildcardClass51 = enhancer15.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass51);
        java.lang.Class<?> wildcardClass53 = enhancer0.getClass();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(callbackArray43);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test09747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09747");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter2 = null;
        enhancer0.setCallbackFilter(callbackFilter2);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter4 = null;
        enhancer0.setCallbackFilter(callbackFilter4);
        enhancer0.setUseFactory(true);
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class11 = enhancer0.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback types are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(namingPolicy10);
    }

    @Test
    public void test09748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09748");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        boolean boolean4 = enhancer0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Callback callback7 = null;
        enhancer0.setCallback(callback7);
        enhancer0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = enhancer0.getStrategy();
        enhancer0.setInterceptDuringConstruction(false);
        boolean boolean14 = enhancer0.getAttemptLoad();
        enhancer0.setUseFactory(true);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test09749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09749");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback3 = null;
        enhancer0.setCallback(callback3);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter5 = null;
        enhancer0.setCallbackFilter(callbackFilter5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = enhancer0.getStrategy();
        boolean boolean8 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Callback callback9 = null;
        enhancer0.setCallback(callback9);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        boolean boolean13 = enhancer11.getAttemptLoad();
        java.lang.ClassLoader classLoader14 = enhancer11.getClassLoader();
        enhancer0.setClassLoader(classLoader14);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        enhancer16.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer16.setClassLoader(classLoader21);
        enhancer16.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = enhancer16.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy25);
        enhancer0.setInterceptDuringConstruction(false);
        enhancer0.setInterceptDuringConstruction(false);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(namingPolicy25);
    }

    @Test
    public void test09750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09750");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        boolean boolean2 = enhancer0.getAttemptLoad();
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.proxy.Callback callback5 = null;
        enhancer0.setCallback(callback5);
        boolean boolean7 = enhancer0.getUseCache();
        boolean boolean8 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter9 = null;
        enhancer0.setCallbackFilter(callbackFilter9);
        java.lang.ClassLoader classLoader11 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        enhancer12.setInterceptDuringConstruction(true);
        boolean boolean16 = enhancer12.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = enhancer12.getStrategy();
        java.lang.Class[] classArray18 = new java.lang.Class[] {};
        enhancer12.setInterfaces(classArray18);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = enhancer12.getStrategy();
        enhancer0.setStrategy(generatorStrategy20);
        enhancer0.setInterceptDuringConstruction(true);
        boolean boolean24 = enhancer0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor25 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test09751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09751");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer3 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader4 = enhancer3.getClassLoader();
        enhancer3.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer3.setClassLoader(classLoader8);
        enhancer2.setClassLoader(classLoader8);
        enhancer0.setClassLoader(classLoader8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer0.getStrategy();
        java.lang.ClassLoader classLoader13 = enhancer0.getClassLoader();
        java.lang.ClassLoader classLoader14 = enhancer0.getClassLoader();
        enhancer0.setAttemptLoad(true);
        org.mockito.asm.ClassVisitor classVisitor17 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(classLoader14);
    }

    @Test
    public void test09752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09752");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader13 = enhancer9.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader18 = enhancer14.getClassLoader();
        org.mockito.cglib.proxy.Callback callback19 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray20 = new org.mockito.cglib.proxy.Callback[] { callback19 };
        enhancer14.setCallbacks(callbackArray20);
        enhancer9.setCallbacks(callbackArray20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer9.getStrategy();
        org.mockito.cglib.proxy.Callback callback24 = null;
        enhancer9.setCallback(callback24);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        enhancer26.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader31 = enhancer30.getClassLoader();
        enhancer26.setClassLoader(classLoader31);
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader34 = enhancer33.getClassLoader();
        enhancer33.setInterceptDuringConstruction(true);
        boolean boolean37 = enhancer33.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = enhancer33.getStrategy();
        java.lang.Class[] classArray39 = new java.lang.Class[] {};
        enhancer33.setInterfaces(classArray39);
        enhancer26.setInterfaces(classArray39);
        enhancer9.setInterfaces(classArray39);
        enhancer0.setInterfaces(classArray39);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter44 = null;
        enhancer0.setCallbackFilter(callbackFilter44);
        enhancer0.setUseFactory(false);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(callbackArray20);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(classArray39);
    }

    @Test
    public void test09753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09753");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        boolean boolean9 = enhancer0.getAttemptLoad();
        java.lang.ClassLoader classLoader10 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(false);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        enhancer15.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader20 = enhancer19.getClassLoader();
        enhancer15.setClassLoader(classLoader20);
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer22.setInterceptDuringConstruction(true);
        boolean boolean26 = enhancer22.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = enhancer22.getStrategy();
        java.lang.Class[] classArray28 = new java.lang.Class[] {};
        enhancer22.setInterfaces(classArray28);
        enhancer15.setInterfaces(classArray28);
        enhancer0.setInterfaces(classArray28);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        enhancer32.setUseCache(true);
        boolean boolean36 = enhancer32.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = enhancer32.getStrategy();
        enhancer0.setStrategy(generatorStrategy37);
        java.lang.Class<?> wildcardClass39 = generatorStrategy37.getClass();
        org.mockito.cglib.proxy.Callback callback40 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj41 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass39, callback40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test09754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09754");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setUseFactory(false);
        org.mockito.cglib.proxy.Callback callback3 = null;
        enhancer0.setCallback(callback3);
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        enhancer8.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        enhancer8.setClassLoader(classLoader13);
        enhancer7.setClassLoader(classLoader13);
        enhancer5.setClassLoader(classLoader13);
        enhancer0.setClassLoader(classLoader13);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = enhancer0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = enhancer0.getStrategy();
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(generatorStrategy20);
    }

    @Test
    public void test09755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09755");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = enhancer0.getNamingPolicy();
        enhancer0.setInterceptDuringConstruction(false);
        java.lang.Class<?> wildcardClass10 = enhancer0.getClass();
        boolean boolean11 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass10);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test09756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09756");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        boolean boolean11 = enhancer7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer7.getStrategy();
        enhancer0.setStrategy(generatorStrategy12);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader18 = enhancer14.getClassLoader();
        java.lang.Class class19 = null;
        enhancer14.setSuperclass(class19);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer21.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer21.setClassLoader(classLoader26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = enhancer21.getStrategy();
        java.lang.Class<?> wildcardClass29 = enhancer21.getClass();
        enhancer14.setSuperclass((java.lang.Class) wildcardClass29);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass29);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        enhancer32.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        enhancer32.setClassLoader(classLoader37);
        enhancer32.setUseCache(false);
        java.lang.ClassLoader classLoader41 = enhancer32.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = enhancer32.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy42);
        java.lang.ClassLoader classLoader44 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter45 = null;
        enhancer0.setCallbackFilter(callbackFilter45);
        java.lang.Class class47 = null;
        enhancer0.setSuperclass(class47);
        boolean boolean49 = enhancer0.getUseCache();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test09757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09757");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer7.setClassLoader(classLoader12);
        enhancer7.setUseCache(false);
        java.lang.ClassLoader classLoader16 = enhancer7.getClassLoader();
        enhancer0.setClassLoader(classLoader16);
        boolean boolean18 = enhancer0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = enhancer0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor20 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(generatorStrategy19);
    }

    @Test
    public void test09758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09758");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Callback callback5 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray6 = new org.mockito.cglib.proxy.Callback[] { callback5 };
        enhancer0.setCallbacks(callbackArray6);
        enhancer0.setAttemptLoad(false);
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer13.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader17 = enhancer13.getClassLoader();
        java.lang.Class class18 = null;
        enhancer13.setSuperclass(class18);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer20.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        enhancer20.setClassLoader(classLoader25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = enhancer20.getStrategy();
        java.lang.Class<?> wildcardClass28 = enhancer20.getClass();
        enhancer13.setSuperclass((java.lang.Class) wildcardClass28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = enhancer13.getStrategy();
        enhancer13.setUseCache(true);
        org.mockito.cglib.proxy.Callback callback33 = null;
        enhancer13.setCallback(callback33);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        enhancer35.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader40 = enhancer39.getClassLoader();
        enhancer35.setClassLoader(classLoader40);
        enhancer35.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = enhancer35.getNamingPolicy();
        boolean boolean45 = enhancer35.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader47 = enhancer46.getClassLoader();
        enhancer46.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader50 = enhancer46.getClassLoader();
        java.lang.Class class51 = null;
        enhancer46.setSuperclass(class51);
        java.lang.ClassLoader classLoader53 = enhancer46.getClassLoader();
        enhancer35.setClassLoader(classLoader53);
        enhancer35.setAttemptLoad(false);
        enhancer35.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader59 = enhancer35.getClassLoader();
        enhancer13.setClassLoader(classLoader59);
        enhancer13.setInterceptDuringConstruction(false);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray63 = generatorStrategy12.generate((org.mockito.cglib.core.ClassGenerator) enhancer13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(callbackArray6);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertNotNull(classLoader59);
    }

    @Test
    public void test09759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09759");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Callback callback5 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray6 = new org.mockito.cglib.proxy.Callback[] { callback5 };
        enhancer0.setCallbacks(callbackArray6);
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer11.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader15 = enhancer11.getClassLoader();
        java.lang.Class class16 = null;
        enhancer11.setSuperclass(class16);
        java.lang.Class<?> wildcardClass18 = enhancer11.getClass();
        boolean boolean19 = generatorStrategy10.equals((java.lang.Object) wildcardClass18);
        boolean boolean21 = generatorStrategy10.equals((java.lang.Object) '4');
        boolean boolean23 = generatorStrategy10.equals((java.lang.Object) "");
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        enhancer24.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader28 = enhancer24.getClassLoader();
        java.lang.Class class29 = null;
        enhancer24.setSuperclass(class29);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer31.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        enhancer31.setClassLoader(classLoader36);
        enhancer31.setUseCache(false);
        java.lang.ClassLoader classLoader40 = enhancer31.getClassLoader();
        enhancer24.setClassLoader(classLoader40);
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader43 = enhancer42.getClassLoader();
        enhancer42.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader46 = enhancer42.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = enhancer42.getStrategy();
        enhancer24.setStrategy(generatorStrategy47);
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader50 = enhancer49.getClassLoader();
        enhancer49.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer53 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader54 = enhancer53.getClassLoader();
        enhancer49.setClassLoader(classLoader54);
        enhancer49.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = enhancer49.getNamingPolicy();
        enhancer24.setNamingPolicy(namingPolicy58);
        org.mockito.cglib.proxy.Enhancer enhancer60 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader61 = enhancer60.getClassLoader();
        enhancer60.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader64 = enhancer60.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer65 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader66 = enhancer65.getClassLoader();
        enhancer65.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader69 = enhancer65.getClassLoader();
        org.mockito.cglib.proxy.Callback callback70 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray71 = new org.mockito.cglib.proxy.Callback[] { callback70 };
        enhancer65.setCallbacks(callbackArray71);
        enhancer60.setCallbacks(callbackArray71);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = enhancer60.getStrategy();
        enhancer24.setStrategy(generatorStrategy74);
        boolean boolean76 = generatorStrategy10.equals((java.lang.Object) enhancer24);
        boolean boolean77 = enhancer24.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = enhancer24.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy79 = enhancer24.getStrategy();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter80 = null;
        enhancer24.setCallbackFilter(callbackFilter80);
        enhancer24.setUseFactory(true);
        enhancer24.setUseCache(true);
        boolean boolean86 = enhancer24.getAttemptLoad();
        boolean boolean87 = enhancer24.getUseCache();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(callbackArray6);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertNotNull(classLoader69);
        org.junit.Assert.assertNotNull(callbackArray71);
        org.junit.Assert.assertNotNull(generatorStrategy74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(namingPolicy78);
        org.junit.Assert.assertNotNull(generatorStrategy79);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test09760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09760");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader9 = enhancer0.getClassLoader();
        enhancer0.setAttemptLoad(true);
        enhancer0.setUseFactory(false);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        enhancer14.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback17 = null;
        enhancer14.setCallback(callback17);
        enhancer14.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = enhancer14.getNamingPolicy();
        org.mockito.cglib.proxy.Callback callback22 = null;
        enhancer14.setCallback(callback22);
        enhancer14.setInterceptDuringConstruction(false);
        enhancer14.setUseFactory(false);
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader29 = enhancer28.getClassLoader();
        enhancer28.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        enhancer28.setClassLoader(classLoader33);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter35 = null;
        enhancer28.setCallbackFilter(callbackFilter35);
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = enhancer28.getNamingPolicy();
        java.lang.ClassLoader classLoader38 = enhancer28.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader40 = enhancer39.getClassLoader();
        enhancer39.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader43 = enhancer39.getClassLoader();
        java.lang.Class class44 = null;
        enhancer39.setSuperclass(class44);
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader47 = enhancer46.getClassLoader();
        enhancer46.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader50 = enhancer46.getClassLoader();
        java.lang.Class class51 = null;
        enhancer46.setSuperclass(class51);
        org.mockito.cglib.proxy.Enhancer enhancer53 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader54 = enhancer53.getClassLoader();
        enhancer53.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader58 = enhancer57.getClassLoader();
        enhancer53.setClassLoader(classLoader58);
        enhancer53.setUseCache(false);
        java.lang.ClassLoader classLoader62 = enhancer53.getClassLoader();
        enhancer46.setClassLoader(classLoader62);
        enhancer39.setClassLoader(classLoader62);
        enhancer39.setUseFactory(true);
        java.lang.ClassLoader classLoader67 = enhancer39.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer68 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader69 = enhancer68.getClassLoader();
        enhancer68.setInterceptDuringConstruction(true);
        boolean boolean72 = enhancer68.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = enhancer68.getStrategy();
        java.lang.Class[] classArray74 = new java.lang.Class[] {};
        enhancer68.setInterfaces(classArray74);
        enhancer39.setInterfaces(classArray74);
        enhancer28.setInterfaces(classArray74);
        enhancer14.setInterfaces(classArray74);
        enhancer0.setInterfaces(classArray74);
        enhancer0.setInterceptDuringConstruction(false);
        boolean boolean82 = enhancer0.getAttemptLoad();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertNotNull(classLoader67);
        org.junit.Assert.assertNotNull(classLoader69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(generatorStrategy73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test09761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09761");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Object obj6 = null;
        boolean boolean7 = generatorStrategy5.equals(obj6);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer9.setClassLoader(classLoader14);
        enhancer8.setClassLoader(classLoader14);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        enhancer17.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader21 = enhancer17.getClassLoader();
        enhancer8.setClassLoader(classLoader21);
        boolean boolean23 = enhancer8.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        enhancer24.setInterceptDuringConstruction(true);
        boolean boolean28 = enhancer24.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = enhancer24.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader31 = enhancer30.getClassLoader();
        enhancer30.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader34 = enhancer30.getClassLoader();
        org.mockito.cglib.proxy.Callback callback35 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray36 = new org.mockito.cglib.proxy.Callback[] { callback35 };
        enhancer30.setCallbacks(callbackArray36);
        enhancer24.setCallbacks(callbackArray36);
        enhancer8.setCallbacks(callbackArray36);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        enhancer40.setInterceptDuringConstruction(true);
        boolean boolean44 = enhancer40.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = enhancer40.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader47 = enhancer46.getClassLoader();
        enhancer46.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader50 = enhancer46.getClassLoader();
        org.mockito.cglib.proxy.Callback callback51 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray52 = new org.mockito.cglib.proxy.Callback[] { callback51 };
        enhancer46.setCallbacks(callbackArray52);
        enhancer40.setCallbacks(callbackArray52);
        enhancer8.setCallbacks(callbackArray52);
        boolean boolean56 = generatorStrategy5.equals((java.lang.Object) enhancer8);
        boolean boolean57 = enhancer8.getAttemptLoad();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter58 = null;
        enhancer8.setCallbackFilter(callbackFilter58);
        enhancer8.setUseCache(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = enhancer8.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = null;
        enhancer8.setNamingPolicy(namingPolicy63);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(callbackArray36);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(callbackArray52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(namingPolicy62);
    }

    @Test
    public void test09762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09762");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader2 = enhancer1.getClassLoader();
        enhancer1.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        enhancer1.setClassLoader(classLoader6);
        enhancer0.setClassLoader(classLoader6);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader13 = enhancer9.getClassLoader();
        enhancer0.setClassLoader(classLoader13);
        boolean boolean15 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        enhancer16.setInterceptDuringConstruction(true);
        boolean boolean20 = enhancer16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = enhancer16.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer22.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader26 = enhancer22.getClassLoader();
        org.mockito.cglib.proxy.Callback callback27 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray28 = new org.mockito.cglib.proxy.Callback[] { callback27 };
        enhancer22.setCallbacks(callbackArray28);
        enhancer16.setCallbacks(callbackArray28);
        enhancer0.setCallbacks(callbackArray28);
        enhancer0.setUseFactory(false);
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        enhancer34.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader38 = enhancer34.getClassLoader();
        java.lang.Class class39 = null;
        enhancer34.setSuperclass(class39);
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader42 = enhancer41.getClassLoader();
        enhancer41.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader46 = enhancer45.getClassLoader();
        enhancer41.setClassLoader(classLoader46);
        enhancer41.setUseCache(false);
        java.lang.ClassLoader classLoader50 = enhancer41.getClassLoader();
        enhancer34.setClassLoader(classLoader50);
        org.mockito.cglib.proxy.Enhancer enhancer52 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader53 = enhancer52.getClassLoader();
        enhancer52.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader56 = enhancer52.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = enhancer52.getStrategy();
        enhancer34.setStrategy(generatorStrategy57);
        boolean boolean59 = enhancer34.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer60 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader61 = enhancer60.getClassLoader();
        enhancer60.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer64 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader65 = enhancer64.getClassLoader();
        enhancer60.setClassLoader(classLoader65);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = enhancer60.getStrategy();
        java.lang.Class<?> wildcardClass68 = enhancer60.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer69 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader70 = enhancer69.getClassLoader();
        enhancer69.setUseCache(true);
        boolean boolean73 = enhancer69.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer74 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader75 = enhancer74.getClassLoader();
        enhancer74.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader78 = enhancer74.getClassLoader();
        java.lang.Class class79 = null;
        enhancer74.setSuperclass(class79);
        org.mockito.cglib.proxy.Enhancer enhancer81 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader82 = enhancer81.getClassLoader();
        enhancer81.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer85 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader86 = enhancer85.getClassLoader();
        enhancer81.setClassLoader(classLoader86);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy88 = enhancer81.getStrategy();
        java.lang.Class<?> wildcardClass89 = enhancer81.getClass();
        enhancer74.setSuperclass((java.lang.Class) wildcardClass89);
        enhancer69.setSuperclass((java.lang.Class) wildcardClass89);
        java.lang.Class[] classArray92 = new java.lang.Class[] { wildcardClass68, wildcardClass89 };
        enhancer34.setInterfaces(classArray92);
        enhancer0.setInterfaces(classArray92);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy95 = enhancer0.getStrategy();
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader98 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy99 = enhancer0.getStrategy();
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(callbackArray28);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(classLoader75);
        org.junit.Assert.assertNotNull(classLoader78);
        org.junit.Assert.assertNotNull(classLoader82);
        org.junit.Assert.assertNotNull(classLoader86);
        org.junit.Assert.assertNotNull(generatorStrategy88);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(classArray92);
        org.junit.Assert.assertNotNull(generatorStrategy95);
        org.junit.Assert.assertNotNull(classLoader98);
        org.junit.Assert.assertNotNull(generatorStrategy99);
    }

    @Test
    public void test09763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09763");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer3 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader4 = enhancer3.getClassLoader();
        enhancer3.setUseCache(true);
        boolean boolean7 = enhancer3.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        enhancer8.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader12 = enhancer8.getClassLoader();
        java.lang.Class class13 = null;
        enhancer8.setSuperclass(class13);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        enhancer15.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader20 = enhancer19.getClassLoader();
        enhancer15.setClassLoader(classLoader20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = enhancer15.getStrategy();
        java.lang.Class<?> wildcardClass23 = enhancer15.getClass();
        enhancer8.setSuperclass((java.lang.Class) wildcardClass23);
        enhancer3.setSuperclass((java.lang.Class) wildcardClass23);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass23);
        org.mockito.cglib.proxy.Callback callback27 = null;
        enhancer0.setCallback(callback27);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer29.setInterceptDuringConstruction(true);
        boolean boolean33 = enhancer29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = enhancer29.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        enhancer35.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader39 = enhancer35.getClassLoader();
        org.mockito.cglib.proxy.Callback callback40 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray41 = new org.mockito.cglib.proxy.Callback[] { callback40 };
        enhancer35.setCallbacks(callbackArray41);
        enhancer29.setCallbacks(callbackArray41);
        enhancer0.setCallbacks(callbackArray41);
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader46 = enhancer45.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer47 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        enhancer48.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer52 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader53 = enhancer52.getClassLoader();
        enhancer48.setClassLoader(classLoader53);
        enhancer47.setClassLoader(classLoader53);
        enhancer45.setClassLoader(classLoader53);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = enhancer45.getStrategy();
        java.lang.ClassLoader classLoader58 = enhancer45.getClassLoader();
        boolean boolean59 = enhancer45.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = enhancer45.getStrategy();
        enhancer0.setStrategy(generatorStrategy60);
        java.lang.Class<?> wildcardClass62 = generatorStrategy60.getClass();
        org.mockito.cglib.proxy.Callback callback63 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj64 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass62, callback63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(callbackArray41);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test09764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09764");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader2 = enhancer1.getClassLoader();
        enhancer1.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        enhancer1.setClassLoader(classLoader6);
        enhancer0.setClassLoader(classLoader6);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader13 = enhancer9.getClassLoader();
        enhancer0.setClassLoader(classLoader13);
        boolean boolean15 = enhancer0.getUseCache();
        enhancer0.setSerialVersionUID((java.lang.Long) 100L);
        enhancer0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = enhancer0.getNamingPolicy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class21 = enhancer0.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback types are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(namingPolicy20);
    }

    @Test
    public void test09765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09765");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        boolean boolean4 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        enhancer5.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader9 = enhancer5.getClassLoader();
        java.lang.Class class10 = null;
        enhancer5.setSuperclass(class10);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = enhancer5.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer13.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        enhancer17.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer21.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer21.setClassLoader(classLoader26);
        enhancer21.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader31 = enhancer30.getClassLoader();
        enhancer30.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        enhancer30.setClassLoader(classLoader35);
        enhancer30.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = enhancer30.getNamingPolicy();
        enhancer21.setNamingPolicy(namingPolicy39);
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader42 = enhancer41.getClassLoader();
        enhancer41.setUseCache(true);
        boolean boolean45 = enhancer41.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader47 = enhancer46.getClassLoader();
        enhancer46.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader50 = enhancer46.getClassLoader();
        java.lang.Class class51 = null;
        enhancer46.setSuperclass(class51);
        org.mockito.cglib.proxy.Enhancer enhancer53 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader54 = enhancer53.getClassLoader();
        enhancer53.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader58 = enhancer57.getClassLoader();
        enhancer53.setClassLoader(classLoader58);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = enhancer53.getStrategy();
        java.lang.Class<?> wildcardClass61 = enhancer53.getClass();
        enhancer46.setSuperclass((java.lang.Class) wildcardClass61);
        enhancer41.setSuperclass((java.lang.Class) wildcardClass61);
        boolean boolean64 = namingPolicy39.equals((java.lang.Object) enhancer41);
        enhancer17.setNamingPolicy(namingPolicy39);
        enhancer13.setNamingPolicy(namingPolicy39);
        enhancer5.setNamingPolicy(namingPolicy39);
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = enhancer5.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy68);
        enhancer0.setAttemptLoad(false);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(namingPolicy68);
    }

    @Test
    public void test09766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09766");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        enhancer5.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader9 = enhancer5.getClassLoader();
        org.mockito.cglib.proxy.Callback callback10 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray11 = new org.mockito.cglib.proxy.Callback[] { callback10 };
        enhancer5.setCallbacks(callbackArray11);
        enhancer0.setCallbacks(callbackArray11);
        enhancer0.setInterceptDuringConstruction(false);
        enhancer0.setInterceptDuringConstruction(false);
        boolean boolean18 = enhancer0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj19 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(callbackArray11);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test09767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09767");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer9.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer9.getStrategy();
        enhancer0.setStrategy(generatorStrategy16);
        boolean boolean18 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader20 = enhancer19.getClassLoader();
        enhancer19.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader23 = enhancer19.getClassLoader();
        java.lang.Class class24 = null;
        enhancer19.setSuperclass(class24);
        enhancer19.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader29 = enhancer28.getClassLoader();
        enhancer28.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        enhancer28.setClassLoader(classLoader33);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = enhancer28.getStrategy();
        enhancer19.setStrategy(generatorStrategy35);
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        enhancer37.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader42 = enhancer41.getClassLoader();
        enhancer37.setClassLoader(classLoader42);
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader45 = enhancer44.getClassLoader();
        enhancer44.setInterceptDuringConstruction(true);
        boolean boolean48 = enhancer44.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = enhancer44.getStrategy();
        java.lang.Class[] classArray50 = new java.lang.Class[] {};
        enhancer44.setInterfaces(classArray50);
        enhancer37.setInterfaces(classArray50);
        enhancer19.setInterfaces(classArray50);
        enhancer0.setInterfaces(classArray50);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter55 = null;
        enhancer0.setCallbackFilter(callbackFilter55);
        org.mockito.cglib.proxy.Callback callback57 = null;
        enhancer0.setCallback(callback57);
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class61 = enhancer0.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: createClass does not accept callbacks");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(classArray50);
    }

    @Test
    public void test09768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09768");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader11 = enhancer10.getClassLoader();
        enhancer10.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer10.setClassLoader(classLoader15);
        enhancer9.setClassLoader(classLoader15);
        enhancer0.setClassLoader(classLoader15);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter21 = null;
        enhancer0.setCallbackFilter(callbackFilter21);
        java.lang.Class<?> wildcardClass23 = enhancer0.getClass();
        boolean boolean24 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass23);
        boolean boolean25 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass23);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        enhancer26.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader31 = enhancer30.getClassLoader();
        enhancer26.setClassLoader(classLoader31);
        enhancer26.setUseCache(false);
        java.lang.ClassLoader classLoader35 = enhancer26.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = enhancer26.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = enhancer26.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = enhancer26.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader40 = enhancer39.getClassLoader();
        enhancer39.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader44 = enhancer43.getClassLoader();
        enhancer39.setClassLoader(classLoader44);
        enhancer39.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = enhancer39.getNamingPolicy();
        boolean boolean49 = enhancer39.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer50 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader51 = enhancer50.getClassLoader();
        enhancer50.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader54 = enhancer50.getClassLoader();
        java.lang.Class class55 = null;
        enhancer50.setSuperclass(class55);
        java.lang.ClassLoader classLoader57 = enhancer50.getClassLoader();
        enhancer39.setClassLoader(classLoader57);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = enhancer39.getStrategy();
        enhancer26.setStrategy(generatorStrategy59);
        org.mockito.cglib.proxy.Enhancer enhancer61 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader62 = enhancer61.getClassLoader();
        enhancer61.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader65 = enhancer61.getClassLoader();
        java.lang.Class class66 = null;
        enhancer61.setSuperclass(class66);
        enhancer61.setInterceptDuringConstruction(true);
        enhancer61.setSerialVersionUID((java.lang.Long) 10L);
        boolean boolean72 = generatorStrategy59.equals((java.lang.Object) enhancer61);
        org.mockito.cglib.proxy.Enhancer enhancer73 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader74 = enhancer73.getClassLoader();
        enhancer73.setInterceptDuringConstruction(true);
        boolean boolean77 = enhancer73.getUseCache();
        boolean boolean78 = enhancer73.getAttemptLoad();
        enhancer73.setUseCache(true);
        java.lang.ClassLoader classLoader81 = enhancer73.getClassLoader();
        boolean boolean82 = enhancer73.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer83 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader84 = enhancer83.getClassLoader();
        enhancer83.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader87 = enhancer83.getClassLoader();
        org.mockito.cglib.proxy.Callback callback88 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray89 = new org.mockito.cglib.proxy.Callback[] { callback88 };
        enhancer83.setCallbacks(callbackArray89);
        enhancer73.setCallbacks(callbackArray89);
        enhancer61.setCallbacks(callbackArray89);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerCallbacks((java.lang.Class) wildcardClass23, callbackArray89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.proxy.Enhancer is not an enhanced class");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(classLoader81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(classLoader84);
        org.junit.Assert.assertNotNull(classLoader87);
        org.junit.Assert.assertNotNull(callbackArray89);
    }

    @Test
    public void test09769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09769");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Callback callback5 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray6 = new org.mockito.cglib.proxy.Callback[] { callback5 };
        enhancer0.setCallbacks(callbackArray6);
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter11 = null;
        enhancer0.setCallbackFilter(callbackFilter11);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = enhancer0.getStrategy();
        boolean boolean14 = enhancer0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        enhancer16.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer16.setClassLoader(classLoader21);
        enhancer16.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer25.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer25.setClassLoader(classLoader30);
        enhancer25.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = enhancer25.getNamingPolicy();
        enhancer16.setNamingPolicy(namingPolicy34);
        enhancer16.setInterceptDuringConstruction(true);
        enhancer16.setSerialVersionUID((java.lang.Long) 100L);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        enhancer40.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader45 = enhancer44.getClassLoader();
        enhancer40.setClassLoader(classLoader45);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = enhancer40.getStrategy();
        enhancer40.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer50 = new org.mockito.cglib.proxy.Enhancer();
        enhancer50.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = enhancer50.getStrategy();
        enhancer40.setStrategy(generatorStrategy53);
        enhancer16.setStrategy(generatorStrategy53);
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        enhancer56.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = enhancer56.getStrategy();
        enhancer16.setStrategy(generatorStrategy59);
        enhancer16.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = enhancer16.getStrategy();
        boolean boolean64 = namingPolicy15.equals((java.lang.Object) generatorStrategy63);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(callbackArray6);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test09770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09770");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader11 = enhancer7.getClassLoader();
        java.lang.Class class12 = null;
        enhancer7.setSuperclass(class12);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        enhancer14.setClassLoader(classLoader19);
        enhancer14.setUseCache(false);
        java.lang.ClassLoader classLoader23 = enhancer14.getClassLoader();
        enhancer7.setClassLoader(classLoader23);
        enhancer0.setClassLoader(classLoader23);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        enhancer26.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader31 = enhancer30.getClassLoader();
        enhancer26.setClassLoader(classLoader31);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = enhancer26.getStrategy();
        java.lang.Class<?> wildcardClass34 = enhancer26.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        enhancer35.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader39 = enhancer35.getClassLoader();
        java.lang.Class class40 = null;
        enhancer35.setSuperclass(class40);
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader43 = enhancer42.getClassLoader();
        enhancer42.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader47 = enhancer46.getClassLoader();
        enhancer42.setClassLoader(classLoader47);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = enhancer42.getStrategy();
        java.lang.Class<?> wildcardClass50 = enhancer42.getClass();
        enhancer35.setSuperclass((java.lang.Class) wildcardClass50);
        java.lang.Class[] classArray52 = new java.lang.Class[] { wildcardClass34, wildcardClass50 };
        enhancer0.setInterfaces(classArray52);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter54 = null;
        enhancer0.setCallbackFilter(callbackFilter54);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter56 = null;
        enhancer0.setCallbackFilter(callbackFilter56);
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = enhancer0.getNamingPolicy();
        java.lang.ClassLoader classLoader59 = enhancer0.getClassLoader();
        boolean boolean60 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Callback callback61 = null;
        enhancer0.setCallback(callback61);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test09771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09771");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        java.lang.ClassLoader classLoader7 = enhancer0.getClassLoader();
        boolean boolean8 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader13 = enhancer9.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader18 = enhancer14.getClassLoader();
        org.mockito.cglib.proxy.Callback callback19 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray20 = new org.mockito.cglib.proxy.Callback[] { callback19 };
        enhancer14.setCallbacks(callbackArray20);
        enhancer9.setCallbacks(callbackArray20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer9.getStrategy();
        enhancer0.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer25.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer25.setClassLoader(classLoader30);
        enhancer25.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        enhancer34.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader39 = enhancer38.getClassLoader();
        enhancer34.setClassLoader(classLoader39);
        enhancer34.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = enhancer34.getNamingPolicy();
        enhancer25.setNamingPolicy(namingPolicy43);
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader46 = enhancer45.getClassLoader();
        enhancer45.setInterceptDuringConstruction(true);
        boolean boolean49 = namingPolicy43.equals((java.lang.Object) enhancer45);
        java.lang.ClassLoader classLoader50 = enhancer45.getClassLoader();
        enhancer0.setClassLoader(classLoader50);
        org.mockito.cglib.proxy.Enhancer enhancer52 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer53 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader54 = enhancer53.getClassLoader();
        enhancer53.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader58 = enhancer57.getClassLoader();
        enhancer53.setClassLoader(classLoader58);
        enhancer52.setClassLoader(classLoader58);
        org.mockito.cglib.proxy.Enhancer enhancer61 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader62 = enhancer61.getClassLoader();
        enhancer61.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader65 = enhancer61.getClassLoader();
        enhancer52.setClassLoader(classLoader65);
        enhancer0.setClassLoader(classLoader65);
        boolean boolean68 = enhancer0.getUseCache();
        enhancer0.setInterceptDuringConstruction(false);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(callbackArray20);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test09772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09772");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback3 = null;
        enhancer0.setCallback(callback3);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Callback callback8 = null;
        enhancer0.setCallback(callback8);
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        enhancer12.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader16 = enhancer12.getClassLoader();
        java.lang.Class class17 = null;
        enhancer12.setSuperclass(class17);
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader20 = enhancer19.getClassLoader();
        enhancer19.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader24 = enhancer23.getClassLoader();
        enhancer19.setClassLoader(classLoader24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = enhancer19.getStrategy();
        java.lang.Class<?> wildcardClass27 = enhancer19.getClass();
        enhancer12.setSuperclass((java.lang.Class) wildcardClass27);
        enhancer12.setAttemptLoad(false);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer12.setClassLoader(classLoader32);
        enhancer12.setSerialVersionUID((java.lang.Long) 1L);
        java.lang.ClassLoader classLoader36 = enhancer12.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        enhancer37.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader42 = enhancer41.getClassLoader();
        enhancer37.setClassLoader(classLoader42);
        enhancer37.setUseCache(false);
        java.lang.ClassLoader classLoader46 = enhancer37.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = enhancer37.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = enhancer37.getNamingPolicy();
        java.lang.ClassLoader classLoader49 = enhancer37.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer50 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader51 = enhancer50.getClassLoader();
        enhancer50.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer54 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader55 = enhancer54.getClassLoader();
        enhancer50.setClassLoader(classLoader55);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = enhancer50.getStrategy();
        enhancer50.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer60 = new org.mockito.cglib.proxy.Enhancer();
        enhancer60.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = enhancer60.getStrategy();
        enhancer50.setStrategy(generatorStrategy63);
        org.mockito.cglib.proxy.Enhancer enhancer65 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader66 = enhancer65.getClassLoader();
        enhancer65.setInterceptDuringConstruction(true);
        boolean boolean69 = enhancer65.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = enhancer65.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer71 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader72 = enhancer71.getClassLoader();
        enhancer71.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader75 = enhancer71.getClassLoader();
        org.mockito.cglib.proxy.Callback callback76 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray77 = new org.mockito.cglib.proxy.Callback[] { callback76 };
        enhancer71.setCallbacks(callbackArray77);
        enhancer65.setCallbacks(callbackArray77);
        enhancer50.setCallbacks(callbackArray77);
        enhancer37.setCallbacks(callbackArray77);
        enhancer12.setCallbacks(callbackArray77);
        enhancer0.setCallbacks(callbackArray77);
        org.mockito.cglib.proxy.Callback callback84 = null;
        enhancer0.setCallback(callback84);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter86 = null;
        enhancer0.setCallbackFilter(callbackFilter86);
        enhancer0.setUseCache(true);
        org.mockito.cglib.proxy.Callback callback90 = null;
        enhancer0.setCallback(callback90);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class92 = enhancer0.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: createClass does not accept callbacks");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertNotNull(classLoader72);
        org.junit.Assert.assertNotNull(classLoader75);
        org.junit.Assert.assertNotNull(callbackArray77);
    }

    @Test
    public void test09773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09773");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        boolean boolean11 = enhancer7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer7.getStrategy();
        enhancer0.setStrategy(generatorStrategy12);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader18 = enhancer14.getClassLoader();
        java.lang.Class class19 = null;
        enhancer14.setSuperclass(class19);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer21.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer21.setClassLoader(classLoader26);
        enhancer21.setUseCache(false);
        java.lang.ClassLoader classLoader30 = enhancer21.getClassLoader();
        enhancer14.setClassLoader(classLoader30);
        boolean boolean32 = generatorStrategy12.equals((java.lang.Object) enhancer14);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = enhancer14.getNamingPolicy();
        boolean boolean34 = enhancer14.getAttemptLoad();
        enhancer14.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        enhancer37.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader42 = enhancer41.getClassLoader();
        enhancer37.setClassLoader(classLoader42);
        enhancer37.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = enhancer37.getNamingPolicy();
        boolean boolean47 = enhancer37.getUseCache();
        boolean boolean48 = enhancer37.getAttemptLoad();
        org.mockito.cglib.proxy.Callback callback49 = null;
        enhancer37.setCallback(callback49);
        java.lang.ClassLoader classLoader51 = enhancer37.getClassLoader();
        enhancer14.setClassLoader(classLoader51);
        enhancer14.setAttemptLoad(false);
        enhancer14.setUseFactory(false);
        org.mockito.asm.ClassVisitor classVisitor57 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer14.generateClass(classVisitor57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(classLoader51);
    }

    @Test
    public void test09774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09774");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        boolean boolean4 = enhancer0.getUseCache();
        enhancer0.setAttemptLoad(false);
        enhancer0.setSerialVersionUID((java.lang.Long) (-1L));
        enhancer0.setInterceptDuringConstruction(false);
        boolean boolean11 = enhancer0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer0.getStrategy();
        enhancer0.setUseCache(false);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(generatorStrategy12);
    }

    @Test
    public void test09775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09775");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        boolean boolean4 = enhancer0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        boolean boolean6 = enhancer0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = enhancer0.getStrategy();
        boolean boolean8 = enhancer0.getUseCache();
        enhancer0.setUseFactory(false);
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Callback callback13 = null;
        enhancer0.setCallback(callback13);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test09776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09776");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer9.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer9.getStrategy();
        enhancer0.setStrategy(generatorStrategy16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = enhancer0.getStrategy();
        enhancer0.setAttemptLoad(false);
        enhancer0.setAttemptLoad(true);
        java.lang.Class[] classArray23 = null;
        enhancer0.setInterfaces(classArray23);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer25.setInterceptDuringConstruction(true);
        boolean boolean29 = enhancer25.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = enhancer25.getStrategy();
        org.mockito.cglib.proxy.Callback callback31 = null;
        enhancer25.setCallback(callback31);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = enhancer25.getStrategy();
        enhancer0.setStrategy(generatorStrategy33);
        boolean boolean35 = enhancer0.getUseCache();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test09777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09777");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer7.setClassLoader(classLoader12);
        enhancer7.setUseCache(false);
        java.lang.ClassLoader classLoader16 = enhancer7.getClassLoader();
        enhancer0.setClassLoader(classLoader16);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter18 = null;
        enhancer0.setCallbackFilter(callbackFilter18);
        enhancer0.setAttemptLoad(false);
        boolean boolean22 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader24 = enhancer23.getClassLoader();
        enhancer23.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader27 = enhancer23.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader29 = enhancer28.getClassLoader();
        enhancer28.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader32 = enhancer28.getClassLoader();
        org.mockito.cglib.proxy.Callback callback33 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray34 = new org.mockito.cglib.proxy.Callback[] { callback33 };
        enhancer28.setCallbacks(callbackArray34);
        enhancer23.setCallbacks(callbackArray34);
        boolean boolean37 = enhancer23.getUseCache();
        java.lang.ClassLoader classLoader38 = enhancer23.getClassLoader();
        java.lang.Class<?> wildcardClass39 = enhancer23.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass39);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj41 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(callbackArray34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test09778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09778");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter7 = null;
        enhancer0.setCallbackFilter(callbackFilter7);
        enhancer0.setUseCache(false);
        boolean boolean11 = enhancer0.getUseCache();
        boolean boolean12 = enhancer0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = enhancer0.getStrategy();
        boolean boolean14 = enhancer0.getUseCache();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test09779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09779");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        boolean boolean2 = enhancer0.getAttemptLoad();
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = null;
        enhancer0.setStrategy(generatorStrategy5);
        org.mockito.asm.ClassVisitor classVisitor7 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test09780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09780");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter7 = null;
        enhancer0.setCallbackFilter(callbackFilter7);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer11.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        enhancer11.setClassLoader(classLoader16);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter18 = null;
        enhancer11.setCallbackFilter(callbackFilter18);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer20.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        enhancer20.setClassLoader(classLoader25);
        enhancer20.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer29.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader34 = enhancer33.getClassLoader();
        enhancer29.setClassLoader(classLoader34);
        enhancer29.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = enhancer29.getNamingPolicy();
        enhancer20.setNamingPolicy(namingPolicy38);
        enhancer11.setNamingPolicy(namingPolicy38);
        enhancer0.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = enhancer0.getNamingPolicy();
        enhancer0.setUseCache(false);
        org.mockito.asm.ClassVisitor classVisitor45 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(namingPolicy42);
    }

    @Test
    public void test09781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09781");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback3 = null;
        enhancer0.setCallback(callback3);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter5 = null;
        enhancer0.setCallbackFilter(callbackFilter5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = enhancer0.getStrategy();
        boolean boolean8 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Callback callback9 = null;
        enhancer0.setCallback(callback9);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        boolean boolean13 = enhancer11.getAttemptLoad();
        java.lang.ClassLoader classLoader14 = enhancer11.getClassLoader();
        enhancer0.setClassLoader(classLoader14);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        enhancer16.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer16.setClassLoader(classLoader21);
        enhancer16.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = enhancer16.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy25);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = enhancer0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = enhancer0.getStrategy();
        boolean boolean29 = enhancer0.getAttemptLoad();
        boolean boolean30 = enhancer0.getAttemptLoad();
        boolean boolean31 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        enhancer32.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader36 = enhancer32.getClassLoader();
        java.lang.Class class37 = null;
        enhancer32.setSuperclass(class37);
        enhancer32.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader42 = enhancer41.getClassLoader();
        enhancer41.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader45 = enhancer41.getClassLoader();
        java.lang.Class class46 = null;
        enhancer41.setSuperclass(class46);
        enhancer41.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer50 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader51 = enhancer50.getClassLoader();
        enhancer50.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer54 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader55 = enhancer54.getClassLoader();
        enhancer50.setClassLoader(classLoader55);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = enhancer50.getStrategy();
        enhancer41.setStrategy(generatorStrategy57);
        enhancer32.setStrategy(generatorStrategy57);
        boolean boolean60 = enhancer32.getUseCache();
        enhancer32.setUseFactory(true);
        java.lang.Class<?> wildcardClass63 = enhancer32.getClass();
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackType((java.lang.Class) wildcardClass63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Unknown callback type class org.mockito.cglib.proxy.Enhancer");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test09782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09782");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer9.setClassLoader(classLoader14);
        enhancer9.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer9.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy18);
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader22 = enhancer0.getClassLoader();
        java.lang.Class<?> wildcardClass23 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        enhancer24.setInterceptDuringConstruction(true);
        boolean boolean28 = enhancer24.getUseCache();
        boolean boolean29 = enhancer24.getAttemptLoad();
        enhancer24.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        enhancer32.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        enhancer32.setClassLoader(classLoader37);
        enhancer32.setUseCache(false);
        java.lang.ClassLoader classLoader41 = enhancer32.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader43 = enhancer42.getClassLoader();
        enhancer42.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader46 = enhancer42.getClassLoader();
        org.mockito.cglib.proxy.Callback callback47 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray48 = new org.mockito.cglib.proxy.Callback[] { callback47 };
        enhancer42.setCallbacks(callbackArray48);
        enhancer42.setSerialVersionUID((java.lang.Long) 0L);
        enhancer42.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.proxy.Enhancer enhancer54 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader55 = enhancer54.getClassLoader();
        enhancer54.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader58 = enhancer54.getClassLoader();
        org.mockito.cglib.proxy.Callback callback59 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray60 = new org.mockito.cglib.proxy.Callback[] { callback59 };
        enhancer54.setCallbacks(callbackArray60);
        org.mockito.cglib.proxy.Enhancer enhancer62 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader63 = enhancer62.getClassLoader();
        enhancer62.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader66 = enhancer62.getClassLoader();
        java.lang.Class class67 = null;
        enhancer62.setSuperclass(class67);
        java.lang.Class<?> wildcardClass69 = enhancer62.getClass();
        boolean boolean70 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass69);
        enhancer54.setSuperclass((java.lang.Class) wildcardClass69);
        enhancer42.setSuperclass((java.lang.Class) wildcardClass69);
        java.lang.Class[] classArray73 = new java.lang.Class[] { wildcardClass69 };
        enhancer32.setInterfaces(classArray73);
        enhancer24.setInterfaces(classArray73);
        org.mockito.cglib.proxy.Callback callback76 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj77 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass23, classArray73, callback76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(callbackArray48);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(callbackArray60);
        org.junit.Assert.assertNotNull(classLoader63);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(classArray73);
    }

    @Test
    public void test09783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09783");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer7.setClassLoader(classLoader12);
        enhancer7.setUseCache(false);
        java.lang.ClassLoader classLoader16 = enhancer7.getClassLoader();
        enhancer0.setClassLoader(classLoader16);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        enhancer18.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader22 = enhancer18.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer18.getStrategy();
        enhancer0.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer25.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer25.setClassLoader(classLoader30);
        enhancer25.setUseCache(false);
        java.lang.ClassLoader classLoader34 = enhancer25.getClassLoader();
        enhancer25.setAttemptLoad(true);
        enhancer25.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader40 = enhancer39.getClassLoader();
        enhancer39.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader43 = enhancer39.getClassLoader();
        java.lang.Class class44 = null;
        enhancer39.setSuperclass(class44);
        enhancer39.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        enhancer48.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer52 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader53 = enhancer52.getClassLoader();
        enhancer48.setClassLoader(classLoader53);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = enhancer48.getStrategy();
        enhancer39.setStrategy(generatorStrategy55);
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader58 = enhancer57.getClassLoader();
        enhancer57.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer61 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader62 = enhancer61.getClassLoader();
        enhancer57.setClassLoader(classLoader62);
        org.mockito.cglib.proxy.Enhancer enhancer64 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader65 = enhancer64.getClassLoader();
        enhancer64.setInterceptDuringConstruction(true);
        boolean boolean68 = enhancer64.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = enhancer64.getStrategy();
        java.lang.Class[] classArray70 = new java.lang.Class[] {};
        enhancer64.setInterfaces(classArray70);
        enhancer57.setInterfaces(classArray70);
        enhancer39.setInterfaces(classArray70);
        enhancer25.setInterfaces(classArray70);
        enhancer0.setInterfaces(classArray70);
        org.mockito.cglib.proxy.Callback callback76 = null;
        enhancer0.setCallback(callback76);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(generatorStrategy69);
        org.junit.Assert.assertNotNull(classArray70);
    }

    @Test
    public void test09784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09784");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback3 = null;
        enhancer0.setCallback(callback3);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Callback callback8 = null;
        enhancer0.setCallback(callback8);
        enhancer0.setInterceptDuringConstruction(false);
        enhancer0.setUseFactory(false);
        enhancer0.setSerialVersionUID((java.lang.Long) 100L);
        boolean boolean16 = enhancer0.getAttemptLoad();
        java.lang.ClassLoader classLoader17 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = enhancer0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor19 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(generatorStrategy18);
    }

    @Test
    public void test09785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09785");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = enhancer0.getNamingPolicy();
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer11.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader15 = enhancer11.getClassLoader();
        java.lang.Class class16 = null;
        enhancer11.setSuperclass(class16);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        enhancer18.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer18.setClassLoader(classLoader23);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = enhancer18.getStrategy();
        java.lang.Class<?> wildcardClass26 = enhancer18.getClass();
        enhancer11.setSuperclass((java.lang.Class) wildcardClass26);
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader29 = enhancer28.getClassLoader();
        enhancer28.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        enhancer28.setClassLoader(classLoader33);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = enhancer28.getStrategy();
        enhancer11.setStrategy(generatorStrategy35);
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        enhancer37.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader41 = enhancer37.getClassLoader();
        java.lang.Class class42 = null;
        enhancer37.setSuperclass(class42);
        enhancer37.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader47 = enhancer46.getClassLoader();
        enhancer46.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer50 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader51 = enhancer50.getClassLoader();
        enhancer46.setClassLoader(classLoader51);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = enhancer46.getStrategy();
        enhancer37.setStrategy(generatorStrategy53);
        java.lang.Object obj55 = null;
        boolean boolean56 = generatorStrategy53.equals(obj55);
        enhancer11.setStrategy(generatorStrategy53);
        org.mockito.cglib.proxy.Enhancer enhancer58 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader59 = enhancer58.getClassLoader();
        enhancer58.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader62 = enhancer58.getClassLoader();
        boolean boolean63 = generatorStrategy53.equals((java.lang.Object) enhancer58);
        boolean boolean64 = namingPolicy10.equals((java.lang.Object) enhancer58);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test09786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09786");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        boolean boolean11 = enhancer7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer7.getStrategy();
        enhancer0.setStrategy(generatorStrategy12);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader18 = enhancer14.getClassLoader();
        java.lang.Class class19 = null;
        enhancer14.setSuperclass(class19);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer21.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer21.setClassLoader(classLoader26);
        enhancer21.setUseCache(false);
        java.lang.ClassLoader classLoader30 = enhancer21.getClassLoader();
        enhancer14.setClassLoader(classLoader30);
        boolean boolean32 = generatorStrategy12.equals((java.lang.Object) enhancer14);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = enhancer14.getNamingPolicy();
        boolean boolean34 = enhancer14.getAttemptLoad();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter35 = null;
        enhancer14.setCallbackFilter(callbackFilter35);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter37 = null;
        enhancer14.setCallbackFilter(callbackFilter37);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = enhancer14.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = enhancer14.getStrategy();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(generatorStrategy40);
    }

    @Test
    public void test09787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09787");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer9.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer9.getStrategy();
        enhancer0.setStrategy(generatorStrategy16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = enhancer0.getStrategy();
        enhancer0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        enhancer0.setNamingPolicy(namingPolicy21);
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader24 = enhancer23.getClassLoader();
        enhancer23.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader27 = enhancer23.getClassLoader();
        java.lang.Class class28 = null;
        enhancer23.setSuperclass(class28);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader31 = enhancer30.getClassLoader();
        enhancer30.setInterceptDuringConstruction(true);
        boolean boolean34 = enhancer30.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = enhancer30.getStrategy();
        enhancer23.setStrategy(generatorStrategy35);
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        enhancer37.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader41 = enhancer37.getClassLoader();
        java.lang.Class class42 = null;
        enhancer37.setSuperclass(class42);
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader45 = enhancer44.getClassLoader();
        enhancer44.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        enhancer44.setClassLoader(classLoader49);
        enhancer44.setUseCache(false);
        java.lang.ClassLoader classLoader53 = enhancer44.getClassLoader();
        enhancer37.setClassLoader(classLoader53);
        boolean boolean55 = generatorStrategy35.equals((java.lang.Object) enhancer37);
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader57 = enhancer56.getClassLoader();
        enhancer56.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader60 = enhancer56.getClassLoader();
        java.lang.Class<?> wildcardClass61 = classLoader60.getClass();
        enhancer37.setSuperclass((java.lang.Class) wildcardClass61);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass61);
        java.lang.ClassLoader classLoader64 = null;
        enhancer0.setClassLoader(classLoader64);
        enhancer0.setAttemptLoad(false);
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.proxy.Callback callback70 = null;
        enhancer0.setCallback(callback70);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertNotNull(classLoader60);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test09788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09788");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = enhancer0.getNamingPolicy();
        boolean boolean10 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer11.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader15 = enhancer11.getClassLoader();
        java.lang.Class class16 = null;
        enhancer11.setSuperclass(class16);
        java.lang.ClassLoader classLoader18 = enhancer11.getClassLoader();
        enhancer0.setClassLoader(classLoader18);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = enhancer0.getStrategy();
        boolean boolean21 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer22.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader26 = enhancer22.getClassLoader();
        java.lang.Class class27 = null;
        enhancer22.setSuperclass(class27);
        enhancer22.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer31.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        enhancer31.setClassLoader(classLoader36);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = enhancer31.getStrategy();
        enhancer22.setStrategy(generatorStrategy38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = enhancer22.getStrategy();
        enhancer0.setStrategy(generatorStrategy40);
        org.mockito.cglib.proxy.Callback callback42 = null;
        enhancer0.setCallback(callback42);
        enhancer0.setUseFactory(false);
        boolean boolean46 = enhancer0.getAttemptLoad();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test09789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09789");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = enhancer0.getStrategy();
        enhancer0.setInterceptDuringConstruction(true);
        enhancer0.setAttemptLoad(false);
        enhancer0.setSerialVersionUID((java.lang.Long) 1L);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Callback callback16 = null;
        enhancer0.setCallback(callback16);
        boolean boolean18 = enhancer0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = null;
        enhancer0.setNamingPolicy(namingPolicy19);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer22.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        enhancer22.setClassLoader(classLoader27);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter29 = null;
        enhancer22.setCallbackFilter(callbackFilter29);
        enhancer22.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader34 = enhancer33.getClassLoader();
        enhancer33.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        enhancer33.setClassLoader(classLoader38);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter40 = null;
        enhancer33.setCallbackFilter(callbackFilter40);
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader43 = enhancer42.getClassLoader();
        enhancer42.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader47 = enhancer46.getClassLoader();
        enhancer42.setClassLoader(classLoader47);
        enhancer42.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer51 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader52 = enhancer51.getClassLoader();
        enhancer51.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        enhancer51.setClassLoader(classLoader56);
        enhancer51.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = enhancer51.getNamingPolicy();
        enhancer42.setNamingPolicy(namingPolicy60);
        enhancer33.setNamingPolicy(namingPolicy60);
        enhancer22.setNamingPolicy(namingPolicy60);
        org.mockito.cglib.proxy.Callback callback64 = null;
        enhancer22.setCallback(callback64);
        boolean boolean66 = namingPolicy21.equals((java.lang.Object) enhancer22);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test09790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09790");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setUseFactory(false);
        org.mockito.cglib.proxy.Enhancer enhancer3 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader4 = enhancer3.getClassLoader();
        enhancer3.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer3.setClassLoader(classLoader8);
        enhancer3.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        enhancer12.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        enhancer12.setClassLoader(classLoader17);
        enhancer12.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = enhancer12.getNamingPolicy();
        enhancer3.setNamingPolicy(namingPolicy21);
        enhancer3.setInterceptDuringConstruction(true);
        enhancer3.setSerialVersionUID((java.lang.Long) 100L);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader28 = enhancer27.getClassLoader();
        enhancer27.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer27.setClassLoader(classLoader32);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = enhancer27.getStrategy();
        enhancer27.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        enhancer37.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = enhancer37.getStrategy();
        enhancer27.setStrategy(generatorStrategy40);
        enhancer3.setStrategy(generatorStrategy40);
        enhancer0.setStrategy(generatorStrategy40);
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader45 = enhancer44.getClassLoader();
        enhancer44.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        enhancer44.setClassLoader(classLoader49);
        enhancer44.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = enhancer44.getNamingPolicy();
        boolean boolean54 = enhancer44.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        enhancer55.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader59 = enhancer55.getClassLoader();
        java.lang.Class class60 = null;
        enhancer55.setSuperclass(class60);
        java.lang.ClassLoader classLoader62 = enhancer55.getClassLoader();
        enhancer44.setClassLoader(classLoader62);
        enhancer44.setSerialVersionUID((java.lang.Long) (-1L));
        enhancer44.setSerialVersionUID((java.lang.Long) 1L);
        boolean boolean68 = enhancer44.getUseCache();
        boolean boolean69 = generatorStrategy40.equals((java.lang.Object) enhancer44);
        enhancer44.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer72 = new org.mockito.cglib.proxy.Enhancer();
        enhancer72.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback75 = null;
        enhancer72.setCallback(callback75);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter77 = null;
        enhancer72.setCallbackFilter(callbackFilter77);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy79 = enhancer72.getStrategy();
        java.lang.Class class80 = null;
        enhancer72.setSuperclass(class80);
        enhancer72.setUseFactory(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy84 = enhancer72.getNamingPolicy();
        enhancer44.setNamingPolicy(namingPolicy84);
        enhancer44.setUseFactory(false);
        boolean boolean88 = enhancer44.getUseCache();
        enhancer44.setUseFactory(false);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(generatorStrategy79);
        org.junit.Assert.assertNotNull(namingPolicy84);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test09791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09791");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer7.setClassLoader(classLoader12);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = enhancer7.getStrategy();
        java.lang.Class<?> wildcardClass15 = enhancer7.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass15);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        enhancer17.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer17.setClassLoader(classLoader22);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = enhancer17.getStrategy();
        enhancer0.setStrategy(generatorStrategy24);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        enhancer26.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback29 = null;
        enhancer26.setCallback(callback29);
        enhancer26.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = enhancer26.getNamingPolicy();
        org.mockito.cglib.proxy.Callback callback34 = null;
        enhancer26.setCallback(callback34);
        boolean boolean36 = enhancer26.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        enhancer26.setClassLoader(classLoader38);
        enhancer0.setClassLoader(classLoader38);
        enhancer0.setAttemptLoad(true);
        enhancer0.setInterceptDuringConstruction(true);
        enhancer0.setUseFactory(false);
        java.lang.Class class47 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackType(class47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(classLoader38);
    }

    @Test
    public void test09792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09792");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        java.lang.ClassLoader classLoader7 = enhancer0.getClassLoader();
        boolean boolean8 = enhancer0.getAttemptLoad();
        boolean boolean9 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader11 = enhancer10.getClassLoader();
        enhancer10.setInterceptDuringConstruction(true);
        boolean boolean14 = enhancer10.getUseCache();
        enhancer10.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        enhancer17.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer17.setClassLoader(classLoader22);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = enhancer17.getStrategy();
        enhancer17.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        enhancer27.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = enhancer27.getStrategy();
        enhancer17.setStrategy(generatorStrategy30);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        enhancer32.setInterceptDuringConstruction(true);
        boolean boolean36 = enhancer32.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = enhancer32.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader39 = enhancer38.getClassLoader();
        enhancer38.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader42 = enhancer38.getClassLoader();
        org.mockito.cglib.proxy.Callback callback43 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray44 = new org.mockito.cglib.proxy.Callback[] { callback43 };
        enhancer38.setCallbacks(callbackArray44);
        enhancer32.setCallbacks(callbackArray44);
        enhancer17.setCallbacks(callbackArray44);
        java.lang.Class<?> wildcardClass48 = callbackArray44.getClass();
        boolean boolean49 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass48);
        enhancer10.setSuperclass((java.lang.Class) wildcardClass48);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass48);
        enhancer0.setUseCache(false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class54 = enhancer0.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback types are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(callbackArray44);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test09793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09793");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader11 = enhancer7.getClassLoader();
        java.lang.Class class12 = null;
        enhancer7.setSuperclass(class12);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        enhancer14.setClassLoader(classLoader19);
        enhancer14.setUseCache(false);
        java.lang.ClassLoader classLoader23 = enhancer14.getClassLoader();
        enhancer7.setClassLoader(classLoader23);
        enhancer0.setClassLoader(classLoader23);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        enhancer26.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader31 = enhancer30.getClassLoader();
        enhancer26.setClassLoader(classLoader31);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = enhancer26.getStrategy();
        java.lang.Class<?> wildcardClass34 = enhancer26.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        enhancer35.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader39 = enhancer35.getClassLoader();
        java.lang.Class class40 = null;
        enhancer35.setSuperclass(class40);
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader43 = enhancer42.getClassLoader();
        enhancer42.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader47 = enhancer46.getClassLoader();
        enhancer42.setClassLoader(classLoader47);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = enhancer42.getStrategy();
        java.lang.Class<?> wildcardClass50 = enhancer42.getClass();
        enhancer35.setSuperclass((java.lang.Class) wildcardClass50);
        java.lang.Class[] classArray52 = new java.lang.Class[] { wildcardClass34, wildcardClass50 };
        enhancer0.setInterfaces(classArray52);
        boolean boolean54 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        enhancer55.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader59 = enhancer55.getClassLoader();
        java.lang.Class class60 = null;
        enhancer55.setSuperclass(class60);
        enhancer55.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer64 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader65 = enhancer64.getClassLoader();
        enhancer64.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer68 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader69 = enhancer68.getClassLoader();
        enhancer64.setClassLoader(classLoader69);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = enhancer64.getStrategy();
        enhancer55.setStrategy(generatorStrategy71);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = enhancer55.getStrategy();
        enhancer55.setAttemptLoad(false);
        enhancer55.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader78 = enhancer55.getClassLoader();
        enhancer0.setClassLoader(classLoader78);
        enhancer0.setUseFactory(false);
        org.mockito.cglib.proxy.Callback callback82 = null;
        enhancer0.setCallback(callback82);
        org.mockito.cglib.core.NamingPolicy namingPolicy84 = enhancer0.getNamingPolicy();
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class87 = enhancer0.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: createClass does not accept callbacks");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(classLoader69);
        org.junit.Assert.assertNotNull(generatorStrategy71);
        org.junit.Assert.assertNotNull(generatorStrategy73);
        org.junit.Assert.assertNotNull(classLoader78);
        org.junit.Assert.assertNotNull(namingPolicy84);
    }

    @Test
    public void test09794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09794");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Callback callback5 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray6 = new org.mockito.cglib.proxy.Callback[] { callback5 };
        enhancer0.setCallbacks(callbackArray6);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        enhancer8.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader12 = enhancer8.getClassLoader();
        java.lang.Class class13 = null;
        enhancer8.setSuperclass(class13);
        java.lang.Class<?> wildcardClass15 = enhancer8.getClass();
        boolean boolean16 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass15);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass15);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter19 = null;
        enhancer0.setCallbackFilter(callbackFilter19);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer21.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer21.setClassLoader(classLoader26);
        enhancer21.setUseCache(false);
        java.lang.ClassLoader classLoader30 = enhancer21.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter31 = null;
        enhancer21.setCallbackFilter(callbackFilter31);
        enhancer21.setUseFactory(false);
        enhancer21.setAttemptLoad(false);
        java.lang.ClassLoader classLoader37 = enhancer21.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = enhancer21.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = enhancer21.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy39);
        org.mockito.cglib.proxy.Callback callback41 = null;
        enhancer0.setCallback(callback41);
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader44 = enhancer43.getClassLoader();
        enhancer43.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader47 = enhancer43.getClassLoader();
        java.lang.Class class48 = null;
        enhancer43.setSuperclass(class48);
        org.mockito.cglib.proxy.Enhancer enhancer50 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader51 = enhancer50.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = enhancer50.getStrategy();
        enhancer43.setStrategy(generatorStrategy52);
        boolean boolean54 = enhancer43.getAttemptLoad();
        enhancer43.setUseFactory(true);
        enhancer43.setInterceptDuringConstruction(true);
        boolean boolean59 = enhancer43.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = enhancer43.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy60);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(callbackArray6);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(namingPolicy60);
    }

    @Test
    public void test09795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09795");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Callback callback5 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray6 = new org.mockito.cglib.proxy.Callback[] { callback5 };
        enhancer0.setCallbacks(callbackArray6);
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        boolean boolean10 = enhancer0.getUseCache();
        enhancer0.setSerialVersionUID((java.lang.Long) 100L);
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        enhancer15.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader19 = enhancer15.getClassLoader();
        java.lang.Class class20 = null;
        enhancer15.setSuperclass(class20);
        java.lang.ClassLoader classLoader22 = enhancer15.getClassLoader();
        boolean boolean23 = enhancer15.getUseCache();
        enhancer15.setSerialVersionUID((java.lang.Long) 100L);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = enhancer15.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader28 = enhancer27.getClassLoader();
        enhancer27.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer27.setClassLoader(classLoader32);
        enhancer27.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        enhancer36.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        enhancer36.setClassLoader(classLoader41);
        enhancer36.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = enhancer36.getNamingPolicy();
        enhancer27.setNamingPolicy(namingPolicy45);
        enhancer27.setInterceptDuringConstruction(true);
        enhancer27.setUseCache(false);
        enhancer27.setUseCache(false);
        boolean boolean53 = enhancer27.getAttemptLoad();
        org.mockito.cglib.proxy.Callback callback54 = null;
        enhancer27.setCallback(callback54);
        org.mockito.cglib.proxy.Callback callback56 = null;
        enhancer27.setCallback(callback56);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter58 = null;
        enhancer27.setCallbackFilter(callbackFilter58);
        boolean boolean60 = namingPolicy26.equals((java.lang.Object) enhancer27);
        java.lang.Class<?> wildcardClass61 = enhancer27.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass61);
        org.mockito.asm.ClassVisitor classVisitor63 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(callbackArray6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test09796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09796");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        boolean boolean11 = enhancer7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer7.getStrategy();
        enhancer0.setStrategy(generatorStrategy12);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader18 = enhancer14.getClassLoader();
        java.lang.Class class19 = null;
        enhancer14.setSuperclass(class19);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer21.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer21.setClassLoader(classLoader26);
        enhancer21.setUseCache(false);
        java.lang.ClassLoader classLoader30 = enhancer21.getClassLoader();
        enhancer14.setClassLoader(classLoader30);
        boolean boolean32 = generatorStrategy12.equals((java.lang.Object) enhancer14);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = enhancer14.getNamingPolicy();
        boolean boolean34 = enhancer14.getAttemptLoad();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter35 = null;
        enhancer14.setCallbackFilter(callbackFilter35);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter37 = null;
        enhancer14.setCallbackFilter(callbackFilter37);
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader40 = enhancer39.getClassLoader();
        enhancer39.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader44 = enhancer43.getClassLoader();
        enhancer39.setClassLoader(classLoader44);
        enhancer39.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        enhancer48.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer52 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader53 = enhancer52.getClassLoader();
        enhancer48.setClassLoader(classLoader53);
        enhancer48.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = enhancer48.getNamingPolicy();
        enhancer39.setNamingPolicy(namingPolicy57);
        enhancer39.setInterceptDuringConstruction(true);
        enhancer39.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = enhancer39.getNamingPolicy();
        enhancer14.setNamingPolicy(namingPolicy63);
        java.lang.ClassLoader classLoader65 = enhancer14.getClassLoader();
        boolean boolean66 = enhancer14.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = enhancer14.getNamingPolicy();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(namingPolicy67);
    }

    @Test
    public void test09797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09797");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        enhancer0.setAttemptLoad(true);
        boolean boolean11 = enhancer0.getUseCache();
        enhancer0.setUseFactory(false);
        org.mockito.cglib.proxy.Callback callback14 = null;
        enhancer0.setCallback(callback14);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test09798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09798");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer9.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer9.getStrategy();
        enhancer0.setStrategy(generatorStrategy16);
        enhancer0.setUseCache(true);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer22.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader26 = enhancer22.getClassLoader();
        java.lang.Class class27 = null;
        enhancer22.setSuperclass(class27);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer29.setInterceptDuringConstruction(true);
        boolean boolean33 = enhancer29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = enhancer29.getStrategy();
        enhancer22.setStrategy(generatorStrategy34);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        enhancer36.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader40 = enhancer36.getClassLoader();
        java.lang.Class class41 = null;
        enhancer36.setSuperclass(class41);
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader44 = enhancer43.getClassLoader();
        enhancer43.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer47 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader48 = enhancer47.getClassLoader();
        enhancer43.setClassLoader(classLoader48);
        enhancer43.setUseCache(false);
        java.lang.ClassLoader classLoader52 = enhancer43.getClassLoader();
        enhancer36.setClassLoader(classLoader52);
        boolean boolean54 = generatorStrategy34.equals((java.lang.Object) enhancer36);
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        enhancer55.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader59 = enhancer55.getClassLoader();
        java.lang.Class<?> wildcardClass60 = classLoader59.getClass();
        enhancer36.setSuperclass((java.lang.Class) wildcardClass60);
        java.lang.ClassLoader classLoader62 = enhancer36.getClassLoader();
        enhancer36.setSerialVersionUID((java.lang.Long) (-1L));
        java.lang.ClassLoader classLoader65 = enhancer36.getClassLoader();
        enhancer0.setClassLoader(classLoader65);
        boolean boolean67 = enhancer0.getAttemptLoad();
        enhancer0.setUseCache(true);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test09799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09799");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer13.setUseCache(true);
        boolean boolean17 = enhancer13.getAttemptLoad();
        org.mockito.cglib.proxy.Callback callback18 = null;
        enhancer13.setCallback(callback18);
        java.lang.ClassLoader classLoader20 = enhancer13.getClassLoader();
        enhancer0.setClassLoader(classLoader20);
        boolean boolean22 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader24 = enhancer23.getClassLoader();
        enhancer23.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader28 = enhancer27.getClassLoader();
        enhancer23.setClassLoader(classLoader28);
        enhancer23.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        enhancer32.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        enhancer32.setClassLoader(classLoader37);
        enhancer32.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = enhancer32.getNamingPolicy();
        enhancer23.setNamingPolicy(namingPolicy41);
        enhancer23.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = enhancer23.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy45);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        enhancer48.setUseCache(true);
        boolean boolean52 = enhancer48.getAttemptLoad();
        org.mockito.cglib.proxy.Callback callback53 = null;
        enhancer48.setCallback(callback53);
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        enhancer55.setUseCache(true);
        boolean boolean59 = enhancer55.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = enhancer55.getStrategy();
        enhancer48.setStrategy(generatorStrategy60);
        java.lang.ClassLoader classLoader62 = enhancer48.getClassLoader();
        enhancer0.setClassLoader(classLoader62);
        org.mockito.asm.ClassVisitor classVisitor64 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertNotNull(classLoader62);
    }

    @Test
    public void test09800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09800");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback3 = null;
        enhancer0.setCallback(callback3);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Callback callback8 = null;
        enhancer0.setCallback(callback8);
        boolean boolean10 = enhancer0.getUseCache();
        enhancer0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader13 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        enhancer16.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer16.setClassLoader(classLoader21);
        enhancer16.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer25.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer25.setClassLoader(classLoader30);
        enhancer25.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = enhancer25.getNamingPolicy();
        enhancer16.setNamingPolicy(namingPolicy34);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        enhancer36.setInterceptDuringConstruction(true);
        boolean boolean40 = namingPolicy34.equals((java.lang.Object) enhancer36);
        enhancer14.setNamingPolicy(namingPolicy34);
        enhancer14.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader45 = enhancer44.getClassLoader();
        enhancer44.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader48 = enhancer44.getClassLoader();
        java.lang.Class class49 = null;
        enhancer44.setSuperclass(class49);
        enhancer44.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer53 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader54 = enhancer53.getClassLoader();
        enhancer53.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader58 = enhancer57.getClassLoader();
        enhancer53.setClassLoader(classLoader58);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = enhancer53.getStrategy();
        enhancer44.setStrategy(generatorStrategy60);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = enhancer44.getStrategy();
        enhancer14.setStrategy(generatorStrategy62);
        org.mockito.cglib.proxy.Enhancer enhancer64 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader65 = enhancer64.getClassLoader();
        enhancer64.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer68 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader69 = enhancer68.getClassLoader();
        enhancer64.setClassLoader(classLoader69);
        enhancer64.setUseCache(false);
        enhancer64.setSerialVersionUID((java.lang.Long) 0L);
        boolean boolean75 = generatorStrategy62.equals((java.lang.Object) 0L);
        enhancer0.setStrategy(generatorStrategy62);
        boolean boolean77 = enhancer0.getAttemptLoad();
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(classLoader69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test09801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09801");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer13.setUseCache(true);
        boolean boolean17 = enhancer13.getAttemptLoad();
        org.mockito.cglib.proxy.Callback callback18 = null;
        enhancer13.setCallback(callback18);
        java.lang.ClassLoader classLoader20 = enhancer13.getClassLoader();
        enhancer0.setClassLoader(classLoader20);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        enhancer24.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader28 = enhancer24.getClassLoader();
        java.lang.Class class29 = null;
        enhancer24.setSuperclass(class29);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = enhancer24.getNamingPolicy();
        enhancer24.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        enhancer34.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader39 = enhancer38.getClassLoader();
        enhancer34.setClassLoader(classLoader39);
        enhancer34.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader44 = enhancer43.getClassLoader();
        enhancer43.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer47 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader48 = enhancer47.getClassLoader();
        enhancer43.setClassLoader(classLoader48);
        enhancer43.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = enhancer43.getNamingPolicy();
        enhancer34.setNamingPolicy(namingPolicy52);
        org.mockito.cglib.proxy.Enhancer enhancer54 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader55 = enhancer54.getClassLoader();
        enhancer54.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader58 = enhancer54.getClassLoader();
        java.lang.Class class59 = null;
        enhancer54.setSuperclass(class59);
        org.mockito.cglib.proxy.Enhancer enhancer61 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader62 = enhancer61.getClassLoader();
        enhancer61.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer65 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader66 = enhancer65.getClassLoader();
        enhancer61.setClassLoader(classLoader66);
        enhancer61.setUseCache(false);
        java.lang.ClassLoader classLoader70 = enhancer61.getClassLoader();
        enhancer54.setClassLoader(classLoader70);
        boolean boolean72 = namingPolicy52.equals((java.lang.Object) enhancer54);
        enhancer24.setNamingPolicy(namingPolicy52);
        org.mockito.cglib.proxy.Enhancer enhancer74 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader75 = enhancer74.getClassLoader();
        enhancer74.setInterceptDuringConstruction(true);
        boolean boolean78 = enhancer74.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy79 = enhancer74.getStrategy();
        boolean boolean81 = generatorStrategy79.equals((java.lang.Object) (short) -1);
        java.lang.Class<?> wildcardClass82 = generatorStrategy79.getClass();
        boolean boolean83 = namingPolicy52.equals((java.lang.Object) wildcardClass82);
        enhancer0.setNamingPolicy(namingPolicy52);
        java.lang.Class<?> wildcardClass85 = namingPolicy52.getClass();
        org.mockito.cglib.proxy.Callback callback86 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj87 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass85, callback86);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(classLoader75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(generatorStrategy79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test09802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09802");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = enhancer0.getNamingPolicy();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Callback callback12 = null;
        enhancer0.setCallback(callback12);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter16 = null;
        enhancer14.setCallbackFilter(callbackFilter16);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter18 = null;
        enhancer14.setCallbackFilter(callbackFilter18);
        enhancer14.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = enhancer14.getStrategy();
        enhancer14.setUseFactory(false);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer25.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader29 = enhancer25.getClassLoader();
        java.lang.Class class30 = null;
        enhancer25.setSuperclass(class30);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = enhancer25.getNamingPolicy();
        enhancer25.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        enhancer35.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader40 = enhancer39.getClassLoader();
        enhancer35.setClassLoader(classLoader40);
        enhancer35.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader45 = enhancer44.getClassLoader();
        enhancer44.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        enhancer44.setClassLoader(classLoader49);
        enhancer44.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = enhancer44.getNamingPolicy();
        enhancer35.setNamingPolicy(namingPolicy53);
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        enhancer55.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader59 = enhancer55.getClassLoader();
        java.lang.Class class60 = null;
        enhancer55.setSuperclass(class60);
        org.mockito.cglib.proxy.Enhancer enhancer62 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader63 = enhancer62.getClassLoader();
        enhancer62.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer66 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader67 = enhancer66.getClassLoader();
        enhancer62.setClassLoader(classLoader67);
        enhancer62.setUseCache(false);
        java.lang.ClassLoader classLoader71 = enhancer62.getClassLoader();
        enhancer55.setClassLoader(classLoader71);
        boolean boolean73 = namingPolicy53.equals((java.lang.Object) enhancer55);
        enhancer25.setNamingPolicy(namingPolicy53);
        enhancer14.setNamingPolicy(namingPolicy53);
        enhancer0.setNamingPolicy(namingPolicy53);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(classLoader63);
        org.junit.Assert.assertNotNull(classLoader67);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test09803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09803");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = enhancer0.getNamingPolicy();
        boolean boolean10 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer11.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader15 = enhancer11.getClassLoader();
        java.lang.Class class16 = null;
        enhancer11.setSuperclass(class16);
        java.lang.ClassLoader classLoader18 = enhancer11.getClassLoader();
        enhancer0.setClassLoader(classLoader18);
        enhancer0.setSerialVersionUID((java.lang.Long) (-1L));
        enhancer0.setSerialVersionUID((java.lang.Long) 1L);
        java.lang.ClassLoader classLoader24 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer25.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer25.setClassLoader(classLoader30);
        enhancer25.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = enhancer25.getNamingPolicy();
        boolean boolean35 = enhancer25.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        enhancer36.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader40 = enhancer36.getClassLoader();
        java.lang.Class class41 = null;
        enhancer36.setSuperclass(class41);
        java.lang.ClassLoader classLoader43 = enhancer36.getClassLoader();
        enhancer25.setClassLoader(classLoader43);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = enhancer25.getStrategy();
        boolean boolean46 = enhancer25.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer47 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader48 = enhancer47.getClassLoader();
        enhancer47.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader51 = enhancer47.getClassLoader();
        java.lang.Class class52 = null;
        enhancer47.setSuperclass(class52);
        enhancer47.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader57 = enhancer56.getClassLoader();
        enhancer56.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer60 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader61 = enhancer60.getClassLoader();
        enhancer56.setClassLoader(classLoader61);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = enhancer56.getStrategy();
        enhancer47.setStrategy(generatorStrategy63);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = enhancer47.getStrategy();
        enhancer25.setStrategy(generatorStrategy65);
        enhancer25.setUseCache(false);
        java.lang.Class<?> wildcardClass69 = enhancer25.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass69);
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = enhancer0.getStrategy();
        enhancer0.setUseCache(true);
        org.mockito.asm.ClassVisitor classVisitor76 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(generatorStrategy73);
    }

    @Test
    public void test09804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09804");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        boolean boolean11 = enhancer7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer7.getStrategy();
        enhancer0.setStrategy(generatorStrategy12);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader18 = enhancer14.getClassLoader();
        java.lang.Class class19 = null;
        enhancer14.setSuperclass(class19);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer21.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer21.setClassLoader(classLoader26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = enhancer21.getStrategy();
        java.lang.Class<?> wildcardClass29 = enhancer21.getClass();
        enhancer14.setSuperclass((java.lang.Class) wildcardClass29);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass29);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        enhancer32.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        enhancer32.setClassLoader(classLoader37);
        enhancer32.setUseCache(false);
        java.lang.ClassLoader classLoader41 = enhancer32.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = enhancer32.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy42);
        enhancer0.setInterceptDuringConstruction(true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj46 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(namingPolicy42);
    }

    @Test
    public void test09805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09805");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        boolean boolean11 = enhancer7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer7.getStrategy();
        enhancer0.setStrategy(generatorStrategy12);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader18 = enhancer14.getClassLoader();
        java.lang.Class class19 = null;
        enhancer14.setSuperclass(class19);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer21.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer21.setClassLoader(classLoader26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = enhancer21.getStrategy();
        java.lang.Class<?> wildcardClass29 = enhancer21.getClass();
        enhancer14.setSuperclass((java.lang.Class) wildcardClass29);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass29);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        enhancer32.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        enhancer32.setClassLoader(classLoader37);
        enhancer32.setUseCache(false);
        java.lang.ClassLoader classLoader41 = enhancer32.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = enhancer32.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy42);
        enhancer0.setInterceptDuringConstruction(true);
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter48 = null;
        enhancer0.setCallbackFilter(callbackFilter48);
        org.mockito.cglib.proxy.Enhancer enhancer50 = new org.mockito.cglib.proxy.Enhancer();
        enhancer50.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = enhancer50.getStrategy();
        enhancer0.setStrategy(generatorStrategy53);
        java.lang.Class<?> wildcardClass55 = generatorStrategy53.getClass();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test09806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09806");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = enhancer0.getNamingPolicy();
        boolean boolean10 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer11.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader15 = enhancer11.getClassLoader();
        java.lang.Class class16 = null;
        enhancer11.setSuperclass(class16);
        java.lang.ClassLoader classLoader18 = enhancer11.getClassLoader();
        enhancer0.setClassLoader(classLoader18);
        enhancer0.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer22.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader26 = enhancer22.getClassLoader();
        org.mockito.cglib.proxy.Callback callback27 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray28 = new org.mockito.cglib.proxy.Callback[] { callback27 };
        enhancer22.setCallbacks(callbackArray28);
        enhancer22.setSerialVersionUID((java.lang.Long) 0L);
        enhancer22.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        enhancer34.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader38 = enhancer34.getClassLoader();
        org.mockito.cglib.proxy.Callback callback39 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray40 = new org.mockito.cglib.proxy.Callback[] { callback39 };
        enhancer34.setCallbacks(callbackArray40);
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader43 = enhancer42.getClassLoader();
        enhancer42.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader46 = enhancer42.getClassLoader();
        java.lang.Class class47 = null;
        enhancer42.setSuperclass(class47);
        java.lang.Class<?> wildcardClass49 = enhancer42.getClass();
        boolean boolean50 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass49);
        enhancer34.setSuperclass((java.lang.Class) wildcardClass49);
        enhancer22.setSuperclass((java.lang.Class) wildcardClass49);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass49);
        org.mockito.cglib.proxy.Enhancer enhancer54 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader55 = enhancer54.getClassLoader();
        enhancer54.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader58 = enhancer54.getClassLoader();
        java.lang.Class class59 = null;
        enhancer54.setSuperclass(class59);
        org.mockito.cglib.proxy.Enhancer enhancer61 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader62 = enhancer61.getClassLoader();
        enhancer61.setInterceptDuringConstruction(true);
        boolean boolean65 = enhancer61.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = enhancer61.getStrategy();
        enhancer54.setStrategy(generatorStrategy66);
        org.mockito.cglib.proxy.Enhancer enhancer68 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader69 = enhancer68.getClassLoader();
        enhancer68.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader72 = enhancer68.getClassLoader();
        java.lang.Class class73 = null;
        enhancer68.setSuperclass(class73);
        org.mockito.cglib.proxy.Enhancer enhancer75 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader76 = enhancer75.getClassLoader();
        enhancer75.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer79 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader80 = enhancer79.getClassLoader();
        enhancer75.setClassLoader(classLoader80);
        enhancer75.setUseCache(false);
        java.lang.ClassLoader classLoader84 = enhancer75.getClassLoader();
        enhancer68.setClassLoader(classLoader84);
        boolean boolean86 = generatorStrategy66.equals((java.lang.Object) enhancer68);
        org.mockito.cglib.core.NamingPolicy namingPolicy87 = enhancer68.getNamingPolicy();
        boolean boolean88 = enhancer68.getAttemptLoad();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter89 = null;
        enhancer68.setCallbackFilter(callbackFilter89);
        org.mockito.cglib.proxy.Callback callback91 = null;
        enhancer68.setCallback(callback91);
        java.lang.Class<?> wildcardClass93 = enhancer68.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass93);
        boolean boolean95 = enhancer0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy96 = enhancer0.getNamingPolicy();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(callbackArray28);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(callbackArray40);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertNotNull(classLoader69);
        org.junit.Assert.assertNotNull(classLoader72);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertNotNull(classLoader80);
        org.junit.Assert.assertNotNull(classLoader84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(namingPolicy87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(namingPolicy96);
    }

    @Test
    public void test09807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09807");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer9.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer9.getStrategy();
        enhancer0.setStrategy(generatorStrategy16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = enhancer0.getStrategy();
        enhancer0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        enhancer0.setNamingPolicy(namingPolicy21);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer25.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader29 = enhancer25.getClassLoader();
        java.lang.Class class30 = null;
        enhancer25.setSuperclass(class30);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        enhancer32.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader36 = enhancer32.getClassLoader();
        java.lang.Class class37 = null;
        enhancer32.setSuperclass(class37);
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader40 = enhancer39.getClassLoader();
        enhancer39.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader44 = enhancer43.getClassLoader();
        enhancer39.setClassLoader(classLoader44);
        enhancer39.setUseCache(false);
        java.lang.ClassLoader classLoader48 = enhancer39.getClassLoader();
        enhancer32.setClassLoader(classLoader48);
        enhancer25.setClassLoader(classLoader48);
        org.mockito.cglib.proxy.Enhancer enhancer51 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader52 = enhancer51.getClassLoader();
        enhancer51.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        enhancer51.setClassLoader(classLoader56);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = enhancer51.getStrategy();
        java.lang.Class<?> wildcardClass59 = enhancer51.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer60 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader61 = enhancer60.getClassLoader();
        enhancer60.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader64 = enhancer60.getClassLoader();
        java.lang.Class class65 = null;
        enhancer60.setSuperclass(class65);
        org.mockito.cglib.proxy.Enhancer enhancer67 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader68 = enhancer67.getClassLoader();
        enhancer67.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer71 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader72 = enhancer71.getClassLoader();
        enhancer67.setClassLoader(classLoader72);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = enhancer67.getStrategy();
        java.lang.Class<?> wildcardClass75 = enhancer67.getClass();
        enhancer60.setSuperclass((java.lang.Class) wildcardClass75);
        java.lang.Class[] classArray77 = new java.lang.Class[] { wildcardClass59, wildcardClass75 };
        enhancer25.setInterfaces(classArray77);
        enhancer0.setInterfaces(classArray77);
        java.lang.ClassLoader classLoader80 = enhancer0.getClassLoader();
        boolean boolean81 = enhancer0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass83 = enhancer0.getClass();
        boolean boolean84 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass83);
        org.mockito.cglib.proxy.Callback callback85 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj86 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass83, callback85);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertNotNull(classLoader68);
        org.junit.Assert.assertNotNull(classLoader72);
        org.junit.Assert.assertNotNull(generatorStrategy74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(classLoader80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(generatorStrategy82);
        org.junit.Assert.assertNotNull(wildcardClass83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test09808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09808");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer7.setClassLoader(classLoader12);
        enhancer7.setUseCache(false);
        java.lang.ClassLoader classLoader16 = enhancer7.getClassLoader();
        enhancer0.setClassLoader(classLoader16);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        enhancer18.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader22 = enhancer18.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer18.getStrategy();
        enhancer0.setStrategy(generatorStrategy23);
        boolean boolean25 = enhancer0.getAttemptLoad();
        boolean boolean26 = enhancer0.getAttemptLoad();
        java.lang.ClassLoader classLoader27 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader29 = enhancer28.getClassLoader();
        enhancer28.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader32 = enhancer28.getClassLoader();
        org.mockito.cglib.proxy.Callback callback33 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray34 = new org.mockito.cglib.proxy.Callback[] { callback33 };
        enhancer28.setCallbacks(callbackArray34);
        enhancer28.setSerialVersionUID((java.lang.Long) 0L);
        enhancer28.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        enhancer40.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader44 = enhancer40.getClassLoader();
        org.mockito.cglib.proxy.Callback callback45 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray46 = new org.mockito.cglib.proxy.Callback[] { callback45 };
        enhancer40.setCallbacks(callbackArray46);
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        enhancer48.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader52 = enhancer48.getClassLoader();
        java.lang.Class class53 = null;
        enhancer48.setSuperclass(class53);
        java.lang.Class<?> wildcardClass55 = enhancer48.getClass();
        boolean boolean56 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass55);
        enhancer40.setSuperclass((java.lang.Class) wildcardClass55);
        enhancer28.setSuperclass((java.lang.Class) wildcardClass55);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass55);
        org.mockito.asm.ClassVisitor classVisitor60 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(callbackArray34);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(callbackArray46);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test09809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09809");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer9.setClassLoader(classLoader14);
        enhancer9.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer9.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer20.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader24 = enhancer20.getClassLoader();
        java.lang.Class class25 = null;
        enhancer20.setSuperclass(class25);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader28 = enhancer27.getClassLoader();
        enhancer27.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer27.setClassLoader(classLoader32);
        enhancer27.setUseCache(false);
        java.lang.ClassLoader classLoader36 = enhancer27.getClassLoader();
        enhancer20.setClassLoader(classLoader36);
        boolean boolean38 = namingPolicy18.equals((java.lang.Object) enhancer20);
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader40 = enhancer39.getClassLoader();
        enhancer39.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader44 = enhancer43.getClassLoader();
        enhancer39.setClassLoader(classLoader44);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = enhancer39.getStrategy();
        enhancer39.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        enhancer49.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = enhancer49.getStrategy();
        enhancer39.setStrategy(generatorStrategy52);
        enhancer20.setStrategy(generatorStrategy52);
        java.lang.ClassLoader classLoader55 = enhancer20.getClassLoader();
        enhancer20.setAttemptLoad(true);
        boolean boolean58 = enhancer20.getAttemptLoad();
        enhancer20.setInterceptDuringConstruction(false);
        enhancer20.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer63 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader64 = enhancer63.getClassLoader();
        enhancer63.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer67 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader68 = enhancer67.getClassLoader();
        enhancer63.setClassLoader(classLoader68);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = enhancer63.getStrategy();
        enhancer63.setInterceptDuringConstruction(true);
        enhancer63.setAttemptLoad(false);
        enhancer63.setSerialVersionUID((java.lang.Long) 1L);
        java.lang.ClassLoader classLoader77 = enhancer63.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer78 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader79 = enhancer78.getClassLoader();
        enhancer78.setInterceptDuringConstruction(true);
        boolean boolean82 = enhancer78.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = enhancer78.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer84 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader85 = enhancer84.getClassLoader();
        enhancer84.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader88 = enhancer84.getClassLoader();
        org.mockito.cglib.proxy.Callback callback89 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray90 = new org.mockito.cglib.proxy.Callback[] { callback89 };
        enhancer84.setCallbacks(callbackArray90);
        enhancer78.setCallbacks(callbackArray90);
        java.lang.ClassLoader classLoader93 = enhancer78.getClassLoader();
        enhancer63.setClassLoader(classLoader93);
        enhancer20.setClassLoader(classLoader93);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertNotNull(classLoader68);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertNotNull(classLoader77);
        org.junit.Assert.assertNotNull(classLoader79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(generatorStrategy83);
        org.junit.Assert.assertNotNull(classLoader85);
        org.junit.Assert.assertNotNull(classLoader88);
        org.junit.Assert.assertNotNull(callbackArray90);
        org.junit.Assert.assertNotNull(classLoader93);
    }

    @Test
    public void test09810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09810");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = enhancer0.getNamingPolicy();
        enhancer0.setAttemptLoad(true);
        enhancer0.setUseCache(true);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter12 = null;
        enhancer0.setCallbackFilter(callbackFilter12);
        java.lang.ClassLoader classLoader14 = enhancer0.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj15 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(classLoader14);
    }

    @Test
    public void test09811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09811");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer7.setClassLoader(classLoader12);
        enhancer7.setUseCache(false);
        java.lang.ClassLoader classLoader16 = enhancer7.getClassLoader();
        enhancer0.setClassLoader(classLoader16);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        enhancer18.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader22 = enhancer18.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer18.getStrategy();
        enhancer0.setStrategy(generatorStrategy23);
        boolean boolean25 = enhancer0.getAttemptLoad();
        boolean boolean26 = enhancer0.getAttemptLoad();
        java.lang.ClassLoader classLoader27 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader29 = enhancer28.getClassLoader();
        enhancer28.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader32 = enhancer28.getClassLoader();
        org.mockito.cglib.proxy.Callback callback33 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray34 = new org.mockito.cglib.proxy.Callback[] { callback33 };
        enhancer28.setCallbacks(callbackArray34);
        enhancer28.setSerialVersionUID((java.lang.Long) 0L);
        enhancer28.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        enhancer40.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader44 = enhancer40.getClassLoader();
        org.mockito.cglib.proxy.Callback callback45 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray46 = new org.mockito.cglib.proxy.Callback[] { callback45 };
        enhancer40.setCallbacks(callbackArray46);
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        enhancer48.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader52 = enhancer48.getClassLoader();
        java.lang.Class class53 = null;
        enhancer48.setSuperclass(class53);
        java.lang.Class<?> wildcardClass55 = enhancer48.getClass();
        boolean boolean56 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass55);
        enhancer40.setSuperclass((java.lang.Class) wildcardClass55);
        enhancer28.setSuperclass((java.lang.Class) wildcardClass55);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass55);
        enhancer0.setInterceptDuringConstruction(false);
        enhancer0.setInterceptDuringConstruction(false);
        boolean boolean64 = enhancer0.getUseCache();
        enhancer0.setInterceptDuringConstruction(true);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(callbackArray34);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(callbackArray46);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test09812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09812");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer9.setClassLoader(classLoader14);
        enhancer9.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer9.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer20.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader24 = enhancer20.getClassLoader();
        java.lang.Class class25 = null;
        enhancer20.setSuperclass(class25);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader28 = enhancer27.getClassLoader();
        enhancer27.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer27.setClassLoader(classLoader32);
        enhancer27.setUseCache(false);
        java.lang.ClassLoader classLoader36 = enhancer27.getClassLoader();
        enhancer20.setClassLoader(classLoader36);
        boolean boolean38 = namingPolicy18.equals((java.lang.Object) enhancer20);
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader40 = enhancer39.getClassLoader();
        enhancer39.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader44 = enhancer43.getClassLoader();
        enhancer39.setClassLoader(classLoader44);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = enhancer39.getStrategy();
        enhancer39.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        enhancer49.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = enhancer49.getStrategy();
        enhancer39.setStrategy(generatorStrategy52);
        enhancer20.setStrategy(generatorStrategy52);
        java.lang.ClassLoader classLoader55 = enhancer20.getClassLoader();
        enhancer20.setAttemptLoad(true);
        java.lang.ClassLoader classLoader58 = enhancer20.getClassLoader();
        enhancer20.setUseCache(false);
        enhancer20.setInterceptDuringConstruction(true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj63 = enhancer20.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertNotNull(classLoader58);
    }

    @Test
    public void test09813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09813");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer9.setClassLoader(classLoader14);
        enhancer9.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer9.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy18);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = enhancer0.getNamingPolicy();
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer25.setInterceptDuringConstruction(true);
        boolean boolean29 = enhancer25.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = enhancer25.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer31.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader35 = enhancer31.getClassLoader();
        org.mockito.cglib.proxy.Callback callback36 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray37 = new org.mockito.cglib.proxy.Callback[] { callback36 };
        enhancer31.setCallbacks(callbackArray37);
        enhancer25.setCallbacks(callbackArray37);
        org.mockito.cglib.proxy.Callback callback40 = null;
        enhancer25.setCallback(callback40);
        enhancer25.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = enhancer25.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader46 = enhancer45.getClassLoader();
        enhancer45.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader50 = enhancer49.getClassLoader();
        enhancer45.setClassLoader(classLoader50);
        enhancer45.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer54 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader55 = enhancer54.getClassLoader();
        enhancer54.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader58 = enhancer54.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer59 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader60 = enhancer59.getClassLoader();
        enhancer59.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader63 = enhancer59.getClassLoader();
        org.mockito.cglib.proxy.Callback callback64 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray65 = new org.mockito.cglib.proxy.Callback[] { callback64 };
        enhancer59.setCallbacks(callbackArray65);
        enhancer54.setCallbacks(callbackArray65);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = enhancer54.getStrategy();
        org.mockito.cglib.proxy.Callback callback69 = null;
        enhancer54.setCallback(callback69);
        org.mockito.cglib.proxy.Enhancer enhancer71 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader72 = enhancer71.getClassLoader();
        enhancer71.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer75 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader76 = enhancer75.getClassLoader();
        enhancer71.setClassLoader(classLoader76);
        org.mockito.cglib.proxy.Enhancer enhancer78 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader79 = enhancer78.getClassLoader();
        enhancer78.setInterceptDuringConstruction(true);
        boolean boolean82 = enhancer78.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = enhancer78.getStrategy();
        java.lang.Class[] classArray84 = new java.lang.Class[] {};
        enhancer78.setInterfaces(classArray84);
        enhancer71.setInterfaces(classArray84);
        enhancer54.setInterfaces(classArray84);
        enhancer45.setInterfaces(classArray84);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter89 = null;
        enhancer45.setCallbackFilter(callbackFilter89);
        java.lang.ClassLoader classLoader91 = enhancer45.getClassLoader();
        enhancer25.setClassLoader(classLoader91);
        boolean boolean93 = enhancer25.getAttemptLoad();
        java.lang.Class<?> wildcardClass94 = enhancer25.getClass();
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackType((java.lang.Class) wildcardClass94);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Unknown callback type class org.mockito.cglib.proxy.Enhancer");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(callbackArray37);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(classLoader60);
        org.junit.Assert.assertNotNull(classLoader63);
        org.junit.Assert.assertNotNull(callbackArray65);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertNotNull(classLoader72);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertNotNull(classLoader79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(generatorStrategy83);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(classLoader91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test09814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09814");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        boolean boolean11 = enhancer7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer7.getStrategy();
        enhancer0.setStrategy(generatorStrategy12);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader18 = enhancer14.getClassLoader();
        java.lang.Class class19 = null;
        enhancer14.setSuperclass(class19);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer21.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer21.setClassLoader(classLoader26);
        enhancer21.setUseCache(false);
        java.lang.ClassLoader classLoader30 = enhancer21.getClassLoader();
        enhancer14.setClassLoader(classLoader30);
        boolean boolean32 = generatorStrategy12.equals((java.lang.Object) enhancer14);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = enhancer14.getNamingPolicy();
        boolean boolean34 = enhancer14.getAttemptLoad();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter35 = null;
        enhancer14.setCallbackFilter(callbackFilter35);
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        enhancer37.setUseCache(true);
        boolean boolean41 = enhancer37.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader43 = enhancer42.getClassLoader();
        enhancer42.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader46 = enhancer42.getClassLoader();
        java.lang.Class class47 = null;
        enhancer42.setSuperclass(class47);
        java.lang.Class<?> wildcardClass49 = enhancer42.getClass();
        enhancer37.setSuperclass((java.lang.Class) wildcardClass49);
        enhancer14.setSuperclass((java.lang.Class) wildcardClass49);
        enhancer14.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = enhancer14.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = enhancer14.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader57 = enhancer56.getClassLoader();
        enhancer56.setInterceptDuringConstruction(true);
        boolean boolean60 = enhancer56.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = enhancer56.getStrategy();
        java.lang.Class[] classArray62 = new java.lang.Class[] {};
        enhancer56.setInterfaces(classArray62);
        enhancer14.setInterfaces(classArray62);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(generatorStrategy61);
        org.junit.Assert.assertNotNull(classArray62);
    }

    @Test
    public void test09815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09815");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        boolean boolean11 = enhancer7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer7.getStrategy();
        enhancer0.setStrategy(generatorStrategy12);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader18 = enhancer14.getClassLoader();
        java.lang.Class class19 = null;
        enhancer14.setSuperclass(class19);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer21.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer21.setClassLoader(classLoader26);
        enhancer21.setUseCache(false);
        java.lang.ClassLoader classLoader30 = enhancer21.getClassLoader();
        enhancer14.setClassLoader(classLoader30);
        boolean boolean32 = generatorStrategy12.equals((java.lang.Object) enhancer14);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = enhancer14.getNamingPolicy();
        boolean boolean34 = enhancer14.getAttemptLoad();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter35 = null;
        enhancer14.setCallbackFilter(callbackFilter35);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter37 = null;
        enhancer14.setCallbackFilter(callbackFilter37);
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader40 = enhancer39.getClassLoader();
        enhancer39.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader43 = enhancer39.getClassLoader();
        org.mockito.cglib.proxy.Callback callback44 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray45 = new org.mockito.cglib.proxy.Callback[] { callback44 };
        enhancer39.setCallbacks(callbackArray45);
        enhancer39.setSerialVersionUID((java.lang.Long) 0L);
        boolean boolean49 = enhancer39.getUseCache();
        enhancer39.setUseCache(true);
        enhancer39.setAttemptLoad(true);
        boolean boolean54 = enhancer39.getUseCache();
        enhancer39.setAttemptLoad(false);
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader58 = enhancer57.getClassLoader();
        enhancer57.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader61 = enhancer57.getClassLoader();
        java.lang.Class class62 = null;
        enhancer57.setSuperclass(class62);
        org.mockito.cglib.proxy.Enhancer enhancer64 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader65 = enhancer64.getClassLoader();
        enhancer64.setInterceptDuringConstruction(true);
        boolean boolean68 = enhancer64.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = enhancer64.getStrategy();
        enhancer57.setStrategy(generatorStrategy69);
        org.mockito.cglib.proxy.Enhancer enhancer71 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader72 = enhancer71.getClassLoader();
        enhancer71.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader75 = enhancer71.getClassLoader();
        java.lang.Class class76 = null;
        enhancer71.setSuperclass(class76);
        org.mockito.cglib.proxy.Enhancer enhancer78 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader79 = enhancer78.getClassLoader();
        enhancer78.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer82 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader83 = enhancer82.getClassLoader();
        enhancer78.setClassLoader(classLoader83);
        enhancer78.setUseCache(false);
        java.lang.ClassLoader classLoader87 = enhancer78.getClassLoader();
        enhancer71.setClassLoader(classLoader87);
        boolean boolean89 = generatorStrategy69.equals((java.lang.Object) enhancer71);
        org.mockito.cglib.core.NamingPolicy namingPolicy90 = enhancer71.getNamingPolicy();
        boolean boolean91 = enhancer71.getAttemptLoad();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter92 = null;
        enhancer71.setCallbackFilter(callbackFilter92);
        org.mockito.cglib.proxy.Callback callback94 = null;
        enhancer71.setCallback(callback94);
        java.lang.Class<?> wildcardClass96 = enhancer71.getClass();
        enhancer39.setSuperclass((java.lang.Class) wildcardClass96);
        enhancer14.setSuperclass((java.lang.Class) wildcardClass96);
        boolean boolean99 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass96);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(callbackArray45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(generatorStrategy69);
        org.junit.Assert.assertNotNull(classLoader72);
        org.junit.Assert.assertNotNull(classLoader75);
        org.junit.Assert.assertNotNull(classLoader79);
        org.junit.Assert.assertNotNull(classLoader83);
        org.junit.Assert.assertNotNull(classLoader87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(namingPolicy90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(wildcardClass96);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test09816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09816");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer9.setClassLoader(classLoader14);
        enhancer9.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer9.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy18);
        enhancer0.setInterceptDuringConstruction(true);
        boolean boolean22 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader24 = enhancer23.getClassLoader();
        enhancer23.setUseCache(true);
        boolean boolean27 = enhancer23.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader29 = enhancer28.getClassLoader();
        enhancer28.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader32 = enhancer28.getClassLoader();
        java.lang.Class class33 = null;
        enhancer28.setSuperclass(class33);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        enhancer35.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader40 = enhancer39.getClassLoader();
        enhancer35.setClassLoader(classLoader40);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = enhancer35.getStrategy();
        java.lang.Class<?> wildcardClass43 = enhancer35.getClass();
        enhancer28.setSuperclass((java.lang.Class) wildcardClass43);
        enhancer23.setSuperclass((java.lang.Class) wildcardClass43);
        org.mockito.cglib.proxy.Callback callback46 = null;
        enhancer23.setCallback(callback46);
        org.mockito.cglib.proxy.Callback callback48 = null;
        enhancer23.setCallback(callback48);
        boolean boolean50 = enhancer23.getUseCache();
        java.lang.ClassLoader classLoader51 = enhancer23.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter52 = null;
        enhancer23.setCallbackFilter(callbackFilter52);
        org.mockito.cglib.proxy.Enhancer enhancer54 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader55 = enhancer54.getClassLoader();
        enhancer54.setInterceptDuringConstruction(true);
        boolean boolean58 = enhancer54.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = enhancer54.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer60 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader61 = enhancer60.getClassLoader();
        enhancer60.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader64 = enhancer60.getClassLoader();
        org.mockito.cglib.proxy.Callback callback65 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray66 = new org.mockito.cglib.proxy.Callback[] { callback65 };
        enhancer60.setCallbacks(callbackArray66);
        enhancer54.setCallbacks(callbackArray66);
        enhancer23.setCallbacks(callbackArray66);
        enhancer0.setCallbacks(callbackArray66);
        enhancer0.setUseFactory(false);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertNotNull(callbackArray66);
    }

    @Test
    public void test09817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09817");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback3 = null;
        enhancer0.setCallback(callback3);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter5 = null;
        enhancer0.setCallbackFilter(callbackFilter5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = enhancer9.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        enhancer12.setUseCache(true);
        boolean boolean16 = enhancer12.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        enhancer17.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader21 = enhancer17.getClassLoader();
        java.lang.Class class22 = null;
        enhancer17.setSuperclass(class22);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        enhancer24.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader29 = enhancer28.getClassLoader();
        enhancer24.setClassLoader(classLoader29);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = enhancer24.getStrategy();
        java.lang.Class<?> wildcardClass32 = enhancer24.getClass();
        enhancer17.setSuperclass((java.lang.Class) wildcardClass32);
        enhancer12.setSuperclass((java.lang.Class) wildcardClass32);
        enhancer9.setSuperclass((java.lang.Class) wildcardClass32);
        org.mockito.cglib.proxy.Callback callback36 = null;
        enhancer9.setCallback(callback36);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader39 = enhancer38.getClassLoader();
        enhancer38.setInterceptDuringConstruction(true);
        boolean boolean42 = enhancer38.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = enhancer38.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader45 = enhancer44.getClassLoader();
        enhancer44.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader48 = enhancer44.getClassLoader();
        org.mockito.cglib.proxy.Callback callback49 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray50 = new org.mockito.cglib.proxy.Callback[] { callback49 };
        enhancer44.setCallbacks(callbackArray50);
        enhancer38.setCallbacks(callbackArray50);
        enhancer9.setCallbacks(callbackArray50);
        enhancer7.setCallbacks(callbackArray50);
        enhancer0.setCallbacks(callbackArray50);
        org.mockito.cglib.proxy.Callback[] callbackArray56 = null;
        enhancer0.setCallbacks(callbackArray56);
        org.mockito.cglib.proxy.Enhancer enhancer58 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader59 = enhancer58.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter60 = null;
        enhancer58.setCallbackFilter(callbackFilter60);
        org.mockito.cglib.proxy.Enhancer enhancer62 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader63 = enhancer62.getClassLoader();
        enhancer62.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer66 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader67 = enhancer66.getClassLoader();
        enhancer62.setClassLoader(classLoader67);
        enhancer62.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = enhancer62.getNamingPolicy();
        boolean boolean72 = enhancer62.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer73 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader74 = enhancer73.getClassLoader();
        enhancer73.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader77 = enhancer73.getClassLoader();
        java.lang.Class class78 = null;
        enhancer73.setSuperclass(class78);
        java.lang.ClassLoader classLoader80 = enhancer73.getClassLoader();
        enhancer62.setClassLoader(classLoader80);
        enhancer58.setClassLoader(classLoader80);
        java.lang.Class<?> wildcardClass83 = classLoader80.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass83);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(callbackArray50);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(classLoader63);
        org.junit.Assert.assertNotNull(classLoader67);
        org.junit.Assert.assertNotNull(namingPolicy71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(classLoader77);
        org.junit.Assert.assertNotNull(classLoader80);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test09818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09818");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        java.lang.ClassLoader classLoader7 = enhancer0.getClassLoader();
        boolean boolean8 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader13 = enhancer9.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader18 = enhancer14.getClassLoader();
        org.mockito.cglib.proxy.Callback callback19 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray20 = new org.mockito.cglib.proxy.Callback[] { callback19 };
        enhancer14.setCallbacks(callbackArray20);
        enhancer9.setCallbacks(callbackArray20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer9.getStrategy();
        enhancer0.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer25.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer25.setClassLoader(classLoader30);
        enhancer25.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        enhancer34.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader39 = enhancer38.getClassLoader();
        enhancer34.setClassLoader(classLoader39);
        enhancer34.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = enhancer34.getNamingPolicy();
        enhancer25.setNamingPolicy(namingPolicy43);
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader46 = enhancer45.getClassLoader();
        enhancer45.setInterceptDuringConstruction(true);
        boolean boolean49 = namingPolicy43.equals((java.lang.Object) enhancer45);
        java.lang.ClassLoader classLoader50 = enhancer45.getClassLoader();
        enhancer0.setClassLoader(classLoader50);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter52 = null;
        enhancer0.setCallbackFilter(callbackFilter52);
        java.lang.ClassLoader classLoader54 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter55 = null;
        enhancer0.setCallbackFilter(callbackFilter55);
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer58 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader59 = enhancer58.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter60 = null;
        enhancer58.setCallbackFilter(callbackFilter60);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = enhancer58.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer63 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader64 = enhancer63.getClassLoader();
        enhancer63.setUseCache(true);
        boolean boolean67 = enhancer63.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer68 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader69 = enhancer68.getClassLoader();
        enhancer68.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader72 = enhancer68.getClassLoader();
        java.lang.Class class73 = null;
        enhancer68.setSuperclass(class73);
        java.lang.Class<?> wildcardClass75 = enhancer68.getClass();
        enhancer63.setSuperclass((java.lang.Class) wildcardClass75);
        enhancer63.setUseCache(true);
        boolean boolean79 = generatorStrategy62.equals((java.lang.Object) enhancer63);
        org.mockito.cglib.proxy.Callback callback80 = null;
        enhancer63.setCallback(callback80);
        boolean boolean82 = namingPolicy57.equals((java.lang.Object) callback80);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(callbackArray20);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(classLoader69);
        org.junit.Assert.assertNotNull(classLoader72);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test09819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09819");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback3 = null;
        enhancer0.setCallback(callback3);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Callback callback8 = null;
        enhancer0.setCallback(callback8);
        boolean boolean10 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer0.setClassLoader(classLoader12);
        boolean boolean14 = enhancer0.getUseCache();
        boolean boolean15 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter18 = null;
        enhancer16.setCallbackFilter(callbackFilter18);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter20 = null;
        enhancer16.setCallbackFilter(callbackFilter20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = enhancer16.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader24 = enhancer23.getClassLoader();
        enhancer23.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader27 = enhancer23.getClassLoader();
        java.lang.Class class28 = null;
        enhancer23.setSuperclass(class28);
        java.lang.ClassLoader classLoader30 = enhancer23.getClassLoader();
        boolean boolean31 = enhancer23.getAttemptLoad();
        boolean boolean32 = enhancer23.getUseCache();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter33 = null;
        enhancer23.setCallbackFilter(callbackFilter33);
        boolean boolean35 = generatorStrategy22.equals((java.lang.Object) enhancer23);
        enhancer0.setStrategy(generatorStrategy22);
        enhancer0.setInterceptDuringConstruction(false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class39 = enhancer0.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: createClass does not accept callbacks");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test09820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09820");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader9 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter10 = null;
        enhancer0.setCallbackFilter(callbackFilter10);
        enhancer0.setUseCache(true);
        org.mockito.asm.ClassVisitor classVisitor14 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader9);
    }

    @Test
    public void test09821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09821");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer7.setClassLoader(classLoader12);
        enhancer7.setUseCache(false);
        java.lang.ClassLoader classLoader16 = enhancer7.getClassLoader();
        enhancer0.setClassLoader(classLoader16);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        enhancer18.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader22 = enhancer18.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer18.getStrategy();
        enhancer0.setStrategy(generatorStrategy23);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = enhancer0.getStrategy();
        boolean boolean26 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader28 = enhancer27.getClassLoader();
        enhancer27.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader31 = enhancer27.getClassLoader();
        java.lang.Class class32 = null;
        enhancer27.setSuperclass(class32);
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = enhancer34.getStrategy();
        enhancer27.setStrategy(generatorStrategy36);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader39 = enhancer38.getClassLoader();
        enhancer38.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader43 = enhancer42.getClassLoader();
        enhancer38.setClassLoader(classLoader43);
        enhancer38.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer47 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader48 = enhancer47.getClassLoader();
        enhancer47.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer51 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader52 = enhancer51.getClassLoader();
        enhancer47.setClassLoader(classLoader52);
        enhancer47.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = enhancer47.getNamingPolicy();
        enhancer38.setNamingPolicy(namingPolicy56);
        org.mockito.cglib.proxy.Enhancer enhancer58 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader59 = enhancer58.getClassLoader();
        enhancer58.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader62 = enhancer58.getClassLoader();
        java.lang.Class class63 = null;
        enhancer58.setSuperclass(class63);
        org.mockito.cglib.proxy.Enhancer enhancer65 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader66 = enhancer65.getClassLoader();
        enhancer65.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer69 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader70 = enhancer69.getClassLoader();
        enhancer65.setClassLoader(classLoader70);
        enhancer65.setUseCache(false);
        java.lang.ClassLoader classLoader74 = enhancer65.getClassLoader();
        enhancer58.setClassLoader(classLoader74);
        boolean boolean76 = namingPolicy56.equals((java.lang.Object) enhancer58);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = enhancer58.getStrategy();
        enhancer27.setStrategy(generatorStrategy77);
        org.mockito.cglib.proxy.Enhancer enhancer79 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader80 = enhancer79.getClassLoader();
        enhancer79.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader83 = enhancer79.getClassLoader();
        java.lang.Class class84 = null;
        enhancer79.setSuperclass(class84);
        org.mockito.cglib.proxy.Enhancer enhancer86 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader87 = enhancer86.getClassLoader();
        enhancer86.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer90 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader91 = enhancer90.getClassLoader();
        enhancer86.setClassLoader(classLoader91);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy93 = enhancer86.getStrategy();
        java.lang.Class<?> wildcardClass94 = enhancer86.getClass();
        enhancer79.setSuperclass((java.lang.Class) wildcardClass94);
        boolean boolean96 = generatorStrategy77.equals((java.lang.Object) wildcardClass94);
        enhancer0.setStrategy(generatorStrategy77);
        enhancer0.setUseCache(true);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertNotNull(classLoader80);
        org.junit.Assert.assertNotNull(classLoader83);
        org.junit.Assert.assertNotNull(classLoader87);
        org.junit.Assert.assertNotNull(classLoader91);
        org.junit.Assert.assertNotNull(generatorStrategy93);
        org.junit.Assert.assertNotNull(wildcardClass94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test09822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09822");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        boolean boolean4 = enhancer0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Class[] classArray6 = new java.lang.Class[] {};
        enhancer0.setInterfaces(classArray6);
        boolean boolean8 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setUseCache(true);
        boolean boolean13 = enhancer9.getAttemptLoad();
        java.lang.ClassLoader classLoader14 = enhancer9.getClassLoader();
        enhancer0.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer0.getStrategy();
        boolean boolean17 = enhancer0.getUseCache();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test09823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09823");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer4.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        enhancer4.setClassLoader(classLoader9);
        enhancer4.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer13.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        enhancer13.setClassLoader(classLoader18);
        enhancer13.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = enhancer13.getNamingPolicy();
        enhancer4.setNamingPolicy(namingPolicy22);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        enhancer24.setUseCache(true);
        boolean boolean28 = enhancer24.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer29.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader33 = enhancer29.getClassLoader();
        java.lang.Class class34 = null;
        enhancer29.setSuperclass(class34);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        enhancer36.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        enhancer36.setClassLoader(classLoader41);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = enhancer36.getStrategy();
        java.lang.Class<?> wildcardClass44 = enhancer36.getClass();
        enhancer29.setSuperclass((java.lang.Class) wildcardClass44);
        enhancer24.setSuperclass((java.lang.Class) wildcardClass44);
        boolean boolean47 = namingPolicy22.equals((java.lang.Object) enhancer24);
        enhancer0.setNamingPolicy(namingPolicy22);
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader50 = enhancer49.getClassLoader();
        enhancer49.setInterceptDuringConstruction(true);
        boolean boolean53 = enhancer49.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = enhancer49.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        enhancer55.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader59 = enhancer55.getClassLoader();
        org.mockito.cglib.proxy.Callback callback60 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray61 = new org.mockito.cglib.proxy.Callback[] { callback60 };
        enhancer55.setCallbacks(callbackArray61);
        enhancer49.setCallbacks(callbackArray61);
        enhancer0.setCallbacks(callbackArray61);
        org.mockito.cglib.proxy.Enhancer enhancer65 = new org.mockito.cglib.proxy.Enhancer();
        enhancer65.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback68 = null;
        enhancer65.setCallback(callback68);
        enhancer65.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = enhancer65.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy72);
        org.mockito.cglib.proxy.Callback[] callbackArray74 = null;
        enhancer0.setCallbacks(callbackArray74);
        enhancer0.setInterceptDuringConstruction(true);
        boolean boolean78 = enhancer0.getUseCache();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(callbackArray61);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test09824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09824");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        enhancer0.setAttemptLoad(true);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        boolean boolean15 = enhancer13.getAttemptLoad();
        enhancer13.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.proxy.Callback callback18 = null;
        enhancer13.setCallback(callback18);
        boolean boolean20 = enhancer13.getUseCache();
        boolean boolean21 = enhancer13.getUseCache();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter22 = null;
        enhancer13.setCallbackFilter(callbackFilter22);
        java.lang.ClassLoader classLoader24 = enhancer13.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer25.setInterceptDuringConstruction(true);
        boolean boolean29 = enhancer25.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = enhancer25.getStrategy();
        java.lang.Class[] classArray31 = new java.lang.Class[] {};
        enhancer25.setInterfaces(classArray31);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = enhancer25.getStrategy();
        enhancer13.setStrategy(generatorStrategy33);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = enhancer13.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy35);
        enhancer0.setUseFactory(false);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(namingPolicy35);
    }

    @Test
    public void test09825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09825");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter7 = null;
        enhancer0.setCallbackFilter(callbackFilter7);
        enhancer0.setUseCache(false);
        boolean boolean11 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        enhancer12.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader16 = enhancer12.getClassLoader();
        java.lang.Class class17 = null;
        enhancer12.setSuperclass(class17);
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader20 = enhancer19.getClassLoader();
        enhancer19.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader23 = enhancer19.getClassLoader();
        java.lang.Class class24 = null;
        enhancer19.setSuperclass(class24);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        enhancer26.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader31 = enhancer30.getClassLoader();
        enhancer26.setClassLoader(classLoader31);
        enhancer26.setUseCache(false);
        java.lang.ClassLoader classLoader35 = enhancer26.getClassLoader();
        enhancer19.setClassLoader(classLoader35);
        enhancer12.setClassLoader(classLoader35);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader39 = enhancer38.getClassLoader();
        enhancer38.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader43 = enhancer42.getClassLoader();
        enhancer38.setClassLoader(classLoader43);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = enhancer38.getStrategy();
        java.lang.Class<?> wildcardClass46 = enhancer38.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer47 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader48 = enhancer47.getClassLoader();
        enhancer47.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader51 = enhancer47.getClassLoader();
        java.lang.Class class52 = null;
        enhancer47.setSuperclass(class52);
        org.mockito.cglib.proxy.Enhancer enhancer54 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader55 = enhancer54.getClassLoader();
        enhancer54.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer58 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader59 = enhancer58.getClassLoader();
        enhancer54.setClassLoader(classLoader59);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = enhancer54.getStrategy();
        java.lang.Class<?> wildcardClass62 = enhancer54.getClass();
        enhancer47.setSuperclass((java.lang.Class) wildcardClass62);
        java.lang.Class[] classArray64 = new java.lang.Class[] { wildcardClass46, wildcardClass62 };
        enhancer12.setInterfaces(classArray64);
        enhancer0.setInterfaces(classArray64);
        org.mockito.cglib.proxy.Callback callback67 = null;
        enhancer0.setCallback(callback67);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj69 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(generatorStrategy61);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(classArray64);
    }

    @Test
    public void test09826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09826");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader11 = enhancer7.getClassLoader();
        java.lang.Class class12 = null;
        enhancer7.setSuperclass(class12);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        enhancer14.setClassLoader(classLoader19);
        enhancer14.setUseCache(false);
        java.lang.ClassLoader classLoader23 = enhancer14.getClassLoader();
        enhancer7.setClassLoader(classLoader23);
        enhancer0.setClassLoader(classLoader23);
        java.lang.ClassLoader classLoader26 = enhancer0.getClassLoader();
        boolean boolean27 = enhancer0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        enhancer0.setStrategy(generatorStrategy28);
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test09827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09827");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        enhancer0.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback6 = null;
        enhancer0.setCallback(callback6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        enhancer9.setUseFactory(false);
        enhancer9.setUseCache(false);
        boolean boolean14 = generatorStrategy8.equals((java.lang.Object) enhancer9);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = enhancer9.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer9.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        enhancer17.setInterceptDuringConstruction(true);
        boolean boolean21 = enhancer17.getUseCache();
        enhancer17.setAttemptLoad(false);
        enhancer17.setSerialVersionUID((java.lang.Long) (-1L));
        enhancer17.setInterceptDuringConstruction(false);
        boolean boolean28 = enhancer17.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = enhancer17.getStrategy();
        enhancer17.setUseFactory(false);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        enhancer32.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        enhancer32.setClassLoader(classLoader37);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter39 = null;
        enhancer32.setCallbackFilter(callbackFilter39);
        enhancer32.setUseCache(false);
        boolean boolean43 = enhancer32.getUseCache();
        boolean boolean44 = enhancer32.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = enhancer32.getStrategy();
        enhancer17.setStrategy(generatorStrategy45);
        boolean boolean47 = generatorStrategy16.equals((java.lang.Object) generatorStrategy45);
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        enhancer48.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader52 = enhancer48.getClassLoader();
        java.lang.Class class53 = null;
        enhancer48.setSuperclass(class53);
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        enhancer55.setInterceptDuringConstruction(true);
        boolean boolean59 = enhancer55.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = enhancer55.getStrategy();
        enhancer48.setStrategy(generatorStrategy60);
        org.mockito.cglib.proxy.Enhancer enhancer62 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader63 = enhancer62.getClassLoader();
        enhancer62.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader66 = enhancer62.getClassLoader();
        java.lang.Class class67 = null;
        enhancer62.setSuperclass(class67);
        org.mockito.cglib.proxy.Enhancer enhancer69 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader70 = enhancer69.getClassLoader();
        enhancer69.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader73 = enhancer69.getClassLoader();
        java.lang.Class class74 = null;
        enhancer69.setSuperclass(class74);
        org.mockito.cglib.proxy.Enhancer enhancer76 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader77 = enhancer76.getClassLoader();
        enhancer76.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer80 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader81 = enhancer80.getClassLoader();
        enhancer76.setClassLoader(classLoader81);
        enhancer76.setUseCache(false);
        java.lang.ClassLoader classLoader85 = enhancer76.getClassLoader();
        enhancer69.setClassLoader(classLoader85);
        enhancer62.setClassLoader(classLoader85);
        java.lang.ClassLoader classLoader88 = enhancer62.getClassLoader();
        enhancer62.setUseCache(true);
        java.lang.ClassLoader classLoader91 = enhancer62.getClassLoader();
        enhancer48.setClassLoader(classLoader91);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter93 = null;
        enhancer48.setCallbackFilter(callbackFilter93);
        enhancer48.setInterceptDuringConstruction(false);
        boolean boolean97 = generatorStrategy45.equals((java.lang.Object) enhancer48);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertNotNull(classLoader63);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(classLoader73);
        org.junit.Assert.assertNotNull(classLoader77);
        org.junit.Assert.assertNotNull(classLoader81);
        org.junit.Assert.assertNotNull(classLoader85);
        org.junit.Assert.assertNotNull(classLoader88);
        org.junit.Assert.assertNotNull(classLoader91);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test09828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09828");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass8 = enhancer0.getClass();
        boolean boolean9 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass8);
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader11 = enhancer10.getClassLoader();
        enhancer10.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader14 = enhancer10.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = enhancer10.getStrategy();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter16 = null;
        enhancer10.setCallbackFilter(callbackFilter16);
        org.mockito.cglib.proxy.Callback callback18 = null;
        enhancer10.setCallback(callback18);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter22 = null;
        enhancer20.setCallbackFilter(callbackFilter22);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter24 = null;
        enhancer20.setCallbackFilter(callbackFilter24);
        enhancer20.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer29.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader34 = enhancer33.getClassLoader();
        enhancer29.setClassLoader(classLoader34);
        enhancer28.setClassLoader(classLoader34);
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        enhancer37.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader41 = enhancer37.getClassLoader();
        enhancer28.setClassLoader(classLoader41);
        boolean boolean43 = enhancer28.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader45 = enhancer44.getClassLoader();
        enhancer44.setInterceptDuringConstruction(true);
        boolean boolean48 = enhancer44.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = enhancer44.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer50 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader51 = enhancer50.getClassLoader();
        enhancer50.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader54 = enhancer50.getClassLoader();
        org.mockito.cglib.proxy.Callback callback55 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray56 = new org.mockito.cglib.proxy.Callback[] { callback55 };
        enhancer50.setCallbacks(callbackArray56);
        enhancer44.setCallbacks(callbackArray56);
        enhancer28.setCallbacks(callbackArray56);
        enhancer20.setCallbacks(callbackArray56);
        enhancer10.setCallbacks(callbackArray56);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerStaticCallbacks((java.lang.Class) wildcardClass8, callbackArray56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.proxy.Enhancer is not an enhanced class");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(callbackArray56);
    }

    @Test
    public void test09829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09829");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseCache(true);
        boolean boolean4 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        enhancer5.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader9 = enhancer5.getClassLoader();
        java.lang.Class class10 = null;
        enhancer5.setSuperclass(class10);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        enhancer12.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        enhancer12.setClassLoader(classLoader17);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = enhancer12.getStrategy();
        java.lang.Class<?> wildcardClass20 = enhancer12.getClass();
        enhancer5.setSuperclass((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer25.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer25.setClassLoader(classLoader30);
        enhancer25.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = enhancer25.getNamingPolicy();
        boolean boolean35 = enhancer25.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        enhancer36.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader40 = enhancer36.getClassLoader();
        java.lang.Class class41 = null;
        enhancer36.setSuperclass(class41);
        java.lang.ClassLoader classLoader43 = enhancer36.getClassLoader();
        enhancer25.setClassLoader(classLoader43);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = enhancer25.getStrategy();
        enhancer0.setStrategy(generatorStrategy45);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        enhancer48.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader52 = enhancer48.getClassLoader();
        java.lang.Class class53 = null;
        enhancer48.setSuperclass(class53);
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        enhancer55.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer59 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader60 = enhancer59.getClassLoader();
        enhancer55.setClassLoader(classLoader60);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = enhancer55.getStrategy();
        java.lang.Class<?> wildcardClass63 = enhancer55.getClass();
        enhancer48.setSuperclass((java.lang.Class) wildcardClass63);
        org.mockito.cglib.proxy.Callback callback65 = null;
        enhancer48.setCallback(callback65);
        boolean boolean67 = namingPolicy47.equals((java.lang.Object) callback65);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(classLoader60);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test09830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09830");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        enhancer5.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader9 = enhancer5.getClassLoader();
        org.mockito.cglib.proxy.Callback callback10 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray11 = new org.mockito.cglib.proxy.Callback[] { callback10 };
        enhancer5.setCallbacks(callbackArray11);
        enhancer0.setCallbacks(callbackArray11);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Callback callback15 = null;
        enhancer0.setCallback(callback15);
        java.lang.Class[] classArray17 = null;
        enhancer0.setInterfaces(classArray17);
        enhancer0.setSerialVersionUID((java.lang.Long) 100L);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer21.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        enhancer24.setUseCache(true);
        boolean boolean28 = enhancer24.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer29.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader33 = enhancer29.getClassLoader();
        java.lang.Class class34 = null;
        enhancer29.setSuperclass(class34);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        enhancer36.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        enhancer36.setClassLoader(classLoader41);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = enhancer36.getStrategy();
        java.lang.Class<?> wildcardClass44 = enhancer36.getClass();
        enhancer29.setSuperclass((java.lang.Class) wildcardClass44);
        enhancer24.setSuperclass((java.lang.Class) wildcardClass44);
        enhancer21.setSuperclass((java.lang.Class) wildcardClass44);
        org.mockito.cglib.proxy.Callback callback48 = null;
        enhancer21.setCallback(callback48);
        org.mockito.cglib.proxy.Enhancer enhancer50 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader51 = enhancer50.getClassLoader();
        enhancer50.setInterceptDuringConstruction(true);
        boolean boolean54 = enhancer50.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = enhancer50.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader57 = enhancer56.getClassLoader();
        enhancer56.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader60 = enhancer56.getClassLoader();
        org.mockito.cglib.proxy.Callback callback61 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray62 = new org.mockito.cglib.proxy.Callback[] { callback61 };
        enhancer56.setCallbacks(callbackArray62);
        enhancer50.setCallbacks(callbackArray62);
        enhancer21.setCallbacks(callbackArray62);
        enhancer0.setCallbacks(callbackArray62);
        enhancer0.setInterceptDuringConstruction(true);
        boolean boolean69 = enhancer0.getUseCache();
        enhancer0.setAttemptLoad(false);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(callbackArray11);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertNotNull(classLoader60);
        org.junit.Assert.assertNotNull(callbackArray62);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
    }

    @Test
    public void test09831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09831");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer7.setClassLoader(classLoader12);
        enhancer7.setUseCache(false);
        java.lang.ClassLoader classLoader16 = enhancer7.getClassLoader();
        enhancer0.setClassLoader(classLoader16);
        java.lang.ClassLoader classLoader18 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter19 = null;
        enhancer0.setCallbackFilter(callbackFilter19);
        enhancer0.setUseFactory(true);
        enhancer0.setInterceptDuringConstruction(true);
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader28 = enhancer27.getClassLoader();
        enhancer27.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer27.setClassLoader(classLoader32);
        enhancer27.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = enhancer27.getNamingPolicy();
        enhancer27.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = enhancer27.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        enhancer40.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback43 = null;
        enhancer40.setCallback(callback43);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter45 = null;
        enhancer40.setCallbackFilter(callbackFilter45);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = enhancer40.getStrategy();
        boolean boolean48 = enhancer40.getUseCache();
        org.mockito.cglib.proxy.Callback callback49 = null;
        enhancer40.setCallback(callback49);
        org.mockito.cglib.proxy.Enhancer enhancer51 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader52 = enhancer51.getClassLoader();
        boolean boolean53 = enhancer51.getAttemptLoad();
        java.lang.ClassLoader classLoader54 = enhancer51.getClassLoader();
        enhancer40.setClassLoader(classLoader54);
        boolean boolean56 = namingPolicy39.equals((java.lang.Object) enhancer40);
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader58 = enhancer57.getClassLoader();
        enhancer57.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer61 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader62 = enhancer61.getClassLoader();
        enhancer57.setClassLoader(classLoader62);
        enhancer57.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer66 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader67 = enhancer66.getClassLoader();
        enhancer66.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer70 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader71 = enhancer70.getClassLoader();
        enhancer66.setClassLoader(classLoader71);
        enhancer66.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = enhancer66.getNamingPolicy();
        enhancer57.setNamingPolicy(namingPolicy75);
        enhancer57.setInterceptDuringConstruction(true);
        boolean boolean79 = enhancer57.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = enhancer57.getNamingPolicy();
        enhancer57.setSerialVersionUID((java.lang.Long) 0L);
        boolean boolean83 = namingPolicy39.equals((java.lang.Object) 0L);
        enhancer0.setNamingPolicy(namingPolicy39);
        org.mockito.cglib.proxy.Callback callback85 = null;
        enhancer0.setCallback(callback85);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertNotNull(classLoader67);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertNotNull(namingPolicy75);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(namingPolicy80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test09832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09832");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseCache(true);
        boolean boolean4 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        enhancer5.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader9 = enhancer5.getClassLoader();
        java.lang.Class class10 = null;
        enhancer5.setSuperclass(class10);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        enhancer12.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        enhancer12.setClassLoader(classLoader17);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = enhancer12.getStrategy();
        java.lang.Class<?> wildcardClass20 = enhancer12.getClass();
        enhancer5.setSuperclass((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        enhancer0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        enhancer26.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader30 = enhancer26.getClassLoader();
        java.lang.Class class31 = null;
        enhancer26.setSuperclass(class31);
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader34 = enhancer33.getClassLoader();
        enhancer33.setInterceptDuringConstruction(true);
        boolean boolean37 = enhancer33.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = enhancer33.getStrategy();
        enhancer26.setStrategy(generatorStrategy38);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        enhancer40.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader44 = enhancer40.getClassLoader();
        java.lang.Class class45 = null;
        enhancer40.setSuperclass(class45);
        org.mockito.cglib.proxy.Enhancer enhancer47 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader48 = enhancer47.getClassLoader();
        enhancer47.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer51 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader52 = enhancer51.getClassLoader();
        enhancer47.setClassLoader(classLoader52);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = enhancer47.getStrategy();
        java.lang.Class<?> wildcardClass55 = enhancer47.getClass();
        enhancer40.setSuperclass((java.lang.Class) wildcardClass55);
        enhancer26.setSuperclass((java.lang.Class) wildcardClass55);
        boolean boolean58 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass55);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass55);
        org.mockito.cglib.proxy.Callback callback60 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj61 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass55, callback60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test09833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09833");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer7.setClassLoader(classLoader12);
        enhancer7.setUseCache(false);
        java.lang.ClassLoader classLoader16 = enhancer7.getClassLoader();
        enhancer0.setClassLoader(classLoader16);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        enhancer18.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader22 = enhancer18.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer18.getStrategy();
        enhancer0.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer25.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer25.setClassLoader(classLoader30);
        enhancer25.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = enhancer25.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy34);
        org.mockito.cglib.proxy.Callback callback36 = null;
        enhancer0.setCallback(callback36);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader39 = enhancer38.getClassLoader();
        enhancer38.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader42 = enhancer38.getClassLoader();
        java.lang.Class class43 = null;
        enhancer38.setSuperclass(class43);
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader46 = enhancer45.getClassLoader();
        enhancer45.setInterceptDuringConstruction(true);
        boolean boolean49 = enhancer45.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = enhancer45.getStrategy();
        enhancer38.setStrategy(generatorStrategy50);
        org.mockito.cglib.proxy.Enhancer enhancer52 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader53 = enhancer52.getClassLoader();
        enhancer52.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader56 = enhancer52.getClassLoader();
        java.lang.Class class57 = null;
        enhancer52.setSuperclass(class57);
        org.mockito.cglib.proxy.Enhancer enhancer59 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader60 = enhancer59.getClassLoader();
        enhancer59.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer63 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader64 = enhancer63.getClassLoader();
        enhancer59.setClassLoader(classLoader64);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = enhancer59.getStrategy();
        java.lang.Class<?> wildcardClass67 = enhancer59.getClass();
        enhancer52.setSuperclass((java.lang.Class) wildcardClass67);
        enhancer38.setSuperclass((java.lang.Class) wildcardClass67);
        boolean boolean70 = enhancer38.getUseCache();
        boolean boolean71 = enhancer38.getUseCache();
        enhancer38.setUseCache(true);
        org.mockito.cglib.proxy.Callback callback74 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray75 = new org.mockito.cglib.proxy.Callback[] { callback74 };
        enhancer38.setCallbacks(callbackArray75);
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = enhancer38.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy77);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Callback callback81 = null;
        enhancer0.setCallback(callback81);
        java.lang.ClassLoader classLoader83 = enhancer0.getClassLoader();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(generatorStrategy50);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(classLoader60);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(callbackArray75);
        org.junit.Assert.assertNotNull(namingPolicy77);
        org.junit.Assert.assertNotNull(classLoader83);
    }

    @Test
    public void test09834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09834");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        java.lang.ClassLoader classLoader7 = enhancer0.getClassLoader();
        boolean boolean8 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader13 = enhancer9.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader18 = enhancer14.getClassLoader();
        org.mockito.cglib.proxy.Callback callback19 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray20 = new org.mockito.cglib.proxy.Callback[] { callback19 };
        enhancer14.setCallbacks(callbackArray20);
        enhancer9.setCallbacks(callbackArray20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer9.getStrategy();
        enhancer0.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        enhancer25.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = enhancer25.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer29.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader33 = enhancer29.getClassLoader();
        java.lang.Class class34 = null;
        enhancer29.setSuperclass(class34);
        java.lang.Class<?> wildcardClass36 = enhancer29.getClass();
        enhancer25.setSuperclass((java.lang.Class) wildcardClass36);
        boolean boolean38 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass36);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass36);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        enhancer40.setUseCache(true);
        boolean boolean44 = enhancer40.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = null;
        enhancer40.setNamingPolicy(namingPolicy45);
        java.lang.ClassLoader classLoader47 = enhancer40.getClassLoader();
        enhancer0.setClassLoader(classLoader47);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer51 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader52 = enhancer51.getClassLoader();
        enhancer51.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        enhancer51.setClassLoader(classLoader56);
        enhancer51.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer60 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader61 = enhancer60.getClassLoader();
        enhancer60.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer64 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader65 = enhancer64.getClassLoader();
        enhancer60.setClassLoader(classLoader65);
        enhancer60.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = enhancer60.getNamingPolicy();
        enhancer51.setNamingPolicy(namingPolicy69);
        org.mockito.cglib.proxy.Enhancer enhancer71 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader72 = enhancer71.getClassLoader();
        enhancer71.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader75 = enhancer71.getClassLoader();
        java.lang.Class class76 = null;
        enhancer71.setSuperclass(class76);
        org.mockito.cglib.proxy.Enhancer enhancer78 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader79 = enhancer78.getClassLoader();
        enhancer78.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer82 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader83 = enhancer82.getClassLoader();
        enhancer78.setClassLoader(classLoader83);
        enhancer78.setUseCache(false);
        java.lang.ClassLoader classLoader87 = enhancer78.getClassLoader();
        enhancer71.setClassLoader(classLoader87);
        boolean boolean89 = namingPolicy69.equals((java.lang.Object) enhancer71);
        boolean boolean90 = enhancer71.getUseCache();
        java.lang.Class<?> wildcardClass91 = enhancer71.getClass();
        boolean boolean92 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass91);
        boolean boolean93 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass91);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass91);
        org.mockito.cglib.proxy.Callback callback95 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj96 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass91, callback95);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(callbackArray20);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(classLoader72);
        org.junit.Assert.assertNotNull(classLoader75);
        org.junit.Assert.assertNotNull(classLoader79);
        org.junit.Assert.assertNotNull(classLoader83);
        org.junit.Assert.assertNotNull(classLoader87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(wildcardClass91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test09835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09835");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer9.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer9.getStrategy();
        enhancer0.setStrategy(generatorStrategy16);
        enhancer0.setUseCache(true);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer22.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        enhancer22.setClassLoader(classLoader27);
        enhancer22.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer31.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        enhancer31.setClassLoader(classLoader36);
        enhancer31.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = enhancer31.getNamingPolicy();
        enhancer22.setNamingPolicy(namingPolicy40);
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader43 = enhancer42.getClassLoader();
        enhancer42.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader46 = enhancer42.getClassLoader();
        java.lang.Class class47 = null;
        enhancer42.setSuperclass(class47);
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader50 = enhancer49.getClassLoader();
        enhancer49.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer53 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader54 = enhancer53.getClassLoader();
        enhancer49.setClassLoader(classLoader54);
        enhancer49.setUseCache(false);
        java.lang.ClassLoader classLoader58 = enhancer49.getClassLoader();
        enhancer42.setClassLoader(classLoader58);
        boolean boolean60 = namingPolicy40.equals((java.lang.Object) enhancer42);
        org.mockito.cglib.proxy.Enhancer enhancer61 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader62 = enhancer61.getClassLoader();
        enhancer61.setInterceptDuringConstruction(true);
        enhancer61.setSerialVersionUID((java.lang.Long) (-1L));
        boolean boolean67 = namingPolicy40.equals((java.lang.Object) enhancer61);
        org.mockito.cglib.proxy.Callback callback68 = null;
        enhancer61.setCallback(callback68);
        org.mockito.cglib.proxy.Enhancer enhancer70 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader71 = enhancer70.getClassLoader();
        enhancer70.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader74 = enhancer70.getClassLoader();
        java.lang.Class class75 = null;
        enhancer70.setSuperclass(class75);
        java.lang.Class<?> wildcardClass77 = enhancer70.getClass();
        boolean boolean78 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass77);
        enhancer61.setSuperclass((java.lang.Class) wildcardClass77);
        java.lang.Class<?> wildcardClass80 = enhancer61.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass80);
        java.lang.ClassLoader classLoader82 = enhancer0.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor83 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass80);
        org.junit.Assert.assertNotNull(classLoader82);
    }

    @Test
    public void test09836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09836");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        boolean boolean11 = enhancer7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer7.getStrategy();
        enhancer0.setStrategy(generatorStrategy12);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader18 = enhancer14.getClassLoader();
        java.lang.Class class19 = null;
        enhancer14.setSuperclass(class19);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer21.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer21.setClassLoader(classLoader26);
        enhancer21.setUseCache(false);
        java.lang.ClassLoader classLoader30 = enhancer21.getClassLoader();
        enhancer14.setClassLoader(classLoader30);
        boolean boolean32 = generatorStrategy12.equals((java.lang.Object) enhancer14);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = enhancer14.getNamingPolicy();
        boolean boolean34 = enhancer14.getAttemptLoad();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter35 = null;
        enhancer14.setCallbackFilter(callbackFilter35);
        java.lang.ClassLoader classLoader37 = enhancer14.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader39 = enhancer38.getClassLoader();
        enhancer38.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader42 = enhancer38.getClassLoader();
        org.mockito.cglib.proxy.Callback callback43 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray44 = new org.mockito.cglib.proxy.Callback[] { callback43 };
        enhancer38.setCallbacks(callbackArray44);
        enhancer38.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = enhancer38.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = enhancer38.getNamingPolicy();
        enhancer14.setNamingPolicy(namingPolicy49);
        enhancer14.setSerialVersionUID((java.lang.Long) 10L);
        boolean boolean53 = enhancer14.getAttemptLoad();
        enhancer14.setInterceptDuringConstruction(false);
        enhancer14.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer58 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader59 = enhancer58.getClassLoader();
        enhancer58.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer62 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader63 = enhancer62.getClassLoader();
        enhancer58.setClassLoader(classLoader63);
        enhancer58.setUseCache(false);
        boolean boolean67 = enhancer58.getAttemptLoad();
        java.lang.ClassLoader classLoader68 = enhancer58.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = enhancer58.getStrategy();
        boolean boolean70 = enhancer58.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = enhancer58.getNamingPolicy();
        java.lang.ClassLoader classLoader72 = enhancer58.getClassLoader();
        java.lang.ClassLoader classLoader73 = enhancer58.getClassLoader();
        enhancer14.setClassLoader(classLoader73);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(callbackArray44);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(classLoader63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(classLoader68);
        org.junit.Assert.assertNotNull(generatorStrategy69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(namingPolicy71);
        org.junit.Assert.assertNotNull(classLoader72);
        org.junit.Assert.assertNotNull(classLoader73);
    }

    @Test
    public void test09837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09837");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        boolean boolean4 = enhancer0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        boolean boolean6 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter7 = null;
        enhancer0.setCallbackFilter(callbackFilter7);
        enhancer0.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader11 = enhancer0.getClassLoader();
        java.lang.Class<?> wildcardClass12 = classLoader11.getClass();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test09838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09838");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        java.lang.ClassLoader classLoader7 = enhancer0.getClassLoader();
        boolean boolean8 = enhancer0.getUseCache();
        enhancer0.setSerialVersionUID((java.lang.Long) 100L);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        enhancer12.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        enhancer12.setClassLoader(classLoader17);
        enhancer12.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer21.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer21.setClassLoader(classLoader26);
        enhancer21.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = enhancer21.getNamingPolicy();
        enhancer12.setNamingPolicy(namingPolicy30);
        enhancer12.setInterceptDuringConstruction(true);
        enhancer12.setUseCache(false);
        enhancer12.setUseCache(false);
        boolean boolean38 = enhancer12.getAttemptLoad();
        org.mockito.cglib.proxy.Callback callback39 = null;
        enhancer12.setCallback(callback39);
        org.mockito.cglib.proxy.Callback callback41 = null;
        enhancer12.setCallback(callback41);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter43 = null;
        enhancer12.setCallbackFilter(callbackFilter43);
        boolean boolean45 = namingPolicy11.equals((java.lang.Object) enhancer12);
        enhancer12.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = enhancer12.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader50 = enhancer49.getClassLoader();
        enhancer49.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer53 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader54 = enhancer53.getClassLoader();
        enhancer49.setClassLoader(classLoader54);
        enhancer49.setUseCache(false);
        java.lang.ClassLoader classLoader58 = enhancer49.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = enhancer49.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = enhancer49.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = enhancer49.getNamingPolicy();
        java.lang.Class<?> wildcardClass62 = namingPolicy61.getClass();
        boolean boolean63 = generatorStrategy48.equals((java.lang.Object) wildcardClass62);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test09839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09839");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer9.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer9.getStrategy();
        enhancer0.setStrategy(generatorStrategy16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = enhancer0.getStrategy();
        enhancer0.setAttemptLoad(false);
        enhancer0.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader23 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Callback callback24 = null;
        enhancer0.setCallback(callback24);
        enhancer0.setUseFactory(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = enhancer0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor29 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(namingPolicy28);
    }

    @Test
    public void test09840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09840");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter2 = null;
        enhancer0.setCallbackFilter(callbackFilter2);
        boolean boolean4 = enhancer0.getAttemptLoad();
        enhancer0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        enhancer8.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        enhancer8.setClassLoader(classLoader13);
        enhancer8.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = enhancer8.getNamingPolicy();
        enhancer8.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = enhancer8.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        enhancer21.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback24 = null;
        enhancer21.setCallback(callback24);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter26 = null;
        enhancer21.setCallbackFilter(callbackFilter26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = enhancer21.getStrategy();
        boolean boolean29 = enhancer21.getUseCache();
        org.mockito.cglib.proxy.Callback callback30 = null;
        enhancer21.setCallback(callback30);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        boolean boolean34 = enhancer32.getAttemptLoad();
        java.lang.ClassLoader classLoader35 = enhancer32.getClassLoader();
        enhancer21.setClassLoader(classLoader35);
        boolean boolean37 = namingPolicy20.equals((java.lang.Object) enhancer21);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = enhancer21.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader40 = enhancer39.getClassLoader();
        enhancer39.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader44 = enhancer43.getClassLoader();
        enhancer39.setClassLoader(classLoader44);
        enhancer39.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = enhancer39.getNamingPolicy();
        boolean boolean49 = enhancer39.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer50 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader51 = enhancer50.getClassLoader();
        enhancer50.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader54 = enhancer50.getClassLoader();
        java.lang.Class class55 = null;
        enhancer50.setSuperclass(class55);
        java.lang.ClassLoader classLoader57 = enhancer50.getClassLoader();
        enhancer39.setClassLoader(classLoader57);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter59 = null;
        enhancer39.setCallbackFilter(callbackFilter59);
        java.lang.Class class61 = null;
        enhancer39.setSuperclass(class61);
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = enhancer39.getNamingPolicy();
        enhancer21.setNamingPolicy(namingPolicy63);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray65 = generatorStrategy7.generate((org.mockito.cglib.core.ClassGenerator) enhancer21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertNotNull(namingPolicy63);
    }

    @Test
    public void test09841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09841");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        boolean boolean2 = enhancer0.getAttemptLoad();
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        enhancer0.setUseFactory(true);
        enhancer0.setInterceptDuringConstruction(true);
        boolean boolean9 = enhancer0.getAttemptLoad();
        boolean boolean10 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer11.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader15 = enhancer11.getClassLoader();
        org.mockito.cglib.proxy.Callback callback16 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray17 = new org.mockito.cglib.proxy.Callback[] { callback16 };
        enhancer11.setCallbacks(callbackArray17);
        enhancer11.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = enhancer11.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer22.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader26 = enhancer22.getClassLoader();
        java.lang.Class class27 = null;
        enhancer22.setSuperclass(class27);
        java.lang.Class<?> wildcardClass29 = enhancer22.getClass();
        boolean boolean30 = generatorStrategy21.equals((java.lang.Object) wildcardClass29);
        boolean boolean32 = generatorStrategy21.equals((java.lang.Object) '4');
        boolean boolean34 = generatorStrategy21.equals((java.lang.Object) "");
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        enhancer35.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader39 = enhancer35.getClassLoader();
        java.lang.Class class40 = null;
        enhancer35.setSuperclass(class40);
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader43 = enhancer42.getClassLoader();
        enhancer42.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader47 = enhancer46.getClassLoader();
        enhancer42.setClassLoader(classLoader47);
        enhancer42.setUseCache(false);
        java.lang.ClassLoader classLoader51 = enhancer42.getClassLoader();
        enhancer35.setClassLoader(classLoader51);
        org.mockito.cglib.proxy.Enhancer enhancer53 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader54 = enhancer53.getClassLoader();
        enhancer53.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader57 = enhancer53.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = enhancer53.getStrategy();
        enhancer35.setStrategy(generatorStrategy58);
        org.mockito.cglib.proxy.Enhancer enhancer60 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader61 = enhancer60.getClassLoader();
        enhancer60.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer64 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader65 = enhancer64.getClassLoader();
        enhancer60.setClassLoader(classLoader65);
        enhancer60.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = enhancer60.getNamingPolicy();
        enhancer35.setNamingPolicy(namingPolicy69);
        org.mockito.cglib.proxy.Enhancer enhancer71 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader72 = enhancer71.getClassLoader();
        enhancer71.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader75 = enhancer71.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer76 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader77 = enhancer76.getClassLoader();
        enhancer76.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader80 = enhancer76.getClassLoader();
        org.mockito.cglib.proxy.Callback callback81 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray82 = new org.mockito.cglib.proxy.Callback[] { callback81 };
        enhancer76.setCallbacks(callbackArray82);
        enhancer71.setCallbacks(callbackArray82);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy85 = enhancer71.getStrategy();
        enhancer35.setStrategy(generatorStrategy85);
        boolean boolean87 = generatorStrategy21.equals((java.lang.Object) enhancer35);
        org.mockito.cglib.proxy.Enhancer enhancer88 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader89 = enhancer88.getClassLoader();
        enhancer88.setInterceptDuringConstruction(true);
        boolean boolean92 = enhancer88.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy93 = enhancer88.getStrategy();
        java.lang.Class[] classArray94 = new java.lang.Class[] {};
        enhancer88.setInterfaces(classArray94);
        enhancer35.setInterfaces(classArray94);
        java.lang.ClassLoader classLoader97 = enhancer35.getClassLoader();
        enhancer0.setClassLoader(classLoader97);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(callbackArray17);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(classLoader72);
        org.junit.Assert.assertNotNull(classLoader75);
        org.junit.Assert.assertNotNull(classLoader77);
        org.junit.Assert.assertNotNull(classLoader80);
        org.junit.Assert.assertNotNull(callbackArray82);
        org.junit.Assert.assertNotNull(generatorStrategy85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(classLoader89);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(generatorStrategy93);
        org.junit.Assert.assertNotNull(classArray94);
        org.junit.Assert.assertNotNull(classLoader97);
    }

    @Test
    public void test09842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09842");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        enhancer0.setStrategy(generatorStrategy9);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = enhancer11.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setUseCache(true);
        boolean boolean18 = enhancer14.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader20 = enhancer19.getClassLoader();
        enhancer19.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader23 = enhancer19.getClassLoader();
        java.lang.Class class24 = null;
        enhancer19.setSuperclass(class24);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        enhancer26.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader31 = enhancer30.getClassLoader();
        enhancer26.setClassLoader(classLoader31);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = enhancer26.getStrategy();
        java.lang.Class<?> wildcardClass34 = enhancer26.getClass();
        enhancer19.setSuperclass((java.lang.Class) wildcardClass34);
        enhancer14.setSuperclass((java.lang.Class) wildcardClass34);
        enhancer11.setSuperclass((java.lang.Class) wildcardClass34);
        org.mockito.cglib.proxy.Callback callback38 = null;
        enhancer11.setCallback(callback38);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        enhancer40.setInterceptDuringConstruction(true);
        boolean boolean44 = enhancer40.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = enhancer40.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader47 = enhancer46.getClassLoader();
        enhancer46.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader50 = enhancer46.getClassLoader();
        org.mockito.cglib.proxy.Callback callback51 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray52 = new org.mockito.cglib.proxy.Callback[] { callback51 };
        enhancer46.setCallbacks(callbackArray52);
        enhancer40.setCallbacks(callbackArray52);
        enhancer11.setCallbacks(callbackArray52);
        enhancer0.setCallbacks(callbackArray52);
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader58 = enhancer57.getClassLoader();
        enhancer57.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader61 = enhancer57.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer62 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader63 = enhancer62.getClassLoader();
        enhancer62.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader66 = enhancer62.getClassLoader();
        org.mockito.cglib.proxy.Callback callback67 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray68 = new org.mockito.cglib.proxy.Callback[] { callback67 };
        enhancer62.setCallbacks(callbackArray68);
        enhancer57.setCallbacks(callbackArray68);
        org.mockito.cglib.proxy.Enhancer enhancer71 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader72 = enhancer71.getClassLoader();
        enhancer71.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader75 = enhancer71.getClassLoader();
        enhancer57.setClassLoader(classLoader75);
        enhancer0.setClassLoader(classLoader75);
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter79 = null;
        enhancer0.setCallbackFilter(callbackFilter79);
        enhancer0.setInterceptDuringConstruction(false);
        boolean boolean83 = enhancer0.getAttemptLoad();
        enhancer0.setUseFactory(false);
        java.lang.ClassLoader classLoader86 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = enhancer0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj88 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(callbackArray52);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertNotNull(classLoader63);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertNotNull(callbackArray68);
        org.junit.Assert.assertNotNull(classLoader72);
        org.junit.Assert.assertNotNull(classLoader75);
        org.junit.Assert.assertNotNull(namingPolicy78);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(classLoader86);
        org.junit.Assert.assertNotNull(generatorStrategy87);
    }

    @Test
    public void test09843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09843");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        boolean boolean2 = enhancer0.getAttemptLoad();
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.proxy.Callback callback5 = null;
        enhancer0.setCallback(callback5);
        boolean boolean7 = enhancer0.getUseCache();
        boolean boolean8 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter9 = null;
        enhancer0.setCallbackFilter(callbackFilter9);
        enhancer0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        enhancer14.setClassLoader(classLoader19);
        enhancer14.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader24 = enhancer23.getClassLoader();
        enhancer23.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader28 = enhancer27.getClassLoader();
        enhancer23.setClassLoader(classLoader28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = enhancer23.getStrategy();
        enhancer23.setInterceptDuringConstruction(true);
        enhancer23.setAttemptLoad(false);
        boolean boolean35 = enhancer23.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        enhancer36.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        enhancer36.setClassLoader(classLoader41);
        enhancer36.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader46 = enhancer45.getClassLoader();
        enhancer45.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader49 = enhancer45.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer50 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader51 = enhancer50.getClassLoader();
        enhancer50.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader54 = enhancer50.getClassLoader();
        org.mockito.cglib.proxy.Callback callback55 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray56 = new org.mockito.cglib.proxy.Callback[] { callback55 };
        enhancer50.setCallbacks(callbackArray56);
        enhancer45.setCallbacks(callbackArray56);
        enhancer36.setCallbacks(callbackArray56);
        enhancer23.setCallbacks(callbackArray56);
        enhancer14.setCallbacks(callbackArray56);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = enhancer14.getStrategy();
        enhancer0.setStrategy(generatorStrategy62);
        java.lang.Class<?> wildcardClass64 = enhancer0.getClass();
        org.mockito.cglib.proxy.Callback callback65 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj66 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass64, callback65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(callbackArray56);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test09844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09844");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        enhancer0.setSerialVersionUID((java.lang.Long) 1L);
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        enhancer8.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader12 = enhancer8.getClassLoader();
        java.lang.Class class13 = null;
        enhancer8.setSuperclass(class13);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        enhancer15.setInterceptDuringConstruction(true);
        boolean boolean19 = enhancer15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = enhancer15.getStrategy();
        enhancer8.setStrategy(generatorStrategy20);
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer22.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader26 = enhancer22.getClassLoader();
        java.lang.Class class27 = null;
        enhancer22.setSuperclass(class27);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer29.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader34 = enhancer33.getClassLoader();
        enhancer29.setClassLoader(classLoader34);
        enhancer29.setUseCache(false);
        java.lang.ClassLoader classLoader38 = enhancer29.getClassLoader();
        enhancer22.setClassLoader(classLoader38);
        boolean boolean40 = generatorStrategy20.equals((java.lang.Object) enhancer22);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = enhancer22.getNamingPolicy();
        boolean boolean42 = enhancer22.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = null;
        enhancer22.setNamingPolicy(namingPolicy43);
        boolean boolean45 = enhancer22.getAttemptLoad();
        enhancer22.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        enhancer48.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer52 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader53 = enhancer52.getClassLoader();
        enhancer48.setClassLoader(classLoader53);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = enhancer48.getStrategy();
        java.lang.Class<?> wildcardClass56 = enhancer48.getClass();
        boolean boolean57 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass56);
        boolean boolean58 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass56);
        boolean boolean59 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass56);
        enhancer22.setSuperclass((java.lang.Class) wildcardClass56);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass56);
        org.mockito.cglib.proxy.Callback callback62 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj63 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass56, callback62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test09845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09845");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader9 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter10 = null;
        enhancer0.setCallbackFilter(callbackFilter10);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        enhancer14.setClassLoader(classLoader19);
        enhancer13.setClassLoader(classLoader19);
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer22.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader26 = enhancer22.getClassLoader();
        enhancer13.setClassLoader(classLoader26);
        enhancer0.setClassLoader(classLoader26);
        org.mockito.cglib.proxy.Callback callback29 = null;
        enhancer0.setCallback(callback29);
        java.lang.Class<?> wildcardClass31 = enhancer0.getClass();
        boolean boolean32 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass31);
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader34 = enhancer33.getClassLoader();
        enhancer33.setInterceptDuringConstruction(true);
        boolean boolean37 = enhancer33.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = enhancer33.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader40 = enhancer39.getClassLoader();
        enhancer39.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader43 = enhancer39.getClassLoader();
        org.mockito.cglib.proxy.Callback callback44 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray45 = new org.mockito.cglib.proxy.Callback[] { callback44 };
        enhancer39.setCallbacks(callbackArray45);
        enhancer33.setCallbacks(callbackArray45);
        org.mockito.cglib.proxy.Callback callback48 = null;
        enhancer33.setCallback(callback48);
        enhancer33.setUseCache(false);
        java.lang.ClassLoader classLoader52 = enhancer33.getClassLoader();
        boolean boolean53 = enhancer33.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer54 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader55 = enhancer54.getClassLoader();
        enhancer54.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer58 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader59 = enhancer58.getClassLoader();
        enhancer54.setClassLoader(classLoader59);
        enhancer54.setUseCache(false);
        java.lang.ClassLoader classLoader63 = enhancer54.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer64 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader65 = enhancer64.getClassLoader();
        enhancer64.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader68 = enhancer64.getClassLoader();
        org.mockito.cglib.proxy.Callback callback69 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray70 = new org.mockito.cglib.proxy.Callback[] { callback69 };
        enhancer64.setCallbacks(callbackArray70);
        enhancer64.setSerialVersionUID((java.lang.Long) 0L);
        enhancer64.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.proxy.Enhancer enhancer76 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader77 = enhancer76.getClassLoader();
        enhancer76.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader80 = enhancer76.getClassLoader();
        org.mockito.cglib.proxy.Callback callback81 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray82 = new org.mockito.cglib.proxy.Callback[] { callback81 };
        enhancer76.setCallbacks(callbackArray82);
        org.mockito.cglib.proxy.Enhancer enhancer84 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader85 = enhancer84.getClassLoader();
        enhancer84.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader88 = enhancer84.getClassLoader();
        java.lang.Class class89 = null;
        enhancer84.setSuperclass(class89);
        java.lang.Class<?> wildcardClass91 = enhancer84.getClass();
        boolean boolean92 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass91);
        enhancer76.setSuperclass((java.lang.Class) wildcardClass91);
        enhancer64.setSuperclass((java.lang.Class) wildcardClass91);
        java.lang.Class[] classArray95 = new java.lang.Class[] { wildcardClass91 };
        enhancer54.setInterfaces(classArray95);
        enhancer33.setInterfaces(classArray95);
        java.util.List list98 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.getMethods((java.lang.Class) wildcardClass31, classArray95, list98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(callbackArray45);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(classLoader63);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(classLoader68);
        org.junit.Assert.assertNotNull(callbackArray70);
        org.junit.Assert.assertNotNull(classLoader77);
        org.junit.Assert.assertNotNull(classLoader80);
        org.junit.Assert.assertNotNull(callbackArray82);
        org.junit.Assert.assertNotNull(classLoader85);
        org.junit.Assert.assertNotNull(classLoader88);
        org.junit.Assert.assertNotNull(wildcardClass91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(classArray95);
    }

    @Test
    public void test09846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09846");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setUseFactory(false);
        org.mockito.cglib.proxy.Callback callback3 = null;
        enhancer0.setCallback(callback3);
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        enhancer5.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader9 = enhancer5.getClassLoader();
        org.mockito.cglib.proxy.Callback callback10 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray11 = new org.mockito.cglib.proxy.Callback[] { callback10 };
        enhancer5.setCallbacks(callbackArray11);
        enhancer5.setSerialVersionUID((java.lang.Long) 0L);
        boolean boolean15 = enhancer5.getUseCache();
        enhancer5.setUseCache(true);
        enhancer5.setSerialVersionUID((java.lang.Long) (-1L));
        java.lang.ClassLoader classLoader20 = enhancer5.getClassLoader();
        enhancer0.setClassLoader(classLoader20);
        org.mockito.cglib.proxy.Callback callback22 = null;
        enhancer0.setCallback(callback22);
        org.mockito.asm.ClassVisitor classVisitor24 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(callbackArray11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(classLoader20);
    }

    @Test
    public void test09847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09847");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader9 = enhancer0.getClassLoader();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Callback callback12 = null;
        enhancer0.setCallback(callback12);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter14 = null;
        enhancer0.setCallbackFilter(callbackFilter14);
        java.lang.Class[] classArray16 = null;
        enhancer0.setInterfaces(classArray16);
        org.mockito.cglib.proxy.Callback callback18 = null;
        enhancer0.setCallback(callback18);
        boolean boolean20 = enhancer0.getAttemptLoad();
        java.lang.ClassLoader classLoader21 = enhancer0.getClassLoader();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(classLoader21);
    }

    @Test
    public void test09848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09848");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter2 = null;
        enhancer0.setCallbackFilter(callbackFilter2);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter4 = null;
        enhancer0.setCallbackFilter(callbackFilter4);
        boolean boolean6 = enhancer0.getUseCache();
        enhancer0.setSerialVersionUID((java.lang.Long) 100L);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter9 = null;
        enhancer0.setCallbackFilter(callbackFilter9);
        org.mockito.cglib.proxy.Callback callback11 = null;
        enhancer0.setCallback(callback11);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer13.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        enhancer13.setClassLoader(classLoader18);
        enhancer13.setUseCache(false);
        java.lang.ClassLoader classLoader22 = enhancer13.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = enhancer13.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = enhancer13.getNamingPolicy();
        java.lang.ClassLoader classLoader25 = enhancer13.getClassLoader();
        enhancer13.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter28 = null;
        enhancer13.setCallbackFilter(callbackFilter28);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader31 = enhancer30.getClassLoader();
        enhancer30.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        enhancer30.setClassLoader(classLoader35);
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        enhancer37.setInterceptDuringConstruction(true);
        boolean boolean41 = enhancer37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = enhancer37.getStrategy();
        java.lang.Class[] classArray43 = new java.lang.Class[] {};
        enhancer37.setInterfaces(classArray43);
        enhancer30.setInterfaces(classArray43);
        enhancer13.setInterfaces(classArray43);
        enhancer0.setInterfaces(classArray43);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class48 = enhancer0.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: createClass does not accept callbacks");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(classArray43);
    }

    @Test
    public void test09849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09849");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = enhancer0.getStrategy();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        enhancer10.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = enhancer10.getStrategy();
        enhancer0.setStrategy(generatorStrategy13);
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        enhancer17.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer17.setClassLoader(classLoader22);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = enhancer17.getStrategy();
        enhancer17.setInterceptDuringConstruction(true);
        enhancer17.setAttemptLoad(false);
        enhancer17.setSerialVersionUID((java.lang.Long) 1L);
        java.lang.ClassLoader classLoader31 = enhancer17.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = enhancer17.getNamingPolicy();
        enhancer17.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Callback callback35 = null;
        enhancer17.setCallback(callback35);
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        enhancer37.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader42 = enhancer41.getClassLoader();
        enhancer37.setClassLoader(classLoader42);
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader45 = enhancer44.getClassLoader();
        enhancer44.setInterceptDuringConstruction(true);
        boolean boolean48 = enhancer44.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = enhancer44.getStrategy();
        java.lang.Class[] classArray50 = new java.lang.Class[] {};
        enhancer44.setInterfaces(classArray50);
        enhancer37.setInterfaces(classArray50);
        org.mockito.cglib.proxy.Enhancer enhancer53 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader54 = enhancer53.getClassLoader();
        enhancer53.setInterceptDuringConstruction(true);
        boolean boolean57 = enhancer53.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = enhancer53.getStrategy();
        java.lang.Class[] classArray59 = new java.lang.Class[] {};
        enhancer53.setInterfaces(classArray59);
        enhancer37.setInterfaces(classArray59);
        enhancer17.setInterfaces(classArray59);
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackTypes(classArray59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Array cannot be empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertNotNull(classArray59);
    }

    @Test
    public void test09850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09850");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Callback callback5 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray6 = new org.mockito.cglib.proxy.Callback[] { callback5 };
        enhancer0.setCallbacks(callbackArray6);
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader11 = enhancer10.getClassLoader();
        enhancer10.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer10.setClassLoader(classLoader15);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter17 = null;
        enhancer10.setCallbackFilter(callbackFilter17);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = enhancer10.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = enhancer0.getStrategy();
        enhancer0.setUseFactory(false);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        enhancer24.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader28 = enhancer24.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer29.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader33 = enhancer29.getClassLoader();
        org.mockito.cglib.proxy.Callback callback34 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray35 = new org.mockito.cglib.proxy.Callback[] { callback34 };
        enhancer29.setCallbacks(callbackArray35);
        enhancer24.setCallbacks(callbackArray35);
        enhancer24.setInterceptDuringConstruction(false);
        boolean boolean40 = enhancer24.getAttemptLoad();
        java.lang.ClassLoader classLoader41 = enhancer24.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = enhancer24.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        enhancer43.setUseFactory(false);
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader47 = enhancer46.getClassLoader();
        enhancer46.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer50 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader51 = enhancer50.getClassLoader();
        enhancer46.setClassLoader(classLoader51);
        enhancer46.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        enhancer55.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer59 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader60 = enhancer59.getClassLoader();
        enhancer55.setClassLoader(classLoader60);
        enhancer55.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = enhancer55.getNamingPolicy();
        enhancer46.setNamingPolicy(namingPolicy64);
        enhancer46.setInterceptDuringConstruction(true);
        enhancer46.setSerialVersionUID((java.lang.Long) 100L);
        org.mockito.cglib.proxy.Enhancer enhancer70 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader71 = enhancer70.getClassLoader();
        enhancer70.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer74 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader75 = enhancer74.getClassLoader();
        enhancer70.setClassLoader(classLoader75);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = enhancer70.getStrategy();
        enhancer70.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer80 = new org.mockito.cglib.proxy.Enhancer();
        enhancer80.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = enhancer80.getStrategy();
        enhancer70.setStrategy(generatorStrategy83);
        enhancer46.setStrategy(generatorStrategy83);
        enhancer43.setStrategy(generatorStrategy83);
        enhancer43.setAttemptLoad(false);
        enhancer43.setUseFactory(true);
        boolean boolean91 = generatorStrategy42.equals((java.lang.Object) true);
        org.mockito.cglib.proxy.Enhancer enhancer92 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader93 = enhancer92.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy94 = enhancer92.getStrategy();
        boolean boolean95 = generatorStrategy42.equals((java.lang.Object) enhancer92);
        java.lang.ClassLoader classLoader96 = enhancer92.getClassLoader();
        enhancer0.setClassLoader(classLoader96);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(callbackArray6);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(callbackArray35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(classLoader60);
        org.junit.Assert.assertNotNull(namingPolicy64);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertNotNull(classLoader75);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertNotNull(generatorStrategy83);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(classLoader93);
        org.junit.Assert.assertNotNull(generatorStrategy94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(classLoader96);
    }

    @Test
    public void test09851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09851");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer9.setClassLoader(classLoader14);
        enhancer9.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer9.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer20.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader24 = enhancer20.getClassLoader();
        java.lang.Class class25 = null;
        enhancer20.setSuperclass(class25);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader28 = enhancer27.getClassLoader();
        enhancer27.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer27.setClassLoader(classLoader32);
        enhancer27.setUseCache(false);
        java.lang.ClassLoader classLoader36 = enhancer27.getClassLoader();
        enhancer20.setClassLoader(classLoader36);
        boolean boolean38 = namingPolicy18.equals((java.lang.Object) enhancer20);
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader40 = enhancer39.getClassLoader();
        enhancer39.setInterceptDuringConstruction(true);
        enhancer39.setSerialVersionUID((java.lang.Long) (-1L));
        boolean boolean45 = namingPolicy18.equals((java.lang.Object) enhancer39);
        boolean boolean46 = enhancer39.getUseCache();
        enhancer39.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = enhancer39.getStrategy();
        java.lang.ClassLoader classLoader50 = enhancer39.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = enhancer39.getStrategy();
        enhancer39.setUseCache(false);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(generatorStrategy51);
    }

    @Test
    public void test09852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09852");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseCache(true);
        boolean boolean4 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        boolean boolean7 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = enhancer0.getStrategy();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = enhancer0.getStrategy();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(generatorStrategy13);
    }

    @Test
    public void test09853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09853");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader2 = enhancer1.getClassLoader();
        enhancer1.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        enhancer1.setClassLoader(classLoader6);
        enhancer0.setClassLoader(classLoader6);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader13 = enhancer9.getClassLoader();
        enhancer0.setClassLoader(classLoader13);
        boolean boolean15 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        enhancer16.setInterceptDuringConstruction(true);
        boolean boolean20 = enhancer16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = enhancer16.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer22.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader26 = enhancer22.getClassLoader();
        org.mockito.cglib.proxy.Callback callback27 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray28 = new org.mockito.cglib.proxy.Callback[] { callback27 };
        enhancer22.setCallbacks(callbackArray28);
        enhancer16.setCallbacks(callbackArray28);
        enhancer0.setCallbacks(callbackArray28);
        enhancer0.setUseFactory(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = enhancer0.getStrategy();
        enhancer0.setUseFactory(false);
        boolean boolean37 = enhancer0.getAttemptLoad();
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(callbackArray28);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test09854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09854");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        java.lang.ClassLoader classLoader7 = enhancer0.getClassLoader();
        boolean boolean8 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader13 = enhancer9.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader18 = enhancer14.getClassLoader();
        org.mockito.cglib.proxy.Callback callback19 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray20 = new org.mockito.cglib.proxy.Callback[] { callback19 };
        enhancer14.setCallbacks(callbackArray20);
        enhancer9.setCallbacks(callbackArray20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer9.getStrategy();
        enhancer0.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer25.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer25.setClassLoader(classLoader30);
        enhancer25.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        enhancer34.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader39 = enhancer38.getClassLoader();
        enhancer34.setClassLoader(classLoader39);
        enhancer34.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = enhancer34.getNamingPolicy();
        enhancer25.setNamingPolicy(namingPolicy43);
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader46 = enhancer45.getClassLoader();
        enhancer45.setInterceptDuringConstruction(true);
        boolean boolean49 = namingPolicy43.equals((java.lang.Object) enhancer45);
        java.lang.ClassLoader classLoader50 = enhancer45.getClassLoader();
        enhancer0.setClassLoader(classLoader50);
        org.mockito.cglib.proxy.Enhancer enhancer52 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer53 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader54 = enhancer53.getClassLoader();
        enhancer53.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader58 = enhancer57.getClassLoader();
        enhancer53.setClassLoader(classLoader58);
        enhancer52.setClassLoader(classLoader58);
        org.mockito.cglib.proxy.Enhancer enhancer61 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader62 = enhancer61.getClassLoader();
        enhancer61.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader65 = enhancer61.getClassLoader();
        enhancer52.setClassLoader(classLoader65);
        enhancer0.setClassLoader(classLoader65);
        org.mockito.cglib.proxy.Enhancer enhancer68 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader69 = enhancer68.getClassLoader();
        enhancer68.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer72 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader73 = enhancer72.getClassLoader();
        enhancer68.setClassLoader(classLoader73);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = enhancer68.getStrategy();
        enhancer0.setStrategy(generatorStrategy75);
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class79 = enhancer0.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback types are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(callbackArray20);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(classLoader69);
        org.junit.Assert.assertNotNull(classLoader73);
        org.junit.Assert.assertNotNull(generatorStrategy75);
    }

    @Test
    public void test09855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09855");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        java.lang.ClassLoader classLoader7 = enhancer0.getClassLoader();
        boolean boolean8 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader13 = enhancer9.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader18 = enhancer14.getClassLoader();
        org.mockito.cglib.proxy.Callback callback19 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray20 = new org.mockito.cglib.proxy.Callback[] { callback19 };
        enhancer14.setCallbacks(callbackArray20);
        enhancer9.setCallbacks(callbackArray20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer9.getStrategy();
        enhancer0.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer25.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer25.setClassLoader(classLoader30);
        enhancer25.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        enhancer34.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader39 = enhancer38.getClassLoader();
        enhancer34.setClassLoader(classLoader39);
        enhancer34.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = enhancer34.getNamingPolicy();
        enhancer25.setNamingPolicy(namingPolicy43);
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader46 = enhancer45.getClassLoader();
        enhancer45.setInterceptDuringConstruction(true);
        boolean boolean49 = namingPolicy43.equals((java.lang.Object) enhancer45);
        java.lang.ClassLoader classLoader50 = enhancer45.getClassLoader();
        enhancer0.setClassLoader(classLoader50);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter52 = null;
        enhancer0.setCallbackFilter(callbackFilter52);
        org.mockito.cglib.proxy.Callback callback54 = null;
        enhancer0.setCallback(callback54);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(callbackArray20);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(classLoader50);
    }

    @Test
    public void test09856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09856");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter2 = null;
        enhancer0.setCallbackFilter(callbackFilter2);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter4 = null;
        enhancer0.setCallbackFilter(callbackFilter4);
        boolean boolean6 = enhancer0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = enhancer0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer11.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader15 = enhancer11.getClassLoader();
        java.lang.Class class16 = null;
        enhancer11.setSuperclass(class16);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        enhancer18.setInterceptDuringConstruction(true);
        boolean boolean22 = enhancer18.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer18.getStrategy();
        enhancer11.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer25.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader29 = enhancer25.getClassLoader();
        java.lang.Class class30 = null;
        enhancer25.setSuperclass(class30);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        enhancer32.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        enhancer32.setClassLoader(classLoader37);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = enhancer32.getStrategy();
        java.lang.Class<?> wildcardClass40 = enhancer32.getClass();
        enhancer25.setSuperclass((java.lang.Class) wildcardClass40);
        enhancer11.setSuperclass((java.lang.Class) wildcardClass40);
        boolean boolean43 = enhancer11.getUseCache();
        boolean boolean44 = enhancer11.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = enhancer11.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader47 = enhancer46.getClassLoader();
        enhancer46.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer50 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader51 = enhancer50.getClassLoader();
        enhancer46.setClassLoader(classLoader51);
        enhancer46.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        enhancer55.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer59 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader60 = enhancer59.getClassLoader();
        enhancer55.setClassLoader(classLoader60);
        enhancer55.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = enhancer55.getNamingPolicy();
        enhancer46.setNamingPolicy(namingPolicy64);
        org.mockito.cglib.proxy.Enhancer enhancer66 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader67 = enhancer66.getClassLoader();
        enhancer66.setInterceptDuringConstruction(true);
        boolean boolean70 = namingPolicy64.equals((java.lang.Object) enhancer66);
        enhancer11.setNamingPolicy(namingPolicy64);
        org.mockito.cglib.proxy.Callback callback72 = null;
        enhancer11.setCallback(callback72);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter74 = null;
        enhancer11.setCallbackFilter(callbackFilter74);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy76 = enhancer11.getStrategy();
        boolean boolean77 = enhancer11.getAttemptLoad();
        org.mockito.cglib.core.Predicate predicate78 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str79 = namingPolicy8.getClassName("", "hi!", (java.lang.Object) boolean77, predicate78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(classLoader60);
        org.junit.Assert.assertNotNull(namingPolicy64);
        org.junit.Assert.assertNotNull(classLoader67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(generatorStrategy76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test09857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09857");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer7.setClassLoader(classLoader12);
        enhancer7.setUseCache(false);
        java.lang.ClassLoader classLoader16 = enhancer7.getClassLoader();
        enhancer0.setClassLoader(classLoader16);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        enhancer18.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader22 = enhancer18.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer18.getStrategy();
        enhancer0.setStrategy(generatorStrategy23);
        boolean boolean25 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = enhancer26.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer29.setUseCache(true);
        boolean boolean33 = enhancer29.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        enhancer34.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader38 = enhancer34.getClassLoader();
        java.lang.Class class39 = null;
        enhancer34.setSuperclass(class39);
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader42 = enhancer41.getClassLoader();
        enhancer41.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader46 = enhancer45.getClassLoader();
        enhancer41.setClassLoader(classLoader46);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = enhancer41.getStrategy();
        java.lang.Class<?> wildcardClass49 = enhancer41.getClass();
        enhancer34.setSuperclass((java.lang.Class) wildcardClass49);
        enhancer29.setSuperclass((java.lang.Class) wildcardClass49);
        enhancer26.setSuperclass((java.lang.Class) wildcardClass49);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass49);
        enhancer0.setInterceptDuringConstruction(false);
        boolean boolean56 = enhancer0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class57 = enhancer0.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback types are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test09858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09858");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer7.setClassLoader(classLoader12);
        enhancer7.setUseCache(false);
        java.lang.ClassLoader classLoader16 = enhancer7.getClassLoader();
        enhancer0.setClassLoader(classLoader16);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        enhancer18.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader22 = enhancer18.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer18.getStrategy();
        enhancer0.setStrategy(generatorStrategy23);
        boolean boolean25 = enhancer0.getAttemptLoad();
        boolean boolean26 = enhancer0.getAttemptLoad();
        java.lang.ClassLoader classLoader27 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader29 = enhancer28.getClassLoader();
        enhancer28.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader32 = enhancer28.getClassLoader();
        org.mockito.cglib.proxy.Callback callback33 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray34 = new org.mockito.cglib.proxy.Callback[] { callback33 };
        enhancer28.setCallbacks(callbackArray34);
        enhancer28.setSerialVersionUID((java.lang.Long) 0L);
        enhancer28.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        enhancer40.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader44 = enhancer40.getClassLoader();
        org.mockito.cglib.proxy.Callback callback45 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray46 = new org.mockito.cglib.proxy.Callback[] { callback45 };
        enhancer40.setCallbacks(callbackArray46);
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        enhancer48.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader52 = enhancer48.getClassLoader();
        java.lang.Class class53 = null;
        enhancer48.setSuperclass(class53);
        java.lang.Class<?> wildcardClass55 = enhancer48.getClass();
        boolean boolean56 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass55);
        enhancer40.setSuperclass((java.lang.Class) wildcardClass55);
        enhancer28.setSuperclass((java.lang.Class) wildcardClass55);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass55);
        enhancer0.setInterceptDuringConstruction(false);
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = enhancer0.getNamingPolicy();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(callbackArray34);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(callbackArray46);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(namingPolicy64);
    }

    @Test
    public void test09859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09859");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Callback callback5 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray6 = new org.mockito.cglib.proxy.Callback[] { callback5 };
        enhancer0.setCallbacks(callbackArray6);
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        enhancer12.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader16 = enhancer12.getClassLoader();
        org.mockito.cglib.proxy.Callback callback17 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray18 = new org.mockito.cglib.proxy.Callback[] { callback17 };
        enhancer12.setCallbacks(callbackArray18);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer20.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader24 = enhancer20.getClassLoader();
        java.lang.Class class25 = null;
        enhancer20.setSuperclass(class25);
        java.lang.Class<?> wildcardClass27 = enhancer20.getClass();
        boolean boolean28 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass27);
        enhancer12.setSuperclass((java.lang.Class) wildcardClass27);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass27);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer31.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        enhancer31.setClassLoader(classLoader36);
        enhancer31.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        enhancer40.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader45 = enhancer44.getClassLoader();
        enhancer40.setClassLoader(classLoader45);
        enhancer40.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = enhancer40.getNamingPolicy();
        enhancer31.setNamingPolicy(namingPolicy49);
        enhancer31.setInterceptDuringConstruction(true);
        enhancer31.setSerialVersionUID((java.lang.Long) 100L);
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        enhancer55.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer59 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader60 = enhancer59.getClassLoader();
        enhancer55.setClassLoader(classLoader60);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = enhancer55.getStrategy();
        enhancer55.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer65 = new org.mockito.cglib.proxy.Enhancer();
        enhancer65.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = enhancer65.getStrategy();
        enhancer55.setStrategy(generatorStrategy68);
        enhancer31.setStrategy(generatorStrategy68);
        enhancer0.setStrategy(generatorStrategy68);
        enhancer0.setUseFactory(false);
        org.mockito.cglib.proxy.Enhancer enhancer74 = new org.mockito.cglib.proxy.Enhancer();
        enhancer74.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback77 = null;
        enhancer74.setCallback(callback77);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter79 = null;
        enhancer74.setCallbackFilter(callbackFilter79);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = enhancer74.getStrategy();
        boolean boolean82 = enhancer74.getUseCache();
        org.mockito.cglib.proxy.Callback callback83 = null;
        enhancer74.setCallback(callback83);
        org.mockito.cglib.proxy.Enhancer enhancer85 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader86 = enhancer85.getClassLoader();
        enhancer85.setInterceptDuringConstruction(true);
        boolean boolean89 = enhancer85.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy90 = enhancer85.getStrategy();
        java.lang.Class[] classArray91 = new java.lang.Class[] {};
        enhancer85.setInterfaces(classArray91);
        enhancer74.setInterfaces(classArray91);
        enhancer0.setInterfaces(classArray91);
        enhancer0.setSerialVersionUID((java.lang.Long) 1L);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class97 = enhancer0.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: createClass does not accept callbacks");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(callbackArray6);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(callbackArray18);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(classLoader60);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(classLoader86);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(generatorStrategy90);
        org.junit.Assert.assertNotNull(classArray91);
    }

    @Test
    public void test09860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09860");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer7.setClassLoader(classLoader12);
        enhancer7.setUseCache(false);
        java.lang.ClassLoader classLoader16 = enhancer7.getClassLoader();
        enhancer0.setClassLoader(classLoader16);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        enhancer18.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader22 = enhancer18.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer18.getStrategy();
        enhancer0.setStrategy(generatorStrategy23);
        boolean boolean25 = enhancer0.getAttemptLoad();
        boolean boolean26 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader31 = enhancer30.getClassLoader();
        enhancer30.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader34 = enhancer30.getClassLoader();
        java.lang.Class class35 = null;
        enhancer30.setSuperclass(class35);
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        enhancer37.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader42 = enhancer41.getClassLoader();
        enhancer37.setClassLoader(classLoader42);
        enhancer37.setUseCache(false);
        java.lang.ClassLoader classLoader46 = enhancer37.getClassLoader();
        enhancer30.setClassLoader(classLoader46);
        java.lang.ClassLoader classLoader48 = enhancer30.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader50 = enhancer49.getClassLoader();
        boolean boolean51 = enhancer49.getAttemptLoad();
        enhancer49.setInterceptDuringConstruction(false);
        enhancer49.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = enhancer49.getStrategy();
        enhancer30.setStrategy(generatorStrategy56);
        enhancer30.setInterceptDuringConstruction(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = enhancer30.getNamingPolicy();
        boolean boolean61 = enhancer30.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = enhancer30.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy62);
        enhancer0.setUseCache(true);
        boolean boolean66 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter67 = null;
        enhancer0.setCallbackFilter(callbackFilter67);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = enhancer0.getStrategy();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(generatorStrategy69);
    }

    @Test
    public void test09861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09861");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader9 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter10 = null;
        enhancer0.setCallbackFilter(callbackFilter10);
        enhancer0.setUseFactory(false);
        enhancer0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader16 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = enhancer0.getStrategy();
        boolean boolean18 = enhancer0.getUseCache();
        enhancer0.setUseCache(true);
        enhancer0.setUseFactory(false);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test09862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09862");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer7.setClassLoader(classLoader12);
        enhancer7.setUseCache(false);
        java.lang.ClassLoader classLoader16 = enhancer7.getClassLoader();
        enhancer0.setClassLoader(classLoader16);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        enhancer18.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader22 = enhancer18.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer18.getStrategy();
        enhancer0.setStrategy(generatorStrategy23);
        boolean boolean25 = enhancer0.getAttemptLoad();
        boolean boolean26 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer29.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader33 = enhancer29.getClassLoader();
        java.lang.Class class34 = null;
        enhancer29.setSuperclass(class34);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        enhancer36.setInterceptDuringConstruction(true);
        boolean boolean40 = enhancer36.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = enhancer36.getStrategy();
        enhancer29.setStrategy(generatorStrategy41);
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader44 = enhancer43.getClassLoader();
        enhancer43.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader47 = enhancer43.getClassLoader();
        java.lang.Class class48 = null;
        enhancer43.setSuperclass(class48);
        org.mockito.cglib.proxy.Enhancer enhancer50 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader51 = enhancer50.getClassLoader();
        enhancer50.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer54 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader55 = enhancer54.getClassLoader();
        enhancer50.setClassLoader(classLoader55);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = enhancer50.getStrategy();
        java.lang.Class<?> wildcardClass58 = enhancer50.getClass();
        enhancer43.setSuperclass((java.lang.Class) wildcardClass58);
        enhancer29.setSuperclass((java.lang.Class) wildcardClass58);
        boolean boolean61 = enhancer29.getUseCache();
        boolean boolean62 = enhancer29.getUseCache();
        enhancer29.setUseCache(true);
        org.mockito.cglib.proxy.Callback callback65 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray66 = new org.mockito.cglib.proxy.Callback[] { callback65 };
        enhancer29.setCallbacks(callbackArray66);
        enhancer0.setCallbacks(callbackArray66);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        boolean boolean71 = enhancer0.getAttemptLoad();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(callbackArray66);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test09863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09863");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader3 = enhancer2.getClassLoader();
        enhancer2.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader7 = enhancer6.getClassLoader();
        enhancer2.setClassLoader(classLoader7);
        enhancer2.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer11.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        enhancer11.setClassLoader(classLoader16);
        enhancer11.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = enhancer11.getNamingPolicy();
        enhancer2.setNamingPolicy(namingPolicy20);
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer22.setInterceptDuringConstruction(true);
        boolean boolean26 = namingPolicy20.equals((java.lang.Object) enhancer22);
        enhancer0.setNamingPolicy(namingPolicy20);
        java.lang.ClassLoader classLoader28 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer29.setInterceptDuringConstruction(true);
        boolean boolean33 = enhancer29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = enhancer29.getStrategy();
        boolean boolean36 = generatorStrategy34.equals((java.lang.Object) (short) -1);
        enhancer0.setStrategy(generatorStrategy34);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = enhancer0.getStrategy();
        enhancer0.setUseCache(true);
        enhancer0.setAttemptLoad(true);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader3);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(generatorStrategy38);
    }

    @Test
    public void test09864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09864");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseCache(true);
        boolean boolean4 = enhancer0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        enhancer0.setNamingPolicy(namingPolicy5);
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = enhancer9.getStrategy();
        enhancer0.setStrategy(generatorStrategy13);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        enhancer15.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader19 = enhancer15.getClassLoader();
        java.lang.Class class20 = null;
        enhancer15.setSuperclass(class20);
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer22.setInterceptDuringConstruction(true);
        boolean boolean26 = enhancer22.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = enhancer22.getStrategy();
        enhancer15.setStrategy(generatorStrategy27);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = enhancer15.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        enhancer30.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback33 = null;
        enhancer30.setCallback(callback33);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter35 = null;
        enhancer30.setCallbackFilter(callbackFilter35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = enhancer30.getStrategy();
        java.lang.Class class38 = null;
        enhancer30.setSuperclass(class38);
        java.lang.ClassLoader classLoader40 = enhancer30.getClassLoader();
        boolean boolean41 = generatorStrategy29.equals((java.lang.Object) classLoader40);
        enhancer0.setStrategy(generatorStrategy29);
        java.lang.Class<?> wildcardClass43 = generatorStrategy29.getClass();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test09865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09865");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = enhancer0.getStrategy();
        enhancer0.setInterceptDuringConstruction(true);
        enhancer0.setAttemptLoad(false);
        enhancer0.setSerialVersionUID((java.lang.Long) 1L);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Callback callback16 = null;
        enhancer0.setCallback(callback16);
        boolean boolean18 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader20 = enhancer19.getClassLoader();
        enhancer19.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader23 = enhancer19.getClassLoader();
        org.mockito.cglib.proxy.Callback callback24 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray25 = new org.mockito.cglib.proxy.Callback[] { callback24 };
        enhancer19.setCallbacks(callbackArray25);
        enhancer19.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = enhancer19.getStrategy();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter30 = null;
        enhancer19.setCallbackFilter(callbackFilter30);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = enhancer19.getStrategy();
        boolean boolean33 = enhancer19.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = enhancer19.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy34);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        enhancer37.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback40 = null;
        enhancer37.setCallback(callback40);
        enhancer37.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = enhancer37.getNamingPolicy();
        org.mockito.cglib.proxy.Callback callback45 = null;
        enhancer37.setCallback(callback45);
        boolean boolean47 = enhancer37.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        enhancer37.setClassLoader(classLoader49);
        enhancer37.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader53 = enhancer37.getClassLoader();
        java.lang.ClassLoader classLoader54 = enhancer37.getClassLoader();
        boolean boolean55 = namingPolicy36.equals((java.lang.Object) enhancer37);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(callbackArray25);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(generatorStrategy32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test09866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09866");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader9 = enhancer0.getClassLoader();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Callback callback12 = null;
        enhancer0.setCallback(callback12);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter14 = null;
        enhancer0.setCallbackFilter(callbackFilter14);
        enhancer0.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader20 = enhancer19.getClassLoader();
        enhancer19.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader23 = enhancer19.getClassLoader();
        java.lang.Class class24 = null;
        enhancer19.setSuperclass(class24);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        enhancer26.setInterceptDuringConstruction(true);
        boolean boolean30 = enhancer26.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = enhancer26.getStrategy();
        enhancer19.setStrategy(generatorStrategy31);
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader34 = enhancer33.getClassLoader();
        enhancer33.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader37 = enhancer33.getClassLoader();
        java.lang.Class class38 = null;
        enhancer33.setSuperclass(class38);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        enhancer40.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader45 = enhancer44.getClassLoader();
        enhancer40.setClassLoader(classLoader45);
        enhancer40.setUseCache(false);
        java.lang.ClassLoader classLoader49 = enhancer40.getClassLoader();
        enhancer33.setClassLoader(classLoader49);
        boolean boolean51 = generatorStrategy31.equals((java.lang.Object) enhancer33);
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = enhancer33.getNamingPolicy();
        boolean boolean53 = enhancer33.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = enhancer33.getStrategy();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter55 = null;
        enhancer33.setCallbackFilter(callbackFilter55);
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader58 = enhancer57.getClassLoader();
        enhancer57.setUseCache(true);
        boolean boolean61 = enhancer57.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = null;
        enhancer57.setNamingPolicy(namingPolicy62);
        java.lang.ClassLoader classLoader64 = enhancer57.getClassLoader();
        boolean boolean65 = enhancer57.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer66 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader67 = enhancer66.getClassLoader();
        enhancer66.setInterceptDuringConstruction(true);
        boolean boolean70 = enhancer66.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = enhancer66.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer72 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader73 = enhancer72.getClassLoader();
        enhancer72.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader76 = enhancer72.getClassLoader();
        org.mockito.cglib.proxy.Callback callback77 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray78 = new org.mockito.cglib.proxy.Callback[] { callback77 };
        enhancer72.setCallbacks(callbackArray78);
        enhancer66.setCallbacks(callbackArray78);
        org.mockito.cglib.proxy.Callback callback81 = null;
        enhancer66.setCallback(callback81);
        java.lang.Class<?> wildcardClass83 = enhancer66.getClass();
        enhancer57.setSuperclass((java.lang.Class) wildcardClass83);
        enhancer33.setSuperclass((java.lang.Class) wildcardClass83);
        boolean boolean86 = enhancer33.getUseCache();
        boolean boolean87 = generatorStrategy18.equals((java.lang.Object) enhancer33);
        java.lang.ClassLoader classLoader88 = enhancer33.getClassLoader();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(classLoader67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(generatorStrategy71);
        org.junit.Assert.assertNotNull(classLoader73);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertNotNull(callbackArray78);
        org.junit.Assert.assertNotNull(wildcardClass83);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(classLoader88);
    }

    @Test
    public void test09867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09867");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter7 = null;
        enhancer0.setCallbackFilter(callbackFilter7);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer11.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        enhancer11.setClassLoader(classLoader16);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter18 = null;
        enhancer11.setCallbackFilter(callbackFilter18);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer20.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        enhancer20.setClassLoader(classLoader25);
        enhancer20.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer29.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader34 = enhancer33.getClassLoader();
        enhancer29.setClassLoader(classLoader34);
        enhancer29.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = enhancer29.getNamingPolicy();
        enhancer20.setNamingPolicy(namingPolicy38);
        enhancer11.setNamingPolicy(namingPolicy38);
        enhancer0.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.proxy.Callback callback42 = null;
        enhancer0.setCallback(callback42);
        enhancer0.setAttemptLoad(false);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter46 = null;
        enhancer0.setCallbackFilter(callbackFilter46);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = enhancer0.getNamingPolicy();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter52 = null;
        enhancer0.setCallbackFilter(callbackFilter52);
        boolean boolean54 = enhancer0.getAttemptLoad();
        boolean boolean55 = enhancer0.getUseCache();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test09868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09868");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Callback callback5 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray6 = new org.mockito.cglib.proxy.Callback[] { callback5 };
        enhancer0.setCallbacks(callbackArray6);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        enhancer8.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader12 = enhancer8.getClassLoader();
        java.lang.Class class13 = null;
        enhancer8.setSuperclass(class13);
        java.lang.Class<?> wildcardClass15 = enhancer8.getClass();
        boolean boolean16 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass15);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass15);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        enhancer18.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer18.setClassLoader(classLoader23);
        enhancer18.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader28 = enhancer27.getClassLoader();
        enhancer27.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer27.setClassLoader(classLoader32);
        enhancer27.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = enhancer27.getNamingPolicy();
        enhancer18.setNamingPolicy(namingPolicy36);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader39 = enhancer38.getClassLoader();
        enhancer38.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader42 = enhancer38.getClassLoader();
        java.lang.Class class43 = null;
        enhancer38.setSuperclass(class43);
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader46 = enhancer45.getClassLoader();
        enhancer45.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader50 = enhancer49.getClassLoader();
        enhancer45.setClassLoader(classLoader50);
        enhancer45.setUseCache(false);
        java.lang.ClassLoader classLoader54 = enhancer45.getClassLoader();
        enhancer38.setClassLoader(classLoader54);
        boolean boolean56 = namingPolicy36.equals((java.lang.Object) enhancer38);
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader58 = enhancer57.getClassLoader();
        enhancer57.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer61 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader62 = enhancer61.getClassLoader();
        enhancer57.setClassLoader(classLoader62);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = enhancer57.getStrategy();
        enhancer57.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer67 = new org.mockito.cglib.proxy.Enhancer();
        enhancer67.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = enhancer67.getStrategy();
        enhancer57.setStrategy(generatorStrategy70);
        enhancer38.setStrategy(generatorStrategy70);
        enhancer0.setStrategy(generatorStrategy70);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter74 = null;
        enhancer0.setCallbackFilter(callbackFilter74);
        enhancer0.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.asm.ClassVisitor classVisitor78 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(callbackArray6);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertNotNull(generatorStrategy70);
    }

    @Test
    public void test09869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09869");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader9 = enhancer0.getClassLoader();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Callback[] callbackArray12 = null;
        enhancer0.setCallbacks(callbackArray12);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader18 = enhancer14.getClassLoader();
        java.lang.Class class19 = null;
        enhancer14.setSuperclass(class19);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer21.setInterceptDuringConstruction(true);
        boolean boolean25 = enhancer21.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = enhancer21.getStrategy();
        enhancer14.setStrategy(generatorStrategy26);
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader29 = enhancer28.getClassLoader();
        enhancer28.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader32 = enhancer28.getClassLoader();
        java.lang.Class class33 = null;
        enhancer28.setSuperclass(class33);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        enhancer35.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader40 = enhancer39.getClassLoader();
        enhancer35.setClassLoader(classLoader40);
        enhancer35.setUseCache(false);
        java.lang.ClassLoader classLoader44 = enhancer35.getClassLoader();
        enhancer28.setClassLoader(classLoader44);
        boolean boolean46 = generatorStrategy26.equals((java.lang.Object) enhancer28);
        org.mockito.cglib.proxy.Enhancer enhancer47 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader48 = enhancer47.getClassLoader();
        enhancer47.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader51 = enhancer47.getClassLoader();
        java.lang.Class<?> wildcardClass52 = classLoader51.getClass();
        enhancer28.setSuperclass((java.lang.Class) wildcardClass52);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass52);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = enhancer0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor56 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(namingPolicy55);
    }

    @Test
    public void test09870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09870");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer9.setClassLoader(classLoader14);
        enhancer9.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer9.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy18);
        enhancer0.setInterceptDuringConstruction(true);
        enhancer0.setUseCache(false);
        enhancer0.setUseCache(false);
        boolean boolean26 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Callback callback27 = null;
        enhancer0.setCallback(callback27);
        org.mockito.cglib.proxy.Callback callback29 = null;
        enhancer0.setCallback(callback29);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter31 = null;
        enhancer0.setCallbackFilter(callbackFilter31);
        org.mockito.cglib.proxy.Callback callback33 = null;
        enhancer0.setCallback(callback33);
        boolean boolean35 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter36 = null;
        enhancer0.setCallbackFilter(callbackFilter36);
        org.mockito.asm.ClassVisitor classVisitor38 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test09871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09871");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        boolean boolean11 = enhancer7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer7.getStrategy();
        enhancer0.setStrategy(generatorStrategy12);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        enhancer0.setStrategy(generatorStrategy14);
        org.mockito.cglib.proxy.Callback callback16 = null;
        enhancer0.setCallback(callback16);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        enhancer18.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader22 = enhancer18.getClassLoader();
        org.mockito.cglib.proxy.Callback callback23 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray24 = new org.mockito.cglib.proxy.Callback[] { callback23 };
        enhancer18.setCallbacks(callbackArray24);
        enhancer18.setSerialVersionUID((java.lang.Long) 0L);
        boolean boolean28 = enhancer18.getUseCache();
        enhancer18.setSerialVersionUID((java.lang.Long) (-1L));
        enhancer18.setAttemptLoad(true);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter33 = null;
        enhancer18.setCallbackFilter(callbackFilter33);
        java.lang.ClassLoader classLoader35 = enhancer18.getClassLoader();
        enhancer0.setClassLoader(classLoader35);
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        enhancer37.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader41 = enhancer37.getClassLoader();
        java.lang.Class class42 = null;
        enhancer37.setSuperclass(class42);
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader45 = enhancer44.getClassLoader();
        enhancer44.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader48 = enhancer44.getClassLoader();
        java.lang.Class class49 = null;
        enhancer44.setSuperclass(class49);
        org.mockito.cglib.proxy.Enhancer enhancer51 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader52 = enhancer51.getClassLoader();
        enhancer51.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        enhancer51.setClassLoader(classLoader56);
        enhancer51.setUseCache(false);
        java.lang.ClassLoader classLoader60 = enhancer51.getClassLoader();
        enhancer44.setClassLoader(classLoader60);
        enhancer37.setClassLoader(classLoader60);
        enhancer37.setUseFactory(true);
        java.lang.ClassLoader classLoader65 = enhancer37.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer66 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader67 = enhancer66.getClassLoader();
        enhancer66.setInterceptDuringConstruction(true);
        boolean boolean70 = enhancer66.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = enhancer66.getStrategy();
        java.lang.Class[] classArray72 = new java.lang.Class[] {};
        enhancer66.setInterfaces(classArray72);
        enhancer37.setInterfaces(classArray72);
        java.lang.Class<?> wildcardClass75 = classArray72.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass75);
        org.mockito.cglib.proxy.Callback callback77 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj78 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass75, callback77);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(callbackArray24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(classLoader60);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(classLoader67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(generatorStrategy71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test09872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09872");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader2 = enhancer1.getClassLoader();
        enhancer1.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        enhancer1.setClassLoader(classLoader6);
        enhancer0.setClassLoader(classLoader6);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader13 = enhancer9.getClassLoader();
        enhancer0.setClassLoader(classLoader13);
        boolean boolean15 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        enhancer16.setInterceptDuringConstruction(true);
        boolean boolean20 = enhancer16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = enhancer16.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer22.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader26 = enhancer22.getClassLoader();
        org.mockito.cglib.proxy.Callback callback27 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray28 = new org.mockito.cglib.proxy.Callback[] { callback27 };
        enhancer22.setCallbacks(callbackArray28);
        enhancer16.setCallbacks(callbackArray28);
        enhancer0.setCallbacks(callbackArray28);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        enhancer32.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        enhancer32.setClassLoader(classLoader37);
        enhancer32.setUseCache(false);
        java.lang.ClassLoader classLoader41 = enhancer32.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = enhancer32.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy42);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        enhancer0.setAttemptLoad(false);
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(callbackArray28);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(namingPolicy42);
    }

    @Test
    public void test09873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09873");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter2 = null;
        enhancer0.setCallbackFilter(callbackFilter2);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer4.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        enhancer4.setClassLoader(classLoader9);
        enhancer4.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer4.getNamingPolicy();
        boolean boolean14 = enhancer4.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        enhancer15.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader19 = enhancer15.getClassLoader();
        java.lang.Class class20 = null;
        enhancer15.setSuperclass(class20);
        java.lang.ClassLoader classLoader22 = enhancer15.getClassLoader();
        enhancer4.setClassLoader(classLoader22);
        enhancer0.setClassLoader(classLoader22);
        java.lang.ClassLoader classLoader25 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Callback callback26 = null;
        enhancer0.setCallback(callback26);
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader29 = enhancer28.getClassLoader();
        enhancer28.setUseCache(true);
        boolean boolean32 = enhancer28.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader34 = enhancer33.getClassLoader();
        enhancer33.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader37 = enhancer33.getClassLoader();
        java.lang.Class class38 = null;
        enhancer33.setSuperclass(class38);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        enhancer40.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader45 = enhancer44.getClassLoader();
        enhancer40.setClassLoader(classLoader45);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = enhancer40.getStrategy();
        java.lang.Class<?> wildcardClass48 = enhancer40.getClass();
        enhancer33.setSuperclass((java.lang.Class) wildcardClass48);
        enhancer28.setSuperclass((java.lang.Class) wildcardClass48);
        enhancer28.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer53 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader54 = enhancer53.getClassLoader();
        enhancer53.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader58 = enhancer57.getClassLoader();
        enhancer53.setClassLoader(classLoader58);
        enhancer53.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = enhancer53.getNamingPolicy();
        boolean boolean63 = enhancer53.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer64 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader65 = enhancer64.getClassLoader();
        enhancer64.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader68 = enhancer64.getClassLoader();
        java.lang.Class class69 = null;
        enhancer64.setSuperclass(class69);
        java.lang.ClassLoader classLoader71 = enhancer64.getClassLoader();
        enhancer53.setClassLoader(classLoader71);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = enhancer53.getStrategy();
        enhancer28.setStrategy(generatorStrategy73);
        org.mockito.cglib.proxy.Enhancer enhancer75 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader76 = enhancer75.getClassLoader();
        enhancer75.setInterceptDuringConstruction(true);
        boolean boolean79 = enhancer75.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = enhancer75.getStrategy();
        java.lang.Class[] classArray81 = new java.lang.Class[] {};
        enhancer75.setInterfaces(classArray81);
        enhancer28.setInterfaces(classArray81);
        enhancer0.setInterfaces(classArray81);
        enhancer0.setInterceptDuringConstruction(true);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(classLoader68);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertNotNull(generatorStrategy73);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(generatorStrategy80);
        org.junit.Assert.assertNotNull(classArray81);
    }

    @Test
    public void test09874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09874");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = enhancer0.getNamingPolicy();
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter10 = null;
        enhancer0.setCallbackFilter(callbackFilter10);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = enhancer0.getNamingPolicy();
        boolean boolean13 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Callback callback14 = null;
        enhancer0.setCallback(callback14);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test09875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09875");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseCache(true);
        boolean boolean4 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Callback callback5 = null;
        enhancer0.setCallback(callback5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setUseCache(true);
        boolean boolean11 = enhancer7.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        enhancer12.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader16 = enhancer12.getClassLoader();
        java.lang.Class class17 = null;
        enhancer12.setSuperclass(class17);
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader20 = enhancer19.getClassLoader();
        enhancer19.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader24 = enhancer23.getClassLoader();
        enhancer19.setClassLoader(classLoader24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = enhancer19.getStrategy();
        java.lang.Class<?> wildcardClass27 = enhancer19.getClass();
        enhancer12.setSuperclass((java.lang.Class) wildcardClass27);
        enhancer7.setSuperclass((java.lang.Class) wildcardClass27);
        org.mockito.cglib.proxy.Callback callback30 = null;
        enhancer7.setCallback(callback30);
        org.mockito.cglib.proxy.Callback callback32 = null;
        enhancer7.setCallback(callback32);
        java.lang.Class<?> wildcardClass34 = enhancer7.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass34);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        enhancer36.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        enhancer36.setClassLoader(classLoader41);
        enhancer36.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader46 = enhancer45.getClassLoader();
        enhancer45.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader50 = enhancer49.getClassLoader();
        enhancer45.setClassLoader(classLoader50);
        enhancer45.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = enhancer45.getNamingPolicy();
        enhancer36.setNamingPolicy(namingPolicy54);
        enhancer36.setInterceptDuringConstruction(true);
        enhancer36.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = enhancer36.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer61 = new org.mockito.cglib.proxy.Enhancer();
        enhancer61.setUseFactory(false);
        org.mockito.cglib.proxy.Callback callback64 = null;
        enhancer61.setCallback(callback64);
        org.mockito.cglib.proxy.Enhancer enhancer66 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader67 = enhancer66.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer68 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer69 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader70 = enhancer69.getClassLoader();
        enhancer69.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer73 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader74 = enhancer73.getClassLoader();
        enhancer69.setClassLoader(classLoader74);
        enhancer68.setClassLoader(classLoader74);
        enhancer66.setClassLoader(classLoader74);
        enhancer61.setClassLoader(classLoader74);
        org.mockito.cglib.core.NamingPolicy namingPolicy79 = enhancer61.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = enhancer61.getNamingPolicy();
        boolean boolean81 = generatorStrategy60.equals((java.lang.Object) namingPolicy80);
        enhancer0.setNamingPolicy(namingPolicy80);
        enhancer0.setAttemptLoad(false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj85 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertNotNull(classLoader67);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(namingPolicy79);
        org.junit.Assert.assertNotNull(namingPolicy80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test09876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09876");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        boolean boolean4 = enhancer0.getUseCache();
        boolean boolean5 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        enhancer8.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader12 = enhancer8.getClassLoader();
        java.lang.Class class13 = null;
        enhancer8.setSuperclass(class13);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = enhancer15.getStrategy();
        enhancer8.setStrategy(generatorStrategy17);
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader20 = enhancer19.getClassLoader();
        enhancer19.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader24 = enhancer23.getClassLoader();
        enhancer19.setClassLoader(classLoader24);
        enhancer19.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader29 = enhancer28.getClassLoader();
        enhancer28.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        enhancer28.setClassLoader(classLoader33);
        enhancer28.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = enhancer28.getNamingPolicy();
        enhancer19.setNamingPolicy(namingPolicy37);
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader40 = enhancer39.getClassLoader();
        enhancer39.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader43 = enhancer39.getClassLoader();
        java.lang.Class class44 = null;
        enhancer39.setSuperclass(class44);
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader47 = enhancer46.getClassLoader();
        enhancer46.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer50 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader51 = enhancer50.getClassLoader();
        enhancer46.setClassLoader(classLoader51);
        enhancer46.setUseCache(false);
        java.lang.ClassLoader classLoader55 = enhancer46.getClassLoader();
        enhancer39.setClassLoader(classLoader55);
        boolean boolean57 = namingPolicy37.equals((java.lang.Object) enhancer39);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = enhancer39.getStrategy();
        enhancer8.setStrategy(generatorStrategy58);
        org.mockito.cglib.proxy.Enhancer enhancer60 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader61 = enhancer60.getClassLoader();
        enhancer60.setInterceptDuringConstruction(true);
        boolean boolean64 = enhancer60.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = enhancer60.getStrategy();
        java.lang.Class[] classArray66 = new java.lang.Class[] {};
        enhancer60.setInterfaces(classArray66);
        enhancer8.setInterfaces(classArray66);
        enhancer0.setInterfaces(classArray66);
        enhancer0.setInterceptDuringConstruction(true);
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = enhancer0.getNamingPolicy();
        boolean boolean75 = enhancer0.getUseCache();
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.asm.ClassVisitor classVisitor78 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor78);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
    }

    @Test
    public void test09877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09877");
        java.lang.Class class0 = null;
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        enhancer1.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback4 = null;
        enhancer1.setCallback(callback4);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter6 = null;
        enhancer1.setCallbackFilter(callbackFilter6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = enhancer1.getStrategy();
        boolean boolean9 = enhancer1.getUseCache();
        org.mockito.cglib.proxy.Callback callback10 = null;
        enhancer1.setCallback(callback10);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        boolean boolean14 = enhancer12.getAttemptLoad();
        java.lang.ClassLoader classLoader15 = enhancer12.getClassLoader();
        enhancer1.setClassLoader(classLoader15);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        enhancer17.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer17.setClassLoader(classLoader22);
        enhancer17.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = enhancer17.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = enhancer1.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = enhancer1.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        enhancer30.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback33 = null;
        enhancer30.setCallback(callback33);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter35 = null;
        enhancer30.setCallbackFilter(callbackFilter35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = enhancer30.getStrategy();
        boolean boolean38 = enhancer30.getUseCache();
        org.mockito.cglib.proxy.Callback callback39 = null;
        enhancer30.setCallback(callback39);
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader42 = enhancer41.getClassLoader();
        boolean boolean43 = enhancer41.getAttemptLoad();
        java.lang.ClassLoader classLoader44 = enhancer41.getClassLoader();
        enhancer30.setClassLoader(classLoader44);
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader47 = enhancer46.getClassLoader();
        enhancer46.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer50 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader51 = enhancer50.getClassLoader();
        enhancer46.setClassLoader(classLoader51);
        enhancer46.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = enhancer46.getNamingPolicy();
        enhancer30.setNamingPolicy(namingPolicy55);
        enhancer1.setNamingPolicy(namingPolicy55);
        org.mockito.cglib.proxy.Enhancer enhancer58 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader59 = enhancer58.getClassLoader();
        enhancer58.setInterceptDuringConstruction(true);
        boolean boolean62 = enhancer58.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = enhancer58.getStrategy();
        java.lang.Class[] classArray64 = new java.lang.Class[] {};
        enhancer58.setInterfaces(classArray64);
        enhancer1.setInterfaces(classArray64);
        org.mockito.cglib.proxy.Callback callback67 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj68 = org.mockito.cglib.proxy.Enhancer.create(class0, classArray64, callback67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertNotNull(classArray64);
    }

    @Test
    public void test09878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09878");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseCache(true);
        boolean boolean4 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        enhancer5.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader9 = enhancer5.getClassLoader();
        java.lang.Class class10 = null;
        enhancer5.setSuperclass(class10);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        enhancer12.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        enhancer12.setClassLoader(classLoader17);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = enhancer12.getStrategy();
        java.lang.Class<?> wildcardClass20 = enhancer12.getClass();
        enhancer5.setSuperclass((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        enhancer0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = enhancer0.getNamingPolicy();
        enhancer0.setSerialVersionUID((java.lang.Long) 1L);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(namingPolicy25);
    }

    @Test
    public void test09879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09879");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer9.setClassLoader(classLoader14);
        enhancer9.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer9.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy18);
        enhancer0.setInterceptDuringConstruction(true);
        boolean boolean22 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader24 = enhancer23.getClassLoader();
        enhancer23.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader27 = enhancer23.getClassLoader();
        java.lang.Class class28 = null;
        enhancer23.setSuperclass(class28);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader31 = enhancer30.getClassLoader();
        enhancer30.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        enhancer30.setClassLoader(classLoader35);
        enhancer30.setUseCache(false);
        java.lang.ClassLoader classLoader39 = enhancer30.getClassLoader();
        enhancer23.setClassLoader(classLoader39);
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader42 = enhancer41.getClassLoader();
        enhancer41.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader45 = enhancer41.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = enhancer41.getStrategy();
        enhancer23.setStrategy(generatorStrategy46);
        boolean boolean48 = enhancer23.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader50 = enhancer49.getClassLoader();
        enhancer49.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer53 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader54 = enhancer53.getClassLoader();
        enhancer49.setClassLoader(classLoader54);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = enhancer49.getStrategy();
        java.lang.Class<?> wildcardClass57 = enhancer49.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer58 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader59 = enhancer58.getClassLoader();
        enhancer58.setUseCache(true);
        boolean boolean62 = enhancer58.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer63 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader64 = enhancer63.getClassLoader();
        enhancer63.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader67 = enhancer63.getClassLoader();
        java.lang.Class class68 = null;
        enhancer63.setSuperclass(class68);
        org.mockito.cglib.proxy.Enhancer enhancer70 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader71 = enhancer70.getClassLoader();
        enhancer70.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer74 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader75 = enhancer74.getClassLoader();
        enhancer70.setClassLoader(classLoader75);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = enhancer70.getStrategy();
        java.lang.Class<?> wildcardClass78 = enhancer70.getClass();
        enhancer63.setSuperclass((java.lang.Class) wildcardClass78);
        enhancer58.setSuperclass((java.lang.Class) wildcardClass78);
        java.lang.Class[] classArray81 = new java.lang.Class[] { wildcardClass57, wildcardClass78 };
        enhancer23.setInterfaces(classArray81);
        enhancer0.setInterfaces(classArray81);
        org.mockito.cglib.proxy.Callback callback84 = null;
        enhancer0.setCallback(callback84);
        enhancer0.setUseFactory(false);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertNotNull(classLoader67);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertNotNull(classLoader75);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertNotNull(classArray81);
    }

    @Test
    public void test09880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09880");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback3 = null;
        enhancer0.setCallback(callback3);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Callback callback8 = null;
        enhancer0.setCallback(callback8);
        boolean boolean10 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer0.setClassLoader(classLoader12);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(classLoader12);
    }

    @Test
    public void test09881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09881");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = enhancer0.getNamingPolicy();
        boolean boolean10 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer11.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader15 = enhancer11.getClassLoader();
        java.lang.Class class16 = null;
        enhancer11.setSuperclass(class16);
        java.lang.ClassLoader classLoader18 = enhancer11.getClassLoader();
        enhancer0.setClassLoader(classLoader18);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = enhancer0.getStrategy();
        boolean boolean21 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer22.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader26 = enhancer22.getClassLoader();
        java.lang.Class class27 = null;
        enhancer22.setSuperclass(class27);
        enhancer22.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer31.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        enhancer31.setClassLoader(classLoader36);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = enhancer31.getStrategy();
        enhancer22.setStrategy(generatorStrategy38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = enhancer22.getStrategy();
        enhancer0.setStrategy(generatorStrategy40);
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        enhancer44.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback47 = null;
        enhancer44.setCallback(callback47);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter49 = null;
        enhancer44.setCallbackFilter(callbackFilter49);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = enhancer44.getStrategy();
        boolean boolean52 = enhancer44.getUseCache();
        org.mockito.cglib.proxy.Callback callback53 = null;
        enhancer44.setCallback(callback53);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = enhancer44.getNamingPolicy();
        java.lang.Object obj56 = null;
        boolean boolean57 = namingPolicy55.equals(obj56);
        enhancer0.setNamingPolicy(namingPolicy55);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj59 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test09882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09882");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader9 = enhancer0.getClassLoader();
        enhancer0.setAttemptLoad(true);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader18 = enhancer14.getClassLoader();
        java.lang.Class class19 = null;
        enhancer14.setSuperclass(class19);
        enhancer14.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader24 = enhancer23.getClassLoader();
        enhancer23.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader28 = enhancer27.getClassLoader();
        enhancer23.setClassLoader(classLoader28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = enhancer23.getStrategy();
        enhancer14.setStrategy(generatorStrategy30);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        enhancer32.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        enhancer32.setClassLoader(classLoader37);
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader40 = enhancer39.getClassLoader();
        enhancer39.setInterceptDuringConstruction(true);
        boolean boolean43 = enhancer39.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = enhancer39.getStrategy();
        java.lang.Class[] classArray45 = new java.lang.Class[] {};
        enhancer39.setInterfaces(classArray45);
        enhancer32.setInterfaces(classArray45);
        enhancer14.setInterfaces(classArray45);
        enhancer0.setInterfaces(classArray45);
        enhancer0.setUseFactory(true);
        enhancer0.setUseFactory(true);
        org.mockito.asm.ClassVisitor classVisitor54 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(classArray45);
    }

    @Test
    public void test09883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09883");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer13.setUseCache(true);
        boolean boolean17 = enhancer13.getAttemptLoad();
        org.mockito.cglib.proxy.Callback callback18 = null;
        enhancer13.setCallback(callback18);
        java.lang.ClassLoader classLoader20 = enhancer13.getClassLoader();
        enhancer0.setClassLoader(classLoader20);
        boolean boolean22 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader24 = enhancer23.getClassLoader();
        enhancer23.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader28 = enhancer27.getClassLoader();
        enhancer23.setClassLoader(classLoader28);
        enhancer23.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        enhancer32.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        enhancer32.setClassLoader(classLoader37);
        enhancer32.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = enhancer32.getNamingPolicy();
        enhancer23.setNamingPolicy(namingPolicy41);
        enhancer23.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = enhancer23.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy45);
        enhancer0.setUseFactory(false);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(namingPolicy45);
    }

    @Test
    public void test09884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09884");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = enhancer0.getNamingPolicy();
        boolean boolean10 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer11.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader15 = enhancer11.getClassLoader();
        java.lang.Class class16 = null;
        enhancer11.setSuperclass(class16);
        java.lang.ClassLoader classLoader18 = enhancer11.getClassLoader();
        enhancer0.setClassLoader(classLoader18);
        enhancer0.setSerialVersionUID((java.lang.Long) (-1L));
        enhancer0.setSerialVersionUID((java.lang.Long) 1L);
        boolean boolean24 = enhancer0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = enhancer0.getStrategy();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader29 = enhancer28.getClassLoader();
        boolean boolean30 = enhancer28.getAttemptLoad();
        enhancer28.setSerialVersionUID((java.lang.Long) 10L);
        enhancer28.setUseFactory(true);
        enhancer28.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader37 = enhancer28.getClassLoader();
        enhancer0.setClassLoader(classLoader37);
        boolean boolean39 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        enhancer40.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = enhancer40.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader46 = enhancer45.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = enhancer45.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        enhancer48.setUseCache(true);
        boolean boolean52 = enhancer48.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer53 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader54 = enhancer53.getClassLoader();
        enhancer53.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader57 = enhancer53.getClassLoader();
        java.lang.Class class58 = null;
        enhancer53.setSuperclass(class58);
        org.mockito.cglib.proxy.Enhancer enhancer60 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader61 = enhancer60.getClassLoader();
        enhancer60.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer64 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader65 = enhancer64.getClassLoader();
        enhancer60.setClassLoader(classLoader65);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = enhancer60.getStrategy();
        java.lang.Class<?> wildcardClass68 = enhancer60.getClass();
        enhancer53.setSuperclass((java.lang.Class) wildcardClass68);
        enhancer48.setSuperclass((java.lang.Class) wildcardClass68);
        enhancer45.setSuperclass((java.lang.Class) wildcardClass68);
        org.mockito.cglib.proxy.Callback callback72 = null;
        enhancer45.setCallback(callback72);
        boolean boolean74 = generatorStrategy44.equals((java.lang.Object) enhancer45);
        enhancer0.setStrategy(generatorStrategy44);
        java.lang.ClassLoader classLoader76 = enhancer0.getClassLoader();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(classLoader76);
    }

    @Test
    public void test09885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09885");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer9.setClassLoader(classLoader14);
        enhancer9.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer9.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer20.setUseCache(true);
        boolean boolean24 = enhancer20.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer25.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader29 = enhancer25.getClassLoader();
        java.lang.Class class30 = null;
        enhancer25.setSuperclass(class30);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        enhancer32.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        enhancer32.setClassLoader(classLoader37);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = enhancer32.getStrategy();
        java.lang.Class<?> wildcardClass40 = enhancer32.getClass();
        enhancer25.setSuperclass((java.lang.Class) wildcardClass40);
        enhancer20.setSuperclass((java.lang.Class) wildcardClass40);
        boolean boolean43 = namingPolicy18.equals((java.lang.Object) enhancer20);
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader46 = enhancer45.getClassLoader();
        enhancer45.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader50 = enhancer49.getClassLoader();
        enhancer45.setClassLoader(classLoader50);
        enhancer44.setClassLoader(classLoader50);
        java.lang.ClassLoader classLoader53 = enhancer44.getClassLoader();
        enhancer20.setClassLoader(classLoader53);
        org.mockito.asm.ClassVisitor classVisitor55 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer20.generateClass(classVisitor55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(classLoader53);
    }

    @Test
    public void test09886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09886");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer7.setClassLoader(classLoader12);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = enhancer7.getStrategy();
        java.lang.Class<?> wildcardClass15 = enhancer7.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass15);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        enhancer18.setInterceptDuringConstruction(true);
        boolean boolean22 = enhancer18.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer18.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        enhancer24.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader28 = enhancer24.getClassLoader();
        org.mockito.cglib.proxy.Callback callback29 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray30 = new org.mockito.cglib.proxy.Callback[] { callback29 };
        enhancer24.setCallbacks(callbackArray30);
        enhancer18.setCallbacks(callbackArray30);
        java.lang.ClassLoader classLoader33 = enhancer18.getClassLoader();
        org.mockito.cglib.proxy.Callback callback34 = null;
        enhancer18.setCallback(callback34);
        boolean boolean36 = generatorStrategy17.equals((java.lang.Object) enhancer18);
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        enhancer37.setUseCache(true);
        boolean boolean41 = enhancer37.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader43 = enhancer42.getClassLoader();
        enhancer42.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader46 = enhancer42.getClassLoader();
        java.lang.Class class47 = null;
        enhancer42.setSuperclass(class47);
        java.lang.Class<?> wildcardClass49 = enhancer42.getClass();
        enhancer37.setSuperclass((java.lang.Class) wildcardClass49);
        java.lang.Class<?> wildcardClass51 = enhancer37.getClass();
        boolean boolean52 = generatorStrategy17.equals((java.lang.Object) enhancer37);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(callbackArray30);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test09887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09887");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        enhancer0.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback6 = null;
        enhancer0.setCallback(callback6);
        enhancer0.setUseCache(true);
        java.lang.ClassLoader classLoader10 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter11 = null;
        enhancer0.setCallbackFilter(callbackFilter11);
        enhancer0.setUseFactory(true);
        boolean boolean15 = enhancer0.getUseCache();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test09888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09888");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter2 = null;
        enhancer0.setCallbackFilter(callbackFilter2);
        boolean boolean4 = enhancer0.getAttemptLoad();
        enhancer0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader7 = enhancer0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter9 = null;
        enhancer0.setCallbackFilter(callbackFilter9);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertNotNull(namingPolicy8);
    }

    @Test
    public void test09889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09889");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader9 = enhancer0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = enhancer0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = enhancer0.getNamingPolicy();
        boolean boolean13 = enhancer0.getUseCache();
        enhancer0.setAttemptLoad(true);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Callback callback18 = null;
        enhancer0.setCallback(callback18);
        boolean boolean20 = enhancer0.getUseCache();
        boolean boolean21 = enhancer0.getAttemptLoad();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test09890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09890");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        boolean boolean4 = enhancer0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader7 = enhancer6.getClassLoader();
        enhancer6.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader10 = enhancer6.getClassLoader();
        org.mockito.cglib.proxy.Callback callback11 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray12 = new org.mockito.cglib.proxy.Callback[] { callback11 };
        enhancer6.setCallbacks(callbackArray12);
        enhancer0.setCallbacks(callbackArray12);
        org.mockito.cglib.proxy.Callback callback15 = null;
        enhancer0.setCallback(callback15);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        enhancer17.setUseCache(true);
        boolean boolean21 = enhancer17.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer22.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader26 = enhancer22.getClassLoader();
        java.lang.Class class27 = null;
        enhancer22.setSuperclass(class27);
        java.lang.Class<?> wildcardClass29 = enhancer22.getClass();
        enhancer17.setSuperclass((java.lang.Class) wildcardClass29);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass29);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(callbackArray12);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test09891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09891");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        enhancer0.setInterceptDuringConstruction(true);
        enhancer0.setAttemptLoad(true);
        enhancer0.setUseFactory(true);
        boolean boolean13 = enhancer0.getUseCache();
        boolean boolean14 = enhancer0.getAttemptLoad();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test09892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09892");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = enhancer0.getNamingPolicy();
        boolean boolean10 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer11.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader15 = enhancer11.getClassLoader();
        java.lang.Class class16 = null;
        enhancer11.setSuperclass(class16);
        java.lang.ClassLoader classLoader18 = enhancer11.getClassLoader();
        enhancer0.setClassLoader(classLoader18);
        java.lang.Class[] classArray20 = null;
        enhancer0.setInterfaces(classArray20);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
    }

    @Test
    public void test09893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09893");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        boolean boolean4 = enhancer0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        boolean boolean6 = enhancer0.getUseCache();
        boolean boolean7 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        enhancer8.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader12 = enhancer8.getClassLoader();
        java.lang.Class class13 = null;
        enhancer8.setSuperclass(class13);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        enhancer15.setInterceptDuringConstruction(true);
        boolean boolean19 = enhancer15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = enhancer15.getStrategy();
        enhancer8.setStrategy(generatorStrategy20);
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer22.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader26 = enhancer22.getClassLoader();
        java.lang.Class class27 = null;
        enhancer22.setSuperclass(class27);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer29.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader34 = enhancer33.getClassLoader();
        enhancer29.setClassLoader(classLoader34);
        enhancer29.setUseCache(false);
        java.lang.ClassLoader classLoader38 = enhancer29.getClassLoader();
        enhancer22.setClassLoader(classLoader38);
        boolean boolean40 = generatorStrategy20.equals((java.lang.Object) enhancer22);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = enhancer22.getNamingPolicy();
        boolean boolean42 = enhancer22.getAttemptLoad();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter43 = null;
        enhancer22.setCallbackFilter(callbackFilter43);
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader46 = enhancer45.getClassLoader();
        enhancer45.setUseCache(true);
        boolean boolean49 = enhancer45.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer50 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader51 = enhancer50.getClassLoader();
        enhancer50.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader54 = enhancer50.getClassLoader();
        java.lang.Class class55 = null;
        enhancer50.setSuperclass(class55);
        java.lang.Class<?> wildcardClass57 = enhancer50.getClass();
        enhancer45.setSuperclass((java.lang.Class) wildcardClass57);
        enhancer22.setSuperclass((java.lang.Class) wildcardClass57);
        enhancer22.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = enhancer22.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer63 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader64 = enhancer63.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter65 = null;
        enhancer63.setCallbackFilter(callbackFilter65);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = enhancer63.getStrategy();
        boolean boolean68 = generatorStrategy62.equals((java.lang.Object) generatorStrategy67);
        enhancer0.setStrategy(generatorStrategy62);
        enhancer0.setUseCache(true);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        enhancer0.setSerialVersionUID((java.lang.Long) 100L);
        boolean boolean76 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter77 = null;
        enhancer0.setCallbackFilter(callbackFilter77);
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.Class class81 = null;
        enhancer0.setSuperclass(class81);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
    }

    @Test
    public void test09894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09894");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader11 = enhancer7.getClassLoader();
        java.lang.Class class12 = null;
        enhancer7.setSuperclass(class12);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        enhancer14.setClassLoader(classLoader19);
        enhancer14.setUseCache(false);
        java.lang.ClassLoader classLoader23 = enhancer14.getClassLoader();
        enhancer7.setClassLoader(classLoader23);
        enhancer0.setClassLoader(classLoader23);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        enhancer26.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader31 = enhancer30.getClassLoader();
        enhancer26.setClassLoader(classLoader31);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = enhancer26.getStrategy();
        java.lang.Class<?> wildcardClass34 = enhancer26.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        enhancer35.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader39 = enhancer35.getClassLoader();
        java.lang.Class class40 = null;
        enhancer35.setSuperclass(class40);
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader43 = enhancer42.getClassLoader();
        enhancer42.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader47 = enhancer46.getClassLoader();
        enhancer42.setClassLoader(classLoader47);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = enhancer42.getStrategy();
        java.lang.Class<?> wildcardClass50 = enhancer42.getClass();
        enhancer35.setSuperclass((java.lang.Class) wildcardClass50);
        java.lang.Class[] classArray52 = new java.lang.Class[] { wildcardClass34, wildcardClass50 };
        enhancer0.setInterfaces(classArray52);
        boolean boolean54 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        enhancer55.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader59 = enhancer55.getClassLoader();
        java.lang.Class class60 = null;
        enhancer55.setSuperclass(class60);
        enhancer55.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer64 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader65 = enhancer64.getClassLoader();
        enhancer64.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer68 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader69 = enhancer68.getClassLoader();
        enhancer64.setClassLoader(classLoader69);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = enhancer64.getStrategy();
        enhancer55.setStrategy(generatorStrategy71);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = enhancer55.getStrategy();
        enhancer55.setAttemptLoad(false);
        enhancer55.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader78 = enhancer55.getClassLoader();
        enhancer0.setClassLoader(classLoader78);
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.Class<?> wildcardClass82 = enhancer0.getClass();
        org.mockito.cglib.proxy.Callback callback83 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj84 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass82, callback83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(classLoader69);
        org.junit.Assert.assertNotNull(generatorStrategy71);
        org.junit.Assert.assertNotNull(generatorStrategy73);
        org.junit.Assert.assertNotNull(classLoader78);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test09895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09895");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader11 = enhancer7.getClassLoader();
        java.lang.Class class12 = null;
        enhancer7.setSuperclass(class12);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        enhancer14.setClassLoader(classLoader19);
        enhancer14.setUseCache(false);
        java.lang.ClassLoader classLoader23 = enhancer14.getClassLoader();
        enhancer7.setClassLoader(classLoader23);
        enhancer0.setClassLoader(classLoader23);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        enhancer26.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader31 = enhancer30.getClassLoader();
        enhancer26.setClassLoader(classLoader31);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = enhancer26.getStrategy();
        java.lang.Class<?> wildcardClass34 = enhancer26.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        enhancer35.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader39 = enhancer35.getClassLoader();
        java.lang.Class class40 = null;
        enhancer35.setSuperclass(class40);
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader43 = enhancer42.getClassLoader();
        enhancer42.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader47 = enhancer46.getClassLoader();
        enhancer42.setClassLoader(classLoader47);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = enhancer42.getStrategy();
        java.lang.Class<?> wildcardClass50 = enhancer42.getClass();
        enhancer35.setSuperclass((java.lang.Class) wildcardClass50);
        java.lang.Class[] classArray52 = new java.lang.Class[] { wildcardClass34, wildcardClass50 };
        enhancer0.setInterfaces(classArray52);
        boolean boolean54 = enhancer0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader57 = enhancer56.getClassLoader();
        boolean boolean58 = enhancer56.getAttemptLoad();
        enhancer56.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.proxy.Callback callback61 = null;
        enhancer56.setCallback(callback61);
        boolean boolean63 = enhancer56.getUseCache();
        boolean boolean64 = enhancer56.getUseCache();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter65 = null;
        enhancer56.setCallbackFilter(callbackFilter65);
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = null;
        enhancer56.setNamingPolicy(namingPolicy67);
        org.mockito.cglib.proxy.Callback callback69 = null;
        enhancer56.setCallback(callback69);
        org.mockito.cglib.proxy.Enhancer enhancer71 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader72 = enhancer71.getClassLoader();
        enhancer71.setInterceptDuringConstruction(true);
        enhancer71.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback77 = null;
        enhancer71.setCallback(callback77);
        enhancer71.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.core.NamingPolicy namingPolicy81 = enhancer71.getNamingPolicy();
        enhancer56.setNamingPolicy(namingPolicy81);
        boolean boolean83 = enhancer56.getAttemptLoad();
        boolean boolean84 = generatorStrategy55.equals((java.lang.Object) boolean83);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(classLoader72);
        org.junit.Assert.assertNotNull(namingPolicy81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test09896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09896");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseCache(true);
        boolean boolean4 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        enhancer5.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader9 = enhancer5.getClassLoader();
        java.lang.Class class10 = null;
        enhancer5.setSuperclass(class10);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        enhancer12.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        enhancer12.setClassLoader(classLoader17);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = enhancer12.getStrategy();
        java.lang.Class<?> wildcardClass20 = enhancer12.getClass();
        enhancer5.setSuperclass((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        org.mockito.cglib.proxy.Callback callback23 = null;
        enhancer0.setCallback(callback23);
        org.mockito.cglib.proxy.Callback callback25 = null;
        enhancer0.setCallback(callback25);
        enhancer0.setUseFactory(false);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer31.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        enhancer31.setClassLoader(classLoader36);
        enhancer31.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        enhancer40.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader45 = enhancer44.getClassLoader();
        enhancer40.setClassLoader(classLoader45);
        enhancer40.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = enhancer40.getNamingPolicy();
        enhancer31.setNamingPolicy(namingPolicy49);
        org.mockito.cglib.proxy.Enhancer enhancer51 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader52 = enhancer51.getClassLoader();
        enhancer51.setInterceptDuringConstruction(true);
        boolean boolean55 = namingPolicy49.equals((java.lang.Object) enhancer51);
        enhancer29.setNamingPolicy(namingPolicy49);
        java.lang.ClassLoader classLoader57 = enhancer29.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer58 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader59 = enhancer58.getClassLoader();
        enhancer58.setInterceptDuringConstruction(true);
        boolean boolean62 = enhancer58.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = enhancer58.getStrategy();
        boolean boolean65 = generatorStrategy63.equals((java.lang.Object) (short) -1);
        enhancer29.setStrategy(generatorStrategy63);
        enhancer0.setStrategy(generatorStrategy63);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = null;
        enhancer0.setStrategy(generatorStrategy68);
        java.lang.Class<?> wildcardClass70 = enhancer0.getClass();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test09897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09897");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer7.setClassLoader(classLoader12);
        enhancer7.setUseCache(false);
        java.lang.ClassLoader classLoader16 = enhancer7.getClassLoader();
        enhancer0.setClassLoader(classLoader16);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        enhancer18.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader22 = enhancer18.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer18.getStrategy();
        enhancer0.setStrategy(generatorStrategy23);
        boolean boolean25 = enhancer0.getAttemptLoad();
        boolean boolean26 = enhancer0.getAttemptLoad();
        java.lang.ClassLoader classLoader27 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader29 = enhancer28.getClassLoader();
        enhancer28.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader32 = enhancer28.getClassLoader();
        org.mockito.cglib.proxy.Callback callback33 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray34 = new org.mockito.cglib.proxy.Callback[] { callback33 };
        enhancer28.setCallbacks(callbackArray34);
        enhancer28.setSerialVersionUID((java.lang.Long) 0L);
        enhancer28.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        enhancer40.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader44 = enhancer40.getClassLoader();
        org.mockito.cglib.proxy.Callback callback45 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray46 = new org.mockito.cglib.proxy.Callback[] { callback45 };
        enhancer40.setCallbacks(callbackArray46);
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        enhancer48.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader52 = enhancer48.getClassLoader();
        java.lang.Class class53 = null;
        enhancer48.setSuperclass(class53);
        java.lang.Class<?> wildcardClass55 = enhancer48.getClass();
        boolean boolean56 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass55);
        enhancer40.setSuperclass((java.lang.Class) wildcardClass55);
        enhancer28.setSuperclass((java.lang.Class) wildcardClass55);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass55);
        enhancer0.setUseFactory(true);
        enhancer0.setAttemptLoad(false);
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = enhancer0.getNamingPolicy();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(callbackArray34);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(callbackArray46);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(namingPolicy66);
    }

    @Test
    public void test09898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09898");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader9 = enhancer0.getClassLoader();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Callback callback12 = null;
        enhancer0.setCallback(callback12);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        enhancer16.setInterceptDuringConstruction(true);
        boolean boolean20 = enhancer16.getUseCache();
        boolean boolean21 = enhancer16.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter24 = null;
        enhancer22.setCallbackFilter(callbackFilter24);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        enhancer26.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader31 = enhancer30.getClassLoader();
        enhancer26.setClassLoader(classLoader31);
        enhancer26.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = enhancer26.getNamingPolicy();
        boolean boolean36 = enhancer26.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        enhancer37.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader41 = enhancer37.getClassLoader();
        java.lang.Class class42 = null;
        enhancer37.setSuperclass(class42);
        java.lang.ClassLoader classLoader44 = enhancer37.getClassLoader();
        enhancer26.setClassLoader(classLoader44);
        enhancer22.setClassLoader(classLoader44);
        enhancer16.setClassLoader(classLoader44);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter48 = null;
        enhancer16.setCallbackFilter(callbackFilter48);
        enhancer16.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = enhancer16.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy52);
        enhancer0.setAttemptLoad(true);
        enhancer0.setSerialVersionUID((java.lang.Long) 100L);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(namingPolicy52);
    }

    @Test
    public void test09899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09899");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        boolean boolean4 = enhancer0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader7 = enhancer6.getClassLoader();
        enhancer6.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader10 = enhancer6.getClassLoader();
        org.mockito.cglib.proxy.Callback callback11 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray12 = new org.mockito.cglib.proxy.Callback[] { callback11 };
        enhancer6.setCallbacks(callbackArray12);
        enhancer0.setCallbacks(callbackArray12);
        java.lang.ClassLoader classLoader15 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Callback callback16 = null;
        enhancer0.setCallback(callback16);
        java.lang.ClassLoader classLoader18 = enhancer0.getClassLoader();
        java.lang.ClassLoader classLoader19 = enhancer0.getClassLoader();
        enhancer0.setUseFactory(true);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(callbackArray12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader19);
    }

    @Test
    public void test09900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09900");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        boolean boolean11 = enhancer7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer7.getStrategy();
        enhancer0.setStrategy(generatorStrategy12);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader18 = enhancer14.getClassLoader();
        java.lang.Class class19 = null;
        enhancer14.setSuperclass(class19);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer21.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer21.setClassLoader(classLoader26);
        enhancer21.setUseCache(false);
        java.lang.ClassLoader classLoader30 = enhancer21.getClassLoader();
        enhancer14.setClassLoader(classLoader30);
        boolean boolean32 = generatorStrategy12.equals((java.lang.Object) enhancer14);
        org.mockito.cglib.proxy.Callback callback33 = null;
        enhancer14.setCallback(callback33);
        java.lang.ClassLoader classLoader35 = enhancer14.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = enhancer14.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        enhancer37.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader41 = enhancer37.getClassLoader();
        java.lang.Class class42 = null;
        enhancer37.setSuperclass(class42);
        enhancer37.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader47 = enhancer46.getClassLoader();
        enhancer46.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer50 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader51 = enhancer50.getClassLoader();
        enhancer46.setClassLoader(classLoader51);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = enhancer46.getStrategy();
        enhancer37.setStrategy(generatorStrategy53);
        boolean boolean55 = enhancer37.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader57 = enhancer56.getClassLoader();
        enhancer56.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader60 = enhancer56.getClassLoader();
        java.lang.Class class61 = null;
        enhancer56.setSuperclass(class61);
        enhancer56.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer65 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader66 = enhancer65.getClassLoader();
        enhancer65.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer69 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader70 = enhancer69.getClassLoader();
        enhancer65.setClassLoader(classLoader70);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = enhancer65.getStrategy();
        enhancer56.setStrategy(generatorStrategy72);
        org.mockito.cglib.proxy.Enhancer enhancer74 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader75 = enhancer74.getClassLoader();
        enhancer74.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer78 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader79 = enhancer78.getClassLoader();
        enhancer74.setClassLoader(classLoader79);
        org.mockito.cglib.proxy.Enhancer enhancer81 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader82 = enhancer81.getClassLoader();
        enhancer81.setInterceptDuringConstruction(true);
        boolean boolean85 = enhancer81.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy86 = enhancer81.getStrategy();
        java.lang.Class[] classArray87 = new java.lang.Class[] {};
        enhancer81.setInterfaces(classArray87);
        enhancer74.setInterfaces(classArray87);
        enhancer56.setInterfaces(classArray87);
        enhancer37.setInterfaces(classArray87);
        enhancer14.setInterfaces(classArray87);
        boolean boolean93 = enhancer14.getUseCache();
        org.mockito.cglib.proxy.Callback callback94 = null;
        enhancer14.setCallback(callback94);
        org.mockito.asm.ClassVisitor classVisitor96 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer14.generateClass(classVisitor96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertNotNull(classLoader60);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertNotNull(classLoader75);
        org.junit.Assert.assertNotNull(classLoader79);
        org.junit.Assert.assertNotNull(classLoader82);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(generatorStrategy86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
    }

    @Test
    public void test09901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09901");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer9.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer9.getStrategy();
        enhancer0.setStrategy(generatorStrategy16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = enhancer0.getStrategy();
        enhancer0.setAttemptLoad(false);
        enhancer0.setInterceptDuringConstruction(false);
        enhancer0.setUseCache(false);
        boolean boolean25 = enhancer0.getUseCache();
        enhancer0.setAttemptLoad(true);
        java.lang.Class<?> wildcardClass28 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer29.setUseCache(true);
        boolean boolean33 = enhancer29.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = enhancer29.getStrategy();
        boolean boolean35 = enhancer29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = enhancer29.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        enhancer37.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader41 = enhancer37.getClassLoader();
        java.lang.Class class42 = null;
        enhancer37.setSuperclass(class42);
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader45 = enhancer44.getClassLoader();
        enhancer44.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        enhancer44.setClassLoader(classLoader49);
        enhancer44.setUseCache(false);
        java.lang.ClassLoader classLoader53 = enhancer44.getClassLoader();
        enhancer37.setClassLoader(classLoader53);
        java.lang.ClassLoader classLoader55 = enhancer37.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader57 = enhancer56.getClassLoader();
        boolean boolean58 = enhancer56.getAttemptLoad();
        enhancer56.setInterceptDuringConstruction(false);
        enhancer56.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = enhancer56.getStrategy();
        enhancer37.setStrategy(generatorStrategy63);
        enhancer37.setInterceptDuringConstruction(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = enhancer37.getNamingPolicy();
        boolean boolean68 = enhancer37.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer69 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader70 = enhancer69.getClassLoader();
        enhancer69.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer73 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader74 = enhancer73.getClassLoader();
        enhancer69.setClassLoader(classLoader74);
        enhancer69.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer78 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader79 = enhancer78.getClassLoader();
        enhancer78.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader82 = enhancer78.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer83 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader84 = enhancer83.getClassLoader();
        enhancer83.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader87 = enhancer83.getClassLoader();
        org.mockito.cglib.proxy.Callback callback88 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray89 = new org.mockito.cglib.proxy.Callback[] { callback88 };
        enhancer83.setCallbacks(callbackArray89);
        enhancer78.setCallbacks(callbackArray89);
        enhancer69.setCallbacks(callbackArray89);
        enhancer37.setCallbacks(callbackArray89);
        enhancer29.setCallbacks(callbackArray89);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerCallbacks((java.lang.Class) wildcardClass28, callbackArray89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.proxy.Enhancer is not an enhanced class");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertNotNull(namingPolicy67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(classLoader79);
        org.junit.Assert.assertNotNull(classLoader82);
        org.junit.Assert.assertNotNull(classLoader84);
        org.junit.Assert.assertNotNull(classLoader87);
        org.junit.Assert.assertNotNull(callbackArray89);
    }

    @Test
    public void test09902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09902");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer4.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        enhancer4.setClassLoader(classLoader9);
        enhancer4.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer13.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        enhancer13.setClassLoader(classLoader18);
        enhancer13.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = enhancer13.getNamingPolicy();
        enhancer4.setNamingPolicy(namingPolicy22);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        enhancer24.setUseCache(true);
        boolean boolean28 = enhancer24.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer29.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader33 = enhancer29.getClassLoader();
        java.lang.Class class34 = null;
        enhancer29.setSuperclass(class34);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        enhancer36.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        enhancer36.setClassLoader(classLoader41);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = enhancer36.getStrategy();
        java.lang.Class<?> wildcardClass44 = enhancer36.getClass();
        enhancer29.setSuperclass((java.lang.Class) wildcardClass44);
        enhancer24.setSuperclass((java.lang.Class) wildcardClass44);
        boolean boolean47 = namingPolicy22.equals((java.lang.Object) enhancer24);
        enhancer0.setNamingPolicy(namingPolicy22);
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader50 = enhancer49.getClassLoader();
        enhancer49.setInterceptDuringConstruction(true);
        boolean boolean53 = enhancer49.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = enhancer49.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        enhancer55.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader59 = enhancer55.getClassLoader();
        org.mockito.cglib.proxy.Callback callback60 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray61 = new org.mockito.cglib.proxy.Callback[] { callback60 };
        enhancer55.setCallbacks(callbackArray61);
        enhancer49.setCallbacks(callbackArray61);
        enhancer0.setCallbacks(callbackArray61);
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = enhancer0.getNamingPolicy();
        boolean boolean66 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter67 = null;
        enhancer0.setCallbackFilter(callbackFilter67);
        boolean boolean69 = enhancer0.getAttemptLoad();
        enhancer0.setAttemptLoad(false);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(callbackArray61);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test09903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09903");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer7.setClassLoader(classLoader12);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = enhancer7.getStrategy();
        java.lang.Class<?> wildcardClass15 = enhancer7.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass15);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        enhancer17.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer17.setClassLoader(classLoader22);
        enhancer17.setUseCache(false);
        java.lang.ClassLoader classLoader26 = enhancer17.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = enhancer17.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = enhancer17.getNamingPolicy();
        java.lang.ClassLoader classLoader29 = enhancer17.getClassLoader();
        enhancer0.setClassLoader(classLoader29);
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter33 = null;
        enhancer0.setCallbackFilter(callbackFilter33);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        enhancer35.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader40 = enhancer39.getClassLoader();
        enhancer35.setClassLoader(classLoader40);
        enhancer35.setUseCache(false);
        java.lang.ClassLoader classLoader44 = enhancer35.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter45 = null;
        enhancer35.setCallbackFilter(callbackFilter45);
        enhancer35.setUseFactory(false);
        java.lang.Class<?> wildcardClass49 = enhancer35.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass49);
        org.mockito.cglib.proxy.Callback[] callbackArray51 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerStaticCallbacks((java.lang.Class) wildcardClass49, callbackArray51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.proxy.Enhancer is not an enhanced class");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test09904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09904");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseCache(true);
        boolean boolean4 = enhancer0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        enhancer0.setNamingPolicy(namingPolicy5);
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = enhancer9.getStrategy();
        enhancer0.setStrategy(generatorStrategy13);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        enhancer15.setInterceptDuringConstruction(true);
        boolean boolean19 = enhancer15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = enhancer15.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer21.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader25 = enhancer21.getClassLoader();
        org.mockito.cglib.proxy.Callback callback26 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray27 = new org.mockito.cglib.proxy.Callback[] { callback26 };
        enhancer21.setCallbacks(callbackArray27);
        enhancer15.setCallbacks(callbackArray27);
        java.lang.ClassLoader classLoader30 = enhancer15.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer31.setUseCache(true);
        boolean boolean35 = enhancer31.getAttemptLoad();
        org.mockito.cglib.proxy.Callback callback36 = null;
        enhancer31.setCallback(callback36);
        java.lang.ClassLoader classLoader38 = enhancer31.getClassLoader();
        enhancer15.setClassLoader(classLoader38);
        enhancer0.setClassLoader(classLoader38);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = enhancer0.getNamingPolicy();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(callbackArray27);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(namingPolicy41);
    }

    @Test
    public void test09905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09905");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        enhancer0.setInterceptDuringConstruction(true);
        enhancer0.setAttemptLoad(true);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
    }

    @Test
    public void test09906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09906");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        enhancer0.setAttemptLoad(true);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        boolean boolean15 = enhancer13.getAttemptLoad();
        enhancer13.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.proxy.Callback callback18 = null;
        enhancer13.setCallback(callback18);
        boolean boolean20 = enhancer13.getUseCache();
        boolean boolean21 = enhancer13.getUseCache();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter22 = null;
        enhancer13.setCallbackFilter(callbackFilter22);
        java.lang.ClassLoader classLoader24 = enhancer13.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer25.setInterceptDuringConstruction(true);
        boolean boolean29 = enhancer25.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = enhancer25.getStrategy();
        java.lang.Class[] classArray31 = new java.lang.Class[] {};
        enhancer25.setInterfaces(classArray31);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = enhancer25.getStrategy();
        enhancer13.setStrategy(generatorStrategy33);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = enhancer13.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy35);
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        enhancer37.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader41 = enhancer37.getClassLoader();
        java.lang.Class class42 = null;
        enhancer37.setSuperclass(class42);
        java.lang.ClassLoader classLoader44 = enhancer37.getClassLoader();
        boolean boolean45 = enhancer37.getUseCache();
        enhancer37.setSerialVersionUID((java.lang.Long) 100L);
        boolean boolean48 = namingPolicy35.equals((java.lang.Object) enhancer37);
        enhancer37.setSerialVersionUID((java.lang.Long) 100L);
        java.lang.Class<?> wildcardClass51 = enhancer37.getClass();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test09907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09907");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        boolean boolean2 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = enhancer0.getStrategy();
        boolean boolean8 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = enhancer0.getStrategy();
        enhancer0.setAttemptLoad(false);
        java.lang.Class<?> wildcardClass14 = enhancer0.getClass();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test09908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09908");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback3 = null;
        enhancer0.setCallback(callback3);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        enhancer8.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        enhancer8.setClassLoader(classLoader13);
        enhancer8.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        enhancer17.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer17.setClassLoader(classLoader22);
        enhancer17.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = enhancer17.getNamingPolicy();
        enhancer8.setNamingPolicy(namingPolicy26);
        enhancer8.setInterceptDuringConstruction(true);
        boolean boolean30 = enhancer8.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer31.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader35 = enhancer31.getClassLoader();
        java.lang.Class class36 = null;
        enhancer31.setSuperclass(class36);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader39 = enhancer38.getClassLoader();
        enhancer38.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader43 = enhancer42.getClassLoader();
        enhancer38.setClassLoader(classLoader43);
        enhancer38.setUseCache(false);
        java.lang.ClassLoader classLoader47 = enhancer38.getClassLoader();
        enhancer31.setClassLoader(classLoader47);
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader50 = enhancer49.getClassLoader();
        enhancer49.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader53 = enhancer49.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = enhancer49.getStrategy();
        enhancer31.setStrategy(generatorStrategy54);
        boolean boolean56 = enhancer31.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader58 = enhancer57.getClassLoader();
        enhancer57.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer61 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader62 = enhancer61.getClassLoader();
        enhancer57.setClassLoader(classLoader62);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = enhancer57.getStrategy();
        java.lang.Class<?> wildcardClass65 = enhancer57.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer66 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader67 = enhancer66.getClassLoader();
        enhancer66.setUseCache(true);
        boolean boolean70 = enhancer66.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer71 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader72 = enhancer71.getClassLoader();
        enhancer71.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader75 = enhancer71.getClassLoader();
        java.lang.Class class76 = null;
        enhancer71.setSuperclass(class76);
        org.mockito.cglib.proxy.Enhancer enhancer78 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader79 = enhancer78.getClassLoader();
        enhancer78.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer82 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader83 = enhancer82.getClassLoader();
        enhancer78.setClassLoader(classLoader83);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy85 = enhancer78.getStrategy();
        java.lang.Class<?> wildcardClass86 = enhancer78.getClass();
        enhancer71.setSuperclass((java.lang.Class) wildcardClass86);
        enhancer66.setSuperclass((java.lang.Class) wildcardClass86);
        java.lang.Class[] classArray89 = new java.lang.Class[] { wildcardClass65, wildcardClass86 };
        enhancer31.setInterfaces(classArray89);
        enhancer8.setInterfaces(classArray89);
        enhancer0.setInterfaces(classArray89);
        enhancer0.setAttemptLoad(true);
        boolean boolean95 = enhancer0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy96 = enhancer0.getStrategy();
        enhancer0.setUseFactory(true);
        boolean boolean99 = enhancer0.getAttemptLoad();
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(classLoader67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(classLoader72);
        org.junit.Assert.assertNotNull(classLoader75);
        org.junit.Assert.assertNotNull(classLoader79);
        org.junit.Assert.assertNotNull(classLoader83);
        org.junit.Assert.assertNotNull(generatorStrategy85);
        org.junit.Assert.assertNotNull(wildcardClass86);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNotNull(generatorStrategy96);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test09909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09909");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        boolean boolean9 = enhancer0.getAttemptLoad();
        java.lang.ClassLoader classLoader10 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(false);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        enhancer15.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback18 = null;
        enhancer15.setCallback(callback18);
        enhancer15.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = enhancer15.getNamingPolicy();
        java.lang.ClassLoader classLoader23 = enhancer15.getClassLoader();
        enhancer0.setClassLoader(classLoader23);
        boolean boolean25 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        enhancer26.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader31 = enhancer30.getClassLoader();
        enhancer26.setClassLoader(classLoader31);
        enhancer26.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = enhancer26.getNamingPolicy();
        boolean boolean36 = enhancer26.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        enhancer37.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader41 = enhancer37.getClassLoader();
        java.lang.Class class42 = null;
        enhancer37.setSuperclass(class42);
        java.lang.ClassLoader classLoader44 = enhancer37.getClassLoader();
        enhancer26.setClassLoader(classLoader44);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = enhancer26.getStrategy();
        boolean boolean47 = enhancer26.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        enhancer48.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader52 = enhancer48.getClassLoader();
        java.lang.Class class53 = null;
        enhancer48.setSuperclass(class53);
        enhancer48.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader58 = enhancer57.getClassLoader();
        enhancer57.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer61 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader62 = enhancer61.getClassLoader();
        enhancer57.setClassLoader(classLoader62);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = enhancer57.getStrategy();
        enhancer48.setStrategy(generatorStrategy64);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = enhancer48.getStrategy();
        enhancer26.setStrategy(generatorStrategy66);
        org.mockito.cglib.proxy.Callback callback68 = null;
        enhancer26.setCallback(callback68);
        org.mockito.cglib.proxy.Callback callback70 = null;
        enhancer26.setCallback(callback70);
        org.mockito.cglib.proxy.Enhancer enhancer72 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader73 = enhancer72.getClassLoader();
        enhancer72.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader76 = enhancer72.getClassLoader();
        java.lang.Class class77 = null;
        enhancer72.setSuperclass(class77);
        enhancer72.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer81 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer82 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader83 = enhancer82.getClassLoader();
        enhancer82.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer86 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader87 = enhancer86.getClassLoader();
        enhancer82.setClassLoader(classLoader87);
        enhancer81.setClassLoader(classLoader87);
        enhancer72.setClassLoader(classLoader87);
        enhancer72.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy93 = enhancer72.getNamingPolicy();
        enhancer26.setNamingPolicy(namingPolicy93);
        enhancer0.setNamingPolicy(namingPolicy93);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertNotNull(classLoader73);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertNotNull(classLoader83);
        org.junit.Assert.assertNotNull(classLoader87);
        org.junit.Assert.assertNotNull(namingPolicy93);
    }

    @Test
    public void test09910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09910");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer13.setUseCache(true);
        boolean boolean17 = enhancer13.getAttemptLoad();
        org.mockito.cglib.proxy.Callback callback18 = null;
        enhancer13.setCallback(callback18);
        java.lang.ClassLoader classLoader20 = enhancer13.getClassLoader();
        enhancer0.setClassLoader(classLoader20);
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        enhancer22.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = enhancer22.getStrategy();
        enhancer22.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader29 = enhancer28.getClassLoader();
        enhancer28.setInterceptDuringConstruction(true);
        boolean boolean32 = enhancer28.getUseCache();
        boolean boolean33 = enhancer28.getAttemptLoad();
        enhancer28.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        enhancer36.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        enhancer36.setClassLoader(classLoader41);
        enhancer36.setUseCache(false);
        java.lang.ClassLoader classLoader45 = enhancer36.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader47 = enhancer46.getClassLoader();
        enhancer46.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader50 = enhancer46.getClassLoader();
        org.mockito.cglib.proxy.Callback callback51 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray52 = new org.mockito.cglib.proxy.Callback[] { callback51 };
        enhancer46.setCallbacks(callbackArray52);
        enhancer46.setSerialVersionUID((java.lang.Long) 0L);
        enhancer46.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.proxy.Enhancer enhancer58 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader59 = enhancer58.getClassLoader();
        enhancer58.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader62 = enhancer58.getClassLoader();
        org.mockito.cglib.proxy.Callback callback63 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray64 = new org.mockito.cglib.proxy.Callback[] { callback63 };
        enhancer58.setCallbacks(callbackArray64);
        org.mockito.cglib.proxy.Enhancer enhancer66 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader67 = enhancer66.getClassLoader();
        enhancer66.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader70 = enhancer66.getClassLoader();
        java.lang.Class class71 = null;
        enhancer66.setSuperclass(class71);
        java.lang.Class<?> wildcardClass73 = enhancer66.getClass();
        boolean boolean74 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass73);
        enhancer58.setSuperclass((java.lang.Class) wildcardClass73);
        enhancer46.setSuperclass((java.lang.Class) wildcardClass73);
        java.lang.Class[] classArray77 = new java.lang.Class[] { wildcardClass73 };
        enhancer36.setInterfaces(classArray77);
        enhancer28.setInterfaces(classArray77);
        enhancer22.setInterfaces(classArray77);
        enhancer0.setInterfaces(classArray77);
        boolean boolean82 = enhancer0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor83 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(callbackArray52);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertNotNull(callbackArray64);
        org.junit.Assert.assertNotNull(classLoader67);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test09911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09911");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter7 = null;
        enhancer0.setCallbackFilter(callbackFilter7);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer9.setClassLoader(classLoader14);
        enhancer9.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        enhancer18.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer18.setClassLoader(classLoader23);
        enhancer18.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = enhancer18.getNamingPolicy();
        enhancer9.setNamingPolicy(namingPolicy27);
        enhancer0.setNamingPolicy(namingPolicy27);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        enhancer32.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader36 = enhancer32.getClassLoader();
        org.mockito.cglib.proxy.Callback callback37 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray38 = new org.mockito.cglib.proxy.Callback[] { callback37 };
        enhancer32.setCallbacks(callbackArray38);
        enhancer32.setSerialVersionUID((java.lang.Long) 0L);
        boolean boolean42 = enhancer32.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader44 = enhancer43.getClassLoader();
        enhancer43.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer47 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader48 = enhancer47.getClassLoader();
        enhancer43.setClassLoader(classLoader48);
        enhancer43.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer52 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader53 = enhancer52.getClassLoader();
        enhancer52.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader57 = enhancer56.getClassLoader();
        enhancer52.setClassLoader(classLoader57);
        enhancer52.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = enhancer52.getNamingPolicy();
        enhancer43.setNamingPolicy(namingPolicy61);
        org.mockito.cglib.proxy.Enhancer enhancer63 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader64 = enhancer63.getClassLoader();
        enhancer63.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader67 = enhancer63.getClassLoader();
        java.lang.Class class68 = null;
        enhancer63.setSuperclass(class68);
        org.mockito.cglib.proxy.Enhancer enhancer70 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader71 = enhancer70.getClassLoader();
        enhancer70.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer74 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader75 = enhancer74.getClassLoader();
        enhancer70.setClassLoader(classLoader75);
        enhancer70.setUseCache(false);
        java.lang.ClassLoader classLoader79 = enhancer70.getClassLoader();
        enhancer63.setClassLoader(classLoader79);
        boolean boolean81 = namingPolicy61.equals((java.lang.Object) enhancer63);
        enhancer32.setNamingPolicy(namingPolicy61);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = enhancer32.getStrategy();
        enhancer32.setUseCache(true);
        boolean boolean86 = enhancer32.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer87 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader88 = enhancer87.getClassLoader();
        enhancer87.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader91 = enhancer87.getClassLoader();
        java.lang.Class<?> wildcardClass92 = classLoader91.getClass();
        boolean boolean93 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass92);
        enhancer32.setSuperclass((java.lang.Class) wildcardClass92);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass92);
        boolean boolean96 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass92);
        boolean boolean97 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass92);
        org.mockito.cglib.proxy.Callback[] callbackArray98 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerStaticCallbacks((java.lang.Class) wildcardClass92, callbackArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class sun.misc.Launcher$AppClassLoader is not an enhanced class");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(callbackArray38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertNotNull(classLoader67);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertNotNull(classLoader75);
        org.junit.Assert.assertNotNull(classLoader79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(generatorStrategy83);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(classLoader88);
        org.junit.Assert.assertNotNull(classLoader91);
        org.junit.Assert.assertNotNull(wildcardClass92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test09912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09912");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = enhancer0.getStrategy();
        enhancer0.setInterceptDuringConstruction(true);
        enhancer0.setAttemptLoad(false);
        enhancer0.setSerialVersionUID((java.lang.Long) 1L);
        enhancer0.setAttemptLoad(true);
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        enhancer18.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader22 = enhancer18.getClassLoader();
        java.lang.Class class23 = null;
        enhancer18.setSuperclass(class23);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer25.setInterceptDuringConstruction(true);
        boolean boolean29 = enhancer25.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = enhancer25.getStrategy();
        enhancer18.setStrategy(generatorStrategy30);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        enhancer32.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader36 = enhancer32.getClassLoader();
        java.lang.Class class37 = null;
        enhancer32.setSuperclass(class37);
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader40 = enhancer39.getClassLoader();
        enhancer39.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader44 = enhancer43.getClassLoader();
        enhancer39.setClassLoader(classLoader44);
        enhancer39.setUseCache(false);
        java.lang.ClassLoader classLoader48 = enhancer39.getClassLoader();
        enhancer32.setClassLoader(classLoader48);
        boolean boolean50 = generatorStrategy30.equals((java.lang.Object) enhancer32);
        org.mockito.cglib.proxy.Callback callback51 = null;
        enhancer32.setCallback(callback51);
        java.lang.ClassLoader classLoader53 = enhancer32.getClassLoader();
        enhancer0.setClassLoader(classLoader53);
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer58 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader59 = enhancer58.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter60 = null;
        enhancer58.setCallbackFilter(callbackFilter60);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter62 = null;
        enhancer58.setCallbackFilter(callbackFilter62);
        enhancer58.setUseCache(true);
        enhancer58.setUseCache(false);
        org.mockito.cglib.proxy.Callback callback68 = null;
        enhancer58.setCallback(callback68);
        boolean boolean70 = namingPolicy57.equals((java.lang.Object) enhancer58);
        org.mockito.cglib.proxy.Enhancer enhancer71 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader72 = enhancer71.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = enhancer71.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer74 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader75 = enhancer74.getClassLoader();
        enhancer74.setUseCache(true);
        boolean boolean78 = enhancer74.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer79 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader80 = enhancer79.getClassLoader();
        enhancer79.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader83 = enhancer79.getClassLoader();
        java.lang.Class class84 = null;
        enhancer79.setSuperclass(class84);
        org.mockito.cglib.proxy.Enhancer enhancer86 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader87 = enhancer86.getClassLoader();
        enhancer86.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer90 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader91 = enhancer90.getClassLoader();
        enhancer86.setClassLoader(classLoader91);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy93 = enhancer86.getStrategy();
        java.lang.Class<?> wildcardClass94 = enhancer86.getClass();
        enhancer79.setSuperclass((java.lang.Class) wildcardClass94);
        enhancer74.setSuperclass((java.lang.Class) wildcardClass94);
        enhancer71.setSuperclass((java.lang.Class) wildcardClass94);
        boolean boolean98 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass94);
        enhancer58.setSuperclass((java.lang.Class) wildcardClass94);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(classLoader72);
        org.junit.Assert.assertNotNull(generatorStrategy73);
        org.junit.Assert.assertNotNull(classLoader75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(classLoader80);
        org.junit.Assert.assertNotNull(classLoader83);
        org.junit.Assert.assertNotNull(classLoader87);
        org.junit.Assert.assertNotNull(classLoader91);
        org.junit.Assert.assertNotNull(generatorStrategy93);
        org.junit.Assert.assertNotNull(wildcardClass94);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test09913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09913");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer9.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer9.getStrategy();
        enhancer0.setStrategy(generatorStrategy16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = enhancer0.getStrategy();
        boolean boolean19 = enhancer0.getUseCache();
        enhancer0.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.CallbackFilter callbackFilter22 = null;
        enhancer0.setCallbackFilter(callbackFilter22);
        java.lang.ClassLoader classLoader24 = enhancer0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = enhancer0.getNamingPolicy();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(namingPolicy25);
    }

    @Test
    public void test09914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09914");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader9 = enhancer0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = enhancer0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = enhancer0.getNamingPolicy();
        enhancer0.setAttemptLoad(false);
        boolean boolean15 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        enhancer16.setInterceptDuringConstruction(true);
        boolean boolean20 = enhancer16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = enhancer16.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer22.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader26 = enhancer22.getClassLoader();
        org.mockito.cglib.proxy.Callback callback27 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray28 = new org.mockito.cglib.proxy.Callback[] { callback27 };
        enhancer22.setCallbacks(callbackArray28);
        enhancer16.setCallbacks(callbackArray28);
        enhancer0.setCallbacks(callbackArray28);
        enhancer0.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        enhancer34.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader39 = enhancer38.getClassLoader();
        enhancer34.setClassLoader(classLoader39);
        enhancer34.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader44 = enhancer43.getClassLoader();
        enhancer43.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer47 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader48 = enhancer47.getClassLoader();
        enhancer43.setClassLoader(classLoader48);
        enhancer43.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = enhancer43.getNamingPolicy();
        enhancer34.setNamingPolicy(namingPolicy52);
        enhancer34.setInterceptDuringConstruction(true);
        boolean boolean56 = enhancer34.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer58 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader59 = enhancer58.getClassLoader();
        enhancer58.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer62 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader63 = enhancer62.getClassLoader();
        enhancer58.setClassLoader(classLoader63);
        enhancer57.setClassLoader(classLoader63);
        enhancer34.setClassLoader(classLoader63);
        enhancer0.setClassLoader(classLoader63);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter70 = null;
        enhancer0.setCallbackFilter(callbackFilter70);
        java.lang.ClassLoader classLoader72 = enhancer0.getClassLoader();
        boolean boolean73 = enhancer0.getUseCache();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(callbackArray28);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(classLoader63);
        org.junit.Assert.assertNotNull(classLoader72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test09915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09915");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader2 = enhancer1.getClassLoader();
        enhancer1.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        enhancer1.setClassLoader(classLoader6);
        enhancer0.setClassLoader(classLoader6);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader13 = enhancer9.getClassLoader();
        enhancer0.setClassLoader(classLoader13);
        boolean boolean15 = enhancer0.getUseCache();
        boolean boolean16 = enhancer0.getAttemptLoad();
        enhancer0.setUseFactory(true);
        java.lang.ClassLoader classLoader19 = enhancer0.getClassLoader();
        java.lang.ClassLoader classLoader20 = enhancer0.getClassLoader();
        boolean boolean21 = enhancer0.getUseCache();
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test09916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09916");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = enhancer5.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        enhancer8.setUseCache(true);
        boolean boolean12 = enhancer8.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer13.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader17 = enhancer13.getClassLoader();
        java.lang.Class class18 = null;
        enhancer13.setSuperclass(class18);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer20.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        enhancer20.setClassLoader(classLoader25);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = enhancer20.getStrategy();
        java.lang.Class<?> wildcardClass28 = enhancer20.getClass();
        enhancer13.setSuperclass((java.lang.Class) wildcardClass28);
        enhancer8.setSuperclass((java.lang.Class) wildcardClass28);
        enhancer5.setSuperclass((java.lang.Class) wildcardClass28);
        org.mockito.cglib.proxy.Callback callback32 = null;
        enhancer5.setCallback(callback32);
        boolean boolean34 = generatorStrategy4.equals((java.lang.Object) enhancer5);
        enhancer5.setInterceptDuringConstruction(false);
        enhancer5.setSerialVersionUID((java.lang.Long) (-1L));
        enhancer5.setUseFactory(false);
        enhancer5.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter43 = null;
        enhancer5.setCallbackFilter(callbackFilter43);
        enhancer5.setUseFactory(false);
        org.mockito.asm.ClassVisitor classVisitor47 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer5.generateClass(classVisitor47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test09917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09917");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Callback callback5 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray6 = new org.mockito.cglib.proxy.Callback[] { callback5 };
        enhancer0.setCallbacks(callbackArray6);
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        boolean boolean10 = enhancer0.getUseCache();
        enhancer0.setUseCache(true);
        enhancer0.setAttemptLoad(true);
        boolean boolean15 = enhancer0.getUseCache();
        enhancer0.setUseCache(true);
        java.lang.Class<?> wildcardClass18 = enhancer0.getClass();
        boolean boolean19 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass18);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer20.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader24 = enhancer20.getClassLoader();
        java.lang.Class class25 = null;
        enhancer20.setSuperclass(class25);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = enhancer20.getNamingPolicy();
        enhancer20.setInterceptDuringConstruction(false);
        enhancer20.setInterceptDuringConstruction(false);
        enhancer20.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        enhancer34.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader39 = enhancer38.getClassLoader();
        enhancer34.setClassLoader(classLoader39);
        enhancer34.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader44 = enhancer43.getClassLoader();
        enhancer43.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader47 = enhancer43.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        enhancer48.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader52 = enhancer48.getClassLoader();
        org.mockito.cglib.proxy.Callback callback53 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray54 = new org.mockito.cglib.proxy.Callback[] { callback53 };
        enhancer48.setCallbacks(callbackArray54);
        enhancer43.setCallbacks(callbackArray54);
        enhancer34.setCallbacks(callbackArray54);
        org.mockito.cglib.proxy.Enhancer enhancer58 = new org.mockito.cglib.proxy.Enhancer();
        enhancer58.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback61 = null;
        enhancer58.setCallback(callback61);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter63 = null;
        enhancer58.setCallbackFilter(callbackFilter63);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = enhancer58.getStrategy();
        boolean boolean66 = enhancer58.getUseCache();
        org.mockito.cglib.proxy.Callback callback67 = null;
        enhancer58.setCallback(callback67);
        org.mockito.cglib.proxy.Enhancer enhancer69 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader70 = enhancer69.getClassLoader();
        enhancer69.setInterceptDuringConstruction(true);
        boolean boolean73 = enhancer69.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = enhancer69.getStrategy();
        java.lang.Class[] classArray75 = new java.lang.Class[] {};
        enhancer69.setInterfaces(classArray75);
        enhancer58.setInterfaces(classArray75);
        enhancer34.setInterfaces(classArray75);
        enhancer20.setInterfaces(classArray75);
        java.util.List list80 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.getMethods((java.lang.Class) wildcardClass18, classArray75, list80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(callbackArray6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(callbackArray54);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(generatorStrategy74);
        org.junit.Assert.assertNotNull(classArray75);
    }

    @Test
    public void test09918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09918");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter2 = null;
        enhancer0.setCallbackFilter(callbackFilter2);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter4 = null;
        enhancer0.setCallbackFilter(callbackFilter4);
        boolean boolean6 = enhancer0.getUseCache();
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer0.getStrategy();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(generatorStrategy9);
    }

    @Test
    public void test09919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09919");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        java.lang.ClassLoader classLoader7 = enhancer0.getClassLoader();
        boolean boolean8 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader13 = enhancer9.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader18 = enhancer14.getClassLoader();
        org.mockito.cglib.proxy.Callback callback19 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray20 = new org.mockito.cglib.proxy.Callback[] { callback19 };
        enhancer14.setCallbacks(callbackArray20);
        enhancer9.setCallbacks(callbackArray20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer9.getStrategy();
        enhancer0.setStrategy(generatorStrategy23);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        enhancer26.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader31 = enhancer30.getClassLoader();
        enhancer26.setClassLoader(classLoader31);
        enhancer26.setUseCache(false);
        java.lang.ClassLoader classLoader35 = enhancer26.getClassLoader();
        enhancer26.setAttemptLoad(true);
        org.mockito.cglib.proxy.Callback callback38 = null;
        enhancer26.setCallback(callback38);
        org.mockito.cglib.proxy.Callback callback40 = null;
        enhancer26.setCallback(callback40);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = enhancer26.getStrategy();
        enhancer0.setStrategy(generatorStrategy42);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = enhancer0.getStrategy();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(callbackArray20);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(generatorStrategy44);
    }

    @Test
    public void test09920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09920");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter2 = null;
        enhancer0.setCallbackFilter(callbackFilter2);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        enhancer5.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer5.setClassLoader(classLoader10);
        enhancer5.setUseCache(false);
        boolean boolean14 = enhancer5.getAttemptLoad();
        java.lang.ClassLoader classLoader15 = enhancer5.getClassLoader();
        enhancer5.setInterceptDuringConstruction(false);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray18 = generatorStrategy4.generate((org.mockito.cglib.core.ClassGenerator) enhancer5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(classLoader15);
    }

    @Test
    public void test09921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09921");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Callback callback5 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray6 = new org.mockito.cglib.proxy.Callback[] { callback5 };
        enhancer0.setCallbacks(callbackArray6);
        enhancer0.setAttemptLoad(false);
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        enhancer12.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader16 = enhancer12.getClassLoader();
        java.lang.Class class17 = null;
        enhancer12.setSuperclass(class17);
        enhancer12.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer21.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer21.setClassLoader(classLoader26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = enhancer21.getStrategy();
        enhancer12.setStrategy(generatorStrategy28);
        boolean boolean30 = enhancer12.getAttemptLoad();
        enhancer12.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader34 = enhancer33.getClassLoader();
        enhancer33.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader37 = enhancer33.getClassLoader();
        java.lang.Class class38 = null;
        enhancer33.setSuperclass(class38);
        enhancer33.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader43 = enhancer42.getClassLoader();
        enhancer42.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader47 = enhancer46.getClassLoader();
        enhancer42.setClassLoader(classLoader47);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = enhancer42.getStrategy();
        enhancer33.setStrategy(generatorStrategy49);
        enhancer33.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer53 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader54 = enhancer53.getClassLoader();
        enhancer53.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader57 = enhancer53.getClassLoader();
        java.lang.Class class58 = null;
        enhancer53.setSuperclass(class58);
        enhancer53.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer62 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer63 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader64 = enhancer63.getClassLoader();
        enhancer63.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer67 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader68 = enhancer67.getClassLoader();
        enhancer63.setClassLoader(classLoader68);
        enhancer62.setClassLoader(classLoader68);
        enhancer53.setClassLoader(classLoader68);
        enhancer33.setClassLoader(classLoader68);
        enhancer12.setClassLoader(classLoader68);
        enhancer0.setClassLoader(classLoader68);
        org.mockito.asm.ClassVisitor classVisitor75 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(callbackArray6);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertNotNull(classLoader68);
    }

    @Test
    public void test09922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09922");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseCache(true);
        boolean boolean4 = enhancer0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        enhancer0.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer9.setClassLoader(classLoader14);
        enhancer8.setClassLoader(classLoader14);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        enhancer17.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader21 = enhancer17.getClassLoader();
        enhancer8.setClassLoader(classLoader21);
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader24 = enhancer23.getClassLoader();
        enhancer23.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader28 = enhancer27.getClassLoader();
        enhancer23.setClassLoader(classLoader28);
        enhancer23.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = enhancer23.getNamingPolicy();
        enhancer23.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        enhancer35.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader39 = enhancer35.getClassLoader();
        java.lang.Class class40 = null;
        enhancer35.setSuperclass(class40);
        enhancer35.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader45 = enhancer44.getClassLoader();
        enhancer44.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        enhancer44.setClassLoader(classLoader49);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = enhancer44.getStrategy();
        enhancer35.setStrategy(generatorStrategy51);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = enhancer35.getStrategy();
        enhancer23.setStrategy(generatorStrategy53);
        enhancer8.setStrategy(generatorStrategy53);
        enhancer0.setStrategy(generatorStrategy53);
        boolean boolean57 = enhancer0.getUseCache();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test09923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09923");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer4.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        enhancer4.setClassLoader(classLoader9);
        enhancer4.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer13.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        enhancer13.setClassLoader(classLoader18);
        enhancer13.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = enhancer13.getNamingPolicy();
        enhancer4.setNamingPolicy(namingPolicy22);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        enhancer24.setUseCache(true);
        boolean boolean28 = enhancer24.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer29.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader33 = enhancer29.getClassLoader();
        java.lang.Class class34 = null;
        enhancer29.setSuperclass(class34);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        enhancer36.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        enhancer36.setClassLoader(classLoader41);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = enhancer36.getStrategy();
        java.lang.Class<?> wildcardClass44 = enhancer36.getClass();
        enhancer29.setSuperclass((java.lang.Class) wildcardClass44);
        enhancer24.setSuperclass((java.lang.Class) wildcardClass44);
        boolean boolean47 = namingPolicy22.equals((java.lang.Object) enhancer24);
        enhancer0.setNamingPolicy(namingPolicy22);
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader50 = enhancer49.getClassLoader();
        enhancer49.setInterceptDuringConstruction(true);
        boolean boolean53 = enhancer49.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = enhancer49.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        enhancer55.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader59 = enhancer55.getClassLoader();
        org.mockito.cglib.proxy.Callback callback60 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray61 = new org.mockito.cglib.proxy.Callback[] { callback60 };
        enhancer55.setCallbacks(callbackArray61);
        enhancer49.setCallbacks(callbackArray61);
        enhancer0.setCallbacks(callbackArray61);
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter66 = null;
        enhancer0.setCallbackFilter(callbackFilter66);
        java.lang.ClassLoader classLoader68 = enhancer0.getClassLoader();
        enhancer0.setAttemptLoad(false);
        enhancer0.setUseCache(false);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(callbackArray61);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertNotNull(classLoader68);
    }

    @Test
    public void test09924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09924");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = enhancer0.getNamingPolicy();
        boolean boolean10 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer11.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader15 = enhancer11.getClassLoader();
        java.lang.Class class16 = null;
        enhancer11.setSuperclass(class16);
        java.lang.ClassLoader classLoader18 = enhancer11.getClassLoader();
        enhancer0.setClassLoader(classLoader18);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = enhancer0.getStrategy();
        boolean boolean21 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer22.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader26 = enhancer22.getClassLoader();
        java.lang.Class class27 = null;
        enhancer22.setSuperclass(class27);
        enhancer22.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer31.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        enhancer31.setClassLoader(classLoader36);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = enhancer31.getStrategy();
        enhancer22.setStrategy(generatorStrategy38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = enhancer22.getStrategy();
        enhancer0.setStrategy(generatorStrategy40);
        enhancer0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = enhancer0.getNamingPolicy();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(namingPolicy44);
    }

    @Test
    public void test09925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09925");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = enhancer0.getNamingPolicy();
        boolean boolean10 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer11.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader15 = enhancer11.getClassLoader();
        java.lang.Class class16 = null;
        enhancer11.setSuperclass(class16);
        java.lang.ClassLoader classLoader18 = enhancer11.getClassLoader();
        enhancer0.setClassLoader(classLoader18);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = enhancer0.getStrategy();
        boolean boolean21 = enhancer0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter23 = null;
        enhancer0.setCallbackFilter(callbackFilter23);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(namingPolicy22);
    }

    @Test
    public void test09926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09926");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = enhancer0.getStrategy();
        enhancer0.setInterceptDuringConstruction(true);
        enhancer0.setAttemptLoad(false);
        enhancer0.setSerialVersionUID((java.lang.Long) 1L);
        enhancer0.setAttemptLoad(true);
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        enhancer18.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader22 = enhancer18.getClassLoader();
        java.lang.Class class23 = null;
        enhancer18.setSuperclass(class23);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer25.setInterceptDuringConstruction(true);
        boolean boolean29 = enhancer25.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = enhancer25.getStrategy();
        enhancer18.setStrategy(generatorStrategy30);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        enhancer32.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader36 = enhancer32.getClassLoader();
        java.lang.Class class37 = null;
        enhancer32.setSuperclass(class37);
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader40 = enhancer39.getClassLoader();
        enhancer39.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader44 = enhancer43.getClassLoader();
        enhancer39.setClassLoader(classLoader44);
        enhancer39.setUseCache(false);
        java.lang.ClassLoader classLoader48 = enhancer39.getClassLoader();
        enhancer32.setClassLoader(classLoader48);
        boolean boolean50 = generatorStrategy30.equals((java.lang.Object) enhancer32);
        org.mockito.cglib.proxy.Callback callback51 = null;
        enhancer32.setCallback(callback51);
        java.lang.ClassLoader classLoader53 = enhancer32.getClassLoader();
        enhancer0.setClassLoader(classLoader53);
        java.lang.ClassLoader classLoader55 = null;
        enhancer0.setClassLoader(classLoader55);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class57 = enhancer0.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback types are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(classLoader53);
    }

    @Test
    public void test09927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09927");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback3 = null;
        enhancer0.setCallback(callback3);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter5 = null;
        enhancer0.setCallbackFilter(callbackFilter5);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = enhancer0.getStrategy();
        boolean boolean8 = enhancer0.getUseCache();
        java.lang.ClassLoader classLoader9 = enhancer0.getClassLoader();
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(classLoader9);
    }

    @Test
    public void test09928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09928");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseCache(true);
        boolean boolean4 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        enhancer5.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader9 = enhancer5.getClassLoader();
        java.lang.Class class10 = null;
        enhancer5.setSuperclass(class10);
        java.lang.Class<?> wildcardClass12 = enhancer5.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass12);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        enhancer14.setClassLoader(classLoader19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = enhancer14.getStrategy();
        java.lang.Class<?> wildcardClass22 = enhancer14.getClass();
        boolean boolean23 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass22);
        boolean boolean24 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass22);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass22);
        enhancer0.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader29 = enhancer28.getClassLoader();
        enhancer28.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader32 = enhancer28.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader34 = enhancer33.getClassLoader();
        enhancer33.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader37 = enhancer33.getClassLoader();
        org.mockito.cglib.proxy.Callback callback38 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray39 = new org.mockito.cglib.proxy.Callback[] { callback38 };
        enhancer33.setCallbacks(callbackArray39);
        enhancer28.setCallbacks(callbackArray39);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = enhancer28.getStrategy();
        enhancer0.setStrategy(generatorStrategy42);
        boolean boolean44 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader46 = enhancer45.getClassLoader();
        enhancer45.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader50 = enhancer49.getClassLoader();
        enhancer45.setClassLoader(classLoader50);
        enhancer45.setUseCache(false);
        java.lang.ClassLoader classLoader54 = enhancer45.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = enhancer45.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = enhancer45.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = enhancer45.getNamingPolicy();
        boolean boolean58 = enhancer45.getUseCache();
        enhancer45.setAttemptLoad(true);
        enhancer45.setInterceptDuringConstruction(true);
        java.lang.Class<?> wildcardClass63 = enhancer45.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass63);
        enhancer0.setAttemptLoad(false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj67 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(callbackArray39);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test09929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09929");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader2 = enhancer1.getClassLoader();
        enhancer1.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        enhancer1.setClassLoader(classLoader6);
        enhancer0.setClassLoader(classLoader6);
        java.lang.ClassLoader classLoader9 = enhancer0.getClassLoader();
        enhancer0.setUseFactory(true);
        enhancer0.setUseCache(false);
        enhancer0.setSerialVersionUID((java.lang.Long) 1L);
        enhancer0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer21.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader25 = enhancer21.getClassLoader();
        java.lang.Class class26 = null;
        enhancer21.setSuperclass(class26);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = enhancer21.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer29.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader33 = enhancer29.getClassLoader();
        java.lang.Class class34 = null;
        enhancer29.setSuperclass(class34);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = enhancer36.getStrategy();
        enhancer29.setStrategy(generatorStrategy38);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = enhancer29.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = enhancer29.getNamingPolicy();
        enhancer21.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.core.Predicate predicate43 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str44 = namingPolicy18.getClassName("", "hi!", (java.lang.Object) enhancer21, predicate43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(namingPolicy41);
    }

    @Test
    public void test09930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09930");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer9.setClassLoader(classLoader14);
        enhancer9.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer9.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer20.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader24 = enhancer20.getClassLoader();
        java.lang.Class class25 = null;
        enhancer20.setSuperclass(class25);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader28 = enhancer27.getClassLoader();
        enhancer27.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer27.setClassLoader(classLoader32);
        enhancer27.setUseCache(false);
        java.lang.ClassLoader classLoader36 = enhancer27.getClassLoader();
        enhancer20.setClassLoader(classLoader36);
        boolean boolean38 = namingPolicy18.equals((java.lang.Object) enhancer20);
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader40 = enhancer39.getClassLoader();
        enhancer39.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader43 = enhancer39.getClassLoader();
        java.lang.Class class44 = null;
        enhancer39.setSuperclass(class44);
        java.lang.ClassLoader classLoader46 = enhancer39.getClassLoader();
        boolean boolean47 = enhancer39.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        enhancer48.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader52 = enhancer48.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer53 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader54 = enhancer53.getClassLoader();
        enhancer53.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader57 = enhancer53.getClassLoader();
        org.mockito.cglib.proxy.Callback callback58 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray59 = new org.mockito.cglib.proxy.Callback[] { callback58 };
        enhancer53.setCallbacks(callbackArray59);
        enhancer48.setCallbacks(callbackArray59);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = enhancer48.getStrategy();
        enhancer39.setStrategy(generatorStrategy62);
        org.mockito.cglib.proxy.Enhancer enhancer64 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader65 = enhancer64.getClassLoader();
        enhancer64.setUseCache(true);
        boolean boolean68 = enhancer64.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer69 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader70 = enhancer69.getClassLoader();
        enhancer69.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader73 = enhancer69.getClassLoader();
        java.lang.Class class74 = null;
        enhancer69.setSuperclass(class74);
        org.mockito.cglib.proxy.Enhancer enhancer76 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader77 = enhancer76.getClassLoader();
        enhancer76.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer80 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader81 = enhancer80.getClassLoader();
        enhancer76.setClassLoader(classLoader81);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = enhancer76.getStrategy();
        java.lang.Class<?> wildcardClass84 = enhancer76.getClass();
        enhancer69.setSuperclass((java.lang.Class) wildcardClass84);
        enhancer64.setSuperclass((java.lang.Class) wildcardClass84);
        boolean boolean87 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass84);
        boolean boolean88 = generatorStrategy62.equals((java.lang.Object) wildcardClass84);
        enhancer20.setSuperclass((java.lang.Class) wildcardClass84);
        boolean boolean90 = enhancer20.getAttemptLoad();
        enhancer20.setUseCache(false);
        enhancer20.setUseCache(true);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertNotNull(callbackArray59);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(classLoader73);
        org.junit.Assert.assertNotNull(classLoader77);
        org.junit.Assert.assertNotNull(classLoader81);
        org.junit.Assert.assertNotNull(generatorStrategy83);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test09931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09931");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer4.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        enhancer4.setClassLoader(classLoader9);
        enhancer4.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer13.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        enhancer13.setClassLoader(classLoader18);
        enhancer13.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = enhancer13.getNamingPolicy();
        enhancer4.setNamingPolicy(namingPolicy22);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        enhancer24.setUseCache(true);
        boolean boolean28 = enhancer24.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer29.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader33 = enhancer29.getClassLoader();
        java.lang.Class class34 = null;
        enhancer29.setSuperclass(class34);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        enhancer36.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        enhancer36.setClassLoader(classLoader41);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = enhancer36.getStrategy();
        java.lang.Class<?> wildcardClass44 = enhancer36.getClass();
        enhancer29.setSuperclass((java.lang.Class) wildcardClass44);
        enhancer24.setSuperclass((java.lang.Class) wildcardClass44);
        boolean boolean47 = namingPolicy22.equals((java.lang.Object) enhancer24);
        enhancer0.setNamingPolicy(namingPolicy22);
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader50 = enhancer49.getClassLoader();
        enhancer49.setInterceptDuringConstruction(true);
        boolean boolean53 = enhancer49.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = enhancer49.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        enhancer55.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader59 = enhancer55.getClassLoader();
        org.mockito.cglib.proxy.Callback callback60 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray61 = new org.mockito.cglib.proxy.Callback[] { callback60 };
        enhancer55.setCallbacks(callbackArray61);
        enhancer49.setCallbacks(callbackArray61);
        enhancer0.setCallbacks(callbackArray61);
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer66 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader67 = enhancer66.getClassLoader();
        enhancer66.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader70 = enhancer66.getClassLoader();
        java.lang.Class class71 = null;
        enhancer66.setSuperclass(class71);
        org.mockito.cglib.proxy.Enhancer enhancer73 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader74 = enhancer73.getClassLoader();
        enhancer73.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer77 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader78 = enhancer77.getClassLoader();
        enhancer73.setClassLoader(classLoader78);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy80 = enhancer73.getStrategy();
        java.lang.Class<?> wildcardClass81 = enhancer73.getClass();
        enhancer66.setSuperclass((java.lang.Class) wildcardClass81);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = enhancer66.getStrategy();
        boolean boolean84 = namingPolicy65.equals((java.lang.Object) enhancer66);
        enhancer66.setSerialVersionUID((java.lang.Long) (-1L));
        java.lang.Class<?> wildcardClass87 = enhancer66.getClass();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(callbackArray61);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertNotNull(classLoader67);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(classLoader78);
        org.junit.Assert.assertNotNull(generatorStrategy80);
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertNotNull(generatorStrategy83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test09932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09932");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer9.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer9.getStrategy();
        enhancer0.setStrategy(generatorStrategy16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = enhancer0.getStrategy();
        enhancer0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = null;
        enhancer0.setNamingPolicy(namingPolicy21);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer25.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader29 = enhancer25.getClassLoader();
        java.lang.Class class30 = null;
        enhancer25.setSuperclass(class30);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        enhancer32.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader36 = enhancer32.getClassLoader();
        java.lang.Class class37 = null;
        enhancer32.setSuperclass(class37);
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader40 = enhancer39.getClassLoader();
        enhancer39.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader44 = enhancer43.getClassLoader();
        enhancer39.setClassLoader(classLoader44);
        enhancer39.setUseCache(false);
        java.lang.ClassLoader classLoader48 = enhancer39.getClassLoader();
        enhancer32.setClassLoader(classLoader48);
        enhancer25.setClassLoader(classLoader48);
        org.mockito.cglib.proxy.Enhancer enhancer51 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader52 = enhancer51.getClassLoader();
        enhancer51.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        enhancer51.setClassLoader(classLoader56);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = enhancer51.getStrategy();
        java.lang.Class<?> wildcardClass59 = enhancer51.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer60 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader61 = enhancer60.getClassLoader();
        enhancer60.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader64 = enhancer60.getClassLoader();
        java.lang.Class class65 = null;
        enhancer60.setSuperclass(class65);
        org.mockito.cglib.proxy.Enhancer enhancer67 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader68 = enhancer67.getClassLoader();
        enhancer67.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer71 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader72 = enhancer71.getClassLoader();
        enhancer67.setClassLoader(classLoader72);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = enhancer67.getStrategy();
        java.lang.Class<?> wildcardClass75 = enhancer67.getClass();
        enhancer60.setSuperclass((java.lang.Class) wildcardClass75);
        java.lang.Class[] classArray77 = new java.lang.Class[] { wildcardClass59, wildcardClass75 };
        enhancer25.setInterfaces(classArray77);
        enhancer0.setInterfaces(classArray77);
        java.lang.ClassLoader classLoader80 = enhancer0.getClassLoader();
        boolean boolean81 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Callback callback82 = null;
        enhancer0.setCallback(callback82);
        java.lang.Class<?> wildcardClass84 = enhancer0.getClass();
        org.mockito.cglib.proxy.Callback callback85 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj86 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass84, callback85);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(generatorStrategy58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertNotNull(classLoader68);
        org.junit.Assert.assertNotNull(classLoader72);
        org.junit.Assert.assertNotNull(generatorStrategy74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(classLoader80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test09933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09933");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer7.setClassLoader(classLoader12);
        enhancer7.setUseCache(false);
        java.lang.ClassLoader classLoader16 = enhancer7.getClassLoader();
        enhancer0.setClassLoader(classLoader16);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        enhancer18.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader22 = enhancer18.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer18.getStrategy();
        enhancer0.setStrategy(generatorStrategy23);
        boolean boolean25 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        enhancer26.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader31 = enhancer30.getClassLoader();
        enhancer26.setClassLoader(classLoader31);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = enhancer26.getStrategy();
        java.lang.Class<?> wildcardClass34 = enhancer26.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        enhancer35.setUseCache(true);
        boolean boolean39 = enhancer35.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        enhancer40.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader44 = enhancer40.getClassLoader();
        java.lang.Class class45 = null;
        enhancer40.setSuperclass(class45);
        org.mockito.cglib.proxy.Enhancer enhancer47 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader48 = enhancer47.getClassLoader();
        enhancer47.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer51 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader52 = enhancer51.getClassLoader();
        enhancer47.setClassLoader(classLoader52);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = enhancer47.getStrategy();
        java.lang.Class<?> wildcardClass55 = enhancer47.getClass();
        enhancer40.setSuperclass((java.lang.Class) wildcardClass55);
        enhancer35.setSuperclass((java.lang.Class) wildcardClass55);
        java.lang.Class[] classArray58 = new java.lang.Class[] { wildcardClass34, wildcardClass55 };
        enhancer0.setInterfaces(classArray58);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = enhancer0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Callback callback64 = null;
        enhancer0.setCallback(callback64);
        java.lang.ClassLoader classLoader66 = null;
        enhancer0.setClassLoader(classLoader66);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertNotNull(generatorStrategy63);
    }

    @Test
    public void test09934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09934");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = enhancer0.getNamingPolicy();
        boolean boolean10 = enhancer0.getUseCache();
        boolean boolean11 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Callback callback12 = null;
        enhancer0.setCallback(callback12);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        enhancer14.setClassLoader(classLoader19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = enhancer14.getStrategy();
        enhancer14.setInterceptDuringConstruction(true);
        enhancer14.setAttemptLoad(false);
        enhancer14.setSerialVersionUID((java.lang.Long) 1L);
        java.lang.ClassLoader classLoader28 = enhancer14.getClassLoader();
        boolean boolean29 = enhancer14.getUseCache();
        java.lang.Class<?> wildcardClass30 = enhancer14.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass30);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = enhancer0.getStrategy();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(generatorStrategy32);
    }

    @Test
    public void test09935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09935");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer9.setClassLoader(classLoader14);
        enhancer9.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer9.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer20.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader24 = enhancer20.getClassLoader();
        java.lang.Class class25 = null;
        enhancer20.setSuperclass(class25);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader28 = enhancer27.getClassLoader();
        enhancer27.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer27.setClassLoader(classLoader32);
        enhancer27.setUseCache(false);
        java.lang.ClassLoader classLoader36 = enhancer27.getClassLoader();
        enhancer20.setClassLoader(classLoader36);
        boolean boolean38 = namingPolicy18.equals((java.lang.Object) enhancer20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = enhancer20.getStrategy();
        boolean boolean40 = enhancer20.getUseCache();
        org.mockito.cglib.proxy.Callback callback41 = null;
        enhancer20.setCallback(callback41);
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader44 = enhancer43.getClassLoader();
        enhancer43.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader47 = enhancer43.getClassLoader();
        java.lang.Class class48 = null;
        enhancer43.setSuperclass(class48);
        org.mockito.cglib.proxy.Enhancer enhancer50 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader51 = enhancer50.getClassLoader();
        enhancer50.setInterceptDuringConstruction(true);
        boolean boolean54 = enhancer50.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = enhancer50.getStrategy();
        enhancer43.setStrategy(generatorStrategy55);
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader58 = enhancer57.getClassLoader();
        enhancer57.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader61 = enhancer57.getClassLoader();
        java.lang.Class class62 = null;
        enhancer57.setSuperclass(class62);
        org.mockito.cglib.proxy.Enhancer enhancer64 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader65 = enhancer64.getClassLoader();
        enhancer64.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer68 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader69 = enhancer68.getClassLoader();
        enhancer64.setClassLoader(classLoader69);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = enhancer64.getStrategy();
        java.lang.Class<?> wildcardClass72 = enhancer64.getClass();
        enhancer57.setSuperclass((java.lang.Class) wildcardClass72);
        enhancer43.setSuperclass((java.lang.Class) wildcardClass72);
        org.mockito.cglib.proxy.Enhancer enhancer75 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader76 = enhancer75.getClassLoader();
        enhancer75.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader79 = enhancer75.getClassLoader();
        java.lang.Class class80 = null;
        enhancer75.setSuperclass(class80);
        org.mockito.cglib.proxy.Enhancer enhancer82 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader83 = enhancer82.getClassLoader();
        enhancer82.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer86 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader87 = enhancer86.getClassLoader();
        enhancer82.setClassLoader(classLoader87);
        enhancer82.setUseCache(false);
        java.lang.ClassLoader classLoader91 = enhancer82.getClassLoader();
        enhancer75.setClassLoader(classLoader91);
        enhancer43.setClassLoader(classLoader91);
        enhancer20.setClassLoader(classLoader91);
        enhancer20.setSerialVersionUID((java.lang.Long) (-1L));
        enhancer20.setInterceptDuringConstruction(true);
        boolean boolean99 = enhancer20.getUseCache();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(classLoader69);
        org.junit.Assert.assertNotNull(generatorStrategy71);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertNotNull(classLoader79);
        org.junit.Assert.assertNotNull(classLoader83);
        org.junit.Assert.assertNotNull(classLoader87);
        org.junit.Assert.assertNotNull(classLoader91);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test09936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09936");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer7.getStrategy();
        enhancer0.setStrategy(generatorStrategy9);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter11 = null;
        enhancer0.setCallbackFilter(callbackFilter11);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = enhancer13.getStrategy();
        enhancer13.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader18 = enhancer13.getClassLoader();
        enhancer13.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        enhancer21.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback24 = null;
        enhancer21.setCallback(callback24);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter26 = null;
        enhancer21.setCallbackFilter(callbackFilter26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = enhancer21.getStrategy();
        boolean boolean29 = enhancer21.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader31 = enhancer30.getClassLoader();
        enhancer30.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader34 = enhancer30.getClassLoader();
        java.lang.Class class35 = null;
        enhancer30.setSuperclass(class35);
        enhancer30.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader40 = enhancer39.getClassLoader();
        enhancer39.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader44 = enhancer43.getClassLoader();
        enhancer43.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer47 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader48 = enhancer47.getClassLoader();
        enhancer47.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer51 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader52 = enhancer51.getClassLoader();
        enhancer47.setClassLoader(classLoader52);
        enhancer47.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader57 = enhancer56.getClassLoader();
        enhancer56.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer60 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader61 = enhancer60.getClassLoader();
        enhancer56.setClassLoader(classLoader61);
        enhancer56.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = enhancer56.getNamingPolicy();
        enhancer47.setNamingPolicy(namingPolicy65);
        org.mockito.cglib.proxy.Enhancer enhancer67 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader68 = enhancer67.getClassLoader();
        enhancer67.setUseCache(true);
        boolean boolean71 = enhancer67.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer72 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader73 = enhancer72.getClassLoader();
        enhancer72.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader76 = enhancer72.getClassLoader();
        java.lang.Class class77 = null;
        enhancer72.setSuperclass(class77);
        org.mockito.cglib.proxy.Enhancer enhancer79 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader80 = enhancer79.getClassLoader();
        enhancer79.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer83 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader84 = enhancer83.getClassLoader();
        enhancer79.setClassLoader(classLoader84);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy86 = enhancer79.getStrategy();
        java.lang.Class<?> wildcardClass87 = enhancer79.getClass();
        enhancer72.setSuperclass((java.lang.Class) wildcardClass87);
        enhancer67.setSuperclass((java.lang.Class) wildcardClass87);
        boolean boolean90 = namingPolicy65.equals((java.lang.Object) enhancer67);
        enhancer43.setNamingPolicy(namingPolicy65);
        enhancer39.setNamingPolicy(namingPolicy65);
        enhancer30.setNamingPolicy(namingPolicy65);
        enhancer21.setNamingPolicy(namingPolicy65);
        org.mockito.cglib.core.NamingPolicy namingPolicy95 = enhancer21.getNamingPolicy();
        enhancer13.setNamingPolicy(namingPolicy95);
        enhancer0.setNamingPolicy(namingPolicy95);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertNotNull(classLoader68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(classLoader73);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertNotNull(classLoader80);
        org.junit.Assert.assertNotNull(classLoader84);
        org.junit.Assert.assertNotNull(generatorStrategy86);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(namingPolicy95);
    }

    @Test
    public void test09937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09937");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer9.setClassLoader(classLoader14);
        enhancer9.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer9.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy18);
        enhancer0.setInterceptDuringConstruction(true);
        enhancer0.setUseCache(false);
        enhancer0.setUseCache(false);
        boolean boolean26 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Callback callback27 = null;
        enhancer0.setCallback(callback27);
        org.mockito.cglib.proxy.Callback callback29 = null;
        enhancer0.setCallback(callback29);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter31 = null;
        enhancer0.setCallbackFilter(callbackFilter31);
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader34 = enhancer33.getClassLoader();
        enhancer33.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        enhancer33.setClassLoader(classLoader38);
        enhancer33.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = enhancer33.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader44 = enhancer43.getClassLoader();
        enhancer43.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader47 = enhancer43.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        enhancer48.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader52 = enhancer48.getClassLoader();
        org.mockito.cglib.proxy.Callback callback53 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray54 = new org.mockito.cglib.proxy.Callback[] { callback53 };
        enhancer48.setCallbacks(callbackArray54);
        enhancer43.setCallbacks(callbackArray54);
        enhancer33.setCallbacks(callbackArray54);
        enhancer0.setCallbacks(callbackArray54);
        org.mockito.cglib.proxy.Callback callback59 = null;
        enhancer0.setCallback(callback59);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter63 = null;
        enhancer0.setCallbackFilter(callbackFilter63);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = enhancer0.getStrategy();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(callbackArray54);
        org.junit.Assert.assertNotNull(generatorStrategy65);
    }

    @Test
    public void test09938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09938");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseCache(true);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter4 = null;
        enhancer0.setCallbackFilter(callbackFilter4);
        java.lang.ClassLoader classLoader6 = enhancer0.getClassLoader();
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        java.lang.ClassLoader classLoader9 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Callback callback10 = null;
        enhancer0.setCallback(callback10);
        enhancer0.setInterceptDuringConstruction(true);
        boolean boolean14 = enhancer0.getAttemptLoad();
        boolean boolean15 = enhancer0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class16 = enhancer0.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: createClass does not accept callbacks");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test09939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09939");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader11 = enhancer10.getClassLoader();
        enhancer10.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer10.setClassLoader(classLoader15);
        enhancer9.setClassLoader(classLoader15);
        enhancer0.setClassLoader(classLoader15);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter19 = null;
        enhancer0.setCallbackFilter(callbackFilter19);
        boolean boolean21 = enhancer0.getAttemptLoad();
        java.lang.Class<?> wildcardClass22 = enhancer0.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader24 = enhancer23.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter25 = null;
        enhancer23.setCallbackFilter(callbackFilter25);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter27 = null;
        enhancer23.setCallbackFilter(callbackFilter27);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter29 = null;
        enhancer23.setCallbackFilter(callbackFilter29);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        enhancer31.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = enhancer31.getStrategy();
        enhancer31.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        enhancer37.setInterceptDuringConstruction(true);
        boolean boolean41 = enhancer37.getUseCache();
        boolean boolean42 = enhancer37.getAttemptLoad();
        enhancer37.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader46 = enhancer45.getClassLoader();
        enhancer45.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader50 = enhancer49.getClassLoader();
        enhancer45.setClassLoader(classLoader50);
        enhancer45.setUseCache(false);
        java.lang.ClassLoader classLoader54 = enhancer45.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        enhancer55.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader59 = enhancer55.getClassLoader();
        org.mockito.cglib.proxy.Callback callback60 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray61 = new org.mockito.cglib.proxy.Callback[] { callback60 };
        enhancer55.setCallbacks(callbackArray61);
        enhancer55.setSerialVersionUID((java.lang.Long) 0L);
        enhancer55.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.proxy.Enhancer enhancer67 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader68 = enhancer67.getClassLoader();
        enhancer67.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader71 = enhancer67.getClassLoader();
        org.mockito.cglib.proxy.Callback callback72 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray73 = new org.mockito.cglib.proxy.Callback[] { callback72 };
        enhancer67.setCallbacks(callbackArray73);
        org.mockito.cglib.proxy.Enhancer enhancer75 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader76 = enhancer75.getClassLoader();
        enhancer75.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader79 = enhancer75.getClassLoader();
        java.lang.Class class80 = null;
        enhancer75.setSuperclass(class80);
        java.lang.Class<?> wildcardClass82 = enhancer75.getClass();
        boolean boolean83 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass82);
        enhancer67.setSuperclass((java.lang.Class) wildcardClass82);
        enhancer55.setSuperclass((java.lang.Class) wildcardClass82);
        java.lang.Class[] classArray86 = new java.lang.Class[] { wildcardClass82 };
        enhancer45.setInterfaces(classArray86);
        enhancer37.setInterfaces(classArray86);
        enhancer31.setInterfaces(classArray86);
        enhancer23.setInterfaces(classArray86);
        org.mockito.cglib.proxy.Callback callback91 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj92 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass22, classArray86, callback91);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(callbackArray61);
        org.junit.Assert.assertNotNull(classLoader68);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertNotNull(callbackArray73);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertNotNull(classLoader79);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(classArray86);
    }

    @Test
    public void test09940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09940");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        boolean boolean2 = enhancer0.getAttemptLoad();
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        enhancer5.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader9 = enhancer5.getClassLoader();
        java.lang.Class class10 = null;
        enhancer5.setSuperclass(class10);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        enhancer12.setInterceptDuringConstruction(true);
        boolean boolean16 = enhancer12.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = enhancer12.getStrategy();
        enhancer5.setStrategy(generatorStrategy17);
        enhancer0.setStrategy(generatorStrategy17);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer20.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader24 = enhancer20.getClassLoader();
        java.lang.Class class25 = null;
        enhancer20.setSuperclass(class25);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader28 = enhancer27.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = enhancer27.getStrategy();
        enhancer20.setStrategy(generatorStrategy29);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = enhancer31.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        enhancer34.setUseCache(true);
        boolean boolean38 = enhancer34.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader40 = enhancer39.getClassLoader();
        enhancer39.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader43 = enhancer39.getClassLoader();
        java.lang.Class class44 = null;
        enhancer39.setSuperclass(class44);
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader47 = enhancer46.getClassLoader();
        enhancer46.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer50 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader51 = enhancer50.getClassLoader();
        enhancer46.setClassLoader(classLoader51);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = enhancer46.getStrategy();
        java.lang.Class<?> wildcardClass54 = enhancer46.getClass();
        enhancer39.setSuperclass((java.lang.Class) wildcardClass54);
        enhancer34.setSuperclass((java.lang.Class) wildcardClass54);
        enhancer31.setSuperclass((java.lang.Class) wildcardClass54);
        org.mockito.cglib.proxy.Callback callback58 = null;
        enhancer31.setCallback(callback58);
        org.mockito.cglib.proxy.Enhancer enhancer60 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader61 = enhancer60.getClassLoader();
        enhancer60.setInterceptDuringConstruction(true);
        boolean boolean64 = enhancer60.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = enhancer60.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer66 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader67 = enhancer66.getClassLoader();
        enhancer66.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader70 = enhancer66.getClassLoader();
        org.mockito.cglib.proxy.Callback callback71 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray72 = new org.mockito.cglib.proxy.Callback[] { callback71 };
        enhancer66.setCallbacks(callbackArray72);
        enhancer60.setCallbacks(callbackArray72);
        enhancer31.setCallbacks(callbackArray72);
        enhancer20.setCallbacks(callbackArray72);
        enhancer0.setCallbacks(callbackArray72);
        org.mockito.cglib.proxy.Callback callback78 = null;
        enhancer0.setCallback(callback78);
        org.mockito.asm.ClassVisitor classVisitor80 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(generatorStrategy17);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertNotNull(classLoader67);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(callbackArray72);
    }

    @Test
    public void test09941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09941");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer9.setClassLoader(classLoader14);
        enhancer9.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer9.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer20.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader24 = enhancer20.getClassLoader();
        java.lang.Class class25 = null;
        enhancer20.setSuperclass(class25);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader28 = enhancer27.getClassLoader();
        enhancer27.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer27.setClassLoader(classLoader32);
        enhancer27.setUseCache(false);
        java.lang.ClassLoader classLoader36 = enhancer27.getClassLoader();
        enhancer20.setClassLoader(classLoader36);
        boolean boolean38 = namingPolicy18.equals((java.lang.Object) enhancer20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = enhancer20.getStrategy();
        boolean boolean40 = enhancer20.getUseCache();
        java.lang.ClassLoader classLoader41 = enhancer20.getClassLoader();
        enhancer20.setUseFactory(true);
        boolean boolean44 = enhancer20.getUseCache();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test09942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09942");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = enhancer0.getNamingPolicy();
        boolean boolean10 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer11.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader15 = enhancer11.getClassLoader();
        java.lang.Class class16 = null;
        enhancer11.setSuperclass(class16);
        java.lang.ClassLoader classLoader18 = enhancer11.getClassLoader();
        enhancer0.setClassLoader(classLoader18);
        enhancer0.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer22.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        enhancer22.setClassLoader(classLoader27);
        enhancer22.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer31.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        enhancer31.setClassLoader(classLoader36);
        enhancer31.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = enhancer31.getNamingPolicy();
        enhancer22.setNamingPolicy(namingPolicy40);
        java.lang.Class<?> wildcardClass42 = namingPolicy40.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass42);
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = enhancer0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor45 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(namingPolicy44);
    }

    @Test
    public void test09943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09943");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader7 = enhancer6.getClassLoader();
        enhancer6.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader11 = enhancer10.getClassLoader();
        enhancer10.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer10.setClassLoader(classLoader15);
        enhancer10.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader20 = enhancer19.getClassLoader();
        enhancer19.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader24 = enhancer23.getClassLoader();
        enhancer19.setClassLoader(classLoader24);
        enhancer19.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = enhancer19.getNamingPolicy();
        enhancer10.setNamingPolicy(namingPolicy28);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader31 = enhancer30.getClassLoader();
        enhancer30.setUseCache(true);
        boolean boolean34 = enhancer30.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        enhancer35.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader39 = enhancer35.getClassLoader();
        java.lang.Class class40 = null;
        enhancer35.setSuperclass(class40);
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader43 = enhancer42.getClassLoader();
        enhancer42.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader47 = enhancer46.getClassLoader();
        enhancer42.setClassLoader(classLoader47);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = enhancer42.getStrategy();
        java.lang.Class<?> wildcardClass50 = enhancer42.getClass();
        enhancer35.setSuperclass((java.lang.Class) wildcardClass50);
        enhancer30.setSuperclass((java.lang.Class) wildcardClass50);
        boolean boolean53 = namingPolicy28.equals((java.lang.Object) enhancer30);
        enhancer6.setNamingPolicy(namingPolicy28);
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        enhancer55.setInterceptDuringConstruction(true);
        boolean boolean59 = enhancer55.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = enhancer55.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer61 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader62 = enhancer61.getClassLoader();
        enhancer61.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader65 = enhancer61.getClassLoader();
        org.mockito.cglib.proxy.Callback callback66 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray67 = new org.mockito.cglib.proxy.Callback[] { callback66 };
        enhancer61.setCallbacks(callbackArray67);
        enhancer55.setCallbacks(callbackArray67);
        enhancer6.setCallbacks(callbackArray67);
        org.mockito.cglib.proxy.Enhancer enhancer71 = new org.mockito.cglib.proxy.Enhancer();
        enhancer71.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback74 = null;
        enhancer71.setCallback(callback74);
        enhancer71.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = enhancer71.getNamingPolicy();
        enhancer6.setNamingPolicy(namingPolicy78);
        boolean boolean80 = generatorStrategy5.equals((java.lang.Object) enhancer6);
        org.mockito.cglib.proxy.Callback callback81 = null;
        enhancer6.setCallback(callback81);
        enhancer6.setSerialVersionUID((java.lang.Long) (-1L));
        enhancer6.setUseFactory(true);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(callbackArray67);
        org.junit.Assert.assertNotNull(namingPolicy78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test09944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09944");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Callback callback5 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray6 = new org.mockito.cglib.proxy.Callback[] { callback5 };
        enhancer0.setCallbacks(callbackArray6);
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer11.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader15 = enhancer11.getClassLoader();
        java.lang.Class class16 = null;
        enhancer11.setSuperclass(class16);
        java.lang.Class<?> wildcardClass18 = enhancer11.getClass();
        boolean boolean19 = generatorStrategy10.equals((java.lang.Object) wildcardClass18);
        boolean boolean21 = generatorStrategy10.equals((java.lang.Object) '4');
        boolean boolean23 = generatorStrategy10.equals((java.lang.Object) "");
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        enhancer24.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader28 = enhancer24.getClassLoader();
        java.lang.Class class29 = null;
        enhancer24.setSuperclass(class29);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer31.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        enhancer31.setClassLoader(classLoader36);
        enhancer31.setUseCache(false);
        java.lang.ClassLoader classLoader40 = enhancer31.getClassLoader();
        enhancer24.setClassLoader(classLoader40);
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader43 = enhancer42.getClassLoader();
        enhancer42.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader46 = enhancer42.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = enhancer42.getStrategy();
        enhancer24.setStrategy(generatorStrategy47);
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader50 = enhancer49.getClassLoader();
        enhancer49.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer53 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader54 = enhancer53.getClassLoader();
        enhancer49.setClassLoader(classLoader54);
        enhancer49.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = enhancer49.getNamingPolicy();
        enhancer24.setNamingPolicy(namingPolicy58);
        org.mockito.cglib.proxy.Enhancer enhancer60 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader61 = enhancer60.getClassLoader();
        enhancer60.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader64 = enhancer60.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer65 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader66 = enhancer65.getClassLoader();
        enhancer65.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader69 = enhancer65.getClassLoader();
        org.mockito.cglib.proxy.Callback callback70 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray71 = new org.mockito.cglib.proxy.Callback[] { callback70 };
        enhancer65.setCallbacks(callbackArray71);
        enhancer60.setCallbacks(callbackArray71);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = enhancer60.getStrategy();
        enhancer24.setStrategy(generatorStrategy74);
        boolean boolean76 = generatorStrategy10.equals((java.lang.Object) enhancer24);
        boolean boolean77 = enhancer24.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = enhancer24.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy79 = enhancer24.getStrategy();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter80 = null;
        enhancer24.setCallbackFilter(callbackFilter80);
        org.mockito.cglib.proxy.Callback callback82 = null;
        enhancer24.setCallback(callback82);
        boolean boolean84 = enhancer24.getUseCache();
        java.lang.Class<?> wildcardClass85 = enhancer24.getClass();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(callbackArray6);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertNotNull(classLoader69);
        org.junit.Assert.assertNotNull(callbackArray71);
        org.junit.Assert.assertNotNull(generatorStrategy74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(namingPolicy78);
        org.junit.Assert.assertNotNull(generatorStrategy79);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test09945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09945");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader2 = enhancer1.getClassLoader();
        enhancer1.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        enhancer1.setClassLoader(classLoader6);
        enhancer0.setClassLoader(classLoader6);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader13 = enhancer9.getClassLoader();
        enhancer0.setClassLoader(classLoader13);
        boolean boolean15 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        enhancer16.setInterceptDuringConstruction(true);
        boolean boolean20 = enhancer16.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = enhancer16.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer22.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader26 = enhancer22.getClassLoader();
        org.mockito.cglib.proxy.Callback callback27 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray28 = new org.mockito.cglib.proxy.Callback[] { callback27 };
        enhancer22.setCallbacks(callbackArray28);
        enhancer16.setCallbacks(callbackArray28);
        enhancer0.setCallbacks(callbackArray28);
        enhancer0.setUseFactory(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = enhancer0.getStrategy();
        boolean boolean35 = enhancer0.getUseCache();
        java.lang.ClassLoader classLoader36 = enhancer0.getClassLoader();
        boolean boolean37 = enhancer0.getAttemptLoad();
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(callbackArray28);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test09946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09946");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer4.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        enhancer8.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        enhancer8.setClassLoader(classLoader13);
        enhancer8.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        enhancer17.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer17.setClassLoader(classLoader22);
        enhancer17.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = enhancer17.getNamingPolicy();
        enhancer8.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader29 = enhancer28.getClassLoader();
        enhancer28.setUseCache(true);
        boolean boolean32 = enhancer28.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader34 = enhancer33.getClassLoader();
        enhancer33.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader37 = enhancer33.getClassLoader();
        java.lang.Class class38 = null;
        enhancer33.setSuperclass(class38);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        enhancer40.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader45 = enhancer44.getClassLoader();
        enhancer40.setClassLoader(classLoader45);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = enhancer40.getStrategy();
        java.lang.Class<?> wildcardClass48 = enhancer40.getClass();
        enhancer33.setSuperclass((java.lang.Class) wildcardClass48);
        enhancer28.setSuperclass((java.lang.Class) wildcardClass48);
        boolean boolean51 = namingPolicy26.equals((java.lang.Object) enhancer28);
        enhancer4.setNamingPolicy(namingPolicy26);
        enhancer0.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter54 = null;
        enhancer0.setCallbackFilter(callbackFilter54);
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.proxy.Enhancer enhancer58 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader59 = enhancer58.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter60 = null;
        enhancer58.setCallbackFilter(callbackFilter60);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter62 = null;
        enhancer58.setCallbackFilter(callbackFilter62);
        enhancer58.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer66 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer67 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader68 = enhancer67.getClassLoader();
        enhancer67.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer71 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader72 = enhancer71.getClassLoader();
        enhancer67.setClassLoader(classLoader72);
        enhancer66.setClassLoader(classLoader72);
        org.mockito.cglib.proxy.Enhancer enhancer75 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader76 = enhancer75.getClassLoader();
        enhancer75.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader79 = enhancer75.getClassLoader();
        enhancer66.setClassLoader(classLoader79);
        boolean boolean81 = enhancer66.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer82 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader83 = enhancer82.getClassLoader();
        enhancer82.setInterceptDuringConstruction(true);
        boolean boolean86 = enhancer82.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy87 = enhancer82.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer88 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader89 = enhancer88.getClassLoader();
        enhancer88.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader92 = enhancer88.getClassLoader();
        org.mockito.cglib.proxy.Callback callback93 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray94 = new org.mockito.cglib.proxy.Callback[] { callback93 };
        enhancer88.setCallbacks(callbackArray94);
        enhancer82.setCallbacks(callbackArray94);
        enhancer66.setCallbacks(callbackArray94);
        enhancer58.setCallbacks(callbackArray94);
        enhancer0.setCallbacks(callbackArray94);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(classLoader68);
        org.junit.Assert.assertNotNull(classLoader72);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertNotNull(classLoader79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(classLoader83);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(generatorStrategy87);
        org.junit.Assert.assertNotNull(classLoader89);
        org.junit.Assert.assertNotNull(classLoader92);
        org.junit.Assert.assertNotNull(callbackArray94);
    }

    @Test
    public void test09947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09947");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer9.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer9.getStrategy();
        enhancer0.setStrategy(generatorStrategy16);
        java.lang.Object obj18 = null;
        boolean boolean19 = generatorStrategy16.equals(obj18);
        java.lang.Object obj20 = null;
        boolean boolean21 = generatorStrategy16.equals(obj20);
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer22.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader26 = enhancer22.getClassLoader();
        java.lang.Class class27 = null;
        enhancer22.setSuperclass(class27);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer29.setInterceptDuringConstruction(true);
        boolean boolean33 = enhancer29.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = enhancer29.getStrategy();
        enhancer22.setStrategy(generatorStrategy34);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        enhancer36.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader40 = enhancer36.getClassLoader();
        java.lang.Class class41 = null;
        enhancer36.setSuperclass(class41);
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader44 = enhancer43.getClassLoader();
        enhancer43.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer47 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader48 = enhancer47.getClassLoader();
        enhancer43.setClassLoader(classLoader48);
        enhancer43.setUseCache(false);
        java.lang.ClassLoader classLoader52 = enhancer43.getClassLoader();
        enhancer36.setClassLoader(classLoader52);
        boolean boolean54 = generatorStrategy34.equals((java.lang.Object) enhancer36);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = enhancer36.getNamingPolicy();
        boolean boolean56 = enhancer36.getAttemptLoad();
        boolean boolean57 = generatorStrategy16.equals((java.lang.Object) enhancer36);
        java.lang.ClassLoader classLoader58 = enhancer36.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = enhancer36.getNamingPolicy();
        org.mockito.cglib.proxy.Callback callback60 = null;
        enhancer36.setCallback(callback60);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(namingPolicy59);
    }

    @Test
    public void test09948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09948");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter2 = null;
        enhancer0.setCallbackFilter(callbackFilter2);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer4.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader8 = enhancer4.getClassLoader();
        org.mockito.cglib.proxy.Callback callback9 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray10 = new org.mockito.cglib.proxy.Callback[] { callback9 };
        enhancer4.setCallbacks(callbackArray10);
        enhancer4.setSerialVersionUID((java.lang.Long) 0L);
        enhancer4.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        enhancer16.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer16.setClassLoader(classLoader21);
        enhancer16.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer25.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer25.setClassLoader(classLoader30);
        enhancer25.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = enhancer25.getNamingPolicy();
        enhancer16.setNamingPolicy(namingPolicy34);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        enhancer36.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader40 = enhancer36.getClassLoader();
        java.lang.Class class41 = null;
        enhancer36.setSuperclass(class41);
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader44 = enhancer43.getClassLoader();
        enhancer43.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer47 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader48 = enhancer47.getClassLoader();
        enhancer43.setClassLoader(classLoader48);
        enhancer43.setUseCache(false);
        java.lang.ClassLoader classLoader52 = enhancer43.getClassLoader();
        enhancer36.setClassLoader(classLoader52);
        boolean boolean54 = namingPolicy34.equals((java.lang.Object) enhancer36);
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        enhancer55.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer59 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader60 = enhancer59.getClassLoader();
        enhancer55.setClassLoader(classLoader60);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = enhancer55.getStrategy();
        enhancer55.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer65 = new org.mockito.cglib.proxy.Enhancer();
        enhancer65.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = enhancer65.getStrategy();
        enhancer55.setStrategy(generatorStrategy68);
        enhancer36.setStrategy(generatorStrategy68);
        java.lang.ClassLoader classLoader71 = enhancer36.getClassLoader();
        enhancer4.setClassLoader(classLoader71);
        enhancer0.setClassLoader(classLoader71);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = enhancer0.getStrategy();
        enhancer0.setUseFactory(true);
        enhancer0.setUseFactory(true);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(callbackArray10);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(classLoader60);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertNotNull(generatorStrategy74);
    }

    @Test
    public void test09949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09949");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter7 = null;
        enhancer0.setCallbackFilter(callbackFilter7);
        enhancer0.setInterceptDuringConstruction(false);
        boolean boolean11 = enhancer0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer13.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        enhancer13.setClassLoader(classLoader18);
        enhancer13.setUseCache(false);
        java.lang.ClassLoader classLoader22 = enhancer13.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader24 = enhancer23.getClassLoader();
        enhancer23.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader27 = enhancer23.getClassLoader();
        org.mockito.cglib.proxy.Callback callback28 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray29 = new org.mockito.cglib.proxy.Callback[] { callback28 };
        enhancer23.setCallbacks(callbackArray29);
        enhancer23.setSerialVersionUID((java.lang.Long) 0L);
        enhancer23.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        enhancer35.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader39 = enhancer35.getClassLoader();
        org.mockito.cglib.proxy.Callback callback40 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray41 = new org.mockito.cglib.proxy.Callback[] { callback40 };
        enhancer35.setCallbacks(callbackArray41);
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader44 = enhancer43.getClassLoader();
        enhancer43.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader47 = enhancer43.getClassLoader();
        java.lang.Class class48 = null;
        enhancer43.setSuperclass(class48);
        java.lang.Class<?> wildcardClass50 = enhancer43.getClass();
        boolean boolean51 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass50);
        enhancer35.setSuperclass((java.lang.Class) wildcardClass50);
        enhancer23.setSuperclass((java.lang.Class) wildcardClass50);
        java.lang.Class[] classArray54 = new java.lang.Class[] { wildcardClass50 };
        enhancer13.setInterfaces(classArray54);
        enhancer0.setInterfaces(classArray54);
        enhancer0.setUseCache(true);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Callback callback61 = null;
        enhancer0.setCallback(callback61);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = enhancer0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor67 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(callbackArray29);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(callbackArray41);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertNotNull(namingPolicy66);
    }

    @Test
    public void test09950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09950");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseCache(true);
        boolean boolean4 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Callback callback5 = null;
        enhancer0.setCallback(callback5);
        java.lang.ClassLoader classLoader7 = enhancer0.getClassLoader();
        java.lang.ClassLoader classLoader8 = enhancer0.getClassLoader();
        enhancer0.setUseFactory(false);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertNotNull(classLoader8);
    }

    @Test
    public void test09951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09951");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Callback callback5 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray6 = new org.mockito.cglib.proxy.Callback[] { callback5 };
        enhancer0.setCallbacks(callbackArray6);
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader11 = enhancer10.getClassLoader();
        enhancer10.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer10.setClassLoader(classLoader15);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter17 = null;
        enhancer10.setCallbackFilter(callbackFilter17);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = enhancer10.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = enhancer0.getStrategy();
        java.lang.ClassLoader classLoader22 = enhancer0.getClassLoader();
        java.lang.Class<?> wildcardClass23 = enhancer0.getClass();
        boolean boolean24 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass23);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(callbackArray6);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test09952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09952");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer9.setClassLoader(classLoader14);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer9.getStrategy();
        enhancer0.setStrategy(generatorStrategy16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = enhancer0.getStrategy();
        enhancer0.setAttemptLoad(false);
        enhancer0.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader23 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Callback callback24 = null;
        enhancer0.setCallback(callback24);
        enhancer0.setUseFactory(false);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter28 = null;
        enhancer0.setCallbackFilter(callbackFilter28);
        java.lang.Class<?> wildcardClass30 = enhancer0.getClass();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test09953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09953");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Callback callback5 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray6 = new org.mockito.cglib.proxy.Callback[] { callback5 };
        enhancer0.setCallbacks(callbackArray6);
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        boolean boolean10 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer11.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        enhancer11.setClassLoader(classLoader16);
        enhancer11.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer20.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        enhancer20.setClassLoader(classLoader25);
        enhancer20.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = enhancer20.getNamingPolicy();
        enhancer11.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer31.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader35 = enhancer31.getClassLoader();
        java.lang.Class class36 = null;
        enhancer31.setSuperclass(class36);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader39 = enhancer38.getClassLoader();
        enhancer38.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader43 = enhancer42.getClassLoader();
        enhancer38.setClassLoader(classLoader43);
        enhancer38.setUseCache(false);
        java.lang.ClassLoader classLoader47 = enhancer38.getClassLoader();
        enhancer31.setClassLoader(classLoader47);
        boolean boolean49 = namingPolicy29.equals((java.lang.Object) enhancer31);
        enhancer0.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = enhancer0.getStrategy();
        enhancer0.setUseCache(true);
        boolean boolean54 = enhancer0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass56 = enhancer0.getClass();
        java.lang.Class[] classArray57 = null;
        java.util.List list58 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.getMethods((java.lang.Class) wildcardClass56, classArray57, list58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(callbackArray6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(generatorStrategy55);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test09954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09954");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Callback callback5 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray6 = new org.mockito.cglib.proxy.Callback[] { callback5 };
        enhancer0.setCallbacks(callbackArray6);
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        boolean boolean10 = enhancer0.getUseCache();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        enhancer13.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback16 = null;
        enhancer13.setCallback(callback16);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter18 = null;
        enhancer13.setCallbackFilter(callbackFilter18);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = enhancer13.getStrategy();
        boolean boolean21 = enhancer13.getUseCache();
        org.mockito.cglib.proxy.Callback callback22 = null;
        enhancer13.setCallback(callback22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = enhancer13.getNamingPolicy();
        java.lang.Object obj25 = null;
        boolean boolean26 = namingPolicy24.equals(obj25);
        enhancer0.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer29.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader34 = enhancer33.getClassLoader();
        enhancer29.setClassLoader(classLoader34);
        enhancer29.setUseCache(false);
        java.lang.ClassLoader classLoader38 = enhancer29.getClassLoader();
        boolean boolean39 = namingPolicy28.equals((java.lang.Object) classLoader38);
        java.lang.Object obj40 = null;
        boolean boolean41 = namingPolicy28.equals(obj40);
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader43 = enhancer42.getClassLoader();
        enhancer42.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader47 = enhancer46.getClassLoader();
        enhancer42.setClassLoader(classLoader47);
        enhancer42.setUseCache(false);
        java.lang.ClassLoader classLoader51 = enhancer42.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = enhancer42.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer53 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader54 = enhancer53.getClassLoader();
        boolean boolean55 = enhancer53.getAttemptLoad();
        enhancer53.setSerialVersionUID((java.lang.Long) 10L);
        boolean boolean58 = namingPolicy52.equals((java.lang.Object) 10L);
        org.mockito.cglib.proxy.Enhancer enhancer59 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader60 = enhancer59.getClassLoader();
        enhancer59.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer63 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader64 = enhancer63.getClassLoader();
        enhancer59.setClassLoader(classLoader64);
        enhancer59.setUseCache(false);
        java.lang.ClassLoader classLoader68 = enhancer59.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = enhancer59.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = enhancer59.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = enhancer59.getNamingPolicy();
        boolean boolean72 = namingPolicy52.equals((java.lang.Object) namingPolicy71);
        boolean boolean73 = namingPolicy28.equals((java.lang.Object) namingPolicy71);
        org.mockito.cglib.proxy.Enhancer enhancer76 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader77 = enhancer76.getClassLoader();
        enhancer76.setUseCache(true);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter80 = null;
        enhancer76.setCallbackFilter(callbackFilter80);
        java.lang.ClassLoader classLoader82 = enhancer76.getClassLoader();
        enhancer76.setSerialVersionUID((java.lang.Long) 0L);
        java.lang.ClassLoader classLoader85 = enhancer76.getClassLoader();
        org.mockito.cglib.proxy.Callback callback86 = null;
        enhancer76.setCallback(callback86);
        java.lang.Class<?> wildcardClass88 = enhancer76.getClass();
        org.mockito.cglib.core.Predicate predicate89 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str90 = namingPolicy28.getClassName("hi!", "", (java.lang.Object) enhancer76, predicate89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(callbackArray6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(classLoader60);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertNotNull(classLoader68);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertNotNull(namingPolicy71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(classLoader77);
        org.junit.Assert.assertNotNull(classLoader82);
        org.junit.Assert.assertNotNull(classLoader85);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test09955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09955");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        enhancer0.setInterceptDuringConstruction(true);
        boolean boolean5 = enhancer0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = enhancer0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor7 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(namingPolicy6);
    }

    @Test
    public void test09956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09956");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        boolean boolean11 = enhancer7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer7.getStrategy();
        enhancer0.setStrategy(generatorStrategy12);
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter18 = null;
        enhancer16.setCallbackFilter(callbackFilter18);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer20.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader24 = enhancer20.getClassLoader();
        org.mockito.cglib.proxy.Callback callback25 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray26 = new org.mockito.cglib.proxy.Callback[] { callback25 };
        enhancer20.setCallbacks(callbackArray26);
        enhancer20.setSerialVersionUID((java.lang.Long) 0L);
        enhancer20.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        enhancer32.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        enhancer32.setClassLoader(classLoader37);
        enhancer32.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader42 = enhancer41.getClassLoader();
        enhancer41.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader46 = enhancer45.getClassLoader();
        enhancer41.setClassLoader(classLoader46);
        enhancer41.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = enhancer41.getNamingPolicy();
        enhancer32.setNamingPolicy(namingPolicy50);
        org.mockito.cglib.proxy.Enhancer enhancer52 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader53 = enhancer52.getClassLoader();
        enhancer52.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader56 = enhancer52.getClassLoader();
        java.lang.Class class57 = null;
        enhancer52.setSuperclass(class57);
        org.mockito.cglib.proxy.Enhancer enhancer59 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader60 = enhancer59.getClassLoader();
        enhancer59.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer63 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader64 = enhancer63.getClassLoader();
        enhancer59.setClassLoader(classLoader64);
        enhancer59.setUseCache(false);
        java.lang.ClassLoader classLoader68 = enhancer59.getClassLoader();
        enhancer52.setClassLoader(classLoader68);
        boolean boolean70 = namingPolicy50.equals((java.lang.Object) enhancer52);
        org.mockito.cglib.proxy.Enhancer enhancer71 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader72 = enhancer71.getClassLoader();
        enhancer71.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer75 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader76 = enhancer75.getClassLoader();
        enhancer71.setClassLoader(classLoader76);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = enhancer71.getStrategy();
        enhancer71.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer81 = new org.mockito.cglib.proxy.Enhancer();
        enhancer81.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy84 = enhancer81.getStrategy();
        enhancer71.setStrategy(generatorStrategy84);
        enhancer52.setStrategy(generatorStrategy84);
        java.lang.ClassLoader classLoader87 = enhancer52.getClassLoader();
        enhancer20.setClassLoader(classLoader87);
        enhancer16.setClassLoader(classLoader87);
        enhancer0.setClassLoader(classLoader87);
        java.lang.ClassLoader classLoader91 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy92 = enhancer0.getStrategy();
        boolean boolean93 = enhancer0.getAttemptLoad();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(callbackArray26);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(classLoader60);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertNotNull(classLoader68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(classLoader72);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertNotNull(generatorStrategy84);
        org.junit.Assert.assertNotNull(classLoader87);
        org.junit.Assert.assertNotNull(classLoader91);
        org.junit.Assert.assertNotNull(generatorStrategy92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test09957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09957");
        java.lang.Class class0 = null;
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        enhancer1.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback4 = null;
        enhancer1.setCallback(callback4);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter6 = null;
        enhancer1.setCallbackFilter(callbackFilter6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = enhancer1.getStrategy();
        boolean boolean9 = enhancer1.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader11 = enhancer10.getClassLoader();
        enhancer10.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader14 = enhancer10.getClassLoader();
        java.lang.Class class15 = null;
        enhancer10.setSuperclass(class15);
        enhancer10.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader20 = enhancer19.getClassLoader();
        enhancer19.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader24 = enhancer23.getClassLoader();
        enhancer23.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader28 = enhancer27.getClassLoader();
        enhancer27.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer27.setClassLoader(classLoader32);
        enhancer27.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        enhancer36.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        enhancer36.setClassLoader(classLoader41);
        enhancer36.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = enhancer36.getNamingPolicy();
        enhancer27.setNamingPolicy(namingPolicy45);
        org.mockito.cglib.proxy.Enhancer enhancer47 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader48 = enhancer47.getClassLoader();
        enhancer47.setUseCache(true);
        boolean boolean51 = enhancer47.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer52 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader53 = enhancer52.getClassLoader();
        enhancer52.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader56 = enhancer52.getClassLoader();
        java.lang.Class class57 = null;
        enhancer52.setSuperclass(class57);
        org.mockito.cglib.proxy.Enhancer enhancer59 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader60 = enhancer59.getClassLoader();
        enhancer59.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer63 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader64 = enhancer63.getClassLoader();
        enhancer59.setClassLoader(classLoader64);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = enhancer59.getStrategy();
        java.lang.Class<?> wildcardClass67 = enhancer59.getClass();
        enhancer52.setSuperclass((java.lang.Class) wildcardClass67);
        enhancer47.setSuperclass((java.lang.Class) wildcardClass67);
        boolean boolean70 = namingPolicy45.equals((java.lang.Object) enhancer47);
        enhancer23.setNamingPolicy(namingPolicy45);
        enhancer19.setNamingPolicy(namingPolicy45);
        enhancer10.setNamingPolicy(namingPolicy45);
        enhancer1.setNamingPolicy(namingPolicy45);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = enhancer1.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer76 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader77 = enhancer76.getClassLoader();
        enhancer76.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader80 = enhancer76.getClassLoader();
        org.mockito.cglib.proxy.Callback callback81 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray82 = new org.mockito.cglib.proxy.Callback[] { callback81 };
        enhancer76.setCallbacks(callbackArray82);
        enhancer1.setCallbacks(callbackArray82);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerCallbacks(class0, callbackArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(classLoader60);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(generatorStrategy75);
        org.junit.Assert.assertNotNull(classLoader77);
        org.junit.Assert.assertNotNull(classLoader80);
        org.junit.Assert.assertNotNull(callbackArray82);
    }

    @Test
    public void test09958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09958");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer3 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader4 = enhancer3.getClassLoader();
        enhancer3.setUseCache(true);
        boolean boolean7 = enhancer3.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        enhancer8.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader12 = enhancer8.getClassLoader();
        java.lang.Class class13 = null;
        enhancer8.setSuperclass(class13);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        enhancer15.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader20 = enhancer19.getClassLoader();
        enhancer15.setClassLoader(classLoader20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = enhancer15.getStrategy();
        java.lang.Class<?> wildcardClass23 = enhancer15.getClass();
        enhancer8.setSuperclass((java.lang.Class) wildcardClass23);
        enhancer3.setSuperclass((java.lang.Class) wildcardClass23);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass23);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader28 = enhancer27.getClassLoader();
        enhancer27.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer27.setClassLoader(classLoader32);
        enhancer27.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        enhancer36.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        enhancer36.setClassLoader(classLoader41);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter43 = null;
        enhancer36.setCallbackFilter(callbackFilter43);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = enhancer36.getNamingPolicy();
        enhancer27.setNamingPolicy(namingPolicy45);
        enhancer0.setNamingPolicy(namingPolicy45);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = enhancer0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor49 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(generatorStrategy48);
    }

    @Test
    public void test09959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09959");
        java.lang.Class class0 = null;
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader2 = enhancer1.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter3 = null;
        enhancer1.setCallbackFilter(callbackFilter3);
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        enhancer5.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer5.setClassLoader(classLoader10);
        enhancer5.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = enhancer5.getNamingPolicy();
        boolean boolean15 = enhancer5.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        enhancer16.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader20 = enhancer16.getClassLoader();
        java.lang.Class class21 = null;
        enhancer16.setSuperclass(class21);
        java.lang.ClassLoader classLoader23 = enhancer16.getClassLoader();
        enhancer5.setClassLoader(classLoader23);
        enhancer1.setClassLoader(classLoader23);
        java.lang.ClassLoader classLoader26 = enhancer1.getClassLoader();
        org.mockito.cglib.proxy.Callback callback27 = null;
        enhancer1.setCallback(callback27);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer29.setUseCache(true);
        boolean boolean33 = enhancer29.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        enhancer34.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader38 = enhancer34.getClassLoader();
        java.lang.Class class39 = null;
        enhancer34.setSuperclass(class39);
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader42 = enhancer41.getClassLoader();
        enhancer41.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader46 = enhancer45.getClassLoader();
        enhancer41.setClassLoader(classLoader46);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = enhancer41.getStrategy();
        java.lang.Class<?> wildcardClass49 = enhancer41.getClass();
        enhancer34.setSuperclass((java.lang.Class) wildcardClass49);
        enhancer29.setSuperclass((java.lang.Class) wildcardClass49);
        enhancer29.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer54 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader55 = enhancer54.getClassLoader();
        enhancer54.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer58 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader59 = enhancer58.getClassLoader();
        enhancer54.setClassLoader(classLoader59);
        enhancer54.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = enhancer54.getNamingPolicy();
        boolean boolean64 = enhancer54.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer65 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader66 = enhancer65.getClassLoader();
        enhancer65.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader69 = enhancer65.getClassLoader();
        java.lang.Class class70 = null;
        enhancer65.setSuperclass(class70);
        java.lang.ClassLoader classLoader72 = enhancer65.getClassLoader();
        enhancer54.setClassLoader(classLoader72);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy74 = enhancer54.getStrategy();
        enhancer29.setStrategy(generatorStrategy74);
        org.mockito.cglib.proxy.Enhancer enhancer76 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader77 = enhancer76.getClassLoader();
        enhancer76.setInterceptDuringConstruction(true);
        boolean boolean80 = enhancer76.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = enhancer76.getStrategy();
        java.lang.Class[] classArray82 = new java.lang.Class[] {};
        enhancer76.setInterfaces(classArray82);
        enhancer29.setInterfaces(classArray82);
        enhancer1.setInterfaces(classArray82);
        java.util.List list86 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.getMethods(class0, classArray82, list86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertNotNull(classLoader69);
        org.junit.Assert.assertNotNull(classLoader72);
        org.junit.Assert.assertNotNull(generatorStrategy74);
        org.junit.Assert.assertNotNull(classLoader77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertNotNull(classArray82);
    }

    @Test
    public void test09960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09960");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = enhancer0.getNamingPolicy();
        boolean boolean10 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer11.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader15 = enhancer11.getClassLoader();
        java.lang.Class class16 = null;
        enhancer11.setSuperclass(class16);
        java.lang.ClassLoader classLoader18 = enhancer11.getClassLoader();
        enhancer0.setClassLoader(classLoader18);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = enhancer0.getStrategy();
        boolean boolean21 = enhancer0.getAttemptLoad();
        java.lang.ClassLoader classLoader22 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader24 = enhancer23.getClassLoader();
        enhancer23.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader27 = enhancer23.getClassLoader();
        java.lang.Class class28 = null;
        enhancer23.setSuperclass(class28);
        enhancer23.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader34 = enhancer33.getClassLoader();
        enhancer33.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        enhancer33.setClassLoader(classLoader38);
        enhancer32.setClassLoader(classLoader38);
        enhancer23.setClassLoader(classLoader38);
        enhancer23.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = enhancer23.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader46 = enhancer45.getClassLoader();
        enhancer45.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader49 = enhancer45.getClassLoader();
        java.lang.Class class50 = null;
        enhancer45.setSuperclass(class50);
        org.mockito.cglib.proxy.Enhancer enhancer52 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader53 = enhancer52.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = enhancer52.getStrategy();
        enhancer45.setStrategy(generatorStrategy54);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = enhancer45.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = enhancer45.getNamingPolicy();
        enhancer45.setInterceptDuringConstruction(true);
        boolean boolean60 = enhancer45.getUseCache();
        boolean boolean61 = namingPolicy44.equals((java.lang.Object) boolean60);
        enhancer0.setNamingPolicy(namingPolicy44);
        enhancer0.setInterceptDuringConstruction(false);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test09961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09961");
        java.lang.Class class0 = null;
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        enhancer1.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback4 = null;
        enhancer1.setCallback(callback4);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter6 = null;
        enhancer1.setCallbackFilter(callbackFilter6);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = enhancer1.getStrategy();
        boolean boolean9 = enhancer1.getUseCache();
        java.lang.ClassLoader classLoader10 = enhancer1.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = enhancer1.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        enhancer12.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader16 = enhancer12.getClassLoader();
        java.lang.Class class17 = null;
        enhancer12.setSuperclass(class17);
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader20 = enhancer19.getClassLoader();
        enhancer19.setInterceptDuringConstruction(true);
        boolean boolean23 = enhancer19.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = enhancer19.getStrategy();
        enhancer12.setStrategy(generatorStrategy24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        enhancer12.setStrategy(generatorStrategy26);
        org.mockito.cglib.proxy.Callback callback28 = null;
        enhancer12.setCallback(callback28);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader31 = enhancer30.getClassLoader();
        enhancer30.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader34 = enhancer30.getClassLoader();
        java.lang.Class class35 = null;
        enhancer30.setSuperclass(class35);
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        enhancer37.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader42 = enhancer41.getClassLoader();
        enhancer37.setClassLoader(classLoader42);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = enhancer37.getStrategy();
        java.lang.Class<?> wildcardClass45 = enhancer37.getClass();
        enhancer30.setSuperclass((java.lang.Class) wildcardClass45);
        enhancer30.setInterceptDuringConstruction(true);
        enhancer30.setUseFactory(true);
        boolean boolean51 = enhancer30.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer52 = new org.mockito.cglib.proxy.Enhancer();
        enhancer52.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback55 = null;
        enhancer52.setCallback(callback55);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter57 = null;
        enhancer52.setCallbackFilter(callbackFilter57);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = enhancer52.getStrategy();
        java.lang.Class class60 = null;
        enhancer52.setSuperclass(class60);
        java.lang.ClassLoader classLoader62 = enhancer52.getClassLoader();
        org.mockito.cglib.proxy.Callback callback63 = null;
        enhancer52.setCallback(callback63);
        org.mockito.cglib.proxy.Enhancer enhancer65 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader66 = enhancer65.getClassLoader();
        enhancer65.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer69 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader70 = enhancer69.getClassLoader();
        enhancer65.setClassLoader(classLoader70);
        enhancer65.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer74 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader75 = enhancer74.getClassLoader();
        enhancer74.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer78 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader79 = enhancer78.getClassLoader();
        enhancer74.setClassLoader(classLoader79);
        enhancer74.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy83 = enhancer74.getNamingPolicy();
        enhancer65.setNamingPolicy(namingPolicy83);
        org.mockito.cglib.proxy.Enhancer enhancer85 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader86 = enhancer85.getClassLoader();
        enhancer85.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader89 = enhancer85.getClassLoader();
        org.mockito.cglib.proxy.Callback callback90 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray91 = new org.mockito.cglib.proxy.Callback[] { callback90 };
        enhancer85.setCallbacks(callbackArray91);
        enhancer65.setCallbacks(callbackArray91);
        enhancer52.setCallbacks(callbackArray91);
        enhancer30.setCallbacks(callbackArray91);
        enhancer12.setCallbacks(callbackArray91);
        enhancer1.setCallbacks(callbackArray91);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerStaticCallbacks(class0, callbackArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(classLoader75);
        org.junit.Assert.assertNotNull(classLoader79);
        org.junit.Assert.assertNotNull(namingPolicy83);
        org.junit.Assert.assertNotNull(classLoader86);
        org.junit.Assert.assertNotNull(classLoader89);
        org.junit.Assert.assertNotNull(callbackArray91);
    }

    @Test
    public void test09962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09962");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer9.setClassLoader(classLoader14);
        enhancer9.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer9.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer20.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader24 = enhancer20.getClassLoader();
        java.lang.Class class25 = null;
        enhancer20.setSuperclass(class25);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader28 = enhancer27.getClassLoader();
        enhancer27.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer27.setClassLoader(classLoader32);
        enhancer27.setUseCache(false);
        java.lang.ClassLoader classLoader36 = enhancer27.getClassLoader();
        enhancer20.setClassLoader(classLoader36);
        boolean boolean38 = namingPolicy18.equals((java.lang.Object) enhancer20);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = enhancer20.getNamingPolicy();
        enhancer20.setUseFactory(false);
        java.lang.ClassLoader classLoader42 = enhancer20.getClassLoader();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(classLoader42);
    }

    @Test
    public void test09963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09963");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setUseFactory(false);
        org.mockito.cglib.proxy.Callback callback3 = null;
        enhancer0.setCallback(callback3);
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        enhancer8.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        enhancer8.setClassLoader(classLoader13);
        enhancer7.setClassLoader(classLoader13);
        enhancer5.setClassLoader(classLoader13);
        enhancer0.setClassLoader(classLoader13);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Callback callback19 = null;
        enhancer0.setCallback(callback19);
        enhancer0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Callback callback23 = null;
        enhancer0.setCallback(callback23);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(namingPolicy18);
    }

    @Test
    public void test09964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09964");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Callback callback5 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray6 = new org.mockito.cglib.proxy.Callback[] { callback5 };
        enhancer0.setCallbacks(callbackArray6);
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        java.lang.ClassLoader classLoader10 = enhancer0.getClassLoader();
        enhancer0.setAttemptLoad(false);
        boolean boolean13 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer14.getStrategy();
        enhancer14.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = enhancer14.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = enhancer14.getStrategy();
        org.mockito.cglib.proxy.Callback callback21 = null;
        enhancer14.setCallback(callback21);
        enhancer14.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer25.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer25.setClassLoader(classLoader30);
        enhancer25.setUseCache(false);
        java.lang.ClassLoader classLoader34 = enhancer25.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        enhancer35.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader39 = enhancer35.getClassLoader();
        org.mockito.cglib.proxy.Callback callback40 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray41 = new org.mockito.cglib.proxy.Callback[] { callback40 };
        enhancer35.setCallbacks(callbackArray41);
        enhancer35.setSerialVersionUID((java.lang.Long) 0L);
        enhancer35.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.proxy.Enhancer enhancer47 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader48 = enhancer47.getClassLoader();
        enhancer47.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader51 = enhancer47.getClassLoader();
        org.mockito.cglib.proxy.Callback callback52 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray53 = new org.mockito.cglib.proxy.Callback[] { callback52 };
        enhancer47.setCallbacks(callbackArray53);
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        enhancer55.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader59 = enhancer55.getClassLoader();
        java.lang.Class class60 = null;
        enhancer55.setSuperclass(class60);
        java.lang.Class<?> wildcardClass62 = enhancer55.getClass();
        boolean boolean63 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass62);
        enhancer47.setSuperclass((java.lang.Class) wildcardClass62);
        enhancer35.setSuperclass((java.lang.Class) wildcardClass62);
        java.lang.Class[] classArray66 = new java.lang.Class[] { wildcardClass62 };
        enhancer25.setInterfaces(classArray66);
        enhancer14.setInterfaces(classArray66);
        enhancer0.setInterfaces(classArray66);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(callbackArray6);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(callbackArray41);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(callbackArray53);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(classArray66);
    }

    @Test
    public void test09965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09965");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        boolean boolean4 = enhancer0.getUseCache();
        enhancer0.setUseFactory(false);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test09966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09966");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Object obj6 = null;
        boolean boolean7 = generatorStrategy5.equals(obj6);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        enhancer8.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader12 = enhancer8.getClassLoader();
        org.mockito.cglib.proxy.Callback callback13 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray14 = new org.mockito.cglib.proxy.Callback[] { callback13 };
        enhancer8.setCallbacks(callbackArray14);
        enhancer8.setSerialVersionUID((java.lang.Long) 0L);
        enhancer8.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer20.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader24 = enhancer20.getClassLoader();
        org.mockito.cglib.proxy.Callback callback25 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray26 = new org.mockito.cglib.proxy.Callback[] { callback25 };
        enhancer20.setCallbacks(callbackArray26);
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader29 = enhancer28.getClassLoader();
        enhancer28.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader32 = enhancer28.getClassLoader();
        java.lang.Class class33 = null;
        enhancer28.setSuperclass(class33);
        java.lang.Class<?> wildcardClass35 = enhancer28.getClass();
        boolean boolean36 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass35);
        enhancer20.setSuperclass((java.lang.Class) wildcardClass35);
        enhancer8.setSuperclass((java.lang.Class) wildcardClass35);
        boolean boolean39 = generatorStrategy5.equals((java.lang.Object) enhancer8);
        enhancer8.setSerialVersionUID((java.lang.Long) 0L);
        enhancer8.setUseFactory(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = enhancer8.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader46 = enhancer45.getClassLoader();
        enhancer45.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader49 = enhancer45.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer50 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader51 = enhancer50.getClassLoader();
        enhancer50.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader54 = enhancer50.getClassLoader();
        org.mockito.cglib.proxy.Callback callback55 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray56 = new org.mockito.cglib.proxy.Callback[] { callback55 };
        enhancer50.setCallbacks(callbackArray56);
        enhancer45.setCallbacks(callbackArray56);
        enhancer8.setCallbacks(callbackArray56);
        org.mockito.cglib.proxy.Enhancer enhancer60 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader61 = enhancer60.getClassLoader();
        enhancer60.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer64 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader65 = enhancer64.getClassLoader();
        enhancer60.setClassLoader(classLoader65);
        enhancer60.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer69 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader70 = enhancer69.getClassLoader();
        enhancer69.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer73 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader74 = enhancer73.getClassLoader();
        enhancer69.setClassLoader(classLoader74);
        enhancer69.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = enhancer69.getNamingPolicy();
        enhancer60.setNamingPolicy(namingPolicy78);
        org.mockito.cglib.proxy.Enhancer enhancer80 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader81 = enhancer80.getClassLoader();
        enhancer80.setInterceptDuringConstruction(true);
        boolean boolean84 = namingPolicy78.equals((java.lang.Object) enhancer80);
        enhancer8.setNamingPolicy(namingPolicy78);
        org.mockito.cglib.proxy.Callback callback86 = null;
        enhancer8.setCallback(callback86);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(callbackArray14);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(callbackArray26);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(callbackArray56);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(namingPolicy78);
        org.junit.Assert.assertNotNull(classLoader81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test09967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09967");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter7 = null;
        enhancer0.setCallbackFilter(callbackFilter7);
        enhancer0.setInterceptDuringConstruction(false);
        boolean boolean11 = enhancer0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer13.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        enhancer13.setClassLoader(classLoader18);
        enhancer13.setUseCache(false);
        java.lang.ClassLoader classLoader22 = enhancer13.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader24 = enhancer23.getClassLoader();
        enhancer23.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader27 = enhancer23.getClassLoader();
        org.mockito.cglib.proxy.Callback callback28 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray29 = new org.mockito.cglib.proxy.Callback[] { callback28 };
        enhancer23.setCallbacks(callbackArray29);
        enhancer23.setSerialVersionUID((java.lang.Long) 0L);
        enhancer23.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        enhancer35.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader39 = enhancer35.getClassLoader();
        org.mockito.cglib.proxy.Callback callback40 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray41 = new org.mockito.cglib.proxy.Callback[] { callback40 };
        enhancer35.setCallbacks(callbackArray41);
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader44 = enhancer43.getClassLoader();
        enhancer43.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader47 = enhancer43.getClassLoader();
        java.lang.Class class48 = null;
        enhancer43.setSuperclass(class48);
        java.lang.Class<?> wildcardClass50 = enhancer43.getClass();
        boolean boolean51 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass50);
        enhancer35.setSuperclass((java.lang.Class) wildcardClass50);
        enhancer23.setSuperclass((java.lang.Class) wildcardClass50);
        java.lang.Class[] classArray54 = new java.lang.Class[] { wildcardClass50 };
        enhancer13.setInterfaces(classArray54);
        enhancer0.setInterfaces(classArray54);
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader58 = enhancer57.getClassLoader();
        enhancer57.setUseCache(true);
        boolean boolean61 = enhancer57.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer62 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader63 = enhancer62.getClassLoader();
        enhancer62.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader66 = enhancer62.getClassLoader();
        java.lang.Class class67 = null;
        enhancer62.setSuperclass(class67);
        org.mockito.cglib.proxy.Enhancer enhancer69 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader70 = enhancer69.getClassLoader();
        enhancer69.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer73 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader74 = enhancer73.getClassLoader();
        enhancer69.setClassLoader(classLoader74);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy76 = enhancer69.getStrategy();
        java.lang.Class<?> wildcardClass77 = enhancer69.getClass();
        enhancer62.setSuperclass((java.lang.Class) wildcardClass77);
        enhancer57.setSuperclass((java.lang.Class) wildcardClass77);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass77);
        enhancer0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader83 = enhancer0.getClassLoader();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(callbackArray29);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(callbackArray41);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(classLoader63);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertNotNull(classLoader70);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(generatorStrategy76);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertNotNull(classLoader83);
    }

    @Test
    public void test09968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09968");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader7 = enhancer6.getClassLoader();
        enhancer6.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader10 = enhancer6.getClassLoader();
        java.lang.Class class11 = null;
        enhancer6.setSuperclass(class11);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer6.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        enhancer18.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer22.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader27 = enhancer26.getClassLoader();
        enhancer22.setClassLoader(classLoader27);
        enhancer22.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer31.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        enhancer31.setClassLoader(classLoader36);
        enhancer31.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = enhancer31.getNamingPolicy();
        enhancer22.setNamingPolicy(namingPolicy40);
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader43 = enhancer42.getClassLoader();
        enhancer42.setUseCache(true);
        boolean boolean46 = enhancer42.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer47 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader48 = enhancer47.getClassLoader();
        enhancer47.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader51 = enhancer47.getClassLoader();
        java.lang.Class class52 = null;
        enhancer47.setSuperclass(class52);
        org.mockito.cglib.proxy.Enhancer enhancer54 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader55 = enhancer54.getClassLoader();
        enhancer54.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer58 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader59 = enhancer58.getClassLoader();
        enhancer54.setClassLoader(classLoader59);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = enhancer54.getStrategy();
        java.lang.Class<?> wildcardClass62 = enhancer54.getClass();
        enhancer47.setSuperclass((java.lang.Class) wildcardClass62);
        enhancer42.setSuperclass((java.lang.Class) wildcardClass62);
        boolean boolean65 = namingPolicy40.equals((java.lang.Object) enhancer42);
        enhancer18.setNamingPolicy(namingPolicy40);
        enhancer14.setNamingPolicy(namingPolicy40);
        enhancer6.setNamingPolicy(namingPolicy40);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = enhancer6.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy69);
        boolean boolean71 = enhancer0.getAttemptLoad();
        enhancer0.setAttemptLoad(false);
        java.lang.ClassLoader classLoader74 = enhancer0.getClassLoader();
        enhancer0.setAttemptLoad(false);
        enhancer0.setUseFactory(true);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(generatorStrategy61);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(classLoader74);
    }

    @Test
    public void test09969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09969");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        boolean boolean11 = enhancer7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer7.getStrategy();
        enhancer0.setStrategy(generatorStrategy12);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader18 = enhancer14.getClassLoader();
        java.lang.Class class19 = null;
        enhancer14.setSuperclass(class19);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer21.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer21.setClassLoader(classLoader26);
        enhancer21.setUseCache(false);
        java.lang.ClassLoader classLoader30 = enhancer21.getClassLoader();
        enhancer14.setClassLoader(classLoader30);
        boolean boolean32 = generatorStrategy12.equals((java.lang.Object) enhancer14);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = enhancer14.getNamingPolicy();
        boolean boolean34 = enhancer14.getAttemptLoad();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter35 = null;
        enhancer14.setCallbackFilter(callbackFilter35);
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        enhancer37.setUseCache(true);
        boolean boolean41 = enhancer37.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader43 = enhancer42.getClassLoader();
        enhancer42.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader46 = enhancer42.getClassLoader();
        java.lang.Class class47 = null;
        enhancer42.setSuperclass(class47);
        java.lang.Class<?> wildcardClass49 = enhancer42.getClass();
        enhancer37.setSuperclass((java.lang.Class) wildcardClass49);
        enhancer14.setSuperclass((java.lang.Class) wildcardClass49);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = enhancer14.getStrategy();
        enhancer14.setUseFactory(true);
        java.lang.Class class55 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer14.setCallbackType(class55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(generatorStrategy52);
    }

    @Test
    public void test09970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09970");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseCache(true);
        boolean boolean4 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        enhancer5.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader9 = enhancer5.getClassLoader();
        java.lang.Class class10 = null;
        enhancer5.setSuperclass(class10);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        enhancer12.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        enhancer12.setClassLoader(classLoader17);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = enhancer12.getStrategy();
        java.lang.Class<?> wildcardClass20 = enhancer12.getClass();
        enhancer5.setSuperclass((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer25.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer25.setClassLoader(classLoader30);
        enhancer25.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = enhancer25.getNamingPolicy();
        boolean boolean35 = enhancer25.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        enhancer36.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader40 = enhancer36.getClassLoader();
        java.lang.Class class41 = null;
        enhancer36.setSuperclass(class41);
        java.lang.ClassLoader classLoader43 = enhancer36.getClassLoader();
        enhancer25.setClassLoader(classLoader43);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = enhancer25.getStrategy();
        enhancer0.setStrategy(generatorStrategy45);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = enhancer0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader50 = enhancer49.getClassLoader();
        enhancer49.setInterceptDuringConstruction(true);
        boolean boolean53 = enhancer49.getUseCache();
        boolean boolean54 = enhancer49.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter57 = null;
        enhancer55.setCallbackFilter(callbackFilter57);
        org.mockito.cglib.proxy.Enhancer enhancer59 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader60 = enhancer59.getClassLoader();
        enhancer59.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer63 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader64 = enhancer63.getClassLoader();
        enhancer59.setClassLoader(classLoader64);
        enhancer59.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = enhancer59.getNamingPolicy();
        boolean boolean69 = enhancer59.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer70 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader71 = enhancer70.getClassLoader();
        enhancer70.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader74 = enhancer70.getClassLoader();
        java.lang.Class class75 = null;
        enhancer70.setSuperclass(class75);
        java.lang.ClassLoader classLoader77 = enhancer70.getClassLoader();
        enhancer59.setClassLoader(classLoader77);
        enhancer55.setClassLoader(classLoader77);
        enhancer49.setClassLoader(classLoader77);
        boolean boolean81 = generatorStrategy48.equals((java.lang.Object) enhancer49);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(generatorStrategy19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(classLoader60);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(classLoader77);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test09971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09971");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader2 = enhancer1.getClassLoader();
        enhancer1.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        enhancer1.setClassLoader(classLoader6);
        enhancer0.setClassLoader(classLoader6);
        java.lang.ClassLoader classLoader9 = enhancer0.getClassLoader();
        enhancer0.setUseFactory(true);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        boolean boolean14 = enhancer0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        enhancer16.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer16.setClassLoader(classLoader21);
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader24 = enhancer23.getClassLoader();
        enhancer23.setInterceptDuringConstruction(true);
        boolean boolean27 = enhancer23.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = enhancer23.getStrategy();
        java.lang.Class[] classArray29 = new java.lang.Class[] {};
        enhancer23.setInterfaces(classArray29);
        enhancer16.setInterfaces(classArray29);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        enhancer32.setInterceptDuringConstruction(true);
        boolean boolean36 = enhancer32.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = enhancer32.getStrategy();
        java.lang.Class[] classArray38 = new java.lang.Class[] {};
        enhancer32.setInterfaces(classArray38);
        enhancer16.setInterfaces(classArray38);
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackTypes(classArray38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Array cannot be empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(classArray38);
    }

    @Test
    public void test09972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09972");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        boolean boolean4 = enhancer0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader7 = enhancer6.getClassLoader();
        enhancer6.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader10 = enhancer6.getClassLoader();
        java.lang.Class class11 = null;
        enhancer6.setSuperclass(class11);
        enhancer6.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        enhancer16.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer16.setClassLoader(classLoader21);
        enhancer15.setClassLoader(classLoader21);
        enhancer6.setClassLoader(classLoader21);
        enhancer6.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = enhancer6.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader29 = enhancer28.getClassLoader();
        enhancer28.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader32 = enhancer28.getClassLoader();
        java.lang.Class class33 = null;
        enhancer28.setSuperclass(class33);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = enhancer35.getStrategy();
        enhancer28.setStrategy(generatorStrategy37);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = enhancer28.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = enhancer28.getNamingPolicy();
        enhancer28.setInterceptDuringConstruction(true);
        boolean boolean43 = enhancer28.getUseCache();
        boolean boolean44 = namingPolicy27.equals((java.lang.Object) boolean43);
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader46 = enhancer45.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = enhancer45.getStrategy();
        enhancer45.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = enhancer45.getNamingPolicy();
        boolean boolean51 = namingPolicy27.equals((java.lang.Object) enhancer45);
        enhancer0.setNamingPolicy(namingPolicy27);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = enhancer0.getNamingPolicy();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(generatorStrategy39);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(namingPolicy53);
    }

    @Test
    public void test09973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09973");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        boolean boolean11 = enhancer7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer7.getStrategy();
        enhancer0.setStrategy(generatorStrategy12);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader18 = enhancer14.getClassLoader();
        java.lang.Class class19 = null;
        enhancer14.setSuperclass(class19);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer21.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer21.setClassLoader(classLoader26);
        enhancer21.setUseCache(false);
        java.lang.ClassLoader classLoader30 = enhancer21.getClassLoader();
        enhancer14.setClassLoader(classLoader30);
        boolean boolean32 = generatorStrategy12.equals((java.lang.Object) enhancer14);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = enhancer14.getNamingPolicy();
        boolean boolean34 = enhancer14.getAttemptLoad();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter35 = null;
        enhancer14.setCallbackFilter(callbackFilter35);
        java.lang.ClassLoader classLoader37 = enhancer14.getClassLoader();
        enhancer14.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback40 = null;
        enhancer14.setCallback(callback40);
        java.lang.ClassLoader classLoader42 = enhancer14.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor43 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer14.generateClass(classVisitor43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(classLoader42);
    }

    @Test
    public void test09974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09974");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter2 = null;
        enhancer0.setCallbackFilter(callbackFilter2);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter4 = null;
        enhancer0.setCallbackFilter(callbackFilter4);
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer9.setClassLoader(classLoader14);
        enhancer8.setClassLoader(classLoader14);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        enhancer17.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader21 = enhancer17.getClassLoader();
        enhancer8.setClassLoader(classLoader21);
        boolean boolean23 = enhancer8.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        enhancer24.setInterceptDuringConstruction(true);
        boolean boolean28 = enhancer24.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = enhancer24.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader31 = enhancer30.getClassLoader();
        enhancer30.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader34 = enhancer30.getClassLoader();
        org.mockito.cglib.proxy.Callback callback35 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray36 = new org.mockito.cglib.proxy.Callback[] { callback35 };
        enhancer30.setCallbacks(callbackArray36);
        enhancer24.setCallbacks(callbackArray36);
        enhancer8.setCallbacks(callbackArray36);
        enhancer0.setCallbacks(callbackArray36);
        enhancer0.setSerialVersionUID((java.lang.Long) 100L);
        org.mockito.cglib.proxy.Callback callback43 = null;
        enhancer0.setCallback(callback43);
        java.lang.ClassLoader classLoader45 = enhancer0.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor46 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(callbackArray36);
        org.junit.Assert.assertNotNull(classLoader45);
    }

    @Test
    public void test09975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09975");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        boolean boolean4 = enhancer0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer0.getNamingPolicy();
        java.lang.ClassLoader classLoader6 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader11 = enhancer7.getClassLoader();
        java.lang.Class class12 = null;
        enhancer7.setSuperclass(class12);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer14.getStrategy();
        enhancer7.setStrategy(generatorStrategy16);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        enhancer18.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = enhancer18.getStrategy();
        java.lang.Class[] classArray23 = null;
        enhancer18.setInterfaces(classArray23);
        boolean boolean25 = generatorStrategy16.equals((java.lang.Object) classArray23);
        enhancer0.setStrategy(generatorStrategy16);
        boolean boolean27 = enhancer0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor28 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(classLoader11);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test09976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09976");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader9 = enhancer0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        enhancer12.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader16 = enhancer12.getClassLoader();
        java.lang.Class class17 = null;
        enhancer12.setSuperclass(class17);
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader20 = enhancer19.getClassLoader();
        enhancer19.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader24 = enhancer23.getClassLoader();
        enhancer19.setClassLoader(classLoader24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = enhancer19.getStrategy();
        java.lang.Class<?> wildcardClass27 = enhancer19.getClass();
        enhancer12.setSuperclass((java.lang.Class) wildcardClass27);
        enhancer12.setAttemptLoad(false);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer12.setClassLoader(classLoader32);
        enhancer12.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        enhancer36.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        enhancer36.setClassLoader(classLoader41);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = enhancer36.getStrategy();
        enhancer36.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        enhancer46.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = enhancer46.getStrategy();
        enhancer36.setStrategy(generatorStrategy49);
        org.mockito.cglib.proxy.Enhancer enhancer51 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader52 = enhancer51.getClassLoader();
        enhancer51.setInterceptDuringConstruction(true);
        boolean boolean55 = enhancer51.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = enhancer51.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader58 = enhancer57.getClassLoader();
        enhancer57.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader61 = enhancer57.getClassLoader();
        org.mockito.cglib.proxy.Callback callback62 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray63 = new org.mockito.cglib.proxy.Callback[] { callback62 };
        enhancer57.setCallbacks(callbackArray63);
        enhancer51.setCallbacks(callbackArray63);
        enhancer36.setCallbacks(callbackArray63);
        enhancer12.setCallbacks(callbackArray63);
        enhancer0.setCallbacks(callbackArray63);
        enhancer0.setAttemptLoad(false);
        org.mockito.asm.ClassVisitor classVisitor71 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertNotNull(callbackArray63);
    }

    @Test
    public void test09977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09977");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter7 = null;
        enhancer0.setCallbackFilter(callbackFilter7);
        enhancer0.setUseCache(false);
        boolean boolean11 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Callback callback12 = null;
        enhancer0.setCallback(callback12);
        boolean boolean14 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        enhancer16.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer16.setClassLoader(classLoader21);
        enhancer15.setClassLoader(classLoader21);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        enhancer24.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader28 = enhancer24.getClassLoader();
        enhancer15.setClassLoader(classLoader28);
        boolean boolean30 = enhancer15.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer31.setInterceptDuringConstruction(true);
        boolean boolean35 = enhancer31.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = enhancer31.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        enhancer37.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader41 = enhancer37.getClassLoader();
        org.mockito.cglib.proxy.Callback callback42 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray43 = new org.mockito.cglib.proxy.Callback[] { callback42 };
        enhancer37.setCallbacks(callbackArray43);
        enhancer31.setCallbacks(callbackArray43);
        enhancer15.setCallbacks(callbackArray43);
        enhancer15.setUseFactory(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = enhancer15.getStrategy();
        boolean boolean50 = enhancer15.getUseCache();
        java.lang.Class<?> wildcardClass51 = enhancer15.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass51);
        org.mockito.cglib.proxy.Callback callback53 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj54 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass51, callback53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(callbackArray43);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test09978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09978");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter2 = null;
        enhancer0.setCallbackFilter(callbackFilter2);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer4.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader8 = enhancer4.getClassLoader();
        org.mockito.cglib.proxy.Callback callback9 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray10 = new org.mockito.cglib.proxy.Callback[] { callback9 };
        enhancer4.setCallbacks(callbackArray10);
        enhancer4.setSerialVersionUID((java.lang.Long) 0L);
        enhancer4.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        enhancer16.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer16.setClassLoader(classLoader21);
        enhancer16.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer25.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer25.setClassLoader(classLoader30);
        enhancer25.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = enhancer25.getNamingPolicy();
        enhancer16.setNamingPolicy(namingPolicy34);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        enhancer36.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader40 = enhancer36.getClassLoader();
        java.lang.Class class41 = null;
        enhancer36.setSuperclass(class41);
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader44 = enhancer43.getClassLoader();
        enhancer43.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer47 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader48 = enhancer47.getClassLoader();
        enhancer43.setClassLoader(classLoader48);
        enhancer43.setUseCache(false);
        java.lang.ClassLoader classLoader52 = enhancer43.getClassLoader();
        enhancer36.setClassLoader(classLoader52);
        boolean boolean54 = namingPolicy34.equals((java.lang.Object) enhancer36);
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        enhancer55.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer59 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader60 = enhancer59.getClassLoader();
        enhancer55.setClassLoader(classLoader60);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = enhancer55.getStrategy();
        enhancer55.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer65 = new org.mockito.cglib.proxy.Enhancer();
        enhancer65.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = enhancer65.getStrategy();
        enhancer55.setStrategy(generatorStrategy68);
        enhancer36.setStrategy(generatorStrategy68);
        java.lang.ClassLoader classLoader71 = enhancer36.getClassLoader();
        enhancer4.setClassLoader(classLoader71);
        enhancer0.setClassLoader(classLoader71);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter74 = null;
        enhancer0.setCallbackFilter(callbackFilter74);
        boolean boolean76 = enhancer0.getAttemptLoad();
        java.lang.ClassLoader classLoader77 = enhancer0.getClassLoader();
        boolean boolean78 = enhancer0.getUseCache();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(callbackArray10);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(classLoader60);
        org.junit.Assert.assertNotNull(generatorStrategy62);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(classLoader77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test09979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09979");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader2 = enhancer1.getClassLoader();
        enhancer1.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        enhancer1.setClassLoader(classLoader6);
        enhancer0.setClassLoader(classLoader6);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader13 = enhancer9.getClassLoader();
        enhancer0.setClassLoader(classLoader13);
        org.mockito.cglib.proxy.Callback callback15 = null;
        enhancer0.setCallback(callback15);
        enhancer0.setUseCache(true);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter21 = null;
        enhancer0.setCallbackFilter(callbackFilter21);
        boolean boolean23 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = enhancer24.getStrategy();
        enhancer24.setSerialVersionUID((java.lang.Long) 1L);
        boolean boolean29 = enhancer24.getAttemptLoad();
        enhancer24.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        enhancer32.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader36 = enhancer32.getClassLoader();
        java.lang.Class class37 = null;
        enhancer32.setSuperclass(class37);
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader40 = enhancer39.getClassLoader();
        enhancer39.setInterceptDuringConstruction(true);
        boolean boolean43 = enhancer39.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = enhancer39.getStrategy();
        enhancer32.setStrategy(generatorStrategy44);
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader47 = enhancer46.getClassLoader();
        enhancer46.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader50 = enhancer46.getClassLoader();
        java.lang.Class class51 = null;
        enhancer46.setSuperclass(class51);
        org.mockito.cglib.proxy.Enhancer enhancer53 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader54 = enhancer53.getClassLoader();
        enhancer53.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader58 = enhancer57.getClassLoader();
        enhancer53.setClassLoader(classLoader58);
        enhancer53.setUseCache(false);
        java.lang.ClassLoader classLoader62 = enhancer53.getClassLoader();
        enhancer46.setClassLoader(classLoader62);
        boolean boolean64 = generatorStrategy44.equals((java.lang.Object) enhancer46);
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = enhancer46.getNamingPolicy();
        boolean boolean66 = enhancer46.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = null;
        enhancer46.setNamingPolicy(namingPolicy67);
        boolean boolean69 = enhancer46.getAttemptLoad();
        enhancer46.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer72 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader73 = enhancer72.getClassLoader();
        enhancer72.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer76 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader77 = enhancer76.getClassLoader();
        enhancer72.setClassLoader(classLoader77);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy79 = enhancer72.getStrategy();
        java.lang.Class<?> wildcardClass80 = enhancer72.getClass();
        boolean boolean81 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass80);
        boolean boolean82 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass80);
        boolean boolean83 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass80);
        enhancer46.setSuperclass((java.lang.Class) wildcardClass80);
        enhancer24.setSuperclass((java.lang.Class) wildcardClass80);
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackType((java.lang.Class) wildcardClass80);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Unknown callback type class org.mockito.cglib.proxy.Enhancer");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(classLoader73);
        org.junit.Assert.assertNotNull(classLoader77);
        org.junit.Assert.assertNotNull(generatorStrategy79);
        org.junit.Assert.assertNotNull(wildcardClass80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test09980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09980");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader2 = enhancer1.getClassLoader();
        enhancer1.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader6 = enhancer5.getClassLoader();
        enhancer1.setClassLoader(classLoader6);
        enhancer0.setClassLoader(classLoader6);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader13 = enhancer9.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        enhancer16.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer16.setClassLoader(classLoader21);
        enhancer16.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer25.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer25.setClassLoader(classLoader30);
        enhancer25.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = enhancer25.getNamingPolicy();
        enhancer16.setNamingPolicy(namingPolicy34);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader37 = enhancer36.getClassLoader();
        enhancer36.setInterceptDuringConstruction(true);
        boolean boolean40 = namingPolicy34.equals((java.lang.Object) enhancer36);
        enhancer14.setNamingPolicy(namingPolicy34);
        enhancer9.setNamingPolicy(namingPolicy34);
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader44 = enhancer43.getClassLoader();
        enhancer43.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer47 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader48 = enhancer47.getClassLoader();
        enhancer43.setClassLoader(classLoader48);
        enhancer43.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer52 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader53 = enhancer52.getClassLoader();
        enhancer52.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader57 = enhancer56.getClassLoader();
        enhancer52.setClassLoader(classLoader57);
        enhancer52.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = enhancer52.getNamingPolicy();
        enhancer43.setNamingPolicy(namingPolicy61);
        org.mockito.cglib.proxy.Enhancer enhancer63 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader64 = enhancer63.getClassLoader();
        enhancer63.setUseCache(true);
        boolean boolean67 = enhancer63.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer68 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader69 = enhancer68.getClassLoader();
        enhancer68.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader72 = enhancer68.getClassLoader();
        java.lang.Class class73 = null;
        enhancer68.setSuperclass(class73);
        org.mockito.cglib.proxy.Enhancer enhancer75 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader76 = enhancer75.getClassLoader();
        enhancer75.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer79 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader80 = enhancer79.getClassLoader();
        enhancer75.setClassLoader(classLoader80);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = enhancer75.getStrategy();
        java.lang.Class<?> wildcardClass83 = enhancer75.getClass();
        enhancer68.setSuperclass((java.lang.Class) wildcardClass83);
        enhancer63.setSuperclass((java.lang.Class) wildcardClass83);
        boolean boolean86 = namingPolicy61.equals((java.lang.Object) enhancer63);
        boolean boolean87 = namingPolicy34.equals((java.lang.Object) boolean86);
        enhancer0.setNamingPolicy(namingPolicy34);
        org.mockito.cglib.proxy.Callback callback89 = null;
        enhancer0.setCallback(callback89);
        java.lang.ClassLoader classLoader91 = enhancer0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy92 = enhancer0.getNamingPolicy();
        org.junit.Assert.assertNotNull(classLoader2);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(classLoader69);
        org.junit.Assert.assertNotNull(classLoader72);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertNotNull(classLoader80);
        org.junit.Assert.assertNotNull(generatorStrategy82);
        org.junit.Assert.assertNotNull(wildcardClass83);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(classLoader91);
        org.junit.Assert.assertNotNull(namingPolicy92);
    }

    @Test
    public void test09981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09981");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        java.lang.Object obj6 = null;
        boolean boolean7 = generatorStrategy5.equals(obj6);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader9 = enhancer8.getClassLoader();
        enhancer8.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader12 = enhancer8.getClassLoader();
        org.mockito.cglib.proxy.Callback callback13 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray14 = new org.mockito.cglib.proxy.Callback[] { callback13 };
        enhancer8.setCallbacks(callbackArray14);
        enhancer8.setSerialVersionUID((java.lang.Long) 0L);
        enhancer8.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer20.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader24 = enhancer20.getClassLoader();
        org.mockito.cglib.proxy.Callback callback25 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray26 = new org.mockito.cglib.proxy.Callback[] { callback25 };
        enhancer20.setCallbacks(callbackArray26);
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader29 = enhancer28.getClassLoader();
        enhancer28.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader32 = enhancer28.getClassLoader();
        java.lang.Class class33 = null;
        enhancer28.setSuperclass(class33);
        java.lang.Class<?> wildcardClass35 = enhancer28.getClass();
        boolean boolean36 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass35);
        enhancer20.setSuperclass((java.lang.Class) wildcardClass35);
        enhancer8.setSuperclass((java.lang.Class) wildcardClass35);
        boolean boolean39 = generatorStrategy5.equals((java.lang.Object) enhancer8);
        enhancer8.setSerialVersionUID((java.lang.Long) 0L);
        enhancer8.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader45 = enhancer44.getClassLoader();
        enhancer44.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        enhancer44.setClassLoader(classLoader49);
        enhancer44.setUseCache(false);
        java.lang.ClassLoader classLoader53 = enhancer44.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = enhancer44.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = enhancer44.getNamingPolicy();
        java.lang.ClassLoader classLoader56 = enhancer44.getClassLoader();
        enhancer44.setSerialVersionUID((java.lang.Long) 1L);
        boolean boolean59 = enhancer44.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = enhancer44.getStrategy();
        enhancer8.setStrategy(generatorStrategy60);
        org.mockito.asm.ClassVisitor classVisitor62 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer8.generateClass(classVisitor62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(callbackArray14);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(callbackArray26);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(generatorStrategy60);
    }

    @Test
    public void test09982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09982");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer7.setClassLoader(classLoader12);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = enhancer7.getStrategy();
        java.lang.Class<?> wildcardClass15 = enhancer7.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass15);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader18 = enhancer17.getClassLoader();
        enhancer17.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer17.setClassLoader(classLoader22);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = enhancer17.getStrategy();
        enhancer0.setStrategy(generatorStrategy24);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        enhancer26.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback29 = null;
        enhancer26.setCallback(callback29);
        enhancer26.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = enhancer26.getNamingPolicy();
        org.mockito.cglib.proxy.Callback callback34 = null;
        enhancer26.setCallback(callback34);
        boolean boolean36 = enhancer26.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        enhancer26.setClassLoader(classLoader38);
        enhancer0.setClassLoader(classLoader38);
        enhancer0.setAttemptLoad(true);
        java.lang.Class<?> wildcardClass43 = enhancer0.getClass();
        org.mockito.cglib.proxy.Callback callback44 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj45 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass43, callback44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test09983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09983");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        boolean boolean11 = enhancer7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer7.getStrategy();
        enhancer0.setStrategy(generatorStrategy12);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader18 = enhancer14.getClassLoader();
        java.lang.Class class19 = null;
        enhancer14.setSuperclass(class19);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer21.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer21.setClassLoader(classLoader26);
        enhancer21.setUseCache(false);
        java.lang.ClassLoader classLoader30 = enhancer21.getClassLoader();
        enhancer14.setClassLoader(classLoader30);
        boolean boolean32 = generatorStrategy12.equals((java.lang.Object) enhancer14);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = enhancer14.getNamingPolicy();
        boolean boolean34 = enhancer14.getAttemptLoad();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter35 = null;
        enhancer14.setCallbackFilter(callbackFilter35);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter37 = null;
        enhancer14.setCallbackFilter(callbackFilter37);
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader40 = enhancer39.getClassLoader();
        enhancer39.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader44 = enhancer43.getClassLoader();
        enhancer39.setClassLoader(classLoader44);
        enhancer39.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        enhancer48.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer52 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader53 = enhancer52.getClassLoader();
        enhancer48.setClassLoader(classLoader53);
        enhancer48.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = enhancer48.getNamingPolicy();
        enhancer39.setNamingPolicy(namingPolicy57);
        enhancer39.setInterceptDuringConstruction(true);
        enhancer39.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = enhancer39.getNamingPolicy();
        enhancer14.setNamingPolicy(namingPolicy63);
        enhancer14.setUseFactory(true);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertNotNull(namingPolicy63);
    }

    @Test
    public void test09984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09984");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        boolean boolean4 = enhancer0.getUseCache();
        enhancer0.setAttemptLoad(false);
        enhancer0.setSerialVersionUID((java.lang.Long) (-1L));
        enhancer0.setInterceptDuringConstruction(false);
        boolean boolean11 = enhancer0.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer0.getStrategy();
        enhancer0.setUseFactory(false);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        enhancer15.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader20 = enhancer19.getClassLoader();
        enhancer15.setClassLoader(classLoader20);
        enhancer15.setUseCache(false);
        java.lang.ClassLoader classLoader24 = enhancer15.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = enhancer15.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = enhancer15.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = enhancer15.getNamingPolicy();
        enhancer15.setAttemptLoad(false);
        boolean boolean30 = enhancer15.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer31.setInterceptDuringConstruction(true);
        boolean boolean35 = enhancer31.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = enhancer31.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        enhancer37.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader41 = enhancer37.getClassLoader();
        org.mockito.cglib.proxy.Callback callback42 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray43 = new org.mockito.cglib.proxy.Callback[] { callback42 };
        enhancer37.setCallbacks(callbackArray43);
        enhancer31.setCallbacks(callbackArray43);
        enhancer15.setCallbacks(callbackArray43);
        enhancer0.setCallbacks(callbackArray43);
        java.lang.Class class48 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackType(class48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(callbackArray43);
    }

    @Test
    public void test09985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09985");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter7 = null;
        enhancer0.setCallbackFilter(callbackFilter7);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer11.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        enhancer11.setClassLoader(classLoader16);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter18 = null;
        enhancer11.setCallbackFilter(callbackFilter18);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer20.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader25 = enhancer24.getClassLoader();
        enhancer20.setClassLoader(classLoader25);
        enhancer20.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer29.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader34 = enhancer33.getClassLoader();
        enhancer29.setClassLoader(classLoader34);
        enhancer29.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = enhancer29.getNamingPolicy();
        enhancer20.setNamingPolicy(namingPolicy38);
        enhancer11.setNamingPolicy(namingPolicy38);
        enhancer0.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader44 = enhancer43.getClassLoader();
        enhancer43.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader47 = enhancer43.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        enhancer48.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader52 = enhancer48.getClassLoader();
        org.mockito.cglib.proxy.Callback callback53 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray54 = new org.mockito.cglib.proxy.Callback[] { callback53 };
        enhancer48.setCallbacks(callbackArray54);
        enhancer43.setCallbacks(callbackArray54);
        boolean boolean57 = enhancer43.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer58 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer59 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader60 = enhancer59.getClassLoader();
        enhancer59.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer63 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader64 = enhancer63.getClassLoader();
        enhancer59.setClassLoader(classLoader64);
        enhancer58.setClassLoader(classLoader64);
        org.mockito.cglib.proxy.Enhancer enhancer67 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader68 = enhancer67.getClassLoader();
        enhancer67.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader71 = enhancer67.getClassLoader();
        enhancer58.setClassLoader(classLoader71);
        boolean boolean73 = enhancer58.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer74 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader75 = enhancer74.getClassLoader();
        enhancer74.setInterceptDuringConstruction(true);
        boolean boolean78 = enhancer74.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy79 = enhancer74.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer80 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader81 = enhancer80.getClassLoader();
        enhancer80.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader84 = enhancer80.getClassLoader();
        org.mockito.cglib.proxy.Callback callback85 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray86 = new org.mockito.cglib.proxy.Callback[] { callback85 };
        enhancer80.setCallbacks(callbackArray86);
        enhancer74.setCallbacks(callbackArray86);
        enhancer58.setCallbacks(callbackArray86);
        enhancer58.setUseFactory(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy92 = enhancer58.getStrategy();
        java.lang.ClassLoader classLoader93 = enhancer58.getClassLoader();
        enhancer43.setClassLoader(classLoader93);
        org.mockito.cglib.core.NamingPolicy namingPolicy95 = enhancer43.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy95);
        java.lang.Class<?> wildcardClass97 = enhancer0.getClass();
        org.mockito.cglib.proxy.Callback callback98 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj99 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass97, callback98);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(callbackArray54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(classLoader60);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertNotNull(classLoader68);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(classLoader75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(generatorStrategy79);
        org.junit.Assert.assertNotNull(classLoader81);
        org.junit.Assert.assertNotNull(classLoader84);
        org.junit.Assert.assertNotNull(callbackArray86);
        org.junit.Assert.assertNotNull(generatorStrategy92);
        org.junit.Assert.assertNotNull(classLoader93);
        org.junit.Assert.assertNotNull(namingPolicy95);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test09986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09986");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback3 = null;
        enhancer0.setCallback(callback3);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = enhancer0.getNamingPolicy();
        boolean boolean8 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter11 = null;
        enhancer0.setCallbackFilter(callbackFilter11);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer13.setUseCache(true);
        boolean boolean17 = enhancer13.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = null;
        enhancer13.setNamingPolicy(namingPolicy18);
        java.lang.ClassLoader classLoader20 = enhancer13.getClassLoader();
        boolean boolean21 = enhancer13.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer22.setInterceptDuringConstruction(true);
        boolean boolean26 = enhancer22.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = enhancer22.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader29 = enhancer28.getClassLoader();
        enhancer28.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader32 = enhancer28.getClassLoader();
        org.mockito.cglib.proxy.Callback callback33 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray34 = new org.mockito.cglib.proxy.Callback[] { callback33 };
        enhancer28.setCallbacks(callbackArray34);
        enhancer22.setCallbacks(callbackArray34);
        org.mockito.cglib.proxy.Callback callback37 = null;
        enhancer22.setCallback(callback37);
        java.lang.Class<?> wildcardClass39 = enhancer22.getClass();
        enhancer13.setSuperclass((java.lang.Class) wildcardClass39);
        boolean boolean41 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass39);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass39);
        enhancer0.setAttemptLoad(false);
        org.mockito.asm.ClassVisitor classVisitor45 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(callbackArray34);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test09987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09987");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        boolean boolean9 = enhancer0.getAttemptLoad();
        java.lang.ClassLoader classLoader10 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(false);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        enhancer15.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader20 = enhancer19.getClassLoader();
        enhancer15.setClassLoader(classLoader20);
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader23 = enhancer22.getClassLoader();
        enhancer22.setInterceptDuringConstruction(true);
        boolean boolean26 = enhancer22.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = enhancer22.getStrategy();
        java.lang.Class[] classArray28 = new java.lang.Class[] {};
        enhancer22.setInterfaces(classArray28);
        enhancer15.setInterfaces(classArray28);
        enhancer0.setInterfaces(classArray28);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        enhancer32.setUseCache(true);
        boolean boolean36 = enhancer32.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = enhancer32.getStrategy();
        enhancer0.setStrategy(generatorStrategy37);
        java.lang.Class<?> wildcardClass39 = generatorStrategy37.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        enhancer40.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader45 = enhancer44.getClassLoader();
        enhancer40.setClassLoader(classLoader45);
        enhancer40.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = enhancer40.getNamingPolicy();
        enhancer40.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = enhancer40.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer53 = new org.mockito.cglib.proxy.Enhancer();
        enhancer53.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback56 = null;
        enhancer53.setCallback(callback56);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter58 = null;
        enhancer53.setCallbackFilter(callbackFilter58);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = enhancer53.getStrategy();
        boolean boolean61 = enhancer53.getUseCache();
        org.mockito.cglib.proxy.Callback callback62 = null;
        enhancer53.setCallback(callback62);
        org.mockito.cglib.proxy.Enhancer enhancer64 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader65 = enhancer64.getClassLoader();
        boolean boolean66 = enhancer64.getAttemptLoad();
        java.lang.ClassLoader classLoader67 = enhancer64.getClassLoader();
        enhancer53.setClassLoader(classLoader67);
        boolean boolean69 = namingPolicy52.equals((java.lang.Object) enhancer53);
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = enhancer53.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer71 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader72 = enhancer71.getClassLoader();
        enhancer71.setInterceptDuringConstruction(true);
        boolean boolean75 = enhancer71.getUseCache();
        boolean boolean76 = enhancer71.getAttemptLoad();
        enhancer71.setUseCache(true);
        java.lang.ClassLoader classLoader79 = enhancer71.getClassLoader();
        boolean boolean80 = enhancer71.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer81 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader82 = enhancer81.getClassLoader();
        enhancer81.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader85 = enhancer81.getClassLoader();
        org.mockito.cglib.proxy.Callback callback86 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray87 = new org.mockito.cglib.proxy.Callback[] { callback86 };
        enhancer81.setCallbacks(callbackArray87);
        enhancer71.setCallbacks(callbackArray87);
        enhancer53.setCallbacks(callbackArray87);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerStaticCallbacks((java.lang.Class) wildcardClass39, callbackArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.core.DefaultGeneratorStrategy is not an enhanced class");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(generatorStrategy37);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(classLoader67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertNotNull(classLoader72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(classLoader79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(classLoader82);
        org.junit.Assert.assertNotNull(classLoader85);
        org.junit.Assert.assertNotNull(callbackArray87);
    }

    @Test
    public void test09988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09988");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseCache(true);
        boolean boolean4 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        enhancer5.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback8 = null;
        enhancer5.setCallback(callback8);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter10 = null;
        enhancer5.setCallbackFilter(callbackFilter10);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer5.getStrategy();
        boolean boolean13 = enhancer5.getUseCache();
        org.mockito.cglib.proxy.Callback callback14 = null;
        enhancer5.setCallback(callback14);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        boolean boolean18 = enhancer16.getAttemptLoad();
        java.lang.ClassLoader classLoader19 = enhancer16.getClassLoader();
        enhancer5.setClassLoader(classLoader19);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer21.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer21.setClassLoader(classLoader26);
        enhancer21.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = enhancer21.getNamingPolicy();
        enhancer5.setNamingPolicy(namingPolicy30);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = enhancer5.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy32);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter34 = null;
        enhancer0.setCallbackFilter(callbackFilter34);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        enhancer37.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader41 = enhancer37.getClassLoader();
        java.lang.Class class42 = null;
        enhancer37.setSuperclass(class42);
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader45 = enhancer44.getClassLoader();
        enhancer44.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        enhancer44.setClassLoader(classLoader49);
        enhancer44.setUseCache(false);
        java.lang.ClassLoader classLoader53 = enhancer44.getClassLoader();
        enhancer37.setClassLoader(classLoader53);
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        enhancer55.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader59 = enhancer55.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = enhancer55.getStrategy();
        enhancer37.setStrategy(generatorStrategy60);
        boolean boolean62 = enhancer37.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = enhancer37.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray64 = generatorStrategy36.generate((org.mockito.cglib.core.ClassGenerator) enhancer37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(generatorStrategy63);
    }

    @Test
    public void test09989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09989");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Callback callback5 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray6 = new org.mockito.cglib.proxy.Callback[] { callback5 };
        enhancer0.setCallbacks(callbackArray6);
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        boolean boolean10 = enhancer0.getUseCache();
        enhancer0.setAttemptLoad(true);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader19 = enhancer18.getClassLoader();
        enhancer18.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader22 = enhancer18.getClassLoader();
        java.lang.Class class23 = null;
        enhancer18.setSuperclass(class23);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = enhancer18.getNamingPolicy();
        enhancer18.setAttemptLoad(true);
        enhancer18.setAttemptLoad(false);
        enhancer18.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader33 = enhancer32.getClassLoader();
        enhancer32.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader36 = enhancer32.getClassLoader();
        java.lang.Class class37 = null;
        enhancer32.setSuperclass(class37);
        enhancer32.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader42 = enhancer41.getClassLoader();
        enhancer41.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader46 = enhancer45.getClassLoader();
        enhancer41.setClassLoader(classLoader46);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = enhancer41.getStrategy();
        enhancer32.setStrategy(generatorStrategy48);
        boolean boolean50 = enhancer32.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer51 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader52 = enhancer51.getClassLoader();
        enhancer51.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader55 = enhancer51.getClassLoader();
        java.lang.Class class56 = null;
        enhancer51.setSuperclass(class56);
        org.mockito.cglib.proxy.Enhancer enhancer58 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader59 = enhancer58.getClassLoader();
        enhancer58.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer62 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader63 = enhancer62.getClassLoader();
        enhancer58.setClassLoader(classLoader63);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = enhancer58.getStrategy();
        java.lang.Class<?> wildcardClass66 = enhancer58.getClass();
        enhancer51.setSuperclass((java.lang.Class) wildcardClass66);
        boolean boolean68 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass66);
        enhancer32.setSuperclass((java.lang.Class) wildcardClass66);
        enhancer32.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer72 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader73 = enhancer72.getClassLoader();
        enhancer72.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader76 = enhancer72.getClassLoader();
        java.lang.Class class77 = null;
        enhancer72.setSuperclass(class77);
        java.lang.ClassLoader classLoader79 = enhancer72.getClassLoader();
        boolean boolean80 = enhancer72.getAttemptLoad();
        java.lang.Class<?> wildcardClass81 = enhancer72.getClass();
        boolean boolean82 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass81);
        enhancer32.setSuperclass((java.lang.Class) wildcardClass81);
        org.mockito.cglib.core.NamingPolicy namingPolicy84 = enhancer32.getNamingPolicy();
        enhancer18.setNamingPolicy(namingPolicy84);
        org.mockito.cglib.core.NamingPolicy namingPolicy86 = enhancer18.getNamingPolicy();
        org.mockito.cglib.core.Predicate predicate87 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str88 = namingPolicy15.getClassName("hi!", "hi!", (java.lang.Object) enhancer18, predicate87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(callbackArray6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(classLoader63);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(classLoader73);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertNotNull(classLoader79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(namingPolicy84);
        org.junit.Assert.assertNotNull(namingPolicy86);
    }

    @Test
    public void test09990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09990");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader5 = enhancer4.getClassLoader();
        enhancer0.setClassLoader(classLoader5);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader14 = enhancer13.getClassLoader();
        enhancer9.setClassLoader(classLoader14);
        enhancer9.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer9.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader21 = enhancer20.getClassLoader();
        enhancer20.setInterceptDuringConstruction(true);
        boolean boolean24 = namingPolicy18.equals((java.lang.Object) enhancer20);
        java.lang.ClassLoader classLoader25 = enhancer20.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = enhancer20.getNamingPolicy();
        enhancer20.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter29 = null;
        enhancer20.setCallbackFilter(callbackFilter29);
        java.lang.Class<?> wildcardClass31 = enhancer20.getClass();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test09991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09991");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setUseCache(true);
        boolean boolean4 = enhancer0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = null;
        enhancer0.setNamingPolicy(namingPolicy5);
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = enhancer0.getNamingPolicy();
        enhancer0.setAttemptLoad(false);
        enhancer0.setUseCache(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader16 = enhancer15.getClassLoader();
        enhancer15.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader20 = enhancer19.getClassLoader();
        enhancer15.setClassLoader(classLoader20);
        enhancer15.setUseCache(false);
        boolean boolean24 = enhancer15.getAttemptLoad();
        java.lang.ClassLoader classLoader25 = enhancer15.getClassLoader();
        enhancer15.setInterceptDuringConstruction(false);
        enhancer15.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader31 = enhancer30.getClassLoader();
        enhancer30.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        enhancer30.setClassLoader(classLoader35);
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader38 = enhancer37.getClassLoader();
        enhancer37.setInterceptDuringConstruction(true);
        boolean boolean41 = enhancer37.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = enhancer37.getStrategy();
        java.lang.Class[] classArray43 = new java.lang.Class[] {};
        enhancer37.setInterfaces(classArray43);
        enhancer30.setInterfaces(classArray43);
        enhancer15.setInterfaces(classArray43);
        org.mockito.cglib.proxy.Enhancer enhancer47 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader48 = enhancer47.getClassLoader();
        enhancer47.setUseCache(true);
        boolean boolean51 = enhancer47.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = enhancer47.getStrategy();
        enhancer15.setStrategy(generatorStrategy52);
        boolean boolean54 = enhancer15.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy55 = enhancer15.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray56 = generatorStrategy14.generate((org.mockito.cglib.core.ClassGenerator) enhancer15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(generatorStrategy55);
    }

    @Test
    public void test09992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09992");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        boolean boolean4 = enhancer0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader7 = enhancer6.getClassLoader();
        enhancer6.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader10 = enhancer6.getClassLoader();
        org.mockito.cglib.proxy.Callback callback11 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray12 = new org.mockito.cglib.proxy.Callback[] { callback11 };
        enhancer6.setCallbacks(callbackArray12);
        enhancer0.setCallbacks(callbackArray12);
        org.mockito.cglib.proxy.Callback callback15 = null;
        enhancer0.setCallback(callback15);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader19 = enhancer0.getClassLoader();
        boolean boolean20 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer21.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer21.setClassLoader(classLoader26);
        enhancer21.setUseCache(false);
        java.lang.ClassLoader classLoader30 = enhancer21.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer31.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader35 = enhancer31.getClassLoader();
        org.mockito.cglib.proxy.Callback callback36 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray37 = new org.mockito.cglib.proxy.Callback[] { callback36 };
        enhancer31.setCallbacks(callbackArray37);
        enhancer31.setSerialVersionUID((java.lang.Long) 0L);
        enhancer31.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader44 = enhancer43.getClassLoader();
        enhancer43.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader47 = enhancer43.getClassLoader();
        org.mockito.cglib.proxy.Callback callback48 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray49 = new org.mockito.cglib.proxy.Callback[] { callback48 };
        enhancer43.setCallbacks(callbackArray49);
        org.mockito.cglib.proxy.Enhancer enhancer51 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader52 = enhancer51.getClassLoader();
        enhancer51.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader55 = enhancer51.getClassLoader();
        java.lang.Class class56 = null;
        enhancer51.setSuperclass(class56);
        java.lang.Class<?> wildcardClass58 = enhancer51.getClass();
        boolean boolean59 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass58);
        enhancer43.setSuperclass((java.lang.Class) wildcardClass58);
        enhancer31.setSuperclass((java.lang.Class) wildcardClass58);
        java.lang.Class[] classArray62 = new java.lang.Class[] { wildcardClass58 };
        enhancer21.setInterfaces(classArray62);
        enhancer0.setInterfaces(classArray62);
        boolean boolean65 = enhancer0.getAttemptLoad();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(callbackArray12);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(callbackArray37);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(callbackArray49);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test09993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09993");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback3 = null;
        enhancer0.setCallback(callback3);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Callback callback8 = null;
        enhancer0.setCallback(callback8);
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.proxy.Callback callback12 = null;
        enhancer0.setCallback(callback12);
        java.lang.Class[] classArray14 = null;
        enhancer0.setInterfaces(classArray14);
        org.mockito.asm.ClassVisitor classVisitor16 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy7);
    }

    @Test
    public void test09994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09994");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.proxy.Callback callback3 = null;
        enhancer0.setCallback(callback3);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = enhancer0.getNamingPolicy();
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter10 = null;
        enhancer0.setCallbackFilter(callbackFilter10);
        org.junit.Assert.assertNotNull(namingPolicy7);
    }

    @Test
    public void test09995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09995");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer3 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader4 = enhancer3.getClassLoader();
        enhancer3.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader7 = enhancer3.getClassLoader();
        org.mockito.cglib.proxy.Callback callback8 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray9 = new org.mockito.cglib.proxy.Callback[] { callback8 };
        enhancer3.setCallbacks(callbackArray9);
        enhancer3.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = enhancer3.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader18 = enhancer14.getClassLoader();
        java.lang.Class class19 = null;
        enhancer14.setSuperclass(class19);
        java.lang.Class<?> wildcardClass21 = enhancer14.getClass();
        boolean boolean22 = generatorStrategy13.equals((java.lang.Object) wildcardClass21);
        boolean boolean24 = generatorStrategy13.equals((java.lang.Object) '4');
        boolean boolean25 = generatorStrategy2.equals((java.lang.Object) boolean24);
        java.lang.Class<?> wildcardClass26 = generatorStrategy2.getClass();
        boolean boolean27 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass26);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertNotNull(callbackArray9);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test09996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09996");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        boolean boolean11 = enhancer7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer7.getStrategy();
        enhancer0.setStrategy(generatorStrategy12);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader18 = enhancer14.getClassLoader();
        java.lang.Class class19 = null;
        enhancer14.setSuperclass(class19);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer21.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer21.setClassLoader(classLoader26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = enhancer21.getStrategy();
        java.lang.Class<?> wildcardClass29 = enhancer21.getClass();
        enhancer14.setSuperclass((java.lang.Class) wildcardClass29);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass29);
        boolean boolean32 = enhancer0.getUseCache();
        boolean boolean33 = enhancer0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader36 = enhancer35.getClassLoader();
        enhancer35.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader40 = enhancer39.getClassLoader();
        enhancer35.setClassLoader(classLoader40);
        enhancer35.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader45 = enhancer44.getClassLoader();
        enhancer44.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        enhancer44.setClassLoader(classLoader49);
        enhancer44.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = enhancer44.getNamingPolicy();
        enhancer35.setNamingPolicy(namingPolicy53);
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader56 = enhancer55.getClassLoader();
        enhancer55.setInterceptDuringConstruction(true);
        boolean boolean59 = namingPolicy53.equals((java.lang.Object) enhancer55);
        enhancer0.setNamingPolicy(namingPolicy53);
        org.mockito.cglib.proxy.Callback callback61 = null;
        enhancer0.setCallback(callback61);
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = null;
        enhancer0.setNamingPolicy(namingPolicy63);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter65 = null;
        enhancer0.setCallbackFilter(callbackFilter65);
        java.lang.ClassLoader classLoader67 = enhancer0.getClassLoader();
        java.lang.ClassLoader classLoader68 = enhancer0.getClassLoader();
        java.lang.ClassLoader classLoader69 = enhancer0.getClassLoader();
        boolean boolean70 = enhancer0.getUseCache();
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(classLoader67);
        org.junit.Assert.assertNotNull(classLoader68);
        org.junit.Assert.assertNotNull(classLoader69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test09997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09997");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = enhancer0.getNamingPolicy();
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader12 = enhancer11.getClassLoader();
        enhancer11.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader15 = enhancer11.getClassLoader();
        java.lang.Class class16 = null;
        enhancer11.setSuperclass(class16);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer11.getNamingPolicy();
        enhancer11.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer21.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer21.setClassLoader(classLoader26);
        enhancer21.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader31 = enhancer30.getClassLoader();
        enhancer30.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        enhancer30.setClassLoader(classLoader35);
        enhancer30.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = enhancer30.getNamingPolicy();
        enhancer21.setNamingPolicy(namingPolicy39);
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader42 = enhancer41.getClassLoader();
        enhancer41.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader45 = enhancer41.getClassLoader();
        java.lang.Class class46 = null;
        enhancer41.setSuperclass(class46);
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        enhancer48.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer52 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader53 = enhancer52.getClassLoader();
        enhancer48.setClassLoader(classLoader53);
        enhancer48.setUseCache(false);
        java.lang.ClassLoader classLoader57 = enhancer48.getClassLoader();
        enhancer41.setClassLoader(classLoader57);
        boolean boolean59 = namingPolicy39.equals((java.lang.Object) enhancer41);
        enhancer11.setNamingPolicy(namingPolicy39);
        org.mockito.cglib.proxy.Enhancer enhancer61 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader62 = enhancer61.getClassLoader();
        enhancer61.setInterceptDuringConstruction(true);
        boolean boolean65 = enhancer61.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = enhancer61.getStrategy();
        boolean boolean68 = generatorStrategy66.equals((java.lang.Object) (short) -1);
        java.lang.Class<?> wildcardClass69 = generatorStrategy66.getClass();
        boolean boolean70 = namingPolicy39.equals((java.lang.Object) wildcardClass69);
        org.mockito.cglib.proxy.Enhancer enhancer71 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader72 = enhancer71.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = enhancer71.getStrategy();
        enhancer71.setSerialVersionUID((java.lang.Long) 1L);
        boolean boolean76 = namingPolicy39.equals((java.lang.Object) enhancer71);
        java.lang.ClassLoader classLoader77 = enhancer71.getClassLoader();
        enhancer71.setAttemptLoad(true);
        boolean boolean80 = namingPolicy10.equals((java.lang.Object) true);
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(classLoader72);
        org.junit.Assert.assertNotNull(generatorStrategy73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(classLoader77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test09998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09998");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer7.setInterceptDuringConstruction(true);
        boolean boolean11 = enhancer7.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer7.getStrategy();
        enhancer0.setStrategy(generatorStrategy12);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader18 = enhancer14.getClassLoader();
        java.lang.Class class19 = null;
        enhancer14.setSuperclass(class19);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader22 = enhancer21.getClassLoader();
        enhancer21.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader26 = enhancer25.getClassLoader();
        enhancer21.setClassLoader(classLoader26);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = enhancer21.getStrategy();
        java.lang.Class<?> wildcardClass29 = enhancer21.getClass();
        enhancer14.setSuperclass((java.lang.Class) wildcardClass29);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass29);
        boolean boolean32 = enhancer0.getUseCache();
        boolean boolean33 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader35 = enhancer34.getClassLoader();
        enhancer34.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader39 = enhancer38.getClassLoader();
        enhancer34.setClassLoader(classLoader39);
        enhancer34.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader44 = enhancer43.getClassLoader();
        enhancer43.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer47 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader48 = enhancer47.getClassLoader();
        enhancer43.setClassLoader(classLoader48);
        enhancer43.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = enhancer43.getNamingPolicy();
        enhancer34.setNamingPolicy(namingPolicy52);
        org.mockito.cglib.proxy.Enhancer enhancer54 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader55 = enhancer54.getClassLoader();
        enhancer54.setUseCache(true);
        boolean boolean58 = enhancer54.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer59 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader60 = enhancer59.getClassLoader();
        enhancer59.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader63 = enhancer59.getClassLoader();
        java.lang.Class class64 = null;
        enhancer59.setSuperclass(class64);
        org.mockito.cglib.proxy.Enhancer enhancer66 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader67 = enhancer66.getClassLoader();
        enhancer66.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer70 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader71 = enhancer70.getClassLoader();
        enhancer66.setClassLoader(classLoader71);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy73 = enhancer66.getStrategy();
        java.lang.Class<?> wildcardClass74 = enhancer66.getClass();
        enhancer59.setSuperclass((java.lang.Class) wildcardClass74);
        enhancer54.setSuperclass((java.lang.Class) wildcardClass74);
        boolean boolean77 = namingPolicy52.equals((java.lang.Object) enhancer54);
        boolean boolean79 = namingPolicy52.equals((java.lang.Object) 'a');
        enhancer0.setNamingPolicy(namingPolicy52);
        enhancer0.setUseCache(true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj83 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(classLoader48);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(classLoader60);
        org.junit.Assert.assertNotNull(classLoader63);
        org.junit.Assert.assertNotNull(classLoader67);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertNotNull(generatorStrategy73);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test09999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09999");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader1 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        java.lang.Class class5 = null;
        enhancer0.setSuperclass(class5);
        java.lang.ClassLoader classLoader7 = enhancer0.getClassLoader();
        boolean boolean8 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader10 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader13 = enhancer9.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader15 = enhancer14.getClassLoader();
        enhancer14.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader18 = enhancer14.getClassLoader();
        org.mockito.cglib.proxy.Callback callback19 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray20 = new org.mockito.cglib.proxy.Callback[] { callback19 };
        enhancer14.setCallbacks(callbackArray20);
        enhancer9.setCallbacks(callbackArray20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer9.getStrategy();
        enhancer0.setStrategy(generatorStrategy23);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        enhancer25.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = enhancer25.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader30 = enhancer29.getClassLoader();
        enhancer29.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader33 = enhancer29.getClassLoader();
        java.lang.Class class34 = null;
        enhancer29.setSuperclass(class34);
        java.lang.Class<?> wildcardClass36 = enhancer29.getClass();
        enhancer25.setSuperclass((java.lang.Class) wildcardClass36);
        boolean boolean38 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass36);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass36);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader41 = enhancer40.getClassLoader();
        enhancer40.setUseCache(true);
        boolean boolean44 = enhancer40.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = null;
        enhancer40.setNamingPolicy(namingPolicy45);
        java.lang.ClassLoader classLoader47 = enhancer40.getClassLoader();
        enhancer0.setClassLoader(classLoader47);
        enhancer0.setUseCache(false);
        org.mockito.asm.ClassVisitor classVisitor51 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(classLoader10);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNotNull(callbackArray20);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(classLoader47);
    }

    @Test
    public void test10000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test10000");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setUseFactory(false);
        org.mockito.cglib.proxy.Enhancer enhancer3 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader4 = enhancer3.getClassLoader();
        enhancer3.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader8 = enhancer7.getClassLoader();
        enhancer3.setClassLoader(classLoader8);
        enhancer3.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader13 = enhancer12.getClassLoader();
        enhancer12.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader17 = enhancer16.getClassLoader();
        enhancer12.setClassLoader(classLoader17);
        enhancer12.setUseCache(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = enhancer12.getNamingPolicy();
        enhancer3.setNamingPolicy(namingPolicy21);
        enhancer3.setInterceptDuringConstruction(true);
        enhancer3.setSerialVersionUID((java.lang.Long) 100L);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader28 = enhancer27.getClassLoader();
        enhancer27.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader32 = enhancer31.getClassLoader();
        enhancer27.setClassLoader(classLoader32);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = enhancer27.getStrategy();
        enhancer27.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        enhancer37.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = enhancer37.getStrategy();
        enhancer27.setStrategy(generatorStrategy40);
        enhancer3.setStrategy(generatorStrategy40);
        enhancer0.setStrategy(generatorStrategy40);
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader45 = enhancer44.getClassLoader();
        enhancer44.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader49 = enhancer48.getClassLoader();
        enhancer44.setClassLoader(classLoader49);
        enhancer44.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer53 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.ClassLoader classLoader54 = enhancer53.getClassLoader();
        enhancer53.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader57 = enhancer53.getClassLoader();
        org.mockito.cglib.proxy.Callback callback58 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray59 = new org.mockito.cglib.proxy.Callback[] { callback58 };
        enhancer53.setCallbacks(callbackArray59);
        enhancer44.setCallbacks(callbackArray59);
        enhancer0.setCallbacks(callbackArray59);
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = enhancer0.getNamingPolicy();
        enhancer0.setInterceptDuringConstruction(true);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(classLoader8);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(generatorStrategy40);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertNotNull(callbackArray59);
        org.junit.Assert.assertNotNull(namingPolicy63);
    }
}


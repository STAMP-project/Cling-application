import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test501");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        tDistribution34.setDegreesOfFreedom((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl39 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution34);
        double[] doubleArray44 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double45 = org.apache.commons.math.stat.StatUtils.product(doubleArray44);
        double[] doubleArray50 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double51 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray50);
        double double53 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray44, doubleArray50, (double) 10.0f);
        double double54 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double double56 = org.apache.commons.math.stat.StatUtils.variance(doubleArray44, (double) (byte) 1);
        double[] doubleArray61 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double62 = org.apache.commons.math.stat.StatUtils.product(doubleArray61);
        double[] doubleArray67 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double68 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray67);
        double double69 = org.apache.commons.math.stat.StatUtils.max(doubleArray67);
        double double70 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray67);
        double double71 = org.apache.commons.math.stat.StatUtils.variance(doubleArray67);
        double double72 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray61, doubleArray67);
        double double73 = org.apache.commons.math.stat.StatUtils.product(doubleArray61);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean75 = tTestImpl39.tTest(doubleArray44, doubleArray61, (double) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: -1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1820.0d) + "'", double45 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 5214.25d + "'", double53 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 679.5833333333334d + "'", double56 == 679.5833333333334d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + (-1820.0d) + "'", double62 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 100.0d + "'", double69 == 100.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 12706.0d + "'", double70 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 2310.0d + "'", double71 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + (-16.25d) + "'", double72 == (-16.25d));
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + (-1820.0d) + "'", double73 == (-1820.0d));
    }

    @Test
    public void test502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test502");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) 1L, (int) (short) 0, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double10 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, (double) (-1.0f));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid quantile value: -1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 35.0d + "'", double4 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test503");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        tDistribution34.setDegreesOfFreedom((double) 1L);
        double double39 = tDistribution34.getDegreesOfFreedom();
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl40 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution34);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary42 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean44 = tTestImpl40.tTest(0.5664835927122979d, statisticalSummary42, 1.053060673855556d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 1.053060673855556");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
    }

    @Test
    public void test504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test504");
        java.lang.Throwable throwable1 = null;
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException("", throwable1);
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException(throwable1);
    }

    @Test
    public void test505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test505");
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray3 = mathException2.getSuppressed();
        java.lang.Object[] objArray6 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("", objArray6);
        java.lang.Object[] objArray10 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("", objArray10);
        mathException7.addSuppressed((java.lang.Throwable) mathException11);
        java.lang.Object[] objArray15 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("", objArray15);
        java.lang.Object[] objArray19 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("", objArray19);
        mathException16.addSuppressed((java.lang.Throwable) mathException20);
        mathException7.addSuppressed((java.lang.Throwable) mathException20);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) throwableArray3, (java.lang.Throwable) mathException7);
        java.lang.Object[] objArray24 = mathException7.getArguments();
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray24);
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ");
        mathException25.addSuppressed((java.lang.Throwable) mathException27);
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException27);
        java.lang.String str30 = mathException27.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[1225.0]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "org.apache.commons.math.MathException: org.apache.commons.math.MathException: " + "'", str30, "org.apache.commons.math.MathException: org.apache.commons.math.MathException: ");
    }

    @Test
    public void test506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test506");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean13 = tTestImpl1.tTest(statisticalSummary10, statisticalSummary11, 0.5943989439169762d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.5943989439169762");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
    }

    @Test
    public void test507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test507");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        tDistribution34.setDegreesOfFreedom((double) 1L);
        double double39 = tDistribution34.getDegreesOfFreedom();
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl40 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution34);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory41 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution42 = distributionFactory41.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution44 = distributionFactory41.createTDistribution(0.8538434429284575d);
        double double45 = tDistribution44.getDegreesOfFreedom();
        double double46 = tDistribution44.getDegreesOfFreedom();
        tTestImpl40.setDistribution(tDistribution44);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary48 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary49 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double50 = tTestImpl40.tTest(statisticalSummary48, statisticalSummary49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory41);
        org.junit.Assert.assertNotNull(normalDistribution42);
        org.junit.Assert.assertNotNull(tDistribution44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.8538434429284575d + "'", double45 == 0.8538434429284575d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.8538434429284575d + "'", double46 == 0.8538434429284575d);
    }

    @Test
    public void test508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test508");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary31 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean34 = tTestImpl1.tTest(statisticalSummary31, statisticalSummary32, (double) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 10.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
    }

    @Test
    public void test509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test509");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        org.apache.commons.math.distribution.TDistribution tDistribution16 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl17 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution16);
        double[] doubleArray22 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double23 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray22);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double30 = org.apache.commons.math.stat.StatUtils.max(doubleArray28);
        double double31 = tTestImpl17.pairedT(doubleArray22, doubleArray28);
        double double32 = org.apache.commons.math.stat.StatUtils.max(doubleArray28);
        double double33 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray6, doubleArray28);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl34 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray39 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double40 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray39);
        double double41 = org.apache.commons.math.stat.StatUtils.max(doubleArray39);
        double[] doubleArray46 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double47 = org.apache.commons.math.stat.StatUtils.product(doubleArray46);
        double[] doubleArray52 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double53 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray52);
        double double55 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray46, doubleArray52, (double) 10.0f);
        double double56 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray46);
        double double57 = tTestImpl34.t(doubleArray39, doubleArray46);
        double double58 = tTestImpl1.t(doubleArray6, doubleArray46);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary60 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double61 = tTestImpl1.t(35.0d, statisticalSummary60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 100.0d + "'", double30 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 100.0d + "'", double32 == 100.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + (-16.25d) + "'", double33 == (-16.25d));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 100.0d + "'", double41 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + (-1820.0d) + "'", double47 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 5214.25d + "'", double55 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.5943989439169762d + "'", double57 == 0.5943989439169762d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
    }

    @Test
    public void test510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test510");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray6 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.max(doubleArray12);
        double double15 = tTestImpl1.pairedT(doubleArray6, doubleArray12);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray20);
        double double33 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray20, (int) (short) 1, (int) (short) 0);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl34 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray40 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double41 = org.apache.commons.math.stat.StatUtils.product(doubleArray40);
        double[] doubleArray46 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double47 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray46);
        double double49 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray40, doubleArray46, (double) 10.0f);
        double double50 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray40);
        double double53 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray40, (int) (short) 1, (int) (short) 0);
        double double54 = tTestImpl34.t((double) 1, doubleArray40);
        double double55 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray40);
        double double56 = org.apache.commons.math.stat.StatUtils.product(doubleArray40);
        double double57 = org.apache.commons.math.stat.StatUtils.product(doubleArray40);
        double double58 = tTestImpl1.homoscedasticT(doubleArray20, doubleArray40);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary59 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary60 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean62 = tTestImpl1.tTest(statisticalSummary59, statisticalSummary60, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + (-1820.0d) + "'", double41 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 5214.25d + "'", double49 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.5919401533569089d + "'", double54 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 3931.0d + "'", double55 == 3931.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + (-1820.0d) + "'", double56 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + (-1820.0d) + "'", double57 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
    }

    @Test
    public void test511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test511");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory21 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution22 = distributionFactory21.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution24 = distributionFactory21.createTDistribution(0.8538434429284575d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl25 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution24);
        tTestImpl0.setDistribution(tDistribution24);
        double[] doubleArray34 = new double[] { '4', (byte) 10, (byte) 10, (byte) 10, (short) 1, 1.0d };
        double double37 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray34, 0, (int) (short) 1);
        double double38 = org.apache.commons.math.stat.StatUtils.sum(doubleArray34);
        double double39 = tTestImpl0.t(0.0d, doubleArray34);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary41 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean43 = tTestImpl0.tTest(100.0d, statisticalSummary41, (-1.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: -1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(distributionFactory21);
        org.junit.Assert.assertNotNull(normalDistribution22);
        org.junit.Assert.assertNotNull(tDistribution24);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[52.0, 10.0, 10.0, 10.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 52.00000000000001d + "'", double37 == 52.00000000000001d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 84.0d + "'", double38 == 84.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.7925163190605438d + "'", double39 == 1.7925163190605438d);
    }

    @Test
    public void test512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test512");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution1 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl2 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution1);
        double[] doubleArray8 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double9 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray8);
        double double10 = tTestImpl2.t((double) 1.0f, doubleArray8);
        double[] doubleArray15 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double16 = org.apache.commons.math.stat.StatUtils.product(doubleArray15);
        double[] doubleArray21 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double22 = org.apache.commons.math.stat.StatUtils.product(doubleArray21);
        double[] doubleArray27 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double28 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray27);
        double double30 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray21, doubleArray27, (double) 10.0f);
        double double31 = tTestImpl2.pairedT(doubleArray15, doubleArray21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl32 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray37 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double38 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray37);
        double double39 = org.apache.commons.math.stat.StatUtils.max(doubleArray37);
        double[] doubleArray44 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double45 = org.apache.commons.math.stat.StatUtils.product(doubleArray44);
        double[] doubleArray50 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double51 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray50);
        double double53 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray44, doubleArray50, (double) 10.0f);
        double double54 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double double55 = tTestImpl32.t(doubleArray37, doubleArray44);
        double[] doubleArray60 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double61 = org.apache.commons.math.stat.StatUtils.product(doubleArray60);
        double[] doubleArray66 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double67 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray66);
        double double69 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray60, doubleArray66, (double) 10.0f);
        org.apache.commons.math.distribution.TDistribution tDistribution70 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl71 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution70);
        double[] doubleArray76 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double77 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray76);
        double[] doubleArray82 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double83 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray82);
        double double84 = org.apache.commons.math.stat.StatUtils.max(doubleArray82);
        double double85 = tTestImpl71.pairedT(doubleArray76, doubleArray82);
        double double86 = org.apache.commons.math.stat.StatUtils.max(doubleArray82);
        double double87 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray60, doubleArray82);
        double double88 = tTestImpl2.homoscedasticT(doubleArray37, doubleArray60);
        double[] doubleArray93 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double94 = org.apache.commons.math.stat.StatUtils.product(doubleArray93);
        double double95 = tTestImpl0.tTest(doubleArray60, doubleArray93);
        double double96 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.539663200366486d + "'", double10 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-1820.0d) + "'", double16 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1820.0d) + "'", double22 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 5214.25d + "'", double30 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1820.0d) + "'", double45 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 5214.25d + "'", double53 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.5943989439169762d + "'", double55 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + (-1820.0d) + "'", double61 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 5214.25d + "'", double69 == 5214.25d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 100.0d + "'", double84 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 100.0d + "'", double86 == 100.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + (-16.25d) + "'", double87 == (-16.25d));
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.5943989439169762d + "'", double88 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + (-1820.0d) + "'", double94 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 1.0d + "'", double95 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double96));
    }

    @Test
    public void test513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test513");
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException();
        java.lang.Object[] objArray4 = mathException3.getArguments();
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("hi!", objArray4);
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray7 = mathException6.getSuppressed();
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException6);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException();
        java.lang.Object[] objArray10 = mathException9.getArguments();
        mathException6.addSuppressed((java.lang.Throwable) mathException9);
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", objArray4, (java.lang.Throwable) mathException6);
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("hi!", objArray4);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
    }

    @Test
    public void test514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test514");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        // The following exception was thrown during execution in test generation
        try {
            double double38 = tDistribution34.inverseCumulativeProbability((double) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: p must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
    }

    @Test
    public void test515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test515");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        org.apache.commons.math.distribution.TDistribution tDistribution24 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl25 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution24);
        double[] doubleArray30 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double31 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray30);
        double[] doubleArray36 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double37 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray36);
        double double38 = org.apache.commons.math.stat.StatUtils.max(doubleArray36);
        double double39 = tTestImpl25.pairedT(doubleArray30, doubleArray36);
        double double40 = org.apache.commons.math.stat.StatUtils.max(doubleArray36);
        double double41 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray36);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl42 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray48 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double49 = org.apache.commons.math.stat.StatUtils.product(doubleArray48);
        double[] doubleArray54 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double55 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray54);
        double double57 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray48, doubleArray54, (double) 10.0f);
        double double58 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray48);
        double double61 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray48, (int) (short) 1, (int) (short) 0);
        double double62 = tTestImpl42.t((double) 1, doubleArray48);
        double double63 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray48);
        double double64 = org.apache.commons.math.stat.StatUtils.min(doubleArray48);
        double double67 = org.apache.commons.math.stat.StatUtils.min(doubleArray48, 1, (int) (byte) 1);
        double double68 = tTestImpl0.homoscedasticTTest(doubleArray36, doubleArray48);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary69 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary70 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean72 = tTestImpl0.tTest(statisticalSummary69, statisticalSummary70, (-1820.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: -1820.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + (-1820.0d) + "'", double49 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 5214.25d + "'", double57 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1.5919401533569089d + "'", double62 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 3931.0d + "'", double63 == 3931.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + (-1.0d) + "'", double64 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 1.0d + "'", double67 == 1.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.5739591588987152d + "'", double68 == 0.5739591588987152d);
    }

    @Test
    public void test516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test516");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        tDistribution34.setDegreesOfFreedom((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl39 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution34);
        double[] doubleArray44 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double45 = org.apache.commons.math.stat.StatUtils.product(doubleArray44);
        double[] doubleArray50 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double51 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray50);
        double double53 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray44, doubleArray50, (double) 10.0f);
        double double54 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double double56 = org.apache.commons.math.stat.StatUtils.variance(doubleArray44, (double) (byte) 1);
        double[] doubleArray58 = new double[] { '#' };
        double double59 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray58);
        double double60 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray58);
        double double61 = org.apache.commons.math.stat.StatUtils.min(doubleArray58);
        double double65 = org.apache.commons.math.stat.StatUtils.variance(doubleArray58, 0.0d, (int) (short) 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double66 = tTestImpl39.pairedTTest(doubleArray44, doubleArray58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input arrays must have the same (positive) length.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1820.0d) + "'", double45 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 5214.25d + "'", double53 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 679.5833333333334d + "'", double56 == 679.5833333333334d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[35.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1225.0d + "'", double59 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1225.0d + "'", double60 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 35.0d + "'", double61 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
    }

    @Test
    public void test517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test517");
        double[] doubleArray4 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double5 = org.apache.commons.math.stat.StatUtils.product(doubleArray4);
        double[] doubleArray10 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double11 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray10);
        double double13 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray4, doubleArray10, (double) 10.0f);
        org.apache.commons.math.distribution.TDistribution tDistribution14 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution14);
        double[] doubleArray20 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double21 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double28 = org.apache.commons.math.stat.StatUtils.max(doubleArray26);
        double double29 = tTestImpl15.pairedT(doubleArray20, doubleArray26);
        double double30 = org.apache.commons.math.stat.StatUtils.max(doubleArray26);
        double double31 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray4, doubleArray26);
        double double32 = org.apache.commons.math.stat.StatUtils.variance(doubleArray26);
        org.apache.commons.math.distribution.TDistribution tDistribution33 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl34 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution33);
        double[] doubleArray39 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double40 = org.apache.commons.math.stat.StatUtils.product(doubleArray39);
        double[] doubleArray45 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double46 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray45);
        double double48 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray39, doubleArray45, (double) 10.0f);
        org.apache.commons.math.distribution.TDistribution tDistribution49 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl50 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution49);
        double[] doubleArray55 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double56 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray55);
        double[] doubleArray61 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double62 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray61);
        double double63 = org.apache.commons.math.stat.StatUtils.max(doubleArray61);
        double double64 = tTestImpl50.pairedT(doubleArray55, doubleArray61);
        double double65 = org.apache.commons.math.stat.StatUtils.max(doubleArray61);
        double double66 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray39, doubleArray61);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl67 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray72 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double73 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray72);
        double double74 = org.apache.commons.math.stat.StatUtils.max(doubleArray72);
        double[] doubleArray79 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double80 = org.apache.commons.math.stat.StatUtils.product(doubleArray79);
        double[] doubleArray85 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double86 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray85);
        double double88 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray79, doubleArray85, (double) 10.0f);
        double double89 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray79);
        double double90 = tTestImpl67.t(doubleArray72, doubleArray79);
        double double91 = tTestImpl34.t(doubleArray39, doubleArray79);
        double double92 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray26, doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1820.0d) + "'", double5 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5214.25d + "'", double13 == 5214.25d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 100.0d + "'", double30 == 100.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-16.25d) + "'", double31 == (-16.25d));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 2310.0d + "'", double32 == 2310.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + (-1820.0d) + "'", double40 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 5214.25d + "'", double48 == 5214.25d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 100.0d + "'", double63 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 100.0d + "'", double65 == 100.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + (-16.25d) + "'", double66 == (-16.25d));
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 100.0d + "'", double74 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + (-1820.0d) + "'", double80 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 5214.25d + "'", double88 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double89));
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.5943989439169762d + "'", double90 == 0.5943989439169762d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 16.25d + "'", double92 == 16.25d);
    }

    @Test
    public void test518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test518");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution2 = distributionFactory0.createPoissonDistribution(0.03982783727702899d);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution4 = distributionFactory0.createExponentialDistribution((double) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.BinomialDistribution binomialDistribution7 = distributionFactory0.createBinomialDistribution((int) (byte) 100, (double) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability of success must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(poissonDistribution2);
        org.junit.Assert.assertNotNull(exponentialDistribution4);
    }

    @Test
    public void test519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test519");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution5 = distributionFactory0.createNormalDistribution();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.PascalDistribution pascalDistribution8 = distributionFactory0.createPascalDistribution(10, 1.5919401533569089d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability of success must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(normalDistribution5);
    }

    @Test
    public void test520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test520");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution22 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl23 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double[] doubleArray34 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        double double36 = org.apache.commons.math.stat.StatUtils.max(doubleArray34);
        double double37 = tTestImpl23.pairedT(doubleArray28, doubleArray34);
        double double38 = tTestImpl0.t(100.0d, doubleArray34);
        org.apache.commons.math.distribution.TDistribution tDistribution39 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl40 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution39);
        double[] doubleArray46 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double47 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray46);
        double double48 = tTestImpl40.t((double) 1.0f, doubleArray46);
        double[] doubleArray53 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double54 = org.apache.commons.math.stat.StatUtils.product(doubleArray53);
        double[] doubleArray59 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double60 = org.apache.commons.math.stat.StatUtils.product(doubleArray59);
        double[] doubleArray65 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double66 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray65);
        double double68 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray59, doubleArray65, (double) 10.0f);
        double double69 = tTestImpl40.pairedT(doubleArray53, doubleArray59);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory70 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution71 = distributionFactory70.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution73 = distributionFactory70.createTDistribution(0.8538434429284575d);
        double double74 = tDistribution73.getDegreesOfFreedom();
        tTestImpl40.setDistribution(tDistribution73);
        tDistribution73.setDegreesOfFreedom((double) 1L);
        double double78 = tDistribution73.getDegreesOfFreedom();
        tTestImpl0.setDistribution(tDistribution73);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary81 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean83 = tTestImpl0.tTest(0.5739591588987152d, statisticalSummary81, 0.670531799205166d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.670531799205166");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-2.579976173587085d) + "'", double38 == (-2.579976173587085d));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1.539663200366486d + "'", double48 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + (-1820.0d) + "'", double54 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + (-1820.0d) + "'", double60 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 5214.25d + "'", double68 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertNotNull(distributionFactory70);
        org.junit.Assert.assertNotNull(normalDistribution71);
        org.junit.Assert.assertNotNull(tDistribution73);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.8538434429284575d + "'", double74 == 0.8538434429284575d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 1.0d + "'", double78 == 1.0d);
    }

    @Test
    public void test521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test521");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        double[] doubleArray29 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double30 = org.apache.commons.math.stat.StatUtils.product(doubleArray29);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray29, doubleArray35, (double) 10.0f);
        double double39 = tTestImpl0.tTest(5214.25d, doubleArray35);
        org.apache.commons.math.distribution.TDistribution tDistribution40 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl41 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution40);
        double[] doubleArray47 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double48 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47);
        double double49 = tTestImpl41.t((double) 1.0f, doubleArray47);
        double[] doubleArray54 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double55 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray54);
        double double56 = org.apache.commons.math.stat.StatUtils.max(doubleArray54);
        double double57 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray54);
        double double58 = org.apache.commons.math.stat.StatUtils.variance(doubleArray54);
        double double59 = org.apache.commons.math.stat.StatUtils.variance(doubleArray54);
        double double60 = tTestImpl0.homoscedasticT(doubleArray47, doubleArray54);
        org.apache.commons.math.distribution.TDistribution tDistribution61 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl62 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution61);
        double[] doubleArray67 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double68 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray67);
        double[] doubleArray73 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double74 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray73);
        double double75 = org.apache.commons.math.stat.StatUtils.max(doubleArray73);
        double double76 = tTestImpl62.pairedT(doubleArray67, doubleArray73);
        double double78 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray73, 0.03982783727702899d);
        double double79 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray73);
        double[] doubleArray81 = new double[] { '#' };
        double double82 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray81);
        double double83 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray81);
        double double84 = org.apache.commons.math.stat.StatUtils.product(doubleArray81);
        double double85 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray81);
        double double88 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray81, 0, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double89 = tTestImpl0.pairedTTest(doubleArray73, doubleArray81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input arrays must have the same (positive) length.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1820.0d) + "'", double30 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 5214.25d + "'", double38 == 5214.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2.2065780869162666E-7d + "'", double39 == 2.2065780869162666E-7d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.539663200366486d + "'", double49 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 100.0d + "'", double56 == 100.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 12706.0d + "'", double57 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 2310.0d + "'", double58 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2310.0d + "'", double59 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 100.0d + "'", double75 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + (-1.0d) + "'", double78 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 12706.0d + "'", double79 == 12706.0d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[35.0]");
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 1225.0d + "'", double82 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1225.0d + "'", double83 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 35.0d + "'", double84 == 35.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 3.5553480614894135d + "'", double85 == 3.5553480614894135d);
        org.junit.Assert.assertTrue(Double.isNaN(double88));
    }

    @Test
    public void test522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test522");
        double[] doubleArray4 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray4);
        // The following exception was thrown during execution in test generation
        try {
            double double8 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray4, (int) (byte) 10, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test523");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray6 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.max(doubleArray12);
        double double15 = tTestImpl1.pairedT(doubleArray6, doubleArray12);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray20);
        double double33 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray20, (int) (short) 1, (int) (short) 0);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl34 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray40 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double41 = org.apache.commons.math.stat.StatUtils.product(doubleArray40);
        double[] doubleArray46 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double47 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray46);
        double double49 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray40, doubleArray46, (double) 10.0f);
        double double50 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray40);
        double double53 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray40, (int) (short) 1, (int) (short) 0);
        double double54 = tTestImpl34.t((double) 1, doubleArray40);
        double double55 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray40);
        double double56 = org.apache.commons.math.stat.StatUtils.product(doubleArray40);
        double double57 = org.apache.commons.math.stat.StatUtils.product(doubleArray40);
        double double58 = tTestImpl1.homoscedasticT(doubleArray20, doubleArray40);
        double[] doubleArray60 = new double[] { (-1.0f) };
        double double61 = org.apache.commons.math.stat.StatUtils.min(doubleArray60);
        double double62 = org.apache.commons.math.stat.StatUtils.max(doubleArray60);
        double[] doubleArray63 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double64 = tTestImpl1.pairedTTest(doubleArray60, doubleArray63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + (-1820.0d) + "'", double41 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 5214.25d + "'", double49 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.5919401533569089d + "'", double54 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 3931.0d + "'", double55 == 3931.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + (-1820.0d) + "'", double56 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + (-1820.0d) + "'", double57 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + (-1.0d) + "'", double61 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + (-1.0d) + "'", double62 == (-1.0d));
    }

    @Test
    public void test524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test524");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray6 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.max(doubleArray12);
        double double15 = tTestImpl1.pairedT(doubleArray6, doubleArray12);
        double double16 = org.apache.commons.math.stat.StatUtils.max(doubleArray12);
        double double17 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        // The following exception was thrown during execution in test generation
        try {
            double double20 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray12, (int) (short) 0, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 100.0d + "'", double16 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test525");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        tDistribution34.setDegreesOfFreedom((double) 1L);
        double double39 = tDistribution34.getDegreesOfFreedom();
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl40 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution34);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory41 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution42 = distributionFactory41.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution44 = distributionFactory41.createTDistribution(0.8538434429284575d);
        double double45 = tDistribution44.getDegreesOfFreedom();
        double double46 = tDistribution44.getDegreesOfFreedom();
        tTestImpl40.setDistribution(tDistribution44);
        double[] doubleArray48 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl49 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray54 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double55 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray54);
        double double56 = org.apache.commons.math.stat.StatUtils.max(doubleArray54);
        double[] doubleArray61 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double62 = org.apache.commons.math.stat.StatUtils.product(doubleArray61);
        double[] doubleArray67 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double68 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray67);
        double double70 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray61, doubleArray67, (double) 10.0f);
        double double71 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray61);
        double double72 = tTestImpl49.t(doubleArray54, doubleArray61);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean74 = tTestImpl40.pairedTTest(doubleArray48, doubleArray54, (-5200.000000000001d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: -5200.000000000001");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory41);
        org.junit.Assert.assertNotNull(normalDistribution42);
        org.junit.Assert.assertNotNull(tDistribution44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.8538434429284575d + "'", double45 == 0.8538434429284575d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.8538434429284575d + "'", double46 == 0.8538434429284575d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 100.0d + "'", double56 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + (-1820.0d) + "'", double62 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 5214.25d + "'", double70 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.5943989439169762d + "'", double72 == 0.5943989439169762d);
    }

    @Test
    public void test526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test526");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution21 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double30 = tTestImpl22.t((double) 1.0f, doubleArray28);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double37 = org.apache.commons.math.stat.StatUtils.max(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray35);
        double double39 = tTestImpl0.pairedT(doubleArray28, doubleArray35);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary40 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary41 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double42 = tTestImpl0.tTest(statisticalSummary40, statisticalSummary41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.539663200366486d + "'", double30 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 12706.0d + "'", double38 == 12706.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
    }

    @Test
    public void test527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test527");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution1 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl2 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution1);
        double[] doubleArray8 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double9 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray8);
        double double10 = tTestImpl2.t((double) 1.0f, doubleArray8);
        double[] doubleArray15 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double16 = org.apache.commons.math.stat.StatUtils.product(doubleArray15);
        double[] doubleArray21 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double22 = org.apache.commons.math.stat.StatUtils.product(doubleArray21);
        double[] doubleArray27 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double28 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray27);
        double double30 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray21, doubleArray27, (double) 10.0f);
        double double31 = tTestImpl2.pairedT(doubleArray15, doubleArray21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl32 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray37 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double38 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray37);
        double double39 = org.apache.commons.math.stat.StatUtils.max(doubleArray37);
        double[] doubleArray44 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double45 = org.apache.commons.math.stat.StatUtils.product(doubleArray44);
        double[] doubleArray50 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double51 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray50);
        double double53 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray44, doubleArray50, (double) 10.0f);
        double double54 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double double55 = tTestImpl32.t(doubleArray37, doubleArray44);
        double[] doubleArray60 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double61 = org.apache.commons.math.stat.StatUtils.product(doubleArray60);
        double[] doubleArray66 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double67 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray66);
        double double69 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray60, doubleArray66, (double) 10.0f);
        org.apache.commons.math.distribution.TDistribution tDistribution70 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl71 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution70);
        double[] doubleArray76 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double77 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray76);
        double[] doubleArray82 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double83 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray82);
        double double84 = org.apache.commons.math.stat.StatUtils.max(doubleArray82);
        double double85 = tTestImpl71.pairedT(doubleArray76, doubleArray82);
        double double86 = org.apache.commons.math.stat.StatUtils.max(doubleArray82);
        double double87 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray60, doubleArray82);
        double double88 = tTestImpl2.homoscedasticT(doubleArray37, doubleArray60);
        double[] doubleArray93 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double94 = org.apache.commons.math.stat.StatUtils.product(doubleArray93);
        double double95 = tTestImpl0.tTest(doubleArray60, doubleArray93);
        // The following exception was thrown during execution in test generation
        try {
            double double98 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray93, 0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.539663200366486d + "'", double10 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-1820.0d) + "'", double16 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1820.0d) + "'", double22 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 5214.25d + "'", double30 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1820.0d) + "'", double45 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 5214.25d + "'", double53 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.5943989439169762d + "'", double55 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + (-1820.0d) + "'", double61 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 5214.25d + "'", double69 == 5214.25d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 100.0d + "'", double84 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 100.0d + "'", double86 == 100.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + (-16.25d) + "'", double87 == (-16.25d));
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.5943989439169762d + "'", double88 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + (-1820.0d) + "'", double94 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 1.0d + "'", double95 == 1.0d);
    }

    @Test
    public void test528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test528");
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException();
        java.lang.Object[] objArray3 = mathException2.getArguments();
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("hi!", objArray3);
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray6 = mathException5.getSuppressed();
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException5);
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException();
        java.lang.Object[] objArray9 = mathException8.getArguments();
        mathException5.addSuppressed((java.lang.Throwable) mathException8);
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", objArray3, (java.lang.Throwable) mathException5);
        java.lang.Object[] objArray12 = mathException5.getArguments();
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[]");
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
    }

    @Test
    public void test529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test529");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        tDistribution34.setDegreesOfFreedom((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl39 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution34);
        double[] doubleArray41 = new double[] { '#' };
        double double42 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray41);
        double double43 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray41);
        double double44 = org.apache.commons.math.stat.StatUtils.min(doubleArray41);
        double double48 = org.apache.commons.math.stat.StatUtils.variance(doubleArray41, 0.0d, (int) (short) 0, 0);
        double double49 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray41);
        double double50 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray41);
        double[] doubleArray52 = new double[] { '#' };
        double double53 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray52);
        double double54 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray52);
        double double55 = org.apache.commons.math.stat.StatUtils.product(doubleArray52);
        double double56 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray52);
        double double58 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray52, (double) 100.0f);
        double double61 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray52, (int) (byte) 0, 1);
        double double62 = org.apache.commons.math.stat.StatUtils.variance(doubleArray52);
        // The following exception was thrown during execution in test generation
        try {
            double double63 = tTestImpl39.pairedTTest(doubleArray41, doubleArray52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array lengths must be equal and at least 2.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[35.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1225.0d + "'", double42 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1225.0d + "'", double43 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 35.0d + "'", double44 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 34.99999999999999d + "'", double49 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 3.5553480614894135d + "'", double50 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[35.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1225.0d + "'", double53 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1225.0d + "'", double54 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 35.0d + "'", double55 == 35.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 3.5553480614894135d + "'", double56 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 35.0d + "'", double58 == 35.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1225.0d + "'", double61 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
    }

    @Test
    public void test530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test530");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        double[] doubleArray33 = new double[] { '#' };
        double double34 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray33);
        double double35 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray33);
        double double36 = org.apache.commons.math.stat.StatUtils.product(doubleArray33);
        double double37 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray33);
        double double39 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray33, (double) 100.0f);
        double double42 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray33, (int) (byte) 0, 1);
        // The following exception was thrown during execution in test generation
        try {
            double double43 = tTestImpl1.t((double) (short) -1, doubleArray33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1225.0d + "'", double34 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1225.0d + "'", double35 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 35.0d + "'", double36 == 35.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 3.5553480614894135d + "'", double37 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 35.0d + "'", double39 == 35.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1225.0d + "'", double42 == 1225.0d);
    }

    @Test
    public void test531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test531");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution22 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl23 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double[] doubleArray34 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        double double36 = org.apache.commons.math.stat.StatUtils.max(doubleArray34);
        double double37 = tTestImpl23.pairedT(doubleArray28, doubleArray34);
        double double38 = tTestImpl0.t(100.0d, doubleArray34);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl39 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray45 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double46 = org.apache.commons.math.stat.StatUtils.product(doubleArray45);
        double[] doubleArray51 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double52 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray51);
        double double54 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray45, doubleArray51, (double) 10.0f);
        double double55 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray45);
        double double58 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray45, (int) (short) 1, (int) (short) 0);
        double double59 = tTestImpl39.t((double) 1, doubleArray45);
        double double60 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray45);
        double double61 = org.apache.commons.math.stat.StatUtils.min(doubleArray45);
        double double64 = org.apache.commons.math.stat.StatUtils.min(doubleArray45, 1, (int) (byte) 1);
        double[] doubleArray65 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean67 = tTestImpl0.tTest(doubleArray45, doubleArray65, (double) 10.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 10.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-2.579976173587085d) + "'", double38 == (-2.579976173587085d));
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-1820.0d) + "'", double46 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 5214.25d + "'", double54 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.5919401533569089d + "'", double59 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 3931.0d + "'", double60 == 3931.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + (-1.0d) + "'", double61 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 1.0d + "'", double64 == 1.0d);
    }

    @Test
    public void test532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test532");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        tDistribution34.setDegreesOfFreedom((double) 1L);
        double double39 = tDistribution34.getDegreesOfFreedom();
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl40 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution34);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory41 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution42 = distributionFactory41.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution44 = distributionFactory41.createTDistribution(0.8538434429284575d);
        double double45 = tDistribution44.getDegreesOfFreedom();
        double double46 = tDistribution44.getDegreesOfFreedom();
        tTestImpl40.setDistribution(tDistribution44);
        // The following exception was thrown during execution in test generation
        try {
            double double49 = tDistribution44.inverseCumulativeProbability(16.25d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: p must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory41);
        org.junit.Assert.assertNotNull(normalDistribution42);
        org.junit.Assert.assertNotNull(tDistribution44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.8538434429284575d + "'", double45 == 0.8538434429284575d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.8538434429284575d + "'", double46 == 0.8538434429284575d);
    }

    @Test
    public void test533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test533");
        java.lang.Object[] objArray3 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("", objArray3);
        java.lang.Object[] objArray7 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("", objArray7);
        mathException4.addSuppressed((java.lang.Throwable) mathException8);
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException8);
        java.lang.Throwable[] throwableArray11 = mathException10.getSuppressed();
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Object[]) throwableArray11);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[1225.0]");
        org.junit.Assert.assertNotNull(throwableArray11);
    }

    @Test
    public void test534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test534");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double3 = org.apache.commons.math.stat.StatUtils.mean(doubleArray0, 0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test535");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        org.apache.commons.math.distribution.TDistribution tDistribution24 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl25 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution24);
        double[] doubleArray30 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double31 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray30);
        double[] doubleArray36 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double37 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray36);
        double double38 = org.apache.commons.math.stat.StatUtils.max(doubleArray36);
        double double39 = tTestImpl25.pairedT(doubleArray30, doubleArray36);
        double double40 = org.apache.commons.math.stat.StatUtils.max(doubleArray36);
        double double41 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray36);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl42 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray48 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double49 = org.apache.commons.math.stat.StatUtils.product(doubleArray48);
        double[] doubleArray54 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double55 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray54);
        double double57 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray48, doubleArray54, (double) 10.0f);
        double double58 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray48);
        double double61 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray48, (int) (short) 1, (int) (short) 0);
        double double62 = tTestImpl42.t((double) 1, doubleArray48);
        double double63 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray48);
        double double64 = org.apache.commons.math.stat.StatUtils.min(doubleArray48);
        double double67 = org.apache.commons.math.stat.StatUtils.min(doubleArray48, 1, (int) (byte) 1);
        double double68 = tTestImpl0.homoscedasticTTest(doubleArray36, doubleArray48);
        double double69 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + (-1820.0d) + "'", double49 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 5214.25d + "'", double57 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1.5919401533569089d + "'", double62 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 3931.0d + "'", double63 == 3931.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + (-1.0d) + "'", double64 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 1.0d + "'", double67 == 1.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.5739591588987152d + "'", double68 == 0.5739591588987152d);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
    }

    @Test
    public void test536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test536");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray6 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.max(doubleArray12);
        double double15 = tTestImpl1.pairedT(doubleArray6, doubleArray12);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl16 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray22 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double23 = org.apache.commons.math.stat.StatUtils.product(doubleArray22);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double31 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray22, doubleArray28, (double) 10.0f);
        double double32 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray22);
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray22, (int) (short) 1, (int) (short) 0);
        double double36 = tTestImpl16.t((double) 1, doubleArray22);
        org.apache.commons.math.distribution.TDistribution tDistribution38 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl39 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution38);
        double[] doubleArray44 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double45 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double[] doubleArray50 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double51 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray50);
        double double52 = org.apache.commons.math.stat.StatUtils.max(doubleArray50);
        double double53 = tTestImpl39.pairedT(doubleArray44, doubleArray50);
        double double54 = tTestImpl16.t(100.0d, doubleArray50);
        double double55 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray50);
        double double57 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray50, (double) (short) 100);
        double double58 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray12);
        // The following exception was thrown during execution in test generation
        try {
            double double61 = org.apache.commons.math.stat.StatUtils.product(doubleArray12, (int) (short) 0, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-1820.0d) + "'", double23 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 5214.25d + "'", double31 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.5919401533569089d + "'", double36 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 100.0d + "'", double52 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + (-2.579976173587085d) + "'", double54 == (-2.579976173587085d));
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 12706.0d + "'", double55 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 12706.0d + "'", double58 == 12706.0d);
    }

    @Test
    public void test537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test537");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, (double) 100.0f);
        // The following exception was thrown during execution in test generation
        try {
            double double11 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 1.0d, (int) (short) 100, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 35.0d + "'", double4 == 35.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
    }

    @Test
    public void test538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test538");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.0d, (double) 10L);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution7 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution10 = distributionFactory0.createGammaDistribution(100.0d, 34.99999999999999d);
        org.apache.commons.math.distribution.FDistribution fDistribution13 = distributionFactory0.createFDistribution(1.0d, (double) 100L);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution15 = distributionFactory0.createExponentialDistribution(12706.0d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution7);
        org.junit.Assert.assertNotNull(gammaDistribution10);
        org.junit.Assert.assertNotNull(fDistribution13);
        org.junit.Assert.assertNotNull(exponentialDistribution15);
    }

    @Test
    public void test539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test539");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution22 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl23 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double[] doubleArray34 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        double double36 = org.apache.commons.math.stat.StatUtils.max(doubleArray34);
        double double37 = tTestImpl23.pairedT(doubleArray28, doubleArray34);
        double double38 = tTestImpl0.t(100.0d, doubleArray34);
        double double39 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray34);
        double double42 = org.apache.commons.math.stat.StatUtils.max(doubleArray34, 0, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double45 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34, (int) (byte) -1, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-2.579976173587085d) + "'", double38 == (-2.579976173587085d));
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 12706.0d + "'", double39 == 12706.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
    }

    @Test
    public void test540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test540");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        double double6 = normalDistribution4.inverseCumulativeProbability(Double.NaN);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.9999995d + "'", double6 == 0.9999995d);
    }

    @Test
    public void test541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test541");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        tDistribution34.setDegreesOfFreedom((double) 1L);
        double double39 = tDistribution34.getDegreesOfFreedom();
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl40 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution34);
        double[] doubleArray45 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double46 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray45);
        double double47 = org.apache.commons.math.stat.StatUtils.max(doubleArray45);
        double double48 = org.apache.commons.math.stat.StatUtils.min(doubleArray45);
        double[] doubleArray50 = new double[] { '#' };
        double double51 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray50);
        double double52 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray50);
        double double53 = org.apache.commons.math.stat.StatUtils.min(doubleArray50);
        double double57 = org.apache.commons.math.stat.StatUtils.variance(doubleArray50, 0.0d, (int) (short) 0, 0);
        double double58 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray50);
        double double59 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray50);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean61 = tTestImpl40.homoscedasticTTest(doubleArray45, doubleArray50, 35.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 35.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 100.0d + "'", double47 == 100.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + (-1.0d) + "'", double48 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[35.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1225.0d + "'", double51 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1225.0d + "'", double52 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 35.0d + "'", double53 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 34.99999999999999d + "'", double58 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 3.5553480614894135d + "'", double59 == 3.5553480614894135d);
    }

    @Test
    public void test542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test542");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(10.0d, (double) (short) 1);
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution8 = distributionFactory0.createChiSquareDistribution((double) 'a');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.FDistribution fDistribution11 = distributionFactory0.createFDistribution((-0.4500776384309941d), (-0.4500776384309941d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(chiSquaredDistribution8);
    }

    @Test
    public void test543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test543");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution6 = distributionFactory0.createWeibullDistribution((double) (byte) 10, (double) 1);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution8 = distributionFactory0.createExponentialDistribution((double) (byte) 1);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution12 = distributionFactory0.createCauchyDistribution(679.5833333333334d, (-2.579976173587085d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Scale must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(weibullDistribution6);
        org.junit.Assert.assertNotNull(exponentialDistribution8);
        org.junit.Assert.assertNotNull(normalDistribution9);
    }

    @Test
    public void test544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test544");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution22 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl23 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double[] doubleArray34 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        double double36 = org.apache.commons.math.stat.StatUtils.max(doubleArray34);
        double double37 = tTestImpl23.pairedT(doubleArray28, doubleArray34);
        double double38 = tTestImpl0.t(100.0d, doubleArray34);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl40 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray46 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double47 = org.apache.commons.math.stat.StatUtils.product(doubleArray46);
        double[] doubleArray52 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double53 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray52);
        double double55 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray46, doubleArray52, (double) 10.0f);
        double double56 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray46);
        double double59 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray46, (int) (short) 1, (int) (short) 0);
        double double60 = tTestImpl40.t((double) 1, doubleArray46);
        org.apache.commons.math.distribution.TDistribution tDistribution62 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl63 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution62);
        double[] doubleArray68 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double69 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray68);
        double[] doubleArray74 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double75 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray74);
        double double76 = org.apache.commons.math.stat.StatUtils.max(doubleArray74);
        double double77 = tTestImpl63.pairedT(doubleArray68, doubleArray74);
        double double78 = tTestImpl40.t(100.0d, doubleArray74);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean80 = tTestImpl0.tTest((double) (-1L), doubleArray74, (double) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 10.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-2.579976173587085d) + "'", double38 == (-2.579976173587085d));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + (-1820.0d) + "'", double47 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 5214.25d + "'", double55 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.5919401533569089d + "'", double60 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 100.0d + "'", double76 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + (-2.579976173587085d) + "'", double78 == (-2.579976173587085d));
    }

    @Test
    public void test545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test545");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution5 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution7 = distributionFactory0.createExponentialDistribution(2.2065780869162666E-7d);
        org.apache.commons.math.distribution.HypergeometricDistribution hypergeometricDistribution11 = distributionFactory0.createHypergeometricDistribution((int) 'a', (int) ' ', (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution13 = distributionFactory0.createChiSquareDistribution((-16.25d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: alpha must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(normalDistribution5);
        org.junit.Assert.assertNotNull(exponentialDistribution7);
        org.junit.Assert.assertNotNull(hypergeometricDistribution11);
    }

    @Test
    public void test546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test546");
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException();
        java.lang.Object[] objArray3 = mathException2.getArguments();
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("hi!", objArray3);
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray6 = mathException5.getSuppressed();
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException5);
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException();
        java.lang.Object[] objArray9 = mathException8.getArguments();
        mathException5.addSuppressed((java.lang.Throwable) mathException8);
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", objArray3, (java.lang.Throwable) mathException5);
        java.lang.Object[] objArray12 = mathException11.getArguments();
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[]");
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
    }

    @Test
    public void test547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test547");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray6 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.max(doubleArray12);
        double double15 = tTestImpl1.pairedT(doubleArray6, doubleArray12);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl16 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray22 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double23 = org.apache.commons.math.stat.StatUtils.product(doubleArray22);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double31 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray22, doubleArray28, (double) 10.0f);
        double double32 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray22);
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray22, (int) (short) 1, (int) (short) 0);
        double double36 = tTestImpl16.t((double) 1, doubleArray22);
        org.apache.commons.math.distribution.TDistribution tDistribution38 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl39 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution38);
        double[] doubleArray44 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double45 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double[] doubleArray50 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double51 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray50);
        double double52 = org.apache.commons.math.stat.StatUtils.max(doubleArray50);
        double double53 = tTestImpl39.pairedT(doubleArray44, doubleArray50);
        double double54 = tTestImpl16.t(100.0d, doubleArray50);
        double double55 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray50);
        double double57 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray50, (double) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            double double61 = org.apache.commons.math.stat.StatUtils.variance(doubleArray50, (double) 100.0f, (int) '#', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-1820.0d) + "'", double23 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 5214.25d + "'", double31 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.5919401533569089d + "'", double36 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 100.0d + "'", double52 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + (-2.579976173587085d) + "'", double54 == (-2.579976173587085d));
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 12706.0d + "'", double55 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
    }

    @Test
    public void test548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test548");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        // The following exception was thrown during execution in test generation
        try {
            double double23 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray6, (int) (byte) -1, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
    }

    @Test
    public void test549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test549");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray2 = mathException1.getSuppressed();
        java.lang.Object[] objArray5 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("", objArray5);
        java.lang.Object[] objArray9 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("", objArray9);
        mathException6.addSuppressed((java.lang.Throwable) mathException10);
        java.lang.Object[] objArray14 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("", objArray14);
        java.lang.Object[] objArray18 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("", objArray18);
        mathException15.addSuppressed((java.lang.Throwable) mathException19);
        mathException6.addSuppressed((java.lang.Throwable) mathException19);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) throwableArray2, (java.lang.Throwable) mathException6);
        java.lang.Object[] objArray23 = mathException6.getArguments();
        java.lang.Throwable[] throwableArray24 = mathException6.getSuppressed();
        java.lang.Class<?> wildcardClass25 = throwableArray24.getClass();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[1225.0]");
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test550");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.0d, (double) 10L);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution7 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution10 = distributionFactory0.createGammaDistribution(100.0d, 34.99999999999999d);
        org.apache.commons.math.distribution.FDistribution fDistribution13 = distributionFactory0.createFDistribution(1.0d, (double) 100L);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution15 = distributionFactory0.createExponentialDistribution(34.99999999999999d);
        org.apache.commons.math.distribution.FDistribution fDistribution18 = distributionFactory0.createFDistribution(34.99999999999999d, (double) 'a');
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution20 = distributionFactory0.createExponentialDistribution(0.5739591588987152d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.FDistribution fDistribution23 = distributionFactory0.createFDistribution((double) (byte) 0, (double) 1L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution7);
        org.junit.Assert.assertNotNull(gammaDistribution10);
        org.junit.Assert.assertNotNull(fDistribution13);
        org.junit.Assert.assertNotNull(exponentialDistribution15);
        org.junit.Assert.assertNotNull(fDistribution18);
        org.junit.Assert.assertNotNull(exponentialDistribution20);
    }

    @Test
    public void test551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test551");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory21 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution22 = distributionFactory21.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution24 = distributionFactory21.createTDistribution(0.8538434429284575d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl25 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution24);
        tTestImpl0.setDistribution(tDistribution24);
        double[] doubleArray34 = new double[] { '4', (byte) 10, (byte) 10, (byte) 10, (short) 1, 1.0d };
        double double37 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray34, 0, (int) (short) 1);
        double double38 = org.apache.commons.math.stat.StatUtils.sum(doubleArray34);
        double double39 = tTestImpl0.t(0.0d, doubleArray34);
        double double41 = org.apache.commons.math.stat.StatUtils.variance(doubleArray34, 84.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double44 = org.apache.commons.math.stat.StatUtils.mean(doubleArray34, (int) (short) 10, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(distributionFactory21);
        org.junit.Assert.assertNotNull(normalDistribution22);
        org.junit.Assert.assertNotNull(tDistribution24);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[52.0, 10.0, 10.0, 10.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 52.00000000000001d + "'", double37 == 52.00000000000001d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 84.0d + "'", double38 == 84.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.7925163190605438d + "'", double39 == 1.7925163190605438d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 366.0d + "'", double41 == 366.0d);
    }

    @Test
    public void test552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test552");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.0d, (double) 10L);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution7 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution8 = distributionFactory0.createNormalDistribution();
        // The following exception was thrown during execution in test generation
        try {
            double double11 = normalDistribution8.cumulativeProbability((-1.0932601053173951d), (-6.003340578321836d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lower endpoint must be less than or equal to upper endpoint");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution7);
        org.junit.Assert.assertNotNull(normalDistribution8);
    }

    @Test
    public void test553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test553");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution1 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution3 = distributionFactory0.createChiSquareDistribution((double) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.PascalDistribution pascalDistribution6 = distributionFactory0.createPascalDistribution(0, 12706.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability of success must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(normalDistribution1);
        org.junit.Assert.assertNotNull(chiSquaredDistribution3);
    }

    @Test
    public void test554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test554");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution1 = null;
        tTestImpl0.setDistribution(tDistribution1);
        double[] doubleArray8 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double9 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray8);
        double double10 = org.apache.commons.math.stat.StatUtils.max(doubleArray8);
        double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray8);
        double[] doubleArray16 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double17 = org.apache.commons.math.stat.StatUtils.product(doubleArray16);
        double[] doubleArray22 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double23 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray22);
        double double25 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray16, doubleArray22, (double) 10.0f);
        double double26 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray16);
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray16, (int) (short) 1, (int) (short) 0);
        double double30 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray8, doubleArray16);
        double double31 = tTestImpl0.t((double) 100, doubleArray16);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl33 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray39 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double40 = org.apache.commons.math.stat.StatUtils.product(doubleArray39);
        double[] doubleArray45 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double46 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray45);
        double double48 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray39, doubleArray45, (double) 10.0f);
        double double49 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray39);
        double double52 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray39, (int) (short) 1, (int) (short) 0);
        double double53 = tTestImpl33.t((double) 1, doubleArray39);
        double double54 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray39);
        double double55 = tTestImpl0.t(36.0d, doubleArray39);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary57 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double58 = tTestImpl0.tTest((double) 100.0f, statisticalSummary57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 12706.0d + "'", double11 == 12706.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1820.0d) + "'", double17 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 5214.25d + "'", double25 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 16.25d + "'", double30 == 16.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-6.003340578321836d) + "'", double31 == (-6.003340578321836d));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + (-1820.0d) + "'", double40 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 5214.25d + "'", double48 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.5919401533569089d + "'", double53 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 3931.0d + "'", double54 == 3931.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + (-1.0932601053173951d) + "'", double55 == (-1.0932601053173951d));
    }

    @Test
    public void test555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test555");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution22 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl23 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double[] doubleArray34 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        double double36 = org.apache.commons.math.stat.StatUtils.max(doubleArray34);
        double double37 = tTestImpl23.pairedT(doubleArray28, doubleArray34);
        double double38 = tTestImpl0.t(100.0d, doubleArray34);
        double[] doubleArray43 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double44 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray43);
        double double45 = org.apache.commons.math.stat.StatUtils.max(doubleArray43);
        double double46 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray43);
        double[] doubleArray51 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double52 = org.apache.commons.math.stat.StatUtils.product(doubleArray51);
        double double54 = org.apache.commons.math.stat.StatUtils.variance(doubleArray51, (double) 10.0f);
        double double55 = tTestImpl0.tTest(doubleArray43, doubleArray51);
        org.apache.commons.math.distribution.TDistribution tDistribution56 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl57 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution56);
        double[] doubleArray63 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double64 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray63);
        double double65 = tTestImpl57.t((double) 1.0f, doubleArray63);
        double[] doubleArray70 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double71 = org.apache.commons.math.stat.StatUtils.product(doubleArray70);
        double[] doubleArray76 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double77 = org.apache.commons.math.stat.StatUtils.product(doubleArray76);
        double[] doubleArray82 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double83 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray82);
        double double85 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray76, doubleArray82, (double) 10.0f);
        double double86 = tTestImpl57.pairedT(doubleArray70, doubleArray76);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory87 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution88 = distributionFactory87.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution90 = distributionFactory87.createTDistribution(0.8538434429284575d);
        double double91 = tDistribution90.getDegreesOfFreedom();
        tTestImpl57.setDistribution(tDistribution90);
        tDistribution90.setDegreesOfFreedom((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl95 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution90);
        tTestImpl0.setDistribution(tDistribution90);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary97 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary98 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double99 = tTestImpl0.tTest(statisticalSummary97, statisticalSummary98);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-2.579976173587085d) + "'", double38 == (-2.579976173587085d));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 100.0d + "'", double45 == 100.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 12706.0d + "'", double46 == 12706.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-1820.0d) + "'", double52 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 679.5833333333334d + "'", double54 == 679.5833333333334d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.5801210456783388d + "'", double55 == 0.5801210456783388d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 1.539663200366486d + "'", double65 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + (-1820.0d) + "'", double71 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + (-1820.0d) + "'", double77 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 5214.25d + "'", double85 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertNotNull(distributionFactory87);
        org.junit.Assert.assertNotNull(normalDistribution88);
        org.junit.Assert.assertNotNull(tDistribution90);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.8538434429284575d + "'", double91 == 0.8538434429284575d);
    }

    @Test
    public void test556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test556");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution1 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution3 = distributionFactory0.createTDistribution(0.8538434429284575d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl4 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution3);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl6 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution7 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl8 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution7);
        double[] doubleArray13 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double14 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray13);
        double[] doubleArray19 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double20 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray19);
        double double21 = org.apache.commons.math.stat.StatUtils.max(doubleArray19);
        double double22 = tTestImpl8.pairedT(doubleArray13, doubleArray19);
        double double25 = org.apache.commons.math.stat.StatUtils.variance(doubleArray13, 1, (int) (short) 0);
        org.apache.commons.math.distribution.TDistribution tDistribution26 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl27 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution26);
        double[] doubleArray32 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double33 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray32);
        double[] doubleArray38 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double39 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray38);
        double double40 = org.apache.commons.math.stat.StatUtils.max(doubleArray38);
        double double41 = tTestImpl27.pairedT(doubleArray32, doubleArray38);
        double double44 = org.apache.commons.math.stat.StatUtils.variance(doubleArray32, 1, (int) (short) 0);
        double double45 = tTestImpl6.tTest(doubleArray13, doubleArray32);
        double double46 = tTestImpl4.tTest(10.858998997563567d, doubleArray32);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary47 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary48 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double49 = tTestImpl4.tTest(statisticalSummary47, statisticalSummary48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(normalDistribution1);
        org.junit.Assert.assertNotNull(tDistribution3);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.34087447893070477d + "'", double46 == 0.34087447893070477d);
    }

    @Test
    public void test557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test557");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.0d, (double) 10L);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution7 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution10 = distributionFactory0.createGammaDistribution(100.0d, 34.99999999999999d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution11 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution14 = distributionFactory0.createNormalDistribution((double) 'a', 2310.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.HypergeometricDistribution hypergeometricDistribution18 = distributionFactory0.createHypergeometricDistribution((int) (byte) 1, 1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: sample size must be non-negative.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution7);
        org.junit.Assert.assertNotNull(gammaDistribution10);
        org.junit.Assert.assertNotNull(normalDistribution11);
        org.junit.Assert.assertNotNull(normalDistribution14);
    }

    @Test
    public void test558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test558");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        double double21 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray6);
        double double22 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution23 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl24 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution23);
        double[] doubleArray30 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double31 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray30);
        double double32 = tTestImpl24.t((double) 1.0f, doubleArray30);
        double[] doubleArray37 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double38 = org.apache.commons.math.stat.StatUtils.product(doubleArray37);
        double[] doubleArray43 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double44 = org.apache.commons.math.stat.StatUtils.product(doubleArray43);
        double[] doubleArray49 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double50 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray49);
        double double52 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray43, doubleArray49, (double) 10.0f);
        double double53 = tTestImpl24.pairedT(doubleArray37, doubleArray43);
        double double54 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray6, doubleArray43);
        // The following exception was thrown during execution in test generation
        try {
            double double57 = org.apache.commons.math.stat.StatUtils.mean(doubleArray43, (int) (byte) 10, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 3931.0d + "'", double21 == 3931.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1820.0d) + "'", double22 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.539663200366486d + "'", double32 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-1820.0d) + "'", double38 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-1820.0d) + "'", double44 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 5214.25d + "'", double52 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
    }

    @Test
    public void test559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test559");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double4 = tTestImpl1.t(statisticalSummary2, statisticalSummary3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test560");
        double[] doubleArray4 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray4);
        double double6 = org.apache.commons.math.stat.StatUtils.max(doubleArray4);
        double double7 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray4);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double25 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12, (int) (short) 1, (int) (short) 0);
        double double26 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray4, doubleArray12);
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        java.lang.Class<?> wildcardClass28 = doubleArray12.getClass();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 12706.0d + "'", double7 == 12706.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 16.25d + "'", double26 == 16.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test561");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution22 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl23 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double[] doubleArray34 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        double double36 = org.apache.commons.math.stat.StatUtils.max(doubleArray34);
        double double37 = tTestImpl23.pairedT(doubleArray28, doubleArray34);
        double double38 = tTestImpl0.t(100.0d, doubleArray34);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary39 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary40 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double41 = tTestImpl0.t(statisticalSummary39, statisticalSummary40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-2.579976173587085d) + "'", double38 == (-2.579976173587085d));
    }

    @Test
    public void test562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test562");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        org.apache.commons.math.distribution.TDistribution tDistribution37 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl38 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution37);
        double[] doubleArray44 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double45 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double double46 = tTestImpl38.t((double) 1.0f, doubleArray44);
        double[] doubleArray51 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double52 = org.apache.commons.math.stat.StatUtils.product(doubleArray51);
        double[] doubleArray57 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double58 = org.apache.commons.math.stat.StatUtils.product(doubleArray57);
        double[] doubleArray63 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double64 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray63);
        double double66 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray57, doubleArray63, (double) 10.0f);
        double double67 = tTestImpl38.pairedT(doubleArray51, doubleArray57);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory68 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution69 = distributionFactory68.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution71 = distributionFactory68.createTDistribution(0.8538434429284575d);
        double double72 = tDistribution71.getDegreesOfFreedom();
        tTestImpl38.setDistribution(tDistribution71);
        tDistribution71.setDegreesOfFreedom((double) 1L);
        tTestImpl1.setDistribution(tDistribution71);
        double[] doubleArray78 = new double[] { '#' };
        double double79 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray78);
        double double80 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray78);
        double double81 = org.apache.commons.math.stat.StatUtils.min(doubleArray78);
        double double82 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray78);
        double[] doubleArray84 = new double[] { '#' };
        double double85 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray84);
        double double86 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray84);
        double double87 = org.apache.commons.math.stat.StatUtils.sum(doubleArray84);
        // The following exception was thrown during execution in test generation
        try {
            double double88 = tTestImpl1.homoscedasticTTest(doubleArray78, doubleArray84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.539663200366486d + "'", double46 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-1820.0d) + "'", double52 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + (-1820.0d) + "'", double58 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 5214.25d + "'", double66 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(distributionFactory68);
        org.junit.Assert.assertNotNull(normalDistribution69);
        org.junit.Assert.assertNotNull(tDistribution71);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.8538434429284575d + "'", double72 == 0.8538434429284575d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[35.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 1225.0d + "'", double79 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 1225.0d + "'", double80 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 35.0d + "'", double81 == 35.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 3.5553480614894135d + "'", double82 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[35.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1225.0d + "'", double85 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1225.0d + "'", double86 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 35.0d + "'", double87 == 35.0d);
    }

    @Test
    public void test563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test563");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution1 = null;
        tTestImpl0.setDistribution(tDistribution1);
        double[] doubleArray8 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double9 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray8);
        double double10 = org.apache.commons.math.stat.StatUtils.max(doubleArray8);
        double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray8);
        double[] doubleArray16 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double17 = org.apache.commons.math.stat.StatUtils.product(doubleArray16);
        double[] doubleArray22 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double23 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray22);
        double double25 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray16, doubleArray22, (double) 10.0f);
        double double26 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray16);
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray16, (int) (short) 1, (int) (short) 0);
        double double30 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray8, doubleArray16);
        double double31 = tTestImpl0.t((double) 100, doubleArray16);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl33 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray39 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double40 = org.apache.commons.math.stat.StatUtils.product(doubleArray39);
        double[] doubleArray45 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double46 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray45);
        double double48 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray39, doubleArray45, (double) 10.0f);
        double double49 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray39);
        double double52 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray39, (int) (short) 1, (int) (short) 0);
        double double53 = tTestImpl33.t((double) 1, doubleArray39);
        double double54 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray39);
        double double55 = tTestImpl0.t(36.0d, doubleArray39);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary56 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary57 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean59 = tTestImpl0.tTest(statisticalSummary56, statisticalSummary57, 1.5533732021085067d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 1.5533732021085067");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 12706.0d + "'", double11 == 12706.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1820.0d) + "'", double17 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 5214.25d + "'", double25 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 16.25d + "'", double30 == 16.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-6.003340578321836d) + "'", double31 == (-6.003340578321836d));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + (-1820.0d) + "'", double40 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 5214.25d + "'", double48 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.5919401533569089d + "'", double53 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 3931.0d + "'", double54 == 3931.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + (-1.0932601053173951d) + "'", double55 == (-1.0932601053173951d));
    }

    @Test
    public void test564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test564");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution2 = distributionFactory0.createChiSquareDistribution((double) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.FDistribution fDistribution5 = distributionFactory0.createFDistribution(0.1177019708001247d, (double) (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(chiSquaredDistribution2);
    }

    @Test
    public void test565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test565");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double1 = org.apache.commons.math.stat.StatUtils.sum(doubleArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test566");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution(1225.0d, 1.0d);
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution9 = distributionFactory0.createWeibullDistribution((double) 100, (double) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.FDistribution fDistribution12 = distributionFactory0.createFDistribution((double) (short) 0, 0.670531799205166d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(weibullDistribution9);
    }

    @Test
    public void test567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test567");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        double[] doubleArray29 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double30 = org.apache.commons.math.stat.StatUtils.product(doubleArray29);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray29, doubleArray35, (double) 10.0f);
        double double39 = tTestImpl0.tTest(5214.25d, doubleArray35);
        org.apache.commons.math.distribution.TDistribution tDistribution40 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl41 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution40);
        double[] doubleArray47 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double48 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47);
        double double49 = tTestImpl41.t((double) 1.0f, doubleArray47);
        double[] doubleArray54 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double55 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray54);
        double double56 = org.apache.commons.math.stat.StatUtils.max(doubleArray54);
        double double57 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray54);
        double double58 = org.apache.commons.math.stat.StatUtils.variance(doubleArray54);
        double double59 = org.apache.commons.math.stat.StatUtils.variance(doubleArray54);
        double double60 = tTestImpl0.homoscedasticT(doubleArray47, doubleArray54);
        double[] doubleArray66 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double67 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray66);
        double double68 = org.apache.commons.math.stat.StatUtils.max(doubleArray66);
        double double69 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray66);
        double double70 = org.apache.commons.math.stat.StatUtils.variance(doubleArray66);
        double double73 = org.apache.commons.math.stat.StatUtils.mean(doubleArray66, 1, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean75 = tTestImpl0.tTest(0.9119233630588404d, doubleArray66, (-16.25d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: -16.25");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1820.0d) + "'", double30 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 5214.25d + "'", double38 == 5214.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2.2065780869162666E-7d + "'", double39 == 2.2065780869162666E-7d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.539663200366486d + "'", double49 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 100.0d + "'", double56 == 100.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 12706.0d + "'", double57 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 2310.0d + "'", double58 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2310.0d + "'", double59 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 100.0d + "'", double68 == 100.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 12706.0d + "'", double69 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 2310.0d + "'", double70 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 52.00000000000001d + "'", double73 == 52.00000000000001d);
    }

    @Test
    public void test568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test568");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution22 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl23 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double[] doubleArray34 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        double double36 = org.apache.commons.math.stat.StatUtils.max(doubleArray34);
        double double37 = tTestImpl23.pairedT(doubleArray28, doubleArray34);
        double double38 = tTestImpl0.t(100.0d, doubleArray34);
        double double39 = org.apache.commons.math.stat.StatUtils.variance(doubleArray34);
        double double40 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-2.579976173587085d) + "'", double38 == (-2.579976173587085d));
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2310.0d + "'", double39 == 2310.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
    }

    @Test
    public void test569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test569");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        double double37 = tDistribution34.getDegreesOfFreedom();
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl38 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution34);
        double[] doubleArray40 = new double[] { '#' };
        double double41 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray40);
        double double42 = org.apache.commons.math.stat.StatUtils.min(doubleArray40);
        double double45 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray40, 1, 0);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl46 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray52 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double53 = org.apache.commons.math.stat.StatUtils.product(doubleArray52);
        double[] doubleArray58 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double59 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray58);
        double double61 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray52, doubleArray58, (double) 10.0f);
        double double62 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray52);
        double double65 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray52, (int) (short) 1, (int) (short) 0);
        double double66 = tTestImpl46.t((double) 1, doubleArray52);
        org.apache.commons.math.distribution.TDistribution tDistribution67 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl68 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution67);
        double[] doubleArray74 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double75 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray74);
        double double76 = tTestImpl68.t((double) 1.0f, doubleArray74);
        double[] doubleArray81 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double82 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray81);
        double double83 = org.apache.commons.math.stat.StatUtils.max(doubleArray81);
        double double84 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray81);
        double double85 = tTestImpl46.pairedT(doubleArray74, doubleArray81);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean87 = tTestImpl38.pairedTTest(doubleArray40, doubleArray74, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.8538434429284575d + "'", double37 == 0.8538434429284575d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[35.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1225.0d + "'", double41 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 35.0d + "'", double42 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + (-1820.0d) + "'", double53 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 5214.25d + "'", double61 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1.5919401533569089d + "'", double66 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 1.539663200366486d + "'", double76 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 100.0d + "'", double83 == 100.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 12706.0d + "'", double84 == 12706.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
    }

    @Test
    public void test570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test570");
        double[] doubleArray4 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double5 = org.apache.commons.math.stat.StatUtils.product(doubleArray4);
        double[] doubleArray10 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double11 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray10);
        double double12 = org.apache.commons.math.stat.StatUtils.max(doubleArray10);
        double double13 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray10);
        double double14 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10);
        double double15 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray4, doubleArray10);
        double double16 = org.apache.commons.math.stat.StatUtils.max(doubleArray4);
        // The following exception was thrown during execution in test generation
        try {
            double double19 = org.apache.commons.math.stat.StatUtils.mean(doubleArray4, (int) 'a', (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1820.0d) + "'", double5 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 12706.0d + "'", double13 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 2310.0d + "'", double14 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-16.25d) + "'", double15 == (-16.25d));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 52.0d + "'", double16 == 52.0d);
    }

    @Test
    public void test571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test571");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl37 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray43 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double44 = org.apache.commons.math.stat.StatUtils.product(doubleArray43);
        double[] doubleArray49 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double50 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray49);
        double double52 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray43, doubleArray49, (double) 10.0f);
        double double53 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray43);
        double double56 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray43, (int) (short) 1, (int) (short) 0);
        double double57 = tTestImpl37.t((double) 1, doubleArray43);
        org.apache.commons.math.distribution.TDistribution tDistribution59 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl60 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution59);
        double[] doubleArray65 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double66 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray65);
        double[] doubleArray71 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double72 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray71);
        double double73 = org.apache.commons.math.stat.StatUtils.max(doubleArray71);
        double double74 = tTestImpl60.pairedT(doubleArray65, doubleArray71);
        double double75 = tTestImpl37.t(100.0d, doubleArray71);
        double[] doubleArray80 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double81 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray80);
        double double82 = org.apache.commons.math.stat.StatUtils.max(doubleArray80);
        double double83 = tTestImpl1.pairedTTest(doubleArray71, doubleArray80);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary85 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double86 = tTestImpl1.t((double) 1L, statisticalSummary85);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-1820.0d) + "'", double44 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 5214.25d + "'", double52 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.5919401533569089d + "'", double57 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 100.0d + "'", double73 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + (-2.579976173587085d) + "'", double75 == (-2.579976173587085d));
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 100.0d + "'", double82 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double83));
    }

    @Test
    public void test572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test572");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory21 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution22 = distributionFactory21.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution24 = distributionFactory21.createTDistribution(0.8538434429284575d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl25 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution24);
        tTestImpl0.setDistribution(tDistribution24);
        double[] doubleArray34 = new double[] { '4', (byte) 10, (byte) 10, (byte) 10, (short) 1, 1.0d };
        double double37 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray34, 0, (int) (short) 1);
        double double38 = org.apache.commons.math.stat.StatUtils.sum(doubleArray34);
        double double39 = tTestImpl0.t(0.0d, doubleArray34);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl40 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray46 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double47 = org.apache.commons.math.stat.StatUtils.product(doubleArray46);
        double[] doubleArray52 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double53 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray52);
        double double55 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray46, doubleArray52, (double) 10.0f);
        double double56 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray46);
        double double59 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray46, (int) (short) 1, (int) (short) 0);
        double double60 = tTestImpl40.t((double) 1, doubleArray46);
        double[] doubleArray65 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double66 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray65);
        double double67 = org.apache.commons.math.stat.StatUtils.max(doubleArray65);
        double double68 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray65);
        double double69 = org.apache.commons.math.stat.StatUtils.variance(doubleArray65);
        org.apache.commons.math.distribution.TDistribution tDistribution70 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl71 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution70);
        double[] doubleArray77 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double78 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray77);
        double double79 = tTestImpl71.t((double) 1.0f, doubleArray77);
        double double80 = tTestImpl40.t(doubleArray65, doubleArray77);
        double[] doubleArray82 = new double[] { '#' };
        double double83 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray82);
        double double84 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray82);
        double double85 = org.apache.commons.math.stat.StatUtils.min(doubleArray82);
        double double86 = org.apache.commons.math.stat.StatUtils.min(doubleArray82);
        // The following exception was thrown during execution in test generation
        try {
            double double87 = tTestImpl0.homoscedasticTTest(doubleArray77, doubleArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(distributionFactory21);
        org.junit.Assert.assertNotNull(normalDistribution22);
        org.junit.Assert.assertNotNull(tDistribution24);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[52.0, 10.0, 10.0, 10.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 52.00000000000001d + "'", double37 == 52.00000000000001d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 84.0d + "'", double38 == 84.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.7925163190605438d + "'", double39 == 1.7925163190605438d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + (-1820.0d) + "'", double47 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 5214.25d + "'", double55 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.5919401533569089d + "'", double60 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 100.0d + "'", double67 == 100.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 12706.0d + "'", double68 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 2310.0d + "'", double69 == 2310.0d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 1.539663200366486d + "'", double79 == 1.539663200366486d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[35.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1225.0d + "'", double83 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 1225.0d + "'", double84 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 35.0d + "'", double85 == 35.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 35.0d + "'", double86 == 35.0d);
    }

    @Test
    public void test573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test573");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution1 = null;
        tTestImpl0.setDistribution(tDistribution1);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl9 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray15 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double16 = org.apache.commons.math.stat.StatUtils.product(doubleArray15);
        double[] doubleArray21 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray21);
        double double24 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray15, doubleArray21, (double) 10.0f);
        double double25 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray15);
        double double28 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray15, (int) (short) 1, (int) (short) 0);
        double double29 = tTestImpl9.t((double) 1, doubleArray15);
        org.apache.commons.math.distribution.TDistribution tDistribution30 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl31 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution30);
        double[] doubleArray37 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double38 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray37);
        double double39 = tTestImpl31.t((double) 1.0f, doubleArray37);
        double[] doubleArray44 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double45 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double double46 = org.apache.commons.math.stat.StatUtils.max(doubleArray44);
        double double47 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray44);
        double double48 = tTestImpl9.pairedT(doubleArray37, doubleArray44);
        org.apache.commons.math.distribution.TDistribution tDistribution50 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl51 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution50);
        double[] doubleArray56 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double57 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray56);
        double[] doubleArray62 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double63 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray62);
        double double64 = org.apache.commons.math.stat.StatUtils.max(doubleArray62);
        double double65 = tTestImpl51.pairedT(doubleArray56, doubleArray62);
        double double66 = org.apache.commons.math.stat.StatUtils.max(doubleArray62);
        double double67 = tTestImpl9.tTest(0.9999999999999984d, doubleArray62);
        double double68 = tTestImpl0.homoscedasticT(doubleArray7, doubleArray62);
        double[] doubleArray71 = new double[] { '#' };
        double double72 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray71);
        double double73 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray71);
        double double74 = org.apache.commons.math.stat.StatUtils.min(doubleArray71);
        double double78 = org.apache.commons.math.stat.StatUtils.variance(doubleArray71, 0.0d, (int) (short) 0, 0);
        double double79 = org.apache.commons.math.stat.StatUtils.min(doubleArray71);
        // The following exception was thrown during execution in test generation
        try {
            double double80 = tTestImpl0.t(679.5833333333334d, doubleArray71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-1820.0d) + "'", double16 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 5214.25d + "'", double24 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.5919401533569089d + "'", double29 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.539663200366486d + "'", double39 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 100.0d + "'", double46 == 100.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 12706.0d + "'", double47 == 12706.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 100.0d + "'", double64 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 100.0d + "'", double66 == 100.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.22127614024118358d + "'", double67 == 0.22127614024118358d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[35.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 1225.0d + "'", double72 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 1225.0d + "'", double73 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 35.0d + "'", double74 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 35.0d + "'", double79 == 35.0d);
    }

    @Test
    public void test574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test574");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1, (int) (byte) 0, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double11 = org.apache.commons.math.stat.StatUtils.max(doubleArray1, (int) (byte) -1, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 35.0d + "'", double4 == 35.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 35.0d + "'", double5 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test575");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        double[] doubleArray6 = new double[] { (-1.0f) };
        double double7 = org.apache.commons.math.stat.StatUtils.min(doubleArray6);
        double double8 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray1, doubleArray6);
        double double9 = org.apache.commons.math.stat.StatUtils.mean(doubleArray6);
        // The following exception was thrown during execution in test generation
        try {
            double double12 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray6, (int) (byte) -1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 35.0d + "'", double4 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 36.0d + "'", double8 == 36.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.0d) + "'", double9 == (-1.0d));
    }

    @Test
    public void test576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test576");
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException();
        java.lang.Object[] objArray3 = mathException2.getArguments();
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("hi!", objArray3);
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray6 = mathException5.getSuppressed();
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException5);
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException();
        java.lang.Object[] objArray9 = mathException8.getArguments();
        mathException5.addSuppressed((java.lang.Throwable) mathException8);
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", objArray3, (java.lang.Throwable) mathException5);
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray15 = mathException14.getSuppressed();
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray15);
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException16);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray20 = mathException19.getSuppressed();
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray20);
        mathException17.addSuppressed((java.lang.Throwable) mathException21);
        java.lang.Throwable[] throwableArray23 = mathException21.getSuppressed();
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException21);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException24);
        mathException11.addSuppressed((java.lang.Throwable) mathException25);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[]");
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
    }

    @Test
    public void test577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test577");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        double[] doubleArray29 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double30 = org.apache.commons.math.stat.StatUtils.product(doubleArray29);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray29, doubleArray35, (double) 10.0f);
        double double39 = tTestImpl0.tTest(5214.25d, doubleArray35);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl41 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray47 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double48 = org.apache.commons.math.stat.StatUtils.product(doubleArray47);
        double[] doubleArray53 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double54 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray53);
        double double56 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray47, doubleArray53, (double) 10.0f);
        double double57 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47);
        double double60 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47, (int) (short) 1, (int) (short) 0);
        double double61 = tTestImpl41.t((double) 1, doubleArray47);
        double double62 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray47);
        double double63 = tTestImpl0.tTest((double) 10.0f, doubleArray47);
        // The following exception was thrown during execution in test generation
        try {
            double double66 = org.apache.commons.math.stat.StatUtils.variance(doubleArray47, (int) (short) 0, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1820.0d) + "'", double30 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 5214.25d + "'", double38 == 5214.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2.2065780869162666E-7d + "'", double39 == 2.2065780869162666E-7d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + (-1820.0d) + "'", double48 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 5214.25d + "'", double56 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1.5919401533569089d + "'", double61 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 3931.0d + "'", double62 == 3931.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.433786033254294d + "'", double63 == 0.433786033254294d);
    }

    @Test
    public void test578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test578");
        double[] doubleArray5 = new double[] { 3931.0d, 52.00000000000001d, 1.5919401533569089d, 0.5739591588987152d, 2310.0d };
        // The following exception was thrown during execution in test generation
        try {
            double double8 = org.apache.commons.math.stat.StatUtils.product(doubleArray5, (int) (byte) -1, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[3931.0, 52.00000000000001, 1.5919401533569089, 0.5739591588987152, 2310.0]");
    }

    @Test
    public void test579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test579");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        org.apache.commons.math.distribution.TDistribution tDistribution16 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl17 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution16);
        double[] doubleArray22 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double23 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray22);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double30 = org.apache.commons.math.stat.StatUtils.max(doubleArray28);
        double double31 = tTestImpl17.pairedT(doubleArray22, doubleArray28);
        double double32 = org.apache.commons.math.stat.StatUtils.max(doubleArray28);
        double double33 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray6, doubleArray28);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl34 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray39 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double40 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray39);
        double double41 = org.apache.commons.math.stat.StatUtils.max(doubleArray39);
        double[] doubleArray46 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double47 = org.apache.commons.math.stat.StatUtils.product(doubleArray46);
        double[] doubleArray52 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double53 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray52);
        double double55 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray46, doubleArray52, (double) 10.0f);
        double double56 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray46);
        double double57 = tTestImpl34.t(doubleArray39, doubleArray46);
        double double58 = tTestImpl1.t(doubleArray6, doubleArray46);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary59 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary60 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double61 = tTestImpl1.t(statisticalSummary59, statisticalSummary60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 100.0d + "'", double30 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 100.0d + "'", double32 == 100.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + (-16.25d) + "'", double33 == (-16.25d));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 100.0d + "'", double41 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + (-1820.0d) + "'", double47 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 5214.25d + "'", double55 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.5943989439169762d + "'", double57 == 0.5943989439169762d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
    }

    @Test
    public void test580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test580");
        java.lang.Throwable throwable0 = null;
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException(throwable0);
    }

    @Test
    public void test581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test581");
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException();
        java.lang.Object[] objArray3 = mathException2.getArguments();
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("hi!", objArray3);
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", objArray3);
        java.lang.Class<?> wildcardClass6 = mathException5.getClass();
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[]");
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test582");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution5 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.BinomialDistribution binomialDistribution8 = distributionFactory0.createBinomialDistribution((int) (short) 1, 0.34089313230206053d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.GammaDistribution gammaDistribution11 = distributionFactory0.createGammaDistribution(679.5833333333334d, (-1.0932601053173951d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: beta must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(normalDistribution5);
        org.junit.Assert.assertNotNull(binomialDistribution8);
    }

    @Test
    public void test583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test583");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!");
    }

    @Test
    public void test584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test584");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        org.apache.commons.math.distribution.TDistribution tDistribution37 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl38 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution37);
        double[] doubleArray44 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double45 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double double46 = tTestImpl38.t((double) 1.0f, doubleArray44);
        double[] doubleArray51 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double52 = org.apache.commons.math.stat.StatUtils.product(doubleArray51);
        double[] doubleArray57 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double58 = org.apache.commons.math.stat.StatUtils.product(doubleArray57);
        double[] doubleArray63 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double64 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray63);
        double double66 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray57, doubleArray63, (double) 10.0f);
        double double67 = tTestImpl38.pairedT(doubleArray51, doubleArray57);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory68 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution69 = distributionFactory68.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution71 = distributionFactory68.createTDistribution(0.8538434429284575d);
        double double72 = tDistribution71.getDegreesOfFreedom();
        tTestImpl38.setDistribution(tDistribution71);
        tDistribution71.setDegreesOfFreedom((double) 1L);
        tTestImpl1.setDistribution(tDistribution71);
        double double78 = tDistribution71.cumulativeProbability(0.21195550612870484d);
        double double79 = tDistribution71.getDegreesOfFreedom();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.539663200366486d + "'", double46 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-1820.0d) + "'", double52 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + (-1820.0d) + "'", double58 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 5214.25d + "'", double66 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(distributionFactory68);
        org.junit.Assert.assertNotNull(normalDistribution69);
        org.junit.Assert.assertNotNull(tDistribution71);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.8538434429284575d + "'", double72 == 0.8538434429284575d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.5664835927122979d + "'", double78 == 0.5664835927122979d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 1.0d + "'", double79 == 1.0d);
    }

    @Test
    public void test585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test585");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(10.0d, (double) (short) 1);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution8 = distributionFactory0.createPoissonDistribution((double) 1.0f);
        org.apache.commons.math.distribution.TDistribution tDistribution10 = distributionFactory0.createTDistribution((double) 10L);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution11 = distributionFactory0.createNormalDistribution();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(poissonDistribution8);
        org.junit.Assert.assertNotNull(tDistribution10);
        org.junit.Assert.assertNotNull(normalDistribution11);
    }

    @Test
    public void test586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test586");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        double[] doubleArray29 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double30 = org.apache.commons.math.stat.StatUtils.product(doubleArray29);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray29, doubleArray35, (double) 10.0f);
        double double39 = tTestImpl0.tTest(5214.25d, doubleArray35);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary41 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double42 = tTestImpl0.tTest((double) 100L, statisticalSummary41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1820.0d) + "'", double30 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 5214.25d + "'", double38 == 5214.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2.2065780869162666E-7d + "'", double39 == 2.2065780869162666E-7d);
    }

    @Test
    public void test587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test587");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray6 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.max(doubleArray12);
        double double15 = tTestImpl1.pairedT(doubleArray6, doubleArray12);
        double double17 = org.apache.commons.math.stat.StatUtils.variance(doubleArray6, (double) 100);
        double double19 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray6, 0.5801210456783388d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl20 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray25 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double26 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray25);
        double double27 = org.apache.commons.math.stat.StatUtils.max(doubleArray25);
        double[] doubleArray32 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double33 = org.apache.commons.math.stat.StatUtils.product(doubleArray32);
        double[] doubleArray38 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double39 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray38);
        double double41 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray32, doubleArray38, (double) 10.0f);
        double double42 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray32);
        double double43 = tTestImpl20.t(doubleArray25, doubleArray32);
        org.apache.commons.math.distribution.TDistribution tDistribution44 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl45 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution44);
        double[] doubleArray50 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double51 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray50);
        double[] doubleArray56 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double57 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray56);
        double double58 = org.apache.commons.math.stat.StatUtils.max(doubleArray56);
        double double59 = tTestImpl45.pairedT(doubleArray50, doubleArray56);
        double double60 = org.apache.commons.math.stat.StatUtils.max(doubleArray56);
        double double61 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray56);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl62 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray68 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double69 = org.apache.commons.math.stat.StatUtils.product(doubleArray68);
        double[] doubleArray74 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double75 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray74);
        double double77 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray68, doubleArray74, (double) 10.0f);
        double double78 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray68);
        double double81 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray68, (int) (short) 1, (int) (short) 0);
        double double82 = tTestImpl62.t((double) 1, doubleArray68);
        double double83 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray68);
        double double84 = org.apache.commons.math.stat.StatUtils.min(doubleArray68);
        double double87 = org.apache.commons.math.stat.StatUtils.min(doubleArray68, 1, (int) (byte) 1);
        double double88 = tTestImpl20.homoscedasticTTest(doubleArray56, doubleArray68);
        double double90 = org.apache.commons.math.stat.StatUtils.variance(doubleArray68, (double) 10.0f);
        double double91 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray6, doubleArray68);
        // The following exception was thrown during execution in test generation
        try {
            double double94 = org.apache.commons.math.stat.StatUtils.mean(doubleArray6, (int) ' ', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 2310.0d + "'", double17 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-1.0d) + "'", double19 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + (-1820.0d) + "'", double33 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 5214.25d + "'", double41 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.5943989439169762d + "'", double43 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 100.0d + "'", double58 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 100.0d + "'", double60 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + (-1820.0d) + "'", double69 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 5214.25d + "'", double77 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 1.5919401533569089d + "'", double82 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 3931.0d + "'", double83 == 3931.0d);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + (-1.0d) + "'", double84 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 1.0d + "'", double87 == 1.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.5739591588987152d + "'", double88 == 0.5739591588987152d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 679.5833333333334d + "'", double90 == 679.5833333333334d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 65.0d + "'", double91 == 65.0d);
    }

    @Test
    public void test588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test588");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double3 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray0, (int) (short) 1, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test589");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution1 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution3 = distributionFactory0.createTDistribution(0.8538434429284575d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl4 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution3);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl6 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution7 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl8 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution7);
        double[] doubleArray13 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double14 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray13);
        double[] doubleArray19 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double20 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray19);
        double double21 = org.apache.commons.math.stat.StatUtils.max(doubleArray19);
        double double22 = tTestImpl8.pairedT(doubleArray13, doubleArray19);
        double double25 = org.apache.commons.math.stat.StatUtils.variance(doubleArray13, 1, (int) (short) 0);
        org.apache.commons.math.distribution.TDistribution tDistribution26 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl27 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution26);
        double[] doubleArray32 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double33 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray32);
        double[] doubleArray38 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double39 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray38);
        double double40 = org.apache.commons.math.stat.StatUtils.max(doubleArray38);
        double double41 = tTestImpl27.pairedT(doubleArray32, doubleArray38);
        double double44 = org.apache.commons.math.stat.StatUtils.variance(doubleArray32, 1, (int) (short) 0);
        double double45 = tTestImpl6.tTest(doubleArray13, doubleArray32);
        double double46 = tTestImpl4.tTest(10.858998997563567d, doubleArray32);
        double[] doubleArray52 = new double[] { 1225.0d, ' ', 1.8665959518530197d, 0.5664835927122979d, '4' };
        double[] doubleArray54 = new double[] { '#' };
        double double55 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray54);
        double double56 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray54);
        double double57 = org.apache.commons.math.stat.StatUtils.min(doubleArray54);
        double double61 = org.apache.commons.math.stat.StatUtils.variance(doubleArray54, 0.0d, (int) (short) 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double62 = tTestImpl4.pairedT(doubleArray52, doubleArray54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(normalDistribution1);
        org.junit.Assert.assertNotNull(tDistribution3);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.34087447893070477d + "'", double46 == 0.34087447893070477d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1225.0, 32.0, 1.8665959518530197, 0.5664835927122979, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[35.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1225.0d + "'", double55 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1225.0d + "'", double56 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 35.0d + "'", double57 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
    }

    @Test
    public void test590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test590");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution6 = distributionFactory0.createPoissonDistribution(6.109428088468881d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.PascalDistribution pascalDistribution9 = distributionFactory0.createPascalDistribution((int) (byte) 1, 6.109428088468881d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability of success must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(poissonDistribution6);
    }

    @Test
    public void test591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test591");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl31 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray36 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double37 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray36);
        double double38 = org.apache.commons.math.stat.StatUtils.max(doubleArray36);
        double[] doubleArray43 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double44 = org.apache.commons.math.stat.StatUtils.product(doubleArray43);
        double[] doubleArray49 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double50 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray49);
        double double52 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray43, doubleArray49, (double) 10.0f);
        double double53 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray43);
        double double54 = tTestImpl31.t(doubleArray36, doubleArray43);
        double[] doubleArray59 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double60 = org.apache.commons.math.stat.StatUtils.product(doubleArray59);
        double[] doubleArray65 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double66 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray65);
        double double68 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray59, doubleArray65, (double) 10.0f);
        org.apache.commons.math.distribution.TDistribution tDistribution69 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl70 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution69);
        double[] doubleArray75 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double76 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray75);
        double[] doubleArray81 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double82 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray81);
        double double83 = org.apache.commons.math.stat.StatUtils.max(doubleArray81);
        double double84 = tTestImpl70.pairedT(doubleArray75, doubleArray81);
        double double85 = org.apache.commons.math.stat.StatUtils.max(doubleArray81);
        double double86 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray59, doubleArray81);
        double double87 = tTestImpl1.homoscedasticT(doubleArray36, doubleArray59);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary89 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double90 = tTestImpl1.t(0.9999999999999984d, statisticalSummary89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-1820.0d) + "'", double44 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 5214.25d + "'", double52 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.5943989439169762d + "'", double54 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + (-1820.0d) + "'", double60 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 5214.25d + "'", double68 == 5214.25d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 100.0d + "'", double83 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 100.0d + "'", double85 == 100.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + (-16.25d) + "'", double86 == (-16.25d));
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.5943989439169762d + "'", double87 == 0.5943989439169762d);
    }

    @Test
    public void test592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test592");
        double[] doubleArray4 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double5 = org.apache.commons.math.stat.StatUtils.product(doubleArray4);
        double[] doubleArray10 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double11 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray10);
        double double12 = org.apache.commons.math.stat.StatUtils.max(doubleArray10);
        double double13 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray10);
        double double14 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10);
        double double15 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray4, doubleArray10);
        double double16 = org.apache.commons.math.stat.StatUtils.min(doubleArray10);
        // The following exception was thrown during execution in test generation
        try {
            double double19 = org.apache.commons.math.stat.StatUtils.product(doubleArray10, (int) (short) 10, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1820.0d) + "'", double5 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 12706.0d + "'", double13 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 2310.0d + "'", double14 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-16.25d) + "'", double15 == (-16.25d));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-1.0d) + "'", double16 == (-1.0d));
    }

    @Test
    public void test593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test593");
        double[] doubleArray4 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray4);
        double double6 = org.apache.commons.math.stat.StatUtils.max(doubleArray4);
        double double7 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray4);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        org.apache.commons.math.distribution.TDistribution tDistribution22 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl23 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double[] doubleArray34 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        double double36 = org.apache.commons.math.stat.StatUtils.max(doubleArray34);
        double double37 = tTestImpl23.pairedT(doubleArray28, doubleArray34);
        double double38 = org.apache.commons.math.stat.StatUtils.max(doubleArray34);
        double double39 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray12, doubleArray34);
        double double40 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray4, doubleArray34);
        double double41 = org.apache.commons.math.stat.StatUtils.min(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + (-16.25d) + "'", double39 == (-16.25d));
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + (-1.0d) + "'", double41 == (-1.0d));
    }

    @Test
    public void test594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test594");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution(1225.0d, 1.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.WeibullDistribution weibullDistribution9 = distributionFactory0.createWeibullDistribution(0.0d, 679.5833333333334d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Shape must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
    }

    @Test
    public void test595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test595");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, (double) 100.0f);
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1, (int) (byte) 0, 1);
        double double11 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double13 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) (byte) 10);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 35.0d + "'", double4 == 35.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test596");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double double10 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7, (int) (byte) 0, 0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test597");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory21 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution22 = distributionFactory21.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution24 = distributionFactory21.createTDistribution(0.8538434429284575d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl25 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution24);
        tTestImpl0.setDistribution(tDistribution24);
        double[] doubleArray34 = new double[] { '4', (byte) 10, (byte) 10, (byte) 10, (short) 1, 1.0d };
        double double37 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray34, 0, (int) (short) 1);
        double double38 = org.apache.commons.math.stat.StatUtils.sum(doubleArray34);
        double double39 = tTestImpl0.t(0.0d, doubleArray34);
        double double41 = org.apache.commons.math.stat.StatUtils.variance(doubleArray34, 84.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double43 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray34, 152.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid quantile value: 152.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(distributionFactory21);
        org.junit.Assert.assertNotNull(normalDistribution22);
        org.junit.Assert.assertNotNull(tDistribution24);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[52.0, 10.0, 10.0, 10.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 52.00000000000001d + "'", double37 == 52.00000000000001d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 84.0d + "'", double38 == 84.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.7925163190605438d + "'", double39 == 1.7925163190605438d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 366.0d + "'", double41 == 366.0d);
    }

    @Test
    public void test598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test598");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        org.apache.commons.math.distribution.TDistribution tDistribution24 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl25 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution24);
        double[] doubleArray30 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double31 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray30);
        double[] doubleArray36 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double37 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray36);
        double double38 = org.apache.commons.math.stat.StatUtils.max(doubleArray36);
        double double39 = tTestImpl25.pairedT(doubleArray30, doubleArray36);
        double double40 = org.apache.commons.math.stat.StatUtils.max(doubleArray36);
        double double41 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray36);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl42 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray48 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double49 = org.apache.commons.math.stat.StatUtils.product(doubleArray48);
        double[] doubleArray54 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double55 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray54);
        double double57 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray48, doubleArray54, (double) 10.0f);
        double double58 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray48);
        double double61 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray48, (int) (short) 1, (int) (short) 0);
        double double62 = tTestImpl42.t((double) 1, doubleArray48);
        double double63 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray48);
        double double64 = org.apache.commons.math.stat.StatUtils.min(doubleArray48);
        double double67 = org.apache.commons.math.stat.StatUtils.min(doubleArray48, 1, (int) (byte) 1);
        double double68 = tTestImpl0.homoscedasticTTest(doubleArray36, doubleArray48);
        java.lang.Class<?> wildcardClass69 = doubleArray48.getClass();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + (-1820.0d) + "'", double49 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 5214.25d + "'", double57 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1.5919401533569089d + "'", double62 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 3931.0d + "'", double63 == 3931.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + (-1.0d) + "'", double64 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 1.0d + "'", double67 == 1.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.5739591588987152d + "'", double68 == 0.5739591588987152d);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test599");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray6 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.max(doubleArray12);
        double double15 = tTestImpl1.pairedT(doubleArray6, doubleArray12);
        double double16 = org.apache.commons.math.stat.StatUtils.max(doubleArray12);
        double double17 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray12);
        // The following exception was thrown during execution in test generation
        try {
            double double20 = org.apache.commons.math.stat.StatUtils.sum(doubleArray12, (int) (short) -1, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 100.0d + "'", double16 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test600");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution1 = null;
        tTestImpl0.setDistribution(tDistribution1);
        double[] doubleArray8 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double9 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray8);
        double double10 = org.apache.commons.math.stat.StatUtils.max(doubleArray8);
        double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray8);
        double[] doubleArray16 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double17 = org.apache.commons.math.stat.StatUtils.product(doubleArray16);
        double[] doubleArray22 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double23 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray22);
        double double25 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray16, doubleArray22, (double) 10.0f);
        double double26 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray16);
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray16, (int) (short) 1, (int) (short) 0);
        double double30 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray8, doubleArray16);
        double double31 = tTestImpl0.t((double) 100, doubleArray16);
        // The following exception was thrown during execution in test generation
        try {
            double double34 = org.apache.commons.math.stat.StatUtils.variance(doubleArray16, (int) (byte) -1, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 12706.0d + "'", double11 == 12706.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1820.0d) + "'", double17 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 5214.25d + "'", double25 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 16.25d + "'", double30 == 16.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-6.003340578321836d) + "'", double31 == (-6.003340578321836d));
    }

    @Test
    public void test601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test601");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution2 = distributionFactory0.createChiSquareDistribution((double) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.HypergeometricDistribution hypergeometricDistribution6 = distributionFactory0.createHypergeometricDistribution((int) (short) 10, (int) (short) 0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: sample size must be less than or equal to population size");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(chiSquaredDistribution2);
    }

    @Test
    public void test602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test602");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution(1225.0d, 1.0d);
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution9 = distributionFactory0.createWeibullDistribution((double) 100, (double) (byte) 100);
        org.apache.commons.math.distribution.FDistribution fDistribution12 = distributionFactory0.createFDistribution(679.5833333333334d, (double) 100.0f);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution13 = distributionFactory0.createNormalDistribution();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(weibullDistribution9);
        org.junit.Assert.assertNotNull(fDistribution12);
        org.junit.Assert.assertNotNull(normalDistribution13);
    }

    @Test
    public void test603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test603");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution21 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double30 = tTestImpl22.t((double) 1.0f, doubleArray28);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double37 = org.apache.commons.math.stat.StatUtils.max(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray35);
        double double39 = tTestImpl0.pairedT(doubleArray28, doubleArray35);
        org.apache.commons.math.distribution.TDistribution tDistribution40 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl41 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution40);
        double[] doubleArray47 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double48 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47);
        double double49 = tTestImpl41.t((double) 1.0f, doubleArray47);
        double[] doubleArray54 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double55 = org.apache.commons.math.stat.StatUtils.product(doubleArray54);
        double[] doubleArray60 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double61 = org.apache.commons.math.stat.StatUtils.product(doubleArray60);
        double[] doubleArray66 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double67 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray66);
        double double69 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray60, doubleArray66, (double) 10.0f);
        double double70 = tTestImpl41.pairedT(doubleArray54, doubleArray60);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory71 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution72 = distributionFactory71.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution74 = distributionFactory71.createTDistribution(0.8538434429284575d);
        double double75 = tDistribution74.getDegreesOfFreedom();
        tTestImpl41.setDistribution(tDistribution74);
        tDistribution74.setDegreesOfFreedom((double) 1L);
        tTestImpl0.setDistribution(tDistribution74);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary81 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double82 = tTestImpl0.t(0.5664835927122979d, statisticalSummary81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.539663200366486d + "'", double30 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 12706.0d + "'", double38 == 12706.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.539663200366486d + "'", double49 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + (-1820.0d) + "'", double55 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + (-1820.0d) + "'", double61 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 5214.25d + "'", double69 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertNotNull(distributionFactory71);
        org.junit.Assert.assertNotNull(normalDistribution72);
        org.junit.Assert.assertNotNull(tDistribution74);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.8538434429284575d + "'", double75 == 0.8538434429284575d);
    }

    @Test
    public void test604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test604");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution1 = null;
        tTestImpl0.setDistribution(tDistribution1);
        double[] doubleArray8 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double9 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray8);
        double double10 = org.apache.commons.math.stat.StatUtils.max(doubleArray8);
        double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray8);
        double[] doubleArray16 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double17 = org.apache.commons.math.stat.StatUtils.product(doubleArray16);
        double[] doubleArray22 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double23 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray22);
        double double25 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray16, doubleArray22, (double) 10.0f);
        double double26 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray16);
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray16, (int) (short) 1, (int) (short) 0);
        double double30 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray8, doubleArray16);
        double double31 = tTestImpl0.t((double) 100, doubleArray16);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl33 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray39 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double40 = org.apache.commons.math.stat.StatUtils.product(doubleArray39);
        double[] doubleArray45 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double46 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray45);
        double double48 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray39, doubleArray45, (double) 10.0f);
        double double49 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray39);
        double double52 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray39, (int) (short) 1, (int) (short) 0);
        double double53 = tTestImpl33.t((double) 1, doubleArray39);
        double double54 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray39);
        double double55 = tTestImpl0.t(36.0d, doubleArray39);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary57 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double58 = tTestImpl0.t((-1.0932601053173951d), statisticalSummary57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 12706.0d + "'", double11 == 12706.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1820.0d) + "'", double17 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 5214.25d + "'", double25 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 16.25d + "'", double30 == 16.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-6.003340578321836d) + "'", double31 == (-6.003340578321836d));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + (-1820.0d) + "'", double40 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 5214.25d + "'", double48 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.5919401533569089d + "'", double53 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 3931.0d + "'", double54 == 3931.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + (-1.0932601053173951d) + "'", double55 == (-1.0932601053173951d));
    }

    @Test
    public void test605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test605");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        double[] doubleArray29 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double30 = org.apache.commons.math.stat.StatUtils.product(doubleArray29);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray29, doubleArray35, (double) 10.0f);
        double double39 = tTestImpl0.tTest(5214.25d, doubleArray35);
        double[] doubleArray42 = new double[] { '#' };
        double double43 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray42);
        double double44 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray42);
        double double45 = org.apache.commons.math.stat.StatUtils.product(doubleArray42);
        double double46 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray42);
        double double48 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray42, (double) 100.0f);
        double double49 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray42);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean51 = tTestImpl0.tTest(2310.0d, doubleArray42, (double) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1820.0d) + "'", double30 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 5214.25d + "'", double38 == 5214.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2.2065780869162666E-7d + "'", double39 == 2.2065780869162666E-7d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[35.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1225.0d + "'", double43 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1225.0d + "'", double44 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 35.0d + "'", double45 == 35.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 3.5553480614894135d + "'", double46 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 35.0d + "'", double48 == 35.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 3.5553480614894135d + "'", double49 == 3.5553480614894135d);
    }

    @Test
    public void test606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test606");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        org.apache.commons.math.distribution.TDistribution tDistribution24 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl25 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution24);
        double[] doubleArray30 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double31 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray30);
        double[] doubleArray36 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double37 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray36);
        double double38 = org.apache.commons.math.stat.StatUtils.max(doubleArray36);
        double double39 = tTestImpl25.pairedT(doubleArray30, doubleArray36);
        double double40 = org.apache.commons.math.stat.StatUtils.max(doubleArray36);
        double double41 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray36);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl42 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray48 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double49 = org.apache.commons.math.stat.StatUtils.product(doubleArray48);
        double[] doubleArray54 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double55 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray54);
        double double57 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray48, doubleArray54, (double) 10.0f);
        double double58 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray48);
        double double61 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray48, (int) (short) 1, (int) (short) 0);
        double double62 = tTestImpl42.t((double) 1, doubleArray48);
        double double63 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray48);
        double double64 = org.apache.commons.math.stat.StatUtils.min(doubleArray48);
        double double67 = org.apache.commons.math.stat.StatUtils.min(doubleArray48, 1, (int) (byte) 1);
        double double68 = tTestImpl0.homoscedasticTTest(doubleArray36, doubleArray48);
        double[] doubleArray70 = new double[] { '#' };
        double double71 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray70);
        double double72 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray70);
        double double73 = org.apache.commons.math.stat.StatUtils.min(doubleArray70);
        double double77 = org.apache.commons.math.stat.StatUtils.variance(doubleArray70, (double) 1L, (int) (short) 0, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double78 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray36, doubleArray70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input arrays must have the same (positive) length.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + (-1820.0d) + "'", double49 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 5214.25d + "'", double57 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1.5919401533569089d + "'", double62 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 3931.0d + "'", double63 == 3931.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + (-1.0d) + "'", double64 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 1.0d + "'", double67 == 1.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.5739591588987152d + "'", double68 == 0.5739591588987152d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[35.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 1225.0d + "'", double71 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 1225.0d + "'", double72 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 35.0d + "'", double73 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
    }

    @Test
    public void test607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test607");
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException();
        java.lang.Object[] objArray4 = mathException3.getArguments();
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("hi!", objArray4);
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", objArray4);
        java.lang.Object[] objArray10 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("", objArray10);
        java.lang.Object[] objArray14 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("", objArray14);
        mathException11.addSuppressed((java.lang.Throwable) mathException15);
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException15);
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray19 = mathException18.getSuppressed();
        mathException17.addSuppressed((java.lang.Throwable) mathException18);
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("", (java.lang.Throwable) mathException18);
        java.lang.Throwable[] throwableArray22 = mathException18.getSuppressed();
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", objArray4, (java.lang.Throwable) mathException18);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[1225.0]");
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray22);
    }

    @Test
    public void test608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test608");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        double[] doubleArray29 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double30 = org.apache.commons.math.stat.StatUtils.product(doubleArray29);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray29, doubleArray35, (double) 10.0f);
        double double39 = tTestImpl0.tTest(5214.25d, doubleArray35);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl41 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray47 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double48 = org.apache.commons.math.stat.StatUtils.product(doubleArray47);
        double[] doubleArray53 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double54 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray53);
        double double56 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray47, doubleArray53, (double) 10.0f);
        double double57 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47);
        double double60 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47, (int) (short) 1, (int) (short) 0);
        double double61 = tTestImpl41.t((double) 1, doubleArray47);
        double double62 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray47);
        double double63 = tTestImpl0.tTest((double) 10.0f, doubleArray47);
        double double64 = org.apache.commons.math.stat.StatUtils.max(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1820.0d) + "'", double30 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 5214.25d + "'", double38 == 5214.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2.2065780869162666E-7d + "'", double39 == 2.2065780869162666E-7d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + (-1820.0d) + "'", double48 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 5214.25d + "'", double56 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1.5919401533569089d + "'", double61 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 3931.0d + "'", double62 == 3931.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.433786033254294d + "'", double63 == 0.433786033254294d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 52.0d + "'", double64 == 52.0d);
    }

    @Test
    public void test609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test609");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        tDistribution34.setDegreesOfFreedom((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl39 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution34);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl40 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray46 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double47 = org.apache.commons.math.stat.StatUtils.product(doubleArray46);
        double[] doubleArray52 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double53 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray52);
        double double55 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray46, doubleArray52, (double) 10.0f);
        double double56 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray46);
        double double59 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray46, (int) (short) 1, (int) (short) 0);
        double double60 = tTestImpl40.t((double) 1, doubleArray46);
        double double61 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray46);
        double double64 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray46, (int) (short) 0, (int) (short) 0);
        double[] doubleArray66 = new double[] { '#' };
        double double67 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray66);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean69 = tTestImpl39.tTest(doubleArray46, doubleArray66, 1.539663200366486d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 1.539663200366486");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + (-1820.0d) + "'", double47 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 5214.25d + "'", double55 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.5919401533569089d + "'", double60 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 3931.0d + "'", double61 == 3931.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[35.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 1225.0d + "'", double67 == 1225.0d);
    }

    @Test
    public void test610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test610");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution21 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double30 = tTestImpl22.t((double) 1.0f, doubleArray28);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double37 = org.apache.commons.math.stat.StatUtils.max(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray35);
        double double39 = tTestImpl0.pairedT(doubleArray28, doubleArray35);
        double[] doubleArray44 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double45 = org.apache.commons.math.stat.StatUtils.product(doubleArray44);
        double[] doubleArray50 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double51 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray50);
        double double53 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray44, doubleArray50, (double) 10.0f);
        double double54 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double double57 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44, (int) (short) 1, (int) (short) 0);
        double double58 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray44);
        org.apache.commons.math.distribution.TDistribution tDistribution59 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl60 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution59);
        double[] doubleArray65 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double66 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray65);
        double[] doubleArray71 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double72 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray71);
        double double73 = org.apache.commons.math.stat.StatUtils.max(doubleArray71);
        double double74 = tTestImpl60.pairedT(doubleArray65, doubleArray71);
        double double75 = tTestImpl0.homoscedasticTTest(doubleArray44, doubleArray71);
        double double76 = org.apache.commons.math.stat.StatUtils.sum(doubleArray71);
        // The following exception was thrown during execution in test generation
        try {
            double double79 = org.apache.commons.math.stat.StatUtils.mean(doubleArray71, 0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.539663200366486d + "'", double30 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 12706.0d + "'", double38 == 12706.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1820.0d) + "'", double45 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 5214.25d + "'", double53 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 3931.0d + "'", double58 == 3931.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 100.0d + "'", double73 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.5739591588987152d + "'", double75 == 0.5739591588987152d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 152.0d + "'", double76 == 152.0d);
    }

    @Test
    public void test611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test611");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary37 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary38 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double39 = tTestImpl1.homoscedasticT(statisticalSummary37, statisticalSummary38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
    }

    @Test
    public void test612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test612");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution1 = null;
        tTestImpl0.setDistribution(tDistribution1);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl3 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray9 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double10 = org.apache.commons.math.stat.StatUtils.product(doubleArray9);
        double[] doubleArray15 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray15);
        double double18 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray9, doubleArray15, (double) 10.0f);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray9);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray9, (int) (short) 1, (int) (short) 0);
        double double23 = tTestImpl3.t((double) 1, doubleArray9);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double30 = org.apache.commons.math.stat.StatUtils.max(doubleArray28);
        double double31 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray28);
        double double32 = org.apache.commons.math.stat.StatUtils.variance(doubleArray28);
        org.apache.commons.math.distribution.TDistribution tDistribution33 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl34 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution33);
        double[] doubleArray40 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double41 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray40);
        double double42 = tTestImpl34.t((double) 1.0f, doubleArray40);
        double double43 = tTestImpl3.t(doubleArray28, doubleArray40);
        double[] doubleArray48 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double49 = org.apache.commons.math.stat.StatUtils.product(doubleArray48);
        double[] doubleArray54 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double55 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray54);
        double double57 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray48, doubleArray54, (double) 10.0f);
        double double58 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray48);
        double double61 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray48, (int) (short) 1, (int) (short) 0);
        double double62 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray48);
        double double63 = tTestImpl0.pairedT(doubleArray28, doubleArray48);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary65 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean67 = tTestImpl0.tTest(0.433786033254294d, statisticalSummary65, 35.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 35.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-1820.0d) + "'", double10 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 5214.25d + "'", double18 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.5919401533569089d + "'", double23 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 100.0d + "'", double30 == 100.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 12706.0d + "'", double31 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 2310.0d + "'", double32 == 2310.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.539663200366486d + "'", double42 == 1.539663200366486d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + (-1820.0d) + "'", double49 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 5214.25d + "'", double57 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 3931.0d + "'", double62 == 3931.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.4500776384309941d + "'", double63 == 0.4500776384309941d);
    }

    @Test
    public void test613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test613");
        double[] doubleArray4 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double5 = org.apache.commons.math.stat.StatUtils.product(doubleArray4);
        double[] doubleArray10 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double11 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray10);
        double double13 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray4, doubleArray10, (double) 10.0f);
        double double14 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1820.0d) + "'", double5 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5214.25d + "'", double13 == 5214.25d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 2310.0d + "'", double14 == 2310.0d);
    }

    @Test
    public void test614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test614");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        double[] doubleArray42 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double43 = org.apache.commons.math.stat.StatUtils.product(doubleArray42);
        double[] doubleArray48 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double49 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray48);
        double double50 = org.apache.commons.math.stat.StatUtils.max(doubleArray48);
        double double51 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray48);
        double double52 = org.apache.commons.math.stat.StatUtils.variance(doubleArray48);
        double double53 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray42, doubleArray48);
        double double54 = org.apache.commons.math.stat.StatUtils.product(doubleArray42);
        double double55 = tTestImpl1.t(21.75d, doubleArray42);
        // The following exception was thrown during execution in test generation
        try {
            double double58 = org.apache.commons.math.stat.StatUtils.variance(doubleArray42, (int) ' ', 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + (-1820.0d) + "'", double43 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 100.0d + "'", double50 == 100.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 12706.0d + "'", double51 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 2310.0d + "'", double52 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + (-16.25d) + "'", double53 == (-16.25d));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + (-1820.0d) + "'", double54 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
    }

    @Test
    public void test615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test615");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary37 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary38 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double39 = tTestImpl1.homoscedasticTTest(statisticalSummary37, statisticalSummary38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
    }

    @Test
    public void test616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test616");
        java.lang.Object[] objArray2 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException("", objArray2);
        java.lang.String str4 = mathException3.toString();
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[1225.0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org.apache.commons.math.MathException: " + "'", str4, "org.apache.commons.math.MathException: ");
    }

    @Test
    public void test617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test617");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.0d, (double) 10L);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution7 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution10 = distributionFactory0.createGammaDistribution(100.0d, 34.99999999999999d);
        org.apache.commons.math.distribution.FDistribution fDistribution13 = distributionFactory0.createFDistribution(1.0d, (double) 100L);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution15 = distributionFactory0.createExponentialDistribution(34.99999999999999d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution16 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution19 = distributionFactory0.createCauchyDistribution((double) 1, 152.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.BinomialDistribution binomialDistribution22 = distributionFactory0.createBinomialDistribution((int) (byte) -1, (double) 10.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: number of trials must be non-negative.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution7);
        org.junit.Assert.assertNotNull(gammaDistribution10);
        org.junit.Assert.assertNotNull(fDistribution13);
        org.junit.Assert.assertNotNull(exponentialDistribution15);
        org.junit.Assert.assertNotNull(normalDistribution16);
        org.junit.Assert.assertNotNull(cauchyDistribution19);
    }

    @Test
    public void test618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test618");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution6 = distributionFactory0.createWeibullDistribution((double) (byte) 10, (double) 1);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution8 = distributionFactory0.createExponentialDistribution((double) (byte) 1);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution10 = distributionFactory0.createPoissonDistribution((double) '#');
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(weibullDistribution6);
        org.junit.Assert.assertNotNull(exponentialDistribution8);
        org.junit.Assert.assertNotNull(poissonDistribution10);
    }

    @Test
    public void test619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test619");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution1 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution3 = distributionFactory0.createTDistribution(0.8538434429284575d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl4 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution3);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl6 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution7 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl8 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution7);
        double[] doubleArray13 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double14 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray13);
        double[] doubleArray19 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double20 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray19);
        double double21 = org.apache.commons.math.stat.StatUtils.max(doubleArray19);
        double double22 = tTestImpl8.pairedT(doubleArray13, doubleArray19);
        double double25 = org.apache.commons.math.stat.StatUtils.variance(doubleArray13, 1, (int) (short) 0);
        org.apache.commons.math.distribution.TDistribution tDistribution26 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl27 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution26);
        double[] doubleArray32 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double33 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray32);
        double[] doubleArray38 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double39 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray38);
        double double40 = org.apache.commons.math.stat.StatUtils.max(doubleArray38);
        double double41 = tTestImpl27.pairedT(doubleArray32, doubleArray38);
        double double44 = org.apache.commons.math.stat.StatUtils.variance(doubleArray32, 1, (int) (short) 0);
        double double45 = tTestImpl6.tTest(doubleArray13, doubleArray32);
        double double46 = tTestImpl4.tTest(10.858998997563567d, doubleArray32);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary48 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean50 = tTestImpl4.tTest(0.5664835927122979d, statisticalSummary48, 0.4500776384309941d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(normalDistribution1);
        org.junit.Assert.assertNotNull(tDistribution3);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.34087447893070477d + "'", double46 == 0.34087447893070477d);
    }

    @Test
    public void test620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test620");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution5 = distributionFactory0.createNormalDistribution();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution7 = distributionFactory0.createChiSquareDistribution((-5200.000000000001d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: alpha must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(normalDistribution5);
    }

    @Test
    public void test621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test621");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution1 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl2 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution1);
        double[] doubleArray8 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double9 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray8);
        double double10 = tTestImpl2.t((double) 1.0f, doubleArray8);
        double[] doubleArray15 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double16 = org.apache.commons.math.stat.StatUtils.product(doubleArray15);
        double[] doubleArray21 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double22 = org.apache.commons.math.stat.StatUtils.product(doubleArray21);
        double[] doubleArray27 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double28 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray27);
        double double30 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray21, doubleArray27, (double) 10.0f);
        double double31 = tTestImpl2.pairedT(doubleArray15, doubleArray21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl32 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray37 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double38 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray37);
        double double39 = org.apache.commons.math.stat.StatUtils.max(doubleArray37);
        double[] doubleArray44 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double45 = org.apache.commons.math.stat.StatUtils.product(doubleArray44);
        double[] doubleArray50 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double51 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray50);
        double double53 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray44, doubleArray50, (double) 10.0f);
        double double54 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double double55 = tTestImpl32.t(doubleArray37, doubleArray44);
        double[] doubleArray60 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double61 = org.apache.commons.math.stat.StatUtils.product(doubleArray60);
        double[] doubleArray66 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double67 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray66);
        double double69 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray60, doubleArray66, (double) 10.0f);
        org.apache.commons.math.distribution.TDistribution tDistribution70 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl71 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution70);
        double[] doubleArray76 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double77 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray76);
        double[] doubleArray82 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double83 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray82);
        double double84 = org.apache.commons.math.stat.StatUtils.max(doubleArray82);
        double double85 = tTestImpl71.pairedT(doubleArray76, doubleArray82);
        double double86 = org.apache.commons.math.stat.StatUtils.max(doubleArray82);
        double double87 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray60, doubleArray82);
        double double88 = tTestImpl2.homoscedasticT(doubleArray37, doubleArray60);
        double[] doubleArray93 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double94 = org.apache.commons.math.stat.StatUtils.product(doubleArray93);
        double double95 = tTestImpl0.tTest(doubleArray60, doubleArray93);
        // The following exception was thrown during execution in test generation
        try {
            double double98 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray93, (int) (short) 100, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.539663200366486d + "'", double10 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-1820.0d) + "'", double16 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1820.0d) + "'", double22 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 5214.25d + "'", double30 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1820.0d) + "'", double45 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 5214.25d + "'", double53 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.5943989439169762d + "'", double55 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + (-1820.0d) + "'", double61 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 5214.25d + "'", double69 == 5214.25d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 100.0d + "'", double84 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 100.0d + "'", double86 == 100.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + (-16.25d) + "'", double87 == (-16.25d));
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.5943989439169762d + "'", double88 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + (-1820.0d) + "'", double94 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 1.0d + "'", double95 == 1.0d);
    }

    @Test
    public void test622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test622");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution21 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double30 = tTestImpl22.t((double) 1.0f, doubleArray28);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double37 = org.apache.commons.math.stat.StatUtils.max(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray35);
        double double39 = tTestImpl0.pairedT(doubleArray28, doubleArray35);
        double[] doubleArray44 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double45 = org.apache.commons.math.stat.StatUtils.product(doubleArray44);
        double[] doubleArray50 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double51 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray50);
        double double53 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray44, doubleArray50, (double) 10.0f);
        double double54 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double double57 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44, (int) (short) 1, (int) (short) 0);
        double double58 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray44);
        org.apache.commons.math.distribution.TDistribution tDistribution59 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl60 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution59);
        double[] doubleArray65 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double66 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray65);
        double[] doubleArray71 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double72 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray71);
        double double73 = org.apache.commons.math.stat.StatUtils.max(doubleArray71);
        double double74 = tTestImpl60.pairedT(doubleArray65, doubleArray71);
        double double75 = tTestImpl0.homoscedasticTTest(doubleArray44, doubleArray71);
        double[] doubleArray82 = new double[] { '4', (byte) 10, (byte) 10, (byte) 10, (short) 1, 1.0d };
        double double85 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray82, 0, (int) (short) 1);
        double double86 = org.apache.commons.math.stat.StatUtils.sum(doubleArray82);
        // The following exception was thrown during execution in test generation
        try {
            double double87 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray71, doubleArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input arrays must have the same (positive) length.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.539663200366486d + "'", double30 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 12706.0d + "'", double38 == 12706.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1820.0d) + "'", double45 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 5214.25d + "'", double53 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 3931.0d + "'", double58 == 3931.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 100.0d + "'", double73 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.5739591588987152d + "'", double75 == 0.5739591588987152d);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[52.0, 10.0, 10.0, 10.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 52.00000000000001d + "'", double85 == 52.00000000000001d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 84.0d + "'", double86 == 84.0d);
    }

    @Test
    public void test623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test623");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.0d, (double) 10L);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution7 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution10 = distributionFactory0.createGammaDistribution(100.0d, 34.99999999999999d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution11 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution14 = distributionFactory0.createNormalDistribution((double) 'a', 2310.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.HypergeometricDistribution hypergeometricDistribution18 = distributionFactory0.createHypergeometricDistribution(0, 100, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: number of successes must be less than or equal to population size");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution7);
        org.junit.Assert.assertNotNull(gammaDistribution10);
        org.junit.Assert.assertNotNull(normalDistribution11);
        org.junit.Assert.assertNotNull(normalDistribution14);
    }

    @Test
    public void test624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test624");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution21 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double30 = tTestImpl22.t((double) 1.0f, doubleArray28);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double37 = org.apache.commons.math.stat.StatUtils.max(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray35);
        double double39 = tTestImpl0.pairedT(doubleArray28, doubleArray35);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl40 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray45 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double46 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray45);
        double double47 = org.apache.commons.math.stat.StatUtils.max(doubleArray45);
        double[] doubleArray52 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double53 = org.apache.commons.math.stat.StatUtils.product(doubleArray52);
        double[] doubleArray58 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double59 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray58);
        double double61 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray52, doubleArray58, (double) 10.0f);
        double double62 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray52);
        double double63 = tTestImpl40.t(doubleArray45, doubleArray52);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl64 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray70 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double71 = org.apache.commons.math.stat.StatUtils.product(doubleArray70);
        double[] doubleArray76 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double77 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray76);
        double double79 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray70, doubleArray76, (double) 10.0f);
        double double80 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray70);
        double double83 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray70, (int) (short) 1, (int) (short) 0);
        double double84 = tTestImpl64.t((double) 1, doubleArray70);
        double double85 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray70);
        double double88 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray70, (int) (short) 0, (int) (short) 0);
        double double89 = tTestImpl0.homoscedasticT(doubleArray52, doubleArray70);
        double double90 = org.apache.commons.math.stat.StatUtils.min(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.539663200366486d + "'", double30 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 12706.0d + "'", double38 == 12706.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 100.0d + "'", double47 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + (-1820.0d) + "'", double53 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 5214.25d + "'", double61 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.5943989439169762d + "'", double63 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + (-1820.0d) + "'", double71 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 5214.25d + "'", double79 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 1.5919401533569089d + "'", double84 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 3931.0d + "'", double85 == 3931.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double88));
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + (-1.0d) + "'", double90 == (-1.0d));
    }

    @Test
    public void test625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test625");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution21 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double30 = tTestImpl22.t((double) 1.0f, doubleArray28);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double37 = org.apache.commons.math.stat.StatUtils.max(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray35);
        double double39 = tTestImpl0.pairedT(doubleArray28, doubleArray35);
        double double40 = org.apache.commons.math.stat.StatUtils.product(doubleArray28);
        // The following exception was thrown during execution in test generation
        try {
            double double43 = org.apache.commons.math.stat.StatUtils.product(doubleArray28, 10, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.539663200366486d + "'", double30 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 12706.0d + "'", double38 == 12706.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + (-5200.000000000001d) + "'", double40 == (-5200.000000000001d));
    }

    @Test
    public void test626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test626");
        double[] doubleArray4 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double5 = org.apache.commons.math.stat.StatUtils.product(doubleArray4);
        double[] doubleArray10 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double11 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray10);
        double double13 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray4, doubleArray10, (double) 10.0f);
        double double14 = org.apache.commons.math.stat.StatUtils.max(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1820.0d) + "'", double5 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5214.25d + "'", double13 == 5214.25d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
    }

    @Test
    public void test627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test627");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution1 = null;
        tTestImpl0.setDistribution(tDistribution1);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl9 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray15 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double16 = org.apache.commons.math.stat.StatUtils.product(doubleArray15);
        double[] doubleArray21 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray21);
        double double24 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray15, doubleArray21, (double) 10.0f);
        double double25 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray15);
        double double28 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray15, (int) (short) 1, (int) (short) 0);
        double double29 = tTestImpl9.t((double) 1, doubleArray15);
        org.apache.commons.math.distribution.TDistribution tDistribution30 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl31 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution30);
        double[] doubleArray37 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double38 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray37);
        double double39 = tTestImpl31.t((double) 1.0f, doubleArray37);
        double[] doubleArray44 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double45 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double double46 = org.apache.commons.math.stat.StatUtils.max(doubleArray44);
        double double47 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray44);
        double double48 = tTestImpl9.pairedT(doubleArray37, doubleArray44);
        org.apache.commons.math.distribution.TDistribution tDistribution50 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl51 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution50);
        double[] doubleArray56 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double57 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray56);
        double[] doubleArray62 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double63 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray62);
        double double64 = org.apache.commons.math.stat.StatUtils.max(doubleArray62);
        double double65 = tTestImpl51.pairedT(doubleArray56, doubleArray62);
        double double66 = org.apache.commons.math.stat.StatUtils.max(doubleArray62);
        double double67 = tTestImpl9.tTest(0.9999999999999984d, doubleArray62);
        double double68 = tTestImpl0.homoscedasticT(doubleArray7, doubleArray62);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary69 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary70 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double71 = tTestImpl0.tTest(statisticalSummary69, statisticalSummary70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-1820.0d) + "'", double16 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 5214.25d + "'", double24 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.5919401533569089d + "'", double29 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.539663200366486d + "'", double39 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 100.0d + "'", double46 == 100.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 12706.0d + "'", double47 == 12706.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 100.0d + "'", double64 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 100.0d + "'", double66 == 100.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.22127614024118358d + "'", double67 == 0.22127614024118358d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
    }

    @Test
    public void test628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test628");
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray5 = mathException4.getSuppressed();
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray5);
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException6);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray10 = mathException9.getSuppressed();
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray10);
        mathException7.addSuppressed((java.lang.Throwable) mathException11);
        java.lang.Throwable[] throwableArray13 = mathException11.getSuppressed();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException11);
        java.lang.Throwable[] throwableArray15 = mathException14.getSuppressed();
        java.lang.Object[] objArray19 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("", objArray19);
        java.lang.Object[] objArray23 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("", objArray23);
        mathException20.addSuppressed((java.lang.Throwable) mathException24);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException24);
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray28 = mathException27.getSuppressed();
        mathException26.addSuppressed((java.lang.Throwable) mathException27);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("", (java.lang.Throwable) mathException27);
        java.lang.Throwable[] throwableArray31 = mathException27.getSuppressed();
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Object[]) throwableArray15, (java.lang.Throwable) mathException27);
        java.lang.Object[] objArray36 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("", objArray36);
        java.lang.Object[] objArray40 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("", objArray40);
        mathException37.addSuppressed((java.lang.Throwable) mathException41);
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException41);
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray45 = mathException44.getSuppressed();
        mathException43.addSuppressed((java.lang.Throwable) mathException44);
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("", (java.lang.Throwable) mathException44);
        java.lang.Throwable[] throwableArray48 = mathException44.getSuppressed();
        mathException32.addSuppressed((java.lang.Throwable) mathException44);
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Throwable) mathException32);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[1225.0]");
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[1225.0]");
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
    }

    @Test
    public void test629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test629");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.0d, (double) 10L);
        // The following exception was thrown during execution in test generation
        try {
            double double8 = normalDistribution6.inverseCumulativeProbability((double) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: p must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution6);
    }

    @Test
    public void test630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test630");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution22 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl23 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double[] doubleArray34 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        double double36 = org.apache.commons.math.stat.StatUtils.max(doubleArray34);
        double double37 = tTestImpl23.pairedT(doubleArray28, doubleArray34);
        double double38 = tTestImpl0.t(100.0d, doubleArray34);
        double double39 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray34);
        double double42 = org.apache.commons.math.stat.StatUtils.max(doubleArray34, 0, (int) (short) 0);
        double double43 = org.apache.commons.math.stat.StatUtils.mean(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-2.579976173587085d) + "'", double38 == (-2.579976173587085d));
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 12706.0d + "'", double39 == 12706.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 38.0d + "'", double43 == 38.0d);
    }

    @Test
    public void test631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test631");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        tDistribution34.setDegreesOfFreedom((double) 1L);
        double double41 = tDistribution34.cumulativeProbability((-1820.0d), 0.5943989439169762d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl42 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution34);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary43 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary44 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean46 = tTestImpl42.tTest(statisticalSummary43, statisticalSummary44, 0.5739591588987152d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.5739591588987152");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.670531799205166d + "'", double41 == 0.670531799205166d);
    }

    @Test
    public void test632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test632");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution1 = null;
        tTestImpl0.setDistribution(tDistribution1);
        double[] doubleArray8 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double9 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray8);
        double double10 = org.apache.commons.math.stat.StatUtils.max(doubleArray8);
        double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray8);
        double[] doubleArray16 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double17 = org.apache.commons.math.stat.StatUtils.product(doubleArray16);
        double[] doubleArray22 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double23 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray22);
        double double25 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray16, doubleArray22, (double) 10.0f);
        double double26 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray16);
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray16, (int) (short) 1, (int) (short) 0);
        double double30 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray8, doubleArray16);
        double double31 = tTestImpl0.t((double) 100, doubleArray16);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary32 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary33 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double34 = tTestImpl0.homoscedasticT(statisticalSummary32, statisticalSummary33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 12706.0d + "'", double11 == 12706.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1820.0d) + "'", double17 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 5214.25d + "'", double25 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 16.25d + "'", double30 == 16.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-6.003340578321836d) + "'", double31 == (-6.003340578321836d));
    }

    @Test
    public void test633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test633");
        java.lang.Object[] objArray2 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException("", objArray2);
        java.lang.Object[] objArray6 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("", objArray6);
        mathException3.addSuppressed((java.lang.Throwable) mathException7);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException7);
        java.lang.Throwable[] throwableArray10 = mathException9.getSuppressed();
        java.lang.Throwable[] throwableArray11 = mathException9.getSuppressed();
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[1225.0]");
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
    }

    @Test
    public void test634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test634");
        java.lang.Object[] objArray1 = null;
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray5 = mathException4.getSuppressed();
        java.lang.Throwable throwable6 = null;
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) throwableArray5, throwable6);
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("", throwable6);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("", objArray1, throwable6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(throwableArray5);
    }

    @Test
    public void test635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test635");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution22 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl23 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double[] doubleArray34 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        double double36 = org.apache.commons.math.stat.StatUtils.max(doubleArray34);
        double double37 = tTestImpl23.pairedT(doubleArray28, doubleArray34);
        double double38 = tTestImpl0.t(100.0d, doubleArray34);
        org.apache.commons.math.distribution.TDistribution tDistribution39 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl40 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution39);
        double[] doubleArray46 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double47 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray46);
        double double48 = tTestImpl40.t((double) 1.0f, doubleArray46);
        double[] doubleArray53 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double54 = org.apache.commons.math.stat.StatUtils.product(doubleArray53);
        double[] doubleArray59 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double60 = org.apache.commons.math.stat.StatUtils.product(doubleArray59);
        double[] doubleArray65 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double66 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray65);
        double double68 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray59, doubleArray65, (double) 10.0f);
        double double69 = tTestImpl40.pairedT(doubleArray53, doubleArray59);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory70 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution71 = distributionFactory70.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution73 = distributionFactory70.createTDistribution(0.8538434429284575d);
        double double74 = tDistribution73.getDegreesOfFreedom();
        tTestImpl40.setDistribution(tDistribution73);
        tDistribution73.setDegreesOfFreedom((double) 1L);
        double double78 = tDistribution73.getDegreesOfFreedom();
        tTestImpl0.setDistribution(tDistribution73);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary81 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double82 = tTestImpl0.t(0.5801210456783388d, statisticalSummary81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-2.579976173587085d) + "'", double38 == (-2.579976173587085d));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1.539663200366486d + "'", double48 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + (-1820.0d) + "'", double54 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + (-1820.0d) + "'", double60 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 5214.25d + "'", double68 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertNotNull(distributionFactory70);
        org.junit.Assert.assertNotNull(normalDistribution71);
        org.junit.Assert.assertNotNull(tDistribution73);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.8538434429284575d + "'", double74 == 0.8538434429284575d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 1.0d + "'", double78 == 1.0d);
    }

    @Test
    public void test636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test636");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution1 = null;
        tTestImpl0.setDistribution(tDistribution1);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl9 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray15 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double16 = org.apache.commons.math.stat.StatUtils.product(doubleArray15);
        double[] doubleArray21 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray21);
        double double24 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray15, doubleArray21, (double) 10.0f);
        double double25 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray15);
        double double28 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray15, (int) (short) 1, (int) (short) 0);
        double double29 = tTestImpl9.t((double) 1, doubleArray15);
        org.apache.commons.math.distribution.TDistribution tDistribution30 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl31 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution30);
        double[] doubleArray37 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double38 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray37);
        double double39 = tTestImpl31.t((double) 1.0f, doubleArray37);
        double[] doubleArray44 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double45 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double double46 = org.apache.commons.math.stat.StatUtils.max(doubleArray44);
        double double47 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray44);
        double double48 = tTestImpl9.pairedT(doubleArray37, doubleArray44);
        org.apache.commons.math.distribution.TDistribution tDistribution50 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl51 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution50);
        double[] doubleArray56 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double57 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray56);
        double[] doubleArray62 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double63 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray62);
        double double64 = org.apache.commons.math.stat.StatUtils.max(doubleArray62);
        double double65 = tTestImpl51.pairedT(doubleArray56, doubleArray62);
        double double66 = org.apache.commons.math.stat.StatUtils.max(doubleArray62);
        double double67 = tTestImpl9.tTest(0.9999999999999984d, doubleArray62);
        double double68 = tTestImpl0.homoscedasticT(doubleArray7, doubleArray62);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary69 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary70 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean72 = tTestImpl0.tTest(statisticalSummary69, statisticalSummary70, 1.5533732021085067d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 1.5533732021085067");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-1820.0d) + "'", double16 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 5214.25d + "'", double24 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.5919401533569089d + "'", double29 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.539663200366486d + "'", double39 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 100.0d + "'", double46 == 100.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 12706.0d + "'", double47 == 12706.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 100.0d + "'", double64 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 100.0d + "'", double66 == 100.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.22127614024118358d + "'", double67 == 0.22127614024118358d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
    }

    @Test
    public void test637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test637");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.0d, (double) 10L);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution7 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution10 = distributionFactory0.createGammaDistribution(100.0d, 34.99999999999999d);
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution12 = distributionFactory0.createChiSquareDistribution(100.0d);
        org.apache.commons.math.distribution.PascalDistribution pascalDistribution15 = distributionFactory0.createPascalDistribution(100, (double) (short) 1);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution17 = distributionFactory0.createPoissonDistribution(100.0d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution7);
        org.junit.Assert.assertNotNull(gammaDistribution10);
        org.junit.Assert.assertNotNull(chiSquaredDistribution12);
        org.junit.Assert.assertNotNull(pascalDistribution15);
        org.junit.Assert.assertNotNull(poissonDistribution17);
    }

    @Test
    public void test638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test638");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 0.0d, (int) (short) 0, 0);
        double double9 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double10 = org.apache.commons.math.stat.StatUtils.max(doubleArray1);
        double double11 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double14 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1, (int) '4', (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 35.0d + "'", double4 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 34.99999999999999d + "'", double9 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
    }

    @Test
    public void test639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test639");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution21 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double30 = tTestImpl22.t((double) 1.0f, doubleArray28);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double37 = org.apache.commons.math.stat.StatUtils.max(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray35);
        double double39 = tTestImpl0.pairedT(doubleArray28, doubleArray35);
        double[] doubleArray41 = new double[] { '#' };
        double double42 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray41);
        double double43 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray41);
        double double44 = org.apache.commons.math.stat.StatUtils.product(doubleArray41);
        double double45 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray41);
        double double47 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray41, (double) 100.0f);
        double double48 = org.apache.commons.math.stat.StatUtils.product(doubleArray41);
        double[] doubleArray50 = new double[] { '#' };
        double double51 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray50);
        double double52 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray41, doubleArray50);
        double double53 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray50);
        double double54 = org.apache.commons.math.stat.StatUtils.variance(doubleArray50);
        double[] doubleArray56 = new double[] { '#' };
        double double57 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray56);
        double double58 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray56);
        double double59 = org.apache.commons.math.stat.StatUtils.min(doubleArray56);
        double double60 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray56);
        // The following exception was thrown during execution in test generation
        try {
            double double61 = tTestImpl0.homoscedasticTTest(doubleArray50, doubleArray56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.539663200366486d + "'", double30 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 12706.0d + "'", double38 == 12706.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[35.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1225.0d + "'", double42 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1225.0d + "'", double43 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 35.0d + "'", double44 == 35.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 3.5553480614894135d + "'", double45 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 35.0d + "'", double47 == 35.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 35.0d + "'", double48 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[35.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1225.0d + "'", double51 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 3.5553480614894135d + "'", double53 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[35.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1225.0d + "'", double57 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1225.0d + "'", double58 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 35.0d + "'", double59 == 35.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 3.5553480614894135d + "'", double60 == 3.5553480614894135d);
    }

    @Test
    public void test640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test640");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double6 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1, (int) (byte) 0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 34.99999999999999d + "'", double3 == 34.99999999999999d);
    }

    @Test
    public void test641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test641");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution22 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl23 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double[] doubleArray34 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        double double36 = org.apache.commons.math.stat.StatUtils.max(doubleArray34);
        double double37 = tTestImpl23.pairedT(doubleArray28, doubleArray34);
        double double38 = tTestImpl0.t(100.0d, doubleArray34);
        org.apache.commons.math.distribution.TDistribution tDistribution39 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl40 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution39);
        double[] doubleArray45 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double46 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray45);
        double[] doubleArray51 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double52 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray51);
        double double53 = org.apache.commons.math.stat.StatUtils.max(doubleArray51);
        double double54 = tTestImpl40.pairedT(doubleArray45, doubleArray51);
        double double56 = org.apache.commons.math.stat.StatUtils.variance(doubleArray45, (double) 100);
        org.apache.commons.math.distribution.TDistribution tDistribution57 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl58 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution57);
        double[] doubleArray63 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double64 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray63);
        double[] doubleArray69 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double70 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray69);
        double double71 = org.apache.commons.math.stat.StatUtils.max(doubleArray69);
        double double72 = tTestImpl58.pairedT(doubleArray63, doubleArray69);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean74 = tTestImpl0.homoscedasticTTest(doubleArray45, doubleArray69, (-2.579976173587085d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: -2.579976173587085");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-2.579976173587085d) + "'", double38 == (-2.579976173587085d));
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 100.0d + "'", double53 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 2310.0d + "'", double56 == 2310.0d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 100.0d + "'", double71 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
    }

    @Test
    public void test642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test642");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double8 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, (int) (byte) 10, (int) (short) -1, 52.00000000000001d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 35.0d + "'", double4 == 35.0d);
    }

    @Test
    public void test643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test643");
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray4 = mathException3.getSuppressed();
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray4);
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException5);
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray9 = mathException8.getSuppressed();
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray9);
        mathException6.addSuppressed((java.lang.Throwable) mathException10);
        java.lang.Throwable[] throwableArray12 = mathException10.getSuppressed();
        java.lang.Throwable[] throwableArray13 = mathException10.getSuppressed();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
    }

    @Test
    public void test644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test644");
        double[] doubleArray4 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double5 = org.apache.commons.math.stat.StatUtils.product(doubleArray4);
        double[] doubleArray10 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double11 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray10);
        double double13 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray4, doubleArray10, (double) 10.0f);
        org.apache.commons.math.distribution.TDistribution tDistribution14 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution14);
        double[] doubleArray20 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double21 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double28 = org.apache.commons.math.stat.StatUtils.max(doubleArray26);
        double double29 = tTestImpl15.pairedT(doubleArray20, doubleArray26);
        double double30 = org.apache.commons.math.stat.StatUtils.max(doubleArray26);
        double double31 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray4, doubleArray26);
        double double32 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray4);
        double double33 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray4);
        double double34 = org.apache.commons.math.stat.StatUtils.min(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1820.0d) + "'", double5 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5214.25d + "'", double13 == 5214.25d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 100.0d + "'", double30 == 100.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-16.25d) + "'", double31 == (-16.25d));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-1.0d) + "'", double34 == (-1.0d));
    }

    @Test
    public void test645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test645");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray2 = mathException1.getSuppressed();
        java.lang.Object[] objArray5 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("", objArray5);
        java.lang.Object[] objArray9 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("", objArray9);
        mathException6.addSuppressed((java.lang.Throwable) mathException10);
        java.lang.Object[] objArray14 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("", objArray14);
        java.lang.Object[] objArray18 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("", objArray18);
        mathException15.addSuppressed((java.lang.Throwable) mathException19);
        mathException6.addSuppressed((java.lang.Throwable) mathException19);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) throwableArray2, (java.lang.Throwable) mathException6);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException22);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray27 = mathException26.getSuppressed();
        java.lang.Throwable throwable28 = null;
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) throwableArray27, throwable28);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("", throwable28);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray34 = mathException33.getSuppressed();
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray34);
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException35);
        mathException30.addSuppressed((java.lang.Throwable) mathException35);
        mathException22.addSuppressed((java.lang.Throwable) mathException35);
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray42 = mathException41.getSuppressed();
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray42);
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException43);
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray47 = mathException46.getSuppressed();
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray47);
        mathException44.addSuppressed((java.lang.Throwable) mathException48);
        java.lang.Throwable[] throwableArray50 = mathException48.getSuppressed();
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException48);
        java.lang.Throwable[] throwableArray52 = mathException51.getSuppressed();
        mathException22.addSuppressed((java.lang.Throwable) mathException51);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[1225.0]");
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray52);
    }

    @Test
    public void test646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test646");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        tDistribution34.setDegreesOfFreedom((double) 1L);
        double double39 = tDistribution34.getDegreesOfFreedom();
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl40 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution34);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory41 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution42 = distributionFactory41.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution44 = distributionFactory41.createTDistribution(0.8538434429284575d);
        double double45 = tDistribution44.getDegreesOfFreedom();
        double double46 = tDistribution44.getDegreesOfFreedom();
        tTestImpl40.setDistribution(tDistribution44);
        double[] doubleArray53 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double54 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray53);
        double double55 = org.apache.commons.math.stat.StatUtils.max(doubleArray53);
        double double56 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray53);
        double double57 = org.apache.commons.math.stat.StatUtils.variance(doubleArray53);
        double double58 = org.apache.commons.math.stat.StatUtils.variance(doubleArray53);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean60 = tTestImpl40.tTest(0.4500776384309941d, doubleArray53, (double) (-1.0f));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: -1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory41);
        org.junit.Assert.assertNotNull(normalDistribution42);
        org.junit.Assert.assertNotNull(tDistribution44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.8538434429284575d + "'", double45 == 0.8538434429284575d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.8538434429284575d + "'", double46 == 0.8538434429284575d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 100.0d + "'", double55 == 100.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 12706.0d + "'", double56 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 2310.0d + "'", double57 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 2310.0d + "'", double58 == 2310.0d);
    }

    @Test
    public void test647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test647");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 0.0d, (int) (short) 0, 0);
        double double9 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        double double13 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, (int) (byte) 0, (int) (short) 1, (double) 100L);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 35.0d + "'", double4 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 35.0d + "'", double9 == 35.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 35.0d + "'", double13 == 35.0d);
    }

    @Test
    public void test648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test648");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution21 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double30 = tTestImpl22.t((double) 1.0f, doubleArray28);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double37 = org.apache.commons.math.stat.StatUtils.max(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray35);
        double double39 = tTestImpl0.pairedT(doubleArray28, doubleArray35);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl40 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray45 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double46 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray45);
        double double47 = org.apache.commons.math.stat.StatUtils.max(doubleArray45);
        double[] doubleArray52 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double53 = org.apache.commons.math.stat.StatUtils.product(doubleArray52);
        double[] doubleArray58 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double59 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray58);
        double double61 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray52, doubleArray58, (double) 10.0f);
        double double62 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray52);
        double double63 = tTestImpl40.t(doubleArray45, doubleArray52);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl64 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray70 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double71 = org.apache.commons.math.stat.StatUtils.product(doubleArray70);
        double[] doubleArray76 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double77 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray76);
        double double79 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray70, doubleArray76, (double) 10.0f);
        double double80 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray70);
        double double83 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray70, (int) (short) 1, (int) (short) 0);
        double double84 = tTestImpl64.t((double) 1, doubleArray70);
        double double85 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray70);
        double double88 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray70, (int) (short) 0, (int) (short) 0);
        double double89 = tTestImpl0.homoscedasticT(doubleArray52, doubleArray70);
        // The following exception was thrown during execution in test generation
        try {
            double double92 = org.apache.commons.math.stat.StatUtils.variance(doubleArray52, (int) 'a', (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.539663200366486d + "'", double30 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 12706.0d + "'", double38 == 12706.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 100.0d + "'", double47 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + (-1820.0d) + "'", double53 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 5214.25d + "'", double61 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.5943989439169762d + "'", double63 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + (-1820.0d) + "'", double71 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 5214.25d + "'", double79 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 1.5919401533569089d + "'", double84 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 3931.0d + "'", double85 == 3931.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double88));
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
    }

    @Test
    public void test649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test649");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.0d, (double) 10L);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution7 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution10 = distributionFactory0.createGammaDistribution(100.0d, 34.99999999999999d);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution12 = distributionFactory0.createPoissonDistribution(65.0d);
        org.apache.commons.math.distribution.FDistribution fDistribution15 = distributionFactory0.createFDistribution(6.109428088468881d, (double) (short) 10);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution7);
        org.junit.Assert.assertNotNull(gammaDistribution10);
        org.junit.Assert.assertNotNull(poissonDistribution12);
        org.junit.Assert.assertNotNull(fDistribution15);
    }

    @Test
    public void test650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test650");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray6 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.max(doubleArray12);
        double double15 = tTestImpl1.pairedT(doubleArray6, doubleArray12);
        double double17 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray12, 0.03982783727702899d);
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray12);
        double double19 = org.apache.commons.math.stat.StatUtils.mean(doubleArray12);
        double double22 = org.apache.commons.math.stat.StatUtils.max(doubleArray12, (int) (byte) 1, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double25 = org.apache.commons.math.stat.StatUtils.sum(doubleArray12, (int) (short) 0, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 12706.0d + "'", double18 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 38.0d + "'", double19 == 38.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
    }

    @Test
    public void test651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test651");
        java.lang.Object[] objArray3 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("", objArray3);
        java.lang.Object[] objArray7 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("", objArray7);
        mathException4.addSuppressed((java.lang.Throwable) mathException8);
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException8);
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray12 = mathException11.getSuppressed();
        mathException10.addSuppressed((java.lang.Throwable) mathException11);
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("", (java.lang.Throwable) mathException11);
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException();
        java.lang.Object[] objArray16 = mathException15.getArguments();
        java.lang.Object[] objArray19 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("", objArray19);
        java.lang.Object[] objArray23 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("", objArray23);
        mathException20.addSuppressed((java.lang.Throwable) mathException24);
        mathException15.addSuppressed((java.lang.Throwable) mathException24);
        mathException11.addSuppressed((java.lang.Throwable) mathException24);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException24);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[1225.0]");
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[1225.0]");
    }

    @Test
    public void test652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test652");
        double[] doubleArray4 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray4);
        double double6 = org.apache.commons.math.stat.StatUtils.max(doubleArray4);
        double double7 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray4);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        org.apache.commons.math.distribution.TDistribution tDistribution22 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl23 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double[] doubleArray34 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        double double36 = org.apache.commons.math.stat.StatUtils.max(doubleArray34);
        double double37 = tTestImpl23.pairedT(doubleArray28, doubleArray34);
        double double38 = org.apache.commons.math.stat.StatUtils.max(doubleArray34);
        double double39 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray12, doubleArray34);
        double double40 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray4, doubleArray34);
        double double41 = org.apache.commons.math.stat.StatUtils.sum(doubleArray34);
        // The following exception was thrown during execution in test generation
        try {
            double double45 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray34, (int) '4', 100, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + (-16.25d) + "'", double39 == (-16.25d));
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 152.0d + "'", double41 == 152.0d);
    }

    @Test
    public void test653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test653");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution6 = distributionFactory0.createGammaDistribution(0.8538434429284575d, (double) (byte) 10);
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution8 = distributionFactory0.createChiSquareDistribution(36.0d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution9 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution(0.22127614024118358d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(gammaDistribution6);
        org.junit.Assert.assertNotNull(chiSquaredDistribution8);
        org.junit.Assert.assertNotNull(normalDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
    }

    @Test
    public void test654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test654");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(10.0d, (double) (short) 1);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution8 = distributionFactory0.createPoissonDistribution((double) 1.0f);
        org.apache.commons.math.distribution.TDistribution tDistribution10 = distributionFactory0.createTDistribution((double) 10L);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution12 = distributionFactory0.createExponentialDistribution((double) 0.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: mean must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(poissonDistribution8);
        org.junit.Assert.assertNotNull(tDistribution10);
    }

    @Test
    public void test655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test655");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution7 = distributionFactory0.createNormalDistribution(12706.0d, 0.8538434429284575d);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution9 = distributionFactory0.createExponentialDistribution(10.858998997563567d);
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution12 = distributionFactory0.createWeibullDistribution(0.5801210456783388d, 152.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.WeibullDistribution weibullDistribution15 = distributionFactory0.createWeibullDistribution((double) 100.0f, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Scale must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(normalDistribution7);
        org.junit.Assert.assertNotNull(exponentialDistribution9);
        org.junit.Assert.assertNotNull(weibullDistribution12);
    }

    @Test
    public void test656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test656");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        tDistribution34.setDegreesOfFreedom((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl39 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution34);
        double[] doubleArray45 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double46 = org.apache.commons.math.stat.StatUtils.product(doubleArray45);
        double[] doubleArray51 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double52 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray51);
        double double53 = org.apache.commons.math.stat.StatUtils.max(doubleArray51);
        double double54 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray51);
        double double55 = org.apache.commons.math.stat.StatUtils.variance(doubleArray51);
        double double56 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray45, doubleArray51);
        double double57 = tTestImpl39.t((-2.579976173587085d), doubleArray45);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary59 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double60 = tTestImpl39.tTest((double) 'a', statisticalSummary59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-1820.0d) + "'", double46 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 100.0d + "'", double53 == 100.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 12706.0d + "'", double54 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2310.0d + "'", double55 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + (-16.25d) + "'", double56 == (-16.25d));
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.8665959518530197d + "'", double57 == 1.8665959518530197d);
    }

    @Test
    public void test657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test657");
        org.apache.commons.math.MathException mathException0 = new org.apache.commons.math.MathException();
        java.lang.Object[] objArray1 = mathException0.getArguments();
        java.lang.String str2 = mathException0.getPattern();
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test658");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory21 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution22 = distributionFactory21.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution24 = distributionFactory21.createTDistribution(0.8538434429284575d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl25 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution24);
        tTestImpl0.setDistribution(tDistribution24);
        double[] doubleArray34 = new double[] { '4', (byte) 10, (byte) 10, (byte) 10, (short) 1, 1.0d };
        double double37 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray34, 0, (int) (short) 1);
        double double38 = org.apache.commons.math.stat.StatUtils.sum(doubleArray34);
        double double39 = tTestImpl0.t(0.0d, doubleArray34);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary41 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean43 = tTestImpl0.tTest(Double.NaN, statisticalSummary41, 65.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 65.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(distributionFactory21);
        org.junit.Assert.assertNotNull(normalDistribution22);
        org.junit.Assert.assertNotNull(tDistribution24);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[52.0, 10.0, 10.0, 10.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 52.00000000000001d + "'", double37 == 52.00000000000001d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 84.0d + "'", double38 == 84.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.7925163190605438d + "'", double39 == 1.7925163190605438d);
    }

    @Test
    public void test659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test659");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, (double) 100.0f);
        double double8 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double9 = org.apache.commons.math.stat.StatUtils.mean(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 35.0d + "'", double4 == 35.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 34.99999999999999d + "'", double8 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 35.0d + "'", double9 == 35.0d);
    }

    @Test
    public void test660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test660");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl32 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray38 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double39 = org.apache.commons.math.stat.StatUtils.product(doubleArray38);
        double[] doubleArray44 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double45 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double double47 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray38, doubleArray44, (double) 10.0f);
        double double48 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray38);
        double double51 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray38, (int) (short) 1, (int) (short) 0);
        double double52 = tTestImpl32.t((double) 1, doubleArray38);
        org.apache.commons.math.distribution.TDistribution tDistribution53 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl54 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution53);
        double[] doubleArray60 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double61 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray60);
        double double62 = tTestImpl54.t((double) 1.0f, doubleArray60);
        double[] doubleArray67 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double68 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray67);
        double double69 = org.apache.commons.math.stat.StatUtils.max(doubleArray67);
        double double70 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray67);
        double double71 = tTestImpl32.pairedT(doubleArray60, doubleArray67);
        double double73 = org.apache.commons.math.stat.StatUtils.variance(doubleArray67, (double) ' ');
        double double74 = tTestImpl1.t((double) (byte) 0, doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + (-1820.0d) + "'", double39 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 5214.25d + "'", double47 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.5919401533569089d + "'", double52 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1.539663200366486d + "'", double62 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 100.0d + "'", double69 == 100.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 12706.0d + "'", double70 == 12706.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 2310.0d + "'", double73 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 1.5812757192953102d + "'", double74 == 1.5812757192953102d);
    }

    @Test
    public void test661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test661");
        double[] doubleArray4 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double5 = org.apache.commons.math.stat.StatUtils.product(doubleArray4);
        double[] doubleArray10 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double11 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray10);
        double double13 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray4, doubleArray10, (double) 10.0f);
        double double14 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray4);
        double double17 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray4, 0, 0);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1820.0d) + "'", double5 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5214.25d + "'", double13 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test662");
        java.lang.Object[] objArray3 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("", objArray3);
        java.lang.Object[] objArray7 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("", objArray7);
        mathException4.addSuppressed((java.lang.Throwable) mathException8);
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException8);
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray12 = mathException11.getSuppressed();
        mathException10.addSuppressed((java.lang.Throwable) mathException11);
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("", (java.lang.Throwable) mathException11);
        java.lang.Throwable[] throwableArray15 = mathException11.getSuppressed();
        java.lang.Throwable throwable16 = null;
        // The following exception was thrown during execution in test generation
        try {
            mathException11.addSuppressed(throwable16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[1225.0]");
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
    }

    @Test
    public void test663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test663");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        double[] doubleArray25 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double26 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray25);
        double double27 = org.apache.commons.math.stat.StatUtils.max(doubleArray25);
        double double28 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        double double29 = org.apache.commons.math.stat.StatUtils.variance(doubleArray25);
        org.apache.commons.math.distribution.TDistribution tDistribution30 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl31 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution30);
        double[] doubleArray37 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double38 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray37);
        double double39 = tTestImpl31.t((double) 1.0f, doubleArray37);
        double double40 = tTestImpl0.t(doubleArray25, doubleArray37);
        org.apache.commons.math.distribution.TDistribution tDistribution41 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl42 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution41);
        double[] doubleArray48 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double49 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray48);
        double double50 = tTestImpl42.t((double) 1.0f, doubleArray48);
        double[] doubleArray55 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double56 = org.apache.commons.math.stat.StatUtils.product(doubleArray55);
        double[] doubleArray61 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double62 = org.apache.commons.math.stat.StatUtils.product(doubleArray61);
        double[] doubleArray67 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double68 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray67);
        double double70 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray61, doubleArray67, (double) 10.0f);
        double double71 = tTestImpl42.pairedT(doubleArray55, doubleArray61);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory72 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution73 = distributionFactory72.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution75 = distributionFactory72.createTDistribution(0.8538434429284575d);
        double double76 = tDistribution75.getDegreesOfFreedom();
        tTestImpl42.setDistribution(tDistribution75);
        tDistribution75.setDegreesOfFreedom((double) 1L);
        double double82 = tDistribution75.cumulativeProbability((-1820.0d), 0.5943989439169762d);
        tTestImpl0.setDistribution(tDistribution75);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 12706.0d + "'", double28 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 2310.0d + "'", double29 == 2310.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.539663200366486d + "'", double39 == 1.539663200366486d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1.539663200366486d + "'", double50 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + (-1820.0d) + "'", double56 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + (-1820.0d) + "'", double62 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 5214.25d + "'", double70 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertNotNull(distributionFactory72);
        org.junit.Assert.assertNotNull(normalDistribution73);
        org.junit.Assert.assertNotNull(tDistribution75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.8538434429284575d + "'", double76 == 0.8538434429284575d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.670531799205166d + "'", double82 == 0.670531799205166d);
    }

    @Test
    public void test664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test664");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution22 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl23 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double[] doubleArray34 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        double double36 = org.apache.commons.math.stat.StatUtils.max(doubleArray34);
        double double37 = tTestImpl23.pairedT(doubleArray28, doubleArray34);
        double double38 = tTestImpl0.t(100.0d, doubleArray34);
        double double39 = org.apache.commons.math.stat.StatUtils.sum(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-2.579976173587085d) + "'", double38 == (-2.579976173587085d));
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 152.0d + "'", double39 == 152.0d);
    }

    @Test
    public void test665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test665");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.mean(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 34.99999999999999d + "'", double3 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 35.0d + "'", double4 == 35.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 35.0d + "'", double5 == 35.0d);
    }

    @Test
    public void test666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test666");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.0d, (double) 10L);
        org.apache.commons.math.distribution.TDistribution tDistribution8 = distributionFactory0.createTDistribution(Double.NaN);
        // The following exception was thrown during execution in test generation
        try {
            double double11 = tDistribution8.cumulativeProbability(10.0d, 1.5919401533569089d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lower endpoint must be less than or equal to upper endpoint");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(tDistribution8);
    }

    @Test
    public void test667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test667");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution2 = distributionFactory0.createChiSquareDistribution((double) 100);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution4 = distributionFactory0.createPoissonDistribution(0.5739591588987152d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution5 = distributionFactory0.createNormalDistribution();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(chiSquaredDistribution2);
        org.junit.Assert.assertNotNull(poissonDistribution4);
        org.junit.Assert.assertNotNull(normalDistribution5);
    }

    @Test
    public void test668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test668");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution1 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl2 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution1);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double[] doubleArray13 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double14 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray13);
        double double15 = org.apache.commons.math.stat.StatUtils.max(doubleArray13);
        double double16 = tTestImpl2.pairedT(doubleArray7, doubleArray13);
        double double19 = org.apache.commons.math.stat.StatUtils.variance(doubleArray7, 1, (int) (short) 0);
        org.apache.commons.math.distribution.TDistribution tDistribution20 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl21 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double[] doubleArray32 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double33 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray32);
        double double34 = org.apache.commons.math.stat.StatUtils.max(doubleArray32);
        double double35 = tTestImpl21.pairedT(doubleArray26, doubleArray32);
        double double38 = org.apache.commons.math.stat.StatUtils.variance(doubleArray26, 1, (int) (short) 0);
        double double39 = tTestImpl0.tTest(doubleArray7, doubleArray26);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl40 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray46 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double47 = org.apache.commons.math.stat.StatUtils.product(doubleArray46);
        double[] doubleArray52 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double53 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray52);
        double double55 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray46, doubleArray52, (double) 10.0f);
        double double56 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray46);
        double double59 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray46, (int) (short) 1, (int) (short) 0);
        double double60 = tTestImpl40.t((double) 1, doubleArray46);
        org.apache.commons.math.distribution.TDistribution tDistribution62 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl63 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution62);
        double[] doubleArray68 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double69 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray68);
        double[] doubleArray74 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double75 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray74);
        double double76 = org.apache.commons.math.stat.StatUtils.max(doubleArray74);
        double double77 = tTestImpl63.pairedT(doubleArray68, doubleArray74);
        double double78 = tTestImpl40.t(100.0d, doubleArray74);
        double double79 = org.apache.commons.math.stat.StatUtils.max(doubleArray74);
        org.apache.commons.math.distribution.TDistribution tDistribution80 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl81 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution80);
        double[] doubleArray86 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double87 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray86);
        double[] doubleArray92 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double93 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray92);
        double double94 = org.apache.commons.math.stat.StatUtils.max(doubleArray92);
        double double95 = tTestImpl81.pairedT(doubleArray86, doubleArray92);
        double double97 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray92, (double) 10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean99 = tTestImpl0.homoscedasticTTest(doubleArray74, doubleArray92, 0.8538434429284575d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.8538434429284575");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 100.0d + "'", double34 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + (-1820.0d) + "'", double47 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 5214.25d + "'", double55 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.5919401533569089d + "'", double60 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 100.0d + "'", double76 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + (-2.579976173587085d) + "'", double78 == (-2.579976173587085d));
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 100.0d + "'", double79 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double93));
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 100.0d + "'", double94 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double95));
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + (-1.0d) + "'", double97 == (-1.0d));
    }

    @Test
    public void test669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test669");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution2 = distributionFactory0.createChiSquareDistribution((double) 100);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution4 = distributionFactory0.createPoissonDistribution(0.5739591588987152d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.PascalDistribution pascalDistribution7 = distributionFactory0.createPascalDistribution((int) (short) 100, (double) 10.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability of success must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(chiSquaredDistribution2);
        org.junit.Assert.assertNotNull(poissonDistribution4);
    }

    @Test
    public void test670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test670");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray10 = new double[] { 679.5833333333335d, 10.858998997563567d };
        // The following exception was thrown during execution in test generation
        try {
            double double11 = tTestImpl0.pairedTTest(doubleArray5, doubleArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input arrays must have the same (positive) length.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[679.5833333333335, 10.858998997563567]");
    }

    @Test
    public void test671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test671");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.FDistribution fDistribution3 = distributionFactory0.createFDistribution(16.25d, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
    }

    @Test
    public void test672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test672");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution22 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl23 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double[] doubleArray34 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        double double36 = org.apache.commons.math.stat.StatUtils.max(doubleArray34);
        double double37 = tTestImpl23.pairedT(doubleArray28, doubleArray34);
        double double38 = tTestImpl0.t(100.0d, doubleArray34);
        double[] doubleArray43 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double44 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray43);
        double double45 = org.apache.commons.math.stat.StatUtils.max(doubleArray43);
        double double46 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray43);
        double[] doubleArray51 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double52 = org.apache.commons.math.stat.StatUtils.product(doubleArray51);
        double double54 = org.apache.commons.math.stat.StatUtils.variance(doubleArray51, (double) 10.0f);
        double double55 = tTestImpl0.tTest(doubleArray43, doubleArray51);
        double double56 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray51);
        double double58 = org.apache.commons.math.stat.StatUtils.variance(doubleArray51, (double) '#');
        double double59 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray51);
        // The following exception was thrown during execution in test generation
        try {
            double double63 = org.apache.commons.math.stat.StatUtils.variance(doubleArray51, (double) 10.0f, (int) (short) -1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-2.579976173587085d) + "'", double38 == (-2.579976173587085d));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 100.0d + "'", double45 == 100.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 12706.0d + "'", double46 == 12706.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-1820.0d) + "'", double52 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 679.5833333333334d + "'", double54 == 679.5833333333334d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.5801210456783388d + "'", double55 == 0.5801210456783388d);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 679.5833333333334d + "'", double58 == 679.5833333333334d);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
    }

    @Test
    public void test673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test673");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution22 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl23 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double[] doubleArray34 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        double double36 = org.apache.commons.math.stat.StatUtils.max(doubleArray34);
        double double37 = tTestImpl23.pairedT(doubleArray28, doubleArray34);
        double double38 = tTestImpl0.t(100.0d, doubleArray34);
        double[] doubleArray44 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double45 = org.apache.commons.math.stat.StatUtils.product(doubleArray44);
        double[] doubleArray50 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double51 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray50);
        double double53 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray44, doubleArray50, (double) 10.0f);
        double double54 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double double56 = org.apache.commons.math.stat.StatUtils.variance(doubleArray44, (double) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean58 = tTestImpl0.tTest((double) (short) 0, doubleArray44, 0.5739591588987152d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.5739591588987152");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-2.579976173587085d) + "'", double38 == (-2.579976173587085d));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1820.0d) + "'", double45 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 5214.25d + "'", double53 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 679.5833333333334d + "'", double56 == 679.5833333333334d);
    }

    @Test
    public void test674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test674");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray12 = new double[] { '#' };
        double double13 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.min(doubleArray12);
        double double19 = org.apache.commons.math.stat.StatUtils.variance(doubleArray12, 0.0d, (int) (short) 0, 0);
        double double20 = org.apache.commons.math.stat.StatUtils.min(doubleArray12);
        double double22 = org.apache.commons.math.stat.StatUtils.variance(doubleArray12, (double) (-1.0f));
        // The following exception was thrown during execution in test generation
        try {
            double double23 = tTestImpl1.t(65.0d, doubleArray12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1225.0d + "'", double13 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1225.0d + "'", double14 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 35.0d + "'", double15 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 35.0d + "'", double20 == 35.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
    }

    @Test
    public void test675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test675");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        double[] doubleArray6 = new double[] { (-1.0f) };
        double double7 = org.apache.commons.math.stat.StatUtils.min(doubleArray6);
        double double8 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray1, doubleArray6);
        double double9 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double10 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 35.0d + "'", double4 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 36.0d + "'", double8 == 36.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 35.0d + "'", double9 == 35.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1225.0d + "'", double10 == 1225.0d);
    }

    @Test
    public void test676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test676");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        double double37 = tDistribution34.getDegreesOfFreedom();
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl38 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution34);
        double[] doubleArray40 = new double[] { '#' };
        double double41 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray40);
        org.apache.commons.math.distribution.TDistribution tDistribution42 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl43 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution42);
        double[] doubleArray48 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double49 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray48);
        double[] doubleArray54 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double55 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray54);
        double double56 = org.apache.commons.math.stat.StatUtils.max(doubleArray54);
        double double57 = tTestImpl43.pairedT(doubleArray48, doubleArray54);
        double double59 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray54, 0.03982783727702899d);
        double double60 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray54);
        double double61 = org.apache.commons.math.stat.StatUtils.mean(doubleArray54);
        // The following exception was thrown during execution in test generation
        try {
            double double62 = tTestImpl38.homoscedasticTTest(doubleArray40, doubleArray54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.8538434429284575d + "'", double37 == 0.8538434429284575d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[35.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1225.0d + "'", double41 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 100.0d + "'", double56 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + (-1.0d) + "'", double59 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 12706.0d + "'", double60 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 38.0d + "'", double61 == 38.0d);
    }

    @Test
    public void test677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test677");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        tDistribution34.setDegreesOfFreedom((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl39 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution34);
        double[] doubleArray45 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double46 = org.apache.commons.math.stat.StatUtils.product(doubleArray45);
        double[] doubleArray51 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double52 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray51);
        double double53 = org.apache.commons.math.stat.StatUtils.max(doubleArray51);
        double double54 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray51);
        double double55 = org.apache.commons.math.stat.StatUtils.variance(doubleArray51);
        double double56 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray45, doubleArray51);
        double double57 = tTestImpl39.t((-2.579976173587085d), doubleArray45);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary59 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double60 = tTestImpl39.tTest(0.34089313230206053d, statisticalSummary59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-1820.0d) + "'", double46 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 100.0d + "'", double53 == 100.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 12706.0d + "'", double54 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2310.0d + "'", double55 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + (-16.25d) + "'", double56 == (-16.25d));
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.8665959518530197d + "'", double57 == 1.8665959518530197d);
    }

    @Test
    public void test678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test678");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double3 = tTestImpl0.homoscedasticTTest(statisticalSummary1, statisticalSummary2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test679");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        tDistribution34.setDegreesOfFreedom((double) 1L);
        double double39 = tDistribution34.getDegreesOfFreedom();
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl40 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution34);
        org.apache.commons.math.distribution.TDistribution tDistribution41 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl42 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution41);
        double[] doubleArray48 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double49 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray48);
        double double50 = tTestImpl42.t((double) 1.0f, doubleArray48);
        double[] doubleArray55 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double56 = org.apache.commons.math.stat.StatUtils.product(doubleArray55);
        double[] doubleArray61 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double62 = org.apache.commons.math.stat.StatUtils.product(doubleArray61);
        double[] doubleArray67 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double68 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray67);
        double double70 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray61, doubleArray67, (double) 10.0f);
        double double71 = tTestImpl42.pairedT(doubleArray55, doubleArray61);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory72 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution73 = distributionFactory72.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution75 = distributionFactory72.createTDistribution(0.8538434429284575d);
        double double76 = tDistribution75.getDegreesOfFreedom();
        tTestImpl42.setDistribution(tDistribution75);
        tDistribution75.setDegreesOfFreedom((double) 1L);
        double double80 = tDistribution75.getDegreesOfFreedom();
        tTestImpl40.setDistribution(tDistribution75);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary82 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary83 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double84 = tTestImpl40.homoscedasticTTest(statisticalSummary82, statisticalSummary83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1.539663200366486d + "'", double50 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + (-1820.0d) + "'", double56 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + (-1820.0d) + "'", double62 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 5214.25d + "'", double70 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertNotNull(distributionFactory72);
        org.junit.Assert.assertNotNull(normalDistribution73);
        org.junit.Assert.assertNotNull(tDistribution75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.8538434429284575d + "'", double76 == 0.8538434429284575d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 1.0d + "'", double80 == 1.0d);
    }

    @Test
    public void test680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test680");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        org.apache.commons.math.distribution.TDistribution tDistribution16 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl17 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution16);
        double[] doubleArray22 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double23 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray22);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double30 = org.apache.commons.math.stat.StatUtils.max(doubleArray28);
        double double31 = tTestImpl17.pairedT(doubleArray22, doubleArray28);
        double double32 = org.apache.commons.math.stat.StatUtils.max(doubleArray28);
        double double33 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray6, doubleArray28);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl34 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray39 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double40 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray39);
        double double41 = org.apache.commons.math.stat.StatUtils.max(doubleArray39);
        double[] doubleArray46 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double47 = org.apache.commons.math.stat.StatUtils.product(doubleArray46);
        double[] doubleArray52 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double53 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray52);
        double double55 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray46, doubleArray52, (double) 10.0f);
        double double56 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray46);
        double double57 = tTestImpl34.t(doubleArray39, doubleArray46);
        double double58 = tTestImpl1.t(doubleArray6, doubleArray46);
        double[] doubleArray65 = new double[] { '4', (byte) 10, (byte) 10, (byte) 10, (short) 1, 1.0d };
        double double68 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray65, 0, (int) (short) 1);
        double double69 = org.apache.commons.math.stat.StatUtils.max(doubleArray65);
        double[] doubleArray70 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double71 = tTestImpl1.homoscedasticT(doubleArray65, doubleArray70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 100.0d + "'", double30 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 100.0d + "'", double32 == 100.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + (-16.25d) + "'", double33 == (-16.25d));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 100.0d + "'", double41 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + (-1820.0d) + "'", double47 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 5214.25d + "'", double55 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.5943989439169762d + "'", double57 == 0.5943989439169762d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[52.0, 10.0, 10.0, 10.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 52.00000000000001d + "'", double68 == 52.00000000000001d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 52.0d + "'", double69 == 52.0d);
    }

    @Test
    public void test681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test681");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 35.0d + "'", double4 == 35.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 35.0d + "'", double5 == 35.0d);
    }

    @Test
    public void test682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test682");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(10.0d, (double) (short) 1);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution8 = distributionFactory0.createPoissonDistribution((double) 1.0f);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.HypergeometricDistribution hypergeometricDistribution12 = distributionFactory0.createHypergeometricDistribution((int) (short) 0, (int) '#', 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: number of successes must be less than or equal to population size");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(poissonDistribution8);
    }

    @Test
    public void test683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test683");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary25 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double26 = tTestImpl0.t((double) (-1), statisticalSummary25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
    }

    @Test
    public void test684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test684");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        double[] doubleArray29 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double30 = org.apache.commons.math.stat.StatUtils.product(doubleArray29);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray29, doubleArray35, (double) 10.0f);
        double double39 = tTestImpl0.tTest(5214.25d, doubleArray35);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl41 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray47 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double48 = org.apache.commons.math.stat.StatUtils.product(doubleArray47);
        double[] doubleArray53 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double54 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray53);
        double double56 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray47, doubleArray53, (double) 10.0f);
        double double57 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47);
        double double60 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47, (int) (short) 1, (int) (short) 0);
        double double61 = tTestImpl41.t((double) 1, doubleArray47);
        double double62 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray47);
        double double63 = tTestImpl0.tTest((double) 10.0f, doubleArray47);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary65 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double66 = tTestImpl0.tTest(6.109428088468881d, statisticalSummary65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1820.0d) + "'", double30 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 5214.25d + "'", double38 == 5214.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2.2065780869162666E-7d + "'", double39 == 2.2065780869162666E-7d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + (-1820.0d) + "'", double48 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 5214.25d + "'", double56 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1.5919401533569089d + "'", double61 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 3931.0d + "'", double62 == 3931.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.433786033254294d + "'", double63 == 0.433786033254294d);
    }

    @Test
    public void test685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test685");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 0.0d, (int) (short) 0, 0);
        double double9 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double10 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double11 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 35.0d + "'", double4 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 34.99999999999999d + "'", double9 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 3.5553480614894135d + "'", double10 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
    }

    @Test
    public void test686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test686");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double6 = org.apache.commons.math.stat.StatUtils.sum(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 35.0d + "'", double4 == 35.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
    }

    @Test
    public void test687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test687");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl31 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray36 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double37 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray36);
        double double38 = org.apache.commons.math.stat.StatUtils.max(doubleArray36);
        double[] doubleArray43 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double44 = org.apache.commons.math.stat.StatUtils.product(doubleArray43);
        double[] doubleArray49 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double50 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray49);
        double double52 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray43, doubleArray49, (double) 10.0f);
        double double53 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray43);
        double double54 = tTestImpl31.t(doubleArray36, doubleArray43);
        double[] doubleArray59 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double60 = org.apache.commons.math.stat.StatUtils.product(doubleArray59);
        double[] doubleArray65 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double66 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray65);
        double double68 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray59, doubleArray65, (double) 10.0f);
        org.apache.commons.math.distribution.TDistribution tDistribution69 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl70 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution69);
        double[] doubleArray75 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double76 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray75);
        double[] doubleArray81 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double82 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray81);
        double double83 = org.apache.commons.math.stat.StatUtils.max(doubleArray81);
        double double84 = tTestImpl70.pairedT(doubleArray75, doubleArray81);
        double double85 = org.apache.commons.math.stat.StatUtils.max(doubleArray81);
        double double86 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray59, doubleArray81);
        double double87 = tTestImpl1.homoscedasticT(doubleArray36, doubleArray59);
        // The following exception was thrown during execution in test generation
        try {
            double double90 = org.apache.commons.math.stat.StatUtils.variance(doubleArray36, (int) (byte) 10, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-1820.0d) + "'", double44 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 5214.25d + "'", double52 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.5943989439169762d + "'", double54 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + (-1820.0d) + "'", double60 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 5214.25d + "'", double68 == 5214.25d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 100.0d + "'", double83 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 100.0d + "'", double85 == 100.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + (-16.25d) + "'", double86 == (-16.25d));
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.5943989439169762d + "'", double87 == 0.5943989439169762d);
    }

    @Test
    public void test688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test688");
        double[] doubleArray4 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray4);
        double double6 = org.apache.commons.math.stat.StatUtils.max(doubleArray4);
        double double7 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray4);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        org.apache.commons.math.distribution.TDistribution tDistribution22 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl23 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double[] doubleArray34 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        double double36 = org.apache.commons.math.stat.StatUtils.max(doubleArray34);
        double double37 = tTestImpl23.pairedT(doubleArray28, doubleArray34);
        double double38 = org.apache.commons.math.stat.StatUtils.max(doubleArray34);
        double double39 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray12, doubleArray34);
        double double40 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray4, doubleArray34);
        double double41 = org.apache.commons.math.stat.StatUtils.sum(doubleArray34);
        double double42 = org.apache.commons.math.stat.StatUtils.mean(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + (-16.25d) + "'", double39 == (-16.25d));
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 152.0d + "'", double41 == 152.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 38.0d + "'", double42 == 38.0d);
    }

    @Test
    public void test689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test689");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution6 = distributionFactory0.createWeibullDistribution((double) (byte) 10, (double) 1);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution8 = distributionFactory0.createExponentialDistribution((double) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution11 = distributionFactory0.createCauchyDistribution(0.4500776384309941d, (-5200.000000000001d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Scale must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(weibullDistribution6);
        org.junit.Assert.assertNotNull(exponentialDistribution8);
    }

    @Test
    public void test690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test690");
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray5 = mathException4.getSuppressed();
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray5);
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException6);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray10 = mathException9.getSuppressed();
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray10);
        mathException7.addSuppressed((java.lang.Throwable) mathException11);
        java.lang.Throwable[] throwableArray13 = mathException11.getSuppressed();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException11);
        java.lang.Throwable[] throwableArray15 = mathException14.getSuppressed();
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Throwable) mathException14);
        java.lang.Object[] objArray17 = mathException16.getArguments();
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("hi!", objArray17);
        java.lang.Object[] objArray19 = mathException18.getArguments();
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
    }

    @Test
    public void test691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test691");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        double[] doubleArray42 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double43 = org.apache.commons.math.stat.StatUtils.product(doubleArray42);
        double[] doubleArray48 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double49 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray48);
        double double50 = org.apache.commons.math.stat.StatUtils.max(doubleArray48);
        double double51 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray48);
        double double52 = org.apache.commons.math.stat.StatUtils.variance(doubleArray48);
        double double53 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray42, doubleArray48);
        double double54 = org.apache.commons.math.stat.StatUtils.product(doubleArray42);
        double double55 = tTestImpl1.t(21.75d, doubleArray42);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary56 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary57 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double58 = tTestImpl1.homoscedasticT(statisticalSummary56, statisticalSummary57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + (-1820.0d) + "'", double43 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 100.0d + "'", double50 == 100.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 12706.0d + "'", double51 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 2310.0d + "'", double52 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + (-16.25d) + "'", double53 == (-16.25d));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + (-1820.0d) + "'", double54 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
    }

    @Test
    public void test692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test692");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double1 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test693");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.0d, (double) 10L);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution7 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution10 = distributionFactory0.createGammaDistribution(100.0d, 34.99999999999999d);
        org.apache.commons.math.distribution.FDistribution fDistribution13 = distributionFactory0.createFDistribution(1.0d, (double) 100L);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution16 = distributionFactory0.createNormalDistribution(10.858998997563567d, (double) 100);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution18 = distributionFactory0.createExponentialDistribution((double) 'a');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.GammaDistribution gammaDistribution21 = distributionFactory0.createGammaDistribution(0.0d, (double) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: alpha must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution7);
        org.junit.Assert.assertNotNull(gammaDistribution10);
        org.junit.Assert.assertNotNull(fDistribution13);
        org.junit.Assert.assertNotNull(normalDistribution16);
        org.junit.Assert.assertNotNull(exponentialDistribution18);
    }

    @Test
    public void test694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test694");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution22 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl23 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double[] doubleArray34 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        double double36 = org.apache.commons.math.stat.StatUtils.max(doubleArray34);
        double double37 = tTestImpl23.pairedT(doubleArray28, doubleArray34);
        double double38 = tTestImpl0.t(100.0d, doubleArray34);
        double[] doubleArray43 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double44 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray43);
        double double45 = org.apache.commons.math.stat.StatUtils.max(doubleArray43);
        double double46 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray43);
        double[] doubleArray51 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double52 = org.apache.commons.math.stat.StatUtils.product(doubleArray51);
        double double54 = org.apache.commons.math.stat.StatUtils.variance(doubleArray51, (double) 10.0f);
        double double55 = tTestImpl0.tTest(doubleArray43, doubleArray51);
        org.apache.commons.math.distribution.TDistribution tDistribution56 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl57 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution56);
        double[] doubleArray63 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double64 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray63);
        double double65 = tTestImpl57.t((double) 1.0f, doubleArray63);
        double[] doubleArray70 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double71 = org.apache.commons.math.stat.StatUtils.product(doubleArray70);
        double[] doubleArray76 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double77 = org.apache.commons.math.stat.StatUtils.product(doubleArray76);
        double[] doubleArray82 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double83 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray82);
        double double85 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray76, doubleArray82, (double) 10.0f);
        double double86 = tTestImpl57.pairedT(doubleArray70, doubleArray76);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory87 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution88 = distributionFactory87.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution90 = distributionFactory87.createTDistribution(0.8538434429284575d);
        double double91 = tDistribution90.getDegreesOfFreedom();
        tTestImpl57.setDistribution(tDistribution90);
        tDistribution90.setDegreesOfFreedom((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl95 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution90);
        tTestImpl0.setDistribution(tDistribution90);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary98 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double99 = tTestImpl0.tTest((double) (-1.0f), statisticalSummary98);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-2.579976173587085d) + "'", double38 == (-2.579976173587085d));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 100.0d + "'", double45 == 100.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 12706.0d + "'", double46 == 12706.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-1820.0d) + "'", double52 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 679.5833333333334d + "'", double54 == 679.5833333333334d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.5801210456783388d + "'", double55 == 0.5801210456783388d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 1.539663200366486d + "'", double65 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + (-1820.0d) + "'", double71 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + (-1820.0d) + "'", double77 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 5214.25d + "'", double85 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertNotNull(distributionFactory87);
        org.junit.Assert.assertNotNull(normalDistribution88);
        org.junit.Assert.assertNotNull(tDistribution90);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.8538434429284575d + "'", double91 == 0.8538434429284575d);
    }

    @Test
    public void test695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test695");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        org.apache.commons.math.distribution.TDistribution tDistribution16 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl17 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution16);
        double[] doubleArray22 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double23 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray22);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double30 = org.apache.commons.math.stat.StatUtils.max(doubleArray28);
        double double31 = tTestImpl17.pairedT(doubleArray22, doubleArray28);
        double double32 = org.apache.commons.math.stat.StatUtils.max(doubleArray28);
        double double33 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray6, doubleArray28);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl34 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray39 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double40 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray39);
        double double41 = org.apache.commons.math.stat.StatUtils.max(doubleArray39);
        double[] doubleArray46 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double47 = org.apache.commons.math.stat.StatUtils.product(doubleArray46);
        double[] doubleArray52 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double53 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray52);
        double double55 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray46, doubleArray52, (double) 10.0f);
        double double56 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray46);
        double double57 = tTestImpl34.t(doubleArray39, doubleArray46);
        double double58 = tTestImpl1.t(doubleArray6, doubleArray46);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary60 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double61 = tTestImpl1.t(0.433786033254294d, statisticalSummary60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 100.0d + "'", double30 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 100.0d + "'", double32 == 100.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + (-16.25d) + "'", double33 == (-16.25d));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 100.0d + "'", double41 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + (-1820.0d) + "'", double47 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 5214.25d + "'", double55 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.5943989439169762d + "'", double57 == 0.5943989439169762d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
    }

    @Test
    public void test696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test696");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        tDistribution34.setDegreesOfFreedom((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl39 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution34);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl40 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray45 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double46 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray45);
        double double47 = org.apache.commons.math.stat.StatUtils.max(doubleArray45);
        double[] doubleArray52 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double53 = org.apache.commons.math.stat.StatUtils.product(doubleArray52);
        double[] doubleArray58 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double59 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray58);
        double double61 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray52, doubleArray58, (double) 10.0f);
        double double62 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray52);
        double double63 = tTestImpl40.t(doubleArray45, doubleArray52);
        double[] doubleArray65 = new double[] { '#' };
        double double66 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray65);
        double double67 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray65);
        double double68 = org.apache.commons.math.stat.StatUtils.min(doubleArray65);
        double[] doubleArray70 = new double[] { (-1.0f) };
        double double71 = org.apache.commons.math.stat.StatUtils.min(doubleArray70);
        double double72 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray65, doubleArray70);
        // The following exception was thrown during execution in test generation
        try {
            double double73 = tTestImpl39.pairedTTest(doubleArray45, doubleArray65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input arrays must have the same (positive) length.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 100.0d + "'", double47 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + (-1820.0d) + "'", double53 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 5214.25d + "'", double61 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.5943989439169762d + "'", double63 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[35.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1225.0d + "'", double66 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 1225.0d + "'", double67 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 35.0d + "'", double68 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + (-1.0d) + "'", double71 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 36.0d + "'", double72 == 36.0d);
    }

    @Test
    public void test697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test697");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        double[] doubleArray25 = new double[] { '#' };
        double double26 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        double double27 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray25);
        double double28 = org.apache.commons.math.stat.StatUtils.product(doubleArray25);
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray25);
        double double31 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray25, (double) 100.0f);
        double double32 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray25);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl33 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray38 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double39 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray38);
        double double40 = org.apache.commons.math.stat.StatUtils.max(doubleArray38);
        double[] doubleArray45 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double46 = org.apache.commons.math.stat.StatUtils.product(doubleArray45);
        double[] doubleArray51 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double52 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray51);
        double double54 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray45, doubleArray51, (double) 10.0f);
        double double55 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray45);
        double double56 = tTestImpl33.t(doubleArray38, doubleArray45);
        double[] doubleArray62 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double63 = org.apache.commons.math.stat.StatUtils.product(doubleArray62);
        double[] doubleArray68 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double69 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray68);
        double double71 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray62, doubleArray68, (double) 10.0f);
        double double72 = tTestImpl33.tTest(5214.25d, doubleArray68);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl74 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray80 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double81 = org.apache.commons.math.stat.StatUtils.product(doubleArray80);
        double[] doubleArray86 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double87 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray86);
        double double89 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray80, doubleArray86, (double) 10.0f);
        double double90 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray80);
        double double93 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray80, (int) (short) 1, (int) (short) 0);
        double double94 = tTestImpl74.t((double) 1, doubleArray80);
        double double95 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray80);
        double double96 = tTestImpl33.tTest((double) 10.0f, doubleArray80);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean98 = tTestImpl0.pairedTTest(doubleArray25, doubleArray80, 0.1177019708001247d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input arrays must have the same (positive) length.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[35.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1225.0d + "'", double26 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1225.0d + "'", double27 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 35.0d + "'", double28 == 35.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 3.5553480614894135d + "'", double29 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 35.0d + "'", double31 == 35.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 34.99999999999999d + "'", double32 == 34.99999999999999d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-1820.0d) + "'", double46 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 5214.25d + "'", double54 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.5943989439169762d + "'", double56 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + (-1820.0d) + "'", double63 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 5214.25d + "'", double71 == 5214.25d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 2.2065780869162666E-7d + "'", double72 == 2.2065780869162666E-7d);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + (-1820.0d) + "'", double81 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 5214.25d + "'", double89 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double90));
        org.junit.Assert.assertTrue(Double.isNaN(double93));
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 1.5919401533569089d + "'", double94 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 3931.0d + "'", double95 == 3931.0d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 0.433786033254294d + "'", double96 == 0.433786033254294d);
    }

    @Test
    public void test698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test698");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution7 = distributionFactory0.createNormalDistribution(12706.0d, 0.8538434429284575d);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution10 = distributionFactory0.createGammaDistribution(34.99999999999999d, (double) 'a');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution11 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution13 = distributionFactory0.createPoissonDistribution(21.75d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(normalDistribution7);
        org.junit.Assert.assertNotNull(gammaDistribution10);
        org.junit.Assert.assertNotNull(normalDistribution11);
        org.junit.Assert.assertNotNull(poissonDistribution13);
    }

    @Test
    public void test699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test699");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution(1225.0d, 1.0d);
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution9 = distributionFactory0.createWeibullDistribution((double) 100, (double) (byte) 100);
        org.apache.commons.math.distribution.FDistribution fDistribution12 = distributionFactory0.createFDistribution(679.5833333333334d, (double) 100.0f);
        // The following exception was thrown during execution in test generation
        try {
            double double14 = fDistribution12.inverseCumulativeProbability(10.858998997563567d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: p must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(weibullDistribution9);
        org.junit.Assert.assertNotNull(fDistribution12);
    }

    @Test
    public void test700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test700");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean4 = tTestImpl0.tTest((double) (byte) -1, statisticalSummary2, (double) 100L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 100.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test701");
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray3 = mathException2.getSuppressed();
        java.lang.Throwable throwable4 = null;
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) throwableArray3, throwable4);
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("", throwable4);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray10 = mathException9.getSuppressed();
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray10);
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException11);
        mathException6.addSuppressed((java.lang.Throwable) mathException11);
        java.lang.String str14 = mathException6.getPattern();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test702");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution7 = distributionFactory0.createNormalDistribution(12706.0d, 0.8538434429284575d);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution10 = distributionFactory0.createGammaDistribution(34.99999999999999d, (double) 'a');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution13 = distributionFactory0.createNormalDistribution(0.0d, (double) 100L);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution16 = distributionFactory0.createNormalDistribution((double) 1, 0.22127614024118358d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution19 = distributionFactory0.createNormalDistribution((-5200.000000000001d), 38.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution22 = distributionFactory0.createCauchyDistribution(1.053060673855556d, (-6.003340578321836d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Scale must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(normalDistribution7);
        org.junit.Assert.assertNotNull(gammaDistribution10);
        org.junit.Assert.assertNotNull(normalDistribution13);
        org.junit.Assert.assertNotNull(normalDistribution16);
        org.junit.Assert.assertNotNull(normalDistribution19);
    }

    @Test
    public void test703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test703");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray6 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.max(doubleArray12);
        double double15 = tTestImpl1.pairedT(doubleArray6, doubleArray12);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl16 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray22 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double23 = org.apache.commons.math.stat.StatUtils.product(doubleArray22);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double31 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray22, doubleArray28, (double) 10.0f);
        double double32 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray22);
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray22, (int) (short) 1, (int) (short) 0);
        double double36 = tTestImpl16.t((double) 1, doubleArray22);
        org.apache.commons.math.distribution.TDistribution tDistribution38 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl39 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution38);
        double[] doubleArray44 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double45 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double[] doubleArray50 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double51 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray50);
        double double52 = org.apache.commons.math.stat.StatUtils.max(doubleArray50);
        double double53 = tTestImpl39.pairedT(doubleArray44, doubleArray50);
        double double54 = tTestImpl16.t(100.0d, doubleArray50);
        double double55 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray50);
        double double57 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray50, (double) (short) 100);
        double[] doubleArray59 = new double[] { '#' };
        double double60 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray59);
        double double61 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray59);
        double double62 = org.apache.commons.math.stat.StatUtils.min(doubleArray59);
        double[] doubleArray64 = new double[] { (-1.0f) };
        double double65 = org.apache.commons.math.stat.StatUtils.min(doubleArray64);
        double double66 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray59, doubleArray64);
        // The following exception was thrown during execution in test generation
        try {
            double double67 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray12, doubleArray64);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input arrays must have the same (positive) length.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-1820.0d) + "'", double23 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 5214.25d + "'", double31 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.5919401533569089d + "'", double36 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 100.0d + "'", double52 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + (-2.579976173587085d) + "'", double54 == (-2.579976173587085d));
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 12706.0d + "'", double55 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[35.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1225.0d + "'", double60 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1225.0d + "'", double61 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 35.0d + "'", double62 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + (-1.0d) + "'", double65 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 36.0d + "'", double66 == 36.0d);
    }

    @Test
    public void test704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test704");
        double[] doubleArray4 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double5 = org.apache.commons.math.stat.StatUtils.product(doubleArray4);
        double double7 = org.apache.commons.math.stat.StatUtils.variance(doubleArray4, (double) 10.0f);
        // The following exception was thrown during execution in test generation
        try {
            double double10 = org.apache.commons.math.stat.StatUtils.sum(doubleArray4, (int) (short) 100, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1820.0d) + "'", double5 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 679.5833333333334d + "'", double7 == 679.5833333333334d);
    }

    @Test
    public void test705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test705");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution1 = null;
        tTestImpl0.setDistribution(tDistribution1);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl9 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray15 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double16 = org.apache.commons.math.stat.StatUtils.product(doubleArray15);
        double[] doubleArray21 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray21);
        double double24 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray15, doubleArray21, (double) 10.0f);
        double double25 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray15);
        double double28 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray15, (int) (short) 1, (int) (short) 0);
        double double29 = tTestImpl9.t((double) 1, doubleArray15);
        org.apache.commons.math.distribution.TDistribution tDistribution30 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl31 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution30);
        double[] doubleArray37 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double38 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray37);
        double double39 = tTestImpl31.t((double) 1.0f, doubleArray37);
        double[] doubleArray44 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double45 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double double46 = org.apache.commons.math.stat.StatUtils.max(doubleArray44);
        double double47 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray44);
        double double48 = tTestImpl9.pairedT(doubleArray37, doubleArray44);
        org.apache.commons.math.distribution.TDistribution tDistribution50 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl51 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution50);
        double[] doubleArray56 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double57 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray56);
        double[] doubleArray62 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double63 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray62);
        double double64 = org.apache.commons.math.stat.StatUtils.max(doubleArray62);
        double double65 = tTestImpl51.pairedT(doubleArray56, doubleArray62);
        double double66 = org.apache.commons.math.stat.StatUtils.max(doubleArray62);
        double double67 = tTestImpl9.tTest(0.9999999999999984d, doubleArray62);
        double double68 = tTestImpl0.homoscedasticT(doubleArray7, doubleArray62);
        org.apache.commons.math.distribution.TDistribution tDistribution69 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl70 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution69);
        double[] doubleArray75 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double76 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray75);
        double[] doubleArray81 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double82 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray81);
        double double83 = org.apache.commons.math.stat.StatUtils.max(doubleArray81);
        double double84 = tTestImpl70.pairedT(doubleArray75, doubleArray81);
        double double85 = org.apache.commons.math.stat.StatUtils.max(doubleArray81);
        double double86 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray81);
        double[] doubleArray88 = new double[] { '#' };
        double double89 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray88);
        double double90 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray88);
        double double91 = org.apache.commons.math.stat.StatUtils.min(doubleArray88);
        double double95 = org.apache.commons.math.stat.StatUtils.variance(doubleArray88, 0.0d, (int) (short) 0, 0);
        double double96 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray88);
        double double97 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray88);
        // The following exception was thrown during execution in test generation
        try {
            double double98 = tTestImpl0.homoscedasticTTest(doubleArray81, doubleArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-1820.0d) + "'", double16 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 5214.25d + "'", double24 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.5919401533569089d + "'", double29 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.539663200366486d + "'", double39 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 100.0d + "'", double46 == 100.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 12706.0d + "'", double47 == 12706.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 100.0d + "'", double64 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 100.0d + "'", double66 == 100.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.22127614024118358d + "'", double67 == 0.22127614024118358d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 100.0d + "'", double83 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 100.0d + "'", double85 == 100.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 12706.0d + "'", double86 == 12706.0d);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[35.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 1225.0d + "'", double89 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 1225.0d + "'", double90 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 35.0d + "'", double91 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double95));
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 34.99999999999999d + "'", double96 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 3.5553480614894135d + "'", double97 == 3.5553480614894135d);
    }

    @Test
    public void test706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test706");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray6 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.max(doubleArray12);
        double double15 = tTestImpl1.pairedT(doubleArray6, doubleArray12);
        double double17 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray12, 0.03982783727702899d);
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray12);
        // The following exception was thrown during execution in test generation
        try {
            double double21 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12, (int) '#', (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 12706.0d + "'", double18 == 12706.0d);
    }

    @Test
    public void test707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test707");
        double[] doubleArray4 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double5 = org.apache.commons.math.stat.StatUtils.product(doubleArray4);
        double[] doubleArray10 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double11 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray10);
        double double13 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray4, doubleArray10, (double) 10.0f);
        double double14 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray4);
        double double16 = org.apache.commons.math.stat.StatUtils.variance(doubleArray4, (double) (byte) 1);
        double double19 = org.apache.commons.math.stat.StatUtils.mean(doubleArray4, 1, 0);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1820.0d) + "'", double5 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5214.25d + "'", double13 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 679.5833333333334d + "'", double16 == 679.5833333333334d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
    }

    @Test
    public void test708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test708");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution5 = distributionFactory0.createPoissonDistribution(3.5553480614894135d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(poissonDistribution5);
    }

    @Test
    public void test709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test709");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(10.0d, (double) (short) 1);
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution8 = distributionFactory0.createChiSquareDistribution((double) 'a');
        // The following exception was thrown during execution in test generation
        try {
            double double10 = chiSquaredDistribution8.inverseCumulativeProbability((double) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: p must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(chiSquaredDistribution8);
    }

    @Test
    public void test710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test710");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        double double21 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray6);
        double double22 = org.apache.commons.math.stat.StatUtils.min(doubleArray6);
        double double25 = org.apache.commons.math.stat.StatUtils.min(doubleArray6, 1, (int) (byte) 1);
        double double26 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double double27 = org.apache.commons.math.stat.StatUtils.mean(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 3931.0d + "'", double21 == 3931.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1.0d) + "'", double22 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-1820.0d) + "'", double26 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 21.75d + "'", double27 == 21.75d);
    }

    @Test
    public void test711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test711");
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray5 = mathException4.getSuppressed();
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray5);
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException6);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray10 = mathException9.getSuppressed();
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray10);
        mathException7.addSuppressed((java.lang.Throwable) mathException11);
        java.lang.Throwable[] throwableArray13 = mathException11.getSuppressed();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException11);
        java.lang.Throwable[] throwableArray15 = mathException14.getSuppressed();
        java.lang.Object[] objArray19 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("", objArray19);
        java.lang.Object[] objArray23 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("", objArray23);
        mathException20.addSuppressed((java.lang.Throwable) mathException24);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException24);
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray28 = mathException27.getSuppressed();
        mathException26.addSuppressed((java.lang.Throwable) mathException27);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("", (java.lang.Throwable) mathException27);
        java.lang.Throwable[] throwableArray31 = mathException27.getSuppressed();
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Object[]) throwableArray15, (java.lang.Throwable) mathException27);
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray37 = mathException36.getSuppressed();
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray37);
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException38);
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray42 = mathException41.getSuppressed();
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray42);
        mathException39.addSuppressed((java.lang.Throwable) mathException43);
        java.lang.Throwable[] throwableArray45 = mathException43.getSuppressed();
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException43);
        java.lang.Throwable[] throwableArray47 = mathException46.getSuppressed();
        java.lang.Object[] objArray51 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("", objArray51);
        java.lang.Object[] objArray55 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("", objArray55);
        mathException52.addSuppressed((java.lang.Throwable) mathException56);
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException56);
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray60 = mathException59.getSuppressed();
        mathException58.addSuppressed((java.lang.Throwable) mathException59);
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("", (java.lang.Throwable) mathException59);
        java.lang.Throwable[] throwableArray63 = mathException59.getSuppressed();
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Object[]) throwableArray47, (java.lang.Throwable) mathException59);
        java.lang.Object[] objArray68 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException("", objArray68);
        java.lang.Object[] objArray72 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException("", objArray72);
        mathException69.addSuppressed((java.lang.Throwable) mathException73);
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException73);
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray77 = mathException76.getSuppressed();
        mathException75.addSuppressed((java.lang.Throwable) mathException76);
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("", (java.lang.Throwable) mathException76);
        java.lang.Throwable[] throwableArray80 = mathException76.getSuppressed();
        mathException64.addSuppressed((java.lang.Throwable) mathException76);
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) throwableArray15, (java.lang.Throwable) mathException76);
        java.lang.String str83 = mathException82.toString();
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[1225.0]");
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[1225.0]");
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[1225.0]");
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!" + "'", str83, "org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!");
    }

    @Test
    public void test712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test712");
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray4 = mathException3.getSuppressed();
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray4);
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) throwableArray4);
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException6);
        java.lang.Object[] objArray8 = mathException7.getArguments();
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("", (java.lang.Throwable) mathException7);
        java.lang.String str10 = mathException7.toString();
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "org.apache.commons.math.MathException: hi!" + "'", str10, "org.apache.commons.math.MathException: hi!");
    }

    @Test
    public void test713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test713");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution2 = distributionFactory0.createChiSquareDistribution((double) 100);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution4 = distributionFactory0.createExponentialDistribution((double) '4');
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution7 = distributionFactory0.createWeibullDistribution((double) (short) 1, 0.9119233630588404d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(chiSquaredDistribution2);
        org.junit.Assert.assertNotNull(exponentialDistribution4);
        org.junit.Assert.assertNotNull(weibullDistribution7);
    }

    @Test
    public void test714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test714");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.0d, (double) 10L);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution7 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution8 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution11 = distributionFactory0.createWeibullDistribution((double) (short) 100, 16.25d);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution13 = distributionFactory0.createExponentialDistribution(100.0d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution7);
        org.junit.Assert.assertNotNull(normalDistribution8);
        org.junit.Assert.assertNotNull(weibullDistribution11);
        org.junit.Assert.assertNotNull(exponentialDistribution13);
    }

    @Test
    public void test715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test715");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution1 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution3 = distributionFactory0.createTDistribution(0.8538434429284575d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl4 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution3);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary5 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary6 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double7 = tTestImpl4.t(statisticalSummary5, statisticalSummary6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(normalDistribution1);
        org.junit.Assert.assertNotNull(tDistribution3);
    }

    @Test
    public void test716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test716");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution(1225.0d, 1.0d);
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution9 = distributionFactory0.createWeibullDistribution((double) 100, (double) (byte) 100);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution12 = distributionFactory0.createNormalDistribution((double) (short) 1, 1.5533732021085067d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.FDistribution fDistribution15 = distributionFactory0.createFDistribution((double) 0, (double) 1.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
        org.junit.Assert.assertNotNull(weibullDistribution9);
        org.junit.Assert.assertNotNull(normalDistribution12);
    }

    @Test
    public void test717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test717");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution1 = null;
        tTestImpl0.setDistribution(tDistribution1);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl3 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray9 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double10 = org.apache.commons.math.stat.StatUtils.product(doubleArray9);
        double[] doubleArray15 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray15);
        double double18 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray9, doubleArray15, (double) 10.0f);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray9);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray9, (int) (short) 1, (int) (short) 0);
        double double23 = tTestImpl3.t((double) 1, doubleArray9);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double30 = org.apache.commons.math.stat.StatUtils.max(doubleArray28);
        double double31 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray28);
        double double32 = org.apache.commons.math.stat.StatUtils.variance(doubleArray28);
        org.apache.commons.math.distribution.TDistribution tDistribution33 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl34 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution33);
        double[] doubleArray40 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double41 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray40);
        double double42 = tTestImpl34.t((double) 1.0f, doubleArray40);
        double double43 = tTestImpl3.t(doubleArray28, doubleArray40);
        double[] doubleArray48 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double49 = org.apache.commons.math.stat.StatUtils.product(doubleArray48);
        double[] doubleArray54 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double55 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray54);
        double double57 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray48, doubleArray54, (double) 10.0f);
        double double58 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray48);
        double double61 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray48, (int) (short) 1, (int) (short) 0);
        double double62 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray48);
        double double63 = tTestImpl0.pairedT(doubleArray28, doubleArray48);
        org.apache.commons.math.distribution.TDistribution tDistribution64 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl65 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution64);
        double[] doubleArray70 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double71 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray70);
        double[] doubleArray76 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double77 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray76);
        double double78 = org.apache.commons.math.stat.StatUtils.max(doubleArray76);
        double double79 = tTestImpl65.pairedT(doubleArray70, doubleArray76);
        double double80 = org.apache.commons.math.stat.StatUtils.max(doubleArray76);
        double double81 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray76);
        double[] doubleArray82 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double83 = tTestImpl0.pairedT(doubleArray76, doubleArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-1820.0d) + "'", double10 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 5214.25d + "'", double18 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.5919401533569089d + "'", double23 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 100.0d + "'", double30 == 100.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 12706.0d + "'", double31 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 2310.0d + "'", double32 == 2310.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.539663200366486d + "'", double42 == 1.539663200366486d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + (-1820.0d) + "'", double49 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 5214.25d + "'", double57 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 3931.0d + "'", double62 == 3931.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.4500776384309941d + "'", double63 == 0.4500776384309941d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 100.0d + "'", double78 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 100.0d + "'", double80 == 100.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 12706.0d + "'", double81 == 12706.0d);
    }

    @Test
    public void test718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test718");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl25 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray30 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double31 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray30);
        double double32 = org.apache.commons.math.stat.StatUtils.max(doubleArray30);
        double[] doubleArray37 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double38 = org.apache.commons.math.stat.StatUtils.product(doubleArray37);
        double[] doubleArray43 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double44 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray43);
        double double46 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray37, doubleArray43, (double) 10.0f);
        double double47 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray37);
        double double48 = tTestImpl25.t(doubleArray30, doubleArray37);
        org.apache.commons.math.distribution.TDistribution tDistribution49 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl50 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution49);
        double[] doubleArray55 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double56 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray55);
        double[] doubleArray61 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double62 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray61);
        double double63 = org.apache.commons.math.stat.StatUtils.max(doubleArray61);
        double double64 = tTestImpl50.pairedT(doubleArray55, doubleArray61);
        double double65 = org.apache.commons.math.stat.StatUtils.max(doubleArray61);
        double double66 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray61);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl67 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray73 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double74 = org.apache.commons.math.stat.StatUtils.product(doubleArray73);
        double[] doubleArray79 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double80 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray79);
        double double82 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray73, doubleArray79, (double) 10.0f);
        double double83 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray73);
        double double86 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray73, (int) (short) 1, (int) (short) 0);
        double double87 = tTestImpl67.t((double) 1, doubleArray73);
        double double88 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray73);
        double double89 = org.apache.commons.math.stat.StatUtils.min(doubleArray73);
        double double92 = org.apache.commons.math.stat.StatUtils.min(doubleArray73, 1, (int) (byte) 1);
        double double93 = tTestImpl25.homoscedasticTTest(doubleArray61, doubleArray73);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean95 = tTestImpl0.tTest(3.5553480614894135d, doubleArray73, 65.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 65.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 100.0d + "'", double32 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-1820.0d) + "'", double38 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 5214.25d + "'", double46 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.5943989439169762d + "'", double48 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 100.0d + "'", double63 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 100.0d + "'", double65 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + (-1820.0d) + "'", double74 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 5214.25d + "'", double82 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 1.5919401533569089d + "'", double87 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 3931.0d + "'", double88 == 3931.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + (-1.0d) + "'", double89 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 1.0d + "'", double92 == 1.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.5739591588987152d + "'", double93 == 0.5739591588987152d);
    }

    @Test
    public void test719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test719");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray2 = new double[] { '#' };
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray2);
        org.apache.commons.math.distribution.TDistribution tDistribution4 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl5 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution4);
        double[] doubleArray11 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double12 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray11);
        double double13 = tTestImpl5.t((double) 1.0f, doubleArray11);
        double[] doubleArray18 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double19 = org.apache.commons.math.stat.StatUtils.product(doubleArray18);
        double[] doubleArray24 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double25 = org.apache.commons.math.stat.StatUtils.product(doubleArray24);
        double[] doubleArray30 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double31 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray30);
        double double33 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray24, doubleArray30, (double) 10.0f);
        double double34 = tTestImpl5.pairedT(doubleArray18, doubleArray24);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory35 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution36 = distributionFactory35.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution38 = distributionFactory35.createTDistribution(0.8538434429284575d);
        double double39 = tDistribution38.getDegreesOfFreedom();
        tTestImpl5.setDistribution(tDistribution38);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl41 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray47 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double48 = org.apache.commons.math.stat.StatUtils.product(doubleArray47);
        double[] doubleArray53 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double54 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray53);
        double double56 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray47, doubleArray53, (double) 10.0f);
        double double57 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47);
        double double60 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47, (int) (short) 1, (int) (short) 0);
        double double61 = tTestImpl41.t((double) 1, doubleArray47);
        org.apache.commons.math.distribution.TDistribution tDistribution63 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl64 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution63);
        double[] doubleArray69 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double70 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray69);
        double[] doubleArray75 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double76 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray75);
        double double77 = org.apache.commons.math.stat.StatUtils.max(doubleArray75);
        double double78 = tTestImpl64.pairedT(doubleArray69, doubleArray75);
        double double79 = tTestImpl41.t(100.0d, doubleArray75);
        double[] doubleArray84 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double85 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray84);
        double double86 = org.apache.commons.math.stat.StatUtils.max(doubleArray84);
        double double87 = tTestImpl5.pairedTTest(doubleArray75, doubleArray84);
        // The following exception was thrown during execution in test generation
        try {
            double double88 = tTestImpl0.homoscedasticT(doubleArray2, doubleArray75);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[35.0]");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.539663200366486d + "'", double13 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-1820.0d) + "'", double19 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-1820.0d) + "'", double25 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 5214.25d + "'", double33 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(distributionFactory35);
        org.junit.Assert.assertNotNull(normalDistribution36);
        org.junit.Assert.assertNotNull(tDistribution38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.8538434429284575d + "'", double39 == 0.8538434429284575d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + (-1820.0d) + "'", double48 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 5214.25d + "'", double56 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1.5919401533569089d + "'", double61 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 100.0d + "'", double77 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + (-2.579976173587085d) + "'", double79 == (-2.579976173587085d));
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 100.0d + "'", double86 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double87));
    }

    @Test
    public void test720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test720");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        double[] doubleArray33 = new double[] { '#' };
        double double34 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray33);
        double double35 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray33);
        double double36 = org.apache.commons.math.stat.StatUtils.variance(doubleArray33);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean38 = tTestImpl1.tTest(1.0d, doubleArray33, 10.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 10.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1225.0d + "'", double34 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 34.99999999999999d + "'", double35 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
    }

    @Test
    public void test721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test721");
        double[] doubleArray4 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double5 = org.apache.commons.math.stat.StatUtils.product(doubleArray4);
        double[] doubleArray10 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double11 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray10);
        double double13 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray4, doubleArray10, (double) 10.0f);
        org.apache.commons.math.distribution.TDistribution tDistribution14 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution14);
        double[] doubleArray20 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double21 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double28 = org.apache.commons.math.stat.StatUtils.max(doubleArray26);
        double double29 = tTestImpl15.pairedT(doubleArray20, doubleArray26);
        double double30 = org.apache.commons.math.stat.StatUtils.max(doubleArray26);
        double double31 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray4, doubleArray26);
        double double32 = org.apache.commons.math.stat.StatUtils.variance(doubleArray26);
        // The following exception was thrown during execution in test generation
        try {
            double double35 = org.apache.commons.math.stat.StatUtils.variance(doubleArray26, (int) (short) 10, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1820.0d) + "'", double5 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5214.25d + "'", double13 == 5214.25d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 100.0d + "'", double30 == 100.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-16.25d) + "'", double31 == (-16.25d));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 2310.0d + "'", double32 == 2310.0d);
    }

    @Test
    public void test722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test722");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution5 = distributionFactory0.createPoissonDistribution(2.2065780869162666E-7d);
        org.apache.commons.math.distribution.HypergeometricDistribution hypergeometricDistribution9 = distributionFactory0.createHypergeometricDistribution((int) '4', (int) (short) 1, (int) ' ');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution12 = distributionFactory0.createNormalDistribution(0.9999995d, (double) 100.0f);
        org.apache.commons.math.distribution.HypergeometricDistribution hypergeometricDistribution16 = distributionFactory0.createHypergeometricDistribution((int) 'a', (int) '#', (int) (byte) 1);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(poissonDistribution5);
        org.junit.Assert.assertNotNull(hypergeometricDistribution9);
        org.junit.Assert.assertNotNull(normalDistribution12);
        org.junit.Assert.assertNotNull(hypergeometricDistribution16);
    }

    @Test
    public void test723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test723");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        org.apache.commons.math.distribution.TDistribution tDistribution37 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl38 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution37);
        double[] doubleArray44 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double45 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double double46 = tTestImpl38.t((double) 1.0f, doubleArray44);
        double[] doubleArray51 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double52 = org.apache.commons.math.stat.StatUtils.product(doubleArray51);
        double[] doubleArray57 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double58 = org.apache.commons.math.stat.StatUtils.product(doubleArray57);
        double[] doubleArray63 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double64 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray63);
        double double66 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray57, doubleArray63, (double) 10.0f);
        double double67 = tTestImpl38.pairedT(doubleArray51, doubleArray57);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory68 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution69 = distributionFactory68.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution71 = distributionFactory68.createTDistribution(0.8538434429284575d);
        double double72 = tDistribution71.getDegreesOfFreedom();
        tTestImpl38.setDistribution(tDistribution71);
        tDistribution71.setDegreesOfFreedom((double) 1L);
        tTestImpl1.setDistribution(tDistribution71);
        tDistribution71.setDegreesOfFreedom(0.9119233630588404d);
        double double80 = tDistribution71.cumulativeProbability(21.75d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.539663200366486d + "'", double46 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-1820.0d) + "'", double52 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + (-1820.0d) + "'", double58 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 5214.25d + "'", double66 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(distributionFactory68);
        org.junit.Assert.assertNotNull(normalDistribution69);
        org.junit.Assert.assertNotNull(tDistribution71);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.8538434429284575d + "'", double72 == 0.8538434429284575d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.9810883886884435d + "'", double80 == 0.9810883886884435d);
    }

    @Test
    public void test724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test724");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray6 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.max(doubleArray12);
        double double15 = tTestImpl1.pairedT(doubleArray6, doubleArray12);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl16 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray22 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double23 = org.apache.commons.math.stat.StatUtils.product(doubleArray22);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double31 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray22, doubleArray28, (double) 10.0f);
        double double32 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray22);
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray22, (int) (short) 1, (int) (short) 0);
        double double36 = tTestImpl16.t((double) 1, doubleArray22);
        org.apache.commons.math.distribution.TDistribution tDistribution38 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl39 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution38);
        double[] doubleArray44 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double45 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double[] doubleArray50 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double51 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray50);
        double double52 = org.apache.commons.math.stat.StatUtils.max(doubleArray50);
        double double53 = tTestImpl39.pairedT(doubleArray44, doubleArray50);
        double double54 = tTestImpl16.t(100.0d, doubleArray50);
        double double55 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray50);
        double double57 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray50, (double) (short) 100);
        double double58 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-1820.0d) + "'", double23 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 5214.25d + "'", double31 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.5919401533569089d + "'", double36 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 100.0d + "'", double52 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + (-2.579976173587085d) + "'", double54 == (-2.579976173587085d));
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 12706.0d + "'", double55 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
    }

    @Test
    public void test725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test725");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.TDistribution tDistribution2 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl3 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution2);
        double[] doubleArray8 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double9 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray8);
        double[] doubleArray14 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double15 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray14);
        double double16 = org.apache.commons.math.stat.StatUtils.max(doubleArray14);
        double double17 = tTestImpl3.pairedT(doubleArray8, doubleArray14);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl18 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray24 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double25 = org.apache.commons.math.stat.StatUtils.product(doubleArray24);
        double[] doubleArray30 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double31 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray30);
        double double33 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray24, doubleArray30, (double) 10.0f);
        double double34 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray24);
        double double37 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray24, (int) (short) 1, (int) (short) 0);
        double double38 = tTestImpl18.t((double) 1, doubleArray24);
        org.apache.commons.math.distribution.TDistribution tDistribution40 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl41 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution40);
        double[] doubleArray46 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double47 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray46);
        double[] doubleArray52 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double53 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray52);
        double double54 = org.apache.commons.math.stat.StatUtils.max(doubleArray52);
        double double55 = tTestImpl41.pairedT(doubleArray46, doubleArray52);
        double double56 = tTestImpl18.t(100.0d, doubleArray52);
        double double57 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray52);
        double double59 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray14, doubleArray52, (double) (short) 100);
        double double60 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray14);
        org.apache.commons.math.distribution.TDistribution tDistribution61 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl62 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution61);
        double[] doubleArray67 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double68 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray67);
        double[] doubleArray73 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double74 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray73);
        double double75 = org.apache.commons.math.stat.StatUtils.max(doubleArray73);
        double double76 = tTestImpl62.pairedT(doubleArray67, doubleArray73);
        double double77 = org.apache.commons.math.stat.StatUtils.max(doubleArray73);
        double double78 = tTestImpl1.pairedT(doubleArray14, doubleArray73);
        double[] doubleArray80 = new double[] { '#' };
        double double81 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray80);
        double double82 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray80);
        double double83 = org.apache.commons.math.stat.StatUtils.min(doubleArray80);
        double double87 = org.apache.commons.math.stat.StatUtils.variance(doubleArray80, 0.0d, (int) (short) 0, 0);
        double[] doubleArray89 = new double[] { '#' };
        double double90 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray89);
        double double91 = org.apache.commons.math.stat.StatUtils.min(doubleArray89);
        // The following exception was thrown during execution in test generation
        try {
            double double92 = tTestImpl1.pairedTTest(doubleArray80, doubleArray89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array lengths must be equal and at least 2.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 100.0d + "'", double16 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-1820.0d) + "'", double25 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 5214.25d + "'", double33 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.5919401533569089d + "'", double38 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 100.0d + "'", double54 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + (-2.579976173587085d) + "'", double56 == (-2.579976173587085d));
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 12706.0d + "'", double57 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 12706.0d + "'", double60 == 12706.0d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 100.0d + "'", double75 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 100.0d + "'", double77 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[35.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 1225.0d + "'", double81 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 1225.0d + "'", double82 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 35.0d + "'", double83 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[35.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 1225.0d + "'", double90 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 35.0d + "'", double91 == 35.0d);
    }

    @Test
    public void test726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test726");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory21 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution22 = distributionFactory21.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution24 = distributionFactory21.createTDistribution(0.8538434429284575d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl25 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution24);
        tTestImpl0.setDistribution(tDistribution24);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary27 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary28 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double29 = tTestImpl0.t(statisticalSummary27, statisticalSummary28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(distributionFactory21);
        org.junit.Assert.assertNotNull(normalDistribution22);
        org.junit.Assert.assertNotNull(tDistribution24);
    }

    @Test
    public void test727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test727");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        double[] doubleArray6 = new double[] { (-1.0f) };
        double double7 = org.apache.commons.math.stat.StatUtils.min(doubleArray6);
        double double8 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray1, doubleArray6);
        double double10 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, 36.0d);
        double double12 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 0.0d);
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 35.0d + "'", double4 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 36.0d + "'", double8 == 36.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 3.5553480614894135d + "'", double13 == 3.5553480614894135d);
    }

    @Test
    public void test728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test728");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution1 = null;
        tTestImpl0.setDistribution(tDistribution1);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary3 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double5 = tTestImpl0.homoscedasticTTest(statisticalSummary3, statisticalSummary4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test729");
        java.lang.Object[] objArray2 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException("", objArray2);
        java.lang.Object[] objArray6 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("", objArray6);
        mathException3.addSuppressed((java.lang.Throwable) mathException7);
        java.lang.Object[] objArray11 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("", objArray11);
        java.lang.Object[] objArray15 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("", objArray15);
        mathException12.addSuppressed((java.lang.Throwable) mathException16);
        mathException3.addSuppressed((java.lang.Throwable) mathException16);
        java.lang.Throwable throwable19 = null;
        // The following exception was thrown during execution in test generation
        try {
            mathException3.addSuppressed(throwable19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[1225.0]");
    }

    @Test
    public void test730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test730");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        double double37 = tDistribution34.getDegreesOfFreedom();
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl38 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution34);
        // The following exception was thrown during execution in test generation
        try {
            double double40 = tDistribution34.inverseCumulativeProbability(52.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: p must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.8538434429284575d + "'", double37 == 0.8538434429284575d);
    }

    @Test
    public void test731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test731");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException();
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException1);
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException("", (java.lang.Throwable) mathException2);
    }

    @Test
    public void test732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test732");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        org.apache.commons.math.distribution.TDistribution tDistribution37 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl38 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution37);
        double[] doubleArray44 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double45 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double double46 = tTestImpl38.t((double) 1.0f, doubleArray44);
        double[] doubleArray51 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double52 = org.apache.commons.math.stat.StatUtils.product(doubleArray51);
        double[] doubleArray57 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double58 = org.apache.commons.math.stat.StatUtils.product(doubleArray57);
        double[] doubleArray63 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double64 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray63);
        double double66 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray57, doubleArray63, (double) 10.0f);
        double double67 = tTestImpl38.pairedT(doubleArray51, doubleArray57);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory68 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution69 = distributionFactory68.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution71 = distributionFactory68.createTDistribution(0.8538434429284575d);
        double double72 = tDistribution71.getDegreesOfFreedom();
        tTestImpl38.setDistribution(tDistribution71);
        tDistribution71.setDegreesOfFreedom((double) 1L);
        tTestImpl1.setDistribution(tDistribution71);
        tDistribution71.setDegreesOfFreedom(0.9119233630588404d);
        // The following exception was thrown during execution in test generation
        try {
            double double80 = tDistribution71.inverseCumulativeProbability((-1.0932601053173951d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: p must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.539663200366486d + "'", double46 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-1820.0d) + "'", double52 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + (-1820.0d) + "'", double58 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 5214.25d + "'", double66 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(distributionFactory68);
        org.junit.Assert.assertNotNull(normalDistribution69);
        org.junit.Assert.assertNotNull(tDistribution71);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.8538434429284575d + "'", double72 == 0.8538434429284575d);
    }

    @Test
    public void test733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test733");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution22 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl23 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double[] doubleArray34 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        double double36 = org.apache.commons.math.stat.StatUtils.max(doubleArray34);
        double double37 = tTestImpl23.pairedT(doubleArray28, doubleArray34);
        double double38 = tTestImpl0.t(100.0d, doubleArray34);
        org.apache.commons.math.distribution.TDistribution tDistribution39 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl40 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution39);
        double[] doubleArray46 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double47 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray46);
        double double48 = tTestImpl40.t((double) 1.0f, doubleArray46);
        double[] doubleArray53 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double54 = org.apache.commons.math.stat.StatUtils.product(doubleArray53);
        double[] doubleArray59 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double60 = org.apache.commons.math.stat.StatUtils.product(doubleArray59);
        double[] doubleArray65 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double66 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray65);
        double double68 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray59, doubleArray65, (double) 10.0f);
        double double69 = tTestImpl40.pairedT(doubleArray53, doubleArray59);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory70 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution71 = distributionFactory70.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution73 = distributionFactory70.createTDistribution(0.8538434429284575d);
        double double74 = tDistribution73.getDegreesOfFreedom();
        tTestImpl40.setDistribution(tDistribution73);
        tDistribution73.setDegreesOfFreedom((double) 1L);
        double double78 = tDistribution73.getDegreesOfFreedom();
        tTestImpl0.setDistribution(tDistribution73);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary81 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double82 = tTestImpl0.tTest(2310.0d, statisticalSummary81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-2.579976173587085d) + "'", double38 == (-2.579976173587085d));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1.539663200366486d + "'", double48 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + (-1820.0d) + "'", double54 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + (-1820.0d) + "'", double60 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 5214.25d + "'", double68 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertNotNull(distributionFactory70);
        org.junit.Assert.assertNotNull(normalDistribution71);
        org.junit.Assert.assertNotNull(tDistribution73);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.8538434429284575d + "'", double74 == 0.8538434429284575d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 1.0d + "'", double78 == 1.0d);
    }

    @Test
    public void test734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test734");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.0d, (double) 10L);
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution9 = distributionFactory0.createWeibullDistribution(Double.NaN, 2.2065780869162666E-7d);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution11 = distributionFactory0.createPoissonDistribution(84.0d);
        org.apache.commons.math.distribution.FDistribution fDistribution14 = distributionFactory0.createFDistribution((double) (short) 1, 0.5943989439169762d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(weibullDistribution9);
        org.junit.Assert.assertNotNull(poissonDistribution11);
        org.junit.Assert.assertNotNull(fDistribution14);
    }

    @Test
    public void test735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test735");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray28 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double29 = org.apache.commons.math.stat.StatUtils.product(doubleArray28);
        double[] doubleArray34 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        double double37 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray28, doubleArray34, (double) 10.0f);
        double double38 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double41 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28, (int) (short) 1, (int) (short) 0);
        double double42 = tTestImpl22.t((double) 1, doubleArray28);
        org.apache.commons.math.distribution.TDistribution tDistribution43 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl44 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution43);
        double[] doubleArray50 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double51 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray50);
        double double52 = tTestImpl44.t((double) 1.0f, doubleArray50);
        double[] doubleArray57 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double58 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray57);
        double double59 = org.apache.commons.math.stat.StatUtils.max(doubleArray57);
        double double60 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray57);
        double double61 = tTestImpl22.pairedT(doubleArray50, doubleArray57);
        double double62 = org.apache.commons.math.stat.StatUtils.min(doubleArray50);
        double double63 = tTestImpl0.tTest(0.0d, doubleArray50);
        double[] doubleArray65 = new double[] { '#' };
        double double66 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray65);
        double double67 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray65);
        double double68 = org.apache.commons.math.stat.StatUtils.sum(doubleArray65);
        // The following exception was thrown during execution in test generation
        try {
            double double69 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray50, doubleArray65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input arrays must have the same (positive) length.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-1820.0d) + "'", double29 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 5214.25d + "'", double37 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.5919401533569089d + "'", double42 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.539663200366486d + "'", double52 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 100.0d + "'", double59 == 100.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 12706.0d + "'", double60 == 12706.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + (-1.0d) + "'", double62 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.21195550612870484d + "'", double63 == 0.21195550612870484d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[35.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1225.0d + "'", double66 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 1225.0d + "'", double67 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 35.0d + "'", double68 == 35.0d);
    }

    @Test
    public void test736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test736");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory21 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution22 = distributionFactory21.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution24 = distributionFactory21.createTDistribution(0.8538434429284575d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl25 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution24);
        tTestImpl0.setDistribution(tDistribution24);
        double[] doubleArray34 = new double[] { '4', (byte) 10, (byte) 10, (byte) 10, (short) 1, 1.0d };
        double double37 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray34, 0, (int) (short) 1);
        double double38 = org.apache.commons.math.stat.StatUtils.sum(doubleArray34);
        double double39 = tTestImpl0.t(0.0d, doubleArray34);
        double double40 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray34);
        double double41 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(distributionFactory21);
        org.junit.Assert.assertNotNull(normalDistribution22);
        org.junit.Assert.assertNotNull(tDistribution24);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[52.0, 10.0, 10.0, 10.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 52.00000000000001d + "'", double37 == 52.00000000000001d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 84.0d + "'", double38 == 84.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.7925163190605438d + "'", double39 == 1.7925163190605438d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 6.109428088468881d + "'", double40 == 6.109428088468881d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 3006.0d + "'", double41 == 3006.0d);
    }

    @Test
    public void test737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test737");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution21 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double30 = tTestImpl22.t((double) 1.0f, doubleArray28);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double37 = org.apache.commons.math.stat.StatUtils.max(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray35);
        double double39 = tTestImpl0.pairedT(doubleArray28, doubleArray35);
        double[] doubleArray44 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double45 = org.apache.commons.math.stat.StatUtils.product(doubleArray44);
        double[] doubleArray50 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double51 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray50);
        double double53 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray44, doubleArray50, (double) 10.0f);
        double double54 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double double57 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44, (int) (short) 1, (int) (short) 0);
        double double58 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray44);
        org.apache.commons.math.distribution.TDistribution tDistribution59 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl60 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution59);
        double[] doubleArray65 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double66 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray65);
        double[] doubleArray71 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double72 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray71);
        double double73 = org.apache.commons.math.stat.StatUtils.max(doubleArray71);
        double double74 = tTestImpl60.pairedT(doubleArray65, doubleArray71);
        double double75 = tTestImpl0.homoscedasticTTest(doubleArray44, doubleArray71);
        double double76 = org.apache.commons.math.stat.StatUtils.min(doubleArray71);
        // The following exception was thrown during execution in test generation
        try {
            double double78 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray71, 5214.25d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid quantile value: 5214.25");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.539663200366486d + "'", double30 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 12706.0d + "'", double38 == 12706.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1820.0d) + "'", double45 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 5214.25d + "'", double53 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 3931.0d + "'", double58 == 3931.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 100.0d + "'", double73 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.5739591588987152d + "'", double75 == 0.5739591588987152d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + (-1.0d) + "'", double76 == (-1.0d));
    }

    @Test
    public void test738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test738");
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray3 = mathException2.getSuppressed();
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray3);
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException4);
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray8 = mathException7.getSuppressed();
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray8);
        mathException5.addSuppressed((java.lang.Throwable) mathException9);
        java.lang.Throwable[] throwableArray11 = mathException9.getSuppressed();
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException9);
        java.lang.Object[] objArray13 = mathException12.getArguments();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
    }

    @Test
    public void test739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test739");
        double[] doubleArray4 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray4);
        double double6 = org.apache.commons.math.stat.StatUtils.max(doubleArray4);
        double double7 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray4);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double25 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12, (int) (short) 1, (int) (short) 0);
        double double26 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray4, doubleArray12);
        double double28 = org.apache.commons.math.stat.StatUtils.variance(doubleArray12, 0.9119233630588404d);
        double double30 = org.apache.commons.math.stat.StatUtils.variance(doubleArray12, 0.0d);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 12706.0d + "'", double7 == 12706.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 16.25d + "'", double26 == 16.25d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 679.5833333333335d + "'", double28 == 679.5833333333335d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 679.5833333333334d + "'", double30 == 679.5833333333334d);
    }

    @Test
    public void test740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test740");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray6 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.max(doubleArray12);
        double double15 = tTestImpl1.pairedT(doubleArray6, doubleArray12);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl17 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray23 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double24 = org.apache.commons.math.stat.StatUtils.product(doubleArray23);
        double[] doubleArray29 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double30 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray29);
        double double32 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray23, doubleArray29, (double) 10.0f);
        double double33 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray23);
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray23, (int) (short) 1, (int) (short) 0);
        double double37 = tTestImpl17.t((double) 1, doubleArray23);
        org.apache.commons.math.distribution.TDistribution tDistribution39 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl40 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution39);
        double[] doubleArray45 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double46 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray45);
        double[] doubleArray51 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double52 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray51);
        double double53 = org.apache.commons.math.stat.StatUtils.max(doubleArray51);
        double double54 = tTestImpl40.pairedT(doubleArray45, doubleArray51);
        double double55 = tTestImpl17.t(100.0d, doubleArray51);
        double[] doubleArray60 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double61 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray60);
        double double62 = org.apache.commons.math.stat.StatUtils.max(doubleArray60);
        double double63 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray60);
        double[] doubleArray68 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double69 = org.apache.commons.math.stat.StatUtils.product(doubleArray68);
        double double71 = org.apache.commons.math.stat.StatUtils.variance(doubleArray68, (double) 10.0f);
        double double72 = tTestImpl17.tTest(doubleArray60, doubleArray68);
        double double73 = tTestImpl1.t(0.670531799205166d, doubleArray60);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary75 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean77 = tTestImpl1.tTest(0.0d, statisticalSummary75, 52.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 52.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-1820.0d) + "'", double24 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 5214.25d + "'", double32 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.5919401533569089d + "'", double37 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 100.0d + "'", double53 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + (-2.579976173587085d) + "'", double55 == (-2.579976173587085d));
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 100.0d + "'", double62 == 100.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 12706.0d + "'", double63 == 12706.0d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + (-1820.0d) + "'", double69 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 679.5833333333334d + "'", double71 == 679.5833333333334d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.5801210456783388d + "'", double72 == 0.5801210456783388d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 1.5533732021085067d + "'", double73 == 1.5533732021085067d);
    }

    @Test
    public void test741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test741");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.0d, (double) 10L);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution7 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution10 = distributionFactory0.createGammaDistribution(100.0d, 34.99999999999999d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution11 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution14 = distributionFactory0.createNormalDistribution((double) 'a', 2310.0d);
        org.apache.commons.math.distribution.TDistribution tDistribution16 = distributionFactory0.createTDistribution(1.5812757192953102d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl17 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution16);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution7);
        org.junit.Assert.assertNotNull(gammaDistribution10);
        org.junit.Assert.assertNotNull(normalDistribution11);
        org.junit.Assert.assertNotNull(normalDistribution14);
        org.junit.Assert.assertNotNull(tDistribution16);
    }

    @Test
    public void test742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test742");
        double[] doubleArray4 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray4);
        double double6 = org.apache.commons.math.stat.StatUtils.max(doubleArray4);
        double double7 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray4);
        double double8 = org.apache.commons.math.stat.StatUtils.variance(doubleArray4);
        double double9 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 2310.0d + "'", double8 == 2310.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test743");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        tDistribution34.setDegreesOfFreedom((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl39 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution34);
        double[] doubleArray45 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double46 = org.apache.commons.math.stat.StatUtils.product(doubleArray45);
        double[] doubleArray51 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double52 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray51);
        double double53 = org.apache.commons.math.stat.StatUtils.max(doubleArray51);
        double double54 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray51);
        double double55 = org.apache.commons.math.stat.StatUtils.variance(doubleArray51);
        double double56 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray45, doubleArray51);
        double double57 = tTestImpl39.t((-2.579976173587085d), doubleArray45);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary59 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double60 = tTestImpl39.t(35.0d, statisticalSummary59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-1820.0d) + "'", double46 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 100.0d + "'", double53 == 100.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 12706.0d + "'", double54 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 2310.0d + "'", double55 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + (-16.25d) + "'", double56 == (-16.25d));
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.8665959518530197d + "'", double57 == 1.8665959518530197d);
    }

    @Test
    public void test744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test744");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution1 = null;
        tTestImpl0.setDistribution(tDistribution1);
        double[] doubleArray8 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double9 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray8);
        double double10 = org.apache.commons.math.stat.StatUtils.max(doubleArray8);
        double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray8);
        double[] doubleArray16 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double17 = org.apache.commons.math.stat.StatUtils.product(doubleArray16);
        double[] doubleArray22 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double23 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray22);
        double double25 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray16, doubleArray22, (double) 10.0f);
        double double26 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray16);
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray16, (int) (short) 1, (int) (short) 0);
        double double30 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray8, doubleArray16);
        double double31 = tTestImpl0.t((double) 100, doubleArray16);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl33 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray39 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double40 = org.apache.commons.math.stat.StatUtils.product(doubleArray39);
        double[] doubleArray45 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double46 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray45);
        double double48 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray39, doubleArray45, (double) 10.0f);
        double double49 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray39);
        double double52 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray39, (int) (short) 1, (int) (short) 0);
        double double53 = tTestImpl33.t((double) 1, doubleArray39);
        double double54 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray39);
        double double55 = tTestImpl0.t(36.0d, doubleArray39);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary57 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean59 = tTestImpl0.tTest((-5200.000000000001d), statisticalSummary57, 16.25d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 16.25");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 12706.0d + "'", double11 == 12706.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1820.0d) + "'", double17 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 5214.25d + "'", double25 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 16.25d + "'", double30 == 16.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-6.003340578321836d) + "'", double31 == (-6.003340578321836d));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + (-1820.0d) + "'", double40 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 5214.25d + "'", double48 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.5919401533569089d + "'", double53 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 3931.0d + "'", double54 == 3931.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + (-1.0932601053173951d) + "'", double55 == (-1.0932601053173951d));
    }

    @Test
    public void test745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test745");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        org.apache.commons.math.distribution.TDistribution tDistribution24 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl25 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution24);
        double[] doubleArray31 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double32 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray31);
        double double33 = tTestImpl25.t((double) 1.0f, doubleArray31);
        double[] doubleArray38 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double39 = org.apache.commons.math.stat.StatUtils.product(doubleArray38);
        double[] doubleArray44 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double45 = org.apache.commons.math.stat.StatUtils.product(doubleArray44);
        double[] doubleArray50 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double51 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray50);
        double double53 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray44, doubleArray50, (double) 10.0f);
        double double54 = tTestImpl25.pairedT(doubleArray38, doubleArray44);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory55 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution56 = distributionFactory55.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution58 = distributionFactory55.createTDistribution(0.8538434429284575d);
        double double59 = tDistribution58.getDegreesOfFreedom();
        tTestImpl25.setDistribution(tDistribution58);
        tDistribution58.setDegreesOfFreedom((double) 1L);
        double double63 = tDistribution58.getDegreesOfFreedom();
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl64 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution58);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory65 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution66 = distributionFactory65.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution68 = distributionFactory65.createTDistribution(0.8538434429284575d);
        double double69 = tDistribution68.getDegreesOfFreedom();
        double double70 = tDistribution68.getDegreesOfFreedom();
        tTestImpl64.setDistribution(tDistribution68);
        tTestImpl0.setDistribution(tDistribution68);
        double[] doubleArray75 = new double[] { '#' };
        double double76 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray75);
        double double77 = org.apache.commons.math.stat.StatUtils.min(doubleArray75);
        double double80 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray75, 1, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double81 = tTestImpl0.tTest(3006.0d, doubleArray75);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.539663200366486d + "'", double33 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + (-1820.0d) + "'", double39 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1820.0d) + "'", double45 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 5214.25d + "'", double53 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(distributionFactory55);
        org.junit.Assert.assertNotNull(normalDistribution56);
        org.junit.Assert.assertNotNull(tDistribution58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.8538434429284575d + "'", double59 == 0.8538434429284575d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1.0d + "'", double63 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory65);
        org.junit.Assert.assertNotNull(normalDistribution66);
        org.junit.Assert.assertNotNull(tDistribution68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.8538434429284575d + "'", double69 == 0.8538434429284575d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.8538434429284575d + "'", double70 == 0.8538434429284575d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[35.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 1225.0d + "'", double76 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 35.0d + "'", double77 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double80));
    }

    @Test
    public void test746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test746");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        tDistribution34.setDegreesOfFreedom((double) 1L);
        double double41 = tDistribution34.cumulativeProbability((-1820.0d), 0.5943989439169762d);
        // The following exception was thrown during execution in test generation
        try {
            tDistribution34.setDegreesOfFreedom((-16.25d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.670531799205166d + "'", double41 == 0.670531799205166d);
    }

    @Test
    public void test747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test747");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.WeibullDistribution weibullDistribution7 = distributionFactory0.createWeibullDistribution((double) 1.0f, (-5200.000000000001d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Scale must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
    }

    @Test
    public void test748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test748");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        double[] doubleArray6 = new double[] { (-1.0f) };
        double double7 = org.apache.commons.math.stat.StatUtils.min(doubleArray6);
        double double8 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray1, doubleArray6);
        double double9 = org.apache.commons.math.stat.StatUtils.mean(doubleArray6);
        // The following exception was thrown during execution in test generation
        try {
            double double12 = org.apache.commons.math.stat.StatUtils.product(doubleArray6, (int) '4', (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 35.0d + "'", double4 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 36.0d + "'", double8 == 36.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.0d) + "'", double9 == (-1.0d));
    }

    @Test
    public void test749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test749");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution2 = distributionFactory0.createChiSquareDistribution((double) 100);
        double double4 = chiSquaredDistribution2.cumulativeProbability(16.25d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(chiSquaredDistribution2);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 3.585268863716878E-23d + "'", double4 == 3.585268863716878E-23d);
    }

    @Test
    public void test750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test750");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution21 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double30 = tTestImpl22.t((double) 1.0f, doubleArray28);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double37 = org.apache.commons.math.stat.StatUtils.max(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray35);
        double double39 = tTestImpl0.pairedT(doubleArray28, doubleArray35);
        double[] doubleArray44 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double45 = org.apache.commons.math.stat.StatUtils.product(doubleArray44);
        double[] doubleArray50 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double51 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray50);
        double double53 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray44, doubleArray50, (double) 10.0f);
        double double54 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double double57 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44, (int) (short) 1, (int) (short) 0);
        double double58 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray44);
        org.apache.commons.math.distribution.TDistribution tDistribution59 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl60 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution59);
        double[] doubleArray65 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double66 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray65);
        double[] doubleArray71 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double72 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray71);
        double double73 = org.apache.commons.math.stat.StatUtils.max(doubleArray71);
        double double74 = tTestImpl60.pairedT(doubleArray65, doubleArray71);
        double double75 = tTestImpl0.homoscedasticTTest(doubleArray44, doubleArray71);
        double double76 = org.apache.commons.math.stat.StatUtils.min(doubleArray71);
        double double77 = org.apache.commons.math.stat.StatUtils.min(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.539663200366486d + "'", double30 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 12706.0d + "'", double38 == 12706.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1820.0d) + "'", double45 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 5214.25d + "'", double53 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 3931.0d + "'", double58 == 3931.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 100.0d + "'", double73 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.5739591588987152d + "'", double75 == 0.5739591588987152d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + (-1.0d) + "'", double76 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + (-1.0d) + "'", double77 == (-1.0d));
    }

    @Test
    public void test751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test751");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution21 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double30 = tTestImpl22.t((double) 1.0f, doubleArray28);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double37 = org.apache.commons.math.stat.StatUtils.max(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray35);
        double double39 = tTestImpl0.pairedT(doubleArray28, doubleArray35);
        double[] doubleArray44 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double45 = org.apache.commons.math.stat.StatUtils.product(doubleArray44);
        double[] doubleArray50 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double51 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray50);
        double double53 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray44, doubleArray50, (double) 10.0f);
        double double54 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double double57 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44, (int) (short) 1, (int) (short) 0);
        double double58 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray44);
        org.apache.commons.math.distribution.TDistribution tDistribution59 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl60 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution59);
        double[] doubleArray65 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double66 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray65);
        double[] doubleArray71 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double72 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray71);
        double double73 = org.apache.commons.math.stat.StatUtils.max(doubleArray71);
        double double74 = tTestImpl60.pairedT(doubleArray65, doubleArray71);
        double double75 = tTestImpl0.homoscedasticTTest(doubleArray44, doubleArray71);
        double double77 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray71, 0.21195550612870484d);
        double double79 = org.apache.commons.math.stat.StatUtils.variance(doubleArray71, (double) (-1L));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.539663200366486d + "'", double30 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 12706.0d + "'", double38 == 12706.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1820.0d) + "'", double45 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 5214.25d + "'", double53 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 3931.0d + "'", double58 == 3931.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 100.0d + "'", double73 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.5739591588987152d + "'", double75 == 0.5739591588987152d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + (-1.0d) + "'", double77 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 2310.0d + "'", double79 == 2310.0d);
    }

    @Test
    public void test752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test752");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution2 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl3 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution2);
        double[] doubleArray8 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double9 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray8);
        double[] doubleArray14 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double15 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray14);
        double double16 = org.apache.commons.math.stat.StatUtils.max(doubleArray14);
        double double17 = tTestImpl3.pairedT(doubleArray8, doubleArray14);
        double double19 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray14, 0.03982783727702899d);
        double double20 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray14);
        double double21 = org.apache.commons.math.stat.StatUtils.mean(doubleArray14);
        double double22 = tTestImpl0.t((-6.003340578321836d), doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 100.0d + "'", double16 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-1.0d) + "'", double19 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 12706.0d + "'", double20 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 38.0d + "'", double21 == 38.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.8310898427469047d + "'", double22 == 1.8310898427469047d);
    }

    @Test
    public void test753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test753");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory21 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution22 = distributionFactory21.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution24 = distributionFactory21.createTDistribution(0.8538434429284575d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl25 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution24);
        tTestImpl0.setDistribution(tDistribution24);
        double[] doubleArray28 = new double[] { '#' };
        double double29 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray28);
        double double30 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray28);
        double double31 = org.apache.commons.math.stat.StatUtils.product(doubleArray28);
        double double32 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double34 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray28, (double) 100.0f);
        double double35 = org.apache.commons.math.stat.StatUtils.product(doubleArray28);
        double[] doubleArray37 = new double[] { '#' };
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray37);
        double double39 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray28, doubleArray37);
        double double40 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray37);
        double double41 = org.apache.commons.math.stat.StatUtils.variance(doubleArray37);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl42 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray47 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double48 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47);
        double double49 = org.apache.commons.math.stat.StatUtils.max(doubleArray47);
        double[] doubleArray54 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double55 = org.apache.commons.math.stat.StatUtils.product(doubleArray54);
        double[] doubleArray60 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double61 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray60);
        double double63 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray54, doubleArray60, (double) 10.0f);
        double double64 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray54);
        double double65 = tTestImpl42.t(doubleArray47, doubleArray54);
        // The following exception was thrown during execution in test generation
        try {
            double double66 = tTestImpl0.pairedT(doubleArray37, doubleArray54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(distributionFactory21);
        org.junit.Assert.assertNotNull(normalDistribution22);
        org.junit.Assert.assertNotNull(tDistribution24);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1225.0d + "'", double29 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1225.0d + "'", double30 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 35.0d + "'", double31 == 35.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 3.5553480614894135d + "'", double32 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 35.0d + "'", double34 == 35.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 35.0d + "'", double35 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[35.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1225.0d + "'", double38 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 3.5553480614894135d + "'", double40 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 100.0d + "'", double49 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + (-1820.0d) + "'", double55 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 5214.25d + "'", double63 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.5943989439169762d + "'", double65 == 0.5943989439169762d);
    }

    @Test
    public void test754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test754");
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray5 = mathException4.getSuppressed();
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray5);
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException6);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray10 = mathException9.getSuppressed();
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray10);
        mathException7.addSuppressed((java.lang.Throwable) mathException11);
        java.lang.Throwable[] throwableArray13 = mathException11.getSuppressed();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException11);
        java.lang.Throwable[] throwableArray15 = mathException14.getSuppressed();
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) throwableArray15);
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
    }

    @Test
    public void test755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test755");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.0d, (double) 10L);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution7 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution10 = distributionFactory0.createGammaDistribution(100.0d, 34.99999999999999d);
        org.apache.commons.math.distribution.FDistribution fDistribution13 = distributionFactory0.createFDistribution(1.0d, (double) 100L);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution15 = distributionFactory0.createExponentialDistribution(34.99999999999999d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution16 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution19 = distributionFactory0.createCauchyDistribution((double) 1, 152.0d);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution22 = distributionFactory0.createGammaDistribution((double) 100L, 35.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.PoissonDistribution poissonDistribution24 = distributionFactory0.createPoissonDistribution((-1.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The Poisson mean must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution7);
        org.junit.Assert.assertNotNull(gammaDistribution10);
        org.junit.Assert.assertNotNull(fDistribution13);
        org.junit.Assert.assertNotNull(exponentialDistribution15);
        org.junit.Assert.assertNotNull(normalDistribution16);
        org.junit.Assert.assertNotNull(cauchyDistribution19);
        org.junit.Assert.assertNotNull(gammaDistribution22);
    }

    @Test
    public void test756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test756");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory21 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution22 = distributionFactory21.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution24 = distributionFactory21.createTDistribution(0.8538434429284575d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl25 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution24);
        tTestImpl0.setDistribution(tDistribution24);
        double[] doubleArray34 = new double[] { '4', (byte) 10, (byte) 10, (byte) 10, (short) 1, 1.0d };
        double double37 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray34, 0, (int) (short) 1);
        double double38 = org.apache.commons.math.stat.StatUtils.sum(doubleArray34);
        double double39 = tTestImpl0.t(0.0d, doubleArray34);
        double double41 = org.apache.commons.math.stat.StatUtils.variance(doubleArray34, 84.0d);
        double double43 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray34, 1.7925163190605438d);
        double double44 = org.apache.commons.math.stat.StatUtils.sum(doubleArray34);
        // The following exception was thrown during execution in test generation
        try {
            double double47 = org.apache.commons.math.stat.StatUtils.mean(doubleArray34, (int) (byte) -1, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(distributionFactory21);
        org.junit.Assert.assertNotNull(normalDistribution22);
        org.junit.Assert.assertNotNull(tDistribution24);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[52.0, 10.0, 10.0, 10.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 52.00000000000001d + "'", double37 == 52.00000000000001d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 84.0d + "'", double38 == 84.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.7925163190605438d + "'", double39 == 1.7925163190605438d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 366.0d + "'", double41 == 366.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 84.0d + "'", double44 == 84.0d);
    }

    @Test
    public void test757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test757");
        double[] doubleArray4 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double5 = org.apache.commons.math.stat.StatUtils.product(doubleArray4);
        double[] doubleArray10 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double11 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray10);
        double double13 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray4, doubleArray10, (double) 10.0f);
        org.apache.commons.math.distribution.TDistribution tDistribution14 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution14);
        double[] doubleArray20 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double21 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double28 = org.apache.commons.math.stat.StatUtils.max(doubleArray26);
        double double29 = tTestImpl15.pairedT(doubleArray20, doubleArray26);
        double double30 = org.apache.commons.math.stat.StatUtils.max(doubleArray26);
        double double31 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray4, doubleArray26);
        double double32 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1820.0d) + "'", double5 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5214.25d + "'", double13 == 5214.25d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 100.0d + "'", double30 == 100.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-16.25d) + "'", double31 == (-16.25d));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 3931.0d + "'", double32 == 3931.0d);
    }

    @Test
    public void test758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test758");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        tDistribution34.setDegreesOfFreedom((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl39 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution34);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary40 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary41 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double42 = tTestImpl39.t(statisticalSummary40, statisticalSummary41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
    }

    @Test
    public void test759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test759");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl10 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray16 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double17 = org.apache.commons.math.stat.StatUtils.product(doubleArray16);
        double[] doubleArray22 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double23 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray22);
        double double25 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray16, doubleArray22, (double) 10.0f);
        double double26 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray16);
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray16, (int) (short) 1, (int) (short) 0);
        double double30 = tTestImpl10.t((double) 1, doubleArray16);
        double[] doubleArray32 = new double[] { '#' };
        double double33 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray32);
        double double34 = org.apache.commons.math.stat.StatUtils.min(doubleArray32);
        double double37 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray32, 1, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double38 = tTestImpl1.pairedTTest(doubleArray16, doubleArray32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input arrays must have the same (positive) length.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1820.0d) + "'", double17 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 5214.25d + "'", double25 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.5919401533569089d + "'", double30 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[35.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1225.0d + "'", double33 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 35.0d + "'", double34 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
    }

    @Test
    public void test760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test760");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        double double21 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray6);
        double double24 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 0, (int) (short) 0);
        double double25 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 3931.0d + "'", double21 == 3931.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-1820.0d) + "'", double25 == (-1820.0d));
    }

    @Test
    public void test761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test761");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        double double6 = normalDistribution4.inverseCumulativeProbability(0.8538434429284575d);
        double double9 = normalDistribution4.cumulativeProbability((-6.003340578321836d), (double) (short) -1);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.053060673855556d + "'", double6 == 1.053060673855556d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.15865525296496386d + "'", double9 == 0.15865525296496386d);
    }

    @Test
    public void test762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test762");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        org.apache.commons.math.distribution.TDistribution tDistribution24 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl25 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution24);
        double[] doubleArray31 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double32 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray31);
        double double33 = tTestImpl25.t((double) 1.0f, doubleArray31);
        double[] doubleArray38 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double39 = org.apache.commons.math.stat.StatUtils.product(doubleArray38);
        double[] doubleArray44 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double45 = org.apache.commons.math.stat.StatUtils.product(doubleArray44);
        double[] doubleArray50 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double51 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray50);
        double double53 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray44, doubleArray50, (double) 10.0f);
        double double54 = tTestImpl25.pairedT(doubleArray38, doubleArray44);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory55 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution56 = distributionFactory55.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution58 = distributionFactory55.createTDistribution(0.8538434429284575d);
        double double59 = tDistribution58.getDegreesOfFreedom();
        tTestImpl25.setDistribution(tDistribution58);
        tDistribution58.setDegreesOfFreedom((double) 1L);
        double double63 = tDistribution58.getDegreesOfFreedom();
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl64 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution58);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory65 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution66 = distributionFactory65.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution68 = distributionFactory65.createTDistribution(0.8538434429284575d);
        double double69 = tDistribution68.getDegreesOfFreedom();
        double double70 = tDistribution68.getDegreesOfFreedom();
        tTestImpl64.setDistribution(tDistribution68);
        tTestImpl0.setDistribution(tDistribution68);
        double double73 = tDistribution68.getDegreesOfFreedom();
        double double74 = tDistribution68.getDegreesOfFreedom();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.539663200366486d + "'", double33 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + (-1820.0d) + "'", double39 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1820.0d) + "'", double45 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 5214.25d + "'", double53 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(distributionFactory55);
        org.junit.Assert.assertNotNull(normalDistribution56);
        org.junit.Assert.assertNotNull(tDistribution58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.8538434429284575d + "'", double59 == 0.8538434429284575d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1.0d + "'", double63 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory65);
        org.junit.Assert.assertNotNull(normalDistribution66);
        org.junit.Assert.assertNotNull(tDistribution68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.8538434429284575d + "'", double69 == 0.8538434429284575d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.8538434429284575d + "'", double70 == 0.8538434429284575d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 0.8538434429284575d + "'", double73 == 0.8538434429284575d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.8538434429284575d + "'", double74 == 0.8538434429284575d);
    }

    @Test
    public void test763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test763");
        java.lang.Object[] objArray3 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("", objArray3);
        java.lang.Object[] objArray7 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("", objArray7);
        java.lang.Object[] objArray11 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("", objArray11);
        mathException8.addSuppressed((java.lang.Throwable) mathException12);
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException12);
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray16 = mathException15.getSuppressed();
        mathException14.addSuppressed((java.lang.Throwable) mathException15);
        java.lang.String str18 = mathException15.getPattern();
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", objArray3, (java.lang.Throwable) mathException15);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray23 = mathException22.getSuppressed();
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray23);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException24);
        java.lang.String str26 = mathException25.getPattern();
        mathException15.addSuppressed((java.lang.Throwable) mathException25);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[1225.0]");
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
    }

    @Test
    public void test764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test764");
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray3 = mathException2.getSuppressed();
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray3);
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException4);
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray8 = mathException7.getSuppressed();
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray8);
        mathException5.addSuppressed((java.lang.Throwable) mathException9);
        java.lang.Object[] objArray13 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("", objArray13);
        java.lang.Object[] objArray17 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("", objArray17);
        mathException14.addSuppressed((java.lang.Throwable) mathException18);
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException18);
        java.lang.Object[] objArray23 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("", objArray23);
        mathException20.addSuppressed((java.lang.Throwable) mathException24);
        mathException9.addSuppressed((java.lang.Throwable) mathException24);
        java.lang.String str27 = mathException9.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[1225.0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "org.apache.commons.math.MathException: " + "'", str27, "org.apache.commons.math.MathException: ");
    }

    @Test
    public void test765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test765");
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray3 = mathException2.getSuppressed();
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray3);
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException4);
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray8 = mathException7.getSuppressed();
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray8);
        mathException5.addSuppressed((java.lang.Throwable) mathException9);
        java.lang.Throwable[] throwableArray11 = mathException9.getSuppressed();
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException9);
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException12);
        java.lang.String str14 = mathException12.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org.apache.commons.math.MathException: " + "'", str14, "org.apache.commons.math.MathException: ");
    }

    @Test
    public void test766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test766");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        double[] doubleArray6 = new double[] { (-1.0f) };
        double double7 = org.apache.commons.math.stat.StatUtils.min(doubleArray6);
        double double8 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray1, doubleArray6);
        // The following exception was thrown during execution in test generation
        try {
            double double11 = org.apache.commons.math.stat.StatUtils.mean(doubleArray1, 1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 35.0d + "'", double4 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 36.0d + "'", double8 == 36.0d);
    }

    @Test
    public void test767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test767");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray6 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.max(doubleArray12);
        double double15 = tTestImpl1.pairedT(doubleArray6, doubleArray12);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl16 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray22 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double23 = org.apache.commons.math.stat.StatUtils.product(doubleArray22);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double31 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray22, doubleArray28, (double) 10.0f);
        double double32 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray22);
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray22, (int) (short) 1, (int) (short) 0);
        double double36 = tTestImpl16.t((double) 1, doubleArray22);
        org.apache.commons.math.distribution.TDistribution tDistribution38 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl39 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution38);
        double[] doubleArray44 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double45 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double[] doubleArray50 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double51 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray50);
        double double52 = org.apache.commons.math.stat.StatUtils.max(doubleArray50);
        double double53 = tTestImpl39.pairedT(doubleArray44, doubleArray50);
        double double54 = tTestImpl16.t(100.0d, doubleArray50);
        double double55 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray50);
        double double57 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray50, (double) (short) 100);
        double double58 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray12);
        double double59 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-1820.0d) + "'", double23 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 5214.25d + "'", double31 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.5919401533569089d + "'", double36 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 100.0d + "'", double52 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + (-2.579976173587085d) + "'", double54 == (-2.579976173587085d));
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 12706.0d + "'", double55 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 12706.0d + "'", double58 == 12706.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
    }

    @Test
    public void test768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test768");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.BinomialDistribution binomialDistribution6 = distributionFactory0.createBinomialDistribution(0, 0.03982783727702899d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(binomialDistribution6);
    }

    @Test
    public void test769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test769");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution3 = distributionFactory0.createNormalDistribution((double) 0L, 1.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.BinomialDistribution binomialDistribution6 = distributionFactory0.createBinomialDistribution((int) (short) 1, 1.5533732021085067d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability of success must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(normalDistribution3);
    }

    @Test
    public void test770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test770");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double12 = tTestImpl1.homoscedasticTTest(statisticalSummary10, statisticalSummary11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
    }

    @Test
    public void test771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test771");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray28 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double29 = org.apache.commons.math.stat.StatUtils.product(doubleArray28);
        double[] doubleArray34 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        double double37 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray28, doubleArray34, (double) 10.0f);
        double double38 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double41 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28, (int) (short) 1, (int) (short) 0);
        double double42 = tTestImpl22.t((double) 1, doubleArray28);
        org.apache.commons.math.distribution.TDistribution tDistribution43 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl44 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution43);
        double[] doubleArray50 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double51 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray50);
        double double52 = tTestImpl44.t((double) 1.0f, doubleArray50);
        double[] doubleArray57 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double58 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray57);
        double double59 = org.apache.commons.math.stat.StatUtils.max(doubleArray57);
        double double60 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray57);
        double double61 = tTestImpl22.pairedT(doubleArray50, doubleArray57);
        double double62 = org.apache.commons.math.stat.StatUtils.min(doubleArray50);
        double double63 = tTestImpl0.tTest(0.0d, doubleArray50);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary64 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary65 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double66 = tTestImpl0.tTest(statisticalSummary64, statisticalSummary65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-1820.0d) + "'", double29 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 5214.25d + "'", double37 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.5919401533569089d + "'", double42 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.539663200366486d + "'", double52 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 100.0d + "'", double59 == 100.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 12706.0d + "'", double60 == 12706.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + (-1.0d) + "'", double62 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.21195550612870484d + "'", double63 == 0.21195550612870484d);
    }

    @Test
    public void test772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test772");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution2 = distributionFactory0.createChiSquareDistribution((double) 100);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution4 = distributionFactory0.createExponentialDistribution((double) '4');
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution6 = distributionFactory0.createExponentialDistribution(1.8310898427469047d);
        org.apache.commons.math.distribution.HypergeometricDistribution hypergeometricDistribution10 = distributionFactory0.createHypergeometricDistribution((int) '4', (int) ' ', 1);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(chiSquaredDistribution2);
        org.junit.Assert.assertNotNull(exponentialDistribution4);
        org.junit.Assert.assertNotNull(exponentialDistribution6);
        org.junit.Assert.assertNotNull(hypergeometricDistribution10);
    }

    @Test
    public void test773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test773");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution2 = distributionFactory0.createChiSquareDistribution((double) 100);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution4 = distributionFactory0.createPoissonDistribution(0.5739591588987152d);
        org.apache.commons.math.distribution.BinomialDistribution binomialDistribution7 = distributionFactory0.createBinomialDistribution((int) (short) 1, 0.22127614024118358d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(chiSquaredDistribution2);
        org.junit.Assert.assertNotNull(poissonDistribution4);
        org.junit.Assert.assertNotNull(binomialDistribution7);
    }

    @Test
    public void test774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test774");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl37 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray43 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double44 = org.apache.commons.math.stat.StatUtils.product(doubleArray43);
        double[] doubleArray49 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double50 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray49);
        double double52 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray43, doubleArray49, (double) 10.0f);
        double double53 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray43);
        double double56 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray43, (int) (short) 1, (int) (short) 0);
        double double57 = tTestImpl37.t((double) 1, doubleArray43);
        org.apache.commons.math.distribution.TDistribution tDistribution59 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl60 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution59);
        double[] doubleArray65 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double66 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray65);
        double[] doubleArray71 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double72 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray71);
        double double73 = org.apache.commons.math.stat.StatUtils.max(doubleArray71);
        double double74 = tTestImpl60.pairedT(doubleArray65, doubleArray71);
        double double75 = tTestImpl37.t(100.0d, doubleArray71);
        double[] doubleArray80 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double81 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray80);
        double double82 = org.apache.commons.math.stat.StatUtils.max(doubleArray80);
        double double83 = tTestImpl1.pairedTTest(doubleArray71, doubleArray80);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary84 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary85 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean87 = tTestImpl1.tTest(statisticalSummary84, statisticalSummary85, (double) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: -1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-1820.0d) + "'", double44 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 5214.25d + "'", double52 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.5919401533569089d + "'", double57 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 100.0d + "'", double73 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + (-2.579976173587085d) + "'", double75 == (-2.579976173587085d));
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 100.0d + "'", double82 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double83));
    }

    @Test
    public void test775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test775");
        double[] doubleArray4 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray4);
        double double6 = org.apache.commons.math.stat.StatUtils.max(doubleArray4);
        double double7 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray4);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double25 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12, (int) (short) 1, (int) (short) 0);
        double double26 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray4, doubleArray12);
        double double28 = org.apache.commons.math.stat.StatUtils.variance(doubleArray12, 0.9119233630588404d);
        // The following exception was thrown during execution in test generation
        try {
            double double31 = org.apache.commons.math.stat.StatUtils.product(doubleArray12, (int) (byte) 100, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 12706.0d + "'", double7 == 12706.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 16.25d + "'", double26 == 16.25d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 679.5833333333335d + "'", double28 == 679.5833333333335d);
    }

    @Test
    public void test776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test776");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        tDistribution34.setDegreesOfFreedom((double) 1L);
        double double41 = tDistribution34.cumulativeProbability((-1820.0d), 0.5943989439169762d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl42 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution34);
        double[] doubleArray44 = new double[] { '#' };
        double double45 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray44);
        double double46 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray44);
        double double47 = org.apache.commons.math.stat.StatUtils.product(doubleArray44);
        double double48 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double double50 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray44, (double) 100.0f);
        double double51 = org.apache.commons.math.stat.StatUtils.product(doubleArray44);
        double[] doubleArray53 = new double[] { '#' };
        double double54 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray53);
        double double55 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray44, doubleArray53);
        double double56 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray53);
        double[] doubleArray58 = new double[] { '#' };
        double double59 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray58);
        double double60 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray58);
        double double61 = org.apache.commons.math.stat.StatUtils.product(doubleArray58);
        double double62 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray58);
        double double64 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray58, (double) 100.0f);
        double double67 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray58, (int) (byte) 0, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean69 = tTestImpl42.tTest(doubleArray53, doubleArray58, (-5200.000000000001d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: -5200.000000000001");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.670531799205166d + "'", double41 == 0.670531799205166d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[35.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1225.0d + "'", double45 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1225.0d + "'", double46 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 35.0d + "'", double47 == 35.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 3.5553480614894135d + "'", double48 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 35.0d + "'", double50 == 35.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 35.0d + "'", double51 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[35.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1225.0d + "'", double54 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 3.5553480614894135d + "'", double56 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[35.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1225.0d + "'", double59 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1225.0d + "'", double60 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 35.0d + "'", double61 == 35.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 3.5553480614894135d + "'", double62 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 35.0d + "'", double64 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
    }

    @Test
    public void test777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test777");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        tDistribution34.setDegreesOfFreedom((double) 1L);
        double double39 = tDistribution34.getDegreesOfFreedom();
        tDistribution34.setDegreesOfFreedom(152.0d);
        double double42 = tDistribution34.getDegreesOfFreedom();
        double double44 = tDistribution34.cumulativeProbability(0.433786033254294d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 152.0d + "'", double42 == 152.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.6674705631412963d + "'", double44 == 0.6674705631412963d);
    }

    @Test
    public void test778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test778");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        tDistribution34.setDegreesOfFreedom((double) 1L);
        double double39 = tDistribution34.getDegreesOfFreedom();
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl40 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution34);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory41 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution42 = distributionFactory41.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution44 = distributionFactory41.createTDistribution(0.8538434429284575d);
        double double45 = tDistribution44.getDegreesOfFreedom();
        double double46 = tDistribution44.getDegreesOfFreedom();
        tTestImpl40.setDistribution(tDistribution44);
        double[] doubleArray50 = new double[] { '#' };
        double double51 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray50);
        double double52 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray50);
        double double53 = org.apache.commons.math.stat.StatUtils.product(doubleArray50);
        double double54 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray50);
        double double56 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray50, (double) 100.0f);
        double double57 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray50);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean59 = tTestImpl40.tTest((double) (byte) 10, doubleArray50, (double) 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory41);
        org.junit.Assert.assertNotNull(normalDistribution42);
        org.junit.Assert.assertNotNull(tDistribution44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.8538434429284575d + "'", double45 == 0.8538434429284575d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.8538434429284575d + "'", double46 == 0.8538434429284575d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[35.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1225.0d + "'", double51 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1225.0d + "'", double52 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 35.0d + "'", double53 == 35.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 3.5553480614894135d + "'", double54 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 35.0d + "'", double56 == 35.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 34.99999999999999d + "'", double57 == 34.99999999999999d);
    }

    @Test
    public void test779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test779");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        org.apache.commons.math.distribution.TDistribution tDistribution24 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl25 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution24);
        double[] doubleArray30 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double31 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray30);
        double[] doubleArray36 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double37 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray36);
        double double38 = org.apache.commons.math.stat.StatUtils.max(doubleArray36);
        double double39 = tTestImpl25.pairedT(doubleArray30, doubleArray36);
        double double40 = org.apache.commons.math.stat.StatUtils.max(doubleArray36);
        double double41 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray36);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl42 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray48 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double49 = org.apache.commons.math.stat.StatUtils.product(doubleArray48);
        double[] doubleArray54 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double55 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray54);
        double double57 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray48, doubleArray54, (double) 10.0f);
        double double58 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray48);
        double double61 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray48, (int) (short) 1, (int) (short) 0);
        double double62 = tTestImpl42.t((double) 1, doubleArray48);
        double double63 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray48);
        double double64 = org.apache.commons.math.stat.StatUtils.min(doubleArray48);
        double double67 = org.apache.commons.math.stat.StatUtils.min(doubleArray48, 1, (int) (byte) 1);
        double double68 = tTestImpl0.homoscedasticTTest(doubleArray36, doubleArray48);
        double double69 = org.apache.commons.math.stat.StatUtils.min(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + (-1820.0d) + "'", double49 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 5214.25d + "'", double57 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1.5919401533569089d + "'", double62 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 3931.0d + "'", double63 == 3931.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + (-1.0d) + "'", double64 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 1.0d + "'", double67 == 1.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.5739591588987152d + "'", double68 == 0.5739591588987152d);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + (-1.0d) + "'", double69 == (-1.0d));
    }

    @Test
    public void test780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test780");
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray5 = mathException4.getSuppressed();
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray5);
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException6);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray10 = mathException9.getSuppressed();
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray10);
        mathException7.addSuppressed((java.lang.Throwable) mathException11);
        java.lang.Throwable[] throwableArray13 = mathException11.getSuppressed();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException11);
        java.lang.Throwable[] throwableArray15 = mathException14.getSuppressed();
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) throwableArray15);
        java.lang.Throwable[] throwableArray17 = mathException16.getSuppressed();
        java.lang.Object[] objArray20 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("", objArray20);
        java.lang.Object[] objArray24 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("", objArray24);
        mathException21.addSuppressed((java.lang.Throwable) mathException25);
        java.lang.Object[] objArray29 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("", objArray29);
        java.lang.Object[] objArray33 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("", objArray33);
        mathException30.addSuppressed((java.lang.Throwable) mathException34);
        mathException21.addSuppressed((java.lang.Throwable) mathException34);
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", (java.lang.Object[]) throwableArray17, (java.lang.Throwable) mathException34);
        java.lang.Object[] objArray38 = mathException34.getArguments();
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[1225.0]");
    }

    @Test
    public void test781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test781");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        double double21 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray6);
        double double22 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution23 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl24 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution23);
        double[] doubleArray30 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double31 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray30);
        double double32 = tTestImpl24.t((double) 1.0f, doubleArray30);
        double[] doubleArray37 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double38 = org.apache.commons.math.stat.StatUtils.product(doubleArray37);
        double[] doubleArray43 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double44 = org.apache.commons.math.stat.StatUtils.product(doubleArray43);
        double[] doubleArray49 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double50 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray49);
        double double52 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray43, doubleArray49, (double) 10.0f);
        double double53 = tTestImpl24.pairedT(doubleArray37, doubleArray43);
        double double54 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray6, doubleArray43);
        // The following exception was thrown during execution in test generation
        try {
            double double58 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray6, (int) '#', (int) '4', 6.109428088468881d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 3931.0d + "'", double21 == 3931.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1820.0d) + "'", double22 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.539663200366486d + "'", double32 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-1820.0d) + "'", double38 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-1820.0d) + "'", double44 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 5214.25d + "'", double52 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
    }

    @Test
    public void test782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test782");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.0d, (double) 10L);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution7 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution10 = distributionFactory0.createGammaDistribution(100.0d, 34.99999999999999d);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution11 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution14 = distributionFactory0.createNormalDistribution((double) 'a', 2310.0d);
        org.apache.commons.math.distribution.TDistribution tDistribution16 = distributionFactory0.createTDistribution(1.5812757192953102d);
        double double17 = tDistribution16.getDegreesOfFreedom();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution7);
        org.junit.Assert.assertNotNull(gammaDistribution10);
        org.junit.Assert.assertNotNull(normalDistribution11);
        org.junit.Assert.assertNotNull(normalDistribution14);
        org.junit.Assert.assertNotNull(tDistribution16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.5812757192953102d + "'", double17 == 1.5812757192953102d);
    }

    @Test
    public void test783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test783");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution5 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution7 = distributionFactory0.createExponentialDistribution(2.2065780869162666E-7d);
        double double9 = exponentialDistribution7.cumulativeProbability(21.75d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(normalDistribution5);
        org.junit.Assert.assertNotNull(exponentialDistribution7);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
    }

    @Test
    public void test784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test784");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        tDistribution34.setDegreesOfFreedom((double) 1L);
        double double39 = tDistribution34.getDegreesOfFreedom();
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl40 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution34);
        double[] doubleArray45 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double46 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray45);
        double double47 = org.apache.commons.math.stat.StatUtils.max(doubleArray45);
        double double48 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray45);
        double[] doubleArray53 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double54 = org.apache.commons.math.stat.StatUtils.product(doubleArray53);
        double[] doubleArray59 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double60 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray59);
        double double62 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray53, doubleArray59, (double) 10.0f);
        double double63 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray53);
        double double66 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray53, (int) (short) 1, (int) (short) 0);
        double double67 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray45, doubleArray53);
        double double68 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray53);
        double[] doubleArray73 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double74 = org.apache.commons.math.stat.StatUtils.product(doubleArray73);
        double[] doubleArray79 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double80 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray79);
        double double82 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray73, doubleArray79, (double) 10.0f);
        double double83 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray73);
        double double86 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray73, (int) (short) 1, (int) (short) 0);
        double double87 = tTestImpl40.pairedT(doubleArray53, doubleArray73);
        // The following exception was thrown during execution in test generation
        try {
            double double91 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray53, (int) (byte) -1, (int) (byte) 100, (double) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 100.0d + "'", double47 == 100.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 12706.0d + "'", double48 == 12706.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + (-1820.0d) + "'", double54 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 5214.25d + "'", double62 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 16.25d + "'", double67 == 16.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + (-1820.0d) + "'", double74 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 5214.25d + "'", double82 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertTrue(Double.isNaN(double87));
    }

    @Test
    public void test785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test785");
        double[] doubleArray4 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double5 = org.apache.commons.math.stat.StatUtils.product(doubleArray4);
        double[] doubleArray10 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double11 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray10);
        double double13 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray4, doubleArray10, (double) 10.0f);
        double double14 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray10);
        double double15 = org.apache.commons.math.stat.StatUtils.sum(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1820.0d) + "'", double5 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5214.25d + "'", double13 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 152.0d + "'", double15 == 152.0d);
    }

    @Test
    public void test786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test786");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        double[] doubleArray29 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double30 = org.apache.commons.math.stat.StatUtils.product(doubleArray29);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray29, doubleArray35, (double) 10.0f);
        double double39 = tTestImpl0.tTest(5214.25d, doubleArray35);
        org.apache.commons.math.distribution.TDistribution tDistribution40 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl41 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution40);
        double[] doubleArray47 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double48 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47);
        double double49 = tTestImpl41.t((double) 1.0f, doubleArray47);
        double[] doubleArray54 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double55 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray54);
        double double56 = org.apache.commons.math.stat.StatUtils.max(doubleArray54);
        double double57 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray54);
        double double58 = org.apache.commons.math.stat.StatUtils.variance(doubleArray54);
        double double59 = org.apache.commons.math.stat.StatUtils.variance(doubleArray54);
        double double60 = tTestImpl0.homoscedasticT(doubleArray47, doubleArray54);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl61 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray67 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double68 = org.apache.commons.math.stat.StatUtils.product(doubleArray67);
        double[] doubleArray73 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double74 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray73);
        double double76 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray67, doubleArray73, (double) 10.0f);
        double double77 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray67);
        double double80 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray67, (int) (short) 1, (int) (short) 0);
        double double81 = tTestImpl61.t((double) 1, doubleArray67);
        double double82 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray67);
        double double83 = org.apache.commons.math.stat.StatUtils.product(doubleArray67);
        double[] doubleArray88 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double89 = org.apache.commons.math.stat.StatUtils.product(doubleArray88);
        double double91 = org.apache.commons.math.stat.StatUtils.variance(doubleArray88, (double) 10.0f);
        double double92 = tTestImpl0.tTest(doubleArray67, doubleArray88);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary94 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean96 = tTestImpl0.tTest((-2.579976173587085d), statisticalSummary94, 1.642506837117952d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 1.642506837117952");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1820.0d) + "'", double30 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 5214.25d + "'", double38 == 5214.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2.2065780869162666E-7d + "'", double39 == 2.2065780869162666E-7d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.539663200366486d + "'", double49 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 100.0d + "'", double56 == 100.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 12706.0d + "'", double57 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 2310.0d + "'", double58 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2310.0d + "'", double59 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + (-1820.0d) + "'", double68 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 5214.25d + "'", double76 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 1.5919401533569089d + "'", double81 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 3931.0d + "'", double82 == 3931.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + (-1820.0d) + "'", double83 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + (-1820.0d) + "'", double89 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 679.5833333333334d + "'", double91 == 679.5833333333334d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 1.0d + "'", double92 == 1.0d);
    }

    @Test
    public void test787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test787");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        double double37 = tDistribution34.getDegreesOfFreedom();
        double double38 = tDistribution34.getDegreesOfFreedom();
        tDistribution34.setDegreesOfFreedom(3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.8538434429284575d + "'", double37 == 0.8538434429284575d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.8538434429284575d + "'", double38 == 0.8538434429284575d);
    }

    @Test
    public void test788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test788");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution6 = distributionFactory0.createWeibullDistribution((double) (byte) 10, (double) 1);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution8 = distributionFactory0.createExponentialDistribution((double) (byte) 1);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution10 = distributionFactory0.createPoissonDistribution(0.22127614024118358d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(weibullDistribution6);
        org.junit.Assert.assertNotNull(exponentialDistribution8);
        org.junit.Assert.assertNotNull(poissonDistribution10);
    }

    @Test
    public void test789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test789");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        double double21 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray6);
        double double22 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        // The following exception was thrown during execution in test generation
        try {
            double double26 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray6, (int) (byte) -1, 1, (-1820.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 3931.0d + "'", double21 == 3931.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1820.0d) + "'", double22 == (-1820.0d));
    }

    @Test
    public void test790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test790");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        double double25 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray5, 1.5919401533569089d);
        double double26 = org.apache.commons.math.stat.StatUtils.product(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-1.0d) + "'", double25 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-5200.000000000001d) + "'", double26 == (-5200.000000000001d));
    }

    @Test
    public void test791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test791");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.0d, (double) 10L);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution7 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution8 = distributionFactory0.createNormalDistribution();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.PascalDistribution pascalDistribution11 = distributionFactory0.createPascalDistribution((int) (byte) 10, 1.053060673855556d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability of success must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution7);
        org.junit.Assert.assertNotNull(normalDistribution8);
    }

    @Test
    public void test792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test792");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution22 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl23 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double[] doubleArray34 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        double double36 = org.apache.commons.math.stat.StatUtils.max(doubleArray34);
        double double37 = tTestImpl23.pairedT(doubleArray28, doubleArray34);
        double double38 = tTestImpl0.t(100.0d, doubleArray34);
        double[] doubleArray43 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double44 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray43);
        double double45 = org.apache.commons.math.stat.StatUtils.max(doubleArray43);
        double double46 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray43);
        double[] doubleArray51 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double52 = org.apache.commons.math.stat.StatUtils.product(doubleArray51);
        double double54 = org.apache.commons.math.stat.StatUtils.variance(doubleArray51, (double) 10.0f);
        double double55 = tTestImpl0.tTest(doubleArray43, doubleArray51);
        double[] doubleArray61 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double62 = org.apache.commons.math.stat.StatUtils.product(doubleArray61);
        double[] doubleArray67 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double68 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray67);
        double double70 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray61, doubleArray67, (double) 10.0f);
        double double71 = tTestImpl0.tTest(0.22127614024118358d, doubleArray61);
        // The following exception was thrown during execution in test generation
        try {
            double double74 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray61, (int) (byte) 1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-2.579976173587085d) + "'", double38 == (-2.579976173587085d));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 100.0d + "'", double45 == 100.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 12706.0d + "'", double46 == 12706.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-1820.0d) + "'", double52 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 679.5833333333334d + "'", double54 == 679.5833333333334d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.5801210456783388d + "'", double55 == 0.5801210456783388d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + (-1820.0d) + "'", double62 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 5214.25d + "'", double70 == 5214.25d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.1971665237081084d + "'", double71 == 0.1971665237081084d);
    }

    @Test
    public void test793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test793");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        double[] doubleArray29 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double30 = org.apache.commons.math.stat.StatUtils.product(doubleArray29);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray29, doubleArray35, (double) 10.0f);
        double double39 = tTestImpl0.tTest(5214.25d, doubleArray35);
        org.apache.commons.math.distribution.TDistribution tDistribution40 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl41 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution40);
        double[] doubleArray47 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double48 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47);
        double double49 = tTestImpl41.t((double) 1.0f, doubleArray47);
        double[] doubleArray54 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double55 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray54);
        double double56 = org.apache.commons.math.stat.StatUtils.max(doubleArray54);
        double double57 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray54);
        double double58 = org.apache.commons.math.stat.StatUtils.variance(doubleArray54);
        double double59 = org.apache.commons.math.stat.StatUtils.variance(doubleArray54);
        double double60 = tTestImpl0.homoscedasticT(doubleArray47, doubleArray54);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl61 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray67 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double68 = org.apache.commons.math.stat.StatUtils.product(doubleArray67);
        double[] doubleArray73 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double74 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray73);
        double double76 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray67, doubleArray73, (double) 10.0f);
        double double77 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray67);
        double double80 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray67, (int) (short) 1, (int) (short) 0);
        double double81 = tTestImpl61.t((double) 1, doubleArray67);
        double double82 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray67);
        double double83 = org.apache.commons.math.stat.StatUtils.product(doubleArray67);
        double[] doubleArray88 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double89 = org.apache.commons.math.stat.StatUtils.product(doubleArray88);
        double double91 = org.apache.commons.math.stat.StatUtils.variance(doubleArray88, (double) 10.0f);
        double double92 = tTestImpl0.tTest(doubleArray67, doubleArray88);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary93 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary94 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double95 = tTestImpl0.tTest(statisticalSummary93, statisticalSummary94);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1820.0d) + "'", double30 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 5214.25d + "'", double38 == 5214.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2.2065780869162666E-7d + "'", double39 == 2.2065780869162666E-7d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.539663200366486d + "'", double49 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 100.0d + "'", double56 == 100.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 12706.0d + "'", double57 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 2310.0d + "'", double58 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2310.0d + "'", double59 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + (-1820.0d) + "'", double68 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 5214.25d + "'", double76 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 1.5919401533569089d + "'", double81 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 3931.0d + "'", double82 == 3931.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + (-1820.0d) + "'", double83 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + (-1820.0d) + "'", double89 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 679.5833333333334d + "'", double91 == 679.5833333333334d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 1.0d + "'", double92 == 1.0d);
    }

    @Test
    public void test794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test794");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        tDistribution34.setDegreesOfFreedom((double) 1L);
        double double39 = tDistribution34.getDegreesOfFreedom();
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl40 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution34);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory41 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution42 = distributionFactory41.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution44 = distributionFactory41.createTDistribution(0.8538434429284575d);
        double double45 = tDistribution44.getDegreesOfFreedom();
        double double46 = tDistribution44.getDegreesOfFreedom();
        tTestImpl40.setDistribution(tDistribution44);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary48 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary49 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double50 = tTestImpl40.t(statisticalSummary48, statisticalSummary49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory41);
        org.junit.Assert.assertNotNull(normalDistribution42);
        org.junit.Assert.assertNotNull(tDistribution44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.8538434429284575d + "'", double45 == 0.8538434429284575d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.8538434429284575d + "'", double46 == 0.8538434429284575d);
    }

    @Test
    public void test795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test795");
        double[] doubleArray4 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double5 = org.apache.commons.math.stat.StatUtils.product(doubleArray4);
        double[] doubleArray10 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double11 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray10);
        double double12 = org.apache.commons.math.stat.StatUtils.max(doubleArray10);
        double double13 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray10);
        double double14 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10);
        double double15 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray4, doubleArray10);
        double double17 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10, (double) (byte) 0);
        double double18 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1820.0d) + "'", double5 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 12706.0d + "'", double13 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 2310.0d + "'", double14 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-16.25d) + "'", double15 == (-16.25d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 2310.0d + "'", double17 == 2310.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test796");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double2 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray0, 1.053060673855556d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test797");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution1 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl2 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution1);
        double[] doubleArray8 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double9 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray8);
        double double10 = tTestImpl2.t((double) 1.0f, doubleArray8);
        double[] doubleArray15 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double16 = org.apache.commons.math.stat.StatUtils.product(doubleArray15);
        double[] doubleArray21 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double22 = org.apache.commons.math.stat.StatUtils.product(doubleArray21);
        double[] doubleArray27 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double28 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray27);
        double double30 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray21, doubleArray27, (double) 10.0f);
        double double31 = tTestImpl2.pairedT(doubleArray15, doubleArray21);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl32 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray37 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double38 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray37);
        double double39 = org.apache.commons.math.stat.StatUtils.max(doubleArray37);
        double[] doubleArray44 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double45 = org.apache.commons.math.stat.StatUtils.product(doubleArray44);
        double[] doubleArray50 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double51 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray50);
        double double53 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray44, doubleArray50, (double) 10.0f);
        double double54 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double double55 = tTestImpl32.t(doubleArray37, doubleArray44);
        double[] doubleArray60 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double61 = org.apache.commons.math.stat.StatUtils.product(doubleArray60);
        double[] doubleArray66 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double67 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray66);
        double double69 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray60, doubleArray66, (double) 10.0f);
        org.apache.commons.math.distribution.TDistribution tDistribution70 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl71 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution70);
        double[] doubleArray76 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double77 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray76);
        double[] doubleArray82 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double83 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray82);
        double double84 = org.apache.commons.math.stat.StatUtils.max(doubleArray82);
        double double85 = tTestImpl71.pairedT(doubleArray76, doubleArray82);
        double double86 = org.apache.commons.math.stat.StatUtils.max(doubleArray82);
        double double87 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray60, doubleArray82);
        double double88 = tTestImpl2.homoscedasticT(doubleArray37, doubleArray60);
        double[] doubleArray93 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double94 = org.apache.commons.math.stat.StatUtils.product(doubleArray93);
        double double95 = tTestImpl0.tTest(doubleArray60, doubleArray93);
        double double96 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray60);
        double double97 = org.apache.commons.math.stat.StatUtils.min(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.539663200366486d + "'", double10 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-1820.0d) + "'", double16 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1820.0d) + "'", double22 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 5214.25d + "'", double30 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1820.0d) + "'", double45 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 5214.25d + "'", double53 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.5943989439169762d + "'", double55 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + (-1820.0d) + "'", double61 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 5214.25d + "'", double69 == 5214.25d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 100.0d + "'", double84 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 100.0d + "'", double86 == 100.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + (-16.25d) + "'", double87 == (-16.25d));
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.5943989439169762d + "'", double88 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + (-1820.0d) + "'", double94 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 1.0d + "'", double95 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double96));
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + (-1.0d) + "'", double97 == (-1.0d));
    }

    @Test
    public void test798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test798");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution1 = null;
        tTestImpl0.setDistribution(tDistribution1);
        double[] doubleArray8 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double9 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray8);
        double double10 = org.apache.commons.math.stat.StatUtils.max(doubleArray8);
        double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray8);
        double[] doubleArray16 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double17 = org.apache.commons.math.stat.StatUtils.product(doubleArray16);
        double[] doubleArray22 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double23 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray22);
        double double25 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray16, doubleArray22, (double) 10.0f);
        double double26 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray16);
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray16, (int) (short) 1, (int) (short) 0);
        double double30 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray8, doubleArray16);
        double double31 = tTestImpl0.t((double) 100, doubleArray16);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl33 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray39 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double40 = org.apache.commons.math.stat.StatUtils.product(doubleArray39);
        double[] doubleArray45 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double46 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray45);
        double double48 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray39, doubleArray45, (double) 10.0f);
        double double49 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray39);
        double double52 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray39, (int) (short) 1, (int) (short) 0);
        double double53 = tTestImpl33.t((double) 1, doubleArray39);
        double double54 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray39);
        double double55 = tTestImpl0.t(36.0d, doubleArray39);
        double[] doubleArray56 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl57 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray63 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double64 = org.apache.commons.math.stat.StatUtils.product(doubleArray63);
        double[] doubleArray69 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double70 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray69);
        double double72 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray63, doubleArray69, (double) 10.0f);
        double double73 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray63);
        double double76 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray63, (int) (short) 1, (int) (short) 0);
        double double77 = tTestImpl57.t((double) 1, doubleArray63);
        double double78 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray63);
        double double79 = org.apache.commons.math.stat.StatUtils.min(doubleArray63);
        double double82 = org.apache.commons.math.stat.StatUtils.min(doubleArray63, 1, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double83 = tTestImpl0.pairedTTest(doubleArray56, doubleArray63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 12706.0d + "'", double11 == 12706.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1820.0d) + "'", double17 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 5214.25d + "'", double25 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 16.25d + "'", double30 == 16.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-6.003340578321836d) + "'", double31 == (-6.003340578321836d));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + (-1820.0d) + "'", double40 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 5214.25d + "'", double48 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.5919401533569089d + "'", double53 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 3931.0d + "'", double54 == 3931.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + (-1.0932601053173951d) + "'", double55 == (-1.0932601053173951d));
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + (-1820.0d) + "'", double64 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 5214.25d + "'", double72 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 1.5919401533569089d + "'", double77 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 3931.0d + "'", double78 == 3931.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + (-1.0d) + "'", double79 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 1.0d + "'", double82 == 1.0d);
    }

    @Test
    public void test799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test799");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution6 = distributionFactory0.createWeibullDistribution((double) (byte) 10, (double) 1);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution8 = distributionFactory0.createExponentialDistribution((double) (byte) 1);
        double double10 = exponentialDistribution8.inverseCumulativeProbability(0.9810883886884435d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(weibullDistribution6);
        org.junit.Assert.assertNotNull(exponentialDistribution8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 3.9679791904465738d + "'", double10 == 3.9679791904465738d);
    }

    @Test
    public void test800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test800");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution5 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution7 = distributionFactory0.createPoissonDistribution((double) (byte) 10);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution9 = distributionFactory0.createPoissonDistribution((double) 10.0f);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(normalDistribution5);
        org.junit.Assert.assertNotNull(poissonDistribution7);
        org.junit.Assert.assertNotNull(poissonDistribution9);
    }

    @Test
    public void test801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test801");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double7 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, (double) 100.0f);
        double double8 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double[] doubleArray10 = new double[] { '#' };
        double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray10);
        double double12 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray10);
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray10);
        double double14 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10);
        double double15 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray10);
        double double16 = org.apache.commons.math.stat.StatUtils.sum(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 35.0d + "'", double4 == 35.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 35.0d + "'", double8 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[35.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1225.0d + "'", double11 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 3.5553480614894135d + "'", double13 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1225.0d + "'", double15 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 35.0d + "'", double16 == 35.0d);
    }

    @Test
    public void test802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test802");
        org.apache.commons.math.MathException mathException0 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray1 = mathException0.getSuppressed();
        java.lang.String str2 = mathException0.getPattern();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test803");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution6 = distributionFactory0.createPoissonDistribution(6.109428088468881d);
        java.lang.Class<?> wildcardClass7 = poissonDistribution6.getClass();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(poissonDistribution6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test804");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray6 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.max(doubleArray12);
        double double15 = tTestImpl1.pairedT(doubleArray6, doubleArray12);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        org.apache.commons.math.distribution.TDistribution tDistribution30 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl31 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution30);
        double[] doubleArray36 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double37 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray36);
        double[] doubleArray42 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double43 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray42);
        double double44 = org.apache.commons.math.stat.StatUtils.max(doubleArray42);
        double double45 = tTestImpl31.pairedT(doubleArray36, doubleArray42);
        double double46 = org.apache.commons.math.stat.StatUtils.max(doubleArray42);
        double double47 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray20, doubleArray42);
        double double48 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray20);
        double[] doubleArray50 = new double[] { '#' };
        double double51 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray50);
        double double52 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray50);
        double double53 = org.apache.commons.math.stat.StatUtils.min(doubleArray50);
        double double57 = org.apache.commons.math.stat.StatUtils.variance(doubleArray50, 0.0d, (int) (short) 0, 0);
        double double58 = org.apache.commons.math.stat.StatUtils.min(doubleArray50);
        double double60 = org.apache.commons.math.stat.StatUtils.variance(doubleArray50, (double) (-1.0f));
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean62 = tTestImpl1.pairedTTest(doubleArray20, doubleArray50, 0.34089313230206053d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input arrays must have the same (positive) length.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 100.0d + "'", double44 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 100.0d + "'", double46 == 100.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + (-16.25d) + "'", double47 == (-16.25d));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[35.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1225.0d + "'", double51 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1225.0d + "'", double52 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 35.0d + "'", double53 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 35.0d + "'", double58 == 35.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
    }

    @Test
    public void test805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test805");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray2 = mathException1.getSuppressed();
        java.lang.Object[] objArray5 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("", objArray5);
        java.lang.Object[] objArray9 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("", objArray9);
        mathException6.addSuppressed((java.lang.Throwable) mathException10);
        java.lang.Object[] objArray14 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("", objArray14);
        java.lang.Object[] objArray18 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("", objArray18);
        mathException15.addSuppressed((java.lang.Throwable) mathException19);
        mathException6.addSuppressed((java.lang.Throwable) mathException19);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) throwableArray2, (java.lang.Throwable) mathException6);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException22);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray27 = mathException26.getSuppressed();
        java.lang.Throwable throwable28 = null;
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) throwableArray27, throwable28);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("", throwable28);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray34 = mathException33.getSuppressed();
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray34);
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) mathException35);
        mathException30.addSuppressed((java.lang.Throwable) mathException35);
        mathException22.addSuppressed((java.lang.Throwable) mathException35);
        java.lang.Throwable[] throwableArray39 = mathException35.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[1225.0]");
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray39);
    }

    @Test
    public void test806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test806");
        org.apache.commons.math.MathException mathException0 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray1 = mathException0.getSuppressed();
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException0);
        java.lang.String str3 = mathException2.getPattern();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test807");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        tDistribution34.setDegreesOfFreedom((double) 1L);
        double double39 = tDistribution34.getDegreesOfFreedom();
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl40 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution34);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory41 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution42 = distributionFactory41.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution44 = distributionFactory41.createTDistribution(0.8538434429284575d);
        double double45 = tDistribution44.getDegreesOfFreedom();
        double double46 = tDistribution44.getDegreesOfFreedom();
        tTestImpl40.setDistribution(tDistribution44);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl48 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray54 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double55 = org.apache.commons.math.stat.StatUtils.product(doubleArray54);
        double[] doubleArray60 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double61 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray60);
        double double63 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray54, doubleArray60, (double) 10.0f);
        double double64 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray54);
        double double67 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray54, (int) (short) 1, (int) (short) 0);
        double double68 = tTestImpl48.t((double) 1, doubleArray54);
        double double70 = org.apache.commons.math.stat.StatUtils.variance(doubleArray54, 5214.25d);
        double[] doubleArray75 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double76 = org.apache.commons.math.stat.StatUtils.product(doubleArray75);
        double[] doubleArray81 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double82 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray81);
        double double84 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray75, doubleArray81, (double) 10.0f);
        double double85 = org.apache.commons.math.stat.StatUtils.min(doubleArray81);
        double double86 = tTestImpl40.pairedT(doubleArray54, doubleArray81);
        double[] doubleArray88 = new double[] { '#' };
        double double89 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray88);
        double double90 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray88);
        double double91 = org.apache.commons.math.stat.StatUtils.sum(doubleArray88);
        // The following exception was thrown during execution in test generation
        try {
            double double92 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray81, doubleArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input arrays must have the same (positive) length.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory41);
        org.junit.Assert.assertNotNull(normalDistribution42);
        org.junit.Assert.assertNotNull(tDistribution44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.8538434429284575d + "'", double45 == 0.8538434429284575d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.8538434429284575d + "'", double46 == 0.8538434429284575d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + (-1820.0d) + "'", double55 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 5214.25d + "'", double63 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 1.5919401533569089d + "'", double68 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 679.5833333333334d + "'", double70 == 679.5833333333334d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + (-1820.0d) + "'", double76 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 5214.25d + "'", double84 == 5214.25d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + (-1.0d) + "'", double85 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + (-0.4500776384309941d) + "'", double86 == (-0.4500776384309941d));
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[35.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 1225.0d + "'", double89 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 1225.0d + "'", double90 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 35.0d + "'", double91 == 35.0d);
    }

    @Test
    public void test808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test808");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        double[] doubleArray29 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double30 = org.apache.commons.math.stat.StatUtils.product(doubleArray29);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray29, doubleArray35, (double) 10.0f);
        double double39 = tTestImpl0.tTest(5214.25d, doubleArray35);
        org.apache.commons.math.distribution.TDistribution tDistribution40 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl41 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution40);
        double[] doubleArray47 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double48 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47);
        double double49 = tTestImpl41.t((double) 1.0f, doubleArray47);
        double[] doubleArray54 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double55 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray54);
        double double56 = org.apache.commons.math.stat.StatUtils.max(doubleArray54);
        double double57 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray54);
        double double58 = org.apache.commons.math.stat.StatUtils.variance(doubleArray54);
        double double59 = org.apache.commons.math.stat.StatUtils.variance(doubleArray54);
        double double60 = tTestImpl0.homoscedasticT(doubleArray47, doubleArray54);
        double[] doubleArray62 = new double[] { '#' };
        double double63 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray62);
        double double64 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray62);
        double double65 = org.apache.commons.math.stat.StatUtils.product(doubleArray62);
        double double66 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray62);
        double double68 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray62, (double) 100.0f);
        double double71 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray62, (int) (byte) 0, 1);
        double double72 = org.apache.commons.math.stat.StatUtils.product(doubleArray62);
        double[] doubleArray77 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double78 = org.apache.commons.math.stat.StatUtils.product(doubleArray77);
        double[] doubleArray83 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double84 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray83);
        double double86 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray77, doubleArray83, (double) 10.0f);
        double double87 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray77);
        double double90 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray77, (int) (short) 1, (int) (short) 0);
        double double91 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray77);
        // The following exception was thrown during execution in test generation
        try {
            double double92 = tTestImpl0.tTest(doubleArray62, doubleArray77);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1820.0d) + "'", double30 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 5214.25d + "'", double38 == 5214.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2.2065780869162666E-7d + "'", double39 == 2.2065780869162666E-7d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.539663200366486d + "'", double49 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 100.0d + "'", double56 == 100.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 12706.0d + "'", double57 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 2310.0d + "'", double58 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2310.0d + "'", double59 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[35.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1225.0d + "'", double63 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 1225.0d + "'", double64 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 35.0d + "'", double65 == 35.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 3.5553480614894135d + "'", double66 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 35.0d + "'", double68 == 35.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 1225.0d + "'", double71 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 35.0d + "'", double72 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + (-1820.0d) + "'", double78 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 5214.25d + "'", double86 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertTrue(Double.isNaN(double90));
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 3931.0d + "'", double91 == 3931.0d);
    }

    @Test
    public void test809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test809");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            double double6 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, 12706.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid quantile value: 12706.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 35.0d + "'", double4 == 35.0d);
    }

    @Test
    public void test810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test810");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution1 = null;
        tTestImpl0.setDistribution(tDistribution1);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl3 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray9 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double10 = org.apache.commons.math.stat.StatUtils.product(doubleArray9);
        double[] doubleArray15 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray15);
        double double18 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray9, doubleArray15, (double) 10.0f);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray9);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray9, (int) (short) 1, (int) (short) 0);
        double double23 = tTestImpl3.t((double) 1, doubleArray9);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory24 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution25 = distributionFactory24.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution27 = distributionFactory24.createTDistribution(0.8538434429284575d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl28 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution27);
        tTestImpl3.setDistribution(tDistribution27);
        tTestImpl0.setDistribution(tDistribution27);
        org.apache.commons.math.distribution.TDistribution tDistribution31 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl32 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution31);
        double[] doubleArray37 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double38 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray37);
        double[] doubleArray43 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double44 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray43);
        double double45 = org.apache.commons.math.stat.StatUtils.max(doubleArray43);
        double double46 = tTestImpl32.pairedT(doubleArray37, doubleArray43);
        double double49 = org.apache.commons.math.stat.StatUtils.variance(doubleArray37, 1, (int) (short) 0);
        org.apache.commons.math.distribution.TDistribution tDistribution50 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl51 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution50);
        double[] doubleArray56 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double57 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray56);
        double[] doubleArray62 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double63 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray62);
        double double64 = org.apache.commons.math.stat.StatUtils.max(doubleArray62);
        double double65 = tTestImpl51.pairedT(doubleArray56, doubleArray62);
        double double66 = org.apache.commons.math.stat.StatUtils.mean(doubleArray56);
        double double67 = org.apache.commons.math.stat.StatUtils.sum(doubleArray56);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean69 = tTestImpl0.pairedTTest(doubleArray37, doubleArray56, (double) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 1.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-1820.0d) + "'", double10 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 5214.25d + "'", double18 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.5919401533569089d + "'", double23 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(distributionFactory24);
        org.junit.Assert.assertNotNull(normalDistribution25);
        org.junit.Assert.assertNotNull(tDistribution27);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 100.0d + "'", double45 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 100.0d + "'", double64 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 38.0d + "'", double66 == 38.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 152.0d + "'", double67 == 152.0d);
    }

    @Test
    public void test811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test811");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution22 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl23 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double[] doubleArray34 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        double double36 = org.apache.commons.math.stat.StatUtils.max(doubleArray34);
        double double37 = tTestImpl23.pairedT(doubleArray28, doubleArray34);
        double double38 = tTestImpl0.t(100.0d, doubleArray34);
        double[] doubleArray43 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double44 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray43);
        double double45 = org.apache.commons.math.stat.StatUtils.max(doubleArray43);
        double double46 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray43);
        double[] doubleArray51 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double52 = org.apache.commons.math.stat.StatUtils.product(doubleArray51);
        double double54 = org.apache.commons.math.stat.StatUtils.variance(doubleArray51, (double) 10.0f);
        double double55 = tTestImpl0.tTest(doubleArray43, doubleArray51);
        org.apache.commons.math.distribution.TDistribution tDistribution56 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl57 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution56);
        double[] doubleArray63 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double64 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray63);
        double double65 = tTestImpl57.t((double) 1.0f, doubleArray63);
        double[] doubleArray70 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double71 = org.apache.commons.math.stat.StatUtils.product(doubleArray70);
        double[] doubleArray76 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double77 = org.apache.commons.math.stat.StatUtils.product(doubleArray76);
        double[] doubleArray82 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double83 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray82);
        double double85 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray76, doubleArray82, (double) 10.0f);
        double double86 = tTestImpl57.pairedT(doubleArray70, doubleArray76);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory87 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution88 = distributionFactory87.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution90 = distributionFactory87.createTDistribution(0.8538434429284575d);
        double double91 = tDistribution90.getDegreesOfFreedom();
        tTestImpl57.setDistribution(tDistribution90);
        tDistribution90.setDegreesOfFreedom((double) 1L);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl95 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution90);
        tTestImpl0.setDistribution(tDistribution90);
        double[] doubleArray98 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double99 = tTestImpl0.t(0.5664835927122979d, doubleArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-2.579976173587085d) + "'", double38 == (-2.579976173587085d));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 100.0d + "'", double45 == 100.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 12706.0d + "'", double46 == 12706.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-1820.0d) + "'", double52 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 679.5833333333334d + "'", double54 == 679.5833333333334d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.5801210456783388d + "'", double55 == 0.5801210456783388d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 1.539663200366486d + "'", double65 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + (-1820.0d) + "'", double71 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + (-1820.0d) + "'", double77 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 5214.25d + "'", double85 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertNotNull(distributionFactory87);
        org.junit.Assert.assertNotNull(normalDistribution88);
        org.junit.Assert.assertNotNull(tDistribution90);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.8538434429284575d + "'", double91 == 0.8538434429284575d);
    }

    @Test
    public void test812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test812");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory21 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution22 = distributionFactory21.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution24 = distributionFactory21.createTDistribution(0.8538434429284575d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl25 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution24);
        tTestImpl0.setDistribution(tDistribution24);
        double[] doubleArray34 = new double[] { '4', (byte) 10, (byte) 10, (byte) 10, (short) 1, 1.0d };
        double double37 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray34, 0, (int) (short) 1);
        double double38 = org.apache.commons.math.stat.StatUtils.sum(doubleArray34);
        double double39 = tTestImpl0.t(0.0d, doubleArray34);
        org.apache.commons.math.distribution.TDistribution tDistribution41 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl42 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution41);
        double[] doubleArray48 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double49 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray48);
        double double50 = tTestImpl42.t((double) 1.0f, doubleArray48);
        double[] doubleArray55 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double56 = org.apache.commons.math.stat.StatUtils.product(doubleArray55);
        double[] doubleArray61 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double62 = org.apache.commons.math.stat.StatUtils.product(doubleArray61);
        double[] doubleArray67 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double68 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray67);
        double double70 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray61, doubleArray67, (double) 10.0f);
        double double71 = tTestImpl42.pairedT(doubleArray55, doubleArray61);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory72 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution73 = distributionFactory72.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution75 = distributionFactory72.createTDistribution(0.8538434429284575d);
        double double76 = tDistribution75.getDegreesOfFreedom();
        tTestImpl42.setDistribution(tDistribution75);
        double[] doubleArray83 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double84 = org.apache.commons.math.stat.StatUtils.product(doubleArray83);
        double[] doubleArray89 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double90 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray89);
        double double91 = org.apache.commons.math.stat.StatUtils.max(doubleArray89);
        double double92 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray89);
        double double93 = org.apache.commons.math.stat.StatUtils.variance(doubleArray89);
        double double94 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray83, doubleArray89);
        double double95 = org.apache.commons.math.stat.StatUtils.product(doubleArray83);
        double double96 = tTestImpl42.t(21.75d, doubleArray83);
        double double97 = tTestImpl0.t((double) (-1.0f), doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(distributionFactory21);
        org.junit.Assert.assertNotNull(normalDistribution22);
        org.junit.Assert.assertNotNull(tDistribution24);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[52.0, 10.0, 10.0, 10.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 52.00000000000001d + "'", double37 == 52.00000000000001d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 84.0d + "'", double38 == 84.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.7925163190605438d + "'", double39 == 1.7925163190605438d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1.539663200366486d + "'", double50 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + (-1820.0d) + "'", double56 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + (-1820.0d) + "'", double62 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 5214.25d + "'", double70 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertNotNull(distributionFactory72);
        org.junit.Assert.assertNotNull(normalDistribution73);
        org.junit.Assert.assertNotNull(tDistribution75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.8538434429284575d + "'", double76 == 0.8538434429284575d);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + (-1820.0d) + "'", double84 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double90));
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 100.0d + "'", double91 == 100.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 12706.0d + "'", double92 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 2310.0d + "'", double93 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + (-16.25d) + "'", double94 == (-16.25d));
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + (-1820.0d) + "'", double95 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 0.0d + "'", double96 == 0.0d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 1.7453801681382977d + "'", double97 == 1.7453801681382977d);
    }

    @Test
    public void test813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test813");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution2 = distributionFactory0.createChiSquareDistribution((double) 100);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution4 = distributionFactory0.createExponentialDistribution((double) '4');
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution6 = distributionFactory0.createExponentialDistribution(1.8310898427469047d);
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution8 = distributionFactory0.createChiSquareDistribution(10.0d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(chiSquaredDistribution2);
        org.junit.Assert.assertNotNull(exponentialDistribution4);
        org.junit.Assert.assertNotNull(exponentialDistribution6);
        org.junit.Assert.assertNotNull(chiSquaredDistribution8);
    }

    @Test
    public void test814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test814");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        double[] doubleArray29 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double30 = org.apache.commons.math.stat.StatUtils.product(doubleArray29);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray29, doubleArray35, (double) 10.0f);
        double double39 = tTestImpl0.tTest(5214.25d, doubleArray35);
        org.apache.commons.math.distribution.TDistribution tDistribution40 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl41 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution40);
        double[] doubleArray47 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double48 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47);
        double double49 = tTestImpl41.t((double) 1.0f, doubleArray47);
        double[] doubleArray54 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double55 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray54);
        double double56 = org.apache.commons.math.stat.StatUtils.max(doubleArray54);
        double double57 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray54);
        double double58 = org.apache.commons.math.stat.StatUtils.variance(doubleArray54);
        double double59 = org.apache.commons.math.stat.StatUtils.variance(doubleArray54);
        double double60 = tTestImpl0.homoscedasticT(doubleArray47, doubleArray54);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary61 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary62 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double63 = tTestImpl0.homoscedasticTTest(statisticalSummary61, statisticalSummary62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1820.0d) + "'", double30 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 5214.25d + "'", double38 == 5214.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2.2065780869162666E-7d + "'", double39 == 2.2065780869162666E-7d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.539663200366486d + "'", double49 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 100.0d + "'", double56 == 100.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 12706.0d + "'", double57 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 2310.0d + "'", double58 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2310.0d + "'", double59 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
    }

    @Test
    public void test815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test815");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution21 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double30 = tTestImpl22.t((double) 1.0f, doubleArray28);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double37 = org.apache.commons.math.stat.StatUtils.max(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray35);
        double double39 = tTestImpl0.pairedT(doubleArray28, doubleArray35);
        org.apache.commons.math.distribution.TDistribution tDistribution41 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl42 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution41);
        double[] doubleArray47 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double48 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47);
        double[] doubleArray53 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double54 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray53);
        double double55 = org.apache.commons.math.stat.StatUtils.max(doubleArray53);
        double double56 = tTestImpl42.pairedT(doubleArray47, doubleArray53);
        double double57 = org.apache.commons.math.stat.StatUtils.max(doubleArray53);
        double double58 = tTestImpl0.tTest(0.9999999999999984d, doubleArray53);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary59 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary60 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double61 = tTestImpl0.tTest(statisticalSummary59, statisticalSummary60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.539663200366486d + "'", double30 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 12706.0d + "'", double38 == 12706.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 100.0d + "'", double55 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 100.0d + "'", double57 == 100.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.22127614024118358d + "'", double58 == 0.22127614024118358d);
    }

    @Test
    public void test816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test816");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution21 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double30 = tTestImpl22.t((double) 1.0f, doubleArray28);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double37 = org.apache.commons.math.stat.StatUtils.max(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray35);
        double double39 = tTestImpl0.pairedT(doubleArray28, doubleArray35);
        double[] doubleArray44 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double45 = org.apache.commons.math.stat.StatUtils.product(doubleArray44);
        double[] doubleArray50 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double51 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray50);
        double double53 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray44, doubleArray50, (double) 10.0f);
        double double54 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double double57 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44, (int) (short) 1, (int) (short) 0);
        double double58 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray44);
        org.apache.commons.math.distribution.TDistribution tDistribution59 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl60 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution59);
        double[] doubleArray65 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double66 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray65);
        double[] doubleArray71 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double72 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray71);
        double double73 = org.apache.commons.math.stat.StatUtils.max(doubleArray71);
        double double74 = tTestImpl60.pairedT(doubleArray65, doubleArray71);
        double double75 = tTestImpl0.homoscedasticTTest(doubleArray44, doubleArray71);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary76 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary77 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double78 = tTestImpl0.t(statisticalSummary76, statisticalSummary77);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.539663200366486d + "'", double30 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 12706.0d + "'", double38 == 12706.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1820.0d) + "'", double45 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 5214.25d + "'", double53 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 3931.0d + "'", double58 == 3931.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 100.0d + "'", double73 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.5739591588987152d + "'", double75 == 0.5739591588987152d);
    }

    @Test
    public void test817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test817");
        java.lang.Object[] objArray3 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("", objArray3);
        java.lang.Object[] objArray7 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("", objArray7);
        mathException4.addSuppressed((java.lang.Throwable) mathException8);
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException8);
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray12 = mathException11.getSuppressed();
        mathException10.addSuppressed((java.lang.Throwable) mathException11);
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("", (java.lang.Throwable) mathException11);
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException();
        java.lang.Object[] objArray16 = mathException15.getArguments();
        java.lang.Object[] objArray19 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("", objArray19);
        java.lang.Object[] objArray23 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("", objArray23);
        mathException20.addSuppressed((java.lang.Throwable) mathException24);
        mathException15.addSuppressed((java.lang.Throwable) mathException24);
        mathException11.addSuppressed((java.lang.Throwable) mathException24);
        java.lang.String str28 = mathException11.getPattern();
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[1225.0]");
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[1225.0]");
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test818");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution1 = null;
        tTestImpl0.setDistribution(tDistribution1);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl3 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray9 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double10 = org.apache.commons.math.stat.StatUtils.product(doubleArray9);
        double[] doubleArray15 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray15);
        double double18 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray9, doubleArray15, (double) 10.0f);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray9);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray9, (int) (short) 1, (int) (short) 0);
        double double23 = tTestImpl3.t((double) 1, doubleArray9);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory24 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution25 = distributionFactory24.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution27 = distributionFactory24.createTDistribution(0.8538434429284575d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl28 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution27);
        tTestImpl3.setDistribution(tDistribution27);
        tTestImpl0.setDistribution(tDistribution27);
        double[] doubleArray36 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double37 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray36);
        double double38 = org.apache.commons.math.stat.StatUtils.max(doubleArray36);
        double double39 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray36);
        double[] doubleArray44 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double45 = org.apache.commons.math.stat.StatUtils.product(doubleArray44);
        double[] doubleArray50 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double51 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray50);
        double double53 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray44, doubleArray50, (double) 10.0f);
        double double54 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double double57 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44, (int) (short) 1, (int) (short) 0);
        double double58 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray36, doubleArray44);
        double double59 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double double60 = tTestImpl0.t(0.5943989439169762d, doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-1820.0d) + "'", double10 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 5214.25d + "'", double18 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.5919401533569089d + "'", double23 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(distributionFactory24);
        org.junit.Assert.assertNotNull(normalDistribution25);
        org.junit.Assert.assertNotNull(tDistribution27);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 12706.0d + "'", double39 == 12706.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1820.0d) + "'", double45 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 5214.25d + "'", double53 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 16.25d + "'", double58 == 16.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.623057869377272d + "'", double60 == 1.623057869377272d);
    }

    @Test
    public void test819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test819");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        double[] doubleArray6 = new double[] { (-1.0f) };
        double double7 = org.apache.commons.math.stat.StatUtils.min(doubleArray6);
        double double8 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray1, doubleArray6);
        // The following exception was thrown during execution in test generation
        try {
            double double11 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (int) (short) 10, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 35.0d + "'", double4 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 36.0d + "'", double8 == 36.0d);
    }

    @Test
    public void test820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test820");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution1 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution4 = distributionFactory0.createGammaDistribution(52.0d, 366.0d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(normalDistribution1);
        org.junit.Assert.assertNotNull(gammaDistribution4);
    }

    @Test
    public void test821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test821");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        double double21 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray6);
        double double22 = org.apache.commons.math.stat.StatUtils.min(doubleArray6);
        double double25 = org.apache.commons.math.stat.StatUtils.min(doubleArray6, 1, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double28 = org.apache.commons.math.stat.StatUtils.max(doubleArray6, (int) (short) 0, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 3931.0d + "'", double21 == 3931.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-1.0d) + "'", double22 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
    }

    @Test
    public void test822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test822");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(10.0d, (double) (short) 1);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution7 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution10 = distributionFactory0.createGammaDistribution(0.5739591588987152d, 3931.0d);
        double double12 = gammaDistribution10.cumulativeProbability(65.0d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(fDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution7);
        org.junit.Assert.assertNotNull(gammaDistribution10);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.10593101419092688d + "'", double12 == 0.10593101419092688d);
    }

    @Test
    public void test823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test823");
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray3 = mathException2.getSuppressed();
        java.lang.Object[] objArray6 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("", objArray6);
        java.lang.Object[] objArray10 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("", objArray10);
        mathException7.addSuppressed((java.lang.Throwable) mathException11);
        java.lang.Object[] objArray15 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("", objArray15);
        java.lang.Object[] objArray19 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("", objArray19);
        mathException16.addSuppressed((java.lang.Throwable) mathException20);
        mathException7.addSuppressed((java.lang.Throwable) mathException20);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) throwableArray3, (java.lang.Throwable) mathException7);
        java.lang.Object[] objArray24 = mathException7.getArguments();
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("hi!", objArray24);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[1225.0]");
    }

    @Test
    public void test824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test824");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution2 = distributionFactory0.createPoissonDistribution(0.03982783727702899d);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution4 = distributionFactory0.createExponentialDistribution((double) (short) 1);
        org.apache.commons.math.distribution.FDistribution fDistribution7 = distributionFactory0.createFDistribution((double) 10, 3931.0d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(poissonDistribution2);
        org.junit.Assert.assertNotNull(exponentialDistribution4);
        org.junit.Assert.assertNotNull(fDistribution7);
    }

    @Test
    public void test825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test825");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray2 = mathException1.getSuppressed();
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException();
        java.lang.Object[] objArray6 = mathException5.getArguments();
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("hi!", objArray6);
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray9 = mathException8.getSuppressed();
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException8);
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException();
        java.lang.Object[] objArray12 = mathException11.getArguments();
        mathException8.addSuppressed((java.lang.Throwable) mathException11);
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", objArray6, (java.lang.Throwable) mathException8);
        java.lang.Object[] objArray17 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("", objArray17);
        java.lang.Object[] objArray21 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("", objArray21);
        mathException18.addSuppressed((java.lang.Throwable) mathException22);
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException22);
        java.lang.Throwable[] throwableArray25 = mathException24.getSuppressed();
        mathException8.addSuppressed((java.lang.Throwable) mathException24);
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) throwableArray2, (java.lang.Throwable) mathException8);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[1225.0]");
        org.junit.Assert.assertNotNull(throwableArray25);
    }

    @Test
    public void test826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test826");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray6 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.max(doubleArray12);
        double double15 = tTestImpl1.pairedT(doubleArray6, doubleArray12);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray20);
        double double33 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray20, (int) (short) 1, (int) (short) 0);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl34 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray40 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double41 = org.apache.commons.math.stat.StatUtils.product(doubleArray40);
        double[] doubleArray46 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double47 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray46);
        double double49 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray40, doubleArray46, (double) 10.0f);
        double double50 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray40);
        double double53 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray40, (int) (short) 1, (int) (short) 0);
        double double54 = tTestImpl34.t((double) 1, doubleArray40);
        double double55 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray40);
        double double56 = org.apache.commons.math.stat.StatUtils.product(doubleArray40);
        double double57 = org.apache.commons.math.stat.StatUtils.product(doubleArray40);
        double double58 = tTestImpl1.homoscedasticT(doubleArray20, doubleArray40);
        double double61 = org.apache.commons.math.stat.StatUtils.product(doubleArray40, 0, 0);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + (-1820.0d) + "'", double41 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 5214.25d + "'", double49 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.5919401533569089d + "'", double54 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 3931.0d + "'", double55 == 3931.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + (-1820.0d) + "'", double56 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + (-1820.0d) + "'", double57 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
    }

    @Test
    public void test827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test827");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution1 = null;
        tTestImpl0.setDistribution(tDistribution1);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl3 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray9 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double10 = org.apache.commons.math.stat.StatUtils.product(doubleArray9);
        double[] doubleArray15 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray15);
        double double18 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray9, doubleArray15, (double) 10.0f);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray9);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray9, (int) (short) 1, (int) (short) 0);
        double double23 = tTestImpl3.t((double) 1, doubleArray9);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double30 = org.apache.commons.math.stat.StatUtils.max(doubleArray28);
        double double31 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray28);
        double double32 = org.apache.commons.math.stat.StatUtils.variance(doubleArray28);
        org.apache.commons.math.distribution.TDistribution tDistribution33 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl34 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution33);
        double[] doubleArray40 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double41 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray40);
        double double42 = tTestImpl34.t((double) 1.0f, doubleArray40);
        double double43 = tTestImpl3.t(doubleArray28, doubleArray40);
        double[] doubleArray48 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double49 = org.apache.commons.math.stat.StatUtils.product(doubleArray48);
        double[] doubleArray54 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double55 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray54);
        double double57 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray48, doubleArray54, (double) 10.0f);
        double double58 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray48);
        double double61 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray48, (int) (short) 1, (int) (short) 0);
        double double62 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray48);
        double double63 = tTestImpl0.pairedT(doubleArray28, doubleArray48);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary64 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary65 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double66 = tTestImpl0.t(statisticalSummary64, statisticalSummary65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-1820.0d) + "'", double10 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 5214.25d + "'", double18 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.5919401533569089d + "'", double23 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 100.0d + "'", double30 == 100.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 12706.0d + "'", double31 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 2310.0d + "'", double32 == 2310.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.539663200366486d + "'", double42 == 1.539663200366486d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + (-1820.0d) + "'", double49 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 5214.25d + "'", double57 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 3931.0d + "'", double62 == 3931.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.4500776384309941d + "'", double63 == 0.4500776384309941d);
    }

    @Test
    public void test828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test828");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution21 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double30 = tTestImpl22.t((double) 1.0f, doubleArray28);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double37 = org.apache.commons.math.stat.StatUtils.max(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray35);
        double double39 = tTestImpl0.pairedT(doubleArray28, doubleArray35);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl40 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray45 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double46 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray45);
        double double47 = org.apache.commons.math.stat.StatUtils.max(doubleArray45);
        double[] doubleArray52 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double53 = org.apache.commons.math.stat.StatUtils.product(doubleArray52);
        double[] doubleArray58 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double59 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray58);
        double double61 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray52, doubleArray58, (double) 10.0f);
        double double62 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray52);
        double double63 = tTestImpl40.t(doubleArray45, doubleArray52);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl64 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray70 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double71 = org.apache.commons.math.stat.StatUtils.product(doubleArray70);
        double[] doubleArray76 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double77 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray76);
        double double79 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray70, doubleArray76, (double) 10.0f);
        double double80 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray70);
        double double83 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray70, (int) (short) 1, (int) (short) 0);
        double double84 = tTestImpl64.t((double) 1, doubleArray70);
        double double85 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray70);
        double double88 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray70, (int) (short) 0, (int) (short) 0);
        double double89 = tTestImpl0.homoscedasticT(doubleArray52, doubleArray70);
        org.apache.commons.math.distribution.TDistribution tDistribution90 = null;
        tTestImpl0.setDistribution(tDistribution90);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.539663200366486d + "'", double30 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 12706.0d + "'", double38 == 12706.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 100.0d + "'", double47 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + (-1820.0d) + "'", double53 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 5214.25d + "'", double61 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.5943989439169762d + "'", double63 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + (-1820.0d) + "'", double71 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 5214.25d + "'", double79 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 1.5919401533569089d + "'", double84 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 3931.0d + "'", double85 == 3931.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double88));
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
    }

    @Test
    public void test829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test829");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution21 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double30 = tTestImpl22.t((double) 1.0f, doubleArray28);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double37 = org.apache.commons.math.stat.StatUtils.max(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray35);
        double double39 = tTestImpl0.pairedT(doubleArray28, doubleArray35);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl40 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray45 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double46 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray45);
        double double47 = org.apache.commons.math.stat.StatUtils.max(doubleArray45);
        double[] doubleArray52 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double53 = org.apache.commons.math.stat.StatUtils.product(doubleArray52);
        double[] doubleArray58 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double59 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray58);
        double double61 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray52, doubleArray58, (double) 10.0f);
        double double62 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray52);
        double double63 = tTestImpl40.t(doubleArray45, doubleArray52);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl64 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray70 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double71 = org.apache.commons.math.stat.StatUtils.product(doubleArray70);
        double[] doubleArray76 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double77 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray76);
        double double79 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray70, doubleArray76, (double) 10.0f);
        double double80 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray70);
        double double83 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray70, (int) (short) 1, (int) (short) 0);
        double double84 = tTestImpl64.t((double) 1, doubleArray70);
        double double85 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray70);
        double double88 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray70, (int) (short) 0, (int) (short) 0);
        double double89 = tTestImpl0.homoscedasticT(doubleArray52, doubleArray70);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary90 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary91 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double92 = tTestImpl0.homoscedasticT(statisticalSummary90, statisticalSummary91);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.539663200366486d + "'", double30 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 12706.0d + "'", double38 == 12706.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 100.0d + "'", double47 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + (-1820.0d) + "'", double53 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 5214.25d + "'", double61 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.5943989439169762d + "'", double63 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + (-1820.0d) + "'", double71 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 5214.25d + "'", double79 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 1.5919401533569089d + "'", double84 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 3931.0d + "'", double85 == 3931.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double88));
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
    }

    @Test
    public void test830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test830");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution21 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double30 = tTestImpl22.t((double) 1.0f, doubleArray28);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double37 = org.apache.commons.math.stat.StatUtils.max(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray35);
        double double39 = tTestImpl0.pairedT(doubleArray28, doubleArray35);
        org.apache.commons.math.distribution.TDistribution tDistribution41 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl42 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution41);
        double[] doubleArray47 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double48 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47);
        double[] doubleArray53 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double54 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray53);
        double double55 = org.apache.commons.math.stat.StatUtils.max(doubleArray53);
        double double56 = tTestImpl42.pairedT(doubleArray47, doubleArray53);
        double double57 = org.apache.commons.math.stat.StatUtils.max(doubleArray53);
        double double58 = tTestImpl0.tTest(0.9999999999999984d, doubleArray53);
        double[] doubleArray60 = new double[] { '#' };
        double double61 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray60);
        double double62 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray60);
        double double63 = org.apache.commons.math.stat.StatUtils.product(doubleArray60);
        double double64 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray60);
        double double66 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray60, 0.1177019708001247d);
        double[] doubleArray71 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double72 = org.apache.commons.math.stat.StatUtils.product(doubleArray71);
        double[] doubleArray77 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double78 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray77);
        double double79 = org.apache.commons.math.stat.StatUtils.max(doubleArray77);
        double double80 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray77);
        double double81 = org.apache.commons.math.stat.StatUtils.variance(doubleArray77);
        double double82 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray71, doubleArray77);
        double double83 = org.apache.commons.math.stat.StatUtils.product(doubleArray71);
        // The following exception was thrown during execution in test generation
        try {
            double double84 = tTestImpl0.t(doubleArray60, doubleArray71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.539663200366486d + "'", double30 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 12706.0d + "'", double38 == 12706.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 100.0d + "'", double55 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 100.0d + "'", double57 == 100.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.22127614024118358d + "'", double58 == 0.22127614024118358d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[35.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1225.0d + "'", double61 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1225.0d + "'", double62 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 35.0d + "'", double63 == 35.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 1225.0d + "'", double64 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 35.0d + "'", double66 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + (-1820.0d) + "'", double72 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 100.0d + "'", double79 == 100.0d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 12706.0d + "'", double80 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 2310.0d + "'", double81 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + (-16.25d) + "'", double82 == (-16.25d));
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + (-1820.0d) + "'", double83 == (-1820.0d));
    }

    @Test
    public void test831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test831");
        double[] doubleArray1 = new double[] { (-1.0f) };
        double double2 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.max(doubleArray1);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl4 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray10 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double11 = org.apache.commons.math.stat.StatUtils.product(doubleArray10);
        double[] doubleArray16 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double17 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray16);
        double double19 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray10, doubleArray16, (double) 10.0f);
        double double20 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray10);
        double double23 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray10, (int) (short) 1, (int) (short) 0);
        double double24 = tTestImpl4.t((double) 1, doubleArray10);
        double double25 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray10);
        double double26 = org.apache.commons.math.stat.StatUtils.product(doubleArray10);
        org.apache.commons.math.distribution.TDistribution tDistribution27 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl28 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution27);
        double[] doubleArray34 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        double double36 = tTestImpl28.t((double) 1.0f, doubleArray34);
        double[] doubleArray41 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double42 = org.apache.commons.math.stat.StatUtils.product(doubleArray41);
        double[] doubleArray47 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double48 = org.apache.commons.math.stat.StatUtils.product(doubleArray47);
        double[] doubleArray53 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double54 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray53);
        double double56 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray47, doubleArray53, (double) 10.0f);
        double double57 = tTestImpl28.pairedT(doubleArray41, doubleArray47);
        double double58 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray10, doubleArray47);
        // The following exception was thrown during execution in test generation
        try {
            double double59 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray1, doubleArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input arrays must have the same (positive) length.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[-1.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.0d) + "'", double2 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-1820.0d) + "'", double11 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 5214.25d + "'", double19 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.5919401533569089d + "'", double24 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 3931.0d + "'", double25 == 3931.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-1820.0d) + "'", double26 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.539663200366486d + "'", double36 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + (-1820.0d) + "'", double42 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + (-1820.0d) + "'", double48 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 5214.25d + "'", double56 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
    }

    @Test
    public void test832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test832");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution21 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double30 = tTestImpl22.t((double) 1.0f, doubleArray28);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double37 = org.apache.commons.math.stat.StatUtils.max(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray35);
        double double39 = tTestImpl0.pairedT(doubleArray28, doubleArray35);
        double[] doubleArray44 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double45 = org.apache.commons.math.stat.StatUtils.product(doubleArray44);
        double[] doubleArray50 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double51 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray50);
        double double53 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray44, doubleArray50, (double) 10.0f);
        double double54 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double double57 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44, (int) (short) 1, (int) (short) 0);
        double double58 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray44);
        org.apache.commons.math.distribution.TDistribution tDistribution59 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl60 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution59);
        double[] doubleArray65 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double66 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray65);
        double[] doubleArray71 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double72 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray71);
        double double73 = org.apache.commons.math.stat.StatUtils.max(doubleArray71);
        double double74 = tTestImpl60.pairedT(doubleArray65, doubleArray71);
        double double75 = tTestImpl0.homoscedasticTTest(doubleArray44, doubleArray71);
        double double76 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray44);
        // The following exception was thrown during execution in test generation
        try {
            double double79 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44, (int) (byte) -1, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.539663200366486d + "'", double30 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 12706.0d + "'", double38 == 12706.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1820.0d) + "'", double45 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 5214.25d + "'", double53 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 3931.0d + "'", double58 == 3931.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 100.0d + "'", double73 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.5739591588987152d + "'", double75 == 0.5739591588987152d);
        org.junit.Assert.assertTrue(Double.isNaN(double76));
    }

    @Test
    public void test833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test833");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution2 = distributionFactory0.createChiSquareDistribution((double) 100);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution4 = distributionFactory0.createExponentialDistribution((double) '4');
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution6 = distributionFactory0.createExponentialDistribution(1.8310898427469047d);
        org.apache.commons.math.distribution.FDistribution fDistribution9 = distributionFactory0.createFDistribution(0.9810883886884435d, 0.15865525296496386d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(chiSquaredDistribution2);
        org.junit.Assert.assertNotNull(exponentialDistribution4);
        org.junit.Assert.assertNotNull(exponentialDistribution6);
        org.junit.Assert.assertNotNull(fDistribution9);
    }

    @Test
    public void test834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test834");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray3 = new double[] { '#' };
        double double4 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double double5 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray3);
        double double6 = org.apache.commons.math.stat.StatUtils.product(doubleArray3);
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray3);
        double double9 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray3, (double) 100.0f);
        double double10 = org.apache.commons.math.stat.StatUtils.product(doubleArray3);
        double[] doubleArray12 = new double[] { '#' };
        double double13 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray3, doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl16 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution17 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl18 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution17);
        double[] doubleArray23 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double24 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray23);
        double[] doubleArray29 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double30 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray29);
        double double31 = org.apache.commons.math.stat.StatUtils.max(doubleArray29);
        double double32 = tTestImpl18.pairedT(doubleArray23, doubleArray29);
        double double35 = org.apache.commons.math.stat.StatUtils.variance(doubleArray23, 1, (int) (short) 0);
        org.apache.commons.math.distribution.TDistribution tDistribution36 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl37 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution36);
        double[] doubleArray42 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double43 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray42);
        double[] doubleArray48 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double49 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray48);
        double double50 = org.apache.commons.math.stat.StatUtils.max(doubleArray48);
        double double51 = tTestImpl37.pairedT(doubleArray42, doubleArray48);
        double double54 = org.apache.commons.math.stat.StatUtils.variance(doubleArray42, 1, (int) (short) 0);
        double double55 = tTestImpl16.tTest(doubleArray23, doubleArray42);
        // The following exception was thrown during execution in test generation
        try {
            double double56 = tTestImpl1.pairedTTest(doubleArray12, doubleArray42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input arrays must have the same (positive) length.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[35.0]");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1225.0d + "'", double4 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1225.0d + "'", double5 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 3.5553480614894135d + "'", double7 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 35.0d + "'", double9 == 35.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1225.0d + "'", double13 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 3.5553480614894135d + "'", double15 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 100.0d + "'", double31 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 100.0d + "'", double50 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1.0d + "'", double55 == 1.0d);
    }

    @Test
    public void test835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test835");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution22 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl23 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double[] doubleArray34 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        double double36 = org.apache.commons.math.stat.StatUtils.max(doubleArray34);
        double double37 = tTestImpl23.pairedT(doubleArray28, doubleArray34);
        double double38 = tTestImpl0.t(100.0d, doubleArray34);
        double double39 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray34);
        double double40 = org.apache.commons.math.stat.StatUtils.product(doubleArray34);
        // The following exception was thrown during execution in test generation
        try {
            double double43 = org.apache.commons.math.stat.StatUtils.min(doubleArray34, 0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-2.579976173587085d) + "'", double38 == (-2.579976173587085d));
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 12706.0d + "'", double39 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + (-5200.000000000001d) + "'", double40 == (-5200.000000000001d));
    }

    @Test
    public void test836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test836");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray6 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.max(doubleArray12);
        double double15 = tTestImpl1.pairedT(doubleArray6, doubleArray12);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl17 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray23 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double24 = org.apache.commons.math.stat.StatUtils.product(doubleArray23);
        double[] doubleArray29 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double30 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray29);
        double double32 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray23, doubleArray29, (double) 10.0f);
        double double33 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray23);
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray23, (int) (short) 1, (int) (short) 0);
        double double37 = tTestImpl17.t((double) 1, doubleArray23);
        org.apache.commons.math.distribution.TDistribution tDistribution39 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl40 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution39);
        double[] doubleArray45 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double46 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray45);
        double[] doubleArray51 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double52 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray51);
        double double53 = org.apache.commons.math.stat.StatUtils.max(doubleArray51);
        double double54 = tTestImpl40.pairedT(doubleArray45, doubleArray51);
        double double55 = tTestImpl17.t(100.0d, doubleArray51);
        double[] doubleArray60 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double61 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray60);
        double double62 = org.apache.commons.math.stat.StatUtils.max(doubleArray60);
        double double63 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray60);
        double[] doubleArray68 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double69 = org.apache.commons.math.stat.StatUtils.product(doubleArray68);
        double double71 = org.apache.commons.math.stat.StatUtils.variance(doubleArray68, (double) 10.0f);
        double double72 = tTestImpl17.tTest(doubleArray60, doubleArray68);
        double double73 = tTestImpl1.t(0.670531799205166d, doubleArray60);
        double[] doubleArray79 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double80 = org.apache.commons.math.stat.StatUtils.product(doubleArray79);
        double[] doubleArray85 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double86 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray85);
        double double88 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray79, doubleArray85, (double) 10.0f);
        double double89 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray79);
        double double92 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray79, (int) (short) 1, (int) (short) 0);
        double double93 = tTestImpl1.t(0.34089313230206053d, doubleArray79);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary94 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary95 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double96 = tTestImpl1.homoscedasticTTest(statisticalSummary94, statisticalSummary95);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-1820.0d) + "'", double24 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 5214.25d + "'", double32 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.5919401533569089d + "'", double37 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 100.0d + "'", double53 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + (-2.579976173587085d) + "'", double55 == (-2.579976173587085d));
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 100.0d + "'", double62 == 100.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 12706.0d + "'", double63 == 12706.0d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + (-1820.0d) + "'", double69 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 679.5833333333334d + "'", double71 == 679.5833333333334d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.5801210456783388d + "'", double72 == 0.5801210456783388d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 1.5533732021085067d + "'", double73 == 1.5533732021085067d);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + (-1820.0d) + "'", double80 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 5214.25d + "'", double88 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double89));
        org.junit.Assert.assertTrue(Double.isNaN(double92));
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 1.642506837117952d + "'", double93 == 1.642506837117952d);
    }

    @Test
    public void test837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test837");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException("");
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException1);
        java.lang.String str3 = mathException2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org.apache.commons.math.MathException: " + "'", str3, "org.apache.commons.math.MathException: ");
    }

    @Test
    public void test838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test838");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution1 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl2 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution1);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double[] doubleArray13 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double14 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray13);
        double double15 = org.apache.commons.math.stat.StatUtils.max(doubleArray13);
        double double16 = tTestImpl2.pairedT(doubleArray7, doubleArray13);
        double double19 = org.apache.commons.math.stat.StatUtils.variance(doubleArray7, 1, (int) (short) 0);
        org.apache.commons.math.distribution.TDistribution tDistribution20 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl21 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double[] doubleArray32 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double33 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray32);
        double double34 = org.apache.commons.math.stat.StatUtils.max(doubleArray32);
        double double35 = tTestImpl21.pairedT(doubleArray26, doubleArray32);
        double double38 = org.apache.commons.math.stat.StatUtils.variance(doubleArray26, 1, (int) (short) 0);
        double double39 = tTestImpl0.tTest(doubleArray7, doubleArray26);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary40 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary41 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean43 = tTestImpl0.tTest(statisticalSummary40, statisticalSummary41, 366.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 366.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 100.0d + "'", double34 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
    }

    @Test
    public void test839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test839");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        double[] doubleArray42 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double43 = org.apache.commons.math.stat.StatUtils.product(doubleArray42);
        double[] doubleArray48 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double49 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray48);
        double double50 = org.apache.commons.math.stat.StatUtils.max(doubleArray48);
        double double51 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray48);
        double double52 = org.apache.commons.math.stat.StatUtils.variance(doubleArray48);
        double double53 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray42, doubleArray48);
        double double54 = org.apache.commons.math.stat.StatUtils.product(doubleArray42);
        double double55 = tTestImpl1.t(21.75d, doubleArray42);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary57 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double58 = tTestImpl1.tTest(16.25d, statisticalSummary57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + (-1820.0d) + "'", double43 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 100.0d + "'", double50 == 100.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 12706.0d + "'", double51 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 2310.0d + "'", double52 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + (-16.25d) + "'", double53 == (-16.25d));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + (-1820.0d) + "'", double54 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
    }

    @Test
    public void test840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test840");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.TDistribution tDistribution2 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl3 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution2);
        double[] doubleArray9 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double10 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray9);
        double double11 = tTestImpl3.t((double) 1.0f, doubleArray9);
        double[] doubleArray16 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double17 = org.apache.commons.math.stat.StatUtils.product(doubleArray16);
        double[] doubleArray22 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double23 = org.apache.commons.math.stat.StatUtils.product(doubleArray22);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double31 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray22, doubleArray28, (double) 10.0f);
        double double32 = tTestImpl3.pairedT(doubleArray16, doubleArray22);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory33 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution34 = distributionFactory33.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution36 = distributionFactory33.createTDistribution(0.8538434429284575d);
        double double37 = tDistribution36.getDegreesOfFreedom();
        tTestImpl3.setDistribution(tDistribution36);
        tDistribution36.setDegreesOfFreedom((double) 1L);
        double double43 = tDistribution36.cumulativeProbability((-1820.0d), 0.5943989439169762d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl44 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution36);
        double double46 = tDistribution36.cumulativeProbability(0.8538434429284575d);
        tTestImpl1.setDistribution(tDistribution36);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary49 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean51 = tTestImpl1.tTest(0.1971665237081084d, statisticalSummary49, 21.75d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 21.75");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.539663200366486d + "'", double11 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1820.0d) + "'", double17 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-1820.0d) + "'", double23 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 5214.25d + "'", double31 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(distributionFactory33);
        org.junit.Assert.assertNotNull(normalDistribution34);
        org.junit.Assert.assertNotNull(tDistribution36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.8538434429284575d + "'", double37 == 0.8538434429284575d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.670531799205166d + "'", double43 == 0.670531799205166d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.7249563298587571d + "'", double46 == 0.7249563298587571d);
    }

    @Test
    public void test841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test841");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        double[] doubleArray26 = new double[] { '#' };
        double double27 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray26);
        double double28 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.min(doubleArray26);
        double double33 = org.apache.commons.math.stat.StatUtils.variance(doubleArray26, 0.0d, (int) (short) 0, 0);
        double double35 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray26, (double) 100L);
        double double36 = org.apache.commons.math.stat.StatUtils.min(doubleArray26);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean38 = tTestImpl0.tTest(10.0d, doubleArray26, (double) 100L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 100.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[35.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1225.0d + "'", double27 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1225.0d + "'", double28 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 35.0d + "'", double29 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 35.0d + "'", double35 == 35.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 35.0d + "'", double36 == 35.0d);
    }

    @Test
    public void test842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test842");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution1 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution3 = distributionFactory0.createTDistribution(0.8538434429284575d);
        double double4 = tDistribution3.getDegreesOfFreedom();
        double double5 = tDistribution3.getDegreesOfFreedom();
        double double6 = tDistribution3.getDegreesOfFreedom();
        double double7 = tDistribution3.getDegreesOfFreedom();
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(normalDistribution1);
        org.junit.Assert.assertNotNull(tDistribution3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.8538434429284575d + "'", double4 == 0.8538434429284575d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.8538434429284575d + "'", double5 == 0.8538434429284575d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.8538434429284575d + "'", double6 == 0.8538434429284575d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.8538434429284575d + "'", double7 == 0.8538434429284575d);
    }

    @Test
    public void test843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test843");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution21 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double30 = tTestImpl22.t((double) 1.0f, doubleArray28);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double37 = org.apache.commons.math.stat.StatUtils.max(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray35);
        double double39 = tTestImpl0.pairedT(doubleArray28, doubleArray35);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl40 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray45 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double46 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray45);
        double double47 = org.apache.commons.math.stat.StatUtils.max(doubleArray45);
        double[] doubleArray52 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double53 = org.apache.commons.math.stat.StatUtils.product(doubleArray52);
        double[] doubleArray58 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double59 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray58);
        double double61 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray52, doubleArray58, (double) 10.0f);
        double double62 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray52);
        double double63 = tTestImpl40.t(doubleArray45, doubleArray52);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl64 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray70 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double71 = org.apache.commons.math.stat.StatUtils.product(doubleArray70);
        double[] doubleArray76 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double77 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray76);
        double double79 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray70, doubleArray76, (double) 10.0f);
        double double80 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray70);
        double double83 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray70, (int) (short) 1, (int) (short) 0);
        double double84 = tTestImpl64.t((double) 1, doubleArray70);
        double double85 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray70);
        double double88 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray70, (int) (short) 0, (int) (short) 0);
        double double89 = tTestImpl0.homoscedasticT(doubleArray52, doubleArray70);
        double double92 = org.apache.commons.math.stat.StatUtils.variance(doubleArray52, (int) (short) 0, 0);
        double double94 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray52, 6.109428088468881d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.539663200366486d + "'", double30 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 12706.0d + "'", double38 == 12706.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 100.0d + "'", double47 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + (-1820.0d) + "'", double53 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 5214.25d + "'", double61 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.5943989439169762d + "'", double63 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + (-1820.0d) + "'", double71 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 5214.25d + "'", double79 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 1.5919401533569089d + "'", double84 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 3931.0d + "'", double85 == 3931.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double88));
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double92));
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + (-1.0d) + "'", double94 == (-1.0d));
    }

    @Test
    public void test844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test844");
        double[] doubleArray4 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double5 = org.apache.commons.math.stat.StatUtils.product(doubleArray4);
        double[] doubleArray10 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double11 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray10);
        double double13 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray4, doubleArray10, (double) 10.0f);
        org.apache.commons.math.distribution.TDistribution tDistribution14 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl15 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution14);
        double[] doubleArray20 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double21 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double28 = org.apache.commons.math.stat.StatUtils.max(doubleArray26);
        double double29 = tTestImpl15.pairedT(doubleArray20, doubleArray26);
        double double30 = org.apache.commons.math.stat.StatUtils.max(doubleArray26);
        double double31 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray4, doubleArray26);
        double double32 = org.apache.commons.math.stat.StatUtils.variance(doubleArray26);
        double[] doubleArray37 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double38 = org.apache.commons.math.stat.StatUtils.product(doubleArray37);
        double[] doubleArray43 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double44 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray43);
        double double46 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray37, doubleArray43, (double) 10.0f);
        org.apache.commons.math.distribution.TDistribution tDistribution47 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl48 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution47);
        double[] doubleArray53 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double54 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray53);
        double[] doubleArray59 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double60 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray59);
        double double61 = org.apache.commons.math.stat.StatUtils.max(doubleArray59);
        double double62 = tTestImpl48.pairedT(doubleArray53, doubleArray59);
        double double63 = org.apache.commons.math.stat.StatUtils.max(doubleArray59);
        double double64 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray37, doubleArray59);
        double double65 = org.apache.commons.math.stat.StatUtils.variance(doubleArray59);
        double double67 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray26, doubleArray59, (-1820.0d));
        org.apache.commons.math.distribution.TDistribution tDistribution68 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl69 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution68);
        double[] doubleArray74 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double75 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray74);
        double[] doubleArray80 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double81 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray80);
        double double82 = org.apache.commons.math.stat.StatUtils.max(doubleArray80);
        double double83 = tTestImpl69.pairedT(doubleArray74, doubleArray80);
        double double84 = org.apache.commons.math.stat.StatUtils.max(doubleArray80);
        double double85 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray80);
        double double86 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray26, doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1820.0d) + "'", double5 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5214.25d + "'", double13 == 5214.25d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 100.0d + "'", double30 == 100.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-16.25d) + "'", double31 == (-16.25d));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 2310.0d + "'", double32 == 2310.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-1820.0d) + "'", double38 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 5214.25d + "'", double46 == 5214.25d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 100.0d + "'", double61 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 100.0d + "'", double63 == 100.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + (-16.25d) + "'", double64 == (-16.25d));
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2310.0d + "'", double65 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 100.0d + "'", double82 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 100.0d + "'", double84 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d);
    }

    @Test
    public void test845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test845");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.0d, (double) 10L);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution7 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution10 = distributionFactory0.createGammaDistribution(16.25d, 100.0d);
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution13 = distributionFactory0.createWeibullDistribution(0.6674705631412963d, (double) 10.0f);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution7);
        org.junit.Assert.assertNotNull(gammaDistribution10);
        org.junit.Assert.assertNotNull(weibullDistribution13);
    }

    @Test
    public void test846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test846");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution6 = distributionFactory0.createGammaDistribution(0.8538434429284575d, (double) (byte) 10);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution9 = distributionFactory0.createCauchyDistribution(Double.NaN, (double) (short) 100);
        org.apache.commons.math.distribution.TDistribution tDistribution11 = distributionFactory0.createTDistribution(0.9999999999999984d);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution13 = distributionFactory0.createExponentialDistribution(0.9999995d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(gammaDistribution6);
        org.junit.Assert.assertNotNull(cauchyDistribution9);
        org.junit.Assert.assertNotNull(tDistribution11);
        org.junit.Assert.assertNotNull(exponentialDistribution13);
    }

    @Test
    public void test847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test847");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution7 = distributionFactory0.createNormalDistribution(12706.0d, 0.8538434429284575d);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution10 = distributionFactory0.createGammaDistribution(34.99999999999999d, (double) 'a');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution13 = distributionFactory0.createNormalDistribution(0.0d, (double) 100L);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution16 = distributionFactory0.createNormalDistribution((double) 1, 0.22127614024118358d);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution18 = distributionFactory0.createPoissonDistribution(0.433786033254294d);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution21 = distributionFactory0.createGammaDistribution(1.7453801681382977d, 0.9999995d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(normalDistribution7);
        org.junit.Assert.assertNotNull(gammaDistribution10);
        org.junit.Assert.assertNotNull(normalDistribution13);
        org.junit.Assert.assertNotNull(normalDistribution16);
        org.junit.Assert.assertNotNull(poissonDistribution18);
        org.junit.Assert.assertNotNull(gammaDistribution21);
    }

    @Test
    public void test848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test848");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 0.0d, (int) (short) 0, 0);
        double double10 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, (double) 100L);
        double double11 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        double double12 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 35.0d + "'", double4 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 35.0d + "'", double12 == 35.0d);
    }

    @Test
    public void test849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test849");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray28 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double29 = org.apache.commons.math.stat.StatUtils.product(doubleArray28);
        double[] doubleArray34 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        double double37 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray28, doubleArray34, (double) 10.0f);
        double double38 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double41 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28, (int) (short) 1, (int) (short) 0);
        double double42 = tTestImpl22.t((double) 1, doubleArray28);
        org.apache.commons.math.distribution.TDistribution tDistribution43 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl44 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution43);
        double[] doubleArray50 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double51 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray50);
        double double52 = tTestImpl44.t((double) 1.0f, doubleArray50);
        double[] doubleArray57 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double58 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray57);
        double double59 = org.apache.commons.math.stat.StatUtils.max(doubleArray57);
        double double60 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray57);
        double double61 = tTestImpl22.pairedT(doubleArray50, doubleArray57);
        double double62 = org.apache.commons.math.stat.StatUtils.min(doubleArray50);
        double double63 = tTestImpl0.tTest(0.0d, doubleArray50);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary65 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double66 = tTestImpl0.tTest(1.5919401533569089d, statisticalSummary65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-1820.0d) + "'", double29 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 5214.25d + "'", double37 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.5919401533569089d + "'", double42 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.539663200366486d + "'", double52 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 100.0d + "'", double59 == 100.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 12706.0d + "'", double60 == 12706.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + (-1.0d) + "'", double62 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.21195550612870484d + "'", double63 == 0.21195550612870484d);
    }

    @Test
    public void test850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test850");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution1 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution3 = distributionFactory0.createTDistribution(0.8538434429284575d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl4 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution3);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl6 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution7 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl8 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution7);
        double[] doubleArray13 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double14 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray13);
        double[] doubleArray19 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double20 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray19);
        double double21 = org.apache.commons.math.stat.StatUtils.max(doubleArray19);
        double double22 = tTestImpl8.pairedT(doubleArray13, doubleArray19);
        double double25 = org.apache.commons.math.stat.StatUtils.variance(doubleArray13, 1, (int) (short) 0);
        org.apache.commons.math.distribution.TDistribution tDistribution26 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl27 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution26);
        double[] doubleArray32 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double33 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray32);
        double[] doubleArray38 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double39 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray38);
        double double40 = org.apache.commons.math.stat.StatUtils.max(doubleArray38);
        double double41 = tTestImpl27.pairedT(doubleArray32, doubleArray38);
        double double44 = org.apache.commons.math.stat.StatUtils.variance(doubleArray32, 1, (int) (short) 0);
        double double45 = tTestImpl6.tTest(doubleArray13, doubleArray32);
        double double46 = tTestImpl4.tTest(10.858998997563567d, doubleArray32);
        double[] doubleArray53 = new double[] { '4', (byte) 10, (byte) 10, (byte) 10, (short) 1, 1.0d };
        double double56 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray53, 0, (int) (short) 1);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl57 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray62 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double63 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray62);
        double double64 = org.apache.commons.math.stat.StatUtils.max(doubleArray62);
        double[] doubleArray69 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double70 = org.apache.commons.math.stat.StatUtils.product(doubleArray69);
        double[] doubleArray75 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double76 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray75);
        double double78 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray69, doubleArray75, (double) 10.0f);
        double double79 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray69);
        double double80 = tTestImpl57.t(doubleArray62, doubleArray69);
        double[] doubleArray86 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double87 = org.apache.commons.math.stat.StatUtils.product(doubleArray86);
        double[] doubleArray92 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double93 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray92);
        double double95 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray86, doubleArray92, (double) 10.0f);
        double double96 = tTestImpl57.tTest(5214.25d, doubleArray92);
        double double97 = tTestImpl4.t(doubleArray53, doubleArray92);
        double double98 = org.apache.commons.math.stat.StatUtils.sum(doubleArray53);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(normalDistribution1);
        org.junit.Assert.assertNotNull(tDistribution3);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.34087447893070477d + "'", double46 == 0.34087447893070477d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[52.0, 10.0, 10.0, 10.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 52.00000000000001d + "'", double56 == 52.00000000000001d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 100.0d + "'", double64 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + (-1820.0d) + "'", double70 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 5214.25d + "'", double78 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.5943989439169762d + "'", double80 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + (-1820.0d) + "'", double87 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double93));
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 5214.25d + "'", double95 == 5214.25d);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 2.2065780869162666E-7d + "'", double96 == 2.2065780869162666E-7d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + (-0.9497969943424859d) + "'", double97 == (-0.9497969943424859d));
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 84.0d + "'", double98 == 84.0d);
    }

    @Test
    public void test851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test851");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        double[] doubleArray6 = new double[] { (-1.0f) };
        double double7 = org.apache.commons.math.stat.StatUtils.min(doubleArray6);
        double double8 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray1, doubleArray6);
        double double10 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, 36.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double14 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 1.623057869377272d, (int) (short) 10, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 35.0d + "'", double4 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1.0d) + "'", double7 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 36.0d + "'", double8 == 36.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
    }

    @Test
    public void test852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test852");
        double[] doubleArray4 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray4);
        double double6 = org.apache.commons.math.stat.StatUtils.max(doubleArray4);
        double double7 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray4);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double25 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12, (int) (short) 1, (int) (short) 0);
        double double26 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray4, doubleArray12);
        double double29 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray4, (int) (short) 0, (int) (byte) 1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 12706.0d + "'", double7 == 12706.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 16.25d + "'", double26 == 16.25d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
    }

    @Test
    public void test853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test853");
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray3 = mathException2.getSuppressed();
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray3);
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Object[]) throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray3);
    }

    @Test
    public void test854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test854");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double double10 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        // The following exception was thrown during execution in test generation
        try {
            double double13 = org.apache.commons.math.stat.StatUtils.mean(doubleArray7, (int) (byte) 100, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test855");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution21 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double30 = tTestImpl22.t((double) 1.0f, doubleArray28);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double37 = org.apache.commons.math.stat.StatUtils.max(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray35);
        double double39 = tTestImpl0.pairedT(doubleArray28, doubleArray35);
        org.apache.commons.math.distribution.TDistribution tDistribution41 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl42 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution41);
        double[] doubleArray47 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double48 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47);
        double[] doubleArray53 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double54 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray53);
        double double55 = org.apache.commons.math.stat.StatUtils.max(doubleArray53);
        double double56 = tTestImpl42.pairedT(doubleArray47, doubleArray53);
        double double57 = org.apache.commons.math.stat.StatUtils.max(doubleArray53);
        double double58 = tTestImpl0.tTest(0.9999999999999984d, doubleArray53);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary59 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary60 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean62 = tTestImpl0.tTest(statisticalSummary59, statisticalSummary60, 0.9999999999999984d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.9999999999999984");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.539663200366486d + "'", double30 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 12706.0d + "'", double38 == 12706.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 100.0d + "'", double55 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 100.0d + "'", double57 == 100.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.22127614024118358d + "'", double58 == 0.22127614024118358d);
    }

    @Test
    public void test856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test856");
        java.lang.Object[] objArray2 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException("", objArray2);
        java.lang.Object[] objArray6 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("", objArray6);
        mathException3.addSuppressed((java.lang.Throwable) mathException7);
        java.lang.Object[] objArray11 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("", objArray11);
        java.lang.Object[] objArray15 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("", objArray15);
        mathException12.addSuppressed((java.lang.Throwable) mathException16);
        mathException3.addSuppressed((java.lang.Throwable) mathException16);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException16);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[1225.0]");
    }

    @Test
    public void test857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test857");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.0d, (double) 10L);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution7 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution10 = distributionFactory0.createGammaDistribution(100.0d, 34.99999999999999d);
        org.apache.commons.math.distribution.FDistribution fDistribution13 = distributionFactory0.createFDistribution(1.0d, (double) 100L);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution16 = distributionFactory0.createNormalDistribution(10.858998997563567d, (double) 100);
        double double18 = normalDistribution16.cumulativeProbability((double) (-1L));
        // The following exception was thrown during execution in test generation
        try {
            double double20 = normalDistribution16.inverseCumulativeProbability(34.99999999999999d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: p must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution7);
        org.junit.Assert.assertNotNull(gammaDistribution10);
        org.junit.Assert.assertNotNull(fDistribution13);
        org.junit.Assert.assertNotNull(normalDistribution16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.45280009811358096d + "'", double18 == 0.45280009811358096d);
    }

    @Test
    public void test858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test858");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution7 = distributionFactory0.createNormalDistribution(12706.0d, 0.8538434429284575d);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution9 = distributionFactory0.createExponentialDistribution(10.858998997563567d);
        org.apache.commons.math.distribution.HypergeometricDistribution hypergeometricDistribution13 = distributionFactory0.createHypergeometricDistribution((int) (short) 10, 1, (int) (short) 1);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(normalDistribution7);
        org.junit.Assert.assertNotNull(exponentialDistribution9);
        org.junit.Assert.assertNotNull(hypergeometricDistribution13);
    }

    @Test
    public void test859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test859");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution6 = distributionFactory0.createWeibullDistribution((double) (byte) 10, (double) 1);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution8 = distributionFactory0.createExponentialDistribution((double) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.PascalDistribution pascalDistribution11 = distributionFactory0.createPascalDistribution((int) (byte) 100, 366.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: probability of success must be between 0.0 and 1.0, inclusive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(weibullDistribution6);
        org.junit.Assert.assertNotNull(exponentialDistribution8);
    }

    @Test
    public void test860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test860");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution2 = distributionFactory0.createChiSquareDistribution((double) 100);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution3 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution6 = distributionFactory0.createGammaDistribution(21.75d, 1.053060673855556d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.FDistribution fDistribution9 = distributionFactory0.createFDistribution((-6.003340578321836d), 0.45280009811358096d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(chiSquaredDistribution2);
        org.junit.Assert.assertNotNull(normalDistribution3);
        org.junit.Assert.assertNotNull(gammaDistribution6);
    }

    @Test
    public void test861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test861");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution7 = distributionFactory0.createNormalDistribution(12706.0d, 0.8538434429284575d);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution9 = distributionFactory0.createExponentialDistribution(10.858998997563567d);
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution11 = distributionFactory0.createChiSquareDistribution(100.0d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(normalDistribution7);
        org.junit.Assert.assertNotNull(exponentialDistribution9);
        org.junit.Assert.assertNotNull(chiSquaredDistribution11);
    }

    @Test
    public void test862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test862");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution7 = distributionFactory0.createNormalDistribution(12706.0d, 0.8538434429284575d);
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution10 = distributionFactory0.createGammaDistribution(34.99999999999999d, (double) 'a');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution13 = distributionFactory0.createNormalDistribution(0.0d, (double) 100L);
        double double15 = normalDistribution13.cumulativeProbability(65.0d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(normalDistribution7);
        org.junit.Assert.assertNotNull(gammaDistribution10);
        org.junit.Assert.assertNotNull(normalDistribution13);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.7421538891941353d + "'", double15 == 0.7421538891941353d);
    }

    @Test
    public void test863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test863");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        tDistribution34.setDegreesOfFreedom((double) 1L);
        double double39 = tDistribution34.getDegreesOfFreedom();
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl40 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution34);
        org.apache.commons.math.distribution.TDistribution tDistribution41 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl42 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution41);
        double[] doubleArray48 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double49 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray48);
        double double50 = tTestImpl42.t((double) 1.0f, doubleArray48);
        double[] doubleArray55 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double56 = org.apache.commons.math.stat.StatUtils.product(doubleArray55);
        double[] doubleArray61 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double62 = org.apache.commons.math.stat.StatUtils.product(doubleArray61);
        double[] doubleArray67 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double68 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray67);
        double double70 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray61, doubleArray67, (double) 10.0f);
        double double71 = tTestImpl42.pairedT(doubleArray55, doubleArray61);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory72 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution73 = distributionFactory72.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution75 = distributionFactory72.createTDistribution(0.8538434429284575d);
        double double76 = tDistribution75.getDegreesOfFreedom();
        tTestImpl42.setDistribution(tDistribution75);
        tDistribution75.setDegreesOfFreedom((double) 1L);
        double double80 = tDistribution75.getDegreesOfFreedom();
        tTestImpl40.setDistribution(tDistribution75);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary82 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary83 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean85 = tTestImpl40.tTest(statisticalSummary82, statisticalSummary83, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1.539663200366486d + "'", double50 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + (-1820.0d) + "'", double56 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + (-1820.0d) + "'", double62 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 5214.25d + "'", double70 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertNotNull(distributionFactory72);
        org.junit.Assert.assertNotNull(normalDistribution73);
        org.junit.Assert.assertNotNull(tDistribution75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.8538434429284575d + "'", double76 == 0.8538434429284575d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 1.0d + "'", double80 == 1.0d);
    }

    @Test
    public void test864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test864");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution22 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl23 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double[] doubleArray34 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        double double36 = org.apache.commons.math.stat.StatUtils.max(doubleArray34);
        double double37 = tTestImpl23.pairedT(doubleArray28, doubleArray34);
        double double38 = tTestImpl0.t(100.0d, doubleArray34);
        double[] doubleArray43 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double44 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray43);
        double double45 = org.apache.commons.math.stat.StatUtils.max(doubleArray43);
        double double46 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray43);
        double[] doubleArray51 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double52 = org.apache.commons.math.stat.StatUtils.product(doubleArray51);
        double double54 = org.apache.commons.math.stat.StatUtils.variance(doubleArray51, (double) 10.0f);
        double double55 = tTestImpl0.tTest(doubleArray43, doubleArray51);
        org.apache.commons.math.distribution.TDistribution tDistribution56 = null;
        tTestImpl0.setDistribution(tDistribution56);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-2.579976173587085d) + "'", double38 == (-2.579976173587085d));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 100.0d + "'", double45 == 100.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 12706.0d + "'", double46 == 12706.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-1820.0d) + "'", double52 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 679.5833333333334d + "'", double54 == 679.5833333333334d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.5801210456783388d + "'", double55 == 0.5801210456783388d);
    }

    @Test
    public void test865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test865");
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray5 = mathException4.getSuppressed();
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray5);
        java.lang.Object[] objArray9 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("", objArray9);
        mathException6.addSuppressed((java.lang.Throwable) mathException10);
        java.lang.Throwable[] throwableArray12 = mathException10.getSuppressed();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray15 = mathException14.getSuppressed();
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray15);
        java.lang.Object[] objArray19 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("", objArray19);
        mathException16.addSuppressed((java.lang.Throwable) mathException20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException16);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray12, (java.lang.Throwable) mathException16);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray27 = mathException26.getSuppressed();
        java.lang.Object[] objArray30 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("", objArray30);
        java.lang.Object[] objArray34 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("", objArray34);
        mathException31.addSuppressed((java.lang.Throwable) mathException35);
        java.lang.Object[] objArray39 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("", objArray39);
        java.lang.Object[] objArray43 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("", objArray43);
        mathException40.addSuppressed((java.lang.Throwable) mathException44);
        mathException31.addSuppressed((java.lang.Throwable) mathException44);
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) throwableArray27, (java.lang.Throwable) mathException31);
        java.lang.Object[] objArray48 = mathException31.getArguments();
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray48);
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ");
        mathException49.addSuppressed((java.lang.Throwable) mathException51);
        java.lang.Throwable[] throwableArray53 = mathException49.getSuppressed();
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", (java.lang.Object[]) throwableArray12, (java.lang.Throwable) mathException49);
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray57 = mathException56.getSuppressed();
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("", (java.lang.Object[]) throwableArray57);
        java.lang.Object[] objArray61 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("", objArray61);
        mathException58.addSuppressed((java.lang.Throwable) mathException62);
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Object[]) throwableArray12, (java.lang.Throwable) mathException58);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[1225.0]");
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[1225.0]");
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[1225.0]");
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[1225.0]");
    }

    @Test
    public void test866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test866");
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException();
        java.lang.Object[] objArray4 = mathException3.getArguments();
        org.apache.commons.math.MathException mathException5 = new org.apache.commons.math.MathException("hi!", objArray4);
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray7 = mathException6.getSuppressed();
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException6);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException();
        java.lang.Object[] objArray10 = mathException9.getArguments();
        mathException6.addSuppressed((java.lang.Throwable) mathException9);
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", objArray4, (java.lang.Throwable) mathException6);
        java.lang.Throwable[] throwableArray13 = mathException6.getSuppressed();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Object[]) throwableArray13);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(throwableArray13);
    }

    @Test
    public void test867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test867");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 0.0d, (int) (short) 0, 0);
        double double10 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray1, (double) 100L);
        double double11 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        double double12 = org.apache.commons.math.stat.StatUtils.mean(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 35.0d + "'", double4 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 35.0d + "'", double12 == 35.0d);
    }

    @Test
    public void test868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test868");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory21 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution22 = distributionFactory21.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution24 = distributionFactory21.createTDistribution(0.8538434429284575d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl25 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution24);
        tTestImpl0.setDistribution(tDistribution24);
        double[] doubleArray34 = new double[] { '4', (byte) 10, (byte) 10, (byte) 10, (short) 1, 1.0d };
        double double37 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray34, 0, (int) (short) 1);
        double double38 = org.apache.commons.math.stat.StatUtils.sum(doubleArray34);
        double double39 = tTestImpl0.t(0.0d, doubleArray34);
        double double41 = org.apache.commons.math.stat.StatUtils.variance(doubleArray34, 84.0d);
        double double43 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray34, 1.7925163190605438d);
        double double44 = org.apache.commons.math.stat.StatUtils.min(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(distributionFactory21);
        org.junit.Assert.assertNotNull(normalDistribution22);
        org.junit.Assert.assertNotNull(tDistribution24);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[52.0, 10.0, 10.0, 10.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 52.00000000000001d + "'", double37 == 52.00000000000001d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 84.0d + "'", double38 == 84.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.7925163190605438d + "'", double39 == 1.7925163190605438d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 366.0d + "'", double41 == 366.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0d + "'", double44 == 1.0d);
    }

    @Test
    public void test869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test869");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: ");
    }

    @Test
    public void test870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test870");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.0d, (double) 10L);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution7 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution10 = distributionFactory0.createGammaDistribution(100.0d, 34.99999999999999d);
        org.apache.commons.math.distribution.FDistribution fDistribution13 = distributionFactory0.createFDistribution(1.0d, (double) 100L);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution16 = distributionFactory0.createNormalDistribution(10.858998997563567d, (double) 100);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution18 = distributionFactory0.createExponentialDistribution((double) 'a');
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution20 = distributionFactory0.createChiSquareDistribution(3931.0d);
        double double22 = chiSquaredDistribution20.cumulativeProbability(0.03982783727702899d);
        double double24 = chiSquaredDistribution20.cumulativeProbability(0.6674705631412963d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution7);
        org.junit.Assert.assertNotNull(gammaDistribution10);
        org.junit.Assert.assertNotNull(fDistribution13);
        org.junit.Assert.assertNotNull(normalDistribution16);
        org.junit.Assert.assertNotNull(exponentialDistribution18);
        org.junit.Assert.assertNotNull(chiSquaredDistribution20);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
    }

    @Test
    public void test871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test871");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        double[] doubleArray42 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double43 = org.apache.commons.math.stat.StatUtils.product(doubleArray42);
        double[] doubleArray48 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double49 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray48);
        double double50 = org.apache.commons.math.stat.StatUtils.max(doubleArray48);
        double double51 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray48);
        double double52 = org.apache.commons.math.stat.StatUtils.variance(doubleArray48);
        double double53 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray42, doubleArray48);
        double double54 = org.apache.commons.math.stat.StatUtils.product(doubleArray42);
        double double55 = tTestImpl1.t(21.75d, doubleArray42);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary56 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary57 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean59 = tTestImpl1.tTest(statisticalSummary56, statisticalSummary57, 0.6674705631412963d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 0.6674705631412963");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + (-1820.0d) + "'", double43 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 100.0d + "'", double50 == 100.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 12706.0d + "'", double51 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 2310.0d + "'", double52 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + (-16.25d) + "'", double53 == (-16.25d));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + (-1820.0d) + "'", double54 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
    }

    @Test
    public void test872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test872");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary37 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary38 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double39 = tTestImpl1.t(statisticalSummary37, statisticalSummary38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
    }

    @Test
    public void test873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test873");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution1 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution3 = distributionFactory0.createChiSquareDistribution((double) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.FDistribution fDistribution6 = distributionFactory0.createFDistribution(0.0d, (double) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: degrees of freedom must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(normalDistribution1);
        org.junit.Assert.assertNotNull(chiSquaredDistribution3);
    }

    @Test
    public void test874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test874");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray6 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.max(doubleArray12);
        double double15 = tTestImpl1.pairedT(doubleArray6, doubleArray12);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary17 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double18 = tTestImpl1.tTest((double) (-1), statisticalSummary17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test875");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.TDistribution tDistribution2 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl3 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution2);
        double[] doubleArray9 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double10 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray9);
        double double11 = tTestImpl3.t((double) 1.0f, doubleArray9);
        double[] doubleArray16 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double17 = org.apache.commons.math.stat.StatUtils.product(doubleArray16);
        double[] doubleArray22 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double23 = org.apache.commons.math.stat.StatUtils.product(doubleArray22);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double31 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray22, doubleArray28, (double) 10.0f);
        double double32 = tTestImpl3.pairedT(doubleArray16, doubleArray22);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory33 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution34 = distributionFactory33.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution36 = distributionFactory33.createTDistribution(0.8538434429284575d);
        double double37 = tDistribution36.getDegreesOfFreedom();
        tTestImpl3.setDistribution(tDistribution36);
        tDistribution36.setDegreesOfFreedom((double) 1L);
        double double43 = tDistribution36.cumulativeProbability((-1820.0d), 0.5943989439169762d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl44 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution36);
        double double46 = tDistribution36.cumulativeProbability(0.8538434429284575d);
        tTestImpl1.setDistribution(tDistribution36);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary48 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary49 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double50 = tTestImpl1.homoscedasticT(statisticalSummary48, statisticalSummary49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.539663200366486d + "'", double11 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1820.0d) + "'", double17 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-1820.0d) + "'", double23 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 5214.25d + "'", double31 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(distributionFactory33);
        org.junit.Assert.assertNotNull(normalDistribution34);
        org.junit.Assert.assertNotNull(tDistribution36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.8538434429284575d + "'", double37 == 0.8538434429284575d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.670531799205166d + "'", double43 == 0.670531799205166d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.7249563298587571d + "'", double46 == 0.7249563298587571d);
    }

    @Test
    public void test876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test876");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        double[] doubleArray29 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double30 = org.apache.commons.math.stat.StatUtils.product(doubleArray29);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray29, doubleArray35, (double) 10.0f);
        double double39 = tTestImpl0.tTest(5214.25d, doubleArray35);
        org.apache.commons.math.distribution.TDistribution tDistribution40 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl41 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution40);
        double[] doubleArray47 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double48 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47);
        double double49 = tTestImpl41.t((double) 1.0f, doubleArray47);
        double[] doubleArray54 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double55 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray54);
        double double56 = org.apache.commons.math.stat.StatUtils.max(doubleArray54);
        double double57 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray54);
        double double58 = org.apache.commons.math.stat.StatUtils.variance(doubleArray54);
        double double59 = org.apache.commons.math.stat.StatUtils.variance(doubleArray54);
        double double60 = tTestImpl0.homoscedasticT(doubleArray47, doubleArray54);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl61 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray67 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double68 = org.apache.commons.math.stat.StatUtils.product(doubleArray67);
        double[] doubleArray73 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double74 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray73);
        double double76 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray67, doubleArray73, (double) 10.0f);
        double double77 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray67);
        double double80 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray67, (int) (short) 1, (int) (short) 0);
        double double81 = tTestImpl61.t((double) 1, doubleArray67);
        double double82 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray67);
        double double83 = org.apache.commons.math.stat.StatUtils.product(doubleArray67);
        double[] doubleArray88 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double89 = org.apache.commons.math.stat.StatUtils.product(doubleArray88);
        double double91 = org.apache.commons.math.stat.StatUtils.variance(doubleArray88, (double) 10.0f);
        double double92 = tTestImpl0.tTest(doubleArray67, doubleArray88);
        double double94 = org.apache.commons.math.stat.StatUtils.variance(doubleArray88, (-16.25d));
        // The following exception was thrown during execution in test generation
        try {
            double double97 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray88, 1, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1820.0d) + "'", double30 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 5214.25d + "'", double38 == 5214.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2.2065780869162666E-7d + "'", double39 == 2.2065780869162666E-7d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.539663200366486d + "'", double49 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 100.0d + "'", double56 == 100.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 12706.0d + "'", double57 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 2310.0d + "'", double58 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 2310.0d + "'", double59 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + (-1820.0d) + "'", double68 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 5214.25d + "'", double76 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 1.5919401533569089d + "'", double81 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 3931.0d + "'", double82 == 3931.0d);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + (-1820.0d) + "'", double83 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + (-1820.0d) + "'", double89 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 679.5833333333334d + "'", double91 == 679.5833333333334d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 1.0d + "'", double92 == 1.0d);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 679.5833333333334d + "'", double94 == 679.5833333333334d);
    }

    @Test
    public void test877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test877");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary10 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double12 = tTestImpl1.homoscedasticTTest(statisticalSummary10, statisticalSummary11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
    }

    @Test
    public void test878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test878");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.ChiSquaredDistribution chiSquaredDistribution2 = distributionFactory0.createChiSquareDistribution((double) 100);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution3 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution6 = distributionFactory0.createGammaDistribution(21.75d, 1.053060673855556d);
        org.apache.commons.math.distribution.WeibullDistribution weibullDistribution9 = distributionFactory0.createWeibullDistribution((double) 10L, (double) (short) 10);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(chiSquaredDistribution2);
        org.junit.Assert.assertNotNull(normalDistribution3);
        org.junit.Assert.assertNotNull(gammaDistribution6);
        org.junit.Assert.assertNotNull(weibullDistribution9);
    }

    @Test
    public void test879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test879");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        org.apache.commons.math.distribution.TDistribution tDistribution2 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl3 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution2);
        double[] doubleArray9 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double10 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray9);
        double double11 = tTestImpl3.t((double) 1.0f, doubleArray9);
        double[] doubleArray16 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double17 = org.apache.commons.math.stat.StatUtils.product(doubleArray16);
        double[] doubleArray22 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double23 = org.apache.commons.math.stat.StatUtils.product(doubleArray22);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double31 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray22, doubleArray28, (double) 10.0f);
        double double32 = tTestImpl3.pairedT(doubleArray16, doubleArray22);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory33 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution34 = distributionFactory33.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution36 = distributionFactory33.createTDistribution(0.8538434429284575d);
        double double37 = tDistribution36.getDegreesOfFreedom();
        tTestImpl3.setDistribution(tDistribution36);
        tDistribution36.setDegreesOfFreedom((double) 1L);
        double double43 = tDistribution36.cumulativeProbability((-1820.0d), 0.5943989439169762d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl44 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution36);
        double double46 = tDistribution36.cumulativeProbability(0.8538434429284575d);
        tTestImpl1.setDistribution(tDistribution36);
        double[] doubleArray49 = new double[] { '#' };
        double double50 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray49);
        double double51 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray49);
        double double52 = org.apache.commons.math.stat.StatUtils.product(doubleArray49);
        double double53 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray49);
        double double55 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray49, (double) 100.0f);
        double double56 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray49);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl57 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray63 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double64 = org.apache.commons.math.stat.StatUtils.product(doubleArray63);
        double[] doubleArray69 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double70 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray69);
        double double72 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray63, doubleArray69, (double) 10.0f);
        double double73 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray63);
        double double76 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray63, (int) (short) 1, (int) (short) 0);
        double double77 = tTestImpl57.t((double) 1, doubleArray63);
        org.apache.commons.math.distribution.TDistribution tDistribution79 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl80 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution79);
        double[] doubleArray85 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double86 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray85);
        double[] doubleArray91 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double92 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray91);
        double double93 = org.apache.commons.math.stat.StatUtils.max(doubleArray91);
        double double94 = tTestImpl80.pairedT(doubleArray85, doubleArray91);
        double double95 = tTestImpl57.t(100.0d, doubleArray91);
        double double96 = org.apache.commons.math.stat.StatUtils.max(doubleArray91);
        // The following exception was thrown during execution in test generation
        try {
            double double97 = tTestImpl1.t(doubleArray49, doubleArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.539663200366486d + "'", double11 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1820.0d) + "'", double17 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-1820.0d) + "'", double23 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 5214.25d + "'", double31 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(distributionFactory33);
        org.junit.Assert.assertNotNull(normalDistribution34);
        org.junit.Assert.assertNotNull(tDistribution36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.8538434429284575d + "'", double37 == 0.8538434429284575d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.670531799205166d + "'", double43 == 0.670531799205166d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.7249563298587571d + "'", double46 == 0.7249563298587571d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[35.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1225.0d + "'", double50 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1225.0d + "'", double51 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 35.0d + "'", double52 == 35.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 3.5553480614894135d + "'", double53 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 35.0d + "'", double55 == 35.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 3.5553480614894135d + "'", double56 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + (-1820.0d) + "'", double64 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 5214.25d + "'", double72 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 1.5919401533569089d + "'", double77 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double92));
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 100.0d + "'", double93 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double94));
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + (-2.579976173587085d) + "'", double95 == (-2.579976173587085d));
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 100.0d + "'", double96 == 100.0d);
    }

    @Test
    public void test880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test880");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution5 = distributionFactory0.createPoissonDistribution(2.2065780869162666E-7d);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution7 = distributionFactory0.createExponentialDistribution(0.03982783727702899d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(poissonDistribution5);
        org.junit.Assert.assertNotNull(exponentialDistribution7);
    }

    @Test
    public void test881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test881");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.0d, (double) 10L);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution7 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution10 = distributionFactory0.createGammaDistribution(100.0d, 34.99999999999999d);
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution12 = distributionFactory0.createPoissonDistribution(65.0d);
        org.apache.commons.math.distribution.HypergeometricDistribution hypergeometricDistribution16 = distributionFactory0.createHypergeometricDistribution((int) (byte) 100, (int) (byte) 1, (int) (byte) 1);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution7);
        org.junit.Assert.assertNotNull(gammaDistribution10);
        org.junit.Assert.assertNotNull(poissonDistribution12);
        org.junit.Assert.assertNotNull(hypergeometricDistribution16);
    }

    @Test
    public void test882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test882");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution1 = null;
        tTestImpl0.setDistribution(tDistribution1);
        double[] doubleArray8 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double9 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray8);
        double double10 = org.apache.commons.math.stat.StatUtils.max(doubleArray8);
        double double11 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray8);
        double[] doubleArray16 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double17 = org.apache.commons.math.stat.StatUtils.product(doubleArray16);
        double[] doubleArray22 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double23 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray22);
        double double25 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray16, doubleArray22, (double) 10.0f);
        double double26 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray16);
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray16, (int) (short) 1, (int) (short) 0);
        double double30 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray8, doubleArray16);
        double double31 = tTestImpl0.t((double) 100, doubleArray16);
        double[] doubleArray37 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double38 = org.apache.commons.math.stat.StatUtils.product(doubleArray37);
        double[] doubleArray43 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double44 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray43);
        double double46 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray37, doubleArray43, (double) 10.0f);
        // The following exception was thrown during execution in test generation
        try {
            double double47 = tTestImpl0.tTest(2310.0d, doubleArray37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 12706.0d + "'", double11 == 12706.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1820.0d) + "'", double17 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 5214.25d + "'", double25 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 16.25d + "'", double30 == 16.25d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-6.003340578321836d) + "'", double31 == (-6.003340578321836d));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-1820.0d) + "'", double38 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 5214.25d + "'", double46 == 5214.25d);
    }

    @Test
    public void test883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test883");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary11 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double12 = tTestImpl1.t(3006.0d, statisticalSummary11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
    }

    @Test
    public void test884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test884");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1, (int) (byte) 0, (int) (byte) 0);
        double double9 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double11 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 3.5553480614894135d);
        double double12 = org.apache.commons.math.stat.StatUtils.mean(doubleArray1);
        double double16 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, (double) (byte) 1, 0, 1);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 35.0d + "'", double4 == 35.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 35.0d + "'", double5 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 35.0d + "'", double12 == 35.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test885");
        double[] doubleArray4 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray4);
        double double6 = org.apache.commons.math.stat.StatUtils.max(doubleArray4);
        double double7 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray4);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double25 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12, (int) (short) 1, (int) (short) 0);
        double double26 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray4, doubleArray12);
        double double28 = org.apache.commons.math.stat.StatUtils.variance(doubleArray12, (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 12706.0d + "'", double7 == 12706.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 16.25d + "'", double26 == 16.25d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 679.5833333333334d + "'", double28 == 679.5833333333334d);
    }

    @Test
    public void test886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test886");
        double[] doubleArray4 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double5 = org.apache.commons.math.stat.StatUtils.product(doubleArray4);
        double[] doubleArray10 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double11 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray10);
        double double13 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray4, doubleArray10, (double) 10.0f);
        double double14 = org.apache.commons.math.stat.StatUtils.min(doubleArray10);
        java.lang.Class<?> wildcardClass15 = doubleArray10.getClass();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1820.0d) + "'", double5 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5214.25d + "'", double13 == 5214.25d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test887");
        double[] doubleArray4 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double5 = org.apache.commons.math.stat.StatUtils.product(doubleArray4);
        double[] doubleArray10 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double11 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray10);
        double double12 = org.apache.commons.math.stat.StatUtils.max(doubleArray10);
        double double13 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray10);
        double double14 = org.apache.commons.math.stat.StatUtils.variance(doubleArray10);
        double double15 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray4, doubleArray10);
        // The following exception was thrown during execution in test generation
        try {
            double double18 = org.apache.commons.math.stat.StatUtils.mean(doubleArray10, (int) '#', (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1820.0d) + "'", double5 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 12706.0d + "'", double13 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 2310.0d + "'", double14 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-16.25d) + "'", double15 == (-16.25d));
    }

    @Test
    public void test888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test888");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.product(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1, 0, (int) (short) 0);
        double double9 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 35.0d + "'", double4 == 35.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 3.5553480614894135d + "'", double5 == 3.5553480614894135d);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 3.5553480614894135d + "'", double9 == 3.5553480614894135d);
    }

    @Test
    public void test889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test889");
        org.apache.commons.math.MathException mathException3 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray4 = mathException3.getSuppressed();
        java.lang.Object[] objArray7 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("", objArray7);
        java.lang.Object[] objArray11 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("", objArray11);
        mathException8.addSuppressed((java.lang.Throwable) mathException12);
        java.lang.Object[] objArray16 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("", objArray16);
        java.lang.Object[] objArray20 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("", objArray20);
        mathException17.addSuppressed((java.lang.Throwable) mathException21);
        mathException8.addSuppressed((java.lang.Throwable) mathException21);
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) throwableArray4, (java.lang.Throwable) mathException8);
        java.lang.Object[] objArray25 = mathException8.getArguments();
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray25);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray31 = mathException30.getSuppressed();
        java.lang.Throwable throwable32 = null;
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) throwableArray31, throwable32);
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("", throwable32);
        org.apache.commons.math.MathException mathException35 = new org.apache.commons.math.MathException("", (java.lang.Throwable) mathException34);
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", objArray25, (java.lang.Throwable) mathException35);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[1225.0]");
        org.junit.Assert.assertNotNull(throwableArray31);
    }

    @Test
    public void test890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test890");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.0d, (double) 10L);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution7 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution10 = distributionFactory0.createGammaDistribution(100.0d, 34.99999999999999d);
        org.apache.commons.math.distribution.FDistribution fDistribution13 = distributionFactory0.createFDistribution(1.0d, (double) 100L);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution15 = distributionFactory0.createExponentialDistribution(34.99999999999999d);
        org.apache.commons.math.distribution.PascalDistribution pascalDistribution18 = distributionFactory0.createPascalDistribution((int) (short) 0, 0.9810883886884435d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution7);
        org.junit.Assert.assertNotNull(gammaDistribution10);
        org.junit.Assert.assertNotNull(fDistribution13);
        org.junit.Assert.assertNotNull(exponentialDistribution15);
        org.junit.Assert.assertNotNull(pascalDistribution18);
    }

    @Test
    public void test891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test891");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution21 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double30 = tTestImpl22.t((double) 1.0f, doubleArray28);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double37 = org.apache.commons.math.stat.StatUtils.max(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray35);
        double double39 = tTestImpl0.pairedT(doubleArray28, doubleArray35);
        double double40 = org.apache.commons.math.stat.StatUtils.min(doubleArray28);
        // The following exception was thrown during execution in test generation
        try {
            double double43 = org.apache.commons.math.stat.StatUtils.max(doubleArray28, (int) '#', (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.539663200366486d + "'", double30 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 12706.0d + "'", double38 == 12706.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + (-1.0d) + "'", double40 == (-1.0d));
    }

    @Test
    public void test892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test892");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        double[] doubleArray42 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double43 = org.apache.commons.math.stat.StatUtils.product(doubleArray42);
        double[] doubleArray48 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double49 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray48);
        double double50 = org.apache.commons.math.stat.StatUtils.max(doubleArray48);
        double double51 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray48);
        double double52 = org.apache.commons.math.stat.StatUtils.variance(doubleArray48);
        double double53 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray42, doubleArray48);
        double double54 = org.apache.commons.math.stat.StatUtils.product(doubleArray42);
        double double55 = tTestImpl1.t(21.75d, doubleArray42);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl57 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray63 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double64 = org.apache.commons.math.stat.StatUtils.product(doubleArray63);
        double[] doubleArray69 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double70 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray69);
        double double72 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray63, doubleArray69, (double) 10.0f);
        double double73 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray63);
        double double76 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray63, (int) (short) 1, (int) (short) 0);
        double double77 = tTestImpl57.t((double) 1, doubleArray63);
        double[] doubleArray82 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double83 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray82);
        double double84 = org.apache.commons.math.stat.StatUtils.max(doubleArray82);
        double double85 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray82);
        double double86 = org.apache.commons.math.stat.StatUtils.variance(doubleArray82);
        org.apache.commons.math.distribution.TDistribution tDistribution87 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl88 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution87);
        double[] doubleArray94 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double95 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray94);
        double double96 = tTestImpl88.t((double) 1.0f, doubleArray94);
        double double97 = tTestImpl57.t(doubleArray82, doubleArray94);
        double double98 = tTestImpl1.t((double) (short) 0, doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + (-1820.0d) + "'", double43 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 100.0d + "'", double50 == 100.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 12706.0d + "'", double51 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 2310.0d + "'", double52 == 2310.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + (-16.25d) + "'", double53 == (-16.25d));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + (-1820.0d) + "'", double54 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + (-1820.0d) + "'", double64 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 5214.25d + "'", double72 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 1.5919401533569089d + "'", double77 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 100.0d + "'", double84 == 100.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 12706.0d + "'", double85 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 2310.0d + "'", double86 == 2310.0d);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double95));
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 1.539663200366486d + "'", double96 == 1.539663200366486d);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 0.0d + "'", double97 == 0.0d);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 1.5812757192953102d + "'", double98 == 1.5812757192953102d);
    }

    @Test
    public void test893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test893");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution6 = distributionFactory0.createCauchyDistribution(1225.0d, 1.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.PoissonDistribution poissonDistribution8 = distributionFactory0.createPoissonDistribution(0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The Poisson mean must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(cauchyDistribution6);
    }

    @Test
    public void test894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test894");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary24 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary25 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double26 = tTestImpl0.homoscedasticTTest(statisticalSummary24, statisticalSummary25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
    }

    @Test
    public void test895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test895");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray6 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.max(doubleArray12);
        double double15 = tTestImpl1.pairedT(doubleArray6, doubleArray12);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl17 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray23 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double24 = org.apache.commons.math.stat.StatUtils.product(doubleArray23);
        double[] doubleArray29 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double30 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray29);
        double double32 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray23, doubleArray29, (double) 10.0f);
        double double33 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray23);
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray23, (int) (short) 1, (int) (short) 0);
        double double37 = tTestImpl17.t((double) 1, doubleArray23);
        org.apache.commons.math.distribution.TDistribution tDistribution39 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl40 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution39);
        double[] doubleArray45 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double46 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray45);
        double[] doubleArray51 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double52 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray51);
        double double53 = org.apache.commons.math.stat.StatUtils.max(doubleArray51);
        double double54 = tTestImpl40.pairedT(doubleArray45, doubleArray51);
        double double55 = tTestImpl17.t(100.0d, doubleArray51);
        double[] doubleArray60 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double61 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray60);
        double double62 = org.apache.commons.math.stat.StatUtils.max(doubleArray60);
        double double63 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray60);
        double[] doubleArray68 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double69 = org.apache.commons.math.stat.StatUtils.product(doubleArray68);
        double double71 = org.apache.commons.math.stat.StatUtils.variance(doubleArray68, (double) 10.0f);
        double double72 = tTestImpl17.tTest(doubleArray60, doubleArray68);
        double double73 = tTestImpl1.t(0.670531799205166d, doubleArray60);
        double double74 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-1820.0d) + "'", double24 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 5214.25d + "'", double32 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.5919401533569089d + "'", double37 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 100.0d + "'", double53 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + (-2.579976173587085d) + "'", double55 == (-2.579976173587085d));
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 100.0d + "'", double62 == 100.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 12706.0d + "'", double63 == 12706.0d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + (-1820.0d) + "'", double69 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 679.5833333333334d + "'", double71 == 679.5833333333334d);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.5801210456783388d + "'", double72 == 0.5801210456783388d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 1.5533732021085067d + "'", double73 == 1.5533732021085067d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 12706.0d + "'", double74 == 12706.0d);
    }

    @Test
    public void test896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test896");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution5 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution7 = distributionFactory0.createExponentialDistribution(2.2065780869162666E-7d);
        org.apache.commons.math.distribution.CauchyDistribution cauchyDistribution10 = distributionFactory0.createCauchyDistribution((double) (short) 0, 152.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.NormalDistribution normalDistribution13 = distributionFactory0.createNormalDistribution(3.585268863716878E-23d, (double) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Standard deviation must be positive.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(normalDistribution5);
        org.junit.Assert.assertNotNull(exponentialDistribution7);
        org.junit.Assert.assertNotNull(cauchyDistribution10);
    }

    @Test
    public void test897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test897");
        java.lang.Object[] objArray3 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("", objArray3);
        java.lang.Object[] objArray7 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("", objArray7);
        java.lang.Object[] objArray11 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("", objArray11);
        mathException8.addSuppressed((java.lang.Throwable) mathException12);
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException12);
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray16 = mathException15.getSuppressed();
        mathException14.addSuppressed((java.lang.Throwable) mathException15);
        java.lang.String str18 = mathException15.getPattern();
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", objArray3, (java.lang.Throwable) mathException15);
        java.lang.Throwable[] throwableArray20 = mathException15.getSuppressed();
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException();
        java.lang.Object[] objArray26 = mathException25.getArguments();
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("hi!", objArray26);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray29 = mathException28.getSuppressed();
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException28);
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException();
        java.lang.Object[] objArray32 = mathException31.getArguments();
        mathException28.addSuppressed((java.lang.Throwable) mathException31);
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException", objArray26, (java.lang.Throwable) mathException28);
        java.lang.Throwable[] throwableArray35 = mathException28.getSuppressed();
        org.apache.commons.math.MathException mathException37 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray38 = mathException37.getSuppressed();
        java.lang.Object[] objArray41 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("", objArray41);
        java.lang.Object[] objArray45 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException46 = new org.apache.commons.math.MathException("", objArray45);
        mathException42.addSuppressed((java.lang.Throwable) mathException46);
        java.lang.Object[] objArray50 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("", objArray50);
        java.lang.Object[] objArray54 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("", objArray54);
        mathException51.addSuppressed((java.lang.Throwable) mathException55);
        mathException42.addSuppressed((java.lang.Throwable) mathException55);
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) throwableArray38, (java.lang.Throwable) mathException42);
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", (java.lang.Object[]) throwableArray35, (java.lang.Throwable) mathException58);
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("", (java.lang.Throwable) mathException59);
        mathException15.addSuppressed((java.lang.Throwable) mathException59);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[1225.0]");
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[1225.0]");
    }

    @Test
    public void test898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test898");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        double double5 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1, (int) (byte) 0, (int) (byte) 0);
        double double9 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        double double11 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 3.5553480614894135d);
        double double12 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 35.0d + "'", double4 == 35.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 35.0d + "'", double5 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test899");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution21 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double30 = tTestImpl22.t((double) 1.0f, doubleArray28);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double37 = org.apache.commons.math.stat.StatUtils.max(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray35);
        double double39 = tTestImpl0.pairedT(doubleArray28, doubleArray35);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl40 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray45 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double46 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray45);
        double double47 = org.apache.commons.math.stat.StatUtils.max(doubleArray45);
        double[] doubleArray52 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double53 = org.apache.commons.math.stat.StatUtils.product(doubleArray52);
        double[] doubleArray58 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double59 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray58);
        double double61 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray52, doubleArray58, (double) 10.0f);
        double double62 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray52);
        double double63 = tTestImpl40.t(doubleArray45, doubleArray52);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl64 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray70 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double71 = org.apache.commons.math.stat.StatUtils.product(doubleArray70);
        double[] doubleArray76 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double77 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray76);
        double double79 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray70, doubleArray76, (double) 10.0f);
        double double80 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray70);
        double double83 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray70, (int) (short) 1, (int) (short) 0);
        double double84 = tTestImpl64.t((double) 1, doubleArray70);
        double double85 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray70);
        double double88 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray70, (int) (short) 0, (int) (short) 0);
        double double89 = tTestImpl0.homoscedasticT(doubleArray52, doubleArray70);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary90 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary91 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double92 = tTestImpl0.t(statisticalSummary90, statisticalSummary91);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.539663200366486d + "'", double30 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 12706.0d + "'", double38 == 12706.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 100.0d + "'", double47 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + (-1820.0d) + "'", double53 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 5214.25d + "'", double61 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.5943989439169762d + "'", double63 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + (-1820.0d) + "'", double71 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 5214.25d + "'", double79 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 1.5919401533569089d + "'", double84 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 3931.0d + "'", double85 == 3931.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double88));
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
    }

    @Test
    public void test900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test900");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.0d, (double) 10L);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution7 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution10 = distributionFactory0.createGammaDistribution(100.0d, 34.99999999999999d);
        org.apache.commons.math.distribution.FDistribution fDistribution13 = distributionFactory0.createFDistribution(1.0d, (double) 100L);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution14 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.FDistribution fDistribution17 = distributionFactory0.createFDistribution((double) 10.0f, 0.7249563298587571d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution7);
        org.junit.Assert.assertNotNull(gammaDistribution10);
        org.junit.Assert.assertNotNull(fDistribution13);
        org.junit.Assert.assertNotNull(normalDistribution14);
        org.junit.Assert.assertNotNull(fDistribution17);
    }

    @Test
    public void test901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test901");
        org.apache.commons.math.MathException mathException2 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray3 = mathException2.getSuppressed();
        java.lang.Object[] objArray6 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("", objArray6);
        java.lang.Object[] objArray10 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("", objArray10);
        mathException7.addSuppressed((java.lang.Throwable) mathException11);
        java.lang.Object[] objArray15 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("", objArray15);
        java.lang.Object[] objArray19 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("", objArray19);
        mathException16.addSuppressed((java.lang.Throwable) mathException20);
        mathException7.addSuppressed((java.lang.Throwable) mathException20);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) throwableArray3, (java.lang.Throwable) mathException7);
        java.lang.Object[] objArray24 = mathException7.getArguments();
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray24);
        java.lang.String str26 = mathException25.getPattern();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[1225.0]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "org.apache.commons.math.MathException: " + "'", str26, "org.apache.commons.math.MathException: ");
    }

    @Test
    public void test902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test902");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        double[] doubleArray37 = new double[] { '4', (byte) 10, (byte) 10, (byte) 10, (short) 1, 1.0d };
        double double40 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray37, 0, (int) (short) 1);
        double[] doubleArray42 = new double[] { '#' };
        double double43 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray42);
        double double44 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray42);
        double double45 = org.apache.commons.math.stat.StatUtils.min(doubleArray42);
        double double49 = org.apache.commons.math.stat.StatUtils.variance(doubleArray42, 0.0d, (int) (short) 0, 0);
        double double50 = org.apache.commons.math.stat.StatUtils.min(doubleArray42);
        double double52 = org.apache.commons.math.stat.StatUtils.variance(doubleArray42, (double) (-1.0f));
        // The following exception was thrown during execution in test generation
        try {
            double double53 = tTestImpl1.t(doubleArray37, doubleArray42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[52.0, 10.0, 10.0, 10.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 52.00000000000001d + "'", double40 == 52.00000000000001d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[35.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1225.0d + "'", double43 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1225.0d + "'", double44 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 35.0d + "'", double45 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 35.0d + "'", double50 == 35.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
    }

    @Test
    public void test903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test903");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 0.0d, (int) (short) 0, 0);
        double double9 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double10 = org.apache.commons.math.stat.StatUtils.max(doubleArray1);
        double double12 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 36.0d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 35.0d + "'", double4 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 34.99999999999999d + "'", double9 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test904");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray6 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double7 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double14 = org.apache.commons.math.stat.StatUtils.max(doubleArray12);
        double double15 = tTestImpl1.pairedT(doubleArray6, doubleArray12);
        double double17 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray12, 0.03982783727702899d);
        double double18 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray12);
        double double19 = org.apache.commons.math.stat.StatUtils.mean(doubleArray12);
        double double22 = org.apache.commons.math.stat.StatUtils.max(doubleArray12, (int) (byte) 1, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double25 = org.apache.commons.math.stat.StatUtils.variance(doubleArray12, 100, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 12706.0d + "'", double18 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 38.0d + "'", double19 == 38.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
    }

    @Test
    public void test905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test905");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution1 = null;
        tTestImpl0.setDistribution(tDistribution1);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl3 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray9 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double10 = org.apache.commons.math.stat.StatUtils.product(doubleArray9);
        double[] doubleArray15 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray15);
        double double18 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray9, doubleArray15, (double) 10.0f);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray9);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray9, (int) (short) 1, (int) (short) 0);
        double double23 = tTestImpl3.t((double) 1, doubleArray9);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double30 = org.apache.commons.math.stat.StatUtils.max(doubleArray28);
        double double31 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray28);
        double double32 = org.apache.commons.math.stat.StatUtils.variance(doubleArray28);
        org.apache.commons.math.distribution.TDistribution tDistribution33 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl34 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution33);
        double[] doubleArray40 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double41 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray40);
        double double42 = tTestImpl34.t((double) 1.0f, doubleArray40);
        double double43 = tTestImpl3.t(doubleArray28, doubleArray40);
        double[] doubleArray48 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double49 = org.apache.commons.math.stat.StatUtils.product(doubleArray48);
        double[] doubleArray54 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double55 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray54);
        double double57 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray48, doubleArray54, (double) 10.0f);
        double double58 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray48);
        double double61 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray48, (int) (short) 1, (int) (short) 0);
        double double62 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray48);
        double double63 = tTestImpl0.pairedT(doubleArray28, doubleArray48);
        double[] doubleArray66 = new double[] { '#' };
        double double67 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray66);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean69 = tTestImpl0.tTest(0.1177019708001247d, doubleArray66, 0.22127614024118358d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-1820.0d) + "'", double10 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 5214.25d + "'", double18 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.5919401533569089d + "'", double23 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 100.0d + "'", double30 == 100.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 12706.0d + "'", double31 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 2310.0d + "'", double32 == 2310.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.539663200366486d + "'", double42 == 1.539663200366486d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + (-1820.0d) + "'", double49 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 5214.25d + "'", double57 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 3931.0d + "'", double62 == 3931.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.4500776384309941d + "'", double63 == 0.4500776384309941d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[35.0]");
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 1225.0d + "'", double67 == 1225.0d);
    }

    @Test
    public void test906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test906");
        double[] doubleArray4 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double5 = org.apache.commons.math.stat.StatUtils.product(doubleArray4);
        double[] doubleArray10 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double11 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray10);
        double double13 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray4, doubleArray10, (double) 10.0f);
        double double14 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray4);
        double[] doubleArray19 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double20 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray19);
        double double21 = org.apache.commons.math.stat.StatUtils.max(doubleArray19);
        double double22 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray19);
        double[] doubleArray27 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double28 = org.apache.commons.math.stat.StatUtils.product(doubleArray27);
        double[] doubleArray33 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double34 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray33);
        double double36 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray27, doubleArray33, (double) 10.0f);
        double double37 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray27);
        double double40 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray27, (int) (short) 1, (int) (short) 0);
        double double41 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray19, doubleArray27);
        double double42 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray4, doubleArray19);
        double double43 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1820.0d) + "'", double5 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 5214.25d + "'", double13 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 12706.0d + "'", double22 == 12706.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-1820.0d) + "'", double28 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 5214.25d + "'", double36 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 16.25d + "'", double41 == 16.25d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + (-16.25d) + "'", double42 == (-16.25d));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
    }

    @Test
    public void test907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test907");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution22 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl23 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution22);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double[] doubleArray34 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        double double36 = org.apache.commons.math.stat.StatUtils.max(doubleArray34);
        double double37 = tTestImpl23.pairedT(doubleArray28, doubleArray34);
        double double38 = tTestImpl0.t(100.0d, doubleArray34);
        double[] doubleArray43 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double44 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray43);
        double double45 = org.apache.commons.math.stat.StatUtils.max(doubleArray43);
        double double46 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray43);
        double[] doubleArray51 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double52 = org.apache.commons.math.stat.StatUtils.product(doubleArray51);
        double double54 = org.apache.commons.math.stat.StatUtils.variance(doubleArray51, (double) 10.0f);
        double double55 = tTestImpl0.tTest(doubleArray43, doubleArray51);
        // The following exception was thrown during execution in test generation
        try {
            double double58 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray51, (int) (byte) 10, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-2.579976173587085d) + "'", double38 == (-2.579976173587085d));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 100.0d + "'", double45 == 100.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 12706.0d + "'", double46 == 12706.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-1820.0d) + "'", double52 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 679.5833333333334d + "'", double54 == 679.5833333333334d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.5801210456783388d + "'", double55 == 0.5801210456783388d);
    }

    @Test
    public void test908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test908");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory21 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution22 = distributionFactory21.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution24 = distributionFactory21.createTDistribution(0.8538434429284575d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl25 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution24);
        tTestImpl0.setDistribution(tDistribution24);
        org.apache.commons.math.distribution.TDistribution tDistribution27 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl28 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution27);
        double[] doubleArray34 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double35 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray34);
        double double36 = tTestImpl28.t((double) 1.0f, doubleArray34);
        double[] doubleArray41 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double42 = org.apache.commons.math.stat.StatUtils.product(doubleArray41);
        double[] doubleArray47 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double48 = org.apache.commons.math.stat.StatUtils.product(doubleArray47);
        double[] doubleArray53 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double54 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray53);
        double double56 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray47, doubleArray53, (double) 10.0f);
        double double57 = tTestImpl28.pairedT(doubleArray41, doubleArray47);
        double double58 = org.apache.commons.math.stat.StatUtils.min(doubleArray47);
        org.apache.commons.math.distribution.TDistribution tDistribution59 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl60 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution59);
        double[] doubleArray65 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double66 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray65);
        double[] doubleArray71 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double72 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray71);
        double double73 = org.apache.commons.math.stat.StatUtils.max(doubleArray71);
        double double74 = tTestImpl60.pairedT(doubleArray65, doubleArray71);
        double double75 = org.apache.commons.math.stat.StatUtils.max(doubleArray71);
        double double76 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray71);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean78 = tTestImpl0.pairedTTest(doubleArray47, doubleArray71, 6.109428088468881d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 6.109428088468881");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(distributionFactory21);
        org.junit.Assert.assertNotNull(normalDistribution22);
        org.junit.Assert.assertNotNull(tDistribution24);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.539663200366486d + "'", double36 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + (-1820.0d) + "'", double42 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + (-1820.0d) + "'", double48 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 5214.25d + "'", double56 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + (-1.0d) + "'", double58 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 100.0d + "'", double73 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 100.0d + "'", double75 == 100.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 12706.0d + "'", double76 == 12706.0d);
    }

    @Test
    public void test909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test909");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        tDistribution34.setDegreesOfFreedom((double) 1L);
        double double39 = tDistribution34.getDegreesOfFreedom();
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl40 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution34);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory41 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution42 = distributionFactory41.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution44 = distributionFactory41.createTDistribution(0.8538434429284575d);
        double double45 = tDistribution44.getDegreesOfFreedom();
        double double46 = tDistribution44.getDegreesOfFreedom();
        tTestImpl40.setDistribution(tDistribution44);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary48 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary49 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double50 = tTestImpl40.homoscedasticTTest(statisticalSummary48, statisticalSummary49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(distributionFactory41);
        org.junit.Assert.assertNotNull(normalDistribution42);
        org.junit.Assert.assertNotNull(tDistribution44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.8538434429284575d + "'", double45 == 0.8538434429284575d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.8538434429284575d + "'", double46 == 0.8538434429284575d);
    }

    @Test
    public void test910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test910");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution6 = distributionFactory0.createNormalDistribution(0.0d, (double) 10L);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution7 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution10 = distributionFactory0.createGammaDistribution(100.0d, 34.99999999999999d);
        org.apache.commons.math.distribution.FDistribution fDistribution13 = distributionFactory0.createFDistribution(1.0d, (double) 100L);
        org.apache.commons.math.distribution.NormalDistribution normalDistribution16 = distributionFactory0.createNormalDistribution(10.858998997563567d, (double) 100);
        org.apache.commons.math.distribution.ExponentialDistribution exponentialDistribution18 = distributionFactory0.createExponentialDistribution((double) 'a');
        org.apache.commons.math.distribution.FDistribution fDistribution21 = distributionFactory0.createFDistribution((double) (short) 100, 0.9999995d);
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution6);
        org.junit.Assert.assertNotNull(normalDistribution7);
        org.junit.Assert.assertNotNull(gammaDistribution10);
        org.junit.Assert.assertNotNull(fDistribution13);
        org.junit.Assert.assertNotNull(normalDistribution16);
        org.junit.Assert.assertNotNull(exponentialDistribution18);
        org.junit.Assert.assertNotNull(fDistribution21);
    }

    @Test
    public void test911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test911");
        double[] doubleArray4 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double5 = org.apache.commons.math.stat.StatUtils.product(doubleArray4);
        double double7 = org.apache.commons.math.stat.StatUtils.variance(doubleArray4, (double) 10.0f);
        double double8 = org.apache.commons.math.stat.StatUtils.min(doubleArray4);
        double double9 = org.apache.commons.math.stat.StatUtils.min(doubleArray4);
        double double10 = org.apache.commons.math.stat.StatUtils.max(doubleArray4);
        // The following exception was thrown during execution in test generation
        try {
            double double12 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray4, (-0.4500776384309941d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid quantile value: -0.4500776384309941");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-1820.0d) + "'", double5 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 679.5833333333334d + "'", double7 == 679.5833333333334d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.0d) + "'", double8 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.0d) + "'", double9 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 52.0d + "'", double10 == 52.0d);
    }

    @Test
    public void test912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test912");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException();
        java.lang.Throwable[] throwableArray2 = mathException1.getSuppressed();
        java.lang.Object[] objArray5 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException6 = new org.apache.commons.math.MathException("", objArray5);
        java.lang.Object[] objArray9 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("", objArray9);
        mathException6.addSuppressed((java.lang.Throwable) mathException10);
        java.lang.Object[] objArray14 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("", objArray14);
        java.lang.Object[] objArray18 = new java.lang.Object[] { 1225.0d };
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("", objArray18);
        mathException15.addSuppressed((java.lang.Throwable) mathException19);
        mathException6.addSuppressed((java.lang.Throwable) mathException19);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) throwableArray2, (java.lang.Throwable) mathException6);
        java.lang.Throwable[] throwableArray23 = mathException6.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[1225.0]");
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[1225.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[1225.0]");
        org.junit.Assert.assertNotNull(throwableArray23);
    }

    @Test
    public void test913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test913");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        double double8 = org.apache.commons.math.stat.StatUtils.variance(doubleArray1, 0.0d, (int) (short) 0, 0);
        double double9 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray1);
        double double10 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray1);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl11 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution12 = null;
        tTestImpl11.setDistribution(tDistribution12);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl14 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray20);
        double double33 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray20, (int) (short) 1, (int) (short) 0);
        double double34 = tTestImpl14.t((double) 1, doubleArray20);
        double[] doubleArray39 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double40 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray39);
        double double41 = org.apache.commons.math.stat.StatUtils.max(doubleArray39);
        double double42 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray39);
        double double43 = org.apache.commons.math.stat.StatUtils.variance(doubleArray39);
        org.apache.commons.math.distribution.TDistribution tDistribution44 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl45 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution44);
        double[] doubleArray51 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double52 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray51);
        double double53 = tTestImpl45.t((double) 1.0f, doubleArray51);
        double double54 = tTestImpl14.t(doubleArray39, doubleArray51);
        double[] doubleArray59 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double60 = org.apache.commons.math.stat.StatUtils.product(doubleArray59);
        double[] doubleArray65 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double66 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray65);
        double double68 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray59, doubleArray65, (double) 10.0f);
        double double69 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray59);
        double double72 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray59, (int) (short) 1, (int) (short) 0);
        double double73 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray59);
        double double74 = tTestImpl11.pairedT(doubleArray39, doubleArray59);
        // The following exception was thrown during execution in test generation
        try {
            double double75 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray1, doubleArray59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input arrays must have the same (positive) length.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 35.0d + "'", double4 == 35.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 34.99999999999999d + "'", double9 == 34.99999999999999d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 3.5553480614894135d + "'", double10 == 3.5553480614894135d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.5919401533569089d + "'", double34 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 100.0d + "'", double41 == 100.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 12706.0d + "'", double42 == 12706.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 2310.0d + "'", double43 == 2310.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.539663200366486d + "'", double53 == 1.539663200366486d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + (-1820.0d) + "'", double60 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 5214.25d + "'", double68 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 3931.0d + "'", double73 == 3931.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.4500776384309941d + "'", double74 == 0.4500776384309941d);
    }

    @Test
    public void test914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test914");
        double[] doubleArray1 = new double[] { '#' };
        double double2 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double3 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray1);
        double double4 = org.apache.commons.math.stat.StatUtils.min(doubleArray1);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl5 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray11 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double12 = org.apache.commons.math.stat.StatUtils.product(doubleArray11);
        double[] doubleArray17 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double18 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray17);
        double double20 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray11, doubleArray17, (double) 10.0f);
        double double21 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray11);
        double double24 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray11, (int) (short) 1, (int) (short) 0);
        double double25 = tTestImpl5.t((double) 1, doubleArray11);
        double double26 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray11);
        double double27 = org.apache.commons.math.stat.StatUtils.product(doubleArray11);
        // The following exception was thrown during execution in test generation
        try {
            double double28 = org.apache.commons.math.stat.StatUtils.sumDifference(doubleArray1, doubleArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input arrays must have the same (positive) length.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[35.0]");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1225.0d + "'", double2 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1225.0d + "'", double3 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 35.0d + "'", double4 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-1820.0d) + "'", double12 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 5214.25d + "'", double20 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.5919401533569089d + "'", double25 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 3931.0d + "'", double26 == 3931.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-1820.0d) + "'", double27 == (-1820.0d));
    }

    @Test
    public void test915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test915");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution21 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double30 = tTestImpl22.t((double) 1.0f, doubleArray28);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double37 = org.apache.commons.math.stat.StatUtils.max(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray35);
        double double39 = tTestImpl0.pairedT(doubleArray28, doubleArray35);
        org.apache.commons.math.distribution.TDistribution tDistribution40 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl41 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution40);
        double[] doubleArray47 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double48 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47);
        double double49 = tTestImpl41.t((double) 1.0f, doubleArray47);
        double[] doubleArray54 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double55 = org.apache.commons.math.stat.StatUtils.product(doubleArray54);
        double[] doubleArray60 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double61 = org.apache.commons.math.stat.StatUtils.product(doubleArray60);
        double[] doubleArray66 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double67 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray66);
        double double69 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray60, doubleArray66, (double) 10.0f);
        double double70 = tTestImpl41.pairedT(doubleArray54, doubleArray60);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory71 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution72 = distributionFactory71.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution74 = distributionFactory71.createTDistribution(0.8538434429284575d);
        double double75 = tDistribution74.getDegreesOfFreedom();
        tTestImpl41.setDistribution(tDistribution74);
        tDistribution74.setDegreesOfFreedom((double) 1L);
        tTestImpl0.setDistribution(tDistribution74);
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary80 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary81 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double82 = tTestImpl0.homoscedasticTTest(statisticalSummary80, statisticalSummary81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.539663200366486d + "'", double30 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 12706.0d + "'", double38 == 12706.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.539663200366486d + "'", double49 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + (-1820.0d) + "'", double55 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + (-1820.0d) + "'", double61 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 5214.25d + "'", double69 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertNotNull(distributionFactory71);
        org.junit.Assert.assertNotNull(normalDistribution72);
        org.junit.Assert.assertNotNull(tDistribution74);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.8538434429284575d + "'", double75 == 0.8538434429284575d);
    }

    @Test
    public void test916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test916");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution1 = null;
        tTestImpl0.setDistribution(tDistribution1);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl3 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray9 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double10 = org.apache.commons.math.stat.StatUtils.product(doubleArray9);
        double[] doubleArray15 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray15);
        double double18 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray9, doubleArray15, (double) 10.0f);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray9);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray9, (int) (short) 1, (int) (short) 0);
        double double23 = tTestImpl3.t((double) 1, doubleArray9);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory24 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution25 = distributionFactory24.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution27 = distributionFactory24.createTDistribution(0.8538434429284575d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl28 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution27);
        tTestImpl3.setDistribution(tDistribution27);
        tTestImpl0.setDistribution(tDistribution27);
        double double31 = tDistribution27.getDegreesOfFreedom();
        double double32 = tDistribution27.getDegreesOfFreedom();
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-1820.0d) + "'", double10 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 5214.25d + "'", double18 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.5919401533569089d + "'", double23 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(distributionFactory24);
        org.junit.Assert.assertNotNull(normalDistribution25);
        org.junit.Assert.assertNotNull(tDistribution27);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.8538434429284575d + "'", double31 == 0.8538434429284575d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.8538434429284575d + "'", double32 == 0.8538434429284575d);
    }

    @Test
    public void test917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test917");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray5 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double6 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray5);
        double double7 = org.apache.commons.math.stat.StatUtils.max(doubleArray5);
        double[] doubleArray12 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double13 = org.apache.commons.math.stat.StatUtils.product(doubleArray12);
        double[] doubleArray18 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray18);
        double double21 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray12, doubleArray18, (double) 10.0f);
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double23 = tTestImpl0.t(doubleArray5, doubleArray12);
        double[] doubleArray29 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double30 = org.apache.commons.math.stat.StatUtils.product(doubleArray29);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray29, doubleArray35, (double) 10.0f);
        double double39 = tTestImpl0.tTest(5214.25d, doubleArray35);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl41 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray47 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double48 = org.apache.commons.math.stat.StatUtils.product(doubleArray47);
        double[] doubleArray53 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double54 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray53);
        double double56 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray47, doubleArray53, (double) 10.0f);
        double double57 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47);
        double double60 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47, (int) (short) 1, (int) (short) 0);
        double double61 = tTestImpl41.t((double) 1, doubleArray47);
        double double62 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray47);
        double double63 = tTestImpl0.tTest((double) 10.0f, doubleArray47);
        // The following exception was thrown during execution in test generation
        try {
            double double66 = org.apache.commons.math.stat.StatUtils.variance(doubleArray47, 100, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1820.0d) + "'", double13 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 5214.25d + "'", double21 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.5943989439169762d + "'", double23 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1820.0d) + "'", double30 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 5214.25d + "'", double38 == 5214.25d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2.2065780869162666E-7d + "'", double39 == 2.2065780869162666E-7d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + (-1820.0d) + "'", double48 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 5214.25d + "'", double56 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1.5919401533569089d + "'", double61 == 1.5919401533569089d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 3931.0d + "'", double62 == 3931.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.433786033254294d + "'", double63 == 0.433786033254294d);
    }

    @Test
    public void test918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test918");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = null;
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean4 = tTestImpl0.tTest(statisticalSummary1, statisticalSummary2, 84.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bad significance level: 84.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test919");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution1 = null;
        tTestImpl0.setDistribution(tDistribution1);
        org.apache.commons.math.distribution.TDistribution tDistribution3 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl4 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution3);
        double[] doubleArray10 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double11 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray10);
        double double12 = tTestImpl4.t((double) 1.0f, doubleArray10);
        double[] doubleArray17 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double18 = org.apache.commons.math.stat.StatUtils.product(doubleArray17);
        double[] doubleArray23 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double24 = org.apache.commons.math.stat.StatUtils.product(doubleArray23);
        double[] doubleArray29 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double30 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray29);
        double double32 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray23, doubleArray29, (double) 10.0f);
        double double33 = tTestImpl4.pairedT(doubleArray17, doubleArray23);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory34 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution35 = distributionFactory34.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution37 = distributionFactory34.createTDistribution(0.8538434429284575d);
        double double38 = tDistribution37.getDegreesOfFreedom();
        tTestImpl4.setDistribution(tDistribution37);
        org.apache.commons.math.distribution.TDistribution tDistribution40 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl41 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution40);
        double[] doubleArray47 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double48 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47);
        double double49 = tTestImpl41.t((double) 1.0f, doubleArray47);
        double[] doubleArray54 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double55 = org.apache.commons.math.stat.StatUtils.product(doubleArray54);
        double[] doubleArray60 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double61 = org.apache.commons.math.stat.StatUtils.product(doubleArray60);
        double[] doubleArray66 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double67 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray66);
        double double69 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray60, doubleArray66, (double) 10.0f);
        double double70 = tTestImpl41.pairedT(doubleArray54, doubleArray60);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory71 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution72 = distributionFactory71.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution74 = distributionFactory71.createTDistribution(0.8538434429284575d);
        double double75 = tDistribution74.getDegreesOfFreedom();
        tTestImpl41.setDistribution(tDistribution74);
        tDistribution74.setDegreesOfFreedom((double) 1L);
        tTestImpl4.setDistribution(tDistribution74);
        double double81 = tDistribution74.cumulativeProbability(0.21195550612870484d);
        tTestImpl0.setDistribution(tDistribution74);
        double[] doubleArray85 = new double[] { '#' };
        double double86 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray85);
        double double87 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray85);
        double double88 = org.apache.commons.math.stat.StatUtils.product(doubleArray85);
        double double89 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray85);
        double double91 = org.apache.commons.math.stat.StatUtils.percentile(doubleArray85, (double) 100.0f);
        double double92 = org.apache.commons.math.stat.StatUtils.geometricMean(doubleArray85);
        // The following exception was thrown during execution in test generation
        try {
            double double93 = tTestImpl0.tTest(10.858998997563567d, doubleArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.539663200366486d + "'", double12 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-1820.0d) + "'", double18 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-1820.0d) + "'", double24 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 5214.25d + "'", double32 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(distributionFactory34);
        org.junit.Assert.assertNotNull(normalDistribution35);
        org.junit.Assert.assertNotNull(tDistribution37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.8538434429284575d + "'", double38 == 0.8538434429284575d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.539663200366486d + "'", double49 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + (-1820.0d) + "'", double55 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + (-1820.0d) + "'", double61 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 5214.25d + "'", double69 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertNotNull(distributionFactory71);
        org.junit.Assert.assertNotNull(normalDistribution72);
        org.junit.Assert.assertNotNull(tDistribution74);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.8538434429284575d + "'", double75 == 0.8538434429284575d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.5664835927122979d + "'", double81 == 0.5664835927122979d);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[35.0]");
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1225.0d + "'", double86 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 1225.0d + "'", double87 == 1225.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 35.0d + "'", double88 == 35.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 3.5553480614894135d + "'", double89 == 3.5553480614894135d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 35.0d + "'", double91 == 35.0d);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 34.99999999999999d + "'", double92 == 34.99999999999999d);
    }

    @Test
    public void test920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test920");
        org.apache.commons.math.distribution.DistributionFactory distributionFactory0 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.GammaDistribution gammaDistribution3 = distributionFactory0.createGammaDistribution((double) 1.0f, (double) '4');
        org.apache.commons.math.distribution.NormalDistribution normalDistribution4 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution5 = distributionFactory0.createNormalDistribution();
        org.apache.commons.math.distribution.PoissonDistribution poissonDistribution7 = distributionFactory0.createPoissonDistribution((double) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.distribution.GammaDistribution gammaDistribution10 = distributionFactory0.createGammaDistribution((double) (byte) -1, (double) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: alpha must be positive");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(distributionFactory0);
        org.junit.Assert.assertNotNull(gammaDistribution3);
        org.junit.Assert.assertNotNull(normalDistribution4);
        org.junit.Assert.assertNotNull(normalDistribution5);
        org.junit.Assert.assertNotNull(poissonDistribution7);
    }

    @Test
    public void test921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test921");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl2 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution3 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl4 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution3);
        double[] doubleArray10 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double11 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray10);
        double double12 = tTestImpl4.t((double) 1.0f, doubleArray10);
        double[] doubleArray17 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double18 = org.apache.commons.math.stat.StatUtils.product(doubleArray17);
        double[] doubleArray23 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double24 = org.apache.commons.math.stat.StatUtils.product(doubleArray23);
        double[] doubleArray29 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double30 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray29);
        double double32 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray23, doubleArray29, (double) 10.0f);
        double double33 = tTestImpl4.pairedT(doubleArray17, doubleArray23);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl34 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray39 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double40 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray39);
        double double41 = org.apache.commons.math.stat.StatUtils.max(doubleArray39);
        double[] doubleArray46 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double47 = org.apache.commons.math.stat.StatUtils.product(doubleArray46);
        double[] doubleArray52 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double53 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray52);
        double double55 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray46, doubleArray52, (double) 10.0f);
        double double56 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray46);
        double double57 = tTestImpl34.t(doubleArray39, doubleArray46);
        double[] doubleArray62 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double63 = org.apache.commons.math.stat.StatUtils.product(doubleArray62);
        double[] doubleArray68 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double69 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray68);
        double double71 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray62, doubleArray68, (double) 10.0f);
        org.apache.commons.math.distribution.TDistribution tDistribution72 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl73 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution72);
        double[] doubleArray78 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double79 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray78);
        double[] doubleArray84 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double85 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray84);
        double double86 = org.apache.commons.math.stat.StatUtils.max(doubleArray84);
        double double87 = tTestImpl73.pairedT(doubleArray78, doubleArray84);
        double double88 = org.apache.commons.math.stat.StatUtils.max(doubleArray84);
        double double89 = org.apache.commons.math.stat.StatUtils.meanDifference(doubleArray62, doubleArray84);
        double double90 = tTestImpl4.homoscedasticT(doubleArray39, doubleArray62);
        double[] doubleArray95 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double96 = org.apache.commons.math.stat.StatUtils.product(doubleArray95);
        double double97 = tTestImpl2.tTest(doubleArray62, doubleArray95);
        double double98 = tTestImpl0.tTest((double) 'a', doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.539663200366486d + "'", double12 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-1820.0d) + "'", double18 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-1820.0d) + "'", double24 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 5214.25d + "'", double32 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 100.0d + "'", double41 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + (-1820.0d) + "'", double47 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 5214.25d + "'", double55 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.5943989439169762d + "'", double57 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + (-1820.0d) + "'", double63 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 5214.25d + "'", double71 == 5214.25d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 100.0d + "'", double86 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 100.0d + "'", double88 == 100.0d);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + (-16.25d) + "'", double89 == (-16.25d));
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.5943989439169762d + "'", double90 == 0.5943989439169762d);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + (-1820.0d) + "'", double96 == (-1820.0d));
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 1.0d + "'", double97 == 1.0d);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 0.010332321644952902d + "'", double98 == 0.010332321644952902d);
    }

    @Test
    public void test922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test922");
        org.apache.commons.math.distribution.TDistribution tDistribution0 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl1 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution0);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        double double9 = tTestImpl1.t((double) 1.0f, doubleArray7);
        double[] doubleArray14 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double15 = org.apache.commons.math.stat.StatUtils.product(doubleArray14);
        double[] doubleArray20 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double21 = org.apache.commons.math.stat.StatUtils.product(doubleArray20);
        double[] doubleArray26 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double27 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray26);
        double double29 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray20, doubleArray26, (double) 10.0f);
        double double30 = tTestImpl1.pairedT(doubleArray14, doubleArray20);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory31 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution32 = distributionFactory31.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution34 = distributionFactory31.createTDistribution(0.8538434429284575d);
        double double35 = tDistribution34.getDegreesOfFreedom();
        tTestImpl1.setDistribution(tDistribution34);
        tDistribution34.setDegreesOfFreedom((double) 1L);
        double double41 = tDistribution34.cumulativeProbability((-1820.0d), 0.5943989439169762d);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl42 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution34);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl43 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution34);
        tDistribution34.setDegreesOfFreedom(5214.25d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.539663200366486d + "'", double9 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1820.0d) + "'", double15 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1820.0d) + "'", double21 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 5214.25d + "'", double29 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(distributionFactory31);
        org.junit.Assert.assertNotNull(normalDistribution32);
        org.junit.Assert.assertNotNull(tDistribution34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.8538434429284575d + "'", double35 == 0.8538434429284575d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.670531799205166d + "'", double41 == 0.670531799205166d);
    }

    @Test
    public void test923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test923");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double1 = org.apache.commons.math.stat.StatUtils.product(doubleArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test924");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution21 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double30 = tTestImpl22.t((double) 1.0f, doubleArray28);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double37 = org.apache.commons.math.stat.StatUtils.max(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray35);
        double double39 = tTestImpl0.pairedT(doubleArray28, doubleArray35);
        org.apache.commons.math.distribution.TDistribution tDistribution40 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl41 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution40);
        double[] doubleArray47 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double48 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47);
        double double49 = tTestImpl41.t((double) 1.0f, doubleArray47);
        double[] doubleArray54 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double55 = org.apache.commons.math.stat.StatUtils.product(doubleArray54);
        double[] doubleArray60 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double61 = org.apache.commons.math.stat.StatUtils.product(doubleArray60);
        double[] doubleArray66 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double67 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray66);
        double double69 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray60, doubleArray66, (double) 10.0f);
        double double70 = tTestImpl41.pairedT(doubleArray54, doubleArray60);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory71 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution72 = distributionFactory71.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution74 = distributionFactory71.createTDistribution(0.8538434429284575d);
        double double75 = tDistribution74.getDegreesOfFreedom();
        tTestImpl41.setDistribution(tDistribution74);
        tDistribution74.setDegreesOfFreedom((double) 1L);
        tTestImpl0.setDistribution(tDistribution74);
        double double80 = tDistribution74.getDegreesOfFreedom();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.539663200366486d + "'", double30 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 12706.0d + "'", double38 == 12706.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.539663200366486d + "'", double49 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + (-1820.0d) + "'", double55 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + (-1820.0d) + "'", double61 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 5214.25d + "'", double69 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertNotNull(distributionFactory71);
        org.junit.Assert.assertNotNull(normalDistribution72);
        org.junit.Assert.assertNotNull(tDistribution74);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.8538434429284575d + "'", double75 == 0.8538434429284575d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 1.0d + "'", double80 == 1.0d);
    }

    @Test
    public void test925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test925");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        org.apache.commons.math.distribution.TDistribution tDistribution1 = null;
        tTestImpl0.setDistribution(tDistribution1);
        double[] doubleArray7 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double8 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray7);
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl9 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray15 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double16 = org.apache.commons.math.stat.StatUtils.product(doubleArray15);
        double[] doubleArray21 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double22 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray21);
        double double24 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray15, doubleArray21, (double) 10.0f);
        double double25 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray15);
        double double28 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray15, (int) (short) 1, (int) (short) 0);
        double double29 = tTestImpl9.t((double) 1, doubleArray15);
        org.apache.commons.math.distribution.TDistribution tDistribution30 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl31 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution30);
        double[] doubleArray37 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double38 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray37);
        double double39 = tTestImpl31.t((double) 1.0f, doubleArray37);
        double[] doubleArray44 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double45 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray44);
        double double46 = org.apache.commons.math.stat.StatUtils.max(doubleArray44);
        double double47 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray44);
        double double48 = tTestImpl9.pairedT(doubleArray37, doubleArray44);
        org.apache.commons.math.distribution.TDistribution tDistribution50 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl51 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution50);
        double[] doubleArray56 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double57 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray56);
        double[] doubleArray62 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double63 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray62);
        double double64 = org.apache.commons.math.stat.StatUtils.max(doubleArray62);
        double double65 = tTestImpl51.pairedT(doubleArray56, doubleArray62);
        double double66 = org.apache.commons.math.stat.StatUtils.max(doubleArray62);
        double double67 = tTestImpl9.tTest(0.9999999999999984d, doubleArray62);
        double double68 = tTestImpl0.homoscedasticT(doubleArray7, doubleArray62);
        double[] doubleArray69 = null;
        double[] doubleArray74 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double75 = org.apache.commons.math.stat.StatUtils.product(doubleArray74);
        double[] doubleArray80 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double81 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray80);
        double double83 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray74, doubleArray80, (double) 10.0f);
        double double84 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray74);
        double double86 = org.apache.commons.math.stat.StatUtils.variance(doubleArray74, (double) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double87 = tTestImpl0.pairedT(doubleArray69, doubleArray74);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: insufficient data for t statistic");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-1820.0d) + "'", double16 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 5214.25d + "'", double24 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.5919401533569089d + "'", double29 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.539663200366486d + "'", double39 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 100.0d + "'", double46 == 100.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 12706.0d + "'", double47 == 12706.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 100.0d + "'", double64 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 100.0d + "'", double66 == 100.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.22127614024118358d + "'", double67 == 0.22127614024118358d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + (-1820.0d) + "'", double75 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 5214.25d + "'", double83 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 679.5833333333334d + "'", double86 == 679.5833333333334d);
    }

    @Test
    public void test926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test926");
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl0 = new org.apache.commons.math.stat.inference.TTestImpl();
        double[] doubleArray6 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double7 = org.apache.commons.math.stat.StatUtils.product(doubleArray6);
        double[] doubleArray12 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double13 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray12);
        double double15 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray6, doubleArray12, (double) 10.0f);
        double double16 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6);
        double double19 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray6, (int) (short) 1, (int) (short) 0);
        double double20 = tTestImpl0.t((double) 1, doubleArray6);
        org.apache.commons.math.distribution.TDistribution tDistribution21 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl22 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution21);
        double[] doubleArray28 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double29 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray28);
        double double30 = tTestImpl22.t((double) 1.0f, doubleArray28);
        double[] doubleArray35 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double36 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray35);
        double double37 = org.apache.commons.math.stat.StatUtils.max(doubleArray35);
        double double38 = org.apache.commons.math.stat.StatUtils.sumSq(doubleArray35);
        double double39 = tTestImpl0.pairedT(doubleArray28, doubleArray35);
        org.apache.commons.math.distribution.TDistribution tDistribution40 = null;
        org.apache.commons.math.stat.inference.TTestImpl tTestImpl41 = new org.apache.commons.math.stat.inference.TTestImpl(tDistribution40);
        double[] doubleArray47 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double48 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray47);
        double double49 = tTestImpl41.t((double) 1.0f, doubleArray47);
        double[] doubleArray54 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double55 = org.apache.commons.math.stat.StatUtils.product(doubleArray54);
        double[] doubleArray60 = new double[] { 35.0d, 1.0f, '4', (byte) -1 };
        double double61 = org.apache.commons.math.stat.StatUtils.product(doubleArray60);
        double[] doubleArray66 = new double[] { (byte) -1, 52.00000000000001d, 1.0f, 100.0d };
        double double67 = org.apache.commons.math.stat.StatUtils.sumLog(doubleArray66);
        double double69 = org.apache.commons.math.stat.StatUtils.varianceDifference(doubleArray60, doubleArray66, (double) 10.0f);
        double double70 = tTestImpl41.pairedT(doubleArray54, doubleArray60);
        org.apache.commons.math.distribution.DistributionFactory distributionFactory71 = org.apache.commons.math.distribution.DistributionFactory.newInstance();
        org.apache.commons.math.distribution.NormalDistribution normalDistribution72 = distributionFactory71.createNormalDistribution();
        org.apache.commons.math.distribution.TDistribution tDistribution74 = distributionFactory71.createTDistribution(0.8538434429284575d);
        double double75 = tDistribution74.getDegreesOfFreedom();
        tTestImpl41.setDistribution(tDistribution74);
        tDistribution74.setDegreesOfFreedom((double) 1L);
        tTestImpl0.setDistribution(tDistribution74);
        double double81 = tDistribution74.inverseCumulativeProbability(3.585268863716878E-23d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-1820.0d) + "'", double7 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5214.25d + "'", double15 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.5919401533569089d + "'", double20 == 1.5919401533569089d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.539663200366486d + "'", double30 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 12706.0d + "'", double38 == 12706.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.539663200366486d + "'", double49 == 1.539663200366486d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + (-1820.0d) + "'", double55 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[35.0, 1.0, 52.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + (-1820.0d) + "'", double61 == (-1820.0d));
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 52.00000000000001, 1.0, 100.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 5214.25d + "'", double69 == 5214.25d);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertNotNull(distributionFactory71);
        org.junit.Assert.assertNotNull(normalDistribution72);
        org.junit.Assert.assertNotNull(tDistribution74);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.8538434429284575d + "'", double75 == 0.8538434429284575d);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + (-1.7976931348623157E308d) + "'", double81 == (-1.7976931348623157E308d));
    }
}

